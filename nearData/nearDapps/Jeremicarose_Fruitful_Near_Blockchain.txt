*GitHub Repository "Jeremicarose/Fruitful_Near_Blockchain"*

'''--- .history/README_19851026111459.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- .history/README_20220906181917.md ---

## Inspiration üí°

Most of the time, Farmers sells there product at a throwing price because of  
For that they will lose a lot of money feeling discourage and this will force them to venture to any othe bussiness.
As a result, there is the need for a secure and efficient system to help farmers and buyers link without any middlemen. 

## ‚ùì What it does üí°
Fruitfull is a decentralized and secure farming marketplace system. Its built on the Near blockchain and securely stores all farm product transaction records.

The avocado products and transaction are securely stored in the ledger and can be accessed by the farmer or the buyer.

First, on the app, either the farmer or the buy will connect their near wallet to the fruitfull app.

If this is the farmer he or she is require to post her product unlike the buyer who can not post. On the other hand the buyer can purchase any ovacados.

## ‚öô How it was built
- React for the frontend
- Near, Rust  Web3 for the Blockchain and smart contracts
- Near for building the smart contracts in Rust programming language
- Near blockchain for the ledger

## üöß Challenges üöß
- Implementing the smart contracts in Rust programming language was a challenge.
- Ran into bugs while building the smart contracts especially while building the  smart contract.

near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

'''
'''--- .history/contract/README_20220906180849.md ---

## Inspiration üí°

Most of the time, Farmers sells there product at a throwing price because of  
For that they will lose a lot of money feeling discourage and this will force them to venture to any othe bussiness.
As a result, there is the need for a secure and efficient system to help farmers and buyers link without any middlemen. 

## ‚ùì What it does üí°
Fruitfull is a decentralized and secure farming marketplace system. Its built on the Near blockchain and securely stores all farm product transaction records.

The avocado products and transaction are securely stored in the ledger and can be accessed by the farmer or the buyer.

First, on the app, either the farmer or the buy will connect their solana wallet to the Zircon app.

The wallet maybe either Phantom or Solflare.

If the its the first time the user is connecting their wallet, the user will be prompted to create add additional details about the hospital.

When the administrator of Hospital A requests the medical records of a patient, the system will send the request to Hospital B.

When the administrator of Hospital B logs on the app, he/she will view the request and respond to it either using a message or sending the medical records or even both.

When the administrator of Hospital A logs on the app, he/she will view the request and see the messages and medical records sent by the other hospital.

## ‚öô How it was built
- React, Next JS and Chakra UI for the frontend
- Phantom, Solflare, Solana Web3 for the Blockchain and smart contracts
- Anchor for building the smart contracts in Rust programming language
- IPFS for storing the medical records.
- Solana blockchain for the ledger

## üöß Challenges üöß
- Implementing the smart contracts in Rust programming language was a challenge.
- Ran into bugs while building the smart contracts especially while building the  smart contract.

## üöÄ Extended Features üöÄ
- Notifications for the medical team administrator to know when the request is made and when the response is received by use email or SMS.

near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- .history/contract/README_20220906181336.md ---

## Inspiration üí°

Most of the time, Farmers sells there product at a throwing price because of  
For that they will lose a lot of money feeling discourage and this will force them to venture to any othe bussiness.
As a result, there is the need for a secure and efficient system to help farmers and buyers link without any middlemen. 

## ‚ùì What it does üí°
Fruitfull is a decentralized and secure farming marketplace system. Its built on the Near blockchain and securely stores all farm product transaction records.

The avocado products and transaction are securely stored in the ledger and can be accessed by the farmer or the buyer.

First, on the app, either the farmer or the buy will connect their near wallet to the fruitfull app.

If this is the farmer he or she is require to post her product unlike the buyer who can not post. On the other hand the buyer can purchase any ovacados.

## ‚öô How it was built
- React for the frontend
- Near, Rust  Web3 for the Blockchain and smart contracts
- Near for building the smart contracts in Rust programming language
- Near blockchain for the ledger

## üöß Challenges üöß
- Implementing the smart contracts in Rust programming language was a challenge.
- Ran into bugs while building the smart contracts especially while building the  smart contract.

near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- .history/contract/scripts/call_20220706193605.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2kg, "expiration": 5/06/2022, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId jere4.testnet
'''
'''--- .history/contract/scripts/call_20220714162059.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
#  near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2kg, "expiration": 5/06/2022, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId jere4.testnet
'''
'''--- .history/contract/scripts/call_20220714162220.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2kg, "expiration": 5/06/2022, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId jere4.testnet
'''
'''--- .history/contract/scripts/call_20220719165643.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  #near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2kg, "expiration": 5/06/2022, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId jere4.testnet
  near call arose.testnet addova '{"price": 5, "quantity":2kg, "expiration": 5/06/2022, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet [--attachDeposit 6] [--gas 0.25]
'''
'''--- .history/contract/scripts/call_20220719173022.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  #near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2kg, "expiration": 5/06/2022, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId jere4.testnet
  near call arose.testnet addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet 
'''
'''--- .history/contract/scripts/call_20220719173629.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId jere4.testnet
  
'''
'''--- .history/contract/scripts/call_20220719174137.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220719174257.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 5, "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220719174450.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": '5', "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220719174629.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220720193727.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{ "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220720194735.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220720200039.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220720200533.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220720200630.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view arose.testnet getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220720200720.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view arose.testnet getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220720200816.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view arose.testnet getovas '{}'

# Add AvocadoProduct to the contract
  near call arose.testnet addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220720200957.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": "5", "quantity":"2kg", "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220721151033.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": 3, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220721151218.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
#near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": 3, "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220721153700.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220721153747.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  
  
'''
'''--- .history/contract/scripts/call_20220722143928.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{}' --accountId arise.testnet
  
'''
'''--- .history/contract/scripts/call_20220722145506.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"5"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220722145732.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id":"5"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220722145844.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id":"0"}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220722150036.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id": 0}' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220722151942.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet
  
'''
'''--- .history/contract/scripts/call_20220722152039.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas '{}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220722152726.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getova '{"0"}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220722152834.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getova '{"id":"0"}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220722153911.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getova '{"id": 1}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 5, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220803145847.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getova '{"id": 1}'

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220803145945.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getova '{"id": 1}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220803145952.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getova '{"id": 1}'

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220803150104.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 5
  
'''
'''--- .history/contract/scripts/call_20220803150433.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
 # near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 8
  
'''
'''--- .history/contract/scripts/call_20220803152900.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 8
  
'''
'''--- .history/contract/scripts/call_20220803152903.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
  near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 8
  
'''
'''--- .history/contract/scripts/call_20220803153003.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
  #near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  #near call $SUB_ACCOUNT buy '{"id":"0" }' --accountId arose.testnet --amount 8
  
'''
'''--- .history/contract/scripts/call_20220803153111.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
  #near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id": 0 }' --accountId arose.testnet --amount 8
  
'''
'''--- .history/contract/scripts/deploy_20220705225850.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near delete $SUB_ACCOUNT $MASTER_ACCOUNT 

near create-account $SUB_ACCOUNT --masterAccount $MASTER_ACCOUNT

near deploy $SUB_ACCOUNT --wasmFile=./res/farm.wasm
'''
'''--- .history/contract/scripts/deploy_20220720200121.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near delete $SUB_ACCOUNT $MASTER_ACCOUNT 

near create-account $SUB_ACCOUNT --masterAccount $MASTER_ACCOUNT

near deploy arose.testnet --wasmFile=./res/farm.wasm
'''
'''--- .history/contract/scripts/deploy_20220720200420.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near delete $SUB_ACCOUNT $MASTER_ACCOUNT 

near create-account $SUB_ACCOUNT --masterAccount $MASTER_ACCOUNT

near deploy arose.testnet --wasmFile=./res/greeter.wasm
'''
'''--- .history/contract/scripts/deploy_20220720200952.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near delete $SUB_ACCOUNT $MASTER_ACCOUNT 

near create-account $SUB_ACCOUNT --masterAccount $MASTER_ACCOUNT

near deploy $SUB_ACCOUNT --wasmFile=./res/greeter.wasm
'''
'''--- .history/contract/src/avocado_product_20220706142848.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    pub price: u8,
    pub quantity: u8,
    pub expiration: u8,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(price: u8, quantity: u8, expiration: u8,value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- .history/contract/src/avocado_product_20220720193921.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    // pub price: u8,
    // pub quantity: u8,
    // pub expiration: u8,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
           
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- .history/contract/src/avocado_product_20220720194100.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    pub price: u8,
    pub quantity: u8,
    pub expiration: u8,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(price: u8, quantity: u8, expiration: u8,value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- .history/contract/src/avocado_product_20220721153229.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    pub price: u8,
    pub quantity: String,
    pub expiration: String,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(price: u8, quantity: String, expiration: String,value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- .history/contract/src/avocado_product_20220721153441.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    pub price: u8,
    pub quantity: u8,
    pub expiration: String,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(price: u8, quantity: u8, expiration: String,value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- .history/contract/src/avocado_product_20220803145001.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    pub price: u64,
    pub quantity: u64,
    pub expiration: String,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(price: u64, quantity: u64, expiration: String,value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- .history/contract/src/lib_20220707105203.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220718153433.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn add(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220718153939.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220719155323.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
                  
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220719175236.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
                  
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220719175723.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
                  
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720193736.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(), 
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
                  
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720193948.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                // price.parse::<u8>().unwrap(), 
                // quantity.parse::<u8>().unwrap(),
                // expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
                  
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720194011.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                // price.parse::<u8>().unwrap(), 
                // quantity.parse::<u8>().unwrap(),
                // expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
                  
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720194100.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id(),
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720195316.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, varieties: String, value_addition: String, location: String, farmer: AccountId) { 
        let index: u64 = self.item.len() + 1;
        self.item.insert(
            &index,
            &Clothe::new(){
                price,
                quantity,
                expiration,
                value_addition,
                varieties,
                location,
                farmer,
            }
            ),
        );
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720195552.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id().unwrap()
            
        
            
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720195657.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id
            
        
            
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720195750.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id()
            
        
            
            
            
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220720200135.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: String, quantity: String, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price.parse::<u8>().unwrap(),
                quantity.parse::<u8>().unwrap(),
                expiration.parse::<u8>().unwrap(),
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220721150130.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: u8, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220721153428.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722145441.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722152252.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap());
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722152513.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722153715.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: u64) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id;
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722153814.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: u64) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id;
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722154028.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220722154034.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u8, quantity: u8, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        self.ova.insert(&index, 
            &AvocadoProduct::new(
                price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
                env::signer_account_id()
     
        ),);
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803144946.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803144953.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u8 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803145104.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803145107.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:String){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id.parse::<u64>().unwrap()).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803150720.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        if(ovas.price as u128) * amount <= (env::attached_deposit()){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803151316.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if(ovas.price as u128) * amount <= (deposit){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803151836.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        //let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if((ovas.price as f64) * 10.0_f64.powf(24.0)) as u128 <= (deposit){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803151840.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id: String) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id.parse::<u64>().unwrap();
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        //let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if((ovas.price as f64) * 10.0_f64.powf(24.0)) as u128 <= (deposit){
            let buyer1 = self.buyer_list(id.parse::<u64>().unwrap());
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id.parse::<u64>().unwrap()).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id.parse::<u64>().unwrap(), &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803152332.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id:u64 ) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id;
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id.parse::<u64>().unwrap()),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g.to_string()));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        //let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if((ovas.price as f64) * 10.0_f64.powf(24.0)) as u128 <= (deposit){
            let buyer1 = self.buyer_list(id);
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id, &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803152618.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id:u64 ) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id;
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g as u64));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        //let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if((ovas.price as f64) * 10.0_f64.powf(24.0)) as u128 <= (deposit){
            let buyer1 = self.buyer_list(id);
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id, &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/contract/src/lib_20220803152622.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id:u64 ) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id;
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g as u64));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        //let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if((ovas.price as f64) * 10.0_f64.powf(24.0)) as u128 <= (deposit){
            let buyer1 = self.buyer_list(id);
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id, &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- .history/package_20220713230934.json ---
{
  "name": "farm-fronted",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.1.3",
    "near-api-js": "^0.45.1",
    "react": "^18.2.0",
    "react-bootstrap": "^2.4.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^4.0.3",
    "react-toastify": "^9.0.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- .history/package_20220713231608.json ---
{
  "name": "farm-fronted",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.1.3",
    "near-api-js": "^0.45.1",
    "react": "^18.2.0",
    "react-bootstrap": "^2.4.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^4.0.3",
    "react-toastify": "^8.1.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- .history/public/index_19851026111459.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- .history/public/index_20220714084203.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>
    <title>Market Places</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- .history/public/index_20220716155027.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>
    <title>Market Places</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- .history/public/index_20220716155109.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="stylesheet" href="index.css">
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>
    <title>Market Places</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- .history/src/App_19851026111459.js ---
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;

'''
'''--- .history/src/App_20220713184525.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import { getProducts } from "./utils/marketplace";
import { login } from "./utils/near";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const fetchProducts = useCallback(async () => {
    if (account.accountId) {
      setProducts(await getProducts());
    }
  });
  useEffect(() => {
    fetchProducts();
  }, []);
  return (
    <>
      {account.accountId ? (
        products.forEach((product) => console.log(product))
      ) : (
        <button onClick={login}>CONNECT WALLET</button>
      )}
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713204318.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import { getProducts } from "./utils/marketplace";
import { login } from "./utils/near";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {account.accountId ? (
        products.forEach((product) => console.log(product))
      ) : (
        <button onClick={login}>CONNECT WALLET</button>
      )}
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713204514.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import { getProducts } from "./utils/marketplace";
import { login } from "./utils/near";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713205323.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import Wallet from "./util/wallet";
import { login } from "./utils/near";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713205553.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import Wallet from "./util/wallet";
import {  Nav } from "react-bootstrap";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713205559.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import Wallet from "./util/wallet";
import {  Nav } from "react-bootstrap";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713205601.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import Wallet from "./util/wallet";
import {  Nav } from "react-bootstrap";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713205953.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import Wallet from "./util/wallet";
import {  Nav } from "react-bootstrap";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713215653.js ---
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;

'''
'''--- .history/src/App_20220713215741.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import { getProducts } from "./utils/marketplace";
import { login } from "./utils/near";

function App() {
  const account = window.walletConnection.account();
  const [products, setProducts] = useState([]);
  const fetchProducts = useCallback(async () => {
    if (account.accountId) {
      setProducts(await getProducts());
    }
  });
  useEffect(() => {
    fetchProducts();
  }, []);
  return (
    <>
      {account.accountId ? (
        products.forEach((product) => console.log(product))
      ) : (
        <button onClick={login}>CONNECT WALLET</button>
      )}
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713222129.js ---
import React, { useCallback, useEffect, useState } from "react";
import "./App.css";
import Wallet from "./util/wallet";
import {  Nav } from "react-bootstrap";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713225303.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
import { Notification } from "./util/Notifications";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713225432.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
import { Notification } from "./util/Notifications";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
     <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
    </>
  );
}

export default App;
'''
'''--- .history/src/App_20220713225612.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
import { Notification } from "./util/Notifications";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
            {/* <main> */}
              {/* <Clothes />
            </main> */}
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220713225842.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
            {/* <main> */}
              {/* <Clothes />
            </main> */}
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714080330.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
// import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
            {/* <main> */}
              {/* <Clothes />
            </main> */}
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714083711.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
// import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import Navigation from "./components/Navigation";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      <Navigation/>
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
            {/* <main> */}
              {/* <Clothes />
            </main> */}
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714103347.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
// import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
            {/* <main> */}
              {/* <Clothes />
            </main> */}
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714113815.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
// import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <AddProduct />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714114439.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
// import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <AddProduct />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714114506.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <AddProduct />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714114553.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
// import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <AddProduct />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714144335.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
//  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <AddProduct />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714144645.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
//  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <AddProduct />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220714163618.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
//  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Products />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220716123342.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
//  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Product />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220716123407.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
//  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Addova />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220716125744.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
      {/* <Notification /> */}
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Products />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220716125918.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
       <Notification /> 
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Products />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/App_20220719122912.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
//import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
       <Notification /> 
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Products />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- .history/src/components/Addova_20220714112249.js ---

'''
'''--- .history/src/components/Addova_20220714112317.js ---
import React, { useState } from "react";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddCloth = ({
  data,
}: {
  data: (
    name: string,
    image: string,
    price: number,
    quantity: number
  ) => Promise<void>;
}) => {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [quantity, setQuantity] = useState(0);
  const [price, setPrice] = useState(0);
  const isFormFilled = () => name && image && quantity && price;

  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i className="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Product</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Product name"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter name of product"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputPrice"
              label="Price"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Price"
                onChange={(e) => {
                  setPrice(+e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputQuantity"
              label="Quantity"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Quantity"
                onChange={(e) => {
                  setQuantity(+e.target.value);
                }}
              />
            </FloatingLabel>
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              data(name, image, Number(price), Number(quantity));
              handleClose();
            }}
          >
            Save product
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default AddCloth;

'''
'''--- .history/src/components/Addova_20220714112623.js ---
import React, { useState } from "react";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddCloth = ({
  data,
}: {
  data: (
    name,
    image,
    price,
    quantity,
  ) => Promise<void>;
}) => {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [quantity, setQuantity] = useState(0);
  const [price, setPrice] = useState(0);
  const isFormFilled = () => name && image && quantity && price;

  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i className="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Product</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Product name"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter name of product"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputPrice"
              label="Price"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Price"
                onChange={(e) => {
                  setPrice(+e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputQuantity"
              label="Quantity"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Quantity"
                onChange={(e) => {
                  setQuantity(+e.target.value);
                }}
              />
            </FloatingLabel>
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              data(name, image, Number(price), Number(quantity));
              handleClose();
            }}
          >
            Save product
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default AddCloth;

'''
'''--- .history/src/components/Addova_20220714112832.js ---
import React, { useState } from "react";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [name, setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i className="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Product</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Product name"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter name of product"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputPrice"
              label="Price"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Price"
                onChange={(e) => {
                  setPrice(+e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputQuantity"
              label="Quantity"
              className="mb-3"
            >
              <Form.Control
                type="number"
                placeholder="Quantity"
                onChange={(e) => {
                  setQuantity(+e.target.value);
                }}
              />
            </FloatingLabel>
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              data(name, image, Number(price), Number(quantity));
              handleClose();
            }}
          >
            Save product
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

export default AddCloth;

'''
'''--- .history/src/components/Addova_20220714113039.js ---
import React, { useState } from "react";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [name, setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>New Product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220714114028.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [name, setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>New Product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220716114756.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";\
const AddProduct = ({ save }) => {
    const [name, setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>New Product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220716120453.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [ , setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>New Product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220716120652.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [name  , setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>New Product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220716123102.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [name  , setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>New Product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220716162331.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [name  , setName] = useState("");
    const [image, setImage] = useState("");
    const [description, setDescription] = useState("");
    const [location, setLocation] = useState("");
    const [price, setPrice] = useState(0);
    const isFormFilled = () => name && image && description && location && price;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputName"
                  label="Product name"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setName(e.target.value);
                    }}
                    placeholder="Enter name of product"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputUrl"
                  label="Image URL"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Image URL"
                    onChange={(e) => {
                      setImage(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputDescription"
                  label="Description"
                  className="mb-3"
                >
                  <Form.Control
                    as="textarea"
                    placeholder="description"
                    style={{ height: "80px" }}
                    onChange={(e) => {
                      setDescription(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Location"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Price"
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    name,
                    image,
                    description,
                    location,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220718145455.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719112444.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
            <Button variant="outline-dark" onClick={handleShow}>
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719112628.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
           <h1>Showcase your product</h1> 
          <Button
            onClick={handleShow}
            variant="outline-dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719113129.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
           <h1>Showcase your product</h1> 
          <Button
            onClick={handleShow}
            variant="outline-dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };

    console.log(save);
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719113213.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    console.log(save)

    return (
        <>
           <h1>Showcase your product</h1> 
          <Button
            onClick={handleShow}
            variant="outline-dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719113859.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h1>Showcase your product</h1> 
          <Button
            onClick={handleShow}
            variant="outline-dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719210635.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="outline-dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220719210700.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220721152944.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState(0);
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220721161313.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220803160203.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="number"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="number"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Addova_20220803160206.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="number"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="number"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- .history/src/components/Navigation_20220714082602.js ---

'''
'''--- .history/src/components/Navigation_20220714082656.js ---
import React from 'react'
import styled from 'styled-components'
import { Link } from 'react-scroll'

const Navigation = () => {

   return (
      <NavigationStyled>
         <div className="logo">
            <img src={logo} alt="" />
         </div>
         <ul>
            <li>
               <Link to="header" spy={true} smooth={true}>Home </Link>
            </li>
            <li>
               <Link to="feathures" spy={true} smooth={true}>Feathures </Link>
            </li>
            <li>
               <Link to="pricing" spy={true} smooth={true}>Pricing </Link>
            </li>
         </ul>
         <PrimaryButton name='Signup' />
      </NavigationStyled>
   )
}

const NavigationStyled = styled.nav`
   display: flex;
   justify-content: space-between;
   align-items: center;
   
   ul{
      display: flex;
      justify-content: space-between;
      width: 40%;
      li{
         cursor: pointer;
      }
   }
`

export default Navigation
'''
'''--- .history/src/components/Navigation_20220714083947.js ---
import React from 'react'
import { Link } from 'react-scroll'

const Navigation = () => {

   return (
      <NavigationStyled>
         <div className="logo">
         </div>
         <ul>
            <li>
               <Link to="header" spy={true} smooth={true}>Home </Link>
            </li>
            <li>
               <Link to="feathures" spy={true} smooth={true}>Feathures </Link>
            </li>
            <li>
               <Link to="pricing" spy={true} smooth={true}>Pricing </Link>
            </li>
         </ul>
         <PrimaryButton name='Signup' />
      </NavigationStyled>
   )
}

const NavigationStyled = styled.nav`
   display: flex;
   justify-content: space-between;
   align-items: center;
   
   ul{
      display: flex;
      justify-content: space-between;
      width: 40%;
      li{
         cursor: pointer;
      }
   }
`

export default Navigation
'''
'''--- .history/src/components/Navigation_20220714084320.js ---
import React from 'react'
import { Link } from 'react-scroll'
import { PrimaryButton } from './PrimaryButton'

const Navigation = () => {

   return (
      <NavigationStyled>
         <div className="logo">
         </div>
         <ul>
            <li>
               <Link to="header" spy={true} smooth={true}>Home </Link>
            </li>
            <li>
               <Link to="feathures" spy={true} smooth={true}>Feathures </Link>
            </li>
            <li>
               <Link to="pricing" spy={true} smooth={true}>Pricing </Link>
            </li>
         </ul>
         <PrimaryButton name='Signup' />
      </NavigationStyled>
   )
}

const NavigationStyled = styled.nav`
   display: flex;
   justify-content: space-between;
   align-items: center;
   
   ul{
      display: flex;
      justify-content: space-between;
      width: 40%;
      li{
         cursor: pointer;
      }
   }
`

export default Navigation
'''
'''--- .history/src/components/Navigation_20220714103045.js ---
// import React from 'react'
// import { Link } from 'react-scroll'
// import { PrimaryButton } from './PrimaryButton'

// const Navigation = () => {

//    return (
//       <NavigationStyled>
//          <div className="logo">
//          </div>
//          <ul>
//             <li>
//                <Link to="header" spy={true} smooth={true}>Home </Link>
//             </li>
//             <li>
//                <Link to="feathures" spy={true} smooth={true}>Feathures </Link>
//             </li>
//             <li>
//                <Link to="pricing" spy={true} smooth={true}>Pricing </Link>
//             </li>
//          </ul>
//          <PrimaryButton name='Signup' />
//       </NavigationStyled>
//    )
// }

// const NavigationStyled = styled.nav`
//    display: flex;
//    justify-content: space-between;
//    align-items: center;
   
//    ul{
//       display: flex;
//       justify-content: space-between;
//       width: 40%;
//       li{
//          cursor: pointer;
//       }
//    }
// `

// export default Navigation
'''
'''--- .history/src/components/PrimaryButton_20220714082934.js ---

'''
'''--- .history/src/components/PrimaryButton_20220714082951.js ---
const PrimaryButton = ({name}) => {
    return (
       <ButtonStyled>
         {name}
       </ButtonStyled>
    )
 }
 
 
 const ButtonStyled=styled.button`
    padding: 0.7rem 2rem;
    background-color: var(--accent-pink);
    border: none;
    outline: none;
    border-radius: 18px;
    color: inherit;
    font-size: 1rem;
    font-family: inherit;
    cursor: pointer;
 `
 
 export default PrimaryButton
'''
'''--- .history/src/components/PrimaryButton_20220714083036.js ---
import React from "react"
const PrimaryButton = ({name}) => {
    return (
       <ButtonStyled>
         {name}
       </ButtonStyled>
    )
 }
 
 
 const ButtonStyled=styled.button`
    padding: 0.7rem 2rem;
    background-color: var(--accent-pink);
    border: none;
    outline: none;
    border-radius: 18px;
    color: inherit;
    font-size: 1rem;
    font-family: inherit;
    cursor: pointer;
 `
 
 export default PrimaryButton
'''
'''--- .history/src/components/PrimaryButton_20220714103014.js ---
// import React from "react"
// const PrimaryButton = ({name}) => {
//     return (
//        <ButtonStyled>
//          {name}
//        </ButtonStyled>
//     )
//  }
 
 
//  const ButtonStyled=styled.button`
//     padding: 0.7rem 2rem;
//     background-color: var(--accent-pink);
//     border: none;
//     outline: none;
//     border-radius: 18px;
//     color: inherit;
//     font-size: 1rem;
//     font-family: inherit;
//     cursor: pointer;
//  `
 
//  export default PrimaryButton
'''
'''--- .history/src/components/Product_20220714163344.js ---

'''
'''--- .history/src/components/Product_20220714163406.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, price, name, description, sold, location, image, owner } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Text className="flex-grow-1 ">{description}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Product_20220718145456.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, name, description, sold, location, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Text className="flex-grow-1 ">{description}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Product_20220718150118.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, value, location, sold, expiration, quantity, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Text className="flex-grow-1 ">{description}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Product_20220718150331.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, value, location, sold, expiration, quantity, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{varieties}</Card.Title>
          <Card.Text className="flex-grow-1 ">{value}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Product_20220718150635.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, value, location, sold, expiration, quantity, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src= "https://images.unsplash.com/photo-1596119415004-be78a87f8d14?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8YXZvY2Fkb3N8ZW58MHx8MHx8&w=1000&q=80" alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{varieties}</Card.Title>
          <Card.Text className="flex-grow-1 ">{value}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Product_20220718151700.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, value, location, sold, expiration, quantity, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{farmer}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src= "https://images.unsplash.com/photo-1596119415004-be78a87f8d14?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8YXZvY2Fkb3N8ZW58MHx8MHx8&w=1000&q=80" alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{varieties}</Card.Title>
          <Card.Text className="flex-grow-1 ">{value}</Card.Text>
          <Card.Text className="flex-grow-1 ">{quantity}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{expiration}</span>
          </Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Product_20220718151813.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, value, location, sold, expiration, quantity, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{farmer}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src= "https://images.unsplash.com/photo-1596119415004-be78a87f8d14?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8YXZvY2Fkb3N8ZW58MHx8MHx8&w=1000&q=80" alt="avocado" style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{varieties}</Card.Title>
          <Card.Text className="flex-grow-1 ">{value}</Card.Text>
          <Card.Text className="flex-grow-1 ">{quantity}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{expiration}</span>
          </Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- .history/src/components/Products_20220714162650.js ---

'''
'''--- .history/src/components/Products_20220714162742.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";
'''
'''--- .history/src/components/Products_20220714162901.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });
'''
'''--- .history/src/components/Products_20220714163008.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };
'''
'''--- .history/src/components/Products_20220714163058.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);
'''
'''--- .history/src/components/Products_20220714163200.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220714164328.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220714164512.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "./util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "./util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716121256.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "./util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "./util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716121606.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "../AddProduct";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716121759.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "../Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716121855.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716122003.js ---
import React, { useEffect, useState, useCallback } from "react";
//import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716125827.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716161537.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
              <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716161710.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
              <img width={100} height={100}
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716161802.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4 color-black">
              <img width={100} height={100}
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220716161858.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4 color-dark">
              <img width={100} height={100}
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718152639.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
      try {
        console.log(id);
        await buy_clothe({
          id,
          price,
        }).then(() => getProducts());
        toast(<NotificationSuccess text="Product bought successfully" />)
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4 color-dark">
              <img width={100} height={100}
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718152933.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4 color-dark">
              <img width={100} height={100}
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718153030.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
    const [products, setProducts] = useState([]);
    const [loading, setLoading] = useState(false);
  
    const getProducts = useCallback(async () => {
      try {
        setLoading(true);
        setProducts(await getProductList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addProduct = async (data) => {
        try {
          setLoading(true);
          createProduct(data).then((resp) => {
            getProducts();
          });
          toast(<NotificationSuccess text="Product added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a product." />);
        } finally {
          setLoading(false);
        }
      };

      const buy = async (id, price) => {
        try {
          await buyProduct({
            id,
            price,
          }).then((resp) => getProducts());
          toast(<NotificationSuccess text="Product bought successfully" />);
        } catch (error) {
          toast(<NotificationError text="Failed to purchase product." />);
        } finally {
          setLoading(false);
        }
      };
      
      useEffect(() => {
        getProducts();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4 color-dark">
              <img width={100} height={100}
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
                <AddProduct save={addProduct} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {products.map((_product) => (
                  <Product
                    product={{
                      ..._product,
                    }}
                    buy={buy}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718155027.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";

import {
  getovas,
  buy_ova,
  addova as createProduct,
} from "../../util/marketplace";
import { toast } from "react-toastify";
const Ovas = () => {
  const [products, setProducts] = useState<
    Array<[string, string, string, string, string, Array<string | null>]>
  >([]);
  const [loading, setLoading] = useState(false);

  // function to get the list of products
  //@ts-ignore
  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getOvas());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  }, [loading, products]);

  const addProduct = async (
    name: string,
    image: string,
    price: number,
    quantity: number
  ) => {
    try {
      setLoading(true);
      createProduct({ name, image, price, quantity })
        .then(() => {
          toast(<NotificationSuccess text="Product added successfully." />);
          getProducts();
        })
        //@ts-ignore
        .catch((ef) => {
          toast(
            <NotificationError text="Something wrong went with your product entry. " />
          );
        });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  //  function to initiate transaction
  const buy = async (id: number, price: number): Promise<void> => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then(() => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      //@ts-ignore
      toast(<NotificationError text={error["kind"]["ExecutionError"]} />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getProducts();
  }, []);
  type props = {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: Array<null | string>;
  };
  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Cloth Market</h1>
            <AddCloth data={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            <>
              {products.map((e, index) => (
                <Product
                  product={{
                    name: e[0],
                    image: e[1],
                    price: e[2],
                    quantity: e[3],
                    vendor: e[4],
                    buyer_list: e[5],
                  }}
                  buy={buy}
                  key={index.toString()}
                  id={index + 1}
                />
              ))}
            </>
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718155136.ts ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";

import {
  getovas,
  buy_ova,
  addova as createProduct,
} from "../../util/marketplace";
import { toast } from "react-toastify";
const Ovas = () => {
  const [products, setProducts] = useState<
    Array<[string, string, string, string, string, Array<string | null>]>
  >([]);
  const [loading, setLoading] = useState(false);

  // function to get the list of products
  //@ts-ignore
  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  }, [loading, products]);

  const addProduct = async (
    name: string,
    image: string,
    price: number,
    quantity: number
  ) => {
    try {
      setLoading(true);
      createProduct({ name, image, price, quantity })
        .then(() => {
          toast(<NotificationSuccess text="Product added successfully." />);
          getProducts();
        })
        //@ts-ignore
        .catch((ef) => {
          toast(
            <NotificationError text="Something wrong went with your product entry. " />
          );
        });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  //  function to initiate transaction
  const buy = async (id: number, price: number): Promise<void> => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then(() => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      //@ts-ignore
      toast(<NotificationError text={error["kind"]["ExecutionError"]} />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getProducts();
  }, []);
  type props = {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: Array<null | string>;
  };
  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Cloth Market</h1>
            <AddCloth data={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            <>
              {products.map((e, index) => (
                <Product
                  product={{
                    name: e[0],
                    image: e[1],
                    price: e[2],
                    quantity: e[3],
                    vendor: e[4],
                    buyer_list: e[5],
                  }}
                  buy={buy}
                  key={index.toString()}
                  id={index + 1}
                />
              ))}
            </>
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718155137.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";

import {
  getovas,
  buy_ova,
  addova as createProduct,
} from "../../util/marketplace";
import { toast } from "react-toastify";
const Ovas = () => {
  const [products, setProducts] = useState<
    Array<[string, string, string, string, string, Array<string | null>]>
  >([]);
  const [loading, setLoading] = useState(false);

  // function to get the list of products
  //@ts-ignore
  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  }, [loading, products]);

  const addProduct = async (
    name: string,
    image: string,
    price: number,
    quantity: number
  ) => {
    try {
      setLoading(true);
      createProduct({ name, image, price, quantity })
        .then(() => {
          toast(<NotificationSuccess text="Product added successfully." />);
          getProducts();
        })
        //@ts-ignore
        .catch((ef) => {
          toast(
            <NotificationError text="Something wrong went with your product entry. " />
          );
        });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  //  function to initiate transaction
  const buy = async (id: number, price: number): Promise<void> => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then(() => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      //@ts-ignore
      toast(<NotificationError text={error["kind"]["ExecutionError"]} />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getProducts();
  }, []);
  type props = {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: Array<null | string>;
  };
  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Cloth Market</h1>
            <AddCloth data={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            <>
              {products.map((e, index) => (
                <Product
                  product={{
                    name: e[0],
                    image: e[1],
                    price: e[2],
                    quantity: e[3],
                    vendor: e[4],
                    buyer_list: e[5],
                  }}
                  buy={buy}
                  key={index.toString()}
                  id={index + 1}
                />
              ))}
            </>
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718202930.ts ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";

import {
  getovas,
  buy_ova,
  addova as createProduct,
} from "../../utils/marketplace";
import { toast } from "react-toastify";
const Ovas = () => {
  const [products, setProducts] = useState<
    Array<[string, string, string, string, string, Array<string | null>]>
  >([]);
  const [loading, setLoading] = useState(false);

  // function to get the list of products
  //@ts-ignore
  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  }, [loading, products]);

  const addProduct = async (
    name: string,
    image: string,
    price: number,
    quantity: number
  ) => {
    try {
      setLoading(true);
      createProduct({ name, image, price, quantity })
        .then(() => {
          toast(<NotificationSuccess text="Product added successfully." />);
          getProducts();
        })
        //@ts-ignore
        .catch((ef) => {
          toast(
            <NotificationError text="Something wrong went with your product entry. " />
          );
        });
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  //  function to initiate transaction
  const buy = async (id: number, price: number): Promise<void> => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then(() => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      //@ts-ignore
      toast(<NotificationError text={error["kind"]["ExecutionError"]} />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getProducts();
  }, []);
  type props = {
    0: string;
    1: string;
    2: string;
    3: string;
    4: string;
    5: Array<null | string>;
  };
  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Cloth Market</h1>
            <AddCloth data={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            <>
              {products.map((e, index) => (
                <Product
                  product={{
                    name: e[0],
                    image: e[1],
                    price: e[2],
                    quantity: e[3],
                    vendor: e[4],
                    buyer_list: e[5],
                  }}
                  buy={buy}
                  key={index.toString()}
                  id={index + 1}
                />
              ))}
            </>
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};
    
    export default Products;
'''
'''--- .history/src/components/Products_20220718203534.ts ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";
'''
'''--- .history/src/components/Products_20220718203602.ts ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });
'''
'''--- .history/src/components/Products_20220718203719.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);
'''
'''--- .history/src/components/Products_20220718203751.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./AddProduct";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718203958.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getProducts as getProductList,
  buyProduct,
  createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718204426.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718204604.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718210417.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718210556.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      createProduct(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718210709.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova 
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718223806.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718223951.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova 
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718223957.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718224009.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova ,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718224120.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notifications";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as createProduct,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718224204.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addova,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Street Food</h1>
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718230719.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addova,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718231248.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addova,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220718231520.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addova,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719112444.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addova,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  console.log(products);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      console.log({ error });
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719113849.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addOva,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  console.log(products);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    console.log(data);
    try {
      setLoading(true);
      addOva(data).then((resp) => {
        getProducts();
      });
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719114344.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addOva,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  console.log(products);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    console.log(data);
    try {
      setLoading(true);
      addOva(data).then((resp) => {
        getProducts();
      });
      console.log(products);
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719114501.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas as getProductList,
  buy_ova as buyProduct,
  addova as addOva,
} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getProductList());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addOva(data).then((resp) => {
        getProducts();
      });
      console.log(getProducts);
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719120320.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova as buyProduct,
  addova as addOva,

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      //console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addOva(data).then((resp) => {
        getProducts();
      });
      console.log(getProducts);
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719120533.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova as buyProduct,
  addova ,

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      //console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        getProducts();
      });
      console.log(getProducts);
      toast(<NotificationSuccess text="Product added successfully." />);
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719120658.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova as buyProduct,
  addova ,

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      //console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(resp);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      await buyProduct({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719121137.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      //console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(resp);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719121737.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      //console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(resp);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      error.message && toast.error(error.message);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719122858.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      //console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      //console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719155315.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719163420.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(products);
    } catch (error) {
      error.message && toast.error(error.message);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(addova);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220719163912.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(addova);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220721161307.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220721224705.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
          style={{backgroundColor: "#f5f5f5"}}>
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220721224726.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
          style={{backgroundColor: "#f5f5f5"}}
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220721224926.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
          style={{backgroundImage: "linear-gradient(to right, #4880EC, #019CAD)"}}
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220721225300.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    //console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
         
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220722081433.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        //console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      //console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      console.log(error)
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
    console.log(getProducts)
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
         
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220722082025.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        //console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      //console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      console.log(error)
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
    console.log(getProducts())
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
         
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/components/Products_20220722135846.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        //console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      //console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      console.log(error)
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
    console.log(getProducts())   
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
         
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- .history/src/index_19851026111459.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- .history/src/index_19851026111459.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- .history/src/index_20220713184657.js ---
import React from 'react';
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- .history/src/index_20220713212709.js ---
import React from 'react';
import ReactDOM from "react-dom/client";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- .history/src/index_20220713212739.js ---
import React from 'react';
import ReactDOM from "react-dom/client";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

window.nearInitPromise = initializeContract()
  .then(() => {
    const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- .history/src/index_20220716133014.css ---
body {
  background-image: url(../public/background-image);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- .history/src/index_20220716133018.css ---
body {
  background-image: url(../public/background-image);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- .history/src/index_20220716133019.css ---
body {
  background-image: url(../public/background-image);
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- .history/src/index_20220716154942.css ---
body {
  background-color: goldenrod;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- .history/src/util/Cover_20220713224959.js ---

'''
'''--- .history/src/util/Cover_20220713225028.js ---
import React from "react";
import { login } from "../../util/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://www.transparentpng.com/thumb/shirt/t0nf0S-t-shirt-transparent-background.png"
            alt=""
          />
        </div>
        <h1>Cloth Market</h1>
        <p>Please connect your wallet to continue.</p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220714073916.js ---
import React from "react";
import { login } from "../../utils/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://www.transparentpng.com/thumb/shirt/t0nf0S-t-shirt-transparent-background.png"
            alt=""
          />
        </div>
        <h1>Cloth Market</h1>
        <p>Please connect your wallet to continue.</p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220714073956.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://www.transparentpng.com/thumb/shirt/t0nf0S-t-shirt-transparent-background.png"
            alt=""
          />
        </div>
        <h1>Cloth Market</h1>
        <p>Please connect your wallet to continue.</p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716114757.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716131943.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716131948.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716131958.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716132000.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716132007.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716132338.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "./src/util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716132441.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "/src/util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716132626.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "src/util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716133028.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
//import "src/util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716133410.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716133440.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716140608.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh"    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
      background-size: 1080px 720px;
      background-repeat: no-repeat;
      background-position: 0px 0px;  }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716140907.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" ,   background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
      ,background-size: 100% auto,
      background-repeat: no-repeat,
      background-position: 0px 0px,  }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716141115.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div id='homcover'
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh"  }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716154115.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div id='homcover'
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh"  }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716154157.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div id='homcover'
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#00000", minHeight: "100vh"  }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716154449.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
//import "../util/cover.css";

const Cover = () => {
  return (
    
    <div className="text-center">
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
        </div>
     
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716154556.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
//import "../util/cover.css";

const Cover = () => {
  return (
    
    <div className="text-center margin-20px">
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
        </div>
     
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716154631.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
//import "../util/cover.css";

const Cover = () => {
  return (
    
    <div className="text-center margin-20px container">
        <h1>We are fruitfull</h1>
      
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
        </div>
     
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716155411.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1 className="text-white">We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716155515.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center cover "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1 className="text-white">We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716155659.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";
import "../util/cover.css";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center cover "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
         
        </div>
        <h1 >We are fruitfull</h1>
        <p></p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716155917.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://www.transparentpng.com/thumb/shirt/t0nf0S-t-shirt-transparent-background.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFULL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716160143.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFULL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220716160514.js ---
import React from "react";
import { login } from "../utils/near";
import { Button } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721211802.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown } from "react-bootstrap";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        
        <Dropdown>
          
        </Dropdown>
        <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Connect Wallet
        </Button>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721213510.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        
        <Dropdown>
          <DropdownToggle>
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
        
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721213602.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        
        <Dropdown>
          <DropdownToggle>
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
        
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721213909.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        
        <Dropdown>
          <DropdownToggle
          variant="light"
          align="end"
          id="dropdown-basic"
          className="d-flex align-items-center border rounded-pill py-1"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
        
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721214110.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        
        <Dropdown>
          <DropdownToggle
          variant="dark"
          align="center"
          className="d-flex align-items-center border rounded-pill py-1"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
        
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721214346.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          align="center"
          className="d-flex align-items-center border rounded-pill py-1"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
        
        <Dropdown>
          <DropdownToggle
          variant="dark"
          align="center"
          className="d-flex align-items-center border rounded-pill py-1"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
        
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721214602.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          align="center"
          className="d-flex align-items-center border rounded-pill py-1"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721214613.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          
          className="d-flex align-items-center border rounded-pill py-1"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721214713.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          
          className="d-flex align-items-center border rounded-pill py-1 margin-20px"
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721214835.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#ffffff", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721215612.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ background: "#63ff97", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721220055.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""
          />
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721220334.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721220929.js ---
import React from "react";
import { login } from "../utils/near";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "./", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721221254.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "./", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721221358.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div className="mt-auto text-dark mb-5">
        <div
          className=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721221605.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p>Farmer connect to your wallet to continue.</p>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721221904.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721222112.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          allign="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721222602.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="center"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721222650.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="center"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721222711.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721222804.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721222946.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5 d-flex justify-content-center">
        <div
          classNames=" ratio ratio-1x1 mx-auto mb-2"
          style={{ maxWidth: "320px" }}
        >
          
        </div>
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721223542.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721223612.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721224155.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown, Spinner } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh",textAlign: "center" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721224215.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh",textAlign: "center" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721224338.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721225254.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{backgroundImage: "linear-gradient(to right, #4880EC, #019CAD)", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721225441.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{backgroundImage: "linear-gradient(to right, #4880EC, #019CAD)", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
        

         

      </div>
      <Dropdown>
          <DropdownToggle
          variant="dark"
          margin="2rem"
          align="end"
          className="d-flex align-items-center border rounded-pill py-1 "
          >
          
              <>
                 <span className="ms-1"> Connect Wallet</span>
              </>
             
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              
            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Farmer Connect
        </Button>

            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>

            <Button
          onClick={login}
          variant="outline-dark"
          className="rounded-pill px-3 mt-3"
        >
          Buyer Connect
        </Button>

            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>

    </div>
    
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721225755.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{
        backgroundImage: "linear-gradient(to right, #4880EC, #019CAD)",
        minHeight: "100vh",
        textAlign: "center",
        fontSize: "2rem",
      }}
    >
      <div classNames="mt-auto text-dark mb-5  text-align-center">
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>

      <div>
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721225919.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (
    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{
        backgroundImage: "linear-gradient(to right, #4880EC, #019CAD)",
        minHeight: "100vh",
        textAlign: "center",
        fontSize: "2rem",
      }}
    >
      <div classNames="mt-auto text-dark mb-5  text-align-center">
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>

      <div className="d-flex justify-content-center">
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721230128.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>
      <div className="d-flex justify-content-center">
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721230344.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>
      <div className="d-flex justify-content-center"
      >
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721231007.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>
      <div className="d-flex justify-content-center"
      className={{fontSize: '12px'}}
      >
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Cover_20220721231120.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>
      <div className="d-flex justify-content-center"
      
      >
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- .history/src/util/Loder_20220713224123.js ---

'''
'''--- .history/src/util/Loder_20220713224142.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;

'''
'''--- .history/src/util/Notification_20220713224245.js ---

'''
'''--- .history/src/util/Notification_20220713224312.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }:{text:string}) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }:{text:string}) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220713224656.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220713230253.js ---
import React from "react";
import { ToastContainer } from "react-toastify";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220713230409.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220713230415.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220713232054.js ---
import React from "react";
import { ToastContainer } from "react-toastify";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220713232115.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714073809.js ---
import React from "react";
import { ToastContainer } from "react-toastify";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714073847.js ---
import React from "react";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714074052.js ---
import React from "react";
import { ToastContainer } from "react-toastify";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714074419.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714075830.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714075856.js ---
import React from "react";

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714075926.js ---
import React from "react";

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export {  NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714075945.js ---
import React from "react";

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export {  NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/Notification_20220714080003.js ---

'''
'''--- .history/src/util/Notification_20220714080136.js ---

'''
'''--- .history/src/util/Notification_20220714080435.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- .history/src/util/cover_20220716131607.css ---

'''
'''--- .history/src/util/cover_20220716132012.css ---
*{
    background-image: url(../public/background-image);
}
'''
'''--- .history/src/util/cover_20220716133403.css ---
*{
    background-image: url(../public/background-image);
}
'''
'''--- .history/src/util/cover_20220716133404.css ---
*{
    background-image: url(../public/background-image);
}
'''
'''--- .history/src/util/cover_20220716133627.css ---
*{
    background-image: url(../background-image);
}
'''
'''--- .history/src/util/cover_20220716133705.css ---
*{
    background-image: url(../public/background-image);
}
'''
'''--- .history/src/util/cover_20220716134024.css ---
*{
    background-image: url("src/asset/background.jpg");
}
'''
'''--- .history/src/util/cover_20220716134041.css ---
*{
    background-image: url("src\asset\background.jpg");
}
'''
'''--- .history/src/util/cover_20220716134101.css ---
*{
    background-image: url("\asset\background.jpg");
}
'''
'''--- .history/src/util/cover_20220716134236.css ---
*{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
}
'''
'''--- .history/src/util/cover_20220716134604.css ---
*{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0%;
    top: 0%;
}
'''
'''--- .history/src/util/cover_20220716134751.css ---
body{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
    width: 100%;
    height: 100%;
    position: absolute;
    left: 0%;
    top: 0%;
}
'''
'''--- .history/src/util/cover_20220716135057.css ---
*{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
   
}
'''
'''--- .history/src/util/cover_20220716135400.css ---
*{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
   background-size: 100Px 100px;
}
'''
'''--- .history/src/util/cover_20220716135721.css ---
*{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
   background-size: 100Px 100px;
   background-repeat: no-repeat;
   background-position: 0px 0px;
}
'''
'''--- .history/src/util/cover_20220716135940.css ---
*{
    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
   background-size: 672Px 448px;
   background-repeat: no-repeat;
   background-position: 0px 0px;
}
'''
'''--- .history/src/util/cover_20220716140044.css ---
*{
   
}
body{

    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
    background-size: 672Px 448px;
    background-repeat: no-repeat;
    background-position: 0px 0px;   
}
'''
'''--- .history/src/util/cover_20220716140137.css ---
*{
   
}
body{

    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
    background-size: 1080px 720px;
    background-repeat: no-repeat;
    background-position: 0px 0px;   
}
'''
'''--- .history/src/util/cover_20220716140609.css ---
*{
   
}

'''
'''--- .history/src/util/cover_20220716141115.css ---
*{
   
}
#homcover{

    background-image: url("C:\Users\pc\Documents\farm-fronted\src\asset\background.jpg");
    background-size: 1080px 720px;
    background-repeat: no-repeat;
    background-position: 0px 0px;   
}
'''
'''--- .history/src/util/cover_20220716155418.css ---

.cover{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 1;
}
'''
'''--- .history/src/util/wallet_20220713204731.js ---

'''
'''--- .history/src/util/wallet_20220713204804.js ---
import React from "react";
import { logout } from "../util/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }: { address: string; amount: string }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- .history/src/util/wallet_20220713205031.js ---
import React from "react";
import { logout } from "../util/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- .history/src/util/wallet_20220713205609.js ---
import React from "react";
import { logout } from "../util/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- .history/src/util/wallet_20220713205610.js ---
import React from "react";
import { logout } from "../util/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- .history/src/util/wallet_20220713210133.js ---
import React from "react";
import { logout } from "../utils/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- .history/src/util/wallet_20220721225458.js ---
import React from "react";
import { logout } from "../utils/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- .history/src/utils/config_20220713183030.js ---

'''
'''--- .history/src/utils/config_20220713183310.js ---
const CONTRACT_NAME = 'CONTRACT_NAME';

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- .history/src/utils/config_20220713183434.js ---
const CONTRACT_NAME = "arose.arose.testnet";

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- .history/src/utils/config_20220713190650.js ---
const CONTRACT_NAME = 'CONTRACT_NAME';

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- .history/src/utils/config_20220713191020.js ---
const CONTRACT_NAME = "arose.testnet";

export const env = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  contractName: CONTRACT_NAME,
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};
'''
'''--- .history/src/utils/marketplace_20220713184239.js ---

'''
'''--- .history/src/utils/marketplace_20220713184249.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createProduct(product) {
  product.id = uuid4();
  product.price = parseNearAmount(product.price + "");
  return window.contract.setProduct({ product });
}

export function getProducts() {
  return window.contract.getProducts();
}

export async function buyProduct({ id, price }) {
  await window.contract.buyProduct({ productId: id }, GAS, price);
}
'''
'''--- .history/src/utils/marketplace_20220718153938.ts ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createProduct(product) {
  product.id = uuid4();
  product.price = parseNearAmount(product.price + "");
  return window.contract.setProduct({ product });
}

export function getovas() {
  return window.contract.getovas();
}

export async function buyProduct({ id, price }) {
  await window.contract.buyProduct({ productId: id }, GAS, price);
}
'''
'''--- .history/src/utils/marketplace_20220718153939.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createProduct(product) {
  product.id = uuid4();
  product.price = parseNearAmount(product.price + "");
  return window.contract.setProduct({ product });
}

export function getovas() {
  return window.contract.getovas();
}

export async function buyProduct({ id, price }) {
  await window.contract.buyProduct({ productId: id }, GAS, price);
}
'''
'''--- .history/src/utils/marketplace_20220718154347.ts ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
export function addova(product: {
  name: string;
  image: string;
  price: number;
  quantity: number;
}) {
  //@ts-ignore
  return window.contract.addova({
    name: product.name.toString(),
    image: product.image.toString(),
    price: product.price.toString(),
    quantity: product.quantity.toString(),
  });
}

export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }: { id: number; price: number }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220718210803.ts ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
export function addova(product: {
  name: string;
  image: string;
  price: number;
  quantity: number;
}) {
  //@ts-ignore
  return window.contract.addova({
    name: product.name.toString(),
    image: product.image.toString(),
    price: product.price.toString(),
    quantity: product.quantity.toString(),
  });
}

export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }: { id: number; price: number }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220718224850.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
export function addova(product: {
  price,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
}) {
  //@ts-ignore
  return window.contract.addova({
    variety: product.varierty.toString(),
    value: product.value.toString(),
    location: product.price.toString(),
    price: product.price.toString(),
    price: product.price.toString(),
    quantity: product.quantity.toString(),
  });
}

export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220718225949.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
export function addova(product: {
  price:string,
                quantity,
                expiration,
                value_addition,
                location,
                variety,
}) {
  //@ts-ignore
  return window.contract.addova({
    variety: product.varierty.toString(),
    value: product.value.toString(),
    location: product.price.toString(),
    price: product.price.toString(),
    price: product.price.toString(),
    quantity: product.quantity.toString(),
  });
}

export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220718230342.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function createProduct(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ product });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220718230419.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ product });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220721155130.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ price: Number.parseInt(product.price), 
      quntity: Number.parseInt(product.quantity), 
      expiration: product.expiration, 
      location: product.location, 
      varieties: product.varieties, 
       });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220721155140.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ price: Number.parseInt(product.price), 
      quntity: Number.parseInt(product.quantity), 
      expiration: product.expiration, 
      location: product.location, 
      varieties: product.varieties, 
       });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220721155538.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ price: Number.parseInt(product.price), 
      quntity: Number.parseInt(product.quantity), 
      expiration: product.expiration,
      value_addition: product.value_addition, 
      location: product.location, 
      varieties: product.varieties, 
       });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220721161542.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ product });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220721161547.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ product });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/marketplace_20220803155541.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ 
      price: Number.parseInt(product.price),
      quntity: Number.parseInt(product.quntity),
      variety: product.varieties,
      value_addition: product.value,
      location: product.location,
      expiration: product.expiration

     });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- .history/src/utils/near_20220713183626.js ---

'''
'''--- .history/src/utils/near_20220713183711.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");
'''
'''--- .history/src/utils/near_20220713183839.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");
export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getOva", "getOvas"],
        changeMethods: ["buyProduct", "setProduct"],
      }
    );
  }
'''
'''--- .history/src/utils/near_20220713184114.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");
export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getOva", "getOvas"],
        changeMethods: ["buyProduct", "setProduct"],
      }
    );
  }

  export async function accountBalance() {
    return formatNearAmount(
      (await window.walletConnection.account().getAccountBalance()).total,
      2
    );
  }
  
  export async function getAccountId() {
    return window.walletConnection.getAccountId();
  }
  
  export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
  }
  
  export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
  }
'''
'''--- .history/src/utils/near_20220713185039.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");
export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getOva", "getOvas"],
        changeMethods: ["buyProduct", "setProduct"],
      }
    );
  }

  export async function accountBalance() {
    return formatNearAmount(
      (await window.walletConnection.account().getAccountBalance()).total,
      2
    );
  }
  
  export async function getAccountId() {
    return window.walletConnection.getAccountId();
  }
  
  export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
  }
  
  export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
  }
'''
'''--- .history/src/utils/near_20220713185143.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");
export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getProduct", "getProducts"],
        changeMethods: ["buyProduct", "setProduct"],
      }
    );
  }

  export async function accountBalance() {
    return formatNearAmount(
      (await window.walletConnection.account().getAccountBalance()).total,
      2
    );
  }
  
  export async function getAccountId() {
    return window.walletConnection.getAccountId();
  }
  
  export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
  }
  
  export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
  }
'''
'''--- .history/src/utils/near_20220713191232.js ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getclothes", "getclothe"],
      // List call methods that change state
      changeMethods: ["buy", "addclothe"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- .history/src/utils/near_20220713203712.js ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getclothes", "getclothe"],
      // List call methods that change state
      changeMethods: ["buy", "addclothe"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- .history/src/utils/near_20220719141417.js ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getovas", "getova"],
      // List call methods that change state
      changeMethods: ["", "addova"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- .history/src/utils/near_20220719141504.js ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getovas", "getova"],
      // List call methods that change state
      changeMethods: ["buy", "addova"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''
'''--- README.md ---

## Inspiration üí°

Most of the time, Farmers sells there product at a throwing price because of  
For that they will lose a lot of money feeling discourage and this will force them to venture to any othe bussiness.
As a result, there is the need for a secure and efficient system to help farmers and buyers link without any middlemen. 

## ‚ùì What it does üí°
Fruitfull is a decentralized and secure farming marketplace system. Its built on the Near blockchain and securely stores all farm product transaction records.

The avocado products and transaction are securely stored in the ledger and can be accessed by the farmer or the buyer.

First, on the app, either the farmer or the buy will connect their near wallet to the fruitfull app.

If this is the farmer he or she is require to post her product unlike the buyer who can not post. On the other hand the buyer can purchase any ovacados.

## ‚öô How it was built
- React for the frontend
- Near, Rust  Web3 for the Blockchain and smart contracts
- Near for building the smart contracts in Rust programming language
- Near blockchain for the ledger

## üöß Challenges üöß
- Implementing the smart contracts in Rust programming language was a challenge.
- Ran into bugs while building the smart contracts especially while building the  smart contract.

near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---

## Inspiration üí°

Most of the time, Farmers sells there product at a throwing price because of  
For that they will lose a lot of money feeling discourage and this will force them to venture to any othe bussiness.
As a result, there is the need for a secure and efficient system to help farmers and buyers link without any middlemen. 

## ‚ùì What it does üí°
Fruitfull is a decentralized and secure farming marketplace system. Its built on the Near blockchain and securely stores all farm product transaction records.

The avocado products and transaction are securely stored in the ledger and can be accessed by the farmer or the buyer.

First, on the app, either the farmer or the buy will connect their near wallet to the fruitfull app.

If this is the farmer he or she is require to post her product unlike the buyer who can not post. On the other hand the buyer can purchase any ovacados.

## ‚öô How it was built
- React for the frontend
- Near, Rust  Web3 for the Blockchain and smart contracts
- Near for building the smart contracts in Rust programming language
- Near blockchain for the ledger

## üöß Challenges üöß
- Implementing the smart contracts in Rust programming language was a challenge.
- Ran into bugs while building the smart contracts especially while building the  smart contract.

near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/scripts/build.sh ---
#!/bin/bash 

cargo build --all --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/
'''
'''--- contract/scripts/call.sh ---
#!/bin/bash 

source ./scripts/setting.conf

#near view $SUB_ACCOUNT getovas

# Add AvocadoProduct to the contract
  #near call $SUB_ACCOUNT addova '{"price": 7, "quantity":2, "expiration": "5/06/2022", "value_addition": "oil", "location": "Kenya", "variety": "Sweet"}' --accountId arose.testnet
  near call $SUB_ACCOUNT buy '{"id": 0 }' --accountId arose.testnet --amount 8
  
'''
'''--- contract/scripts/deploy.sh ---
#!/bin/bash 

source ./scripts/setting.conf

near delete $SUB_ACCOUNT $MASTER_ACCOUNT 

near create-account $SUB_ACCOUNT --masterAccount $MASTER_ACCOUNT

near deploy $SUB_ACCOUNT --wasmFile=./res/greeter.wasm
'''
'''--- contract/src/avocado_product.rs ---
//initialize the contract

use near_sdk::borsh::{self, BorshSerialize, BorshDeserialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::AccountId;
use near_sdk::{near_bindgen};

#[near_bindgen]
#[derive(Debug, BorshSerialize, BorshDeserialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]

pub struct AvocadoProduct {
    pub price: u64,
    pub quantity: u64,
    pub expiration: String,
    pub value_addition: String,
    pub location: String,
    pub variety: String,
    pub farmer: AccountId,
  
}

impl AvocadoProduct {
    pub fn new(price: u64, quantity: u64, expiration: String,value_addition: String, variety: String, location: String, farmer: AccountId) -> Self {
        Self {
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            farmer,
        
        }
    }
}
'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{UnorderedMap, Vector};
use near_sdk::{env, near_bindgen, AccountId, Promise};
use crate::env::panic_str;
use crate::avocado_product::AvocadoProduct;

const SALES_EXPECTED_ERR: &str = "Out of stock";
const AMOUNT_EXPECTED_ERR: &str = "Not enough money";
   
mod avocado_product;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct AvocadoDisplay {
    ova : UnorderedMap<u64, AvocadoProduct>,
    buyer : UnorderedMap<u64, Vector<AccountId>>,
}

#[near_bindgen]
impl AvocadoDisplay {
    pub fn addova(&mut self, price: u64, quantity: u64, expiration: String, value_addition: String, location: String, variety: String) {
        let index : u64 = self.ova.len() + 1;
        let avo = AvocadoProduct::new(
            price,
            quantity,
            expiration,
            value_addition,
            location,
            variety,
            env::signer_account_id()
 
    );
        self.ova.insert(&index, &avo);
           
    }
    //get ova by index
    pub fn getova(&self, id:u64 ) -> (String,String,String,String,String,String,String,Vec<String>) {
        let index : u64 = id;
        let ova : AvocadoProduct = self.ova.get(&index).unwrap();
        (ova.price.to_string(), ova.quantity.to_string(), ova.expiration.to_string(), 
        ova.value_addition, ova.location, ova.variety, ova.farmer.to_string(), self.buyer_list(id),)
    }

    #[private]
    fn buyer_list(&self, id: u64) -> Vec<String> {
        if let Some(i) = self.buyer.get(&id) {
            let mut pple: Vec<String> = vec![];
            for g in i.iter() {
                pple.push(g.to_string());
            }            
             return pple;
        }
        return Vec::<String>::new();
    }

    pub fn getovas(&self)  -> Vec<(String, String, String, String, String, String, String, Vec<String>)> {
        let mut ovas: Vec<(String, String, String, String, String,String,String, Vec<String>)> = vec![];
        for g in 1..=self.ova.len(){
            ovas.push(self.getova(g as u64));
        }
        return ovas;
    }

    #[payable]
    pub fn buy(&mut self, id:u64){
        //let amount = "1".parse::<u128>().unwrap() * 10u128.pow(24);
        let ovas = self.ova.get(&id).unwrap();
        let deposit = env::attached_deposit();
        if((ovas.price as f64) * 10.0_f64.powf(24.0)) as u128 <= (deposit){
            let buyer1 = self.buyer_list(id);
            if(buyer1.len()+1) as u64 > ovas.quantity {
                panic_str(SALES_EXPECTED_ERR);
            }else{
                Promise::new(ovas.farmer).transfer(env::attached_deposit());
                let mut buyer = self.buyer.get(&id).unwrap();
                buyer.push(&env::signer_account_id());
                self.buyer.insert(&id, &buyer);
            }
                
                
        } else{
            panic_str(AMOUNT_EXPECTED_ERR);
        }
    }

    // fn initial_storage(&self) -> u64 {
    //     let initial_storage = env::storage_usage();
    //     initial_storage
    // }

    // fn settle_storage_cost(&self, initial_storage: u64, attached_deposit: u128, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let used_storage = current_storage - initial_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(payable_storage_cost) = storage_unit_price.checked_mul(used_storage.into()) {
    //         assert!(attached_deposit >= payable_storage_cost);

    //         let excess = attached_deposit - payable_storage_cost;
    //         self.refund_excess(excess, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_storage_cost(&self, initial_storage: u64, signer: &str) {
    //     let current_storage = env::storage_usage();
    //     let storage_released = initial_storage - current_storage;
    //     let storage_unit_price = env::storage_byte_cost();

    //     if let Some(refundable_storage_cost) = storage_unit_price.checked_mul(storage_released.into()) {
    //         self.refund_excess(refundable_storage_cost, signer);
    //     } else {
    //         panic!("Error calculating storage cost");
    //     }
    // }

    // fn refund_excess(&self, excess: u128, signer: &str) {
    //     if excess > 0 {
    //         Promise::new(signer.to_string()).transfer(excess);
    //     }
    // }

    
}

impl Default for AvocadoDisplay {
    fn default() -> Self {
        Self {
            ova: UnorderedMap::<u64, AvocadoProduct>::new(b'o'),
            buyer: UnorderedMap::<u64, Vector<AccountId>>::new(b'b'),
        }
    }
}

'''
'''--- contract/target/.rustc_info.json ---
{"rustc_fingerprint":10879854208105103016,"outputs":{"17598535894874457435":{"success":true,"status":"","code":0,"stdout":"rustc 1.61.0 (fe5b13d68 2022-05-18)\nbinary: rustc\ncommit-hash: fe5b13d681f25ee6474be29d748c65adcd91f69e\ncommit-date: 2022-05-18\nhost: x86_64-pc-windows-gnu\nrelease: 1.61.0\nLLVM version: 14.0.0\n","stderr":""},"931469667778813386":{"success":true,"status":"","code":0,"stdout":"___.exe\nlib___.rlib\n___.dll\n___.dll\nlib___.a\n___.dll\nC:\\Users\\pc\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\ndebug_assertions\npanic=\"unwind\"\nproc_macro\ntarget_arch=\"x86_64\"\ntarget_endian=\"little\"\ntarget_env=\"gnu\"\ntarget_family=\"windows\"\ntarget_feature=\"fxsr\"\ntarget_feature=\"sse\"\ntarget_feature=\"sse2\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"windows\"\ntarget_pointer_width=\"64\"\ntarget_vendor=\"pc\"\nwindows\n","stderr":""},"2797684049618456168":{"success":false,"status":"exit code: 1","code":1,"stdout":"","stderr":"error: `-Csplit-debuginfo` is unstable on this platform\n\n"},"8979080930075171232":{"success":true,"status":"","code":0,"stdout":"___.wasm\nlib___.rlib\n___.wasm\nlib___.a\nC:\\Users\\pc\\.rustup\\toolchains\\stable-x86_64-pc-windows-gnu\ndebug_assertions\npanic=\"abort\"\nproc_macro\ntarget_arch=\"wasm32\"\ntarget_endian=\"little\"\ntarget_env=\"\"\ntarget_family=\"wasm\"\ntarget_has_atomic=\"16\"\ntarget_has_atomic=\"32\"\ntarget_has_atomic=\"64\"\ntarget_has_atomic=\"8\"\ntarget_has_atomic=\"ptr\"\ntarget_os=\"unknown\"\ntarget_pointer_width=\"32\"\ntarget_vendor=\"unknown\"\n","stderr":"warning: dropping unsupported crate type `dylib` for target `wasm32-unknown-unknown`\n\nwarning: dropping unsupported crate type `proc-macro` for target `wasm32-unknown-unknown`\n\nwarning: 2 warnings emitted\n\n"},"11269220999966284844":{"success":false,"status":"exit code: 1","code":1,"stdout":"","stderr":"error: `-Csplit-debuginfo` is unstable on this platform\n\n"}},"successes":{}}
'''
'''--- contract/target/release/.fingerprint/Inflector-22f9d3d66d01b83a/lib-inflector.json ---
{"rustc":7418719026165324266,"features":"[]","target":15157828903313475237,"profile":89792565241913630,"path":6716639863385209054,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\Inflector-22f9d3d66d01b83a\\dep-lib-inflector"}}],"rustflags":[],"metadata":6849597462678386541,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/ahash-22bd81b1bcf15b44/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[]","target":13294766831966498538,"profile":89792565241913630,"path":11432078386448021366,"deps":[[16079472387499994964,"version_check",false,287215104035420223]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\ahash-22bd81b1bcf15b44\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":6548036084630991988,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/borsh-derive-5a7a12b3e06f3b99/lib-borsh-derive.json ---
{"rustc":7418719026165324266,"features":"[]","target":4089840889381527766,"profile":89792565241913630,"path":9207276425260740972,"deps":[[2345288959107110519,"borsh_schema_derive_internal",false,4022538689466618558],[2404243893358302026,"syn",false,13115463721495407076],[3810671027919804530,"proc_macro2",false,6901505508076979912],[3971538142687143787,"proc_macro_crate",false,15667791490933358538],[8324001644593655249,"borsh_derive_internal",false,3208822504951591522]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\borsh-derive-5a7a12b3e06f3b99\\dep-lib-borsh-derive"}}],"rustflags":[],"metadata":6341613096556135379,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/borsh-derive-internal-a6d3e1f96a3be1ec/lib-borsh-derive-internal.json ---
{"rustc":7418719026165324266,"features":"[]","target":1036412639898795334,"profile":89792565241913630,"path":7565823152504100712,"deps":[[1968780565650827610,"quote",false,14557792212576961806],[2404243893358302026,"syn",false,13115463721495407076],[3810671027919804530,"proc_macro2",false,6901505508076979912]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\borsh-derive-internal-a6d3e1f96a3be1ec\\dep-lib-borsh-derive-internal"}}],"rustflags":[],"metadata":6341613096556135379,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/borsh-schema-derive-internal-11ceac5f86e8ee07/lib-borsh-schema-derive-internal.json ---
{"rustc":7418719026165324266,"features":"[]","target":5421563452239655410,"profile":89792565241913630,"path":15634769113835717836,"deps":[[1968780565650827610,"quote",false,14557792212576961806],[2404243893358302026,"syn",false,13115463721495407076],[3810671027919804530,"proc_macro2",false,6901505508076979912]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\borsh-schema-derive-internal-11ceac5f86e8ee07\\dep-lib-borsh-schema-derive-internal"}}],"rustflags":[],"metadata":7685215035480038221,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/crunchy-27f192bc106f2930/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[]","target":2709041430195671023,"profile":89792565241913630,"path":11687807871275715798,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\crunchy-27f192bc106f2930\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":5553159513701433177,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/near-sdk-macros-a94f5c3d75b33343/lib-near-sdk-macros.json ---
{"rustc":7418719026165324266,"features":"[]","target":2024342235666230958,"profile":89792565241913630,"path":9962353702894982154,"deps":[[1968780565650827610,"quote",false,14557792212576961806],[2404243893358302026,"syn",false,13115463721495407076],[3810671027919804530,"proc_macro2",false,6901505508076979912],[7454270075138479745,"inflector",false,10838161661219799611]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\near-sdk-macros-a94f5c3d75b33343\\dep-lib-near-sdk-macros"}}],"rustflags":[],"metadata":9520434766592551999,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/proc-macro-crate-614f8acdd597a6ce/lib-proc-macro-crate.json ---
{"rustc":7418719026165324266,"features":"[]","target":10488202467561598967,"profile":89792565241913630,"path":6928719654499146493,"deps":[[12643607882224615841,"toml",false,4189990547509464640]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\proc-macro-crate-614f8acdd597a6ce\\dep-lib-proc-macro-crate"}}],"rustflags":[],"metadata":4875023412952309093,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/proc-macro2-58e0f8a1cbd002c9/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"proc-macro\"]","target":13294766831966498538,"profile":89792565241913630,"path":17512099425972865908,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\proc-macro2-58e0f8a1cbd002c9\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":2248056778617045775,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/proc-macro2-978c02b076823284/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[3810671027919804530,"build_script_build",false,15318322986556010055]],"local":[{"RerunIfChanged":{"output":"release\\build\\proc-macro2-978c02b076823284\\output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/proc-macro2-b84463297b652ae0/lib-proc-macro2.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"proc-macro\"]","target":14344298002436322672,"profile":89792565241913630,"path":15760855471507098200,"deps":[[3810671027919804530,"build_script_build",false,10351239073838968382],[16040210524263995429,"unicode_ident",false,7802321569491570612]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\proc-macro2-b84463297b652ae0\\dep-lib-proc-macro2"}}],"rustflags":[],"metadata":2248056778617045775,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/quote-1d94438de6db281c/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[1968780565650827610,"build_script_build",false,13621896060407521135]],"local":[{"RerunIfChanged":{"output":"release\\build\\quote-1d94438de6db281c\\output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/quote-a8e7b76fce8733c2/lib-quote.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"proc-macro\"]","target":4606197195311606630,"profile":89792565241913630,"path":12756810462988800850,"deps":[[1968780565650827610,"build_script_build",false,295240694621932609],[3810671027919804530,"proc_macro2",false,6901505508076979912]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\quote-a8e7b76fce8733c2\\dep-lib-quote"}}],"rustflags":[],"metadata":2717943770976187624,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/quote-dd8b016aadae5d19/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"proc-macro\"]","target":13294766831966498538,"profile":89792565241913630,"path":17058066576354094295,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\quote-dd8b016aadae5d19\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":2717943770976187624,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde-945f30eb307b3da9/lib-serde.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"std\"]","target":15771919462364234457,"profile":89792565241913630,"path":18304763307947870965,"deps":[[4520698937049211308,"build_script_build",false,4240462868482563047]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\serde-945f30eb307b3da9\\dep-lib-serde"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde-9cd72590c29a82d0/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"std\"]","target":2709041430195671023,"profile":89792565241913630,"path":7894866725033528129,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\serde-9cd72590c29a82d0\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde-b471d4d945dace55/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"derive\", \"serde_derive\", \"std\"]","target":2709041430195671023,"profile":89792565241913630,"path":7894866725033528129,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\serde-b471d4d945dace55\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde-f80db75b9d914c8e/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[4520698937049211308,"build_script_build",false,14289472896885554177]],"local":[{"Precalculated":"1.0.138"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde_derive-6dd012f28f01c12e/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"default\"]","target":2709041430195671023,"profile":89792565241913630,"path":8945878903636493441,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\serde_derive-6dd012f28f01c12e\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":14452199383429553764,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde_derive-e36cf4ce988ddfd2/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[6124908217252128844,"build_script_build",false,10986515417549573071]],"local":[{"Precalculated":"1.0.138"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde_derive-f7826db7dca725e2/lib-serde_derive.json ---
{"rustc":7418719026165324266,"features":"[\"default\"]","target":17963269895377715704,"profile":89792565241913630,"path":16244535599687662190,"deps":[[1968780565650827610,"quote",false,14557792212576961806],[2404243893358302026,"syn",false,13115463721495407076],[3810671027919804530,"proc_macro2",false,6901505508076979912],[6124908217252128844,"build_script_build",false,15277201307663479158]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\serde_derive-f7826db7dca725e2\\dep-lib-serde_derive"}}],"rustflags":[],"metadata":14452199383429553764,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/serde_json-bee7f920bc90263c/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"std\"]","target":13294766831966498538,"profile":89792565241913630,"path":2425122071756137697,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\serde_json-bee7f920bc90263c\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":16261601059619201932,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/syn-0a0af29e14963f73/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[2404243893358302026,"build_script_build",false,14565466826266525156]],"local":[{"Precalculated":"1.0.98"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/syn-11f6564052528ba7/lib-syn.json ---
{"rustc":7418719026165324266,"features":"[\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"visit\"]","target":12020202395954228905,"profile":89792565241913630,"path":1716204997388731199,"deps":[[1968780565650827610,"quote",false,14557792212576961806],[2404243893358302026,"build_script_build",false,14271856351164588616],[3810671027919804530,"proc_macro2",false,6901505508076979912],[16040210524263995429,"unicode_ident",false,7802321569491570612]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\syn-11f6564052528ba7\\dep-lib-syn"}}],"rustflags":[],"metadata":6886477143387768027,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/syn-5aaad2ad73d169d7/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[\"clone-impls\", \"default\", \"derive\", \"extra-traits\", \"fold\", \"full\", \"parsing\", \"printing\", \"proc-macro\", \"quote\", \"visit\"]","target":13294766831966498538,"profile":89792565241913630,"path":8997522275041894016,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\syn-5aaad2ad73d169d7\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":6886477143387768027,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/toml-311f69999193789f/lib-toml.json ---
{"rustc":7418719026165324266,"features":"[\"default\"]","target":13462643144348829615,"profile":89792565241913630,"path":15339220497457440444,"deps":[[4520698937049211308,"serde",false,13181987683549671063]],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\toml-311f69999193789f\\dep-lib-toml"}}],"rustflags":[],"metadata":15823223228428447826,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/unicode-ident-b0c9c974cfad974d/lib-unicode-ident.json ---
{"rustc":7418719026165324266,"features":"[]","target":796776536126189422,"profile":89792565241913630,"path":9998053629737906137,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\unicode-ident-b0c9c974cfad974d\\dep-lib-unicode-ident"}}],"rustflags":[],"metadata":1159190378059262574,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/version_check-8cf53cf3b71c836c/lib-version_check.json ---
{"rustc":7418719026165324266,"features":"[]","target":2726911228026723764,"profile":89792565241913630,"path":18330644713827552662,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\version_check-8cf53cf3b71c836c\\dep-lib-version_check"}}],"rustflags":[],"metadata":14847206692933921638,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/release/.fingerprint/wee_alloc-5ac3c69ca47e0fe7/build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"[]","target":2709041430195671023,"profile":89792565241913630,"path":17393031317370832193,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"release\\.fingerprint\\wee_alloc-5ac3c69ca47e0fe7\\dep-build-script-build-script-build"}}],"rustflags":[],"metadata":11837593470300214873,"config":2202906307356721367,"compile_kind":0}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/ahash-090daeba5cf65e17/lib-ahash.json ---
{"rustc":7418719026165324266,"features":"[]","target":17564961922320999190,"profile":4881301595602780980,"path":11564444246674002260,"deps":[[6564554279330852038,"build_script_build",false,6065591443525033651],[13220248725062288935,"once_cell",false,18389960117826287312]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\ahash-090daeba5cf65e17\\dep-lib-ahash"}}],"rustflags":["-C","link-args=-s"],"metadata":6548036084630991988,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/ahash-b1a40a14f893324e/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[6564554279330852038,"build_script_build",false,12091574260457847407]],"local":[{"RerunIfChanged":{"output":"wasm32-unknown-unknown\\release\\build\\ahash-b1a40a14f893324e\\output","paths":["build.rs"]}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/base64-9adaaa094efe1e31/lib-base64.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"std\"]","target":9667411782827515189,"profile":4881301595602780980,"path":401007309623125998,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\base64-9adaaa094efe1e31\\dep-lib-base64"}}],"rustflags":["-C","link-args=-s"],"metadata":13936919950537592407,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/borsh-fde72558eba5ccda/lib-borsh.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"std\"]","target":3730488758921852561,"profile":4881301595602780980,"path":9725783379744136232,"deps":[[1759060122986695407,"borsh_derive",false,16717467389116610694],[16284710795702459458,"hashbrown",false,7305878104428725956]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\borsh-fde72558eba5ccda\\dep-lib-borsh"}}],"rustflags":["-C","link-args=-s"],"metadata":7032358266178414993,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/bs58-285535bc3ac54b0a/lib-bs58.json ---
{"rustc":7418719026165324266,"features":"[\"alloc\", \"default\", \"std\"]","target":4860711247261189145,"profile":4881301595602780980,"path":9051680368517144185,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\bs58-285535bc3ac54b0a\\dep-lib-bs58"}}],"rustflags":["-C","link-args=-s"],"metadata":13637435404263704389,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/byteorder-2a2ecfa3adde7854/lib-byteorder.json ---
{"rustc":7418719026165324266,"features":"[]","target":6049797839447724599,"profile":4881301595602780980,"path":17946767242018953730,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\byteorder-2a2ecfa3adde7854\\dep-lib-byteorder"}}],"rustflags":["-C","link-args=-s"],"metadata":5398730104718078656,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/cfg-if-2dd57157fa136f19/lib-cfg-if.json ---
{"rustc":7418719026165324266,"features":"[]","target":10094334937643343087,"profile":4881301595602780980,"path":2003036080803435255,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\cfg-if-2dd57157fa136f19\\dep-lib-cfg-if"}}],"rustflags":["-C","link-args=-s"],"metadata":8462187951337715540,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/crunchy-1275cfc76e46def3/lib-crunchy.json ---
{"rustc":7418719026165324266,"features":"[]","target":163992892306163484,"profile":4881301595602780980,"path":7062074772214299120,"deps":[[15144909498828475009,"build_script_build",false,15148106538923084772]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\crunchy-1275cfc76e46def3\\dep-lib-crunchy"}}],"rustflags":["-C","link-args=-s"],"metadata":5553159513701433177,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/crunchy-fee699d89f9fee2b/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[15144909498828475009,"build_script_build",false,9121636468308795873]],"local":[{"Precalculated":"0.2.2"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/greeter-d5cbb7d1e1b2873c/lib-greeter.json ---
{"rustc":7418719026165324266,"features":"[]","target":12740755305791397572,"profile":4881301595602780980,"path":17523903030608720598,"deps":[[9294366231115296361,"near_sdk",false,11242211223924182262],[16627482305268480055,"uint",false,13288134224639360590]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\greeter-d5cbb7d1e1b2873c\\dep-lib-greeter"}}],"rustflags":["-C","link-args=-s"],"metadata":14894896775255343796,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/hashbrown-a0287a2b87cf1b95/lib-hashbrown.json ---
{"rustc":7418719026165324266,"features":"[\"ahash\", \"default\", \"inline-more\"]","target":7861740280460442625,"profile":4881301595602780980,"path":3464912433413792808,"deps":[[6564554279330852038,"ahash",false,16765660836040753174]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\hashbrown-a0287a2b87cf1b95\\dep-lib-hashbrown"}}],"rustflags":["-C","link-args=-s"],"metadata":6228333144549390726,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/hex-a82b3d198b8dbe7a/lib-hex.json ---
{"rustc":7418719026165324266,"features":"[]","target":6463897372179782136,"profile":4881301595602780980,"path":1577082691354369547,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\hex-a82b3d198b8dbe7a\\dep-lib-hex"}}],"rustflags":["-C","link-args=-s"],"metadata":14751499657425910276,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/itoa-9273e939f344576a/lib-itoa.json ---
{"rustc":7418719026165324266,"features":"[]","target":16990797089513230490,"profile":4881301595602780980,"path":15570244864971643268,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\itoa-9273e939f344576a\\dep-lib-itoa"}}],"rustflags":["-C","link-args=-s"],"metadata":851671291587502216,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/memory_units-0384fb5abc05abbc/lib-memory_units.json ---
{"rustc":7418719026165324266,"features":"[]","target":12813906616754239599,"profile":4881301595602780980,"path":170397034677254057,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\memory_units-0384fb5abc05abbc\\dep-lib-memory_units"}}],"rustflags":["-C","link-args=-s"],"metadata":16366510313631463741,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/near-sdk-3c1587151f81d9a1/lib-near-sdk.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"wee_alloc\"]","target":1044266279087180184,"profile":4881301595602780980,"path":739394080748509018,"deps":[[2711478123133662383,"bs58",false,16040993899912455579],[3178493835647231921,"wee_alloc",false,9559771187321213001],[4520698937049211308,"serde",false,13216143097692592699],[7977718895369901279,"serde_json",false,10172355850185930639],[9180754061452322375,"base64",false,10903354514032261190],[9608617076544306583,"near_sys",false,12717135477254160381],[13434381959712907675,"borsh",false,12444094570877186070],[15959244235299360742,"near_sdk_macros",false,10862021706205317275]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\near-sdk-3c1587151f81d9a1\\dep-lib-near-sdk"}}],"rustflags":["-C","link-args=-s"],"metadata":9215943102709044213,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/near-sys-71cc4b4f823990c6/lib-near-sys.json ---
{"rustc":7418719026165324266,"features":"[]","target":11005017848159897718,"profile":4881301595602780980,"path":2986894199931820815,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\near-sys-71cc4b4f823990c6\\dep-lib-near-sys"}}],"rustflags":["-C","link-args=-s"],"metadata":14904885344401450229,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/once_cell-b7f52d71e3a33d2e/lib-once_cell.json ---
{"rustc":7418719026165324266,"features":"[\"alloc\", \"race\"]","target":15818772897122422038,"profile":4881301595602780980,"path":1300829645620097355,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\once_cell-b7f52d71e3a33d2e\\dep-lib-once_cell"}}],"rustflags":["-C","link-args=-s"],"metadata":14177539708254521827,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/ryu-ce51b8f991ea300f/lib-ryu.json ---
{"rustc":7418719026165324266,"features":"[]","target":8261881835615490997,"profile":4881301595602780980,"path":11862083214938976090,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\ryu-ce51b8f991ea300f\\dep-lib-ryu"}}],"rustflags":["-C","link-args=-s"],"metadata":10387617312689919117,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/serde-35ea379bbe6259b5/lib-serde.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"derive\", \"serde_derive\", \"std\"]","target":15771919462364234457,"profile":4881301595602780980,"path":18304763307947870965,"deps":[[4520698937049211308,"build_script_build",false,1080656002548254211],[6124908217252128844,"serde_derive",false,18050171909165182601]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\serde-35ea379bbe6259b5\\dep-lib-serde"}}],"rustflags":["-C","link-args=-s"],"metadata":3767376778934503013,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/serde-b443451f17d80d90/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[4520698937049211308,"build_script_build",false,4743162582896607974]],"local":[{"Precalculated":"1.0.138"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/serde_json-23a4bc3cfed665d2/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[7977718895369901279,"build_script_build",false,1348886723930580086]],"local":[{"Precalculated":"1.0.82"}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/serde_json-97f6ad3a4acf6860/lib-serde_json.json ---
{"rustc":7418719026165324266,"features":"[\"default\", \"std\"]","target":2475719121998694108,"profile":4881301595602780980,"path":4428995156009598209,"deps":[[4520698937049211308,"serde",false,13216143097692592699],[5357092931389077452,"ryu",false,13749844623143301575],[7977718895369901279,"build_script_build",false,112932387394329570],[17824117949403888186,"itoa",false,3398151580901990713]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\serde_json-97f6ad3a4acf6860\\dep-lib-serde_json"}}],"rustflags":["-C","link-args=-s"],"metadata":16261601059619201932,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/static_assertions-13eac0dacca0a66c/lib-static_assertions.json ---
{"rustc":7418719026165324266,"features":"[]","target":6569194319579281671,"profile":4881301595602780980,"path":3155515475304343351,"deps":[],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\static_assertions-13eac0dacca0a66c\\dep-lib-static_assertions"}}],"rustflags":["-C","link-args=-s"],"metadata":16420956093413671072,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/uint-c7e7f2f670b51dc0/lib-uint.json ---
{"rustc":7418719026165324266,"features":"[]","target":15739060535622530060,"profile":4881301595602780980,"path":13927407591450039549,"deps":[[486069622437963759,"byteorder",false,12938826543366790967],[4485243235582659819,"hex",false,4165234097547596521],[6476817338883840430,"static_assertions",false,5022095964550089517],[15144909498828475009,"crunchy",false,8796204930728652165]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\uint-c7e7f2f670b51dc0\\dep-lib-uint"}}],"rustflags":["-C","link-args=-s"],"metadata":7122085937130173941,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/wee_alloc-c8460eb1b0e30f18/lib-wee_alloc.json ---
{"rustc":7418719026165324266,"features":"[]","target":7410670272435617587,"profile":4881301595602780980,"path":6174021915096879909,"deps":[[1429323848562539564,"memory_units",false,3799510568500316890],[3178493835647231921,"build_script_build",false,331775980366638194],[11311719388751911026,"cfg_if",false,16422059509384921974]],"local":[{"CheckDepInfo":{"dep_info":"wasm32-unknown-unknown\\release\\.fingerprint\\wee_alloc-c8460eb1b0e30f18\\dep-lib-wee_alloc"}}],"rustflags":["-C","link-args=-s"],"metadata":11837593470300214873,"config":2202906307356721367,"compile_kind":8104632896995515128}
'''
'''--- contract/target/wasm32-unknown-unknown/release/.fingerprint/wee_alloc-ff0e1f30233cf401/run-build-script-build-script-build.json ---
{"rustc":7418719026165324266,"features":"","target":0,"profile":0,"path":0,"deps":[[3178493835647231921,"build_script_build",false,4150669912581573245]],"local":[{"RerunIfChanged":{"output":"wasm32-unknown-unknown\\release\\build\\wee_alloc-ff0e1f30233cf401\\output","paths":["./Cargo.toml","./build.rs","./src/lib.rs","./src/imp_static_array.rs"]}},{"RerunIfEnvChanged":{"var":"WEE_ALLOC_STATIC_ARRAY_BACKEND_BYTES","val":null}}],"rustflags":[],"metadata":0,"config":0,"compile_kind":0}
'''
'''--- contract/target/wasm32-unknown-unknown/release/build/crunchy-fee699d89f9fee2b/out/lib.rs ---

/// Unroll the given for loop
///
/// Example:
///
/// ```ignore
/// unroll! {
///   for i in 0..5 {
///     println!("Iteration {}", i);
///   }
/// }
/// ```
///
/// will expand into:
///
/// ```ignore
/// { println!("Iteration {}", 0); }
/// { println!("Iteration {}", 1); }
/// { println!("Iteration {}", 2); }
/// { println!("Iteration {}", 3); }
/// { println!("Iteration {}", 4); }
/// ```
#[macro_export]
macro_rules! unroll {
    (for $v:ident in 0..0 $c:block) => {};

    (for $v:ident < $max:tt in ($start:tt..$end:tt).step_by($val:expr) {$($c:tt)*}) => {
        {
            let step = $val;
            let start = $start;
            let end = start + ($end - start) / step;
            unroll! {
                for val < $max in start..end {
                    let $v: usize = ((val - start) * step) + start;

                    $($c)*
                }
            }
        }
    };

    (for $v:ident in ($start:tt..$end:tt).step_by($val:expr) {$($c:tt)*}) => {
        unroll! {
            for $v < $end in ($start..$end).step_by($val) {$($c)*}
        }
    };

    (for $v:ident in ($start:tt..$end:tt) {$($c:tt)*}) => {
        unroll!{
            for $v in $start..$end {$($c)*}
        }
    };

    (for $v:ident in $start:tt..$end:tt {$($c:tt)*}) => {
        #[allow(non_upper_case_globals)]
        #[allow(unused_comparisons)]
        {
            unroll!(@$v, 0, $end, {
                    if $v >= $start {$($c)*}
                }
            );
        }
    };

    (for $v:ident < $max:tt in $start:tt..$end:tt $c:block) => {
        #[allow(non_upper_case_globals)]
        {
            let range = $start..$end;
            assert!(
                $max >= range.end,
                "`{}` out of range `{:?}`",
                stringify!($max),
                range,
            );
            unroll!(
                @$v,
                0,
                $max,
                {
                    if $v >= range.start && $v < range.end {
                        $c
                    }
                }
            );
        }
    };

    (for $v:ident in 0..$end:tt {$($statement:tt)*}) => {
        #[allow(non_upper_case_globals)]
        { unroll!(@$v, 0, $end, {$($statement)*}); }
    };

    (@$v:ident, $a:expr, 0, $c:block) => {
        { const $v: usize = $a; $c }
    };

    (@$v:ident, $a:expr, 1, $c:block) => {
        { const $v: usize = $a; $c }
    };

    (@$v:ident, $a:expr, 2, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
    };

    (@$v:ident, $a:expr, 3, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
    };

    (@$v:ident, $a:expr, 4, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
    };

    (@$v:ident, $a:expr, 5, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
    };

    (@$v:ident, $a:expr, 6, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
    };

    (@$v:ident, $a:expr, 7, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
    };

    (@$v:ident, $a:expr, 8, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
    };

    (@$v:ident, $a:expr, 9, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
    };

    (@$v:ident, $a:expr, 10, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
    };

    (@$v:ident, $a:expr, 11, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
        { const $v: usize = $a + 10; $c }
    };

    (@$v:ident, $a:expr, 12, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
        { const $v: usize = $a + 10; $c }
        { const $v: usize = $a + 11; $c }
    };

    (@$v:ident, $a:expr, 13, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
        { const $v: usize = $a + 10; $c }
        { const $v: usize = $a + 11; $c }
        { const $v: usize = $a + 12; $c }
    };

    (@$v:ident, $a:expr, 14, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
        { const $v: usize = $a + 10; $c }
        { const $v: usize = $a + 11; $c }
        { const $v: usize = $a + 12; $c }
        { const $v: usize = $a + 13; $c }
    };

    (@$v:ident, $a:expr, 15, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
        { const $v: usize = $a + 10; $c }
        { const $v: usize = $a + 11; $c }
        { const $v: usize = $a + 12; $c }
        { const $v: usize = $a + 13; $c }
        { const $v: usize = $a + 14; $c }
    };

    (@$v:ident, $a:expr, 16, $c:block) => {
        { const $v: usize = $a; $c }
        { const $v: usize = $a + 1; $c }
        { const $v: usize = $a + 2; $c }
        { const $v: usize = $a + 3; $c }
        { const $v: usize = $a + 4; $c }
        { const $v: usize = $a + 5; $c }
        { const $v: usize = $a + 6; $c }
        { const $v: usize = $a + 7; $c }
        { const $v: usize = $a + 8; $c }
        { const $v: usize = $a + 9; $c }
        { const $v: usize = $a + 10; $c }
        { const $v: usize = $a + 11; $c }
        { const $v: usize = $a + 12; $c }
        { const $v: usize = $a + 13; $c }
        { const $v: usize = $a + 14; $c }
        { const $v: usize = $a + 15; $c }
    };

    (@$v:ident, $a:expr, 17, $c:block) => {
        unroll!(@$v, $a, 16, $c);
        { const $v: usize = $a + 16; $c }
    };

    (@$v:ident, $a:expr, 18, $c:block) => {
        unroll!(@$v, $a, 9, $c);
        unroll!(@$v, $a + 9, 9, $c);
    };

    (@$v:ident, $a:expr, 19, $c:block) => {
        unroll!(@$v, $a, 18, $c);
        { const $v: usize = $a + 18; $c }
    };

    (@$v:ident, $a:expr, 20, $c:block) => {
        unroll!(@$v, $a, 10, $c);
        unroll!(@$v, $a + 10, 10, $c);
    };

    (@$v:ident, $a:expr, 21, $c:block) => {
        unroll!(@$v, $a, 20, $c);
        { const $v: usize = $a + 20; $c }
    };

    (@$v:ident, $a:expr, 22, $c:block) => {
        unroll!(@$v, $a, 11, $c);
        unroll!(@$v, $a + 11, 11, $c);
    };

    (@$v:ident, $a:expr, 23, $c:block) => {
        unroll!(@$v, $a, 22, $c);
        { const $v: usize = $a + 22; $c }
    };

    (@$v:ident, $a:expr, 24, $c:block) => {
        unroll!(@$v, $a, 12, $c);
        unroll!(@$v, $a + 12, 12, $c);
    };

    (@$v:ident, $a:expr, 25, $c:block) => {
        unroll!(@$v, $a, 24, $c);
        { const $v: usize = $a + 24; $c }
    };

    (@$v:ident, $a:expr, 26, $c:block) => {
        unroll!(@$v, $a, 13, $c);
        unroll!(@$v, $a + 13, 13, $c);
    };

    (@$v:ident, $a:expr, 27, $c:block) => {
        unroll!(@$v, $a, 26, $c);
        { const $v: usize = $a + 26; $c }
    };

    (@$v:ident, $a:expr, 28, $c:block) => {
        unroll!(@$v, $a, 14, $c);
        unroll!(@$v, $a + 14, 14, $c);
    };

    (@$v:ident, $a:expr, 29, $c:block) => {
        unroll!(@$v, $a, 28, $c);
        { const $v: usize = $a + 28; $c }
    };

    (@$v:ident, $a:expr, 30, $c:block) => {
        unroll!(@$v, $a, 15, $c);
        unroll!(@$v, $a + 15, 15, $c);
    };

    (@$v:ident, $a:expr, 31, $c:block) => {
        unroll!(@$v, $a, 30, $c);
        { const $v: usize = $a + 30; $c }
    };

    (@$v:ident, $a:expr, 32, $c:block) => {
        unroll!(@$v, $a, 16, $c);
        unroll!(@$v, $a + 16, 16, $c);
    };

    (@$v:ident, $a:expr, 33, $c:block) => {
        unroll!(@$v, $a, 32, $c);
        { const $v: usize = $a + 32; $c }
    };

    (@$v:ident, $a:expr, 34, $c:block) => {
        unroll!(@$v, $a, 17, $c);
        unroll!(@$v, $a + 17, 17, $c);
    };

    (@$v:ident, $a:expr, 35, $c:block) => {
        unroll!(@$v, $a, 34, $c);
        { const $v: usize = $a + 34; $c }
    };

    (@$v:ident, $a:expr, 36, $c:block) => {
        unroll!(@$v, $a, 18, $c);
        unroll!(@$v, $a + 18, 18, $c);
    };

    (@$v:ident, $a:expr, 37, $c:block) => {
        unroll!(@$v, $a, 36, $c);
        { const $v: usize = $a + 36; $c }
    };

    (@$v:ident, $a:expr, 38, $c:block) => {
        unroll!(@$v, $a, 19, $c);
        unroll!(@$v, $a + 19, 19, $c);
    };

    (@$v:ident, $a:expr, 39, $c:block) => {
        unroll!(@$v, $a, 38, $c);
        { const $v: usize = $a + 38; $c }
    };

    (@$v:ident, $a:expr, 40, $c:block) => {
        unroll!(@$v, $a, 20, $c);
        unroll!(@$v, $a + 20, 20, $c);
    };

    (@$v:ident, $a:expr, 41, $c:block) => {
        unroll!(@$v, $a, 40, $c);
        { const $v: usize = $a + 40; $c }
    };

    (@$v:ident, $a:expr, 42, $c:block) => {
        unroll!(@$v, $a, 21, $c);
        unroll!(@$v, $a + 21, 21, $c);
    };

    (@$v:ident, $a:expr, 43, $c:block) => {
        unroll!(@$v, $a, 42, $c);
        { const $v: usize = $a + 42; $c }
    };

    (@$v:ident, $a:expr, 44, $c:block) => {
        unroll!(@$v, $a, 22, $c);
        unroll!(@$v, $a + 22, 22, $c);
    };

    (@$v:ident, $a:expr, 45, $c:block) => {
        unroll!(@$v, $a, 44, $c);
        { const $v: usize = $a + 44; $c }
    };

    (@$v:ident, $a:expr, 46, $c:block) => {
        unroll!(@$v, $a, 23, $c);
        unroll!(@$v, $a + 23, 23, $c);
    };

    (@$v:ident, $a:expr, 47, $c:block) => {
        unroll!(@$v, $a, 46, $c);
        { const $v: usize = $a + 46; $c }
    };

    (@$v:ident, $a:expr, 48, $c:block) => {
        unroll!(@$v, $a, 24, $c);
        unroll!(@$v, $a + 24, 24, $c);
    };

    (@$v:ident, $a:expr, 49, $c:block) => {
        unroll!(@$v, $a, 48, $c);
        { const $v: usize = $a + 48; $c }
    };

    (@$v:ident, $a:expr, 50, $c:block) => {
        unroll!(@$v, $a, 25, $c);
        unroll!(@$v, $a + 25, 25, $c);
    };

    (@$v:ident, $a:expr, 51, $c:block) => {
        unroll!(@$v, $a, 50, $c);
        { const $v: usize = $a + 50; $c }
    };

    (@$v:ident, $a:expr, 52, $c:block) => {
        unroll!(@$v, $a, 26, $c);
        unroll!(@$v, $a + 26, 26, $c);
    };

    (@$v:ident, $a:expr, 53, $c:block) => {
        unroll!(@$v, $a, 52, $c);
        { const $v: usize = $a + 52; $c }
    };

    (@$v:ident, $a:expr, 54, $c:block) => {
        unroll!(@$v, $a, 27, $c);
        unroll!(@$v, $a + 27, 27, $c);
    };

    (@$v:ident, $a:expr, 55, $c:block) => {
        unroll!(@$v, $a, 54, $c);
        { const $v: usize = $a + 54; $c }
    };

    (@$v:ident, $a:expr, 56, $c:block) => {
        unroll!(@$v, $a, 28, $c);
        unroll!(@$v, $a + 28, 28, $c);
    };

    (@$v:ident, $a:expr, 57, $c:block) => {
        unroll!(@$v, $a, 56, $c);
        { const $v: usize = $a + 56; $c }
    };

    (@$v:ident, $a:expr, 58, $c:block) => {
        unroll!(@$v, $a, 29, $c);
        unroll!(@$v, $a + 29, 29, $c);
    };

    (@$v:ident, $a:expr, 59, $c:block) => {
        unroll!(@$v, $a, 58, $c);
        { const $v: usize = $a + 58; $c }
    };

    (@$v:ident, $a:expr, 60, $c:block) => {
        unroll!(@$v, $a, 30, $c);
        unroll!(@$v, $a + 30, 30, $c);
    };

    (@$v:ident, $a:expr, 61, $c:block) => {
        unroll!(@$v, $a, 60, $c);
        { const $v: usize = $a + 60; $c }
    };

    (@$v:ident, $a:expr, 62, $c:block) => {
        unroll!(@$v, $a, 31, $c);
        unroll!(@$v, $a + 31, 31, $c);
    };

    (@$v:ident, $a:expr, 63, $c:block) => {
        unroll!(@$v, $a, 62, $c);
        { const $v: usize = $a + 62; $c }
    };

    (@$v:ident, $a:expr, 64, $c:block) => {
        unroll!(@$v, $a, 32, $c);
        unroll!(@$v, $a + 32, 32, $c);
    };

}

#[cfg(all(test, feature = "std"))]
mod tests {
    #[test]
    fn invalid_range() {
        let mut a: Vec<usize> = vec![];
        unroll! {
                for i in (5..4) {
                    a.push(i);
                }
            }
        assert_eq!(a, vec![]);
    }

    #[test]
    fn start_at_one_with_step() {
        let mut a: Vec<usize> = vec![];
        unroll! {
                for i in (2..4).step_by(1) {
                    a.push(i);
                }
            }
        assert_eq!(a, vec![2, 3]);
    }

    #[test]
    fn start_at_one() {
        let mut a: Vec<usize> = vec![];
        unroll! {
                for i in 1..4 {
                    a.push(i);
                }
            }
        assert_eq!(a, vec![1, 2, 3]);
    }

    #[test]
    fn test_all() {
        {
            let a: Vec<usize> = vec![];
            unroll! {
                for i in 0..0 {
                    a.push(i);
                }
            }
            assert_eq!(a, (0..0).collect::<Vec<usize>>());
        }
        {
            let mut a: Vec<usize> = vec![];
            unroll! {
                for i in 0..1 {
                    a.push(i);
                }
            }
            assert_eq!(a, (0..1).collect::<Vec<usize>>());
        }
        {
            let mut a: Vec<usize> = vec![];
            unroll! {
                for i in 0..64 {
                    a.push(i);
                }
            }
            assert_eq!(a, (0..64).collect::<Vec<usize>>());
        }
        {
            let mut a: Vec<usize> = vec![];
            let start = 64 / 4;
            let end = start * 3;
            unroll! {
                for i < 64 in start..end {
                    a.push(i);
                }
            }
            assert_eq!(a, (start..end).collect::<Vec<usize>>());
        }
        {
            let mut a: Vec<usize> = vec![];
            unroll! {
                for i in (0..64).step_by(2) {
                    a.push(i);
                }
            }
            assert_eq!(a, (0..64 / 2).map(|x| x * 2).collect::<Vec<usize>>());
        }
        {
            let mut a: Vec<usize> = vec![];
            let start = 64 / 4;
            let end = start * 3;
            unroll! {
                for i < 64 in (start..end).step_by(2) {
                    a.push(i);
                }
            }
            assert_eq!(a, (start..end).filter(|x| x % 2 == 0).collect::<Vec<usize>>());
        }
    }
}

'''
'''--- contract/target/wasm32-unknown-unknown/release/build/wee_alloc-ff0e1f30233cf401/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1657310866105-56313090364055
'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "farm-fronted",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "bootstrap": "^5.1.3",
    "near-api-js": "^0.45.1",
    "react": "^18.2.0",
    "react-bootstrap": "^2.4.0",
    "react-dom": "^18.2.0",
    "react-scripts": "^4.0.3",
    "react-toastify": "^8.1.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="stylesheet" href="index.css">
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3"
      crossorigin="anonymous"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.3.0/font/bootstrap-icons.css"
    />
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p"
      crossorigin="anonymous"
    ></script>
    <title>Market Places</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- src/App.js ---
import React, { useCallback, useEffect, useState } from "react";
import Cover from "./util/Cover";
import { Container, Nav } from "react-bootstrap";
  import { Notification } from "./util/Notification";
import "./App.css";
import Wallet from "./util/wallet";
import {accountBalance} from "./utils/near";
//import AddProduct from "./components/Addova";
import Products from "./components/Products";

function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
       <Notification /> 
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet address={account.accountId} amount={balance} />
            </Nav.Item>
          </Nav>
          <>
             <main> 
               <Products />
            </main> 
          </>
        </Container>
      ) : (
        <Cover />
      )}
    </>
  );
}
export default App;
'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/components/Addova.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
const AddProduct = ({ save }) => {
    const [varieties  , setVarieties] = useState("");
    const [value, setValue] = useState("");
    const [location, setLocation] = useState("");
    const [expiration, setExperation] = useState("");
    const [quantity, setQuantity] = useState(0);
    const [price, setPrice] = useState(0);
    const isFormFilled = () => varieties && value  && location && expiration && quantity && price ;
  
    const [show, setShow] = useState(false);
  
    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);
    

    return (
        <>
           <h2>Showcase your product</h2> 
          <Button
            onClick={handleShow}
            variant="dark"
            className="rounded-pill px-0"
            style={{ width: "38px" }}
          >
            <i class="bi bi-plus"></i>
          </Button>
          <Modal show={show} onHide={handleClose} centered>
            <Modal.Header closeButton>
              <Modal.Title>Create a product</Modal.Title>
            </Modal.Header>
            <Form>
              <Modal.Body>
                <FloatingLabel
                  controlId="inputType"
                  label="Type of avocado"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    onChange={(e) => {
                      setVarieties(e.target.value);
                    }}
                    placeholder="Enter the type of Avocado"
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputValue"
                  label="Value"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter the value addition "
                    onChange={(e) => {
                      setValue(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputLocation"
                  label="Location"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter Location of production"
                    onChange={(e) => {
                      setLocation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputexpiration"
                  label="expiration"
                  className="mb-3"
                >
                  <Form.Control
                    type="text"
                    placeholder="Enter expiration date"
                    onChange={(e) => {
                      setExperation(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputQuantity"
                  label="Quantity"
                  className="mb-3"
                >
                  <Form.Control
                    type="number"
                    placeholder="Enter the Quantity"
                    onChange={(e) => {
                      setQuantity(e.target.value);
                    }}
                  />
                </FloatingLabel>
                <FloatingLabel
                  controlId="inputPrice"
                  label="Price"
                  className="mb-3"
                >
                  <Form.Control
                    type="number"
                    placeholder="Enter the Price "
                    onChange={(e) => {
                      setPrice(e.target.value);
                    }}
                  />
                </FloatingLabel>
              </Modal.Body>
            </Form>
            <Modal.Footer>
              <Button variant="outline-secondary" onClick={handleClose}>
                Close
              </Button>
              <Button
                variant="dark"
                disabled={!isFormFilled()}
                onClick={() => {
                  save({
                    varieties,
                    value,
                    location,
                    expiration,
                    quantity,
                    price,
                  });
                  handleClose();
                }}
              >
                Save product
              </Button>
            </Modal.Footer>
          </Modal>
        </>
      );
    };
    
    AddProduct.propTypes = {
      save: PropTypes.func.isRequired,
    };
    
    
    export default AddProduct;

'''
'''--- src/components/Navigation.js ---
// import React from 'react'
// import { Link } from 'react-scroll'
// import { PrimaryButton } from './PrimaryButton'

// const Navigation = () => {

//    return (
//       <NavigationStyled>
//          <div className="logo">
//          </div>
//          <ul>
//             <li>
//                <Link to="header" spy={true} smooth={true}>Home </Link>
//             </li>
//             <li>
//                <Link to="feathures" spy={true} smooth={true}>Feathures </Link>
//             </li>
//             <li>
//                <Link to="pricing" spy={true} smooth={true}>Pricing </Link>
//             </li>
//          </ul>
//          <PrimaryButton name='Signup' />
//       </NavigationStyled>
//    )
// }

// const NavigationStyled = styled.nav`
//    display: flex;
//    justify-content: space-between;
//    align-items: center;
   
//    ul{
//       display: flex;
//       justify-content: space-between;
//       width: 40%;
//       li{
//          cursor: pointer;
//       }
//    }
// `

// export default Navigation
'''
'''--- src/components/PrimaryButton.js ---
// import React from "react"
// const PrimaryButton = ({name}) => {
//     return (
//        <ButtonStyled>
//          {name}
//        </ButtonStyled>
//     )
//  }
 
 
//  const ButtonStyled=styled.button`
//     padding: 0.7rem 2rem;
//     background-color: var(--accent-pink);
//     border: none;
//     outline: none;
//     border-radius: 18px;
//     color: inherit;
//     font-size: 1rem;
//     font-family: inherit;
//     cursor: pointer;
//  `
 
//  export default PrimaryButton
'''
'''--- src/components/Product.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Product = ({ product, buy }) => {
  const { id, varieties, value, location, sold, expiration, quantity, price, farmer } =
    product;

  const triggerBuy = () => {
    buy(id, price);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{farmer}</span>
            <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src= "https://images.unsplash.com/photo-1596119415004-be78a87f8d14?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxzZWFyY2h8Nnx8YXZvY2Fkb3N8ZW58MHx8MHx8&w=1000&q=80" alt="avocado" style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{varieties}</Card.Title>
          <Card.Text className="flex-grow-1 ">{value}</Card.Text>
          <Card.Text className="flex-grow-1 ">{quantity}</Card.Text>
          <Card.Text className="text-secondary">
            <span>{expiration}</span>
          </Card.Text>
          <Card.Text className="text-secondary">
            <span>{location}</span>
          </Card.Text>
          <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Product.propTypes = {
  product: PropTypes.instanceOf(Object).isRequired,
  buy: PropTypes.func.isRequired,
};

export default Product;
'''
'''--- src/components/Products.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProduct from "./Addova";
import Product from "./Product";
import Loader from "../util/Loder";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../util/Notification";
import {
  getovas,
  buy_ova ,
  addova, 

} from "../utils/marketplace";

const Products = () => {
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(false);

  const getProducts = useCallback(async () => {
    try {
      setLoading(true);
      setProducts(await getovas());
      console.log(getovas());
    } catch (error) {
      console.log(error);
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addProduct = async (data) => {
    console.log(data);
    try {
      setLoading(true);
      addova(data).then((resp) => {
        //console.log(data);
        toast(<NotificationSuccess text="Product added successfully." />);
        getProducts();
      });
     
     
    } catch (error) {
      //console.log(error);
      toast(<NotificationError text="Failed to create a product." />);
    } finally {
      setLoading(false);
    }
  };

  const buy = async (id, price) => {
    try {
      //console.log(id);
      await buy_ova({
        id,
        price,
      }).then((resp) => getProducts());
      toast(<NotificationSuccess text="Product bought successfully" />);
    } catch (error) {
      console.log(error)
      toast(<NotificationError text="Failed to purchase product." />);
    } finally {
      setLoading(false);
    }
  };
  
  useEffect(() => {
    getProducts();
    console.log(getProducts())   
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4"
         
          >
            
          <img
            src="https://coloringhome.com/coloring/niE/yxj/niEyxjbKT.png"
            alt=""  style={{ maxWidth: "320px" }}
          />
            <AddProduct save={addProduct} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {products.map((_product) => (
              <Product
                product={{
                  ..._product,
                }}
                buy={buy}
              />
            ))}
          </Row>
        </> 
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Products;
'''
'''--- src/index.css ---
body {
  background-color: goldenrod;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from "react-dom/client";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

window.nearInitPromise = initializeContract()
  .then(() => {
    const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);
  })
  .catch(console.error);

reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/util/Cover.js ---
import React from "react";
import { login } from "../utils/near";
import Background from "../asset/background.jpg";
import { Button, Dropdown } from "react-bootstrap";
import DropdownToggle from "react-bootstrap/esm/DropdownToggle";

const Cover = () => {
  return (

    <div
      className="d-flex justify-content-center flex-column text-center "
      style={{ backgroundImage: "url(" + Background + ")", minHeight: "100vh", textAlign: "center",fontSize: "2rem" }}
    >
     

      <div classNames="mt-auto text-dark mb-5  text-align-center">
        
        <h1>WE ARE FRUITFUL</h1>
        <p> connect to your wallet to continue.</p>
      </div>
      <div className="d-flex justify-content-center"
      
      >
        <Dropdown>
          <DropdownToggle
            variant="dark"
            margin="2rem"
            align="end"
            className="d-flex align-items-center border rounded-pill py-1 "
          >
            <>
              <span className="ms-1"> Connect Wallet</span>
            </>
          </DropdownToggle>
          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Farmer Connect
              </Button>
            </Dropdown.Item>
            <Dropdown.Divider />
            <Dropdown.Item>
              <Button
                onClick={login}
                variant="outline-dark"
                className="rounded-pill px-3 mt-3"
              >
                Buyer Connect
              </Button>
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </div>
    </div>
  );
};

export default Cover;

'''
'''--- src/util/Loder.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;

'''
'''--- src/util/Notification.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
    <div>
      <i className="bi bi-check-circle-fill text-success mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );
  
  const NotificationError = ({ text }) => (
    <div>
      <i className="bi bi-x-circle-fill text-danger mx-2" />
      <span className="text-secondary mx-1">{text}</span>
    </div>
  );

export { Notification, NotificationSuccess, NotificationError };

'''
'''--- src/util/cover.css ---

.cover{
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.5);
    z-index: 1;
}
'''
'''--- src/util/wallet.js ---
import React from "react";
import { logout } from "../utils/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = "arose.testnet";

export const env = {
  networkId: "testnet",
  nodeUrl: "https://rpc.testnet.near.org",
  contractName: CONTRACT_NAME,
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
};
'''
'''--- src/utils/marketplace.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { Big } from "big.js";
const GAS = Big(3)
  .times(10 ** 13)
  .toFixed();
  export function addova(product) {
    product.price = parseNearAmount(product.price + "");
    return window.contract.addova({ 
      price: Number.parseInt(product.price),
      quntity: Number.parseInt(product.quntity),
      variety: product.varieties,
      value_addition: product.value,
      location: product.location,
      expiration: product.expiration

     });
  }
export function getovas() {
  //@ts-ignore
  return window.contract.getovas();
}

export async function buy_ova({ id, price }) {
  //@ts-ignore
  price = parseNearAmount(price.toString() + "");
  //@ts-ignore
  await window.contract.buy({ id: id.toString() }, GAS, price);
}

'''
'''--- src/utils/near.js ---
import { env } from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = env;

export async function initializeContract() {
  const near = await connect(
    //@ts-ignore
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );

  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.walletConnection = new WalletConnection(near);
  //@ts-ignore
  window.accountId = window.walletConnection.getAccountId();
  //@ts-ignore
  window.contract = new Contract(
    //@ts-ignore
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      // List here all view methods
      viewMethods: ["getovas", "getova"],
      // List call methods that change state
      changeMethods: ["buy", "addova"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  //@ts-ignore
  return window.walletConnection.getAccountId();
}

export function login() {
  //@ts-ignore
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  //@ts-ignore
  window.walletConnection.signOut();
  window.location.reload();
}

'''