*GitHub Repository "Hueeerta/ncd-project"*

'''--- .gitpod.yml ---
tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
# Busker Donation Plataform

## Description

- En un mundo donde se utiliza cada vez menos el dinero en efectivo, los músicos, artistas y trabajadores que sustentan su vida pidiendo en las calles, son los más afectados.
- Este proyecto busca ofrecer a estas personas un sistema de cobro digital y descentralizado para facilitar la donación de los espectadores que no cuentan con dinero en efectivo.
- A través de un código QR, que el artista pueda tener impreso en la calle, se podrá acceder directamente a su cuenta digital para realizar una donación.

## MVP

Este proyecto de desarrollado diseñado, desarrollado, probado y desplegado en la Testnet del Protocolo de NEWAR para el **_NEAR Certified Developer 31.10.2022_**, es un contrato simple que puede:

1. Crear y sumar nuevos perfiles de artistas callejeros a una collección.
2. Obtener una lista de todos los perfiles de artistas callejeros registrados.
3. Donar a uno de los artistas callejeros de la lista a elección.

## Diagram

![](https://i.imgur.com/CJKx4K2.png)

# Smart Contract

Esta plataforma cuenta con un modelo de contrato administrador que gestiona una colección de perfiles de artistas registrados en la blockchain.

## NEAR AccountId

El contrato ya se encuentra desplegado en la cuenta [buskerdapp2.hueeerta.testnet](https://stats.gallery/testnet/buskerdapp2.hueeerta.testnet/contract?t=all). Y con la [NEAR CLI](https://docs.near.org/tools/near-cli) ya puedes interactuar con el.

Para obtener la lista de perfiles de artistas registrados, puedes llamar al metodo get_buskers()

```
near view buskerdapp2.hueeerta.testnet get_buskers --accountId tu.cuenta.testnet
```

Para sumar tu perfil a la lista de perfiles de artistas, puedes llamar al metodo set_busker()

```
near call buskerdapp2.hueeerta.testnet set_busker '{"account_id":"tu.cuenta.testnet","name":"Nombre Artístico","category": "Malabarismo","location": "-34.584525,-58.404998","img":"https://ovallehoy.cl/wp-content/uploads/2017/01/Raul-malabarista.jpg","qr":"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/QR_code_for_mobile_English_Wikipedia.svg/1920px-QR_code_for_mobile_English_Wikipedia.svg.png"}' --accountId hueeerta.testnet
```

## Initialization

Para inicializar el contrato, primero debes de compilar el archivo de Rust a WebAssembly:

```
./build.sh
```

Luego debes desplegar el contrato generado en una cuenta en Testnet:

```
near deploy --accountId deploy.account.testnet --wasmFile target/wasm32-unknown-unknown/release/ncd_busker_project.wasm
```

Finalmente ya puedes interactuar con el contrato desde el NEAR CLI o dando `npm start` para interactuar desde el frontend.

# NEAR dApp

This app was initialized with [create-near-app]

# Quick Start

If you haven't installed dependencies during setup:

    npm install

Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run `npm start`. This will run a dev server.

# Exploring The Code

1. The smart-contract code lives in the `/contract` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/index.js`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.

# Deploy

Every smart contract in NEAR has its [own associated account][near accounts].
When you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:

## Step 0: Install near-cli (optional)

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

## Step 1: Create an account for the contract

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

   near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

   near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

## Step 2: deploy the contract

Use the CLI to deploy the contract to TestNet with your account ID.
Replace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE

## Step 3: set contract name in your frontend code

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

# Troubleshooting

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

[create-near-app]: https://github.com/near/create-near-app
[node.js]: https://nodejs.org/en/download/package-manager/
[jest]: https://jestjs.io/
[near accounts]: https://docs.near.org/concepts/basics/account
[near wallet]: https://wallet.testnet.near.org/
[near-cli]: https://github.com/near/near-cli
[gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "ncd-busker-project"
version = "1.0.0"
authors = ["Felipe Huerta <hueeerta@gmail.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
# Smart Contract

Esta plataforma cuenta con un modelo de contrato administrador que gestiona una colección de perfiles de artistas registrados en la blockchain.

## NEAR AccountId

El contrato ya se encuentra desplegado en la cuenta [buskerdapp2.hueeerta.testnet](https://stats.gallery/testnet/buskerdapp2.hueeerta.testnet/contract?t=all). Y con la [NEAR CLI](https://docs.near.org/tools/near-cli) ya puedes interactuar con el.

Para obtener la lista de perfiles de artistas registrados, puedes llamar al metodo get_buskers()

```
near view buskerdapp2.hueeerta.testnet get_buskers --accountId tu.cuenta.testnet
```

Para sumar tu perfil a la lista de perfiles de artistas, puedes llamar al metodo set_busker()

```
near call buskerdapp2.hueeerta.testnet set_busker '{"account_id":"tu.cuenta.testnet","name":"Nombre Artístico","category": "Malabarismo","location": "-34.584525,-58.404998","img":"https://ovallehoy.cl/wp-content/uploads/2017/01/Raul-malabarista.jpg","qr":"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/QR_code_for_mobile_English_Wikipedia.svg/1920px-QR_code_for_mobile_English_Wikipedia.svg.png"}' --accountId hueeerta.testnet
```

## Initialization

Para inicializar el contrato, primero debes de compilar el archivo de Rust a WebAssembly:

```
./build.sh
```

Luego debes desplegar el contrato generado en una cuenta en Testnet:

```
near deploy --accountId deploy.account.testnet --wasmFile target/wasm32-unknown-unknown/release/ncd_busker_project.wasm
```

Finalmente ya puedes interactuar con el contrato desde el NEAR CLI o dando `npm start` para interactuar desde el frontend.

'''
'''--- contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release

'''
'''--- contract/deploy.sh ---
#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/hello_near.wasm

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env,near_bindgen,AccountId,Balance,Promise};
use near_sdk::json_types::U128;

// Definition of the Busker Object with serde for JSON serialization on NEAR CLI and frontend 
#[derive(Serialize, Deserialize, BorshSerialize, BorshDeserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Busker {
    pub account_id: String,
    pub name: String,
    pub category: String,
    pub location: String,
    pub img: String,
    pub qr: String,
    pub donations: u128,
}

// Implement trait Default for initialize the Busker's structure 
impl Default for Busker {
    fn default() -> Self {
        Busker {
            account_id: String::from(""),
            name: String::from(""),
            category: String::from(""),
            location: String::from(""),
            img: String::from(""),
            qr: String::from(""),
            donations: 0,
        }
    }
}

// Implement the method that will create new Buskers 
impl Busker {
    pub fn new(name: String, category: String, location: String, img: String, qr: String) -> Self {
        Self {
            account_id: env::signer_account_id().to_string(),
            name,
            category,
            location,
            img,
            qr,
            donations: 0,
        }
    }
}

// Definition of the BuskerManager contract
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct BuskerManager {
  buskers_list: UnorderedMap<String,Busker>,
}

// Define the default, which automatically initializes the BuskerManager contract
impl Default for BuskerManager {
    fn default() -> Self {
        Self {
            // Initialization of the collection
            buskers_list: UnorderedMap::new(b"b".to_vec()),
        }
    }
}

// Implement the BuskerManager contract structure
#[near_bindgen]
impl BuskerManager {
    // Public method and mutable that creates a Busker and store it in the collections
    pub fn set_busker(&mut self, name: String, category: String, location: String, img: String, qr: String) -> bool {
        // Creation of the Busker object
        let busker: Busker = Busker::new(
            String::from(&name),
            String::from(&category),
            String::from(&location),
            String::from(&img),
            String::from(&qr),
        );

        // Check if the profile already exist
        if self.search_busker(busker.account_id.to_string()) {
            // Don't store the Busker in the Buskers collection. Return a log.
            env::log_str(
                format!("WARNING: Your busker profile already exist with {} account.", &busker.account_id).as_str(),
            );
            false
        } else {
            // Store the new Busker in the Buskers collection. Return a log.
            self.buskers_list.insert(&busker.account_id, &busker);
            env::log_str(
                format!("SUCCESS: New busker profile created with {} account", &busker.account_id).as_str(),
            );
            true
        }
    }

    // Read method that returns a vector with the collection of Buskers
    pub fn delete_busker(&mut self, account_id: String) -> bool {
        // Check if the profile exist
        if self.search_busker(account_id.to_string()) {
            // Delete the Busker profile from the Buskers collection. Return a log.
            self.buskers_list.remove(&account_id.to_string());
            env::log_str("SUCCESS: Your busker profile has been deleted successfully.");
            false
        } else {
            // We do nothing. The profile  Return a log.
            env::log_str(
                format!("ERROR: The {} account has not created a profile yet.", &account_id).as_str(),
            );
            true
        }
    }

    // Search if an accountId has already a profile created
    pub fn search_busker(&self, account_id: String) -> bool {
        // Search to find if this account Id already have a Busker profile in the collection
        let search = self.buskers_list.get(&account_id);
        search.is_some()
    }

    // Read method that returns a Busker
    pub fn get_busker(&self, account_id: String) -> Option<Busker> {
        // Search to find if this account Id already have a Busker profile in the collection
        let search = self.buskers_list.get(&account_id);
        if search.is_some() {
            env::log_str("SUCCESS: Busker profile founded.");
            Some(search.unwrap())
        } else {
            env::log_str("ERROR: Busker profile doesn't exist.");
            None
        }
    }

    // Read method that returns a vector with the collection of Buskers
    pub fn get_buskers(&self) -> Vec<Busker> {
        self.buskers_list.values_as_vector().to_vec()
    }

    #[payable]
    // Public method for donation to a Busker
    pub fn donate_to_busker(&mut self, beneficiary: AccountId) -> U128 {
        // Get who is calling the method and how much $NEAR they attached
        let donation_amount: Balance = env::attached_deposit();

        assert!(
            env::attached_deposit() > 0,
            "WARNING: Attach at least 1 NEAR for the donation."
        );

        // Find the Busker beneficiary
        match self.buskers_list.get(&beneficiary.to_string()) {
            // Check if the Busker exist
            Some(mut busker) => {
                // If exist, we save the donation in to the Busker profile
                busker.donations += donation_amount;
                self.buskers_list.insert(&beneficiary.to_string(), &busker);

                // Deposit the donation
                Promise::new(beneficiary).transfer(env::attached_deposit());
                U128(donation_amount)
            }
            None => U128(0),
        }
    }
}
'''
'''--- frontend/components/App.js ---
import "regenerator-runtime/runtime";
import React, { useState, useEffect } from "react";
import { utils } from "near-api-js";
import ProfileList from "./ProfileList";
import SelectedProfile from "./SelectedProfile";

const App = ({ isSignedIn, wallet, buskerManager }) => {
  const [buskerList, setBuskerList] = useState([]);
  const [hasProfile, setHasProfile] = useState({
    account_id: "",
    name: "",
    category: "",
    location: "",
    img: "",
    qr: "",
    donations: 0,
  });
  const [newBusker, setNewBusker] = useState({
    name: "",
    category: "",
    location: "",
    img: "",
    qr: "",
  });

  const yoctoToNEAR = (amount) =>
    utils.format.formatNearAmount(
      amount.toLocaleString("fullwide", { useGrouping: false })
    );

  const getBusker = () => {
    buskerManager
      .getBusker(wallet.accountId)
      .then((response) => {
        console.log("My profile:", response);
        // debugger;
        if (response) {
          setHasProfile(response);
        }
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const getBuskersList = () => {
    buskerManager
      .getBuskers()
      .then((response) => {
        // console.log("Busker List:", response);
        setBuskerList(response);
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const createNewBusker = ({ name, category, location, img, qr }) => {
    buskerManager
      .setBusker(name, category, location, img, qr)
      .then((response) => {
        alert(response.receipts_outcome[0].outcome.logs[0]);
        // debugger;
        getBusker();
        getBuskersList();
      })
      .catch((error) => {
        console.error(error);
      });
  };

  useEffect(() => {
    if (isSignedIn) {
      getBusker();
      if (hasProfile.name === "") {
        getBuskersList();
      }
    }
  }, []);

  // If the user haven't signed in with the NEAR Wallet
  if (!isSignedIn) {
    return (
      <div className="container p-4">
        <h1>Busker Donation Plataform</h1>
        <p>Here you can find Buskers to donate money to.</p>
        <p>
          Start by <strong>logging in</strong> with your NEAR wallet.
        </p>
        <button type="button" onClick={() => wallet.signIn()}>
          Log in
        </button>
      </div>
    );
  }

  const handleInputChange = (event) => {
    const buskerInput = { ...newBusker };
    if (event.target.id === "name") {
      buskerInput.name = event.target.value;
    } else if (event.target.id === "category") {
      buskerInput.category = event.target.value;
    } else if (event.target.id === "location") {
      buskerInput.location = event.target.value.replace(/\s/g, "");
    } else if (event.target.id === "img") {
      buskerInput.img = event.target.value;
    }
    setNewBusker(buskerInput);
  };

  const handleNewBusker = (event) => {
    event.preventDefault();
    console.log("Calling set_busker() on chain:", newBusker);
    event.target.innerText = "Creating...";
    createNewBusker(newBusker);
  };

  const handleDeleteBusker = (event) => {
    event.target.innerText = "Deleting...";
    buskerManager
      .deleteBusker(wallet.accountId)
      .then((response) => {
        alert(response.receipts_outcome[0].outcome.logs[0]);
        setHasProfile({
          account_id: "",
          name: "",
          category: "",
          location: "",
          img: "",
          qr: "",
          donations: 0,
        });
        getBuskersList();
      })
      .catch((error) => {
        console.error(error);
      });
  };

  const PrintImage = () => {
    const pwa = window.open("about:blank", "_new");
    pwa.document.open();
    pwa.document.write(
      "<html><head><scri" +
        "pt>function step1(){\n" +
        "setTimeout('step2()', 10);}\n" +
        "function step2(){window.print();window.close()}\n" +
        "</scri" +
        "pt></head><body onload='step1()'>\n" +
        "<img src='" +
        hasProfile.qr +
        "' width='100%' /></body></html>"
    );
    pwa.document.close();
  };

  // If the user is logged in
  return (
    <>
      <div className="container p-4">
        <h1>Busker Donation Plataform</h1>
        <button type="button" onClick={() => wallet.signOut()}>
          Log out {wallet.accountId}
        </button>
      </div>
      <hr />
      {hasProfile.name === "" ? ( // If user don't have a profile
        <>
          <div className="container p-4">
            <h3>Wanna create your own Profile?</h3>
            <form>
              <label htmlFor="name">
                Your stage name:
                <input
                  id="name"
                  name="name"
                  type="text"
                  value={newBusker.name}
                  placeholder="Busker Name"
                  onChange={handleInputChange}
                  required
                />
              </label>
              <br />
              <label htmlFor="category">
                Category of your performance:
                <input
                  id="category"
                  name="category"
                  type="text"
                  value={newBusker.category}
                  placeholder="Juggling"
                  onChange={handleInputChange}
                  required
                />
              </label>
              <br />
              <label htmlFor="location">
                Place where you can be found on a regular basis:
                <input
                  id="location"
                  name="location"
                  type="text"
                  value={newBusker.location}
                  placeholder="-33.425572,-70.614705"
                  onChange={handleInputChange}
                />
              </label>
              <br />
              <label htmlFor="img">
                An image of you and/or your performance:
                <input
                  id="img"
                  name="img"
                  type="text"
                  value={newBusker.img}
                  placeholder="https://upload.wikimedia.org/wikipedia/commons/thumb/f/f4/One-man_band_street_performer_-_5.jpg/1280px-One-man_band_street_performer_-_5.jpg"
                  onChange={handleInputChange}
                  required
                />
              </label>
              <br />
              <br />
              <button type="submit" onClick={handleNewBusker}>
                Create my Busker profile
              </button>
            </form>
          </div>
          <hr />

          <div className="container p-4">
            <div className="row">
              <h3>Looking for a Busker to donate to?</h3>
              <div className="col-md-7">
                <ProfileList buskerList={buskerList} />
              </div>
              <div className="col-md-5">
                <SelectedProfile
                  buskerManager={buskerManager}
                />
              </div>
            </div>
          </div>
        </>
      ) : (
        // If user has a profile
        <div className="container p-4">
          <h2>Welcome {hasProfile.name}</h2>
          <img src={hasProfile.img} alt={hasProfile.name} width="200" />
          <br />
          <p>
            <strong>Total donation recieved:</strong> {yoctoToNEAR(hasProfile.donations)} NEAR
          </p>
          <br />
          <button onClick={PrintImage}>Print your QR</button>
          <br />
          <button onClick={handleDeleteBusker}>Delete my profile</button>
        </div>
      )}
    </>
  );
};
export default App;

'''
'''--- frontend/components/ProfileList.js ---
import { useContext } from "react";
import ProfileSelectionContext from "../context/ProfileSelectionContext";

function ProfileList({ buskerList }) {
  const { profileSelection, setProfileSelection } = useContext(
    ProfileSelectionContext
  );

  return (
    <div className="list-group h-100">
      {buskerList.map((busker, key) => (
        <div
          key={key + busker.account_id}
          className="list-group-item list-group-item-action d-flex flex-row justify-content-start"
          onClick={() => {
            console.log(busker.account_id);
            setProfileSelection(busker);
          }}
        >
          <img
            src={busker.img}
            alt={busker.name}
            className="img-thumbnail mr-4 rounded"
            width="70"
          />
          <p className="ml-4">
            {busker.name}, {busker.category}
          </p>
        </div>
      ))}
    </div>
  );
}

export default ProfileList;

'''
'''--- frontend/components/SelectedProfile.js ---
import { useState, useContext } from "react";
import ProfileSelectionContext from "../context/ProfileSelectionContext";

export default function SelectedProfile({ buskerManager }) {
  const [donationAmount, setDonationAmount] = useState(0);
  const { profileSelection, setProfileSelection } = useContext(
    ProfileSelectionContext
  );

  const handleDonation = (account_id) => {
    console.log("Dona", donationAmount);
    buskerManager
      .donateToBusker(account_id, donationAmount)
      .then((response) => {
        console.log(response);
      })
      .catch((error) => {
        console.error(error);
      });
  };

  return (
    <>
      <div id="single-profile" className="border rounded p-4">
        <div id="single-profile-content" className="">
          <img
            src={profileSelection.img}
            alt={profileSelection.name}
            className=""
            width="100"
          />

          <h3>{profileSelection.name}</h3>
          <p>{profileSelection.category}</p>
          <p>
            <a
              href={
                "http://maps.google.com/maps?z=19&t=m&q=loc:" +
                profileSelection.location
              }
              target="_blank"
            >
              {profileSelection.location}
            </a>
          </p>
          <div id="single-profile-donation">
            <input
              className="donation"
              id="amount"
              type="number"
              name="amount"
              value={donationAmount}
              onChange={(event) => {
                setDonationAmount(event.target.value);
              }}
            />{" "}
            NEAR
            <br />
            <button
              onClick={(event) => {
                event.target.innerText = "Loading...";
                handleDonation(profileSelection.account_id);
              }}
            >
              Donate
            </button>
          </div>
        </div>
      </div>
    </>
  );
}

'''
'''--- frontend/context/ProfileSelectionContext.js ---
import { createContext, useState } from "react";

const ProfileSelectionContext = createContext();

export const ProfileSelectionProvider = ({ children }) => {
  const [profileSelection, setProfileSelection] = useState({
    account_id: "",
    name: "",
    category: "",
    location: "",
    img: "",
    qr: "",
    donations: 0,
  });

  return (
    <ProfileSelectionContext.Provider
      value={{ profileSelection, setProfileSelection }}
    >
      {children}
    </ProfileSelectionContext.Provider>
  );
};

export default ProfileSelectionContext;

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
import React, { useState } from "react";
import ReactDOM from "react-dom/client";
import App from "./components/App";
import { ProfileSelectionProvider } from "./context/ProfileSelectionContext";
import "bootstrap/dist/css/bootstrap.min.css";
import { Wallet } from "./lib/near-wallet";
import { BuskerManager } from "./lib/busker-manager";

const wallet = new Wallet({ createAccessKeyFor: process.env.CONTRACT_NAME });
const buskerManager = new BuskerManager({
  contractId: process.env.CONTRACT_NAME,
  userWallet: wallet,
});

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp();

  ReactDOM.createRoot(document.getElementById("root")).render(
    <ProfileSelectionProvider>
      <App
        isSignedIn={isSignedIn}
        wallet={wallet}
        buskerManager={buskerManager}
      />
    </ProfileSelectionProvider>
  );
};

'''
'''--- frontend/lib/busker-manager.js ---
import { utils } from "near-api-js";

export class BuskerManager {
  constructor({ contractId, userWallet }) {
    this.contractId = contractId;
    this.wallet = userWallet;
  }

  async setBusker(name, cat, loc, img, qr) {
    return await this.wallet.callMethod({
      contractId: this.contractId,
      method: "set_busker",
      args: {
        name: name,
        category: cat,
        location: loc,
        img: img,
        qr: "https://upload.wikimedia.org/wikipedia/commons/thumb/d/d0/QR_code_for_mobile_English_Wikipedia.svg/1920px-QR_code_for_mobile_English_Wikipedia.svg.png",
      },
    });
  }

  async getBusker(accountId) {
    return await this.wallet.viewMethod({
      contractId: this.contractId,
      method: "get_busker",
      args: {
        account_id: accountId,
      },
    });
  }

  async deleteBusker(accountId) {
    return await this.wallet.callMethod({
      contractId: this.contractId,
      method: "delete_busker",
      args: {
        account_id: accountId,
      },
    });
  }

  async getBuskers() {
    return await this.wallet.viewMethod({
      contractId: this.contractId,
      method: "get_buskers",
    });
  }

  async donateToBusker(accountId, amount) {
    const amountInYocto = utils.format.parseNearAmount(amount);
    return await this.wallet.callMethod({
      contractId: this.contractId,
      method: "donate_to_busker",
      args: { beneficiary: accountId },
      deposit: amountInYocto,
    });
  }
}

'''
'''--- frontend/lib/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}
'''
'''--- frontend/package.json ---
{
  "name": "ncd-busker-project",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "@babel/core": "^7.18.2",
    "@babel/preset-env": "^7.18.2",
    "@babel/preset-react": "^7.17.12",
    "@types/node": "^18.6.2",
    "react-test-renderer": "^18.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2",
    "nodemon": "^2.0.16",
    "parcel": "^2.6.0",
    "process": "^0.11.10",
    "env-cmd": "^10.1.0"
  },
  "dependencies": {
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "regenerator-runtime": "^0.13.9",
    "@near-wallet-selector/core": "^7.0.0",
    "@near-wallet-selector/ledger": "^7.0.0",
    "@near-wallet-selector/math-wallet": "^7.0.0",
    "@near-wallet-selector/meteor-wallet": "^7.0.0",
    "@near-wallet-selector/modal-ui": "^7.0.0",
    "@near-wallet-selector/my-near-wallet": "^7.0.0",
    "@near-wallet-selector/near-wallet": "^7.0.0",
    "@near-wallet-selector/nightly": "^7.0.0",
    "@near-wallet-selector/nightly-connect": "^7.0.0",
    "@near-wallet-selector/sender": "^7.0.0",
    "@near-wallet-selector/wallet-connect": "^7.0.0"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
'''
'''--- frontend/start.sh ---
#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\033[1;32m'
  NC='\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run ${GREEN}'npm run deploy'${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi

'''
'''--- package.json ---
{
  "name": "ncd-busker-project",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "cd integration-tests && cargo run --example integration-tests \"../contract/target/wasm32-unknown-unknown/release/hello_near.wasm\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {
    "bootstrap": "^5.2.2"
  }
}

'''