*GitHub Repository "itegulov/near-abi-demo"*

'''--- Cargo.toml ---
[package]
name = "near-abi-demo"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"

[workspace]
members = [
  "adder",
  "client",
  "cross-contract-call",
]

'''
'''--- adder/Cargo.toml ---
[package]
name = "adder"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = { git = "https://github.com/near/near-sdk-rs", branch = "daniyar/abi-macro", features = ["unstable"] }
schemars = "0.8"
serde = { version = "1", features = ["derive"] }

'''
'''--- adder/src/lib.rs ---
use near_sdk::near_abi;

#[near_abi]
mod adder {
    use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
    use near_sdk::near_bindgen;
    use near_sdk::schemars::JsonSchema;
    use near_sdk::serde::{Deserialize, Serialize};

    #[derive(JsonSchema, Serialize, Deserialize)]
    pub struct Pair(u32, u32);

    #[near_bindgen]
    #[derive(Default, BorshDeserialize, BorshSerialize)]
    pub struct Adder {}

    #[near_bindgen]
    impl Adder {
        pub fn add(&self, a: Pair, b: Pair) -> Pair {
            Pair(a.0 + b.0, a.1 + b.1)
        }
    }
}

'''
'''--- client/Cargo.toml ---
[package]
name = "client"
version = "0.1.0"
edition = "2021"

[dev-dependencies]
anyhow = "1.0"
near-account-id = "0.12.0"
near-crypto = "0.12.0"
near-primitives = "0.12.0"
near-sdk = { git = "https://github.com/near/near-sdk-rs", branch = "daniyar/abi-macro", features = ["unstable"] }
near-abi-rs = { git = "https://github.com/itegulov/near-abi-rs" }
serde_json = "1.0"
serde = "1.0"
test-log = { version = "0.2.8", default-features = false, features = ["trace"] }
tokio = { version = "1.14", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.5", features = ["env-filter"] }
workspaces = "0.3.0"

[build-dependencies]
anyhow = "1.0"
near-abi-rs = { git = "https://github.com/itegulov/near-abi-rs" }

'''
'''--- client/build.rs ---
use std::path::PathBuf;

use near_abi_rs::Config;

fn main() -> anyhow::Result<()> {
    let config = Config {
        out_dir: Some(PathBuf::from("gen")),
    };
    config.compile_abi(&["../target/near/adder/abi.json"])?;
    Ok(())
}

'''
'''--- client/src/lib.rs ---
#[cfg(test)]
mod tests {
    use test_log::test;
    use workspaces::network::DevAccountDeployer;

    pub mod ext {
        include!("../gen/abi.rs");
    }

    #[test(tokio::test)]
    async fn it_works() -> anyhow::Result<()> {
        let worker = workspaces::sandbox().await?;
        let contract = worker
            .dev_deploy(include_bytes!(
                "../../target/wasm32-unknown-unknown/release/adder.wasm"
            ))
            .await?;

        let contract = ext::ExtAdder { contract: contract };
        let res = contract.add(&worker, vec![3, 4], vec![2, 1]).await?;
        println!("Result: {:?}", res);

        Ok(())
    }
}

'''
'''--- cross-contract-call/Cargo.toml ---
[package]
name = "cross-contract-call"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = { git = "https://github.com/near/near-sdk-rs", branch = "daniyar/abi-macro", features = ["unstable"] }
near-sdk-abi = { git = "https://github.com/itegulov/near-sdk-abi" }
schemars = "0.8"
serde = { version = "1", features = ["derive"] }

'''
'''--- cross-contract-call/src/lib.rs ---
use near_sdk::near_abi;

#[near_abi]
mod abi {
    use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
    use near_sdk::near_bindgen;

    near_sdk_abi::near_abi_ext!("../target/near/adder/abi.json");

    #[near_bindgen]
    #[derive(Default, BorshDeserialize, BorshSerialize)]
    pub struct Delegator {}

    #[near_bindgen]
    impl Delegator {
        pub fn delegate(
            &self,
            a: u32,
            b: u32,
            c: u32,
            d: u32,
            adder_account_id: near_sdk::AccountId,
        ) -> near_sdk::Promise {
            ext_adder::ext(adder_account_id).add(vec![a.into(), b.into()], vec![c.into(), d.into()])
        }
    }
}

'''
'''--- src/main.rs ---
fn main() {
    println!("Hello, world!");
}

'''