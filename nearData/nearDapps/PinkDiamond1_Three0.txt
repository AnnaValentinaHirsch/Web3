*GitHub Repository "PinkDiamond1/Three0"*

'''--- CODE_OF_CONDUCT.md ---
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
sreegrandhe@gmail.com.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.

'''
'''--- README.md ---
Three0
==================
Three0 is a completely decentralized BaaS (Backed-As-A-Service) providing easy to use tools to build Web3 dApps through a Web2 lens. Three0 offers 4 main services - Database, Authentication, Storage, and Hosting.

Currently this project contains the Database and Authentication services and will soon be implementing the Storage and Hosting services.

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Clone this repository
3. Install dependencies: `npm install`
4. Run the local development server: `npm run dev` (see `package.json` for a
   full list of `scripts` you can run with `npm`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

This [React] app was initialized with [create-near-app]

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `npm
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `npm run dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `three0.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `three0.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account three0.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'three0.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    npm run deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============
On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

Additional Notes
================
## NEAR Kurtosis
- To use your own NEAR Kurtosis instance create a `.env` folder in the `.near` directory and set the `KURTOSIS_URL` variable to the URL of your own Kurtosis instance.
- To use the NEAR CLI for the localnet mode (Three0's Kurtosis Instance) set the `NEAR_ENV` environment variable to `localnet` before running any `near` commands. This will ensure that the NEAR CLI uses the localnet node URL and keys.
   - To change back to testnet set the `NEAR_ENV` environment variable to `testnet` before running any `near` commands.
- We at Three0 use our own cloud NEAR Kurtosis instance to develop. If you wish to use the `testnet` to develop change
```
case 'production':
case 'testnet':
   return {
      ...
   }
case 'development':
case 'localnet':
	return {
      ...
	}
```
to
```
case 'production':
case 'development':
case 'testnet':
   return {
      ...
   }
case 'localnet':
	return {
      ...
	}
```
'''
'''--- StyleGuide.md ---
Coding Style Guide
==================
This document will give Three0 coding standards, file formatting, and styling recommendations

## General
- Use tabs for indentation
- Use camelCase for variable names
- Use camelCase for function names
- Use camelCase for method names
- Use this-case for directory names
- Use ThisCase for file names (excluding index files)

## Imports
- Use import for importing modules
- Use import as for importing modules with aliases
- Use import { x } from 'module' for importing specific symbols
- Use import {x as y} from 'module' for importing specific symbols with aliases
- Use import * as x from 'module' for importing all symbols as a group
- Use import 'module' for importing side effects only
- Import modules in the following order:
  - external modules
  - modules from a parent directory
  - modules from the same or a sibling's directory
  - modules from a child's directory
    - directory import order
      - assets
      - components
      - services
      - state
      - views
- Group similar import together
- Don't skip lines between import

## Exports
- Use export for exporting symbols that can be imported
- Use export default for exporting symbols that can be imported with a default
- Use export = for exporting symbols that can be imported with a default and can also be imported with aliases
- Use export as namespace for exporting symbols that can be imported with a default and can also be imported with aliases

## Directory Structure
- Use this-case for directory names
- Use this_case for file names
- Use index.ts for the main entry point of a module
- Include the following directories pathing from the root of the project
  - src
    - assets
      - images
      - styles
      - fonts
    - components
      - component1 directory
        - component1 files
      - component2 directory
        - component2 files
    - services
    - state
    - views
      - view1 directory
        - view1 files
      - view2 directory
        - view2 files
    - Core.ts (entry point for the application)
    - config.ts (configuration file for the application)
    - index.ts 
    - index.html (main html file for the application)
    - global.css (global css file for the application)

    visit https://www.taniarascia.com/react-architecture-directory-structure/ for more information

## Classes
- Use class for declaring classes
- Use extends for inheriting from a parent class
- Use implements for implementing an interface
- Use constructor for declaring a constructor
- Use super for calling the parent class constructor

## Functions
- Use function for declaring functions
- Use => for declaring arrow functions
- Use async for declaring async functions
- Use async => for declaring async arrow functions

## Variables
- Use let for declaring variables that can be reassigned
- Use const for declaring variables that cannot be reassigned

## Types
- Use type for declaring types
- Use interface for declaring interfaces
- Use enum for declaring enums
- Use namespace for declaring namespaces

## Testing
- Use jest for testing
- Use jest-cli for running tests from the command line
- Use jest-junit for outputting test results in JUnit format
- Use jest-sonar-reporter for outputting test results in SonarQube format
- Use jest-html-reporter for outputting test results in HTML format
- Use jest-coverage-badges for outputting test coverage in badges
    
## Comments
- Use // for single line comments
- Use /* */ for multi-line comments
- Use /// for documentation comments

## eslint
- Use eslint for linting
- Use eslint-config-airbnb-base for the base configuration
- Use eslint-config-prettier for disabling all formatting-related rules
- Use eslint-plugin-import for linting import statements
- Use eslint-plugin-prettier for running Prettier as an ESLint rule

## Formatting
- Use Prettier for formatting
- Use prettier-eslint for formatting with ESLint
- Use prettier-eslint-cli for formatting with ESLint from the command line
- Use prettier-eslint-config for formatting with ESLint

## npm
- Use npm for package management
- Use package.json for defining the package   

'''
'''--- contract/Cargo.toml ---
[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = ["controller", "project", "storage", "hosting", "token"]

'''
'''--- contract/README.md ---
Three0-Rust Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = `cargo build --target wasm32-unknown-unknown ${debug ? '' : '--release'}`;

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const type = debug ? 'debug' : 'release';
  const outDir = `./target/wasm32-unknown-unknown/${type}`

  const linkDir = `${calledFromDir}/out`
  const link = `${linkDir}/main.wasm`
  const controllerPackageName = getName("controller")
  const outFile = `${outDir}/${controllerPackageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)

  const frontEndDir = `${calledFromDir}/src/contract-wasms`
  const projectFrontEndLink = `${frontEndDir}/near.wasm`
  const projectPackageName = getName("project")
  const outProjectFile = `${outDir}/${projectPackageName}.wasm`

  const storageFrontEndLink = `${frontEndDir}/near-storage.wasm`
  const storagePackageName = getName("storage")
  const outStorageFile = `${outDir}/${storagePackageName}.wasm`

  const hostingFrontEndLink = `${frontEndDir}/near-hosting.wasm`
	const hostingPackageName = getName("hosting")
	const outHostingFile = `${outDir}/${hostingPackageName}.wasm`

  const tokenFrontEndLink = `${frontEndDir}/near-token.wasm`
	const tokenPackageName = getName("token")
	const outTokenFile = `${outDir}/${tokenPackageName}.wasm`

  sh.mkdir('-p', frontEndDir)
  sh.rm('-f', projectFrontEndLink)
  sh.rm('-f', storageFrontEndLink)
  sh.rm('-f', hostingFrontEndLink)
  sh.rm('-f', tokenFrontEndLink)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outProjectFile,projectFrontEndLink)
  sh.cp('-u',outStorageFile,storageFrontEndLink)
  sh.cp('-u', outHostingFile, hostingFrontEndLink)
  sh.cp('-u', outTokenFile, tokenFrontEndLink)

  sh.echo("")
  sh.echo("Controller Size:");
  sh.exec(`wc -c ${outFile} | awk '{print $1}'`)
  sh.echo("")
  sh.echo("Project Size:")
  sh.exec(`wc -c ${outProjectFile} | awk '{print $1}'`)
  sh.echo("")
  sh.echo("Storage Size:")
  sh.exec(`wc -c ${outStorageFile} | awk '{print $1}'`)
  sh.echo("")
  sh.echo("Hosting Size:")
	sh.exec(`wc -c ${outHostingFile} | awk '{print $1}'`)
	sh.echo("")
  sh.echo("Token Size:")
	sh.exec(`wc -c ${outTokenFile} | awk '{print $1}'`)
	sh.echo("")
}

// exit script with the same code as the build command
process.exit(code)

function getName(fileDir) {
  return require('fs').readFileSync(`${__dirname}/${fileDir}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
}
'''
'''--- contract/controller/Cargo.toml ---
[package]
name = "three0_controller"
version = "0.1.0"
authors = ["Three0 <sreegrandhe@gmail.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "3.1.0"
'''
'''--- contract/controller/src/lib.rs ---
/*
 * This is an example of a Rust smart contract with two simple, symmetric functions:
 *
 * 1. set_greeting: accepts a greeting, such as "howdy", and records it for the user (account_id)
 *    who sent the request
 * 2. get_greeting: accepts an account_id and returns the greeting saved for it, defaulting to
 *    "Hello"
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://github.com/near/near-sdk-rs
 *
 */

mod types;

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen, setup_alloc, AccountId};
use near_sdk::collections::{LookupMap};

pub use crate::types::*;

setup_alloc!();

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Three0 {
    dev_project_map: LookupMap<AccountId, Vec<ProjectRef>>,
}

impl Default for Three0 {
  fn default() -> Self {
    Self {
      dev_project_map: LookupMap::new(b"project_map".to_vec()),
    }
  }
}

#[near_bindgen]
impl Three0 {
    pub fn create_project(&mut self, chain_type: String, contract_address: String) {
        let project = ProjectRef::new(chain_type.clone(), contract_address.clone(), env::signer_account_id(), env::block_timestamp());
        let projects_ref = self.dev_project_map.get(&env::signer_account_id());
        let mut projects = match projects_ref {
            Some(projects) => projects,
            None => Vec::new(),
        };

        projects.push(project);
        self.dev_project_map.insert(&env::signer_account_id(), &projects);
    }

    pub fn delete_project(&mut self, contract_address: String) -> bool{
        let projects = self.dev_project_map.get(&env::signer_account_id());
        match projects {
            Some(projects) => {
                let mut projects = projects.clone();
                let mut index = 0;
                for project in projects.iter() {
                    if project.contract_address == contract_address {
                        projects.remove(index);
                        self.dev_project_map.insert(&env::signer_account_id(), &projects);
                        return true;
                    }
                    index += 1;
                }
                return false;
            }
            None => {
                return false;
            }
        }
    }

    pub fn get_all_projects(&self, owner: AccountId, offset: usize, limit: usize) -> AllSchema {
        let projects = self.dev_project_map.get(&owner);

        return match projects {
            Some(projects) => {
                let entries = projects
                    .iter()
                    .rev()
                    .skip(offset)
                    .take(limit)
                    .map(|x| x.clone())
                    .collect::<Vec<ProjectRef>>();

                AllSchema {
                    entries: entries,
                    num: projects.len() as u16,
                }
            },
            None => 
                AllSchema {
                    entries: Vec::new(),
                    num: 0,
                }
        }
    }

    pub fn get_project(&self, contract_address: String, account_id: String) -> AllSchema {
        let projects = self.dev_project_map.get(&account_id);
        let mut entries = Vec::new();
        
        match projects {
            Some(projects) => {
                for project in projects.iter() {
                    if project.contract_address.contains(&contract_address) {
                        entries.push(project.clone());
                    }
                }
            }
            None => {}
        }

        let len = entries.len();

        AllSchema{
            entries: entries,
            num: len as u16,
        }
    }
}

// create unit tests in this file
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // Initializing the context for the test
    // See https://docs.rs/near-sdk/3.1.0/near_sdk/struct.VMContext.html
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    // test for creating a project
    #[test]
    fn test_create_project() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0::default();
        contract.create_project("eth".to_string(), "0x123".to_string());
        let projects = contract.get_all_projects(env::signer_account_id(), 0, 10);
        assert_eq!(projects.entries.len(), 1);
    }

    // test for deleting a project
    #[test]
    fn test_delete_project() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0::default();
        contract.create_project("eth".to_string(), "0x123".to_string());
        contract.create_project("eth".to_string(), "0x456".to_string());
        contract.create_project("eth".to_string(), "0x789".to_string());
        let projects = contract.get_all_projects(env::signer_account_id(), 0, 10);
        assert_eq!(projects.entries.len(), 3);
        contract.delete_project("0x456".to_string());
        let projects = contract.get_all_projects(env::signer_account_id(), 0, 10);
        assert_eq!(projects.entries.len(), 2);
    }

    // test for getting a project
    #[test]
    fn test_get_project() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0::default();
        contract.create_project("eth".to_string(), "0x123".to_string());
        contract.create_project("eth".to_string(), "0x456".to_string());
        contract.create_project("eth".to_string(), "0x789".to_string());
        let projects = contract.get_project("0x456".to_string(), env::signer_account_id());
        assert_eq!(projects.entries.len(), 1);
    }

    // test for getting all projects
    #[test]
    fn test_get_all_projects() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0::default();
        contract.create_project("eth".to_string(), "0x123".to_string());
        contract.create_project("eth".to_string(), "0x456".to_string());
        contract.create_project("eth".to_string(), "0x789".to_string());
        let projects = contract.get_all_projects(env::signer_account_id(), 0, 10);
        assert_eq!(projects.entries.len(), 3);
    }
}

'''
'''--- contract/controller/src/types.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{AccountId};
use near_sdk::serde::{Serialize};

#[derive(BorshDeserialize, BorshSerialize, Serialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct ProjectRef {
    pub chain_type: String,
    pub contract_address: String,
    pub owner: AccountId,
    pub created_at: u64,
}

impl ProjectRef {
    pub fn new(chain_type: String, contract_address: String, owner: AccountId, created_at: u64) -> ProjectRef {
        ProjectRef {
            chain_type,
            contract_address,
            owner,
            created_at,
        }
    }
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct AllSchema {
    pub num: u16,
    pub entries: Vec<ProjectRef>, 
}
'''
'''--- contract/hosting/Cargo.toml ---
[package]
name = "three0_hosting"
version = "0.1.0"
authors = ["Three0 <usajjad5@utexas.edu>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "3.1.0"

'''
'''--- contract/hosting/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::collections::LookupMap;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Three0Hosting {
    pub file_map: LookupMap<String, Web4Response>,
}

impl Default for Three0Hosting {
    fn default() -> Self {
      Self {
        file_map: LookupMap::new(b"hosting_map".to_vec()),
      }
    }
  }

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct FileContents {
    pub path: String,
    pub redirect_url: String, 
}

#[near_bindgen]
impl Three0Hosting {
    pub fn add_to_map(&mut self, content: Vec<FileContents>) {
        for file in content {
            let response = Web4Response::BodyUrl {
                body_url: file.redirect_url,
            };
            self.file_map.insert(&file.path, &response);
        }
    }

    /// Learn more about web4 here: https://web4.near.page
    pub fn web4_get(&self, request: Web4Request) -> Web4Response {
        let mut key = request.path;
        if key == "/" {
            key = "/index.html".to_string();
        }
        let value = self.file_map.get(&key).unwrap();
        value
    }
}

#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Web4Request {
    #[serde(rename = "accountId")]
    pub account_id: Option<String>,
    pub path: String,
    #[serde(default)]
    pub params: std::collections::HashMap<String, String>,
    #[serde(default)]
    pub query: std::collections::HashMap<String, Vec<String>>,
    pub preloads: Option<std::collections::HashMap<String, Web4Response>>,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde", untagged)]
pub enum Web4Response {
    Body {
        #[serde(rename = "contentType")]
        content_type: String,
        body: near_sdk::json_types::Base64VecU8,
    },
    BodyUrl {
        #[serde(rename = "bodyUrl")]
        body_url: String,
    },
    PreloadUrls {
        #[serde(rename = "preloadUrls")]
        preload_urls: Vec<String>,
    },
}
//create unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn get_context(predecessor_account_id: String) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id,
            input: vec![],
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view: false,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    #[test]
    fn test_web4_get() {
        let context = get_context("bob_near".to_string());
        testing_env!(context);
        let mut contract = Three0Hosting::default();
        let content = vec![
            FileContents {
                path: "/index.html".to_string(),
                redirect_url: "https://testing-q8op5t6xnxb2hcfeceqxsr.testnet.page/".to_string(),
            },
            FileContents {
                path: "/style.css".to_string(),
                redirect_url: "https://testing-q8op5t6xnxb2hcfeceqxsr.testnet.page/style.css".to_string(),
            },
        ];
        contract.add_to_map(content);
        let request = Web4Request {
            account_id: None,
            path: "/index.html".to_string(),
            params: std::collections::HashMap::new(),
            query: std::collections::HashMap::new(),
            preloads: None,
        };

        let response = contract.web4_get(request);
        match response {
            Web4Response::BodyUrl { body_url } => {
                assert_eq!(
                    body_url,
                    "https://testing-q8op5t6xnxb2hcfeceqxsr.testnet.page/"
                );
            }
            _ => panic!("Unexpected response"),
        }
    }
}
'''
'''--- contract/project/Cargo.toml ---
[package]
name = "three0_project"
version = "0.1.0"
authors = ["Three0 <info@three0dev.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "3.1.0"
'''
'''--- contract/project/src/lib.rs ---
/*
 * This is an example of a Rust smart contract with two simple, symmetric functions:
 *
 * 1. set_greeting: accepts a greeting, such as "howdy", and records it for the user (account_id)
 *    who sent the request
 * 2. get_greeting: accepts an account_id and returns the greeting saved for it, defaulting to
 *    "Hello"
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://github.com/near/near-sdk-rs
 *
 */

mod types;

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{PanicOnDefault, near_bindgen, setup_alloc, AccountId, env};
use near_sdk::collections::{UnorderedMap, LookupMap};

pub use crate::types::*;

setup_alloc!();

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Three0Project {
    owner: AccountId,
    pid: String,
    databases: UnorderedMap<String, Database>,
    users: UnorderedMap<AccountId, User>,
    storage: Option<AccountId>,
    hosting: Option<AccountId>,
    tokenization: Option<AccountId>,
    storage_nonce_map: LookupMap<AccountId, u64>,
}

#[near_bindgen]
impl Three0Project {
    #[init]
    pub fn init(pid: String) -> Self {
        Self {
            owner: env::signer_account_id(),
            pid,
            databases: UnorderedMap::new(b"databases".to_vec()),
            users: UnorderedMap::new(b"users".to_vec()),
            storage: None,
            hosting: None,
            tokenization: None,
            storage_nonce_map: LookupMap::new(b"storage_nonce_map".to_vec()),
        }
    }

    pub fn set_nonce(&mut self) -> u64 {
        // signed is hi.testnet
        // owner is sree.testnet
        // current account is hi.testnet
        // signer is not in valid users
        if env::signer_account_id() == self.owner || env::signer_account_id() == env::current_account_id() || self.users.get(&env::signer_account_id()).is_some() {
            let current_nonce = env::block_index();
            self.storage_nonce_map.insert(&env::signer_account_id(), &current_nonce);
            current_nonce
        } else {
            env::panic(b"Unauthorized");
        }
    }

    pub fn validate_nonce(&mut self, account_to_validate: AccountId, nonce: u64){
        if env::signer_account_id() != "three0.testnet" && env::signer_account_id() != self.owner {
            env::panic(b"Only valid project can validate nonce");
        }

        let current_nonce = self.storage_nonce_map.remove(&account_to_validate).unwrap();
        if current_nonce != nonce {
            env::panic(b"Nonce mismatch");
        }
    }

    pub fn get_project(&self) -> ProjectReturnSchema {
        ProjectReturnSchema {
            pid: self.pid.clone(),
            num_users: self.users.len() as u32,
            num_databases: self.databases.len() as u32,
            has_storage: self.storage.is_some(),
            has_hosting: self.hosting.is_some(),
            has_tokenization: self.tokenization.is_some(),
        }
    }

    pub fn add_database(&mut self, database_details: Database){
        self.databases.insert(&database_details.address, &database_details);
    }

    pub fn valid_database(&self, address: String) -> bool {
        self.databases.get(&address).is_some()
    }

    pub fn delete_database(&mut self, database_name: String){
        self.databases.remove(&database_name);
    }

    pub fn get_databases(&self) -> Vec<Database> {
        self.databases.values().collect()
    }

    pub fn get_users(&self, offset: usize, limit: usize) -> AllSchema {
        let user_size = self.users.len();
        let new_skip:usize = if user_size as usize > offset + limit {
            (user_size as usize) - (offset + limit)
        }else{
            0
        };

        let users = self.users.values()
            .skip(new_skip)
            .take(limit)
            .collect::<Vec<User>>();

        AllSchema {
            entries: users,
            num: user_size as u16,
        }
    }

    pub fn user_action(&mut self, action: String) {
        let mut user = self.users.get(&env::signer_account_id()).unwrap_or_else(|| User::new(env::signer_account_id()));
        
        match action.as_str() {
            "LOGIN" => user.login(),
            "LOGOUT" => user.logout(),
            _ => env::panic(b"Invalid action")
        }

        self.users.insert(&env::signer_account_id(), &user);
    }

    pub fn get_user(&self, account_id: AccountId) -> User {
        self.users.get(&account_id).unwrap_or_else(|| env::panic(b"User not found"))
    }

    pub fn set_storage(&mut self) {
        self.storage = format!("storage.{}", env::current_account_id().clone()).into();
    }

    pub fn get_storage(&self) -> AccountId {
        self.storage.as_ref()
            .unwrap_or_else(|| env::panic(b"Storage not set"))
            .to_string()
    }

    pub fn set_hosting(&mut self) {
        self.hosting = format!("web4.{}", env::current_account_id().clone()).into();
    }

    pub fn get_hosting(&self) -> AccountId {
        self.hosting.as_ref()
        .unwrap_or_else(|| env::panic(b"Hosting not set"))
        .to_string()
    }

    pub fn set_tokenization(&mut self) {
        self.tokenization = format!("token.{}", env::current_account_id().clone()).into();
    }

    pub fn get_tokenization(&self) -> AccountId {
        self.tokenization.as_ref()
        .unwrap_or_else(|| env::panic(b"Tokenization not set"))
        .to_string()
    }
}
  
// create unit tests in this file
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    // Initializing the context for the test
    // See https://docs.rs/near-sdk/3.1.0/near_sdk/struct.VMContext.html
    fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
        VMContext {
            current_account_id: "alice_near".to_string(),
            signer_account_id: "bob_near".to_string(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id: "carol_near".to_string(),
            input,
            block_index: 0,
            block_timestamp: 0,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 0,
            attached_deposit: 0,
            prepaid_gas: 10u64.pow(18),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
            epoch_height: 0,
        }
    }

    // test for the get user function
    #[test]
    fn test_get_user() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("test".to_string());
        contract.user_action("LOGIN".to_string());
        let user = contract.get_user("bob_near".to_string());
        assert_eq!(user.account_id, "bob_near".to_string());
    }

    // test for the get users function
    #[test]
    fn test_get_users() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("test".to_string());
        contract.user_action("LOGIN".to_string());
        let users = contract.get_users(0, 1);
        assert_eq!(users.entries.len(), 1);
        assert_eq!(users.num, 1);
    }

    // test for the user action function
    #[test]
    fn test_user_action() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("test".to_string());
        contract.user_action("LOGIN".to_string());
        let user = contract.get_user("bob_near".to_string());
        // assert_eq!(user.account_id, "bob_near".to_string());
        assert_eq!(user.is_online, true);
    }

    // test for the get project function
    #[test]
    fn test_get_project() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let contract = Three0Project::init("test".to_string());
        let project = contract.get_project();
        assert_eq!(project.pid, "test".to_string());
        assert_eq!(project.num_users, 0);
    }

    // test for the add database function
    #[test]
    fn test_add_database() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("test".to_string());
        let database = Database {
            address: "test".to_string(),
            name: "test".to_string(),
            db_type: "test".to_string(),
        };
        contract.add_database(database);
        assert_eq!(contract.valid_database("test".to_string()), true);
    }

    // test for the delete database function
    #[test]
    fn test_delete_database() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("test".to_string());
        let database = Database {
            address: "test".to_string(),
            name: "test".to_string(),
            db_type: "test".to_string(),

        };
        contract.add_database(database);
        assert_eq!(contract.valid_database("test".to_string()), true);
        contract.delete_database("test".to_string());
        assert_eq!(contract.valid_database("test".to_string()), false);
    }

    // test for valid database function
    #[test]
    fn test_valid_database() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("test".to_string());
        let database = Database {
            address: "test".to_string(),
            name: "test".to_string(),
            db_type: "test".to_string(),

        };
        contract.add_database(database);
        assert_eq!(contract.valid_database("test".to_string()), true);
    }

    //test for the set storage function
    #[test]
    fn test_storage() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("alice_near".to_string());
        contract.set_storage();
        assert_eq!(contract.get_storage(), "storage.alice_near".to_string());
    }

    #[test]
    fn test_hosting() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("alice_near".to_string());
        contract.set_hosting();
        assert_eq!(contract.get_hosting(), "web4.alice_near".to_string());
    }

    #[test]
    fn test_tokenization() {
        let context = get_context(vec![], false);
        testing_env!(context);
        let mut contract = Three0Project::init("alice_near".to_string());
        contract.set_tokenization();
        assert_eq!(contract.get_tokenization(), "token.alice_near".to_string());
    }

    // #[test]
    // fn test_set_nonce() {
    //     let context = get_context(vec![], false);
    //     testing_env!(context.clone());
    //     let mut contract = Three0Project::init("alice_near".to_string());
    //     let nonce = contract.set_nonce();
    //     assert_eq!(contract.validate_nonce(context.signer_account_id, nonce), true);
    // }
}

'''
'''--- contract/project/src/types.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{AccountId, env};
use near_sdk::serde::{Serialize, Deserialize};

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct User {
    pub account_id: AccountId,
    pub is_online: bool,
    pub created_at: u64,
    pub last_online: u64,
}

impl User {
    pub fn new(account_id: AccountId) -> Self {
        Self {
            account_id,
            is_online: true,
            created_at: env::block_timestamp(),
            last_online: env::block_timestamp(),
        }
    }

    pub fn login(&mut self){
        self.is_online = true;
    }

    pub fn logout(&mut self){
        self.is_online = false;
        self.last_online = env::block_timestamp();
    }
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ProjectReturnSchema {
    pub pid: String,
    pub num_users: u32,
    pub num_databases: u32,
    pub has_storage: bool,
    pub has_hosting: bool,
    pub has_tokenization: bool,
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Database {
    pub address: String,
    pub name: String,
    pub db_type: String, 
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct AllSchema {
    pub num: u16,
    pub entries: Vec<User>, 
}
'''
'''--- contract/storage/Cargo.toml ---
[package]
name = "three0_storage"
version = "0.1.0"
authors = ["Three0 <usajjad5@utexas.edu>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
serde_json = "1.0"
'''
'''--- contract/storage/src/approval.rs ---
use crate::*;
use near_sdk::{ext_contract};

pub trait NonFungibleTokenCore {
    //approve an account ID to transfer a token on your behalf
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>);

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool;

    //revoke a specific account from transferring the token on your behalf
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId);

    //revoke all accounts from transferring the token on your behalf
    fn nft_revoke_all(&mut self, token_id: TokenId);
}

#[ext_contract(ext_non_fungible_approval_receiver)]
trait NonFungibleTokenApprovalsReceiver {
    //cross contract call to an external contract that is initiated during nft_approve
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Three0Storage {

    //allow a specific account ID to approve a token on your behalf
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) {
        /*
            assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
            The user needs to attach enough to pay for storage on the contract
        */
        assert_at_least_one_yocto();

        //get the token object from the token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        //make sure that the person calling the function is the owner of the token
        assert_eq!(
            &env::predecessor_account_id(),
            &token.owner_id,
            "Predecessor must be the token owner."
        );

        //get the next approval ID if we need a new approval
        let approval_id: u64 = token.next_approval_id;

        //check if the account has been approved already for this token
        let is_new_approval = token
            .approved_account_ids
            //insert returns none if the key was not present.  
            .insert(account_id.clone(), approval_id)
            //if the key was not present, .is_none() will return true so it is a new approval.
            .is_none();

        //if it was a new approval, we need to calculate how much storage is being used to add the account.
        let storage_used = if is_new_approval {
            bytes_for_approved_account_id(&account_id)
        //if it was not a new approval, we used no storage.
        } else {
            0
        };

        //increment the token's next approval ID by 1
        token.next_approval_id += 1;
        //insert the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        //refund any excess storage attached by the user. If the user didn't attach enough, panic. 
        refund_deposit(storage_used);

        //if some message was passed into the function, we initiate a cross contract call on the
        //account we're giving access to. 
        if let Some(msg) = msg {
            // Defaulting GAS weight to 1, no attached deposit, and no static GAS to attach.
            ext_non_fungible_approval_receiver::ext(account_id)
                .nft_on_approve(
                    token_id, 
                    token.owner_id, 
                    approval_id, 
                    msg
                ).as_return();
        }
    }

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        //get the token object from the token_id
        let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the approval number for the passed in account ID
		let approval = token.approved_account_ids.get(&approved_account_id);

        //if there was some approval ID found for the account ID
        if let Some(approval) = approval {
            //if a specific approval_id was passed into the function
			if let Some(approval_id) = approval_id {
                //return if the approval ID passed in matches the actual approval ID for the account
				approval_id == *approval
            //if there was no approval_id passed into the function, we simply return true
			} else {
				true
			}
        //if there was no approval ID found for the account ID, we simply return false
		} else {
			false
		}
    }

    //revoke a specific account from transferring the token on your behalf 
    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        //assert that the user attached exactly 1 yoctoNEAR for security reasons
        assert_one_yocto();
        //get the token object using the passed in token_id
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the caller of the function and assert that they are the owner of the token
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //if the account ID was in the token's approval, we remove it and the if statement logic executes
        if token
            .approved_account_ids
            .remove(&account_id)
            .is_some()
        {
            //refund the funds released by removing the approved_account_id to the caller of the function
            refund_approved_account_ids_iter(predecessor_account_id, [account_id].iter());

            //insert the token back into the tokens_by_id collection with the account_id removed from the approval list
            self.tokens_by_id.insert(&token_id, &token);
        }
    }

    //revoke all accounts from transferring the token on your behalf
    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        //assert that the caller attached exactly 1 yoctoNEAR for security
        assert_one_yocto();

        //get the token object from the passed in token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");
        //get the caller and make sure they are the owner of the tokens
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //only revoke if the approved account IDs for the token is not empty
        if !token.approved_account_ids.is_empty() {
            //refund the approved account IDs to the caller of the function
            refund_approved_account_ids(predecessor_account_id, &token.approved_account_ids);
            //clear the approved account IDs
            token.approved_account_ids.clear();
            //insert the token back into the tokens_by_id collection with the approved account IDs cleared
            self.tokens_by_id.insert(&token_id, &token);
        }
    }
}
'''
'''--- contract/storage/src/enumeration.rs ---
use crate::*;

#[near_bindgen]
impl Three0Storage {
    //Query for the total supply of NFTs on the contract
    pub fn nft_total_supply(&self) -> U128 {
        //return the length of the token metadata by ID
        U128(self.token_metadata_by_id.len() as u128)
    }

    //Query for nft tokens on the contract regardless of the owner using pagination
    pub fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<JsonToken> {
        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through each token using an iterator
        self.token_metadata_by_id.keys()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }

    //get the total supply of NFTs for a given owner
    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) -> U128 {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);

        //if there is some set of tokens, we'll return the length as a U128
        if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            U128(tokens_for_owner_set.len() as u128)
        } else {
            //if there isn't a set of tokens for the passed in account ID, we'll return 0
            U128(0)
        }
    }

    //Query for all the tokens for an owner
    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<JsonToken> {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);
        //if there is some set of tokens, we'll set the tokens variable equal to that set
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            //if there is no set of tokens, we'll simply return an empty vector. 
            return vec![];
        };

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through the keys vector
        tokens.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }
}
'''
'''--- contract/storage/src/events.rs ---
use std::fmt;

use near_sdk::serde::{Deserialize, Serialize};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    NftMint(Vec<NftMintLog>),
    NftTransfer(Vec<NftTransferLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub standard: String,
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture token minting
///
/// Arguments
/// * `owner_id`: "account.near"
/// * `token_ids`: ["1", "abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftMintLog {
    pub owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture token transfer
///
/// Arguments
/// * `authorized_id`: approved account to transfer
/// * `old_owner_id`: "owner.near"
/// * `new_owner_id`: "receiver.near"
/// * `token_ids`: ["1", "12345abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftTransferLog {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_id: Option<String>,

    pub old_owner_id: String,
    pub new_owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn nep_format_vector() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]},{"owner_id":"user1.near","token_ids":["meme"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![
                NftMintLog {
                    owner_id: "foundation.near".to_owned(),
                    token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                    memo: None,
                },
                NftMintLog {
                    owner_id: "user1.near".to_owned(),
                    token_ids: vec!["meme".to_string()],
                    memo: None,
                },
            ]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_mint() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![NftMintLog {
                owner_id: "foundation.near".to_owned(),
                token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                memo: None,
            }]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_transfer_all_fields() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_transfer","data":[{"authorized_id":"market.near","old_owner_id":"user1.near","new_owner_id":"user2.near","token_ids":["token"],"memo":"Go Team!"}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                authorized_id: Some("market.near".to_string()),
                old_owner_id: "user1.near".to_string(),
                new_owner_id: "user2.near".to_string(),
                token_ids: vec!["token".to_string()],
                memo: Some("Go Team!".to_owned()),
            }]),
        };
        assert_eq!(expected, log.to_string());
    }
} 
'''
'''--- contract/storage/src/filesys.rs ---
use crate::*;
use std::collections::HashSet;

#[near_bindgen]
impl Three0Storage {
    pub fn list_files(&self, path: String) -> Vec<String> {
        let mut path_ = path.to_owned();
        if path_.starts_with('/') {
            path_ = path_[1..path_.len()].to_string()
        }
        let mut files: HashSet<String> = HashSet::new();
        let all_files = &self.filesys.keys_as_vector();
        for file in all_files.iter() {
            if file.starts_with(&path_) {
                let subpath = file.split_at(path_.len()).1; 
                if subpath.contains('/') {
                    let split = subpath.split('/');
                    let vec: Vec<&str> = split.collect();
                    let mut folder = vec[0].to_string();
                    folder.push_str("/");
                    files.insert(folder.to_string());
                } else {
                    let file = subpath;
                    files.insert(file.to_string());
                }
            }
        }
        let mut list_of_files: Vec<String> =  files.into_iter().collect();
        list_of_files.sort();
        return list_of_files;
    }

    pub fn get_file(&self, file_path: String) -> TokenMetadata {
        let existing = self.filesys.get(&file_path);
        assert!(existing.is_some(), "File does not exist");
        return self.token_metadata_by_id.get(&existing.unwrap()).unwrap();
    }
}
'''
'''--- contract/storage/src/internal.rs ---
use crate::*;
use near_sdk::{CryptoHash};
use std::mem::size_of;

//convert the royalty percentage and amount to pay into a payout (U128)
pub(crate) fn royalty_to_payout(royalty_percentage: u32, amount_to_pay: Balance) -> U128 {
    U128(royalty_percentage as u128 * amount_to_pay / 10_000u128)
}

//calculate how many bytes the account ID is taking up
pub(crate) fn bytes_for_approved_account_id(account_id: &AccountId) -> u64 {
    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
    account_id.as_str().len() as u64 + 4 + size_of::<u64>() as u64
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 
pub(crate) fn refund_approved_account_ids_iter<'a, I>(
    account_id: AccountId,
    approved_account_ids: I, //the approved account IDs must be passed in as an iterator
) -> Promise
where
    I: Iterator<Item = &'a AccountId>,
{
    //get the storage total by going through and summing all the bytes for each approved account IDs
    let storage_released: u64 = approved_account_ids.map(bytes_for_approved_account_id).sum();
    //transfer the account the storage that is released
    Promise::new(account_id).transfer(Balance::from(storage_released) * env::storage_byte_cost())
}

//refund a map of approved account IDs and send the funds to the passed in account ID
pub(crate) fn refund_approved_account_ids(
    account_id: AccountId,
    approved_account_ids: &HashMap<AccountId, u64>,
) -> Promise {
    //call the refund_approved_account_ids_iter with the approved account IDs as keys
    refund_approved_account_ids_iter(account_id, approved_account_ids.keys())
}

//used to generate a unique prefix in our storage collections (this is to avoid data collisions)
pub(crate) fn hash_account_id(account_id: &AccountId) -> CryptoHash {
    //get the default hash
    let mut hash = CryptoHash::default();
    //we hash the account ID and return it
    hash.copy_from_slice(&env::sha256(account_id.as_bytes()));
    hash
}

//used to make sure the user attached exactly 1 yoctoNEAR
pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR",
    )
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
pub(crate) fn assert_at_least_one_yocto() {
    assert!(
        env::attached_deposit() >= 1,
        "Requires attached deposit of at least 1 yoctoNEAR",
    )
}

//refund the initial deposit based on the amount of storage that was used up
pub(crate) fn refund_deposit(storage_used: u64) {
    //get how much it would cost to store the information
    let required_cost = env::storage_byte_cost() * Balance::from(storage_used);
    //get the attached deposit
    let attached_deposit = env::attached_deposit();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert!(
        required_cost <= attached_deposit,
        "Must attach {} yoctoNEAR to cover storage",
        required_cost,
    );

    //get the refund amount from the attached deposit - required cost
    let refund = attached_deposit - required_cost;

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if refund > 1 {
        Promise::new(env::predecessor_account_id()).transfer(refund);
    }
}

impl Three0Storage {
    //add a token to the set of tokens an owner has
    pub(crate) fn internal_add_token_to_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //get the set of tokens for the given account
        let mut tokens_set = self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            //if the account doesn't have any tokens, we create a new unordered set
            UnorderedSet::new(
                StorageKey::TokenPerOwnerInner {
                    //we get a new unique prefix for the collection
                    account_id_hash: hash_account_id(&account_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });

        //we insert the token ID into the set
        tokens_set.insert(token_id);

        //we insert that set for the given account ID. 
        self.tokens_per_owner.insert(account_id, &tokens_set);
    }

    //remove a token from an owner (internal method and can't be called directly via CLI).
    pub(crate) fn internal_remove_token_from_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //we get the set of tokens that the owner has
        let mut tokens_set = self
            .tokens_per_owner
            .get(account_id)
            //if there is no set of tokens for the owner, we panic with the following message:
            .expect("Token should be owned by the sender");

        //we remove the the token_id from the set of tokens
        tokens_set.remove(token_id);

        //if the token set is now empty, we remove the owner from the tokens_per_owner collection
        if tokens_set.is_empty() {
            self.tokens_per_owner.remove(account_id);
        } else {
        //if the token set is not empty, we simply insert it back for the account ID. 
            self.tokens_per_owner.insert(account_id, &tokens_set);
        }
    }

    //transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).
    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        token_id: &TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) -> Token {
        //get the token object by passing in the token_id
        let token = self.tokens_by_id.get(token_id).expect("No token");

        //if the sender doesn't equal the owner, we check if the sender is in the approval list
		if sender_id != &token.owner_id {
			//if the token's approved account IDs doesn't contain the sender, we panic
			if !token.approved_account_ids.contains_key(sender_id) {
				env::panic_str("Unauthorized");
			}

			// If they included an approval_id, check if the sender's actual approval_id is the same as the one included
			if let Some(enforced_approval_id) = approval_id {
                //get the actual approval ID
				let actual_approval_id = token
					.approved_account_ids
					.get(sender_id)
                    //if the sender isn't in the map, we panic
					.expect("Sender is not approved account");

                //make sure that the actual approval ID is the same as the one provided
                assert_eq!(
					actual_approval_id, &enforced_approval_id,
					"The actual approval_id {} is different from the given approval_id {}",
					actual_approval_id, enforced_approval_id,
				);
			}
		}

        //we make sure that the sender isn't sending the token to themselves
        assert_ne!(
            &token.owner_id, receiver_id,
            "The token owner and the receiver should be different"
        );

        //we remove the token from it's current owner's set
        self.internal_remove_token_from_owner(&token.owner_id, token_id);
        //we then add the token to the receiver_id's set
        self.internal_add_token_to_owner(receiver_id, token_id);

        //we create a new token struct 
        let new_token = Token {
            owner_id: receiver_id.clone(),
            //reset the approval account IDs
            approved_account_ids: Default::default(),
            next_approval_id: token.next_approval_id,
            //we copy over the royalties from the previous token
            royalty: token.royalty.clone(),
        };
        //insert that new token into the tokens_by_id, replacing the old entry 
        self.tokens_by_id.insert(token_id, &new_token);

        //if there was some memo attached, we log it. 
        if let Some(memo) = memo.as_ref() {
            env::log_str(&format!("Memo: {}", memo).to_string());
        }

        // Default the authorized ID to be None for the logs.
        let mut authorized_id = None;
        //if the approval ID was provided, set the authorized ID equal to the sender
        if approval_id.is_some() {
            authorized_id = Some(sender_id.to_string());
        }

        // Construct the transfer log as per the events standard.
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: token.owner_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: receiver_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_transfer_log.to_string());
        
        //return the previous token object that was transferred.
        token
    }
} 
'''
'''--- contract/storage/src/lib.rs ---
use std::collections::HashMap;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    env, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue,
};

use crate::internal::*;
pub use crate::metadata::*;
pub use crate::mint::*;
pub use crate::nft_core::*;
pub use crate::approval::*;
pub use crate::royalty::*;
pub use crate::events::*;
pub use crate::filesys::*;

mod internal;
mod approval; 
mod enumeration; 
mod metadata; 
mod mint; 
mod nft_core; 
mod royalty; 
mod events;
mod filesys;

/// This spec can be treated like a version of the standard.
pub const NFT_METADATA_SPEC: &str = "nft-1.0.0";
/// This is the name of the NFT standard we're using
pub const NFT_STANDARD_NAME: &str = "nep171";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Three0Storage {
    //contract owner
    pub owner_id: AccountId,

    //keeps track of all the token IDs for a given account
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>,

    //keeps track of the token struct for a given token ID
    pub tokens_by_id: LookupMap<TokenId, Token>,

    //keeps track of the token metadata for a given token ID
    pub token_metadata_by_id: UnorderedMap<TokenId, TokenMetadata>,

    //keeps track of the metadata for the contract
    pub metadata: LazyOption<NFTContractMetadata>,

    pub filesys: UnorderedMap<String, TokenId>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokenPerOwnerInner { account_id_hash: CryptoHash },
    TokensById,
    TokenMetadataById,
    NFTContractMetadata,
    TokensPerType,
    TokensPerTypeInner { token_type_hash: CryptoHash },
    TokenTypesLocked,
    FileSystem,
}

#[near_bindgen]
impl Three0Storage {
    /*
        initialization function (can only be called once).
        this initializes the contract with default metadata so the
        user doesn't have to manually type metadata.
    */
    #[init]
    pub fn new_default_meta(pid: String) -> Self {
        //calls the other function "new: with some default metadata and the owner_id passed in 
        Self::new(
            env::signer_account_id(),
            NFTContractMetadata {
                spec: "nft-1.0.0".to_string(),
                name: pid.to_string(),
                symbol: "THREE0".to_string(),
                icon: None,
                base_uri: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        //create a variable of type Self with all the fields initialized. 
        let this = Self {
            //Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            tokens_by_id: LookupMap::new(StorageKey::TokensById.try_to_vec().unwrap()),
            token_metadata_by_id: UnorderedMap::new(
                StorageKey::TokenMetadataById.try_to_vec().unwrap(),
            ),
            //set the owner_id field equal to the passed in owner_id. 
            owner_id,
            metadata: LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata),
            ),
            filesys: UnorderedMap::new(StorageKey::FileSystem.try_to_vec().unwrap()),
        };

        // this.filesys.insert(&String::from("test1/hello"), &String::from("0"));
        // this.filesys.insert(&String::from("test1"), &String::from("1"));

        //return the Contract object
        this
    }
}

#[cfg(test)]
mod tests;
'''
'''--- contract/storage/src/metadata.rs ---
use crate::*;
pub type TokenId = String;
//defines the payout type we'll be returning as a part of the royalty standards.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NFTContractMetadata {
    pub spec: String,              // required, essentially a version like "nft-1.0.0"
    pub name: String,              // required, ex. "Mosaics"
    pub symbol: String,            // required, ex. "MOSAIC"
    pub icon: Option<String>,      // Data URL
    pub base_uri: Option<String>, // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    pub reference: Option<String>, // URL to a JSON file with more info
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, PartialEq, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct TokenMetadata {
    pub title: Option<String>, // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    pub description: Option<String>, // free-form description
    pub media: Option<String>, // URL to associated media, preferably to decentralized, content-addressed storage
    pub media_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    pub file_type: Option<String>, // MIME type of file, if `media` is a direct link to file
    pub copies: Option<u64>, // number of copies of this set of metadata in existence when token was minted.
    pub issued_at: Option<u64>, // When token was issued or minted, Unix epoch in milliseconds
    pub expires_at: Option<u64>, // When token expires, Unix epoch in milliseconds
    pub starts_at: Option<u64>, // When token starts being valid, Unix epoch in milliseconds
    pub updated_at: Option<u64>, // When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    pub reference: Option<String>, // URL to an off-chain JSON file with more info.
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Token {
    //owner of the token
    pub owner_id: AccountId,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //the next approval ID to give out. 
    pub next_approval_id: u64,
    //keep track of the royalty percentages for the token in a hash map
    pub royalty: HashMap<AccountId, u32>,
}

//The Json token is what will be returned from view calls. 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonToken {
    //token ID
    pub token_id: TokenId,
    //owner of the token
    pub owner_id: AccountId,
    //token metadata
    pub metadata: TokenMetadata,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //keep track of the royalty percentages for the token in a hash map
    pub royalty: HashMap<AccountId, u32>,
}

pub trait NonFungibleTokenMetadata {
    //view call for returning the contract metadata
    fn nft_metadata(&self) -> NFTContractMetadata;
}

#[near_bindgen]
impl NonFungibleTokenMetadata for Three0Storage {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- contract/storage/src/mint.rs ---
use crate::*;

#[near_bindgen]
impl Three0Storage {
    #[payable]
    pub fn nft_mint(
        &mut self,
        token_id: TokenId,
        metadata: TokenMetadata,
        path: String,
        receiver_id: AccountId,
        //we add an optional parameter for perpetual royalties
        perpetual_royalties: Option<HashMap<AccountId, u32>>,
    ) {
        //measure the initial storage being used on the contract
        let initial_storage_usage = env::storage_usage();

        // create a royalty map to store in the token
        let mut royalty = HashMap::new();

        // if perpetual royalties were passed into the function: 
        if let Some(perpetual_royalties) = perpetual_royalties {
            //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
            assert!(perpetual_royalties.len() < 7, "Cannot add more than 6 perpetual royalty amounts");

            //iterate through the perpetual royalties and insert the account and amount in the royalty map
            for (account, amount) in perpetual_royalties {
                royalty.insert(account, amount);
            }
        }

        //specify the token struct that contains the owner ID 
        let token = Token {
            //set the owner ID equal to the receiver ID passed into the function
            owner_id: receiver_id,
            //we set the approved account IDs to the default value (an empty map)
            approved_account_ids: Default::default(),
            //the next approval ID is set to 0
            next_approval_id: 0,
            //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
            royalty,
        };

        assert!(
            self.filesys.get(&path).is_none(),
            "File in specified path already exists with same name"
        );

        //insert the token ID and token struct and make sure that the token doesn't exist
        assert!(
            self.tokens_by_id.insert(&token_id, &token).is_none(),
            "Token already exists"
        );

        //insert the token ID and metadata
        self.token_metadata_by_id.insert(&token_id, &metadata);

        //call the internal method for adding the token to the owner
        self.internal_add_token_to_owner(&token.owner_id, &token_id);

        self.filesys.insert(&path, &token_id);

        // Construct the mint log as per the events standard.
        let nft_mint_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftMint(vec![NftMintLog {
                // Owner of the token.
                owner_id: token.owner_id.to_string(),
                // Vector of token IDs that were minted.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo: None,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_mint_log.to_string());

        //calculate the required storage which was the used - initial
        let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.
        refund_deposit(required_storage_in_bytes);
    }
}
'''
'''--- contract/storage/src/nft_core.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas, PromiseResult};

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(10_000_000_000_000);
const GAS_FOR_NFT_ON_TRANSFER: Gas = Gas(25_000_000_000_000);

pub trait NonFungibleTokenCore {
    //transfers an NFT to a receiver ID
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    );

    //transfers an NFT to a receiver and calls a function on the receiver ID's contract
    /// Returns `true` if the token was transferred from the sender's account.
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool>;

    //get information about the NFT token passed in
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken>;
}

#[ext_contract(ext_non_fungible_token_receiver)]
trait NonFungibleTokenReceiver {
    //Method stored on the receiver contract that is called via cross contract call when nft_transfer_call is called
    /// Returns `true` if the token should be returned back to the sender.
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    ) -> Promise;
}

#[ext_contract(ext_self)]
/*
    resolves the promise of the cross contract call to the receiver contract
    this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
    as part of the nft_transfer_call method
*/ 
trait NonFungibleTokenResolver {
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

#[near_bindgen]
impl NonFungibleTokenCore for Three0Storage {

    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. 
        assert_one_yocto();
        //get the sender to transfer the token from the sender to the receiver
        let sender_id = env::predecessor_account_id();

        //call the internal transfer method and get back the previous token so we can refund the approved account IDs
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo,
        );

        //we refund the owner for releasing the storage used up by the approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );
    }

    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool> {
        //assert that the user attached exactly 1 yocto for security reasons. 
        assert_one_yocto();

        //get the sender ID 
        let sender_id = env::predecessor_account_id();

        //transfer the token and get the previous token object
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo.clone(),
        );

        //default the authorized_id to none
        let mut authorized_id = None; 
        //if the sender isn't the owner of the token, we set the authorized ID equal to the sender.
        if sender_id != previous_token.owner_id {
            authorized_id = Some(sender_id.to_string());
        }

        // Initiating receiver's call and the callback
        // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for nft on transfer.
        ext_non_fungible_token_receiver::ext(receiver_id.clone())
            .with_static_gas(GAS_FOR_NFT_ON_TRANSFER)
            .nft_on_transfer(
                sender_id, 
                previous_token.owner_id.clone(), 
                token_id.clone(), 
                msg
            )
        // We then resolve the promise and call nft_resolve_transfer on our own contract
        .then(
            // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for resolve transfer
            Self::ext(env::current_account_id())
                .with_static_gas(GAS_FOR_RESOLVE_TRANSFER)
                .nft_resolve_transfer(
                    authorized_id, // we introduce an authorized ID so that we can log the transfer
                    previous_token.owner_id,
                    receiver_id,
                    token_id,
                    previous_token.approved_account_ids,
                    memo, // we introduce a memo for logging in the events standard
                )
        ).into()
    }

    //get the information for a specific token ID
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken> {
        //if there is some token ID in the tokens_by_id collection
        if let Some(token) = self.tokens_by_id.get(&token_id) {
            //we'll get the metadata for that token
            let metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            //we return the JsonToken (wrapped by Some since we return an option)
            Some(JsonToken {
                token_id,
                owner_id: token.owner_id,
                metadata,
                approved_account_ids: token.approved_account_ids,
                royalty: token.royalty,
            })
        } else { //if there wasn't a token ID in the tokens_by_id collection, we return None
            None
        }
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Three0Storage {
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool {
        // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
        // call result.
        if let PromiseResult::Successful(value) = env::promise_result(0) {
            //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
            if let Ok(return_token) = near_sdk::serde_json::from_slice::<bool>(&value) {
                //if we need don't need to return the token, we simply return true meaning everything went fine
                if !return_token {
                    /* 
                        since we've already transferred the token and nft_on_transfer returned false, we don't have to 
                        revert the original transfer and thus we can just return true since nothing went wrong.
                    */
                    //we refund the owner for releasing the storage used up by the approved account IDs
                    refund_approved_account_ids(owner_id, &approved_account_ids);
                    return true;
                }
            }
        }

        //get the token object if there is some token object
        let mut token = if let Some(token) = self.tokens_by_id.get(&token_id) {
            if token.owner_id != receiver_id {
                //we refund the owner for releasing the storage used up by the approved account IDs
                refund_approved_account_ids(owner_id, &approved_account_ids);
                // The token is not owner by the receiver anymore. Can't return it.
                return true;
            }
            token
        //if there isn't a token object, it was burned and so we return true
        } else {
            //we refund the owner for releasing the storage used up by the approved account IDs
            refund_approved_account_ids(owner_id, &approved_account_ids);
            return true;
        };

        //we remove the token from the receiver
        self.internal_remove_token_from_owner(&receiver_id.clone(), &token_id);
        //we add the token to the original owner
        self.internal_add_token_to_owner(&owner_id, &token_id);

        //we change the token struct's owner to be the original owner 
        token.owner_id = owner_id.clone();

        //we refund the receiver any approved account IDs that they may have set on the token
        refund_approved_account_ids(receiver_id.clone(), &token.approved_account_ids);
        //reset the approved account IDs to what they were before the transfer
        token.approved_account_ids = approved_account_ids;

        //we inset the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        /*
            We need to log that the NFT was reverted back to the original owner.
            The old_owner_id will be the receiver and the new_owner_id will be the
            original owner of the token since we're reverting the transfer.
        */
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: receiver_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: owner_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        //we perform the actual logging
        env::log_str(&nft_transfer_log.to_string());

        //return false
        false
    }
}
'''
'''--- contract/storage/src/royalty.rs ---
use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout;
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout;
}

#[near_bindgen]
impl NonFungibleTokenCore for Three0Storage {

    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout {
        //get the token object
		let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the owner of the token
        let owner_id = token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
	}

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout { 
        //assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        //get the sender ID
        let sender_id = env::predecessor_account_id();
        //transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            Some(approval_id),
            memo,
        );

        //refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );

        //get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = previous_token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
    }
}
'''
'''--- contract/storage/src/tests.rs ---
/* unit tests */
#[cfg(test)]
use crate::Three0Storage;
use crate::TokenMetadata;
use crate::approval::NonFungibleTokenCore;
use near_sdk::json_types::{U128, U64};
use near_sdk::test_utils::{accounts, VMContextBuilder};
use near_sdk::testing_env;
use near_sdk::{env, AccountId};

use std::collections::HashMap;

const MINT_STORAGE_COST: u128 = 100_000_000_000_000_000_000_000;
const MIN_REQUIRED_APPROVAL_YOCTO: u128 = 170000000000000000000;

fn get_context(predecessor: AccountId) -> VMContextBuilder {
    let mut builder = VMContextBuilder::new();
    builder.predecessor_account_id(predecessor);
    builder
}

fn sample_token_metadata() -> TokenMetadata {
    TokenMetadata {
        title: Some("Olympus Mons".into()),
        description: Some("The tallest mountain in the charted solar system".into()),
        media: None,
        media_hash: None,
        file_type: None,
        copies: Some(1u64),
        issued_at: None,
        expires_at: None,
        starts_at: None,
        updated_at: None,
        extra: None,
        reference: None,
        reference_hash: None,
    }
}

#[test]
#[should_panic(expected = "The contract is not initialized")]
fn test_default() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let _contract = Three0Storage::default();
}

#[test]
fn test_new_account_contract() {
    let mut context = get_context(accounts(1));
    testing_env!(context.build());
    let contract = Three0Storage::new_default_meta(accounts(1).into());
    testing_env!(context.is_view(true).build());
    let contract_nft_tokens = contract.nft_tokens(Some(U128(0)), None);
    assert_eq!(contract_nft_tokens.len(), 0);
}

#[test]
fn test_mint_nft() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_metadata: TokenMetadata = sample_token_metadata();
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), token_metadata, "Olympus_Mons".to_string(), accounts(0), None);
    let contract_nft_tokens = contract.nft_tokens(Some(U128(0)), None);
    assert_eq!(contract_nft_tokens.len(), 1);

    assert_eq!(contract_nft_tokens[0].token_id, token_id);
    assert_eq!(contract_nft_tokens[0].owner_id, accounts(0));
    assert_eq!(
        contract_nft_tokens[0].metadata.title,
        sample_token_metadata().title
    );
    assert_eq!(
        contract_nft_tokens[0].metadata.description,
        sample_token_metadata().description
    );
    assert_eq!(
        contract_nft_tokens[0].metadata.media,
        sample_token_metadata().media
    );
    assert_eq!(contract_nft_tokens[0].approved_account_ids, HashMap::new());
}

#[test]
fn test_internal_transfer() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.internal_transfer(
        &accounts(0),
        &accounts(1),
        &token_id.clone(),
        Some(U64(1).0),
        None,
    );

    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());

    let tokens = contract.nft_tokens_for_owner(accounts(1), Some(U128(0)), None);
    assert_ne!(
        tokens.len(),
        0,
        "Token not correctly created and/or sent to second account"
    );
    let token = &tokens[0];
    assert_eq!(token.token_id, token_id);
    assert_eq!(token.owner_id, accounts(1));
    assert_eq!(token.metadata.title, sample_token_metadata().title);
    assert_eq!(
        token.metadata.description,
        sample_token_metadata().description
    );
    assert_eq!(token.metadata.media, sample_token_metadata().media);
    assert_eq!(token.approved_account_ids, HashMap::new());
}

#[test]
fn test_nft_approve() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(contract.nft_is_approved(token_id.clone(), accounts(1), None));
}

#[test]
fn test_nft_revoke() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    // alice revokes bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_revoke(token_id.clone(), accounts(1));
    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), None));
}

#[test]
fn test_revoke_all() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    // alice revokes bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_revoke_all(token_id.clone());
    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
}

#[test]
fn test_internal_remove_token_from_owner() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string().to_string(), accounts(0), None);

    let contract_nft_tokens_before = contract.nft_tokens_for_owner(accounts(0), None, None);
    assert_eq!(contract_nft_tokens_before.len(), 1);

    contract.internal_remove_token_from_owner(&accounts(0), &token_id);
    let contract_nft_tokens_after = contract.nft_tokens_for_owner(accounts(0), None, None);
    assert_eq!(contract_nft_tokens_after.len(), 0);
}

#[test]
fn test_nft_payout() {
    use crate::royalty::NonFungibleTokenCore;
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    let payout = contract.nft_payout(token_id.clone(), U128(10), 1);
    let expected = HashMap::from([(accounts(0), U128(10))]);
    assert_eq!(payout.payout, expected);
}

#[test]
fn test_nft_total_supply() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    let total_supply = contract.nft_total_supply();
    assert_eq!(total_supply, U128(1));
}

//test filesys
#[test]
fn test_add_file_to_root() {
    //mint token to root, and see if list_file and get_file works
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());
    
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);

    let files = ["Olympus_Mons"];
    assert_eq!(contract.list_files("".to_string()), files);
    assert_eq!(contract.get_file("Olympus_Mons".to_string()), sample_token_metadata());
}

#[test]
fn test_add_file_to_folder() {
    //mint token to root, and see if list_file and get_file works
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());
    
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), "folder1/Olympus_Mons".to_string(), accounts(0), None);

    let root = ["folder1/"];
    assert_eq!(contract.list_files("".to_string()), root);
    let folder = ["Olympus_Mons"];
    assert_eq!(contract.list_files("folder1/".to_string()), folder);
    assert_eq!(contract.get_file("folder1/Olympus_Mons".to_string()), sample_token_metadata());
}

// #[test]
// TODO Always Failing
// fn test_add_multiple_files_root() {
//     //mint token to root, and see if list_file and get_file works
//     let mut context = get_context(accounts(0));
//     testing_env!(context.build());
//     let mut contract = Three0Storage::new_default_meta(accounts(0).into());
    
//     testing_env!(context
//         .storage_usage(env::storage_usage())
//         .attached_deposit(MINT_STORAGE_COST)
//         .predecessor_account_id(accounts(0))
//         .build());
//     contract.nft_mint("0".to_string().clone(), sample_token_metadata(), "Olympus_Mons_0".to_string(), accounts(0), None);
//     contract.nft_mint("1".to_string().clone(), sample_token_metadata(), "Olympus_Mons_1".to_string(), accounts(0), None);

//     let mut root = ["Olympus_Mons_0", "Olumpus_Mons_1"];
//     root.sort();
//     assert_eq!(contract.list_files("".to_string()), root);
//     assert_eq!(contract.get_file("Olympus_Mons_0".to_string()), sample_token_metadata());
//     assert_eq!(contract.get_file("Olympus_Mons_1".to_string()), sample_token_metadata());
// }

#[test]
fn test_add_multiple_files_folder() {
    //mint token to root and folder, and see if list_file and get_file works
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());
    
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_mint("0".to_string().clone(), sample_token_metadata(), "Olympus_Mons".to_string(), accounts(0), None);
    contract.nft_mint("1".to_string().clone(), sample_token_metadata(), "folder1/Olympus_Mons".to_string(), accounts(0), None);

    let mut root = ["folder1/", "Olympus_Mons"];
    root.sort();
    assert_eq!(contract.list_files("".to_string()), root);
    let folder = ["Olympus_Mons"];
    assert_eq!(contract.list_files("folder1/".to_string()), folder);
    assert_eq!(contract.get_file("Olympus_Mons".to_string()), sample_token_metadata());
    assert_eq!(contract.get_file("folder1/Olympus_Mons".to_string()), sample_token_metadata());
}

#[test]
fn test_add_to_inner_folder() {
    //mint token to inner folder, and see if list_file and get_file works
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Three0Storage::new_default_meta(accounts(0).into());
    
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_mint("0".to_string().clone(), sample_token_metadata(), "folder1/folder2/Olympus_Mons".to_string(), accounts(0), None);

    let root = ["folder1/"];
    assert_eq!(contract.list_files("".to_string()), root);
    let folder1 = ["folder2/"];
    assert_eq!(contract.list_files("folder1/".to_string()), folder1);
    let folder2 = ["Olympus_Mons"];
    assert_eq!(contract.list_files("folder1/folder2/".to_string()), folder2);
    assert_eq!(contract.get_file("folder1/folder2/Olympus_Mons".to_string()), sample_token_metadata());
}
'''
'''--- contract/token/Cargo.toml ---
[package]
name = "three0_token"
version = "1.0.0"
authors = ["Three0 <usajjad5@utexas.edu>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
serde = "1"
serde_json = "1"

'''
'''--- contract/token/src/events.rs ---
//! Standard for nep141 (Fungible Token) events.
//!
//! These events will be picked up by the NEAR indexer.
//!
//! <https://github.com/near/NEPs/blob/master/specs/Standards/FungibleToken/Event.md>
//!
//! This is an extension of the events format (nep-297):
//! <https://github.com/near/NEPs/blob/master/specs/Standards/EventsFormat.md>
//!
//! The three events in this standard are [`FtMint`], [`FtTransfer`], and [`FtBurn`].
//!
//! These events can be logged by calling `.emit()` on them if a single event, or calling
//! [`FtMint::emit_many`], [`FtTransfer::emit_many`],
//! or [`FtBurn::emit_many`] respectively.

use near_sdk::json_types::U128;
use near_sdk::AccountId;
use near_sdk::serde::Serialize;

use near_sdk::env;

#[derive(Serialize, Debug)]
#[serde(tag = "standard")]
#[must_use = "don't forget to `.emit()` this event"]
#[serde(rename_all = "snake_case")]
pub(crate) enum NearEvent<'a> {
    Nep141(Nep141Event<'a>),
}

impl<'a> NearEvent<'a> {
    fn to_json_string(&self) -> String {
        // Events cannot fail to serialize so fine to panic on error
        #[allow(clippy::redundant_closure)]
        serde_json::to_string(self).ok().unwrap_or_else(|| env::abort())
    }

    fn to_json_event_string(&self) -> String {
        format!("EVENT_JSON:{}", self.to_json_string())
    }

    /// Logs the event to the host. This is required to ensure that the event is triggered
    /// and to consume the event.
    pub(crate) fn emit(self) {
        near_sdk::env::log_str(&self.to_json_event_string());
    }
}

/// Data to log for an FT mint event. To log this event, call [`.emit()`](FtMint::emit).
#[must_use]
#[derive(Serialize, Debug, Clone)]
pub struct FtMint<'a> {
    pub owner_id: &'a AccountId,
    pub amount: &'a U128,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<&'a str>,
}

impl FtMint<'_> {
    /// Logs the event to the host. This is required to ensure that the event is triggered
    /// and to consume the event.
    pub fn emit(self) {
        Self::emit_many(&[self])
    }

    /// Emits an FT mint event, through [`env::log_str`](near_sdk::env::log_str),
    /// where each [`FtMint`] represents the data of each mint.
    pub fn emit_many(data: &[FtMint<'_>]) {
        new_141_v1(Nep141EventKind::FtMint(data)).emit()
    }
}

/// Data to log for an FT transfer event. To log this event,
/// call [`.emit()`](FtTransfer::emit).
#[must_use]
#[derive(Serialize, Debug, Clone)]
pub struct FtTransfer<'a> {
    pub old_owner_id: &'a AccountId,
    pub new_owner_id: &'a AccountId,
    pub amount: &'a U128,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<&'a str>,
}

impl FtTransfer<'_> {
    /// Logs the event to the host. This is required to ensure that the event is triggered
    /// and to consume the event.
    pub fn emit(self) {
        Self::emit_many(&[self])
    }

    /// Emits an FT transfer event, through [`env::log_str`](near_sdk::env::log_str),
    /// where each [`FtTransfer`] represents the data of each transfer.
    pub fn emit_many(data: &[FtTransfer<'_>]) {
        new_141_v1(Nep141EventKind::FtTransfer(data)).emit()
    }
}

#[derive(Serialize, Debug)]
pub(crate) struct Nep141Event<'a> {
    version: &'static str,
    #[serde(flatten)]
    event_kind: Nep141EventKind<'a>,
}

#[derive(Serialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[allow(clippy::enum_variant_names)]
enum Nep141EventKind<'a> {
    FtMint(&'a [FtMint<'a>]),
    FtTransfer(&'a [FtTransfer<'a>]),
}

fn new_141<'a>(version: &'static str, event_kind: Nep141EventKind<'a>) -> NearEvent<'a> {
    NearEvent::Nep141(Nep141Event { version, event_kind })
}

fn new_141_v1(event_kind: Nep141EventKind) -> NearEvent {
    new_141("1.0.0", event_kind)
}
'''
'''--- contract/token/src/ft_core.rs ---
use near_sdk::{Gas, ext_contract, PromiseOrValue, assert_one_yocto, PromiseResult};

use crate::*;

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(5_000_000_000_000);
const GAS_FOR_FT_TRANSFER_CALL: Gas = Gas(25_000_000_000_000 + GAS_FOR_RESOLVE_TRANSFER.0);

#[ext_contract(ext_ft_core)]
pub trait FungibleTokenCore {
    /// Transfers positive `amount` of tokens from the `env::predecessor_account_id` to `receiver_id`.
    /// Both accounts must be registered with the contract for transfer to succeed. (See [NEP-145](https://github.com/near/NEPs/discussions/145))
    /// This method must to be able to accept attached deposits, and must not panic on attached deposit.
    /// Exactly 1 yoctoNEAR must be attached.
    /// See [the Security section](https://github.com/near/NEPs/issues/141#user-content-security) of the standard.
    ///
    /// Arguments:
    /// - `receiver_id` - the account ID of the receiver.
    /// - `amount` - the amount of tokens to transfer. Must be a positive number in decimal string representation.
    /// - `memo` - an optional string field in a free form to associate a memo with this transfer.
    fn ft_transfer(&mut self, receiver_id: AccountId, amount: U128, memo: Option<String>);

    /// Transfers positive `amount` of tokens from the `env::predecessor_account_id` to `receiver_id` account. Then
    /// calls `ft_on_transfer` method on `receiver_id` contract and attaches a callback to resolve this transfer.
    /// `ft_on_transfer` method must return the amount of tokens unused by the receiver contract, the remaining tokens
    /// must be refunded to the `predecessor_account_id` at the resolve transfer callback.
    ///
    /// Token contract must pass all the remaining unused gas to the `ft_on_transfer` call.
    ///
    /// Malicious or invalid behavior by the receiver's contract:
    /// - If the receiver contract promise fails or returns invalid value, the full transfer amount must be refunded.
    /// - If the receiver contract overspent the tokens, and the `receiver_id` balance is lower than the required refund
    /// amount, the remaining balance must be refunded. See [the Security section](https://github.com/near/NEPs/issues/141#user-content-security) of the standard.
    ///
    /// Both accounts must be registered with the contract for transfer to succeed. (See #145)
    /// This method must to be able to accept attached deposits, and must not panic on attached deposit. Exactly 1 yoctoNEAR must be attached. See [the Security
    /// section](https://github.com/near/NEPs/issues/141#user-content-security) of the standard.
    ///
    /// Arguments:
    /// - `receiver_id` - the account ID of the receiver contract. This contract will be called.
    /// - `amount` - the amount of tokens to transfer. Must be a positive number in a decimal string representation.
    /// - `memo` - an optional string field in a free form to associate a memo with this transfer.
    /// - `msg` - a string message that will be passed to `ft_on_transfer` contract call.
    ///
    /// Returns a promise which will result in the amount of tokens withdrawn from sender's account.
    fn ft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        amount: U128,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<U128>;

    /// Returns the total supply of the token in a decimal string representation.
    // fn ft_total_supply(&self) -> U128;

    /// Mints the tokens and assigns them to the `account_id` of the caller of the method.
    /// Requirements:
    /// * The caller of the method must attach a deposit
    /// * The amount minted must be equivalent to the exchange rate of the attached deposit
    fn ft_mint(&mut self);

    /// Returns the balance of the account. If the account doesn't exist must returns `"0"`.
    fn ft_balance_of(&self, account_id: AccountId) -> U128;

    // Returns a list of balances for a list of accounts. If an account doesn't exist it must return `"0"`.
    fn ft_balance_of_batch(&self, account_ids: Vec<AccountId>) -> Vec<U128>;

    // Returns a list of registration status for a list of accounts.
    fn ft_is_registered(&self, account_ids: Vec<AccountId>) -> Vec<bool>;
}

#[near_bindgen]
impl FungibleTokenCore for Contract {
    #[payable]
    fn ft_transfer(&mut self, receiver_id: AccountId, amount: U128, memo: Option<String>) {
        // Assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be required to sign with a FAK.
        assert_one_yocto();
        // The sender is the user who called the method
        let sender_id = env::predecessor_account_id();
        // How many tokens the user wants to withdraw
        let amount: Balance = amount.into();
        // Transfer the tokens
        self.internal_transfer(&sender_id, &receiver_id, amount, memo);
    }

    #[payable]
    fn ft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        amount: U128,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<U128> {
        // Assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be required to sign with a FAK.
        assert_one_yocto();
        // The sender is the user who called the method
        let sender_id = env::predecessor_account_id();
        // How many tokens the sender wants to transfer
        let amount: Balance = amount.into();
        // Transfer the tokens
        self.internal_transfer(&sender_id, &receiver_id, amount, memo);

        // Initiating receiver's call and the callback
        // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for ft transfer call.
        ext_ft_receiver::ext(receiver_id.clone())
            .with_static_gas(GAS_FOR_FT_TRANSFER_CALL)
            .ft_on_transfer(sender_id.clone(), amount.into(), msg)
            // We then resolve the promise and call ft_resolve_transfer on our own contract
            // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for resolve transfer
            .then(
                Self::ext(env::current_account_id())
                    .with_static_gas(GAS_FOR_RESOLVE_TRANSFER)
                    .ft_resolve_transfer(&sender_id, receiver_id, amount.into()),
            )
            .into()
    }

    // fn ft_total_supply(&self) -> U128 {
    //     // Return the total supply casted to a U128
    //     self.total_supply.into()
    // }

    #[payable]
    fn ft_mint(&mut self) {
        // The reciever is the user who called the method
        let receiver_id = env::predecessor_account_id();
        // The amount of tokens to mint is the attached deposit
        let amount = env::attached_deposit();
        // Mint the tokens
        self.internal_mint(&receiver_id, amount);
    }

    fn ft_balance_of(&self, account_id: AccountId) -> U128 {
        // Return the balance of the account casted to a U128
        self.accounts.get(&account_id).unwrap_or(0).into()
    }

    fn ft_balance_of_batch(&self, account_ids: Vec<AccountId>) -> Vec<U128> {
        // Return the balance of the accounts casted to a U128
        account_ids
            .iter()
            .map(|account_id| self.accounts.get(account_id).unwrap_or(0).into())
            .collect()
    }

    fn ft_is_registered(&self, account_ids: Vec<AccountId>) -> Vec<bool> {
        // Return the registration status of the accounts
        account_ids
            .iter()
            .map(|account_id| self.accounts.contains_key(account_id))
            .collect()
    }
}

#[ext_contract(ext_ft_receiver)]
pub trait FungibleTokenReceiver {
    /// Called by fungible token contract after `ft_transfer_call` was initiated by
    /// `sender_id` of the given `amount` with the transfer message given in `msg` field.
    /// The `amount` of tokens were already transferred to this contract account and ready to be used.
    ///
    /// The method must return the amount of tokens that are *not* used/accepted by this contract from the transferred
    /// amount. Examples:
    /// - The transferred amount was `500`, the contract completely takes it and must return `0`.
    /// - The transferred amount was `500`, but this transfer call only needs `450` for the action passed in the `msg`
    ///   field, then the method must return `50`.
    /// - The transferred amount was `500`, but the action in `msg` field has expired and the transfer must be
    ///   cancelled. The method must return `500` or panic.
    ///
    /// Arguments:
    /// - `sender_id` - the account ID that initiated the transfer.
    /// - `amount` - the amount of tokens that were transferred to this account in a decimal string representation.
    /// - `msg` - a string message that was passed with this transfer call.
    ///
    /// Returns the amount of unused tokens that should be returned to sender, in a decimal string representation.
    fn ft_on_transfer(
        &mut self,
        sender_id: AccountId,
        amount: U128,
        msg: String,
    ) -> PromiseOrValue<U128>;
}

#[near_bindgen]
impl Contract {
    // Finalize an `ft_transfer_call` chain of cross-contract calls.
    //
    // The `ft_transfer_call` process:
    //
    // 1. Sender calls `ft_transfer_call` on FT contract
    // 2. FT contract transfers `amount` tokens from sender to receiver
    // 3. FT contract calls `ft_on_transfer` on receiver contract
    // 4+. [receiver contract may make other cross-contract calls]
    // N. FT contract resolves promise chain with `ft_resolve_transfer`, and may
    //    refund sender some or all of original `amount`
    //
    // Requirements:
    // * Contract MUST forbid calls to this function by any account except self
    // * If promise chain failed, contract MUST revert token transfer
    // * If promise chain resolves with a non-zero amount given as a string,
    //   contract MUST return this amount of tokens to `sender_id`
    //
    // Arguments:
    // * `sender_id`: the sender of `ft_transfer_call`
    // * `receiver_id`: the `receiver_id` argument given to `ft_transfer_call`
    // * `amount`: the `amount` argument given to `ft_transfer_call`
    //
    // Returns a string representing a string version of an unsigned 128-bit
    // integer of how many total tokens were spent by sender_id. Example: if sender
    // calls `ft_transfer_call({ "amount": "100" })`, but `receiver_id` only uses
    // 80, `ft_on_transfer` will resolve with `"20"`, and `ft_resolve_transfer`
    // will return `"80"`.
    #[private]
    pub fn ft_resolve_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) -> U128 {
        let amount: Balance = amount.into();

        // Get the unused amount from the `ft_on_transfer` call result.
        let unused_amount = match env::promise_result(0) {
            PromiseResult::NotReady => env::abort(),
            // If the promise was successful, get the return value and cast it to a U128.
            PromiseResult::Successful(value) => {
                // If we can properly parse the value, the unused amount is equal to whatever is smaller - the unused amount or the original amount (to prevent malicious contracts)
                if let Ok(unused_amount) = near_sdk::serde_json::from_slice::<U128>(&value) {
                    std::cmp::min(amount, unused_amount.0)
                // If we can't properly parse the value, the original amount is returned.
                } else {
                    amount
                }
            }
            // If the promise wasn't successful, return the original amount.
            PromiseResult::Failed => amount,
        };

        // If there is some unused amount, we should refund the sender
        if unused_amount > 0 {
            // Get the receiver's balance. We can only refund the sender if the receiver has enough balance.
            let receiver_balance = self.accounts.get(&receiver_id).unwrap_or(0);
            if receiver_balance > 0 {
                // The amount to refund is the smaller of the unused amount and the receiver's balance as we can only refund up to what the receiver currently has.
                let refund_amount = std::cmp::min(receiver_balance, unused_amount);
                
                // Refund the sender for the unused amount.
                self.internal_transfer(&receiver_id, &sender_id, refund_amount, Some("Refund".to_string()));
                
                // Return what was actually used (the amount sent - refund)
                let used_amount = amount
                    .checked_sub(refund_amount)
                    .unwrap_or_else(|| env::panic_str("Total supply overflow"));
                return used_amount.into();
            }
        }

        // If the unused amount is 0, return the original amount.
        amount.into()
    }
}
'''
'''--- contract/token/src/internal.rs ---
use near_sdk::{require};

use crate::*;

impl Contract {
    /// Internal method for force getting the balance of an account. If the account doesn't have a balance, panic with a custom message.
    pub(crate) fn internal_unwrap_balance_of(&self, account_id: &AccountId) -> Balance {
        match self.accounts.get(account_id) {
            Some(balance) => balance,
            None => {
                env::panic_str(format!("The account {} is not registered", &account_id).as_str())
            }
        }
    }

    pub(crate) fn internal_mint(&mut self, account_id: &AccountId, amount: Balance) {
        let mut balance = self.internal_unwrap_balance_of(account_id);
        //use exchange rate to convert amount from NEAR to token value
        let token_amount = U128(((amount * self.exchange_rate.0) as f64 * u128::pow(10, self.metadata.get().unwrap().decimals.into()) as f64 / (1e24)) as u128);

        balance += token_amount.0;
        self.accounts.insert(account_id, &balance);
        FtMint {
            owner_id: &account_id,
            amount: &token_amount,
            memo: Some(&format!("User {} minted {} tokens", &account_id, &token_amount.0).to_string()),
        }.emit()
    }

    /// Internal method for depositing some amount of FTs into an account. 
    pub(crate) fn internal_deposit(&mut self, account_id: &AccountId, amount: Balance) {
        // Get the current balance of the account. If they're not registered, panic.
        let balance = self.internal_unwrap_balance_of(account_id);
        
        // Add the amount to the balance and insert the new balance into the accounts map
        if let Some(new_balance) = balance.checked_add(amount) {
            self.accounts.insert(account_id, &new_balance);
        } else {
            env::panic_str("Balance overflow");
        }
    }

    /// Internal method for withdrawing some amount of FTs from an account. 
    pub(crate) fn internal_withdraw(&mut self, account_id: &AccountId, amount: Balance) {
        // Get the current balance of the account. If they're not registered, panic.
        let balance = self.internal_unwrap_balance_of(account_id);
        
        // Decrease the amount from the balance and insert the new balance into the accounts map
        if let Some(new_balance) = balance.checked_sub(amount) {
            self.accounts.insert(account_id, &new_balance);
        } else {
            env::panic_str("The account doesn't have enough balance");
        }
    }

    /// Internal method for performing a transfer of FTs from one account to another.
    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        amount: Balance,
        memo: Option<String>,
    ) {
        // Ensure the sender can't transfer to themselves
        require!(sender_id != receiver_id, "Sender and receiver should be different");
        // Ensure the sender can't transfer 0 tokens
        require!(amount > 0, "The amount should be a positive number");
        
        // Withdraw from the sender and deposit into the receiver
        self.internal_withdraw(sender_id, amount);
        self.internal_deposit(receiver_id, amount);
        
        // Emit a Transfer event
        FtTransfer {
            old_owner_id: sender_id,
            new_owner_id: receiver_id,
            amount: &U128(amount),
            memo: memo.as_deref(),
        }
        .emit();
    }

    /// Internal method for registering an account with the contract.
    pub(crate) fn internal_register_account(&mut self, account_id: &AccountId) {
        if self.accounts.insert(account_id, &0).is_some() {
            env::panic_str("The account is already registered");
        }
    }

    /// Internal method for measuring how many bytes it takes to insert the longest possible account ID into our map
    /// This will insert the account, measure the storage, and remove the account. It is called in the initialization function.
    pub(crate) fn measure_bytes_for_longest_account_id(&mut self) {
        let initial_storage_usage = env::storage_usage();
        let tmp_account_id = AccountId::new_unchecked("a".repeat(64));
        self.accounts.insert(&tmp_account_id, &0u128);
        self.bytes_for_longest_account_id = env::storage_usage() - initial_storage_usage;
        self.accounts.remove(&tmp_account_id);
    }
}
'''
'''--- contract/token/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap};
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, AccountId, Balance, PanicOnDefault, StorageUsage};

pub mod ft_core;
pub mod events;
pub mod metadata;
pub mod storage;
pub mod internal;

use crate::metadata::*;
use crate::events::*;

/// The specific version of the standard we're using
pub const FT_METADATA_SPEC: &str = "ft-1.0.0";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    /// Keep track of each account's balances
    pub accounts: LookupMap<AccountId, Balance>,

    /// How many FT it takes to be worth 1 NEAR.
    pub exchange_rate: U128,

    /// The bytes for the largest possible account ID that can be registered on the contract 
    pub bytes_for_longest_account_id: StorageUsage,

    /// Metadata for the contract itself
    pub metadata: LazyOption<FungibleTokenMetadata>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    Accounts,
    Metadata
}

#[near_bindgen]
impl Contract {
    /// Initializes the contract with the given total supply owned by the given `owner_id` with
    /// default metadata (for example purposes only).
    #[init]
    pub fn new_default_meta(owner_id: AccountId, total_supply: U128) -> Self {
        // Calls the other function "new: with some default metadata and the owner_id & total supply passed in 
        Self::new(
            owner_id,
            total_supply,
            U128(10),
            FungibleTokenMetadata {
                spec: FT_METADATA_SPEC.to_string(),
                name: "Team Token FT Tutorial".to_string(),
                symbol: "gtNEAR".to_string(),
                icon: None,
                reference: None,
                reference_hash: None,
                decimals: 24,
                exchange_rate: 10,
            },
        )
    }

    /// Initializes the contract with the given total supply owned by the given `owner_id` with
    /// the given fungible token metadata.
    #[init]
    pub fn new(
        owner_id: AccountId,
        initial_supply: U128,
        exchange_rate: U128,
        metadata: FungibleTokenMetadata,
    ) -> Self {
        // Create a variable of type Self with all the fields initialized. 
        let mut this = Self {
            // Set the exchange rate
            exchange_rate: exchange_rate,
            // Set the bytes for the longest account ID to 0 temporarily until it's calculated later
            bytes_for_longest_account_id: 0,
            // Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            accounts: LookupMap::new(StorageKey::Accounts.try_to_vec().unwrap()),
            metadata: LazyOption::new(
                StorageKey::Metadata.try_to_vec().unwrap(),
                Some(&metadata),
            ),
        };

        // Measure the bytes for the longest account ID and store it in the contract.
        this.measure_bytes_for_longest_account_id();

        // Register the owner's account and set their balance to the total supply.
        this.internal_register_account(&owner_id);
        this.internal_deposit(&owner_id, initial_supply.into());
        
        // Emit an event showing that the FTs were minted
        FtMint {
            owner_id: &owner_id,
            amount: &initial_supply,
            memo: Some("Initial token supply is minted"),
        }
        .emit();

        // Return the Contract object
        this
    }
}
'''
'''--- contract/token/src/metadata.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::Base64VecU8;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{near_bindgen};

use crate::*;

#[derive(BorshDeserialize, BorshSerialize, Clone, Deserialize, Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct FungibleTokenMetadata {
    pub spec: String, // Should be ft-1.0.0 to indicate that a Fungible Token contract adheres to the current versions of this Metadata and the Fungible Token Core specs. This will allow consumers of the Fungible Token to know if they support the features of a given contract.
    pub name: String, // The human-readable name of the token.
    pub symbol: String, // The abbreviation, like wETH or AMPL.
    pub icon: Option<String>, // Icon of the fungible token.
    pub reference: Option<String>, // A link to a valid JSON file containing various keys offering supplementary details on the token 
    pub reference_hash: Option<Base64VecU8>, // The base64-encoded sha256 hash of the JSON file contained in the reference field. This is to guard against off-chain tampering.
    pub decimals: u8, // used in frontends to show the proper significant digits of a token. This concept is explained well in this OpenZeppelin post. https://docs.openzeppelin.com/contracts/3.x/erc20#a-note-on-decimals
    pub exchange_rate: u128 // The exchange rate of the token in relation to the NEAR token. This is used to calculate the NEAR value of the token. The exchange rate is the number of tokens that are equivalent to 1 NEAR. For example, if the exchange rate is 100, then 100 tokens are equivalent to 1 NEAR.
}

pub trait FungibleTokenMetadataProvider {
    // View call for returning the contract metadata
    fn ft_metadata(&self) -> FungibleTokenMetadata;
}

#[near_bindgen]
impl FungibleTokenMetadataProvider for Contract {
    fn ft_metadata(&self) -> FungibleTokenMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- contract/token/src/storage.rs ---
use near_sdk::json_types::U128;
use near_sdk::{env, log, AccountId, Balance, Promise};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Deserialize, Serialize};

use crate::*;

// The structure that will be returned for the methods:
// * `storage_deposit`
// * `storage_withdraw`
// * `storage_balance_of`
// The `total` and `available` values are string representations of unsigned
// 128-bit integers showing the balance of a specific account in yoctoâ“ƒ.
#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct StorageBalance {
    pub total: U128,
    pub available: U128,
}

// The below structure will be returned for the method `storage_balance_bounds`.
// Both `min` and `max` are string representations of unsigned 128-bit integers.
//
// `min` is the amount of tokens required to start using this contract at all
// (eg to register with the contract). If a new contract user attaches `min`
// NEAR to a `storage_deposit` call, subsequent calls to `storage_balance_of`
// for this user must show their `total` equal to `min` and `available=0` .
//
// A contract may implement `max` equal to `min` if it only charges for initial
// registration, and does not adjust per-user storage over time. A contract
// which implements `max` must refund deposits that would increase a user's
// storage balance beyond this amount.
#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct StorageBalanceBounds {
    pub min: U128,
    pub max: Option<U128>,
}

pub trait StorageManagement {
    /************************************/
    /* CHANGE METHODS on fungible token */
    /************************************/
    // Payable method that receives an attached deposit of â“ƒ for a given account.
    //
    // If `account_id` is omitted, the deposit MUST go toward predecessor account.
    // If provided, deposit MUST go toward this account. If invalid, contract MUST
    // panic.
    //
    // If `registration_only=true`, contract MUST refund above the minimum balance
    // if the account wasn't registered and refund full deposit if already
    // registered.
    //
    // The `storage_balance_of.total` + `attached_deposit` in excess of
    // `storage_balance_bounds.max` must be refunded to predecessor account.
    //
    // Returns the StorageBalance structure showing updated balances.
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance;

    /****************/
    /* VIEW METHODS */
    /****************/
    // Returns minimum and maximum allowed balance amounts to interact with this
    // contract. See StorageBalanceBounds.
    fn storage_balance_bounds(&self) -> StorageBalanceBounds;

    // Returns the StorageBalance structure of the valid `account_id`
    // provided. Must panic if `account_id` is invalid.
    //
    // If `account_id` is not registered, must return `null`.
    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance>;
}

#[near_bindgen]
impl StorageManagement for Contract {
    #[allow(unused_variables)]
    #[payable]
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance {
        // Get the amount of $NEAR to deposit
        let amount: Balance = env::attached_deposit();
        // If an account was specified, use that. Otherwise, use the predecessor account.
        let account_id = account_id.unwrap_or_else(env::predecessor_account_id);
        
        // If the account is already registered, refund the deposit.
        if self.accounts.contains_key(&account_id) {
            log!("The account is already registered, refunding the deposit");
            if amount > 0 {
                Promise::new(env::predecessor_account_id()).transfer(amount);
            } 
        // Register the account and refund any excess $NEAR
        } else {
            // Get the minimum required storage and ensure the deposit is at least that amount
            let min_balance = self.storage_balance_bounds().min.0;
            if amount < min_balance {
                env::panic_str("The attached deposit is less than the minimum storage balance");
            }

            // Register the account
            self.internal_register_account(&account_id);
            // Perform a refund
            let refund = amount - min_balance;
            if refund > 0 {
                Promise::new(env::predecessor_account_id()).transfer(refund);
            }
        }

        // Return the storage balance of the account
        StorageBalance { total: self.storage_balance_bounds().min, available: 0.into() }
    }

    fn storage_balance_bounds(&self) -> StorageBalanceBounds {
        // Calculate the required storage balance by taking the bytes for the longest account ID and multiplying by the current byte cost
        let required_storage_balance =
            Balance::from(self.bytes_for_longest_account_id) * env::storage_byte_cost();
        
        // Storage balance bounds will have min == max == required_storage_balance
        StorageBalanceBounds {
            min: required_storage_balance.into(),
            max: Some(required_storage_balance.into()),
        }
    }

    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance> {
        // Get the storage balance of the account. Available will always be 0 since you can't overpay for storage.
        if self.accounts.contains_key(&account_id) {
            Some(StorageBalance { total: self.storage_balance_bounds().min, available: 0.into() })
        } else {
            None
        }
    }
}
'''
'''--- jest.config.json ---
{
	"roots": ["<rootDir>/src"],
	"transform": {
		"^.+\\.tsx?$": "ts-jest"
	},
	"testRegex": "(/__tests__/.*|(\\.|/)(test|spec))\\.(jsx?|tsx?)$",
	"moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"],
	"preset": "ts-jest",
	"testEnvironment": "jsdom"
}

'''
'''--- package.json ---
{
  "name": "three0",
  "version": "0.1.0",
  "license": "GPL-3.0",
  "private": true,
  "description": "Three0 Contract and Dev Console",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build 'src/*.html' --no-cache --public-url ./",
    "predeploy": "npm run build",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy alpha.three0.testnet",
    "deploy:pages": "echo 'app.three0dev.com' > ./dist/CNAME && gh-pages -d dist",
    "deploy": "npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "npm run front",
    "front": "env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract -e rs --exec \"npm run start\"",
    "test": "npm run test:jest && npm run test:contract",
    "test:contract": "npm run build:contract:debug && cd contract && cargo test -- --nocapture",
    "test:jest": "jest --verbose",
    "lint": "eslint 'src/**/*.{ts,tsx}' --no-error-on-unmatched-pattern",
    "lint:fix": "eslint 'src/**/*.{ts,tsx}' --no-error-on-unmatched-pattern --fix"
  },
  "devDependencies": {
    "@parcel/transformer-typescript-tsc": "^2.8.2",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@types/jest": "^29.2.0",
    "@types/react-test-renderer": "^18.0.0",
    "@typescript-eslint/eslint-plugin": "^5.38.1",
    "@typescript-eslint/parser": "^5.38.1",
    "buffer": "^5.5.0",
    "env-cmd": "~10.1.0",
    "eslint": "^8.24.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-jsx-a11y": "^6.6.1",
    "eslint-plugin-prettier": "^4.0.0",
    "eslint-plugin-react": "^7.31.8",
    "eslint-plugin-react-hooks": "^4.6.0",
    "gh-pages": "^4.0.0",
    "jest": "~29.2.0",
    "jest-environment-jsdom": "^29.2.1",
    "jest-environment-node": "~29.2.0",
    "near-cli": "^3.4.2",
    "nodemon": "~2.0.3",
    "parcel": "^2.8.2",
    "prettier": "^2.6.2",
    "process": "^0.11.10",
    "react-test-renderer": "~18.2.0",
    "regenerator-runtime": "^0.13.9",
    "shelljs": "~0.8.4",
    "ts-jest": "^29.0.3",
    "typescript": "^4.9.4"
  },
  "dependencies": {
    "@emotion/react": "^11.10.5",
    "@emotion/styled": "^11.10.5",
    "@mui/icons-material": "^5.11.0",
    "@mui/lab": "^5.0.0-alpha.113",
    "@mui/material": "^5.11.1",
    "@pgrabovets/json-view": "^2.7.1",
    "@types/orbit-db": "npm:@constl/orbit-db-types@^1.0.5",
    "@types/react": "^18.0.25",
    "@types/react-dom": "^18.0.6",
    "date-fns": "^2.29.3",
    "ipfs-core": "^0.14.3",
    "near-api-js": "^1.1.0",
    "orbit-db": "^0.28.7",
    "orbit-db-identity-provider": "^0.4.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.2",
    "react-router-dom": "^6.4.3",
    "short-uuid": "^4.2.2",
    "sweetalert2": "^11.6.8",
    "sweetalert2-react-content": "^5.0.7"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Three0Dev/Three0.git"
  },
  "author": "",
  "bugs": {
    "url": "https://github.com/Three0Dev/Three0/issues"
  },
  "homepage": "https://github.com/Three0Dev/Three0#readme"
}

'''
'''--- src/404.html ---
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon/favicon.svg" />
    <link rel="icon" type="image/svg+xml" href="./assets/favicon/favicon.svg">
    <link rel="icon" type="image/png" href="./assets/favicon/favicon.png">
    <title>Three0</title>
    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      // MIT License
      // https://github.com/rafgraph/spa-github-pages
      // This script takes the current url and converts the path and query
      // string into just a query string, and then redirects the browser
      // to the new url with only a query string and hash fragment,
      // e.g. https://www.foo.tld/one/two?a=b&c=d#qwe, becomes
      // https://www.foo.tld/?/one/two&a=b~and~c=d#qwe
      // Note: this 404.html file must be at least 512 bytes for it to work
      // with Internet Explorer (it is currently > 512 bytes)

      // If you're creating a Project Pages site and NOT using a custom domain,
      // then set pathSegmentsToKeep to 1 (enterprise users may need to set it to > 1).
      // This way the code will only replace the route part of the path, and not
      // the real directory in which the app resides, for example:
      // https://username.github.io/repo-name/one/two?a=b&c=d#qwe becomes
      // https://username.github.io/repo-name/?/one/two&a=b~and~c=d#qwe
      // Otherwise, leave pathSegmentsToKeep as 0.
      var pathSegmentsToKeep = 0;

      var l = window.location;
      l.replace(
        l.protocol + '//' + l.hostname + (l.port ? ':' + l.port : '') +
        l.pathname.split('/').slice(0, 1 + pathSegmentsToKeep).join('/') + '/?/' +
        l.pathname.slice(1).split('/').slice(pathSegmentsToKeep).join('/').replace(/&/g, '~and~') +
        (l.search ? '&' + l.search.slice(1).replace(/&/g, '~and~') : '') +
        l.hash
      );

    </script>
  </head>
  <body>
  </body>
</html>
'''
'''--- src/ReactAppEnv.d.ts ---
declare module '*.png'
declare module '*.svg'
declare module '*.jpeg'
declare module '*.jpg'

'''
'''--- src/__mocks__/fileMock.ts ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = ''

'''
'''--- src/assets/code.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="1058" height="434.74542" viewBox="0 0 1058 434.74542" xmlns:xlink="http://www.w3.org/1999/xlink"><polygon points="643.457 221.721 705.39 159.977 643.457 98.233 662.339 79.414 743.154 159.977 662.339 240.54 643.457 221.721 643.457 221.721" fill="#e6e6e6" style="isolation:isolate"/><rect x="466.59505" y="135.20679" width="25.176" height="25.17601" fill="#e6e6e6" style="isolation:isolate"/><rect x="567.80264" y="135.20679" width="25.17601" height="25.17601" fill="#e6e6e6" style="isolation:isolate"/><rect x="517.19884" y="135.20679" width="25.17601" height="25.17601" fill="#e6e6e6" style="isolation:isolate"/><polygon points="432.482 221.092 370.486 159.348 432.419 97.604 413.537 78.785 332.785 159.348 413.6 239.911 432.482 221.092" fill="#e6e6e6" style="isolation:isolate"/><polygon points="643.457 209.763 705.39 148.019 643.457 86.274 662.339 67.455 743.154 148.019 662.339 228.582 643.457 209.763 643.457 209.763" fill="#81c784"/><path d="M537.59506,385.05149h25.176v-25.176H537.595Zm126.38359-25.176h-25.176v25.176h25.176Zm-75.77981,25.176h25.176v-25.176h-25.176Z" transform="translate(-71 -232.62729)" fill="#81c784"/><polygon points="432.482 209.133 370.486 147.389 432.419 85.645 413.537 66.826 332.785 147.389 413.6 227.952 432.482 209.133" fill="#81c784"/><polygon points="129.305 410.449 143.399 413.856 163.248 361.117 142.447 356.088 129.305 410.449" fill="#a0616a"/><path d="M193.63206,655.732l4.3279-17.902,27.57443,6.66619a18.03222,18.03222,0,0,1,13.27516,21.74027l-.09544.394Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><polygon points="191.696 420.05 206.196 420.049 213.093 364.122 191.694 364.123 191.696 420.05" fill="#a0616a"/><path d="M259.18336,648.12878l28.36885-.00118h.00079A18.01192,18.01192,0,0,1,305.565,666.139v.40553l-46.3808.002Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M259.29356,633.32467l2.38386-87.00733-3.21111-35.28086-6.26571,27.151-27.37942,89.28493L201.21793,621.261l27.33582-96.27019-5.93712-61.74814,17.05775-10.96528.23013.04158,58.27861,10.74237L284.10491,630.8438Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M282.35859,475.17467c-4.69322,0-10.18192-1.51185-16.29171-5.82451-19.551-13.79842-42.86266,1.04525-43.09625,1.19539l-.9465.6156.03321-1.1284c.02367-.80386,2.36509-80.71159,2.36509-106.42468,0-26.56546,17.33205-45.962,22.64433-51.27373,5.21382-5.21468,9.601-5.09919,15.15465-4.95482.95689.02426,1.95449.05082,3.00378.05082,7.25755,0,14.31354,6.97255,14.61037,7.26938l.14177.14206.02628.19866,20.13863,151.63135-.15419.19519C299.89479,466.98594,293.28172,475.17467,282.35859,475.17467Z" transform="translate(-71 -232.62729)" fill="#ccc"/><circle cx="268.30764" cy="269.43064" r="29.04805" transform="translate(-167.80192 142.99595) rotate(-61.3368)" fill="#a0616a"/><path d="M312.77524,499.45367a11.89282,11.89282,0,0,1-.69-18.22321L295.589,442.31962l21.5994,3.97529,12.35367,36.34094a11.95731,11.95731,0,0,1-16.76682,16.81782Z" transform="translate(-71 -232.62729)" fill="#a0616a"/><path d="M308.10258,477.30444l-29.80746-60.80685-13.06993-45.76567.0104-39.75752c.02945-.15708,3.102-15.62212,14.49025-14.55262,10.32658,1.0002,15.88834,6.04973,18.597,16.8845,2.301,9.204-.846,36.50975-1.15064,39.08649,1.9981,4.73768,31.97592,76.16447,27.013,84.76553a2.18414,2.18414,0,0,1-.78451.8131l5.312,11.21476Z" transform="translate(-71 -232.62729)" fill="#ccc"/><path d="M264.59343,280.3744c3.48214.45308,6.10882-3.10969,7.32709-6.40307s2.14653-7.12755,5.174-8.90657c4.13617-2.43049,9.42822.49275,14.15814-.30915,5.34156-.90559,8.81456-6.56659,9.08675-11.97752s-1.8811-10.61511-3.99389-15.60394l-.7376,6.2a12.295,12.295,0,0,0-5.37281-10.74684l.9507,9.09752a9.65567,9.65567,0,0,0-11.10838-7.9897l.14973,5.42064c-6.1695-.73362-12.39291-1.46827-18.58067-.90936s-12.41874,2.51667-17.10855,6.59179c-7.01521,6.09574-9.57732,16.1331-8.71716,25.38683s4.68008,17.94693,8.6613,26.34462c1.00168,2.11288,2.38715,4.49712,4.7099,4.76627,2.087.24183,3.99666-1.50276,4.64544-3.50106a12.69016,12.69016,0,0,0-.05633-6.234c-.587-3.1191-1.32688-6.30722-.775-9.43271s2.80033-6.21408,5.951-6.59711,6.37453,3.21831,4.85976,6.00735Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M983.59122,495.58011a10.05576,10.05576,0,0,1,2.3586-15.23787l-7.4341-34.953,17.28994,6.77433,4.40882,32.1534a10.11027,10.11027,0,0,1-16.62326,11.26316Z" transform="translate(-71 -232.62729)" fill="#ffb8b8"/><path d="M981.62765,468.308l-.09277-.34339c-9.34669-34.5709-19.00838-70.30806-30.8041-109.21933l-.07738-.2549.26022-.15181c6.57463-3.83653,16.45658-3.58105,22.986.59367a17.15009,17.15009,0,0,1,7.44359,18.19132l8.60322,44.85729c3.49772,14.663,7.11763,29.84049,10.57731,44.80585l.09811.42426-.53579.03421c-6.29931.40058-12.80735.81488-18.02141,1.0436Z" transform="translate(-71 -232.62729)" fill="#ccc"/><polygon points="831.194 421.744 818.934 421.744 813.1 374.457 831.194 374.457 831.194 421.744" fill="#ffb8b8"/><path d="M905.32117,666.25558H865.79041v-.5a15.40421,15.40421,0,0,1,15.387-15.38672h24.1438Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><polygon points="946.719 411.631 935.037 415.353 915.121 372.069 932.362 366.575 946.719 411.631" fill="#ffb8b8"/><path d="M986.64124,666.63351l-.15162-.47657a15.40435,15.40435,0,0,1,9.989-19.332l23.00415-7.33008,4.82324,15.13672Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><circle cx="884.66704" cy="69.87633" r="24.56103" fill="#ffb8b8"/><path d="M966.69432,297.95159c.1396-9.90634-4.00632-19.71729-10.41658-24.64995a16.64876,16.64876,0,0,0-21.13211.37344c-6.311,5.15746-10.26257,15.11151-9.92822,25.00948C939.35813,298.7248,953.49885,298.765,966.69432,297.95159Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M909.19348,639.15011l-.4917-.04785c-10.66577-1.04688-21.69482-2.12793-32.11792-2.252l-.56689-.00683.07739-.56153c2.46948-17.88574,3.51636-36.47949,4.52881-54.46191.99976-17.75586,2.0332-36.11572,4.44092-53.55322,1.01855-4.66944,2.01123-9.28321,3.00049-13.88037,8.18554-38.043,15.91723-73.97657,31.8767-109.54639l.15088-.33594.36548.04395c14.97437,1.812,29.36328,7.27539,40.51538,15.3833l.21607.15674-.0105.26709c-.21509,5.5249-.43774,11.23632-.10815,16.439a55.797,55.797,0,0,1,7.95385,49.2832c4.39112,14.6753,8.93091,29.84522,13.563,44.80957,11.24854,30.83838,22.88818,62.75147,34.81983,95.10108l.1958.53027-.55054.12891c-8.58472,2.01562-17.44043,4.09375-26.17676,4.90039l-.32983.03027-.15674-.292A712.85141,712.85141,0,0,1,936.30042,501.2297c-2.98145,9.09228-7.27637,17.29931-11.43726,25.249A189.02218,189.02218,0,0,0,914.381,548.88058c-1.84155,15.12109-2.33008,31.5039-2.802,47.34668-.44653,14.97949-.86816,29.12793-2.3313,42.43164Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M947.28183,273.756c10.6461-2.29372,22.42205-.11154,30.78278,7.07137s12.60642,19.60911,9.17169,30.26612-15.09593,18.15524-25.6397,15.40318c3.02034-8.51233-.37868-18.96349-7.76211-23.86665C945.07836,296.81524,942.66781,282.93292,947.28183,273.756Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M960.2074,420.99923l-.38941-.17725c-13.58129-6.19629-26.89843-10.95068-39.37573-15.28857l-.38257-.08252-.001-1.10938.24829.08643c.05224-.11523.11108-.24609.17016-.37646.17041-.377.28662-.63379.3855-.80372l-.00268-.00146c1.04028-2.11963,1.86718-4.168,2.66674-6.14893.8252-2.04443,1.677-4.15527,2.77759-6.38867a19.35575,19.35575,0,0,1-4.27637-20.82861c2.75635-6.53272,9.78418-11.62061,17.16846-12.46485,2.70581-7.44873,8.73487-23.10009,8.73487-23.10009s12.67822-.34815,17.77685-.99512l.08569-.01074.08423.01855c11.13086,2.439,20.42359,12.97168,22.5979,25.61377,1.83545,10.66992-.95166,22.87451-7.84741,34.36572a148.03962,148.03962,0,0,1-11.70947,16.08887c-3.106,3.88379-6.03955,7.55176-8.47608,11.2461Z" transform="translate(-71 -232.62729)" fill="#ccc"/><path d="M984.29217,290.49254v0Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M984.7908,288.31066c-7.45248-1.11243-13.30382-8.73046-12.45669-16.21774s8.2526-13.60541,15.76524-13.02465,13.88983,7.76435,13.57617,15.29287S994.306,289.731,984.7908,288.31066Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M983.62732,283.45577c-7.45239-1.11242-13.30371-8.73047-12.45654-16.21771a15.24139,15.24139,0,0,1,8.88183-11.73438c-6.01,1.31543-11.18237,6.55249-11.88183,12.73438-.84717,7.48724,5.00415,15.10529,12.45654,16.21771a14.20792,14.20792,0,0,0,8.17188-1.14294A14.50427,14.50427,0,0,1,983.62732,283.45577Z" transform="translate(-71 -232.62729)" fill="#2f2e41"/><path d="M839.06875,415.43349a10.05575,10.05575,0,0,1,15.15306-2.85319l30.47891-18.65516-.6265,18.55912-28.84725,14.87a10.11028,10.11028,0,0,1-16.15822-11.92072Z" transform="translate(-71 -232.62729)" fill="#ffb8b8"/><path d="M864.12832,404.49546l.29286-.20188c29.48139-20.33114,59.95745-41.34787,92.71522-65.43426l.21456-.15789.22983.19477c5.80788,4.92069,8.85952,14.32312,7.09886,21.87045A17.15011,17.15011,0,0,1,950.00786,373.846l-39.42775,23.05743c-12.65982,8.18336-25.764,16.65334-38.7215,24.90159l-.36733.23385-.21077-.49378c-2.47653-5.8059-5.03555-11.80405-6.98845-16.644Z" transform="translate(-71 -232.62729)" fill="#ccc"/><path d="M453,667.37271H72a1,1,0,0,1,0-2H453a1,1,0,1,1,0,2Z" transform="translate(-71 -232.62729)" fill="#3f3d56"/><path d="M1128,667.37271H747a1,1,0,0,1,0-2h381a1,1,0,0,1,0,2Z" transform="translate(-71 -232.62729)" fill="#3f3d56"/></svg>
'''
'''--- src/assets/favicon/favicon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" width="1000" height="1000"><rect width="1000" height="1000" rx="200" ry="200" fill="#81c784"></rect><g transform="matrix(1.0416666666666667,0,0,1.0416666666666667,-5.684341886080802e-14,125)"><svg xmlns="http://www.w3.org/2000/svg" version="1.1" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" width="960" height="720"><svg version="1.1" viewBox="0.0 0.0 960.0 720.0" fill="none" stroke="none" stroke-linecap="square" stroke-miterlimit="10" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://www.w3.org/2000/svg"><clipPath id="p.0"><path d="m0 0l960.0 0l0 720.0l-960.0 0l0 -720.0z" clip-rule="nonzero"></path></clipPath><g clip-path="url(#p.0)"><path fill="#000000" fill-opacity="0.0" d="m0 0l960.0 0l0 720.0l-960.0 0z" fill-rule="evenodd"></path><path fill="#6247aa" d="m204.23555 492.71445l0 0c-1.2744904 -62.226807 50.16751 -120.150635 134.9291 -151.93042c84.761536 -31.779785 189.9501 -32.581757 275.90286 -2.103485c85.95276 30.478271 139.59589 87.60089 140.70264 149.82898l-275.77014 1.9543152z" fill-rule="evenodd"></path><path fill="#6247aa" d="m204.21251 344.79877l0 0c0 -62.897003 53.998947 -113.88512 120.61006 -113.88512l0 0c31.987762 0 62.665405 11.998581 85.28418 33.356186c22.618774 21.357605 35.325867 50.324738 35.325867 80.52893l0 0c0 62.897034 -53.998962 113.88513 -120.61005 113.88513l0 0c-66.611115 0 -120.61006 -50.9881 -120.61006 -113.88513z" fill-rule="evenodd"></path><path fill="#6247aa" d="m514.5674 344.79877l0 0c0 -62.897003 53.998962 -113.88512 120.61005 -113.88512l0 0c31.987793 0 62.665405 11.998581 85.28418 33.356186c22.618774 21.357605 35.325867 50.324738 35.325867 80.52893l0 0c0 62.897034 -53.998962 113.88513 -120.61005 113.88513l0 0c-66.611084 0 -120.61005 -50.9881 -120.61005 -113.88513z" fill-rule="evenodd"></path><path fill="#ffffff" d="m239.82983 345.37222l0 0c0 -44.188538 38.017975 -80.01044 84.9155 -80.01044l0 0c22.520996 0 44.119568 8.429626 60.04431 23.43451c15.924744 15.004883 24.871185 35.355835 24.871185 56.575928l0 0c0 44.18857 -38.017975 80.01047 -84.9155 80.01047l0 0c-46.897522 0 -84.9155 -35.8219 -84.9155 -80.01047z" fill-rule="evenodd"></path><path fill="#ffffff" d="m550.26196 344.79877l0 0c0 -44.188538 38.017944 -80.01044 84.91547 -80.01044l0 0c22.520996 0 44.119568 8.429657 60.04431 23.43451c15.924744 15.004883 24.871216 35.355865 24.871216 56.575928l0 0c0 44.18857 -38.018005 80.01047 -84.91553 80.01047l0 0c-46.897522 0 -84.91547 -35.8219 -84.91547 -80.01047z" fill-rule="evenodd"></path><path fill="#81c784" d="m289.65195 361.10947l0 0c0 -26.877502 23.091125 -48.666016 51.5755 -48.666016l0 0c13.67868 0 26.79712 5.127289 36.46942 14.253937c9.672272 9.126648 15.10611 21.505035 15.10611 34.41208l0 0c0 26.877502 -23.091156 48.666016 -51.57553 48.666016l0 0c-28.484375 0 -51.5755 -21.788513 -51.5755 -48.666016z" fill-rule="evenodd"></path><path fill="#81c784" d="m567.6333 361.10947l0 0c0 -26.877502 23.091125 -48.666016 51.5755 -48.666016l0 0c13.678711 0 26.79712 5.127289 36.46942 14.253937c9.672302 9.126648 15.106079 21.505035 15.106079 34.41208l0 0c0 26.877502 -23.091125 48.666016 -51.5755 48.666016l0 0c-28.484375 0 -51.5755 -21.788513 -51.5755 -48.666016z" fill-rule="evenodd"></path><path fill="#000000" fill-opacity="0.0" d="m568.3461 448.90897l0 0c-56.081726 26.043701 -123.70181 25.791382 -182.02054 -0.6791992l84.1026 -161.81738z" fill-rule="evenodd"></path><path fill="#000000" fill-opacity="0.0" d="m568.3461 448.90897l0 0c-56.081726 26.043701 -123.70181 25.791382 -182.02054 -0.6791992" fill-rule="evenodd"></path><path stroke="#81c784" stroke-width="24.0" stroke-linejoin="round" stroke-linecap="butt" d="m568.3461 448.90897l0 0c-56.081726 26.043701 -123.70181 25.791382 -182.02054 -0.6791992" fill-rule="evenodd"></path></g></svg></svg></g></svg>
'''
'''--- src/assets/icon_wht_nm.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 144 144"><defs><style>.cls-1{fill:#fff;}</style></defs><path class="cls-1" d="M115.58,7.31,85.48,52a3.2,3.2,0,0,0,4.75,4.2l29.63-25.68a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L30.18,5.43A15.35,15.35,0,0,0,18.47,0H15.34A15.34,15.34,0,0,0,0,15.34V128.66A15.34,15.34,0,0,0,15.34,144h0a15.35,15.35,0,0,0,13.08-7.31L58.52,92a3.2,3.2,0,0,0-4.75-4.2L24.14,113.48a1.2,1.2,0,0,1-2-.91V32.11a1.2,1.2,0,0,1,2.12-.77l89.55,107.23A15.35,15.35,0,0,0,125.53,144h3.13A15.34,15.34,0,0,0,144,128.66V15.34A15.34,15.34,0,0,0,128.66,0h0A15.35,15.35,0,0,0,115.58,7.31Z"/></svg>
'''
'''--- src/assets/near_icon_nm.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 144 144"><path d="M115.58,7.31,85.48,52a3.2,3.2,0,0,0,4.75,4.2l29.63-25.68a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L30.18,5.43A15.35,15.35,0,0,0,18.47,0H15.34A15.34,15.34,0,0,0,0,15.34V128.66A15.34,15.34,0,0,0,15.34,144h0a15.35,15.35,0,0,0,13.08-7.31L58.52,92a3.2,3.2,0,0,0-4.75-4.2L24.14,113.48a1.2,1.2,0,0,1-2-.91V32.11a1.2,1.2,0,0,1,2.12-.77l89.55,107.23A15.35,15.35,0,0,0,125.53,144h3.13A15.34,15.34,0,0,0,144,128.66V15.34A15.34,15.34,0,0,0,128.66,0h0A15.35,15.35,0,0,0,115.58,7.31Z"/></svg>
'''
'''--- src/assets/nohosting.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="829.13137" height="587.67633" viewBox="0 0 829.13137 587.67633" xmlns:xlink="http://www.w3.org/1999/xlink"><polygon points="85.757 572.858 99.518 572.857 106.065 519.775 85.754 519.776 85.757 572.858" fill="#ffb6b6"/><path d="M270.70638,743.3758l42.31934-.00159v-.5352a16.47278,16.47278,0,0,0-16.47186-16.47161h-.001l-7.73017-5.86451-14.42279,5.86541-3.6942.00012Z" transform="translate(-185.43432 -156.16183)" fill="#2f2e41"/><polygon points="107.98 508.635 118.814 517.121 156.702 479.371 140.712 466.846 107.98 508.635" fill="#ffb6b6"/><path d="M284.17936,675.79953l33.31553,26.096.33005-.42131a16.47278,16.47278,0,0,0-2.80933-23.12453l-.0008-.00063-2.46884-9.38365L297.575,664.68859l-2.90822-2.278Z" transform="translate(-185.43432 -156.16183)" fill="#2f2e41"/><path d="M358.205,422.93653s18.2647,18.94117,10.147,62.91176l6.815,75.288,1.75885,3.4852a11.05057,11.05057,0,0,1-2.05152,12.7927l0,0-1.44882,4.49294-1.35294,8.79411-50.39706,75.76471-19.27941-20.29412,31.11765-71.02941L325.0579,556.8777l-19.61765-63.58823L291.91084,609.64241l2.70588,100.11765h-25.895L252.67554,598.14241,235.76378,441.20123l8.79678-18.2647Z" transform="translate(-185.43432 -156.16183)" fill="#2f2e41"/><path d="M239.9813,455.48237l-.18455-.25887c-9.85645-13.79924,4.96766-46.95846,7.20349-51.76534h0a12.068,12.068,0,0,1-8.26034-12.88863l.96382-8.193,1.00466-8.03624-7.19742-7.19743-.02023-.17949-4.142-36.24246-6.02235-24.07187a52.84836,52.84836,0,0,1,15.00007-51.21624l13.92059-2.21044,16.91786-16.30057h27.282l9.35438,8.93736c17.46254,3.06264,20.46254,2.06264,35.46254,20.06264l-6.81593,55.96246-1.70034,7.69872.00506,10.442,4.3228,4.80417a14.9496,14.9496,0,0,1,3.54622,12.93155l-.56848,2.84229h0c4.45834,1.91063,8.7126,35.86551,9.729,40.60831l1.51828,7.08466c1.29892,1.714,9.87263,13.146,9.87263,16.27119,0,.46921-.34634.92275-1.0896,1.4259-5.84288,3.95643-29.1375,32.0225-43.43072,26.303-15.22507-6.0876-75.74715,3.04481-76.35692,3.13784Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><path d="M236.3159,390.40721s7.006-39.59457-.05212-54.48539l-28,2,4.2612,56.48653,24.47719,62.71748a11.15409,11.15409,0,1,0,18.07814-6.46292Z" transform="translate(-185.43432 -156.16183)" fill="#ffb6b6"/><path d="M208.26378,314.92182l1.73291-18.87121a54.10668,54.10668,0,0,1,19.40277-36.75185l0,0a23.68674,23.68674,0,0,1,24.78746-3.27207h0a23.63086,23.63086,0,0,1,12.2047,29.86636c-6.47152,16.97245-4.13467,34.92127-16.75349,37.10949l1.37095,6.52243-12.40737,40.49039-35.338-4.09353Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><path d="M394.64075,371.64072s-20.50947-34.58577-35.571-41.27186L339.147,350.14467l40.06691,40.04408,59.45621,31.5844a11.15409,11.15409,0,1,0,9.49054-16.68887Z" transform="translate(-185.43432 -156.16183)" fill="#ffb6b6"/><path d="M324.148,332.70817l-10.99271-15.43651a54.1067,54.1067,0,0,1-9.25751-40.515l0,0a23.68675,23.68675,0,0,1,16.65778-18.6452h0a23.63089,23.63089,0,0,1,28.72919,14.68292c6.16209,17.08723,28.63861,45.17047,20.49917,55.05846l5.29279,4.05067,7.99879,22.78731L353.616,374.63235Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><circle cx="95.53081" cy="42.58672" r="30.29866" fill="#ffb6b6"/><path d="M258.97664,220.10456c-.26447-.23195-.51409-.47962-.77257-.718-.00927.02445-.01069.04951-.02056.07389Z" transform="translate(-185.43432 -156.16183)" fill="#2f2e41"/><path d="M305.79474,166.7531a17.18191,17.18191,0,0,0-6.06724-5.84973,25.38007,25.38007,0,0,0-5.30373-1.8792l-4.795-1.30828a38.01279,38.01279,0,0,0-7.54406-1.519,19.41849,19.41849,0,0,0-17.73713,9.62263c-1.44868,2.56955-2.61073,5.77154-5.40672,6.71164-2.2545.75806-4.71428-.31122-7.08371-.10378a8.52953,8.52953,0,0,0-6.47573,4.77,18.38025,18.38025,0,0,0-1.6989,8.14123,45.619,45.619,0,0,0,14.52158,34.048c.782-2.0613-.506-4.28678-1.52419-6.25861-1.03025-1.99521-1.66692-4.77683.05858-6.21382,1.92-1.599,4.99614-.04843,7.26683-1.09117a5.07328,5.07328,0,0,0,2.5361-4.0766c.21979-1.65672-.00968-3.34077.09431-5.00877a12.54224,12.54224,0,0,1,13.41165-11.73009c5.16845.36919,10.18434,3.90094,15.15812,2.448,2.33471-.682,4.326-2.41847,6.74066-2.71055,2.6742-.32351,5.18987,1.1857,7.46056,2.63484A26.59618,26.59618,0,0,0,305.79474,166.7531Z" transform="translate(-185.43432 -156.16183)" fill="#2f2e41"/><path d="M410.83368,726.35315l-7.71-12.39-1.54,7.08008c-.27,1.24-.54,2.5-.79,3.75-2.19-1.87011-4.52-3.60009-6.79981-5.26q-10.5-7.62012-20.99023-15.26l2.18994,12.69995c1.3501,7.82007,2.76025,15.80005,6.1001,22.95.37011.81005.77,1.6101,1.20019,2.39013h32.54a10.48736,10.48736,0,0,0,.54-2.24011.77479.77479,0,0,0,.00976-.15C416.09394,735.07312,413.41376,730.50317,410.83368,726.35315Z" transform="translate(-185.43432 -156.16183)" fill="#f0f0f0"/><path d="M974.91649,712.97217l-13.98493-22.474-2.79345,12.8424c-.48978,2.24919-.97956,4.53469-1.433,6.802-3.97229-3.39217-8.19877-6.53014-12.334-9.541q-19.04573-13.822-38.07373-27.6798l3.97229,23.03617c2.44891,14.18465,5.00676,28.65936,11.06483,41.62841.67135,1.46935,1.39672,2.92054,2.177,4.33542h59.02367a19.0236,19.0236,0,0,0,.97957-4.06329,1.40483,1.40483,0,0,0,.01771-.27213C984.458,728.78914,979.59644,720.49981,974.91649,712.97217Z" transform="translate(-185.43432 -156.16183)" fill="#f0f0f0"/><path d="M1013.375,743.53083l-826.75.30734a1.19069,1.19069,0,0,1,0-2.38137l826.75-.30734a1.19069,1.19069,0,0,1,0,2.38137Z" transform="translate(-185.43432 -156.16183)" fill="#cacaca"/><path d="M444.83223,394.45926V681.48318A13.80575,13.80575,0,0,0,458.627,695.278h425.34a13.80568,13.80568,0,0,0,13.79481-13.79481V394.45926A13.81238,13.81238,0,0,0,883.967,380.6797H458.627A13.81244,13.81244,0,0,0,444.83223,394.45926Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><path d="M454.8105,398.03051v279.912a7.38533,7.38533,0,0,0,7.37255,7.37255H880.42634a7.38528,7.38528,0,0,0,7.37256-7.37255v-279.912a7.38861,7.38861,0,0,0-7.37256-7.3879H462.18305A7.38866,7.38866,0,0,0,454.8105,398.03051Z" transform="translate(-185.43432 -156.16183)" fill="#fff"/><path d="M435.93667,737.4605a8.27165,8.27165,0,0,0,6.5087,3.114h455.4391a8.3806,8.3806,0,0,0,8.19191-10.0996l-7.06983-33.58132a8.39574,8.39574,0,0,0-5.21812-6.088,8.12058,8.12058,0,0,0-2.97378-.561H449.48711a8.11987,8.11987,0,0,0-2.97378.561,8.395,8.395,0,0,0-5.21812,6.088l-7.06983,33.58132A8.37419,8.37419,0,0,0,435.93667,737.4605Z" transform="translate(-185.43432 -156.16183)" fill="#2f2e41"/><rect x="873.55259" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1575.69819 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="845.49795" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1519.58891 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="817.44331" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1463.47963 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="789.38867" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1407.37035 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="761.33403" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1351.26107 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="733.27939" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1295.15179 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="705.22475" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1239.04251 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="677.17011" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1182.93323 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="649.11547" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1126.82395 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="621.06083" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1070.71467 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="593.00619" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1014.60539 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="564.95155" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(958.49611 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="536.89691" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(902.38683 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="508.84227" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(846.27755 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="480.78763" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(790.16827 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="452.733" y="696.29254" width="14.02732" height="8.41639" rx="0.48819" transform="translate(734.05899 1244.83964) rotate(-180)" fill="#3f3d56"/><rect x="873.8841" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1576.3612 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="845.82946" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1520.25192 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="817.77482" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1464.14264 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="789.72018" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1408.03336 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="761.66554" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1351.92408 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="733.6109" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1295.8148 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="705.55626" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1239.70552 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="677.50162" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1183.59624 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="649.44698" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1127.48696 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="621.39234" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1071.37768 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="593.3377" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(1015.2684 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="565.28306" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(959.15912 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="537.22842" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(903.04984 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="509.17378" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(846.94056 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="481.11914" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(790.83128 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="453.0645" y="710.31986" width="14.02732" height="8.41639" rx="0.48819" transform="translate(734.722 1272.89428) rotate(-180)" fill="#3f3d56"/><rect x="610.03059" y="727.15265" width="112.21856" height="8.41639" rx="0.48819" transform="translate(1146.84542 1306.55985) rotate(-180)" fill="#3f3d56"/><path d="M766.58472,560.20185a94.6422,94.6422,0,1,1-5.992-33.32682c.20638.55577.4076,1.11153.60338,1.67265v.0053q1.31022,3.7,2.30795,7.5377A95.28577,95.28577,0,0,1,766.58472,560.20185Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><path d="M660.88028,495.91758a31.96838,31.96838,0,0,0-28.06515-1.14823c-3.924,1.70774-8.05585,4.77121-9.36488,10.30328,5.2943-3.1245,12.14765,1.8122,13.51,9.73171l-.318.08768c-.71955,5.48535.88676,11.45743,3.99663,14.85876a10.45064,10.45064,0,0,1,5.01624-7.43955c2.28491-1.502,4.81264-2.59313,6.55662-5.17495,2.06752-3.06077,2.59254-7.53407,3.41388-11.6148S658.00521,497.05467,660.88028,495.91758Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M631.24471,542.59621c-1.46627,2.202-3.42477,3.5836-5.18213,5.30394a11.92961,11.92961,0,0,0-3.76885,7.04539c-.22235,1.91619.12173,3.8641.07405,5.80154-.04756,1.93731-.6934,4.11816-2.01143,4.59988-2.08031.75161-3.66831-3.11249-5.80678-3.38245-1.6992-.21175-3.22892,2.46141-2.73667,4.77989s2.80549,3.34536,4.13412,1.83148c1.2016,2.01672.35461,5.6745-1.45037,6.29378-.19061,1.27041-.3811,2.53553-.56642,3.80588-4.56285-3.1919-9.17333-6.43665-13.05332-11.11071a33.725,33.725,0,0,1-7.68593-18.16669c-.50284-5.37275.24347-11.51831-2.22317-15.65237-1.97447-3.30833-5.36222-4.03888-8.41119-3.83237-.55576.037-1.11682.10055-1.67264.16936a94.237,94.237,0,0,1,6.82305-15.61534,6.68485,6.68485,0,0,0,1.70974-1.064c2.83728-2.40843,4.0971-7.28364,6.39968-10.65549q.22235-.32556.46052-.63517c2.35557-3.07546,5.51038-4.65816,8.55935-6.12973,6.749-3.27654,13.69379-6.59547,20.81866-6.14025l-2.02732.19585q-3.54916,9.9409-7.10368,19.8818-.54,1.52442-1.0904,3.05426c-1.34452,3.76879-2.73138,7.78118-2.52493,12,.12174,2.49844.98979,5.1663,2.64137,6.02382,1.54032.794,3.22362-.18,4.711-1.14338.62994-.4023,1.25458-.8046,1.88446-1.21219,2.26026-1.45567,4.764-2.94836,7.1513-1.97441,2.18615.88931,3.80058,3.85886,4.10763,7.06136A14.11737,14.11737,0,0,1,631.24471,542.59621Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M644.68757,587.84212q-9.90194-6.09673-19.80393-12.19347l.112-.28861c-4.10438,1.56328-5.8084,8.85905-5.13009,14.82542s2.9783,11.3,4.1402,17.11348a45.42467,45.42467,0,0,1-1.71258,23.83542A195.2048,195.2048,0,0,0,645.224,599.53648a16.905,16.905,0,0,0,2.07422-4.59929,7.31677,7.31677,0,0,0-.485-5.204A5.7936,5.7936,0,0,0,644.68757,587.84212Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M618.63446,513.89674a7.29941,7.29941,0,0,0-.33454,5.30833,5.884,5.884,0,0,0,3.28744,3.04476l3.64753,1.808c1.21347.60148,2.52141,1.209,3.75845.71411,1.492-.59688,2.52651-2.936,2.2589-5.10748-.28483-2.31078-1.74138-3.90028-3.08848-5.25387q-2.82776-2.84131-5.65549-5.68264l-1.06243,1.30127A14.18913,14.18913,0,0,0,618.63446,513.89674Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M747.03111,538.59972q2.46148.5796,4.92283,1.15921c-.28586,5.54217-3.03307,10.67144-6.71721,12.52935-1.53508.77287-3.24482,1.05866-4.51523,2.5038-1.14861,1.31273-1.73093,3.35589-2.26556,5.30916q-1.40541,5.11341-2.8108,10.2267c-1.00568,3.67361-2.29722,7.75481-4.91216,9.07815-2.24437,1.138-4.81163-.25414-6.53726-2.58852-1.72563-2.33431-2.779-5.47329-3.80064-8.53279.06352,3.33477-1.48739,6.60607-3.68414,7.76528-2.20205,1.15921-4.88051.11114-6.352-2.47724-1.05867-1.858-1.498-4.30885-2.53553-6.19324-1.03747-1.88439-3.213-2.96426-4.34581-1.1963-.74638,1.17517-.65113,2.97485-1.02164,4.46761a4.85129,4.85129,0,0,1-4.05465,3.90118,6.7615,6.7615,0,0,1-4.854-2.21794,21.98809,21.98809,0,0,1-6.02912-12.15877,14.50451,14.50451,0,0,1,.16943-6.64846c.65107-2.059,2.22317-3.647,3.78468-3.25535,1.02694-2.17032-1.00038-5.04986-2.82662-4.79579-1.83154.25407-3.266,2.21787-4.7693,3.72652-1.498,1.50859-3.59413,2.60428-5.10279,1.10629a2.0699,2.0699,0,0,1-2.10143,2.19675,7.50624,7.50624,0,0,1-2.73662-1.45037c-3.45656-2.15442-7.84476-.72518-10.30087,3.35066,1.53508-6.532,3.78475-14.02734,8.50106-15.56242,1.92685-.62987,4.02829-.11114,5.84916-1.2016,3.22369-1.932,3.87476-9.23154,1.09046-12.24342.35461,2.84776.28586,6.172-1.21749,8.12-1.50329,1.948-4.65816.6775-4.46755-2.202a1.92912,1.92912,0,0,1-3.58889.7622c-1.00045-1.52441-.91574-4.01755-.20645-5.83849a13.75243,13.75243,0,0,1,3.086-4.3829c2.51433-2.69429,5.06576-5.42037,7.97709-7.11428,2.91663-1.69384,6.28319-2.2655,9.20505-.58219,1.54045.88925,2.89551,2.37141,4.46761,3.15481a3.31073,3.31073,0,0,0,4.61054-1.154c1.16981-2.05381.61928-5.10278,1.05337-7.67.7781-4.53636,5.31446-6.659,7.8288-3.663-1.8791-.48165-3.82177,1.74152-4.05471,4.43588-.23818,2.69429,1.12224,5.41507,2.94312,6.23026,3.05956,1.35506,6.05555-2.05388,8.36879-5.20868q3.62059-4.95456,7.25185-9.90381a11.96908,11.96908,0,0,1,1.29684-1.57741,4.1729,4.1729,0,0,1,5.70093-.11643c2.44552,1.99553,3.5942,6.08733,5.60039,8.90336,2.91133,4.09173,7.26774,5.08688,11.32239,5.88088q4.5337.88134,9.07285,1.77326a94.00511,94.00511,0,0,1,5.26684,11.6295A31.8751,31.8751,0,0,0,747.03111,538.59972Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M763.504,536.09068a19.07933,19.07933,0,0,0-1.00574,5.66914c-2.59375-3.1654-3.00665-9.09921-1.30221-13.20684Q762.5063,532.253,763.504,536.09068Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M756.80265,602.28916a94.89528,94.89528,0,0,1-7.88708,13.19625c-1.90559-.81519-3.95411.64047-5.738,2.00619-1.86326,1.42918-4.10233,2.82133-6.01322,1.51919-1.95321-1.33393-2.58315-5.06569-1.9638-8.02471a21.38162,21.38162,0,0,1,3.66294-7.53771c1.588-2.3714,3.28714-4.83282,5.49449-5.75385,2.21264-.921,5.05509.3811,5.70093,3.52538l1.56681-.053c-.87872-1.20683-.41813-3.70533.76227-4.14466,1.36036-.51343,2.54083,1.35507,3.34536,3.00665C756.09336,600.77521,756.45857,601.52689,756.80265,602.28916Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M696.7944,579.93054c-3.36779.21179-6.03544-3.93417-7.80812-8.0128s-3.39014-8.74292-6.42892-10.81895c-1.73631-1.18627-3.71587-1.349-5.59921-1.92387a6.933,6.933,0,0,1-4.755-4.18646l-2.13634-.863a32.08362,32.08362,0,0,0-8.11107,5.78345,18.12816,18.12816,0,0,0-4.8331,10.56615c-.4081,4.27615,1.09886,9.04425,3.91466,10.65059,2.22491,1.26929,4.81533.46924,7.069,1.63125,2.81577,1.45174,4.48747,5.669,5.1203,9.833s.47244,8.49135.92518,12.70259,1.70052,8.59321,4.2828,10.7513c3.23141,2.7006,7.973.45652,9.4228-4.45951.71115-2.4114.68665-5.13239,1.21854-7.63552.93666-4.40816,3.46423-7.67863,5.46895-11.29463S698.12771,584.127,696.7944,579.93054Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M663.51554,536.6144a8.98853,8.98853,0,0,1,.877.931,3.05876,3.05876,0,0,1-.05384,3.15866,2.93857,2.93857,0,0,0,2.10446-1.06958,13.52846,13.52846,0,0,0,1.61352-2.27287,2.47728,2.47728,0,0,0,.47574-1.98266c-.15909-.45405-.53532-.64773-.79908-.98921a6.722,6.722,0,0,1-.73806-2.14373,3.86638,3.86638,0,0,0-2.802-2.95294l.16878.0323a1.60089,1.60089,0,0,0-.74986,1.70532c.10224.66055.5267,1.20894.48446,1.88263-.0607.96873-1.02885,1.42333-1.08866,2.39219A1.84937,1.84937,0,0,0,663.51554,536.6144Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M657.7454,520.152l.015-.00292a2.69667,2.69667,0,0,0,.28733-.30608Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M658.75542,524.69918a2.937,2.937,0,0,0,.91427-2.91143c-.24465-1.10152-1.11053-1.84212-1.90925-1.63868a1.946,1.946,0,0,1-1.80937.53269c-.49379-.12712-1.03591-.4545-1.46415-.08247a2.2167,2.2167,0,0,0-.49873.97379q-.23776.72994-.47557,1.45973a.92111.92111,0,0,0-.05619.55318.46863.46863,0,0,0,.35936.28569q1.42664.42059,2.85323.84114A2.45818,2.45818,0,0,0,658.75542,524.69918Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M730.55513,587.47761q-.65947-1.07964-1.31891-2.15937a7.2143,7.2143,0,0,0-1.738-2.18223,1.54,1.54,0,0,0-2.19239.21963l.05355.41113a9.28528,9.28528,0,0,1,2.3165,4.51983c.10024.73559.06535,1.4969.15325,2.23569a2.60718,2.60718,0,0,0,.81454,1.82346c.69226.46249,1.50513-.21941,1.99783-1.05147a3.62028,3.62028,0,0,0,.56094-2.30457A4.04118,4.04118,0,0,0,730.55513,587.47761Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M737.45184,588.41432a4.98377,4.98377,0,0,0-.16092-2.00962,4.41143,4.41143,0,0,1,.67132-2.501,8.13046,8.13046,0,0,0,1.046-2.29325,1.91833,1.91833,0,0,0-.05019-1.12305c-.14552-.32692-.498-.476-.70018-.21717l.43267.27866a3.94014,3.94014,0,0,0-1.75588.085,2.17318,2.17318,0,0,0-1.33077,1.50014,9.28173,9.28173,0,0,1-.349,1.55644c-.25809.5305-.75768.70694-1.07163,1.17258a2.80356,2.80356,0,0,0,.04415,2.66342,3.10885,3.10885,0,0,0,1.75851,1.38287C736.51435,589.099,737.21011,589.109,737.45184,588.41432Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M749.73357,592.11986a6.0421,6.0421,0,0,0,.761,1.39674c.588.59227,1.38709.2283,2.10042.08434a3.63157,3.63157,0,0,1,3.45473,1.3857,8.79343,8.79343,0,0,0-5.05745-6.30967,14.8567,14.8567,0,0,0-5.20124-.81336l-.30206.07741C746.25867,590.18154,748.67563,590.13141,749.73357,592.11986Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M697.7157,596.7025l.00442.00976.08787-.16923Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M695.85249,600.30892a16.55493,16.55493,0,0,0-1.0453,2.29622,19.98625,19.98625,0,0,0-.75759,3.929c-.09463.75721-.12381,1.7243.35057,2.09328a.67292.67292,0,0,0,.88032-.11956,3.4822,3.4822,0,0,0,.63816-.94856,21.85209,21.85209,0,0,0,2.15429-5.113,8.89727,8.89727,0,0,0-.35282-5.734Q696.78636,598.51061,695.85249,600.30892Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M677.87809,504.22651a2.12122,2.12122,0,0,0,2.2861.44616,7.54833,7.54833,0,0,0,2.151-1.42082,5.06056,5.06056,0,0,0,1.30394-1.42246,2.88489,2.88489,0,0,0,.26674-2.19764,2.23225,2.23225,0,0,0-1.70142-1.34588q-1.58349-.46959-3.167-.93912l.76365-.68829c-.78568-.42167-1.65489.36091-2.146,1.32977a7.15885,7.15885,0,0,0-.65144,2.00533A5.14759,5.14759,0,0,0,677.87809,504.22651Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M696.51576,497.96967a1.74391,1.74391,0,0,0,2.37685.19336,2.657,2.657,0,0,0,1.05124-1.89349c.07472-.83037-.33586-1.7533-.92226-1.825l.13421-.77746c-1.12961-.204-2.51965-.24486-3.125,1.12692A3.22068,3.22068,0,0,0,696.51576,497.96967Z" transform="translate(-185.43432 -156.16183)" fill="#81c784"/><path d="M864.96638,441.31617H477.643a1.01559,1.01559,0,0,1,0-2.03069H864.96638a1.01559,1.01559,0,0,1,0,2.03069Z" transform="translate(-185.43432 -156.16183)" fill="#cacaca"/><ellipse cx="314.5638" cy="259.77067" rx="10.92534" ry="11.16881" fill="#3f3d56"/><ellipse cx="352.30587" cy="259.77067" rx="10.92534" ry="11.16881" fill="#3f3d56"/><ellipse cx="390.04794" cy="259.77067" rx="10.92534" ry="11.16881" fill="#3f3d56"/><path d="M842.34936,407.532h-26.81a2.0304,2.0304,0,0,0,0,4.06h26.81a2.0304,2.0304,0,0,0,0-4.06Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><path d="M842.34936,415.152h-26.81a2.0304,2.0304,0,0,0,0,4.06h26.81a2.0304,2.0304,0,0,0,0-4.06Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><path d="M842.34936,422.762h-26.81a2.0304,2.0304,0,0,0,0,4.06h26.81a2.0304,2.0304,0,0,0,0-4.06Z" transform="translate(-185.43432 -156.16183)" fill="#3f3d56"/><g opacity="0.35"><path d="M875.22825,564.89606c6.234-2.71811-6.4085-4.30042-20.752-4.82066s-31.695-.49146-40.86127-1.97121c-8.86513-1.43113-8.21194-3.97577-8.95766-6.2813s-4.15383-4.66951-17.98695-5.182c-17.23785-.63864-45.6641,1.81965-58.67678.34379-12.14326-1.37725-4.925-5.6974-22.632-5.86274-10.11121-.09442-23.13723,1.32986-34.388,1.67358a125.35792,125.35792,0,0,1-23.86052-1.244c-5.48377-.89845-9.30325-2.03749-15.475-2.83107-16.20333-2.08349-47.90478-1.38316-76.19949,1.28712s-52.54848,7.04636-66.22683,11.38066S471.7544,559.99,474.94061,563.60875c2.03457,2.31081,7.241,4.47154,19.87043,5.4001,23.62257,1.73681,65.68047-1.25272,90.09036.32746,13.60468.8807,19.64029,3.06422,31.577,4.259,12.824,1.28361,31.59716,1.35165,50.04182,1.3212,38.4041-.06341,77.7905-.458,117.95262-1.18157,16.775-.30225,34.35193-.69519,52.202-2.13554s36.05643-4.21941,39.82235-6.82467" transform="translate(-185.43432 -156.16183)" fill="#fff"/></g></svg>
'''
'''--- src/assets/nostorage.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="865.67004" height="576.44344" viewBox="0 0 865.67004 576.44344" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M716.98158,481.91549a11.79841,11.79841,0,0,0,9.17288-13.77266,11.5925,11.5925,0,0,0-.56729-1.96845l31.47108-27.12907-20.57508-5.82065-26.73111,26.65459a11.84062,11.84062,0,0,0-5.66184,15.631,11.52872,11.52872,0,0,0,12.89128,6.40523Z" transform="translate(-167.16498 -161.77828)" fill="#ffb6b6"/><path d="M921.34506,674.30605l1.14386-25.71947a83.066,83.066,0,0,1,38.74474-9.80778c-18.60844,15.21376-16.28294,44.54069-28.899,64.99961a49.96435,49.96435,0,0,1-36.63939,23.08922L880.123,736.402a83.72449,83.72449,0,0,1,17.647-67.84511A80.87311,80.87311,0,0,1,912.633,654.74678C916.36256,664.58091,921.34506,674.30605,921.34506,674.30605Z" transform="translate(-167.16498 -161.77828)" fill="#f2f2f2"/><polygon points="714.057 561.388 699.956 561.387 693.248 507 714.059 507.001 714.057 561.388" fill="#ffb6b6"/><path d="M884.81747,736.83421l-45.46566-.00168v-.57507a17.69746,17.69746,0,0,1,17.69651-17.69622h.00112l8.3049-6.30054,15.4951,6.3015,3.96888.00016Z" transform="translate(-167.16498 -161.77828)" fill="#2f2e41"/><polygon points="648.548 561.388 634.448 561.387 627.74 507 648.551 507.001 648.548 561.388" fill="#ffb6b6"/><path d="M819.30945,736.83421l-45.46566-.00168v-.57507a17.69744,17.69744,0,0,1,17.6965-17.69622h.00112l8.30491-6.30054,15.4951,6.3015,3.96887.00016Z" transform="translate(-167.16498 -161.77828)" fill="#2f2e41"/><path d="M809.61006,425.82623l91.71538,2.29289c17.41873,9.461,17.68323,29.93793,11.97593,54.24993,0,0,1.92669,14.45029-1.92672,18.3037s-5.78012,3.85342-3.85342,10.59689-8.253,17.75756-7.01655,18.994,4.12649,7.9799,4.12649,7.9799l-9.63353,54.91114s-6.74347,95.372-8.67018,97.29868-3.85341,0-1.92671,4.81677,3.85342,2.89006,1.92671,4.81677a70.94945,70.94945,0,0,0-4.81677,5.78012H858.21954s-1.756-9.63354-1.756-10.59689-1.92671-6.74347-1.92671-7.70683,1.70294-2.66628,1.70294-2.66628a31.6937,31.6937,0,0,0,1.18712-6.00389c0-1.92671,5.78012-76.10492,5.78012-76.10492l-11.56024-96.33533L823.7095,600.8615s0,82.84838-1.92671,84.77509-1.92671.96335-.96335,4.81676,4.81676,2.89006,1.9267,5.78012-3.85341-1.9267-2.89006,2.89006l.96336,4.81677-28.9006.41341s-3.85342-8.12024-1.92671-11.0103,1.8111-2.10117-.53948-6.8307-3.31393-5.69289-2.35058-6.65624.96335-6.08733.96335-6.08733l4.81677-92.17471s.96335-97.29868.96335-100.18874a9.60908,9.60908,0,0,0-.80026-4.3339v-3.92288l3.69032-13.90035Z" transform="translate(-167.16498 -161.77828)" fill="#2f2e41"/><path d="M715.92132,450.62325l15.5,12.5,84.5-65.5-5-114h0a46.03861,46.03861,0,0,0-17.02258,31.10257l-14.47736,64.39743Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M795.92132,454.62325c29.91065,3.82254,57.46869-7.75858,83.50018-16.5,11.75165-3.9462,23.59021.17343,34.49988-6.5-4.71759-46.46695-.1372-98.808,9.88373-154.58624a13.21728,13.21728,0,0,0-8.98633-14.94638l-32.29116-9.2644-9.94172-10.96751L846.909,248.3769l-8.98765,16.24635-30.88769,20.87009a11.29194,11.29194,0,0,0-4.80756,11.28048A370.22031,370.22031,0,0,1,795.92132,454.62325Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M891.38192,469.005a11.79841,11.79841,0,0,0,5.06679-15.75295,11.5916,11.5916,0,0,0-1.08288-1.739l22.87441-34.68684-21.38255.01435-18.44377,32.937a11.84063,11.84063,0,0,0-1.18191,16.58276,11.52872,11.52872,0,0,0,14.14984,2.64466Z" transform="translate(-167.16498 -161.77828)" fill="#ffb6b6"/><path d="M884.92132,436.62325l14,18,49-73-4.23791-74.16342a56.0961,56.0961,0,0,0-28.76209-45.83655h0l1,114Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><circle cx="682.57563" cy="44.50177" r="31.33548" fill="#ffb6b6"/><path d="M829.77509,187.89a14.80718,14.80718,0,0,1,3.593.47152,51.13867,51.13867,0,0,0,7.03333,1.1794,32.59027,32.59027,0,0,1,29.18165,27.64337c1.82081-1.58751,5.96412-4.50771,9.36014-1.79372h0c.0517.04308.08187.06524.20128.00861,2.2554-1.06983,6.259-14.239,6.38024-25.83425.064-6.15432-.90487-14.01312-5.88225-16.50181l-.26223-.13112-.06894-.285c-.3324-1.38438-4.04789-3.7475-10.50507-5.58678-11.735-3.34247-29.22732-9.85366-39.07744-.27131-.74544,3.23044-3.17061,10.14359-5.62052,10.92719-2.71275.86732-5.05555,1.61583-5.42489,4.94353a101.999,101.999,0,0,0,.0671,14.21933,14.52178,14.52178,0,0,1,5.159-7.24693A10.22518,10.22518,0,0,1,829.77509,187.89Z" transform="translate(-167.16498 -161.77828)" fill="#2f2e41"/><path d="M1032.835,737.03172a1.18647,1.18647,0,0,1-1.19006,1.19H168.355a1.19,1.19,0,0,1,0-2.38h863.29A1.18651,1.18651,0,0,1,1032.835,737.03172Z" transform="translate(-167.16498 -161.77828)" fill="#ccc"/><path d="M524.442,262.90072,406.8168,289.36394a12.20139,12.20139,0,0,0-9.215,14.56508l32.25406,143.36459,138.20269-31.09275a6.05643,6.05643,0,0,0,2.99313-1.65173L539.00708,272.11575A12.20141,12.20141,0,0,0,524.442,262.90072Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M481.71486,282.64153l-64.46158,14.50252a11.11125,11.11125,0,0,0-8.39446,13.26082l30.325,134.79013,122.744-27.61485-22.08437-98.16179A48.695,48.695,0,0,0,481.71486,282.64153Z" transform="translate(-167.16498 -161.77828)" fill="#fff"/><path d="M538.32333,410.31393l-80.92146,18.20566a2.70338,2.70338,0,1,0,1.18675,5.2749l80.92146-18.20565a2.70339,2.70339,0,1,0-1.18675-5.27491Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M535.97648,399.88253,455.055,418.08818a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.28029Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M487.78753,399.7703l-35.07815,7.89186a2.70337,2.70337,0,1,0,1.18674,5.2749l35.07816-7.89185a2.70339,2.70339,0,1,0-1.18675-5.27491Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M528.71675,367.61405l-80.92147,18.20566a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.2803Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M526.37111,357.188l-80.92147,18.20566a2.70338,2.70338,0,1,0,1.18675,5.2749l80.92146-18.20565a2.70338,2.70338,0,1,0-1.18674-5.27491Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M478.18094,357.07042l-35.07815,7.89186a2.70614,2.70614,0,0,0,1.188,5.28029l35.07815-7.89186a2.70614,2.70614,0,1,0-1.188-5.28029Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M519.11016,324.91417l-80.92147,18.20566a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.2803Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M516.76452,314.48815l-80.92147,18.20566a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.2803Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M468.57435,314.37054,433.4962,322.2624a2.70614,2.70614,0,0,0,1.188,5.28029l35.07815-7.89186a2.70614,2.70614,0,1,0-1.188-5.28029Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M289.77873,429.24128a2.89533,2.89533,0,0,0-2.89209,2.89209V731.1807a2.89574,2.89574,0,0,0,2.89209,2.89258h374.9458a2.89537,2.89537,0,0,0,2.8916-2.89258V480.13679a2.89534,2.89534,0,0,0-2.8916-2.89258H449.5302a8.76523,8.76523,0,0,1-5.90674-2.28223l-48.37891-43.95752a6.77,6.77,0,0,0-4.5625-1.76318Z" transform="translate(-167.16498 -161.77828)" fill="#3f3d56"/><path d="M737.24238,351.02466,536.47946,264.71345a22.11557,22.11557,0,0,0-29.0187,11.56928l-105.19833,244.695,235.8847,101.41061a10.97749,10.97749,0,0,0,6.14956.76065l104.515-243.10564A22.11562,22.11562,0,0,0,737.24238,351.02466Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M653.5401,334.53467,543.51692,287.23394a20.13964,20.13964,0,0,0-26.4269,10.5284L418.18347,527.82247l209.49968,90.06727L699.71249,450.347A88.26188,88.26188,0,0,0,653.5401,334.53467Z" transform="translate(-167.16498 -161.77828)" fill="#fff"/><path d="M600.77576,582.11364l-138.117-59.3787a4.9,4.9,0,1,0-3.87063,9.00322l138.117,59.3787a4.9,4.9,0,1,0,3.87063-9.00322Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M608.43014,564.30928l-138.117-59.3787a4.905,4.905,0,0,0-3.87458,9.01242l138.117,59.3787a4.905,4.905,0,1,0,3.87459-9.01242Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M537.83508,512.87513,477.9636,487.13542a4.9,4.9,0,1,0-3.87063,9.00323l59.87148,25.73971a4.9,4.9,0,1,0,3.87063-9.00323Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M632.10815,509.23338l-138.117-59.3787a4.905,4.905,0,0,0-3.87459,9.01241l138.117,59.3787a4.905,4.905,0,1,0,3.87458-9.01241Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M639.75858,491.43822l-138.117-59.3787a4.9,4.9,0,1,0-3.87063,9.00322l138.117,59.3787a4.9,4.9,0,1,0,3.87063-9.00322Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M569.16748,439.99487,509.296,414.25516a4.905,4.905,0,0,0-3.87458,9.01242l59.87148,25.73971a4.905,4.905,0,1,0,3.87458-9.01242Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M663.44055,436.35311l-138.117-59.37869a4.905,4.905,0,0,0-3.87458,9.01241l138.117,59.3787a4.905,4.905,0,1,0,3.87458-9.01242Z" transform="translate(-167.16498 -161.77828)" fill="#81c784"/><path d="M671.091,418.558,532.974,359.17926a4.905,4.905,0,0,0-3.87459,9.01241l138.117,59.3787A4.905,4.905,0,1,0,671.091,418.558Z" transform="translate(-167.16498 -161.77828)" fill="#81c784"/><path d="M600.49987,367.11461,540.62839,341.3749a4.905,4.905,0,0,0-3.87458,9.01242L596.62529,376.127a4.905,4.905,0,1,0,3.87458-9.01242Z" transform="translate(-167.16498 -161.77828)" fill="#81c784"/><path d="M451.442,439.90072,333.8168,466.36394a12.20139,12.20139,0,0,0-9.215,14.56508l32.25406,143.36459,138.20269-31.09275a6.05643,6.05643,0,0,0,2.99313-1.65173L466.00708,449.11575A12.20141,12.20141,0,0,0,451.442,439.90072Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M408.71486,459.64153l-64.46158,14.50252a11.11125,11.11125,0,0,0-8.39446,13.26082l30.325,134.79013,122.74395-27.61485-22.08437-98.16179A48.695,48.695,0,0,0,408.71486,459.64153Z" transform="translate(-167.16498 -161.77828)" fill="#fff"/><path d="M465.32333,587.31393l-80.92146,18.20566a2.70338,2.70338,0,1,0,1.18675,5.2749l80.92146-18.20565a2.70339,2.70339,0,1,0-1.18675-5.27491Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M462.97648,576.88253,382.055,595.08818a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.28029Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M414.78753,576.7703l-35.07815,7.89186a2.70337,2.70337,0,1,0,1.18674,5.2749l35.07816-7.89185a2.70339,2.70339,0,1,0-1.18675-5.27491Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M455.71675,544.61405l-80.92147,18.20566a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.2803Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M453.37111,534.188l-80.92147,18.20566a2.70338,2.70338,0,1,0,1.18675,5.2749l80.92146-18.20565a2.70338,2.70338,0,1,0-1.18674-5.27491Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M405.18094,534.07042l-35.07815,7.89186a2.70614,2.70614,0,0,0,1.188,5.28029l35.07815-7.89186a2.70614,2.70614,0,1,0-1.188-5.28029Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M446.11016,501.91417l-80.92147,18.20566a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.2803Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M443.76452,491.48815l-80.92147,18.20566a2.70614,2.70614,0,0,0,1.188,5.28029l80.92146-18.20565a2.70614,2.70614,0,1,0-1.188-5.2803Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M395.57435,491.37054,360.4962,499.2624a2.70614,2.70614,0,0,0,1.188,5.28029l35.07815-7.89186a2.70614,2.70614,0,1,0-1.188-5.28029Z" transform="translate(-167.16498 -161.77828)" fill="#e6e6e6"/><path d="M287.29436,507.78715a2.89166,2.89166,0,0,0-2.89222,2.89117c0,.10846.089,222.82666.089,222.82666a2.89026,2.89026,0,0,0,2.874,2.56836H690.13762a2.88958,2.88958,0,0,0,2.874-2.56836L718.082,511.003a2.89272,2.89272,0,0,0-.71679-2.251,2.85868,2.85868,0,0,0-2.15625-.96484Z" transform="translate(-167.16498 -161.77828)" fill="#3f3d56"/><path d="M315.71659,520.11725a15.55483,15.55483,0,0,0-15.50879,15.374l.50293,172.60742A15.50883,15.50883,0,0,0,316.22,723.74322H571.89725A119.17426,119.17426,0,0,0,690.41043,617.83307l9.0669-80.46973a15.50838,15.50838,0,0,0-15.41162-17.24609Zm391.811,0-.0459-1h.0459Z" transform="translate(-167.16498 -161.77828)" fill="#81c784"/><path d="M427.39952,649.43435H328.3533a3.85894,3.85894,0,1,1,0-7.71789h99.04622C432.37608,641.647,432.42585,649.50444,427.39952,649.43435Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/><path d="M560.8259,669.62041H328.3533a3.85894,3.85894,0,1,1,0-7.71789H560.8259C565.80245,661.83306,565.85223,669.6905,560.8259,669.62041Z" transform="translate(-167.16498 -161.77828)" fill="#e4e4e4"/></svg>
'''
'''--- src/assets/notfound.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="1120.59226" height="777.91584" viewBox="0 0 1120.59226 777.91584" xmlns:xlink="http://www.w3.org/1999/xlink"><title>not found</title><circle cx="212.59226" cy="103" r="64" fill="#ff6584"/><path d="M563.68016,404.16381c0,151.01141-89.77389,203.73895-200.51559,203.73895S162.649,555.17522,162.649,404.16381,363.16457,61.04208,363.16457,61.04208,563.68016,253.1524,563.68016,404.16381Z" transform="translate(-39.70387 -61.04208)" fill="#f2f2f2"/><polygon points="316.156 523.761 318.21 397.378 403.674 241.024 318.532 377.552 319.455 320.725 378.357 207.605 319.699 305.687 319.699 305.687 321.359 203.481 384.433 113.423 321.621 187.409 322.658 0 316.138 248.096 316.674 237.861 252.547 139.704 315.646 257.508 309.671 371.654 309.493 368.625 235.565 265.329 309.269 379.328 308.522 393.603 308.388 393.818 308.449 394.99 293.29 684.589 313.544 684.589 315.974 535.005 389.496 421.285 316.156 523.761" fill="#3f3d56"/><path d="M1160.29613,466.01367c0,123.61-73.4842,166.77-164.13156,166.77s-164.13156-43.16-164.13156-166.77S996.16457,185.15218,996.16457,185.15218,1160.29613,342.40364,1160.29613,466.01367Z" transform="translate(-39.70387 -61.04208)" fill="#f2f2f2"/><polygon points="950.482 552.833 952.162 449.383 1022.119 321.4 952.426 433.154 953.182 386.639 1001.396 294.044 953.382 374.329 953.382 374.329 954.741 290.669 1006.369 216.952 954.954 277.514 955.804 124.11 950.467 327.188 950.906 318.811 898.414 238.464 950.064 334.893 945.173 428.327 945.027 425.847 884.514 341.294 944.844 434.608 944.232 446.293 944.123 446.469 944.173 447.428 931.764 684.478 948.343 684.478 950.332 562.037 1010.514 468.952 950.482 552.833" fill="#3f3d56"/><ellipse cx="554.59226" cy="680.47903" rx="554.59226" ry="28.03433" fill="#3f3d56"/><ellipse cx="892.44491" cy="726.79663" rx="94.98858" ry="4.80162" fill="#3f3d56"/><ellipse cx="548.71959" cy="773.11422" rx="94.98858" ry="4.80162" fill="#3f3d56"/><ellipse cx="287.94432" cy="734.27887" rx="217.01436" ry="10.96996" fill="#3f3d56"/><circle cx="97.08375" cy="566.26982" r="79" fill="#2f2e41"/><rect x="99.80546" y="689.02332" width="24" height="43" transform="translate(-31.32451 -62.31008) rotate(0.67509)" fill="#2f2e41"/><rect x="147.80213" y="689.58887" width="24" height="43" transform="translate(-31.31452 -62.87555) rotate(0.67509)" fill="#2f2e41"/><ellipse cx="119.54569" cy="732.61606" rx="7.5" ry="20" transform="translate(-654.1319 782.47948) rotate(-89.32491)" fill="#2f2e41"/><ellipse cx="167.55414" cy="732.18168" rx="7.5" ry="20" transform="translate(-606.25475 830.05533) rotate(-89.32491)" fill="#2f2e41"/><circle cx="99.31925" cy="546.29477" r="27" fill="#fff"/><circle cx="99.31925" cy="546.29477" r="9" fill="#3f3d56"/><path d="M61.02588,552.94636c-6.04185-28.64075,14.68758-57.26483,46.30049-63.93367s62.13813,11.14292,68.18,39.78367-14.97834,38.93-46.59124,45.59886S67.06774,581.58712,61.02588,552.94636Z" transform="translate(-39.70387 -61.04208)" fill="#81c784"/><path d="M257.29613,671.38411c0,55.07585-32.73985,74.3063-73.13,74.3063q-1.40351,0-2.80255-.0312c-1.87139-.04011-3.72494-.1292-5.55619-.254-36.45135-2.57979-64.77127-22.79937-64.77127-74.02113,0-53.00843,67.73872-119.89612,72.827-124.84633l.00892-.00889c.19608-.19159.29409-.28516.29409-.28516S257.29613,616.30827,257.29613,671.38411Z" transform="translate(-39.70387 -61.04208)" fill="#81c784"/><path d="M181.50168,737.26482l26.747-37.37367-26.81386,41.4773-.07125,4.29076c-1.87139-.04011-3.72494-.1292-5.55619-.254l2.88282-55.10258-.0223-.42775.049-.0802.27179-5.20415-26.88076-41.5798,26.96539,37.67668.06244,1.105,2.17874-41.63324-23.0132-42.96551,23.29391,35.6583,2.26789-86.31419.00892-.294v.28516l-.37871,68.064,22.91079-26.98321-23.00435,32.84678-.60595,37.27566L204.18523,621.958l-21.4805,41.259-.33863,20.723,31.05561-49.79149-31.17146,57.023Z" transform="translate(-39.70387 -61.04208)" fill="#3f3d56"/><circle cx="712.48505" cy="565.41532" r="79" fill="#2f2e41"/><rect x="741.77716" y="691.82355" width="24" height="43" transform="translate(-215.99457 191.86399) rotate(-17.08345)" fill="#2f2e41"/><rect x="787.6593" y="677.72286" width="24" height="43" transform="matrix(0.95588, -0.29376, 0.29376, 0.95588, -209.82788, 204.72037)" fill="#2f2e41"/><ellipse cx="767.887" cy="732.00275" rx="20" ry="7.5" transform="translate(-220.8593 196.83312) rotate(-17.08345)" fill="#2f2e41"/><ellipse cx="813.47537" cy="716.94619" rx="20" ry="7.5" transform="translate(-214.42477 209.56103) rotate(-17.08345)" fill="#2f2e41"/><circle cx="708.52153" cy="545.71023" r="27" fill="#fff"/><circle cx="708.52153" cy="545.71023" r="9" fill="#3f3d56"/><path d="M657.35526,578.74316c-14.48957-25.43323-3.47841-59.016,24.59412-75.0092s62.57592-8.34055,77.06549,17.09268-2.39072,41.6435-30.46325,57.63671S671.84483,604.17639,657.35526,578.74316Z" transform="translate(-39.70387 -61.04208)" fill="#81c784"/><path d="M611.29613,661.29875c0,50.55711-30.05368,68.20979-67.13,68.20979q-1.28835,0-2.57261-.02864c-1.71785-.03682-3.41933-.1186-5.10033-.23313-33.46068-2.36813-59.45707-20.92878-59.45707-67.948,0-48.65932,62.18106-110.05916,66.85186-114.60322l.00819-.00817c.18-.17587.27-.26177.27-.26177S611.29613,610.74164,611.29613,661.29875Z" transform="translate(-39.70387 -61.04208)" fill="#81c784"/><path d="M541.72029,721.77424l24.55253-34.30732-24.6139,38.07426-.0654,3.93872c-1.71785-.03682-3.41933-.1186-5.10033-.23313l2.6463-50.58165-.02047-.39266.045-.07361.24949-4.77718-24.67531-38.16836,24.753,34.58547.05731,1.01433,2-38.21741-21.12507-39.44039L541.80616,625.928l2.08182-79.23247.00819-.26994v.26177l-.34764,62.47962,21.031-24.76934-21.11693,30.15184-.55624,34.21735,19.63634-32.839-19.71812,37.87389-.31085,19.0228,28.50763-45.70631-28.614,52.34448Z" transform="translate(-39.70387 -61.04208)" fill="#3f3d56"/><path d="M875.29613,682.38411c0,55.07585-32.73985,74.3063-73.13,74.3063q-1.4035,0-2.80255-.0312c-1.87139-.04011-3.72494-.1292-5.55619-.254-36.45135-2.57979-64.77127-22.79937-64.77127-74.02113,0-53.00843,67.73872-119.89612,72.827-124.84633l.00892-.00889c.19608-.19159.29409-.28516.29409-.28516S875.29613,627.30827,875.29613,682.38411Z" transform="translate(-39.70387 -61.04208)" fill="#81c784"/><path d="M799.50168,748.26482l26.747-37.37367-26.81386,41.4773-.07125,4.29076c-1.87139-.04011-3.72494-.1292-5.55619-.254l2.88282-55.10258-.0223-.42775.049-.0802.27179-5.20415L770.108,654.01076l26.96539,37.67668.06244,1.105,2.17874-41.63324-23.0132-42.96551,23.29391,35.6583,2.26789-86.31419.00892-.294v.28516l-.37871,68.064,22.91079-26.98321-23.00435,32.84678-.606,37.27566L822.18523,632.958l-21.4805,41.259-.33863,20.723,31.05561-49.79149-31.17146,57.023Z" transform="translate(-39.70387 -61.04208)" fill="#3f3d56"/><ellipse cx="721.51694" cy="656.82212" rx="12.40027" ry="39.5" transform="translate(-220.83517 966.22323) rotate(-64.62574)" fill="#2f2e41"/><ellipse cx="112.51694" cy="651.82212" rx="12.40027" ry="39.5" transform="translate(-574.07936 452.71367) rotate(-68.15829)" fill="#2f2e41"/></svg>
'''
'''--- src/assets/notoken.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="853.78" height="726" viewBox="0 0 853.78 726" xmlns:xlink="http://www.w3.org/1999/xlink"><title>treasure</title><ellipse cx="284.98" cy="672" rx="277" ry="54" fill="#3f3d56"/><path d="M236.36,746S185,732.19,175.31,733.21s14.68-47.36,30.91-41.46,37.87,21.42,50.24-.5,19.31-33.72,34.38-32.54,35.94-9.43,51,0,25.64,21.06,46.44,20.56S428.8,631.58,445,650.46s35.63,36.15,50.86,29.87,32.61,3.16,46.52,13.78,38.26,5.9,47.53-2.36,16.24-14.16,35.94-13,82.31,15.34,105.5,33-30.14,40.12-55.65,40.12-30.14,7.08-52.17,17.7-58-5.9-83.47,11.8-58-9.44-102,0-34.78,22.41-60.29,13-16.23-13-53.33-15.34-77.67,5.9-81.15-9.44-26.64-18.88-40.56-23.6S236.36,746,236.36,746Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M876.08,618.72l2-1.28.59-.38a19.55,19.55,0,0,1-2-38.1l-.1,8.06,4.43-8.77h0a19.56,19.56,0,0,1,20.45,18.63c0,.38,0,.74,0,1.11a23.3,23.3,0,0,0,3.86-5.7c1.88-4.19,1.91-8.92,1.77-14.68-.3-11.4-.79-22.89-1.43-34.35a19.54,19.54,0,0,1-17.37-18.51,17.38,17.38,0,0,1,0-1.77c0-.15,0-.3,0-.44,0-.57.09-1.13.18-1.69a2.56,2.56,0,0,1,0-.27c.07-.47.17-.93.28-1.39,0-.17.09-.34.13-.51.14-.5.29-1,.47-1.48.06-.16.12-.31.19-.47.14-.36.29-.71.45-1.06.08-.18.16-.37.25-.55l.07-.14h0a19.57,19.57,0,0,1,23-9.92l-.13,10.49,4.38-8.66a19.53,19.53,0,0,1,9.76,16,19.17,19.17,0,0,1-.43,5.05h0c0,.14-.08.27-.11.41s-.13.52-.2.77-.19.65-.3,1-.16.48-.25.72-.29.68-.44,1c-.09.19-.17.39-.26.59-.25.5-.52,1-.81,1.48-.1.17-.22.33-.32.49-.21.32-.42.65-.65,1s-.29.38-.44.56-.43.54-.66.8-.33.36-.5.54-.48.5-.74.74l-.51.48-.89.74-.46.36c-.47.34-.94.66-1.44,1l-.28.16a14.09,14.09,0,0,1-1.27.69l-.56.25c-.35.16-.71.32-1.08.45l-.64.23c-.36.13-.72.24-1.09.34l-.66.17c-.4.1-.81.18-1.22.25h-.08q.4,7.26.72,14.51a19.54,19.54,0,0,1,27.14-8.49l-3.45,9.48,7.11-6.83a19.49,19.49,0,0,1,6.32,13.5,19.21,19.21,0,0,1-.5,5.39,19.55,19.55,0,0,1-36,5.33c0,.49,0,1,0,1.47.13,5.08.29,11.4-2.24,17a34.54,34.54,0,0,1-7.2,9.72c-1.78,1.81-3.62,3.56-5.5,5.26a19.66,19.66,0,0,1-7.07,5.87q-4.65,3.58-9.62,6.71L879,623.34c-1.86,1.16-3.77,2.34-5.64,3.57l1-.08a19.56,19.56,0,0,1,19.25,12.73l-12.22,10,13.45-3.12a19.59,19.59,0,0,1-28,17.62c.31.37.61.75.91,1.13l1.78,2.22c8,10.08,10.17,19.64,6.23,26.93l-4.79-2.59c3.83-7.1-1.93-16.18-5.71-21-.57-.73-1.16-1.46-1.75-2.19-5.08-6.31-10.84-13.47-10.7-22.25C852.91,633.07,865.76,625.11,876.08,618.72Z" transform="translate(-173.11 -87)" fill="#f1f1f1"/><path d="M779.43,605.39l-3.07-1.92c-.3-.18-.59-.37-.88-.56a29.29,29.29,0,0,0,3-57.06l.15,12.07L772,544.79h-.08a29.29,29.29,0,0,0-30.62,27.9c0,.56,0,1.11,0,1.66a35,35,0,0,1-5.79-8.55c-2.81-6.26-2.86-13.35-2.64-22,.44-17.08,1.18-34.29,2.14-51.44a29.27,29.27,0,0,0,26-27.71c0-.9,0-1.78,0-2.66l0-.66c-.06-.85-.14-1.69-.27-2.52,0-.14,0-.27-.07-.41-.12-.7-.27-1.39-.44-2.08-.06-.26-.12-.51-.19-.77-.21-.75-.43-1.48-.7-2.21-.08-.24-.18-.47-.28-.71-.21-.54-.43-1.06-.67-1.58-.13-.28-.25-.55-.38-.82a2,2,0,0,1-.1-.21h0a29.27,29.27,0,0,0-24.75-16,29.61,29.61,0,0,0-9.64,1.16l.19,15.71-6.55-13a29.11,29.11,0,0,0-14,31.56h0c0,.2.11.4.16.61.09.39.19.77.29,1.15s.3,1,.46,1.45.24.72.38,1.07c.19.52.42,1,.65,1.53.13.3.25.6.39.89.37.75.77,1.49,1.21,2.21.15.26.32.5.48.74.32.49.63,1,1,1.44.21.29.44.56.66.84s.65.81,1,1.2l.74.81q.54.57,1.11,1.11l.77.71c.43.38.88.75,1.34,1.1.23.18.45.37.69.55.69.51,1.4,1,2.14,1.44.14.09.29.16.43.24.62.36,1.25.71,1.89,1l.85.38c.53.24,1.06.47,1.61.67.32.13.64.24,1,.35.54.18,1.09.35,1.64.5l1,.26c.61.14,1.22.26,1.83.37l.12,0q-.62,10.86-1.08,21.72a29.27,29.27,0,0,0-40.65-12.7l5.18,14.18-10.65-10.22a29.13,29.13,0,0,0-9.46,20.22,28.75,28.75,0,0,0,.74,8.07,29.27,29.27,0,0,0,53.85,8c0,.74,0,1.48-.07,2.21-.19,7.61-.44,17.07,3.35,25.52,2.57,5.73,6.71,10.37,10.79,14.54q4,4.08,8.24,7.88a29.31,29.31,0,0,0,10.57,8.8q7,5.35,14.42,10l3.1,1.92c2.78,1.73,5.64,3.51,8.44,5.35-.49,0-1-.1-1.48-.12a29.28,29.28,0,0,0-28.83,19.06l18.29,14.89-20.13-4.66a29.32,29.32,0,0,0,42,26.38c-.46.56-.91,1.12-1.36,1.69-.9,1.12-1.8,2.23-2.67,3.33-11.91,15.09-15.22,29.4-9.33,40.32l7.18-3.87c-5.74-10.63,2.89-24.23,8.55-31.39.85-1.09,1.73-2.18,2.62-3.28,7.61-9.45,16.23-20.17,16-33.31C814.12,626.89,794.89,615,779.43,605.39Z" transform="translate(-173.11 -87)" fill="#f1f1f1"/><path d="M631.08,756.56s-34.61-9.16-41.13-8.49,9.89-31.34,20.82-27.44,25.52,14.18,33.85-.33,13-22.32,23.17-21.54,24.21-6.25,34.36,0,17.27,13.94,31.29,13.61,27.29-31.57,38.22-19.08,24,23.94,34.26,19.78,22,2.09,31.35,9.12,25.77,3.91,32-1.56,10.94-9.37,24.22-8.59,55.45,10.15,71.07,21.87-20.31,26.55-37.49,26.55-20.31,4.69-35.15,11.72-39.05-3.91-56.23,7.81-39.05-6.25-68.73,0-23.43,14.84-40.62,8.59-10.93-8.59-35.92-10.15-52.33,3.9-54.68-6.25-18-12.5-27.33-15.62S631.08,756.56,631.08,756.56Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><polygon points="744.61 561.58 731.21 602.65 730.63 604.44 708.2 673.2 669.8 699.15 483.33 620.74 501 549.28 501.94 545.52 511.4 507.27 511.42 507.18 568.82 500 744.61 561.58" fill="#f8ce6d"/><polygon points="744.61 561.58 708.2 673.2 669.8 699.15 705.05 577.34 511.4 507.27 511.42 507.18 568.82 500 744.61 561.58" opacity="0.1"/><polygon points="553.24 514.93 550.15 513.05 581.13 509.8 713.85 556.72 710.11 558.68 579.18 512.51 553.24 514.93" opacity="0.1"/><polyline points="731.21 602.65 692.45 620.88 501.94 545.52 501 549.28 691.68 623.56 730.63 604.44" opacity="0.1"/><ellipse cx="691.21" cy="619.15" rx="6.67" ry="7.2" transform="translate(-278.2 1008.63) rotate(-72.75)" fill="#3f3d56"/><ellipse cx="859.13" cy="684.17" rx="6.67" ry="7.2" transform="translate(-222.18 1214.73) rotate(-72.75)" fill="#3f3d56"/><ellipse cx="832.58" cy="764.93" rx="6.67" ry="7.2" transform="translate(-317.97 1246.17) rotate(-72.75)" fill="#3f3d56"/><ellipse cx="670.66" cy="697.17" rx="6.67" ry="7.2" transform="translate(-367.16 1043.88) rotate(-72.75)" fill="#3f3d56"/><path d="M707.22,598.38c-.4,1.3-3.61,0-7.69-1.28s-7.26-2.68-6.86-4,4.24-2,8.32-.73S707.63,597.08,707.22,598.38Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><ellipse cx="721.08" cy="591.65" rx="2.46" ry="7.02" transform="translate(-230.92 1017.81) rotate(-72.75)" fill="#3f3d56"/><path d="M793.58,630c-.4,1.3-4.41.1-8.3-1.11s-6.92-2.56-6.52-3.86,4.09-2,8-.83S794,628.68,793.58,630Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M876.54,659.79c-.45,1.46-4.71.19-8.84-1.09s-7.34-2.75-6.89-4.21,4.4-2.35,8.53-1.07S877,658.33,876.54,659.79Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M900.8,656.29c-.46,1.46-4.71.19-8.84-1.09s-7.35-2.75-6.89-4.21,4.4-2.35,8.53-1.07S901.25,654.83,900.8,656.29Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M912.76,649.16c-.46,1.46-4,.42-7.38-.64s-6-2.34-5.59-3.8,3.82-2.54,7.23-1.48S913.21,647.7,912.76,649.16Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M832.65,619.94c-.36,1.16-4,.09-7.46-1s-6.23-2.31-5.86-3.47,3.67-1.83,7.17-.75S833,618.77,832.65,619.94Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><ellipse cx="749.03" cy="590.77" rx="2.46" ry="6.06" transform="translate(-210.42 1043.88) rotate(-72.75)" fill="#3f3d56"/><path d="M791,669.25a6.32,6.32,0,0,0-2.9-7.36,6.43,6.43,0,0,0,1.31-2.33,6.32,6.32,0,0,0-7.24-8.08,6.32,6.32,0,0,0-11.34-5.25,6.32,6.32,0,0,0-9.74,3.25c0,.14-.07.27-.1.4l-.22.11a6.32,6.32,0,1,0-6.11,10.73,5.65,5.65,0,0,0,1,.22l.08,2.32L786,675.63l-.2-2A6.34,6.34,0,0,0,791,669.25Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M783.93,689.11a6.33,6.33,0,0,1-7.2,3.29,6.18,6.18,0,0,1-.67,2.58,6.32,6.32,0,0,1-8.49,2.81,6.43,6.43,0,0,1-2.33-2,6.32,6.32,0,0,1-11.8-4.09,6.42,6.42,0,0,1-2-.62,6.32,6.32,0,0,1-2.81-8.48l.2-.37-.08-.23a6.25,6.25,0,0,1-2.63-.67A6.32,6.32,0,0,1,751.86,670a6.59,6.59,0,0,1,.85.51l1.66-1.61,30.44,12.17-1.53,1.3A6.32,6.32,0,0,1,783.93,689.11Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M765.35,655.64,758,679.46a7.16,7.16,0,0,0,4.33,8.83h0a7.15,7.15,0,0,0,9.32-4.58L779,659.88a7.14,7.14,0,0,0-5.08-9h0A7.14,7.14,0,0,0,765.35,655.64Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M765.67,657.09,759,678.45a6.4,6.4,0,0,0,3.89,7.91h0a6.41,6.41,0,0,0,8.35-4.11l6.63-21.37a6.42,6.42,0,0,0-4.56-8.12h0A6.42,6.42,0,0,0,765.67,657.09Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M678.72,767.49s-34.61-9.16-41.13-8.48,9.89-31.35,20.82-27.44,25.52,14.17,33.85-.34,13-22.31,23.17-21.53,24.21-6.25,34.36,0,17.27,13.93,31.29,13.6,27.29-31.57,38.23-19.07,24,23.93,34.26,19.78,22,2.09,31.34,9.12,25.78,3.9,32-1.56,10.93-9.38,24.21-8.6,55.45,10.16,71.07,21.87-20.3,26.56-37.49,26.56-20.3,4.68-35.14,11.71-39.06-3.9-56.24,7.81-39.05-6.24-68.73,0-23.43,14.84-40.61,8.6-10.94-8.6-35.93-10.16-52.33,3.91-54.67-6.25-17.95-12.49-27.33-15.62S678.72,767.49,678.72,767.49Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M972.49,741.17c3-5.51-.4-12.27-4.28-17.18s-8.62-10-8.52-16.29c.15-9,9.7-14.31,17.33-19.09a84,84,0,0,0,15.56-12.51,22.61,22.61,0,0,0,4.78-6.4c1.58-3.52,1.54-7.52,1.44-11.37q-.49-19.26-1.91-38.49" transform="translate(-173.11 -87)" fill="none" stroke="#3f3d56" stroke-miterlimit="10" stroke-width="4"/><path d="M1011.4,619.14a14,14,0,0,0-7-11.5l-3.14,6.22.1-7.53a14.19,14.19,0,0,0-4.63-.56,14,14,0,1,0,14.68,13.37Z" transform="translate(-173.11 -87)" fill="#57b793"/><path d="M986.37,714.13a14,14,0,1,1,.68-11.3L978.28,710l9.65-2.23A14,14,0,0,1,986.37,714.13Z" transform="translate(-173.11 -87)" fill="#57b793"/><path d="M979.44,686.88A14,14,0,0,1,975,659.35l-.07,5.78,3.17-6.29h0A14,14,0,0,1,992.8,672.2a13.84,13.84,0,0,1-.6,4.79A14,14,0,0,1,979.44,686.88Z" transform="translate(-173.11 -87)" fill="#57b793"/><path d="M1013.51,664.21a14,14,0,1,1,6.21-26.27l-2.48,6.8,5.1-4.9a14,14,0,0,1,4.53,9.69,13.79,13.79,0,0,1-.35,3.87A14,14,0,0,1,1013.51,664.21Z" transform="translate(-173.11 -87)" fill="#57b793"/><path d="M1009.51,622.88c-3.24.35-6.39,1.36-9.64,1.56s-6.82-.57-8.87-3.1c-1.11-1.36-1.67-3.08-2.6-4.57a10,10,0,0,0-3.54-3.33,14,14,0,1,0,26.24,9.32Q1010.31,622.79,1009.51,622.88Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M1013.51,664.21a14.05,14.05,0,0,1-13.35-20A10.37,10.37,0,0,1,1003,647c1,1.51,1.61,3.26,2.79,4.64,2.18,2.57,5.91,3.41,9.3,3.26s6.66-1.12,10-1.43c.47,0,1-.07,1.42-.08A14,14,0,0,1,1013.51,664.21Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M979.44,686.88A14,14,0,0,1,966,667.12a11.32,11.32,0,0,1,3,2.85c1.09,1.54,1.77,3.32,3,4.74,2.37,2.63,6.35,3.56,9.94,3.48s6.82-.93,10.27-1.2A14,14,0,0,1,979.44,686.88Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M986.37,714.13a14,14,0,0,1-25.58-11.45,14,14,0,0,1,3.07,2.75c1.34,1.62,2.22,3.47,3.76,5,2.87,2.82,7.5,4,11.63,4.09A60,60,0,0,0,986.37,714.13Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M951.32,734.82s11.08-.34,14.42-2.72,17-5.21,17.87-1.4,16.64,19,4.14,19.06-29.06-1.94-32.39-4S951.32,734.82,951.32,734.82Z" transform="translate(-173.11 -87)" fill="#656380"/><path d="M988,748.44c-12.51.1-29.06-2-32.39-4-2.54-1.55-3.55-7.09-3.89-9.65h-.37s.7,8.94,4,11,19.88,4.07,32.39,4c3.61,0,4.85-1.31,4.79-3.21C992,747.7,990.66,748.41,988,748.44Z" transform="translate(-173.11 -87)" opacity="0.2"/><path d="M378.31,266.18a4.51,4.51,0,0,1,.31-2.14c.81-1.44,2.93-1.05,4.53-.64,6.44,1.62,13.22.15,19.84.53s14.09,3.69,15.42,10.19a48.25,48.25,0,0,0,12.23-12.57c1.84-2.75,3.44-5.9,3.19-9.2-.36-4.76-4.35-8.32-8.05-11.34l-11-9a16.51,16.51,0,0,0-4.94-3.14c-2.54-.87-5.32-.46-8-.46-8,0-16.57-3.64-23.71,0-3,1.53-5.22,4.15-7.38,6.71l-9.84,11.65a6.13,6.13,0,0,0-1.57,2.67c-.28,1.42.45,2.82.7,4.25.47,2.6-.66,5.37.21,7.87,1.43,4.15,6.46,4.74,9.54,7.11,1.15.89,2.95,3.89,4.31,3.86C376.54,272.5,378.24,268.09,378.31,266.18Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M379.93,294c-.11,3.24-2,6.12-3.82,8.81-2.43,3.58-5,7.3-8.84,9.3a84.94,84.94,0,0,0,62.78,6.62c3.37-1,7.35-3.08,7.15-6.59-4-1.09-8.14-2.22-11.54-4.63-4.06-2.88-6.74-7.36-8.47-12s-2.61-9.6-3.82-14.43a2.72,2.72,0,0,0-.62-1.34,2.76,2.76,0,0,0-1.9-.5L397.53,279c-5.47,0-11.41-.13-16.49,2.19C374.72,284.09,380.11,288.62,379.93,294Z" transform="translate(-173.11 -87)" fill="#ffc0c6"/><path d="M379.93,294c-.11,3.24-2,6.12-3.82,8.81-2.43,3.58-5,7.3-8.84,9.3a84.94,84.94,0,0,0,62.78,6.62c3.37-1,7.35-3.08,7.15-6.59-4-1.09-8.14-2.22-11.54-4.63-4.06-2.88-6.74-7.36-8.47-12s-2.61-9.6-3.82-14.43a2.72,2.72,0,0,0-.62-1.34,2.76,2.76,0,0,0-1.9-.5L397.53,279c-5.47,0-11.41-.13-16.49,2.19C374.72,284.09,380.11,288.62,379.93,294Z" transform="translate(-173.11 -87)" opacity="0.1"/><path d="M368.34,750.24c-3.28,5-7.57,9.23-11.17,14s-6.61,10.33-6.65,16.3a2.58,2.58,0,0,0,.69,2.1,2.7,2.7,0,0,0,1.37.43l13.9,1.78a23.29,23.29,0,0,0,6.4.22,22.7,22.7,0,0,0,6.56-2.39,9.05,9.05,0,0,0,3.94-3c.67-1.1.85-2.45,1.49-3.57,1.93-3.39,6.79-3.24,10.65-2.65,1.11-10.31-1.74-20.59-4.57-30.57a4,4,0,0,0-.77-1.68,4,4,0,0,0-1.81-1c-3.33-1.09-11.38-5.36-14.18-3.36C372.14,738.33,370,747.59,368.34,750.24Z" transform="translate(-173.11 -87)" fill="#575a88"/><path d="M435.36,770.57c2.67-1.25,5.52-2.86,8.4-2.2,4.06.91,5.87,5.71,9.32,8,2.12,1.43,4.74,1.85,7.27,2.18a169.42,169.42,0,0,0,23.5,1.39c2.51,0,5.67-.6,6.28-3s-1.7-4.31-3.75-5.56a110,110,0,0,0-13.88-7.21,27.83,27.83,0,0,1-6.62-3.52c-3.43-2.77-5.1-7.11-6.63-11.24-1.23-3.32-2.36-10.49-4.88-13-2.76-2.71-6.47-.91-9.93-.15-5.38,1.18-11.68,2-15.14,6.83C424.24,750.16,420.35,777.52,435.36,770.57Z" transform="translate(-173.11 -87)" fill="#575a88"/><path d="M355.85,451.46A101.94,101.94,0,0,0,348.39,487c-.24,9.11.74,18.19,1.73,27.25q2.37,22,4.76,44a124.13,124.13,0,0,0,2.87,18.11c1.73,6.65,4.54,13,6.55,19.54,6.22,20.38,4.45,42.36.34,63.27a31.61,31.61,0,0,0-.86,7c.12,3.53,1.48,6.89,2.36,10.31,5.38,20.85-7,44,1.08,64a3.17,3.17,0,0,0,1.27,1.75,3.22,3.22,0,0,0,2.52-.11A34.09,34.09,0,0,0,377.6,739a40.21,40.21,0,0,0,16.34,11.83c4.74-1.17,5.63-6.93,7.18-11.56A79,79,0,0,0,404,729.2a80.15,80.15,0,0,0,1.05-12.68l4.1-144.35-.3,44.05a52,52,0,0,0,.67,10.66c.6,2.93,1.7,5.74,2.33,8.67.89,4.19.78,8.53.74,12.82a376.79,376.79,0,0,0,6.95,75.82c1.6,8.18,3.52,16.44,7.61,23.69a2.61,2.61,0,0,0,1.49,1.46c.87.19,1.67-.5,2.33-1.11a25.49,25.49,0,0,1,29.27-3.18c-.88-4.24,3.16-9.17.27-12.39-.83-.93-2.07-1.38-3-2.19-1.84-1.57-2.28-4.21-2.54-6.62a153.34,153.34,0,0,1,0-32.27c1.41-13.41,4.58-26.93,2.24-40.2-1.7-9.63-6.28-19-5.37-28.69.6-6.5,3.62-12.49,5.7-18.68,9.08-27.06,0-57.22,6.57-85,1.51-6.38,3.79-13.28,1.05-19.23l4.17-1.27-8.66-19.77c-1.84-4.21-3.76-8.54-7-11.78-5.44-5.41-13.57-6.86-21.16-8l-61.74-9.63C365.3,448.44,357.92,446.38,355.85,451.46Z" transform="translate(-173.11 -87)" fill="#3c354c"/><circle cx="221.61" cy="180.43" r="26.43" fill="#ffc0c6"/><path d="M380.31,298.9a6.14,6.14,0,0,0-4.26-.75,7.28,7.28,0,0,0-2,1.09L361.55,308a19.33,19.33,0,0,0-4.73,4.14c-2.14,2.91-2.48,6.78-2.2,10.38.62,8.12,3.9,15.78,5.68,23.72s1.78,17-3.34,23.36a12.38,12.38,0,0,0-2.18,3.09,9,9,0,0,0-.41,3,81.82,81.82,0,0,0,.24,11.4c.56,4.89,2,9.64,2.78,14.49,1.37,8.26,1,16.73,2.06,25a4,4,0,0,0,4,4.34,117.77,117.77,0,0,0,18.67,1.23c7.23,0,14.45-.4,21.67-.78l32.86-1.73a3.24,3.24,0,0,0,3.65-3.35c2.88-13.82,5.78-27.89,4.42-41.93-.88-9.07-3.52-17.86-6-26.62-2-7.1-3.92-14.55-2.42-21.78,1-4.77,3.43-9.18,4.06-14a16.51,16.51,0,0,0-4.52-13.9c-3.68-3.53-9.05-4.87-12.72-8.41a28.93,28.93,0,0,0-3.28-3.18,4.1,4.1,0,0,0-4.31-.5,5.55,5.55,0,0,0-1.64,1.83c-3.2,4.86-8,12.87-14.75,11.61C391.84,308.1,386.74,302,380.31,298.9Z" transform="translate(-173.11 -87)" fill="#81c784"/><path d="M446.35,477.58c-2.34,1.75-4.08,4.86-3,7.57a15.27,15.27,0,0,0,9.36-1.3c1.87-.91,4.2-2.19,5.82-.87a4.93,4.93,0,0,1,1.19,1.8,60.82,60.82,0,0,0,6.34,10.53c1.78-.84,3.65-1.76,4.72-3.41a9.87,9.87,0,0,0,1.23-3.65,97,97,0,0,0,1.39-9.73c.21-2.37.25-5-1.37-6.76C465.08,464.26,452.12,473.27,446.35,477.58Z" transform="translate(-173.11 -87)" fill="#ffc0c6"/><path d="M376.66,256.26a4.48,4.48,0,0,1,.31-2.13c.81-1.44,2.93-1,4.53-.65,6.44,1.63,13.22.16,19.84.54s14.09,3.69,15.42,10.19A48.41,48.41,0,0,0,429,251.64c1.84-2.75,3.44-5.9,3.19-9.2-.36-4.76-4.35-8.32-8.05-11.34l-11-9a16.48,16.48,0,0,0-4.94-3.13c-2.54-.87-5.32-.46-8-.46-8,0-16.57-3.64-23.71,0-3,1.54-5.22,4.16-7.39,6.72l-9.83,11.65a6.21,6.21,0,0,0-1.58,2.66c-.28,1.42.45,2.83.71,4.25.46,2.6-.66,5.38.2,7.88,1.43,4.15,6.47,4.73,9.55,7.11,1.15.89,2.94,3.89,4.31,3.85C374.89,262.59,376.59,258.18,376.66,256.26Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M441.93,309.87a20.5,20.5,0,0,1,16.24,3c7.56,5.18,10.67,14.64,13.3,23.42l5.89,19.69c2.58,8.63,5.18,17.34,5.78,26.33.55,8.17-.57,16.35-1.69,24.46-1.55,11.23,2.1,23.54,2.15,34.87,0,13-.08,26.79-6.7,38a6.34,6.34,0,0,0-4-4.27,18.65,18.65,0,0,0-5.95-1l-17.6-1.13a54.27,54.27,0,0,0,3.86-7.93c6.75-17.34,4.16-36.72,1.47-55.12a38,38,0,0,0-1-5.2,49.58,49.58,0,0,1-1.19-20.15,47,47,0,0,0,.31-9.18,10.26,10.26,0,0,0-.81-3.76,11.82,11.82,0,0,0-1.94-2.68l-3.56-4c-.29-12.1-2.19-24.29-4.07-36.25A81.41,81.41,0,0,1,441.93,309.87Z" transform="translate(-173.11 -87)" fill="#81c784"/><path d="M407.35,363.3a84.94,84.94,0,0,1-31.84-53.93c-.58-3.79-2.09-8.74-5.92-8.61a7.55,7.55,0,0,0-3.26,1.14l-13.88,7.44a5.23,5.23,0,0,0-2.42,2c-.91,1.78.38,3.83,1.49,5.49,7.47,11.3,8,25.65,8.3,39.19.09,4,.12,8.21-1.81,11.71-1.57,2.83-4.3,4.91-5.74,7.82-1.35,2.73-1.41,5.89-1.45,8.94-.28,21.76-.56,43.55.58,65.29.17,3.28.43,6.72,2.18,9.5,1.63,2.57,4.32,4.23,6.92,5.8l21.05,12.72c4,2.43,8.16,4.9,12.79,5.68s9.92-.54,12.58-4.41c1.29-1.88,1.86-4.17,3.1-6.08s3.61-3.46,5.72-2.61c1.5.6,2.32,2.17,3,3.62,1.34,2.77,2.74,5.61,4.93,7.78s5.36,3.63,8.37,3c2.6-.57,4.63-2.54,6.5-4.42,5.78-5.79,11.62-11.66,15.87-18.67a4.5,4.5,0,0,0,.9-2.83,5.7,5.7,0,0,0-1.55-2.6c-2.66-3.26-3.71-7.53-4.5-11.67-7.91-41.6,3.26-84.84-2.89-126.74-.7-4.8-2.24-9.21-5.84-12.46s-8.08-5.32-12.49-7.34c-1.45-.66-3.11-1.34-4.59-.74-2.45,1-2.46,4.37-2.28,7a91.71,91.71,0,0,1-.8,16.13l-2.15,19.79a38.24,38.24,0,0,1-1.68,8.9A35.84,35.84,0,0,1,407.35,363.3Z" transform="translate(-173.11 -87)" fill="#575a88"/><path d="M284.74,206.07s-7.63,6.2-16.64-10.06-52.52-55.34-52.52-55.34-5.63-5.15,15.76-13.73S281.94,87,281.94,87s48.74,43.33,53.51,64.79-5.67,25.1-23.59,36.5S284.74,206.07,284.74,206.07Z" transform="translate(-173.11 -87)" fill="#3f3d56"/><path d="M424.43,413.59l-123-221.67,10.44-3.63L432.79,409a4.79,4.79,0,0,1-2,6.54h0A4.77,4.77,0,0,1,424.43,413.59Z" transform="translate(-173.11 -87)" fill="#656380"/><path d="M373.92,357c3.22-6.89-.08-14.84-2.28-22.12a74.74,74.74,0,0,1-3.11-17.8,13,13,0,0,1,.62-5.63,5,5,0,0,1,4.28-3.27,20.53,20.53,0,0,1,3.21,14.62,49.22,49.22,0,0,1,5.66-1.11A10.59,10.59,0,0,1,393.81,329c3.17,10.16,4.25,21-.17,30.5a58,58,0,0,1-4.89,8.05l-9.64,14.08c-.66,1-1.47,2-2.63,2.17s-2.37-.88-3.22-1.85c-2.93-3.31-8.13-8.13-7.56-12.69S372,361.05,373.92,357Z" transform="translate(-173.11 -87)" fill="#ffc0c6"/><path d="M351.64,314.53c-9.79-1.11-21,1.54-26.12,10-2.57,4.27-3.21,9.39-3.66,14.35-.63,6.95-1,13.92-1.35,20.88l-1.89,36.64c-.23,4.38-.45,8.77-.53,13.15a29.63,29.63,0,0,0,1.09,10.16c1.21,3.55,3.61,6.55,6,9.47s5.38,5.93,8.89,5.08a9.66,9.66,0,0,0,3.81-2.35l8-6.92c5.44-4.67,10.94-9.41,15.08-15.27,2-2.82,3.64-5.87,5.66-8.67,5.94-8.24,15.08-14.49,18.21-24.15-3-.16-7.36-1.15-8.74-3.81-.73-1.41-.83-3.09-1.64-4.44-1.23-2.06-4-3.18-4.41-5.54-7.86,6.33-14.44,13.68-20.72,21.57l2.55-9.91A6.3,6.3,0,0,1,353,372.2a11.33,11.33,0,0,1,3-1.89c3.11-1.88,4.29-5.77,4.92-9.35A65.43,65.43,0,0,0,351.64,314.53Z" transform="translate(-173.11 -87)" fill="#81c784"/></svg>
'''
'''--- src/assets/nousers.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="869.99994" height="520.13854" viewBox="0 0 869.99994 520.13854" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M831.09242,704.18737c-11.13833-9.4118-17.90393-24.27967-16.12965-38.75366s12.76358-27.78,27.01831-30.85364,30.50415,5.43465,34.83378,19.3594c2.3828-26.84637,5.12854-54.81757,19.40179-77.67976,12.92407-20.70115,35.3088-35.51364,59.5688-38.16357s49.80265,7.35859,64.93272,26.50671,18.83461,46.98549,8.2379,68.96911c-7.80623,16.19456-22.188,28.24676-37.2566,38.05184a240.45181,240.45181,0,0,1-164.45376,35.97709Z" transform="translate(-165.00003 -189.93073)" fill="#f2f2f2"/><path d="M996.72788,546.00953a393.41394,393.41394,0,0,0-54.82622,54.44229,394.561,394.561,0,0,0-61.752,103.194c-1.112,2.72484,3.31272,3.911,4.4123,1.21642A392.34209,392.34209,0,0,1,999.96343,549.24507c2.28437-1.86015-.97-5.08035-3.23555-3.23554Z" transform="translate(-165.00003 -189.93073)" fill="#fff"/><path d="M445.06712,701.63014c15.2985-12.92712,24.591-33.34815,22.15408-53.22817s-17.53079-38.15588-37.10966-42.37749-41.89745,7.46449-47.8442,26.59014c-3.27278-36.87349-7.04406-75.29195-26.64837-106.69317-17.75122-28.433-48.49666-48.778-81.81777-52.41768s-68.40395,10.107-89.18511,36.407-25.86934,64.53459-11.31476,94.72909c10.72185,22.24324,30.47528,38.79693,51.17195,52.26422,66.02954,42.9653,147.93912,60.88443,225.8773,49.41454" transform="translate(-165.00003 -189.93073)" fill="#f2f2f2"/><path d="M217.56676,484.37281a540.35491,540.35491,0,0,1,75.30383,74.77651A548.0761,548.0761,0,0,1,352.25665,647.04a545.835,545.835,0,0,1,25.43041,53.8463c1.52726,3.74257-4.55,5.37169-6.06031,1.67075a536.35952,536.35952,0,0,0-49.009-92.727A539.73411,539.73411,0,0,0,256.889,528.63168a538.44066,538.44066,0,0,0-43.76626-39.81484c-3.13759-2.55492,1.33232-6.97788,4.444-4.444Z" transform="translate(-165.00003 -189.93073)" fill="#fff"/><path d="M789.5,708.93073h-365v-374.5c0-79.67773,64.82227-144.5,144.49976-144.5h76.00049c79.67749,0,144.49975,64.82227,144.49975,144.5Z" transform="translate(-165.00003 -189.93073)" fill="#f2f2f2"/><path d="M713.5,708.93073h-289v-374.5a143.38177,143.38177,0,0,1,27.59571-84.94434c.66381-.90478,1.32592-1.79785,2.00878-2.68115a144.46633,144.46633,0,0,1,30.75415-29.85058c.65967-.48,1.322-.95166,1.99415-1.42334a144.15958,144.15958,0,0,1,31.47216-16.459c.66089-.25049,1.33374-.50146,2.00659-.74219a144.01979,144.01979,0,0,1,31.1084-7.33593c.65772-.08985,1.333-.16016,2.0083-.23047a146.28769,146.28769,0,0,1,31.10547,0c.67334.07031,1.34864.14062,2.01416.23144a143.995,143.995,0,0,1,31.10034,7.335c.6731.24073,1.346.4917,2.00879.74268a143.79947,143.79947,0,0,1,31.10645,16.21582c.67163.46143,1.344.93311,2.00635,1.40478a145.987,145.987,0,0,1,18.38354,15.564,144.305,144.305,0,0,1,12.72437,14.55078c.68066.88037,1.34277,1.77344,2.00537,2.67676A143.38227,143.38227,0,0,1,713.5,334.43073Z" transform="translate(-165.00003 -189.93073)" fill="#ccc"/><circle cx="524.99994" cy="335.5" r="16" fill="#81c784"/><polygon points="594.599 507.783 582.339 507.783 576.506 460.495 594.601 460.496 594.599 507.783" fill="#ffb8b8"/><path d="M573.58165,504.27982h23.64384a0,0,0,0,1,0,0v14.88687a0,0,0,0,1,0,0H558.69478a0,0,0,0,1,0,0v0a14.88688,14.88688,0,0,1,14.88688-14.88688Z" fill="#2f2e41"/><polygon points="655.599 507.783 643.339 507.783 637.506 460.495 655.601 460.496 655.599 507.783" fill="#ffb8b8"/><path d="M634.58165,504.27982h23.64384a0,0,0,0,1,0,0v14.88687a0,0,0,0,1,0,0H619.69478a0,0,0,0,1,0,0v0a14.88688,14.88688,0,0,1,14.88688-14.88688Z" fill="#2f2e41"/><path d="M698.09758,528.60035a10.74272,10.74272,0,0,1,4.51052-15.84307l41.67577-114.86667L764.791,409.082,717.20624,518.85271a10.80091,10.80091,0,0,1-19.10866,9.74764Z" transform="translate(-165.00003 -189.93073)" fill="#ffb8b8"/><path d="M814.33644,550.1843a10.74269,10.74269,0,0,1-2.89305-16.21659L798.53263,412.4583l23.33776,1.06622L827.23606,533.045a10.80091,10.80091,0,0,1-12.89962,17.13934Z" transform="translate(-165.00003 -189.93073)" fill="#ffb8b8"/><circle cx="612.1058" cy="162.12254" r="24.56103" fill="#ffb8b8"/><path d="M814.17958,522.54937H740.13271l.08911-.57617c.13306-.86133,13.19678-86.439,3.56177-114.436a11.813,11.813,0,0,1,6.06933-14.5835h.00025c13.77173-6.48535,40.20752-14.47119,62.52,4.90918a28.23448,28.23448,0,0,1,9.45947,23.396Z" transform="translate(-165.00003 -189.93073)" fill="#81c784"/><path d="M754.35439,448.1812,721.01772,441.418l15.62622-37.02978a13.99723,13.99723,0,0,1,27.10571,6.99755Z" transform="translate(-165.00003 -189.93073)" fill="#81c784"/><path d="M797.05043,460.73882l-2.00415-45.94141c-1.51977-8.63623,3.42408-16.80029,11.02735-18.13476,7.60547-1.32959,15.03174,4.66016,16.55835,13.35986l7.533,42.92774Z" transform="translate(-165.00003 -189.93073)" fill="#81c784"/><path d="M811.71606,517.04933c11.91455,45.37671,13.21436,103.0694,10,166l-16-2-29-120-16,122-18-1c-5.37744-66.02972-10.61328-122.71527-2-160Z" transform="translate(-165.00003 -189.93073)" fill="#2f2e41"/><path d="M793.2891,371.03474c-4.582,4.88079-13.09131,2.26067-13.68835-4.40717a8.05467,8.05467,0,0,1,.01014-1.55569c.30826-2.95357,2.01461-5.63506,1.60587-8.7536a4.59046,4.59046,0,0,0-.84011-2.14892c-3.65124-4.88933-12.22227,2.18687-15.6682-2.23929-2.113-2.714.3708-6.98713-1.25065-10.02051-2.14006-4.00358-8.47881-2.0286-12.45388-4.22116-4.42275-2.43948-4.15822-9.22524-1.24686-13.35269,3.55052-5.03359,9.77572-7.71951,15.92336-8.10661s12.25292,1.27475,17.99229,3.51145c6.52109,2.54134,12.98768,6.05351,17.00067,11.78753,4.88021,6.97317,5.34986,16.34793,2.90917,24.50174C802.09785,360.98987,797.03077,367.04906,793.2891,371.03474Z" transform="translate(-165.00003 -189.93073)" fill="#2f2e41"/><path d="M1004.98163,709.57417h-738.294a1.19069,1.19069,0,0,1,0-2.38137h738.294a1.19069,1.19069,0,0,1,0,2.38137Z" transform="translate(-165.00003 -189.93073)" fill="#3f3d56"/><path d="M634,600.43073H504a6.46539,6.46539,0,0,1-6.5-6.41531V303.846a6.46539,6.46539,0,0,1,6.5-6.41531H634a6.46539,6.46539,0,0,1,6.5,6.41531V594.01542A6.46539,6.46539,0,0,1,634,600.43073Z" transform="translate(-165.00003 -189.93073)" fill="#fff"/><rect x="332.49994" y="201.38965" width="143" height="2" fill="#ccc"/><rect x="332.99994" y="315.5" width="143" height="2" fill="#ccc"/><rect x="377.49994" y="107.5" width="2" height="304" fill="#ccc"/><rect x="427.49994" y="107.5" width="2" height="304" fill="#ccc"/></svg>
'''
'''--- src/assets/undraw_add_notes_re_ln36.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="485.83373" height="483.5" viewBox="0 0 485.83373 483.5" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M677.54186,336.34717H597.80041a11.47812,11.47812,0,0,1-9.06567-4.39356h0a11.62154,11.62154,0,0,1-2.17652-9.96777,201.63052,201.63052,0,0,0-.00049-93.647,11.62425,11.62425,0,0,1,2.17676-9.96729,11.47753,11.47753,0,0,1,9.06592-4.39355h79.74145a11.6235,11.6235,0,0,1,11.439,9.75537,337.96108,337.96108,0,0,1,0,102.8584A11.6235,11.6235,0,0,1,677.54186,336.34717Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M597.80041,219.978a5.51264,5.51264,0,0,0-4.35449,2.1084,5.65943,5.65943,0,0,0-1.05371,4.85351,207.656,207.656,0,0,1,.00048,96.44531,5.65638,5.65638,0,0,0,1.053,4.85254l.00049.00049a5.5112,5.5112,0,0,0,4.35425,2.10889h79.74145a5.58248,5.58248,0,0,0,5.50879-4.667,331.9854,331.9854,0,0,0,0-101.03516,5.58248,5.58248,0,0,0-5.50879-4.667Z" transform="translate(-357.08314 -208.25)" fill="#fff"/><path d="M660.14054,248.82872h-41.845a6.00633,6.00633,0,0,1-5.99977-5.99977v-2.34463a6.00633,6.00633,0,0,1,5.99977-5.99977h41.845a6.00633,6.00633,0,0,1,5.99976,5.99977V242.829A6.00632,6.00632,0,0,1,660.14054,248.82872Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M660.14054,278.4545h-41.845a6.00632,6.00632,0,0,1-5.99977-5.99976V270.1101a6.00632,6.00632,0,0,1,5.99977-5.99976h41.845a6.00632,6.00632,0,0,1,5.99976,5.99976v2.34464A6.00632,6.00632,0,0,1,660.14054,278.4545Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M660.14054,308.08029h-41.845a6.00633,6.00633,0,0,1-5.99977-5.99977v-2.34463a6.00632,6.00632,0,0,1,5.99977-5.99976h41.845a6.00632,6.00632,0,0,1,5.99976,5.99976v2.34463A6.00632,6.00632,0,0,1,660.14054,308.08029Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M827.54186,412.34717H747.80041a11.47812,11.47812,0,0,1-9.06567-4.39356h0a11.62154,11.62154,0,0,1-2.17652-9.96777,201.63052,201.63052,0,0,0-.00049-93.647,11.62425,11.62425,0,0,1,2.17676-9.96729,11.47753,11.47753,0,0,1,9.06592-4.39355h79.74145a11.6235,11.6235,0,0,1,11.439,9.75537,337.96108,337.96108,0,0,1,0,102.8584A11.6235,11.6235,0,0,1,827.54186,412.34717Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M747.80041,295.978a5.51264,5.51264,0,0,0-4.35449,2.1084,5.65943,5.65943,0,0,0-1.05371,4.85351,207.656,207.656,0,0,1,.00048,96.44531,5.65638,5.65638,0,0,0,1.053,4.85254l.00049.00049a5.5112,5.5112,0,0,0,4.35425,2.10889h79.74145a5.58248,5.58248,0,0,0,5.50879-4.667,331.9854,331.9854,0,0,0,0-101.03516,5.58248,5.58248,0,0,0-5.50879-4.667Z" transform="translate(-357.08314 -208.25)" fill="#fff"/><path d="M668.54186,498.84717H588.80041a11.97546,11.97546,0,0,1-9.45825-4.584,12.1192,12.1192,0,0,1-2.27-10.394,201.13112,201.13112,0,0,0-.00049-93.41357,12.12077,12.12077,0,0,1,2.27026-10.39356,11.97561,11.97561,0,0,1,9.4585-4.584h79.74145a12.12667,12.12667,0,0,1,11.93311,10.1792,338.45925,338.45925,0,0,1,0,103.01074A12.12668,12.12668,0,0,1,668.54186,498.84717Z" transform="translate(-357.08314 -208.25)" fill="#f2f2f2"/><path d="M810.14054,339.82872h-41.845a6.00633,6.00633,0,0,1-5.99977-5.99977v-2.34463a6.00633,6.00633,0,0,1,5.99977-5.99977h41.845a6.00633,6.00633,0,0,1,5.99976,5.99977V333.829A6.00632,6.00632,0,0,1,810.14054,339.82872Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M810.14054,369.4545h-41.845a6.00632,6.00632,0,0,1-5.99977-5.99976V361.1101a6.00632,6.00632,0,0,1,5.99977-5.99976h41.845a6.00632,6.00632,0,0,1,5.99976,5.99976v2.34464A6.00632,6.00632,0,0,1,810.14054,369.4545Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><circle cx="271.81102" cy="228.5" r="23" fill="#fff"/><path d="M639.89416,433.75h-8v-8a3,3,0,0,0-6,0v8h-8a3,3,0,0,0,0,6h8v8a3,3,0,0,0,6,0v-8h8a3,3,0,0,0,0-6Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M657.89416,225.25h-42a4.50508,4.50508,0,0,1-4.5-4.5v-8a4.50508,4.50508,0,0,1,4.5-4.5h42a4.50508,4.50508,0,0,1,4.5,4.5v8A4.50508,4.50508,0,0,1,657.89416,225.25Z" transform="translate(-357.08314 -208.25)" fill="#ccc"/><path d="M809.89416,302.25h-42a4.50508,4.50508,0,0,1-4.5-4.5v-8a4.50508,4.50508,0,0,1,4.5-4.5h42a4.50508,4.50508,0,0,1,4.5,4.5v8A4.50508,4.50508,0,0,1,809.89416,302.25Z" transform="translate(-357.08314 -208.25)" fill="#ccc"/><polygon points="88.596 471.061 100.856 471.061 104.689 423.773 88.594 423.773 88.596 471.061" fill="#ffb8b8"/><path d="M442.55234,675.30845l24.1438-.001h.001a15.38605,15.38605,0,0,1,15.38647,15.38623v.5l-39.53051.00146Z" transform="translate(-357.08314 -208.25)" fill="#2f2e41"/><polygon points="22.596 471.061 34.856 471.061 40.689 423.773 22.594 423.773 22.596 471.061" fill="#ffb8b8"/><path d="M376.55234,675.30845l24.1438-.001h.001a15.38605,15.38605,0,0,1,15.38647,15.38623v.5l-39.53051.00146Z" transform="translate(-357.08314 -208.25)" fill="#2f2e41"/><path d="M381.85436,664.37256a4.98141,4.98141,0,0,1-3.375-1.31836h0a4.961,4.961,0,0,1-1.61572-3.53711L371.947,483.30371l69.81115,17.45215,21.53955,64.61768a70.461,70.461,0,0,1,3.54541,25.82421l-2.67456,62.63672a4.996,4.996,0,0,1-4.99438,4.75879h-11.709a5.02349,5.02349,0,0,1-4.95483-4.32959l-8.3689-69.1416a37.82338,37.82338,0,0,0-5.53173-15.16406l-16.46949-26.07617a1.00011,1.00011,0,0,0-1.83764.41015L397.378,659.38037a4.99328,4.99328,0,0,1-4.687,4.39649l-10.552.58691C382.04406,664.36914,381.94934,664.37256,381.85436,664.37256Z" transform="translate(-357.08314 -208.25)" fill="#2f2e41"/><circle cx="73.05767" cy="136.40609" r="24.56103" fill="#ffb8b8"/><path d="M441.4237,507.92236a5.07628,5.07628,0,0,1-1.25293-.15918H440.17l-69.26428-17.75976a4.9985,4.9985,0,0,1-3.66285-5.81543L383.15,398.49707a31.21377,31.21377,0,0,1,18.24975-22.53955,30.11308,30.11308,0,0,1,28.26563,2.07519c.96973.605,1.94653,1.26465,2.90259,1.96094a30.96046,30.96046,0,0,1,12.57885,24.5293l1.2649,98.32861a5.00656,5.00656,0,0,1-4.988,5.0708Z" transform="translate(-357.08314 -208.25)" fill="#81c784"/><path d="M378.03248,508.93008a10.05576,10.05576,0,0,1,4.214-14.83233l-3.08079-35.6018,16.326,8.84848.42262,32.4515a10.11027,10.11027,0,0,1-17.8818,9.13415Z" transform="translate(-357.08314 -208.25)" fill="#ffb8b8"/><path d="M383.86511,489.38916a5.53224,5.53224,0,0,1-1.36573-.17285,5.49559,5.49559,0,0,1-3.97192-3.98633l-8.02319-31.88379a47.37028,47.37028,0,0,1,3.76123-33.13476l16.80884-32.88184a15.54083,15.54083,0,0,1,18.8081-11.01855,15.35574,15.35574,0,0,1,9.47485,7.10058,15.56707,15.56707,0,0,1,1.65406,11.91309l-23.92749,53.50586.28418,32.03564a5.5186,5.5186,0,0,1-3.58448,5.20459l-8.00732,2.97363A5.48,5.48,0,0,1,383.86511,489.38916Z" transform="translate(-357.08314 -208.25)" fill="#81c784"/><path d="M498.40087,495.83467a10.05578,10.05578,0,0,1-8.493-12.86954l-28.99341-20.88926,17.35654-6.60182,24.8717,20.84893a10.11027,10.11027,0,0,1-4.74186,19.51169Z" transform="translate(-357.08314 -208.25)" fill="#ffb8b8"/><path d="M483.223,480.58057a5.52249,5.52249,0,0,1-2.46265-.58155L451.3612,465.28174a47.381,47.381,0,0,1-22.66064-24.46533L414.74328,406.626a15.54363,15.54363,0,0,1,3.91772-21.44434,15.35158,15.35158,0,0,1,11.59034-2.54346,15.56975,15.56975,0,0,1,10.08081,6.51221l24.94507,53.03955L489.743,462.87256a5.51764,5.51764,0,0,1,1.60669,6.11182l-2.96973,8.0083a5.474,5.474,0,0,1-2.00684,2.59619,5.49717,5.49717,0,0,1-3.15014.9917Z" transform="translate(-357.08314 -208.25)" fill="#81c784"/><path d="M424.98332,369.5931c1.305.571,3.97732-9.82732,2.78025-11.90707-1.78025-3.09293-1.675-3.07072-2.85681-5.117s-1.44623-4.84712.08417-6.64761,5.072-1.56163,5.77042.69581c-.4493-4.2878,3.79189-7.73454,7.993-8.70313s8.63244-.36723,12.85668-1.22917c4.90243-1.00032,10.00316-5.10972,8.04719-10.5007a7.5931,7.5931,0,0,0-1.48106-2.43408c-2.25993-2.54094-5.42117-3.62594-8.512-4.675-6.43006-2.18246-13.036-4.39233-19.82212-4.15141A28.7977,28.7977,0,0,0,404.3967,333.533a26.15571,26.15571,0,0,0-1.08344,4.02534c-2.32924,12.52423,4.94368,24.87794,16.75623,29.64715Z" transform="translate(-357.08314 -208.25)" fill="#2f2e41"/><polygon points="38.9 273.343 39.457 240.414 56.9 205.343 42.9 241.343 38.9 273.343" opacity="0.2"/><path d="M554.16035,564.23244,480.522,533.63692a11.47817,11.47817,0,0,1-6.68609-7.53565h0a11.62155,11.62155,0,0,1,1.81454-10.04,201.63062,201.63062,0,0,0,35.9304-86.47983,11.62422,11.62422,0,0,1,5.83445-8.36925,11.47751,11.47751,0,0,1,10.05779-.57884l73.63839,30.59552a11.62349,11.62349,0,0,1,6.8205,13.39769,337.96147,337.96147,0,0,1-39.46512,94.98607A11.6235,11.6235,0,0,1,554.16035,564.23244Z" transform="translate(-357.08314 -208.25)" fill="#e6e6e6"/><path d="M525.17093,426.17415a5.51263,5.51263,0,0,0-4.83017.27629,5.65945,5.65945,0,0,0-2.83529,4.07775,207.65608,207.65608,0,0,1-37.00407,89.064,5.65636,5.65636,0,0,0-.88946,4.88515l.00027.00064a5.51116,5.51116,0,0,0,3.21185,3.61814l73.63839,30.59552a5.58247,5.58247,0,0,0,6.87782-2.19616,331.98566,331.98566,0,0,0,38.76558-93.30238,5.58248,5.58248,0,0,0-3.29652-6.42343Z" transform="translate(-357.08314 -208.25)" fill="#fff"/><path d="M564.38028,494.28148l-38.6424-16.05527a6.00633,6.00633,0,0,1-3.23855-7.84259l.8996-2.16518a6.00632,6.00632,0,0,1,7.84258-3.23856l38.6424,16.05527a6.00634,6.00634,0,0,1,3.23855,7.84259l-.8996,2.16518A6.00632,6.00632,0,0,1,564.38028,494.28148Z" transform="translate(-357.08314 -208.25)" fill="#81c784"/><path d="M553.01334,521.63984l-38.6424-16.05527a6.00633,6.00633,0,0,1-3.23855-7.84259l.89959-2.16518a6.00634,6.00634,0,0,1,7.84259-3.23856L558.517,508.39351a6.00633,6.00633,0,0,1,3.23856,7.84258l-.8996,2.16519A6.00632,6.00632,0,0,1,553.01334,521.63984Z" transform="translate(-357.08314 -208.25)" fill="#81c784"/><path d="M579.86437,455.832a4.48944,4.48944,0,0,1-1.68725-.33057l-38.938-15.74267a4.50518,4.50518,0,0,1-2.48535-5.8584l2.99878-7.417a4.50027,4.50027,0,0,1,5.85864-2.48486l38.938,15.74267a4.50518,4.50518,0,0,1,2.48535,5.8584l-2.99878,7.417a4.51079,4.51079,0,0,1-4.17139,2.81543Z" transform="translate(-357.08314 -208.25)" fill="#ccc"/><path d="M498.08314,691.75h-140a1,1,0,1,1,0-2h140a1,1,0,0,1,0,2Z" transform="translate(-357.08314 -208.25)" fill="#ccc"/></svg>
'''
'''--- src/assets/wave.svg ---
<?xml version="1.0" standalone="no"?>
<svg xmlns:xlink="http://www.w3.org/1999/xlink" id="wave" style="transform:rotate(0deg); transition: 0.3s" viewBox="0 0 1440 490" version="1.1" xmlns="http://www.w3.org/2000/svg"><defs><linearGradient id="sw-gradient-0" x1="0" x2="0" y1="1" y2="0"><stop stop-color="rgba(129, 199, 132, 1)" offset="0%"/><stop stop-color="rgba(129, 199, 132, 1)" offset="100%"/></linearGradient></defs><path style="transform:translate(0, 0px); opacity:0.4" fill="url(#sw-gradient-0)" d="M0,441L30,392C60,343,120,245,180,236.8C240,229,300,310,360,334.8C420,359,480,327,540,326.7C600,327,660,359,720,367.5C780,376,840,359,900,294C960,229,1020,114,1080,114.3C1140,114,1200,229,1260,261.3C1320,294,1380,245,1440,261.3C1500,278,1560,359,1620,367.5C1680,376,1740,310,1800,236.8C1860,163,1920,82,1980,98C2040,114,2100,229,2160,277.7C2220,327,2280,310,2340,285.8C2400,261,2460,229,2520,179.7C2580,131,2640,65,2700,98C2760,131,2820,261,2880,261.3C2940,261,3000,131,3060,106.2C3120,82,3180,163,3240,171.5C3300,180,3360,114,3420,81.7C3480,49,3540,49,3600,73.5C3660,98,3720,147,3780,147C3840,147,3900,98,3960,65.3C4020,33,4080,16,4140,49C4200,82,4260,163,4290,204.2L4320,245L4320,490L4290,490C4260,490,4200,490,4140,490C4080,490,4020,490,3960,490C3900,490,3840,490,3780,490C3720,490,3660,490,3600,490C3540,490,3480,490,3420,490C3360,490,3300,490,3240,490C3180,490,3120,490,3060,490C3000,490,2940,490,2880,490C2820,490,2760,490,2700,490C2640,490,2580,490,2520,490C2460,490,2400,490,2340,490C2280,490,2220,490,2160,490C2100,490,2040,490,1980,490C1920,490,1860,490,1800,490C1740,490,1680,490,1620,490C1560,490,1500,490,1440,490C1380,490,1320,490,1260,490C1200,490,1140,490,1080,490C1020,490,960,490,900,490C840,490,780,490,720,490C660,490,600,490,540,490C480,490,420,490,360,490C300,490,240,490,180,490C120,490,60,490,30,490L0,490Z"/></svg>
'''
'''--- src/assets/wip.svg ---
<svg xmlns="http://www.w3.org/2000/svg" data-name="Layer 1" width="1177.82" height="724.47" viewBox="0 0 1177.82 724.47" xmlns:xlink="http://www.w3.org/1999/xlink"><title>under construction</title><path d="M1188.91,553.07a241.36,241.36,0,0,1-7.07,58.24q-2.38,9.63-5.53,18.86a222.72,222.72,0,0,1-8.92,22.32q-2.55,5.52-5.39,10.82a145.56,145.56,0,0,1-12.17,58.49,150.79,150.79,0,0,1-73.18,75.4,153.93,153.93,0,0,1-65.33,15H234.68a195.68,195.68,0,0,1-98.42-26.31l-.46-.26q-6.39-3.74-12.46-7.92a195.41,195.41,0,0,1-25.57-21.08A190.28,190.28,0,0,1,69.66,721.8a185.86,185.86,0,0,1-28.59-99.23c-18.95-33.25-30-73.08-30-115.88,0-54,17.56-103.26,46.41-140.55a197.6,197.6,0,0,1,19.71-21.93,183.42,183.42,0,0,1,22.54-18.45,175.38,175.38,0,0,1,20-12c2.89-1.47,5.79-2.86,8.74-4.15,2.59-1.15,5.21-2.22,7.86-3.23q4.77-1.81,9.66-3.33t9.65-2.66q7-1.71,14.24-2.78c4-.59,8-1,12-1.31,3.18-.24,6.39-.37,9.62-.41h1.75c3.56,0,7.1.14,10.61.38.37-.74.77-1.49,1.14-2.22,1.4-2.67,2.85-5.33,4.31-7.93a.25.25,0,0,1,0-.07c.25-.46.5-.91.76-1.35,1.18-2.13,2.41-4.24,3.67-6.33.58-1,1.15-1.94,1.74-2.88a7.66,7.66,0,0,1,.41-.68q.9-1.5,1.83-3,4.63-7.4,9.63-14.54l.85-1.22c.52-.74,1-1.46,1.58-2.2,1.38-1.93,2.8-3.87,4.23-5.77,1-1.36,2-2.71,3.08-4q3.9-5,8-10t8.52-9.87c.4-.45.8-.89,1.22-1.33l4.27-4.66h0c.21-.22.39-.42.59-.62h0c.51-.55,1-1.1,1.55-1.63,2.29-2.43,4.64-4.81,7-7.18a381.2,381.2,0,0,1,38.3-33.37c.53-.42,1.07-.82,1.6-1.22,2.54-1.91,5.12-3.8,7.7-5.66a405.31,405.31,0,0,1,44.41-27.7c1.06-.61,2.14-1.18,3.23-1.74a424,424,0,0,1,42.49-19.56c7.91-3.13,16-6.07,24.14-8.76,5.42-1.78,10.86-3.47,16.37-5.06Q459.4,102,472.5,99.05a463.35,463.35,0,0,1,78.24-10.66q12-.61,24.27-.63a465,465,0,0,1,117,14.8,4.22,4.22,0,0,0,3.63,1.89H699c1.46.4,2.91.8,4.37,1.22q12.23,3.52,24.11,7.69l2,.72a430.44,430.44,0,0,1,56.91,25,410.69,410.69,0,0,1,47.65,29.44q3.51,2.52,6.92,5.08,4.14-2.65,8.42-5.08a165.62,165.62,0,0,1,34.88-14.87,159.1,159.1,0,0,1,78.24-3.06c33.25,7.05,63.35,24.55,87.66,49.44a204.55,204.55,0,0,1,26.29,33.38c.55.86,1.1,1.73,1.63,2.61a220,220,0,0,1,16.74,33.37c.17.43.34.83.49,1.25a231.09,231.09,0,0,1,10.3,33.35c.12.58.26,1.15.38,1.73a240.11,240.11,0,0,1,4.92,33.37c0,.4,0,.81.08,1.23q.63,8.71.64,17.6c0,5.3-.18,10.56-.51,15.78,0,.57-.08,1.16-.13,1.75-.09,1.51-.22,3-.35,4.52a189.79,189.79,0,0,1,21.38,20.17q4.37,4.77,8.46,9.9a210.61,210.61,0,0,1,21.8,33.37C1179.19,475.33,1188.91,512.88,1188.91,553.07Z" transform="translate(-11.09 -87.76)" fill="#81C784" opacity="0.1"/><path d="M1075.91,793.5c0,6.83-23.53,13.23-64.59,18.73H234.68a195.68,195.68,0,0,1-98.42-26.31l-.46-.26c11.8-4.3,33.1-8.31,62.09-11.93h0l1.3-.16c13-1.59,27.53-3.1,43.41-4.53.4,0,.81-.06,1.21-.11h0q18.9-1.68,40.21-3.15c.45,0,.89-.08,1.34-.1q8.22-.59,16.78-1.12h0l2.2-.14c41.55-2.58,88.78-4.64,140-6h.06q10.76-.3,21.75-.53,12.22-.29,24.74-.51c6.37-.14,12.82-.24,19.29-.34h.15c29.19-.44,59.35-.66,90.19-.66,76.26,0,148.34,1.39,212.21,3.89h.18c9.82.38,19.46.8,28.86,1.23l8,.38q15.91.76,31,1.63h0C999.07,770.24,1075.91,781.17,1075.91,793.5Z" transform="translate(-11.09 -87.76)" fill="#81C784" opacity="0.1"/><g opacity="0.2"><path d="M691.37,751.79A19,19,0,0,1,691,755q-10.44-1.66-21-3c0-.28,0-.57,0-.86a16.88,16.88,0,0,1,2.5-8.48c2.06-3.26,5.19-5.3,8.64-5.19s6.44,2.34,8.29,5.71A16.87,16.87,0,0,1,691.37,751.79Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><ellipse cx="681.21" cy="734.33" rx="14.01" ry="10.7" transform="translate(-85.32 1304.28) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="681.75" cy="717.21" rx="14.01" ry="10.7" transform="translate(-67.68 1288.24) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="682.29" cy="700.09" rx="14.01" ry="10.7" transform="translate(-50.05 1272.2) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="682.83" cy="682.97" rx="14.01" ry="10.7" transform="translate(-32.42 1256.16) rotate(-88.19)" fill="#3f3d56"/><path d="M646.47,564.55a49.66,49.66,0,0,1-3.8-6l28.26-3.73-30.42-.73a51.38,51.38,0,0,1,.31-40.64l40.12,22.45-36.75-28.84a51.28,51.28,0,1,1,82.84,60,50.8,50.8,0,0,1,5.55,9.53l-37.09,17.8,39.33-11.83A51.34,51.34,0,0,1,725,630.47a51.28,51.28,0,1,1-80.56-2.54,51.28,51.28,0,0,1,2-63.38Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M737,599.13a51,51,0,0,1-12,31.34,51.28,51.28,0,1,1-80.56-2.54C637.87,619,737.18,593.38,737,599.13Z" transform="translate(-11.09 -87.76)" opacity="0.1"/></g><g opacity="0.2"><path d="M539.37,751.79A19,19,0,0,1,539,755q-10.44-1.66-21-3c0-.28,0-.57,0-.86a16.88,16.88,0,0,1,2.5-8.48c2.06-3.26,5.19-5.3,8.64-5.19s6.44,2.34,8.29,5.71A16.87,16.87,0,0,1,539.37,751.79Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><ellipse cx="529.21" cy="734.33" rx="14.01" ry="10.7" transform="translate(-232.53 1152.36) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="529.75" cy="717.21" rx="14.01" ry="10.7" transform="translate(-214.89 1136.32) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="530.29" cy="700.09" rx="14.01" ry="10.7" transform="translate(-197.26 1120.28) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="530.83" cy="682.97" rx="14.01" ry="10.7" transform="translate(-179.63 1104.24) rotate(-88.19)" fill="#3f3d56"/><path d="M494.47,564.55a49.66,49.66,0,0,1-3.8-6l28.26-3.73-30.42-.73a51.38,51.38,0,0,1,.31-40.64l40.12,22.45-36.75-28.84a51.28,51.28,0,1,1,82.84,60,50.8,50.8,0,0,1,5.55,9.53l-37.09,17.8,39.33-11.83A51.34,51.34,0,0,1,573,630.47a51.28,51.28,0,1,1-80.56-2.54,51.28,51.28,0,0,1,2-63.38Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M585,599.13a51,51,0,0,1-12,31.34,51.28,51.28,0,1,1-80.56-2.54C485.87,619,585.18,593.38,585,599.13Z" transform="translate(-11.09 -87.76)" opacity="0.1"/></g><g opacity="0.2"><path d="M954.57,762.73a37.3,37.3,0,0,1-.73,6.08q-20.1-3.21-40.49-5.74c0-.54,0-1.09,0-1.65a32.5,32.5,0,0,1,4.82-16.33c4-6.27,10-10.2,16.63-10s12.4,4.51,16,11A32.53,32.53,0,0,1,954.57,762.73Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><ellipse cx="935" cy="729.11" rx="26.98" ry="20.61" transform="translate(165.69 1552.9) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="936.04" cy="696.15" rx="26.98" ry="20.61" transform="translate(199.64 1522.02) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="937.08" cy="663.2" rx="26.98" ry="20.61" transform="translate(233.59 1491.14) rotate(-88.19)" fill="#3f3d56"/><ellipse cx="938.12" cy="630.24" rx="26.98" ry="20.61" transform="matrix(0.03, -1, 1, 0.03, 267.53, 1460.26)" fill="#3f3d56"/><path d="M868.12,402.27a99.27,99.27,0,0,1-7.31-11.53l54.4-7.18-58.55-1.41a98.9,98.9,0,0,1,.58-78.24l77.25,43.21L863.75,291.6a98.72,98.72,0,1,1,159.47,115.56,98.71,98.71,0,0,1,10.69,18.35L962.5,459.8,1038.21,437a98.75,98.75,0,0,1-18.83,92.15,98.72,98.72,0,1,1-155.1-4.89,98.75,98.75,0,0,1,3.84-122Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M1042.42,468.83a98.34,98.34,0,0,1-23,60.34,98.72,98.72,0,1,1-155.1-4.89C851.58,507.07,1042.77,457.76,1042.42,468.83Z" transform="translate(-11.09 -87.76)" opacity="0.1"/></g><polygon points="157.82 676.73 168.31 676.7 183.1 676.7 201.8 372.92 386.99 63.89 378.94 55.25 378.94 33.37 178.66 365.76 157.82 676.73" fill="#f1c0c0"/><polygon points="169.43 676.7 183.1 676.7 201.8 372.92 386.99 63.89 378.94 55.25 187.92 368.29 169.43 676.7" opacity="0.1"/><polygon points="126.91 679.26 606.76 715.98 607.17 716.01 1071.56 687.45 1071.91 687.43 1071.91 667.82 560.21 658.43 133.3 658.02 130.18 658.02 129.84 660.22 126.91 679.26" fill="#f1c0c0"/><polygon points="126.91 679.26 606.76 715.98 607.17 716.01 1071.56 687.45 1071.91 687.07 1071.91 668.23 1071.5 668.23 606.76 683.75 133.3 658.02 133.23 658.02 132.39 658.57 129.84 660.22 126.91 679.26" opacity="0.1"/><polygon points="126.91 679.26 606.76 715.98 606.76 683.75 132.39 658.57 129.84 660.22 126.91 679.26" opacity="0.1"/><polygon points="378.88 54.84 590.43 281.9 583.89 681.3 601.86 683.47 602.16 683.51 620.13 683.51 622.28 299.05 1018.41 431.37 1025.09 666.97 1039.55 668.59 1044.45 669.14 1033.11 415.03 619.01 269.65 391.95 33.6 378.88 33.6 378.88 54.84" fill="#f1c0c0"/><polygon points="620.65 291.7 622.28 299.05 1018.41 431.37 1025.09 666.97 1039.55 668.59 1028.21 426.47 620.65 291.7" opacity="0.1"/><polygon points="378.88 54.84 590.43 281.9 583.89 681.3 601.86 683.47 606.76 268.83 378.88 33.6 378.88 54.84" opacity="0.1"/><polygon points="621.42 451.99 766.71 480.6 766.76 480.61 1021.23 530.74 1032.88 526.07 1032.84 525.25 1032.08 509 621.57 426.05 621.42 451.99" fill="#f1c0c0"/><polygon points="766.76 480.61 1021.23 530.74 1032.88 526.07 1032.84 525.25 766.76 480.61" opacity="0.1"/><polygon points="776.49 350.56 780.42 566.9 782.45 677.89 800.34 677.29 811.6 676.91 808.1 353.69 800.34 351.11 798.64 350.56 776.49 350.56" fill="#f1c0c0"/><polygon points="776.65 350.51 776.65 350.56 780.42 566.9 782.45 677.89 800.34 677.29 800.34 350.51 776.65 350.51" opacity="0.1"/><path d="M507.35,493.57a22.79,22.79,0,0,1,3,1.95,19.85,19.85,0,0,1,3,3.29c4.29,5.55,8.25,12,7.83,19a7.73,7.73,0,0,1-2.23,5.5c-1.77,1.51-4.31,1.58-6.63,1.58-2.52,0-5.17,0-7.35-1.3s-4-3.83-6.58-3.77a3.37,3.37,0,0,1-1.1,0c-.89-.29-1.07-1.46-1.65-2.2-1-1.33-3.11-1-4.68-.42s-3.31,1.45-4.86.78a5.05,5.05,0,0,1-2.11-2.11c-3.71-6-4.5-13.21-5.2-20.18-.43-4.24-3.71-18.7,5.34-15.41,4,1.44,7.74,4.32,11.38,6.43Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M498.41,495a4.46,4.46,0,0,0,5.49-.22,8.27,8.27,0,0,0,2.67-5.18c1-.31,1.51,1,2.15,1.8,1.12,1.36,3.4,1.34,4.42,2.79.71,1,.55,2.39,1.05,3.52.65,1.46,2.26,2.22,3.36,3.4a11.58,11.58,0,0,1,2.2,4.39l1.64,4.92a24.32,24.32,0,0,1,1.5,6.37,8.25,8.25,0,0,1-1.9,6.09c-2.2,2.37-5.81,2.62-9,2.55a11.58,11.58,0,0,1-3.16-.37c-2.83-.88-4.64-3.73-5.39-6.6s-.67-5.88-1.11-8.82a34.57,34.57,0,0,0-2.5-8.38c-.88-2.08-3.3-5.18-3.26-7.39C497.29,493.87,497.81,494.53,498.41,495Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M502,484.87a16.51,16.51,0,0,1-.81-4.39c0-3,1.37-5.82,2.75-8.5l-11.43,1.55c-1.38.19-2.92.47-3.7,1.62a4,4,0,0,0,0,3.69,18.86,18.86,0,0,1,1.36,3.57,17.83,17.83,0,0,0,.37,3.21,6.8,6.8,0,0,0,1.47,2.07c3.27,3.62,5.72,7.89,8.16,12.12-.07-.12,6.89-5.51,6.61-7.27-.16-1-2.17-2.2-2.81-3.16A16.09,16.09,0,0,1,502,484.87Z" transform="translate(-11.09 -87.76)" fill="#be6f72"/><polygon points="588.91 358.04 588.91 367.89 420.24 400.79 411.49 406.09 381.3 406.09 381.3 400.54 547.02 360.5 588.91 358.04" fill="#f1c0c0"/><polygon points="588.91 367.89 420.24 400.79 411.49 406.09 381.3 406.09 548.25 370.36 588.91 367.89" opacity="0.1"/><path d="M464.58,725.42a13.07,13.07,0,0,0-15.9-3.38,4.19,4.19,0,0,0-1.46,1.14c-1,1.4-.36,3.33-.27,5.06.23,4.22-3.13,7.65-6.15,10.6-1.62,1.58-3.27,3.27-4,5.42s-.19,4.88,1.77,6a7.37,7.37,0,0,0,2.74.76,29.57,29.57,0,0,0,9.7.27c3.19-.61,6.32-2.42,7.7-5.36A5.65,5.65,0,0,1,460,743.8c1.76-1.39,4.46.24,6.46-.75,1.65-.82,1.72-2.11,1.74-3.81C468.26,734.54,467.56,729.22,464.58,725.42Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M488.58,725.24c1.23,3.24,1.4,6.77,1.56,10.23.09,2,.15,4.14-.93,5.83s-3.19,2.58-5.21,3c-4.17.86-9,.05-11.69-3.26-2.06-2.53-2.49-6-2.11-9.28.32-2.69,1-5.84-.93-7.75-.5-.51-1.15-.87-1.61-1.42-1-1.22-.84-3.06-.3-4.56a19.81,19.81,0,0,0,1.57-4.51c.08-.74,13.54.52,14.78,1.13,1.69.83,1.43,2.22,1.94,3.9C486.36,720.89,487.72,723,488.58,725.24Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M491.05,581.58c2.64,1.71,3.66,5.07,4.07,8.19,1.13,8.55-.85,17.19-1,25.82-.14,12.09,3.36,24.4.37,36.11-1.79,7-.27,15-1.95,22.07-.5,2.1-1.42,4.08-1.9,6.18-1,4.55.05,9.31,1.46,13.76a14.21,14.21,0,0,1,.85,3.73,13.42,13.42,0,0,1-1.46,5.64l-6,14.19c-.67,1.59-3.31,1.85-5,2.06-3.18.38-6.73.65-9.26-1.32s-3.14-5.27-3.53-8.35a128,128,0,0,1-1-17.83,14.69,14.69,0,0,0-.41-4.63c-.55-1.71-1.76-3.19-2.09-5-.42-2.34.77-4.64,1.21-7a21.09,21.09,0,0,0-.1-6.49c-.39-3.2-.84-6.4-1.35-9.58-.72-4.45.31-8.84,1-13.3.65-4.19-.18-8.46-1-12.62a34.79,34.79,0,0,1-1.25,10c-.53,1.59-1.29,3.11-1.75,4.73-2.05,7.27,2.32,14.9,1.7,22.43-.29,3.52-1.67,7-1.28,10.47.27,2.54,1.45,4.87,2.26,7.29s1.23,5.19,0,7.45c-3.25,6.14-.82,14.49,2.09,20.79a28.06,28.06,0,0,1,1.54,3.46c.86,2.84.14,5.89.37,8.85a5.58,5.58,0,0,1-4.69-1.41c-.44-.46-.8-1-1.23-1.48a12.21,12.21,0,0,0-4.18-2.61,5.49,5.49,0,0,0-3-.69,6,6,0,0,0-2.85,1.77,27.94,27.94,0,0,1-3.14,2.39,3.72,3.72,0,0,1-1.6.71,1.41,1.41,0,0,1-1.47-.75,1.78,1.78,0,0,1-.11-.52,79.14,79.14,0,0,1-.59-9.1c0-5.23-6.26-8.83-7.05-14-.63-4.17.54-8.42.15-12.62-.19-2.16-.79-4.28-.75-6.44,0-1.4.32-2.77.43-4.16a31.12,31.12,0,0,0-.07-4.63l-.31-4.83c-.3-4.77-.63-9.64-2.51-14a47.57,47.57,0,0,1-3.9-16.08c-.2-3.5-.07-7-.47-10.51-.36-3.17-1.16-6.32-.93-9.5.19-2.46,1-4.84,1.19-7.3.39-4.73-1.41-9.33-2.82-13.86s-2.45-9.55-.6-13.92a4.57,4.57,0,0,1,1.28-1.86,5.58,5.58,0,0,1,2.36-.88A183.11,183.11,0,0,1,483,579.07,17.34,17.34,0,0,1,491.05,581.58Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><circle cx="423.19" cy="371.59" r="16.02" fill="#be6f72"/><path d="M431.18,479.36a5.72,5.72,0,0,1,0,2.79,6.32,6.32,0,0,1-1.05,1.76,45.2,45.2,0,0,1-5.13,5.58,9.29,9.29,0,0,0,4.79,4.73,27.81,27.81,0,0,0,6.61,1.89,9.32,9.32,0,0,0,3.48.24,9.23,9.23,0,0,0,3-1.36l8.9-5.33a17.78,17.78,0,0,0,3.7-2.67,9.11,9.11,0,0,0,2.58-6.26,1.72,1.72,0,0,0-.32-1.18,2.1,2.1,0,0,0-1.22-.51c-3.13-.69-5.6-3.23-7-6.11a32.36,32.36,0,0,1-2.43-9.27l-9.49,5c-1.41.75-2.81,1.5-4.27,2.15-.93.42-2.81.77-3.47,1.62C428.6,474,430.85,477.47,431.18,479.36Z" transform="translate(-11.09 -87.76)" fill="#be6f72"/><path d="M425.06,486.58a10.55,10.55,0,0,0-3.07,4.15c-.62,2,0,4.11.56,6.09a181.7,181.7,0,0,1,6,25.79c.84,6,1.15,12.09,1.56,18.16.84,12.38,2.06,32.12,3.69,44.42,6,.27,11.85-1.48,17.8-2.12,11.12-1.18,22.57,1.52,33.46-1-2.64-10.43-5.28-28.24-7.92-38.66a73.77,73.77,0,0,1-2.42-12.55c-.23-3.05-.09-6.11-.05-9.18.09-6-.24-12-.57-18-.38-7-.76-14-2.42-20.85a3.88,3.88,0,0,0-1.16-2.29c-1-.73-2.3-.47-3.49-.31a15.18,15.18,0,0,1-10.38-2.46c-1.32-.9-3.09-2-4.32-1a4.3,4.3,0,0,0-1,2.13,10.65,10.65,0,0,1-6.26,6.17,31.33,31.33,0,0,1-8.86,1.82,4.35,4.35,0,0,1-2.75-.31c-1.42-.87-1.52-4-3.31-4.21C428.58,482.19,426.12,485.57,425.06,486.58Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M448.72,511c-3.69-3.53-5.31-8.65-8-13a28.94,28.94,0,0,0-6.91-7.6,20.61,20.61,0,0,1-3.76-3.19c-.95-1.17-1.67-2.73-3.11-3.18a3.76,3.76,0,0,0-3.37.93,33.16,33.16,0,0,0-2.5,2.66c-4.24,4.39-11.69,5-15.05,10.08a8.26,8.26,0,0,0-1.79,3.75,29.06,29.06,0,0,0,5.34,20.9,7.1,7.1,0,0,0,3.7,3,11.58,11.58,0,0,0,.72,5.5,147.07,147.07,0,0,0,6.81,18.55,44.87,44.87,0,0,0-1.34,7.19c-.7,6.11-.05,12.31-.71,18.43-.54,5-2,9.87-2.05,14.88,0,.8.07,1.75.76,2.16a2.3,2.3,0,0,0,1.19.25l12.3.37c7.14.21,14.35.42,21.38-.9a8.9,8.9,0,0,0,2.69-.85c2.38-1.33,3.17-4.33,3.55-7a61,61,0,0,0,.59-10.46c1.49,4.71,3.26,9.58,7.76,11.62,2.38,1.08,5.1,1,7.71.93a145.16,145.16,0,0,0,16.79-1.73,2.21,2.21,0,0,0,2.45-2.57l.06-5.46c.12-11.09-2.63-21.69-3.7-32.73-.34-3.48-.31-7-1.16-10.41-.35-1.43-.86-2.83-1.17-4.27a30.52,30.52,0,0,1-.5-4.27l-.78-11c-.37-5.09-.9-10-1.29-15.08a73,73,0,0,0-2.14-14.66c-.87-3-2.68-6.4-5.81-6.77-1.67-.19-3.29.54-4.88,1.05a19.72,19.72,0,0,1-12-.05,16.9,16.9,0,0,0-3.74-1,3.67,3.67,0,0,0-3.42,1.42,5.13,5.13,0,0,0-.53,2.52C452.34,491,451.47,501.29,448.72,511Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M432.63,511.3c-4.61-4.86-9.34-9.81-15.28-12.9-2.34-1.22-5-2.14-7.59-1.68s-5,2.71-4.88,5.34c.08,1.63,1.07,3.07,1.38,4.67.36,1.8-.16,3.72.4,5.46a9.24,9.24,0,0,0,2,3.07l7.08,8.39c3,3.5,6,7.05,9.86,9.47s8.86,3.55,13.1,1.83a16.1,16.1,0,0,0,7.18-6.59c1.76-2.8,3-5.86,4.65-8.75a43.45,43.45,0,0,1,10-12.13c-2.08-.54-4.69-1.3-6-3a9.91,9.91,0,0,1-.95-1.72l-1.62-3.5a4,4,0,0,0-3,1.13,25.16,25.16,0,0,1-2.23,2.27c-1.41,1.06-3.32,1.35-4.6,2.56a12.19,12.19,0,0,0-1.34,1.68A11.22,11.22,0,0,1,432.63,511.3Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M460.9,490.39c3.47-6.33,3.31-13.92,4.3-21.07a9.62,9.62,0,0,1,1.91-5.23c2-2.26,5.53-2.29,8.55-2,.89.1,2,.52,1.95,1.41a1.8,1.8,0,0,1-.45.85,23.79,23.79,0,0,0-4.94,13.12c1.57,1.09,4-1.15,5.51,0,1,.84.54,2.5-.06,3.7q-2.09,4.17-4.31,8.28a26.59,26.59,0,0,1-4.57,6.59c-1.27,1.22-2.76,2.18-4.05,3.38-3,2.81-4.81,6.78-7.91,9.52a1.62,1.62,0,0,1-1,.51,1.68,1.68,0,0,1-1.05-.47,15.16,15.16,0,0,1-3.78-4.57c-1.18-2.18-1-2.82.86-4.36C455.34,497.3,458.73,494.35,460.9,490.39Z" transform="translate(-11.09 -87.76)" fill="#be6f72"/><path d="M426.83,507c.6.37,1.34.79,2,.48a2.08,2.08,0,0,0,.67-.65,23.54,23.54,0,0,0,2.84-4.94,1.9,1.9,0,0,0,.21-.8c0-.64-.57-1.11-1.1-1.48a40.76,40.76,0,0,0-9.09-4.32c-2.64-1-5.4-1.87-8.2-1.62a7.82,7.82,0,0,0-5.47,2.78c-2,2.57,1.35,3.35,3.45,4.28C417,502.94,422.26,504.22,426.83,507Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M423.68,524a1.47,1.47,0,0,0,.42,1.26c.29-1.42-.09-2.92.21-4.35.44-2.15,2.53-3.77,2.71-5.93C423.19,514.23,423.71,521.68,423.68,524Z" transform="translate(-11.09 -87.76)" opacity="0.1"/><polygon points="588.91 358.04 588.91 367.89 548.25 370.36 547.02 360.5 588.91 358.04" opacity="0.2"/><path d="M419.86,461.73c2.54-2.07,1.07-6.41,2.79-9.19,1-1.52,2.69-2.32,4.35-3a19.79,19.79,0,0,1,6.35-1.76,7.37,7.37,0,0,1,6,2.21c.65.74,1.09,1.64,1.7,2.41a6.5,6.5,0,0,0,6.3,2.18c1.33-.3,2.71-1.31,2.62-2.67a3.77,3.77,0,0,0-1.2-2.14l-2.86-3.17c-3.25-3.6-6.86-7.42-11.63-8.32-3.32-.63-6.72.26-9.92,1.33-1.29.43-2.74,1.07-3.1,2.38-.24.9.12,1.88-.09,2.79-.41,1.81-2.73,2.42-3.81,3.94s-.75,3.32-1.06,5-1.21,3.32-1.32,5.06c-.07,1.05.46,3,1.64,3.38S419.13,460.48,419.86,461.73Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M449,450.47a30,30,0,0,0-5.32-12.16,21.31,21.31,0,0,0-9.47-7.52,13.56,13.56,0,0,0-11.79.93,17.12,17.12,0,0,0-5.89,7.43c-2.59,5.58-3.55,12.4-.54,17.76,1.2-1.46,3.26-.8,5.08-1.33,2.28-.65,4.21-2.17,6.38-3.12C434,449.57,442,451.91,449,450.47Z" transform="translate(-11.09 -87.76)" fill="#fed253"/><path d="M417.52,450.16c-.23-1.8-.38-3.89.9-5.17a.65.65,0,0,1,.53-.24.69.69,0,0,1,.41.36,22.38,22.38,0,0,1,1.88,3.68,3.82,3.82,0,0,0-4,1.55" transform="translate(-11.09 -87.76)" opacity="0.1"/><path d="M440.89,445.08l-.36-3.57a1.63,1.63,0,0,1,.07-.88,1.13,1.13,0,0,1,1.46-.4,3,3,0,0,1,1.17,1.17,21,21,0,0,1,2.06,4.07,12.1,12.1,0,0,0-4.87.06" transform="translate(-11.09 -87.76)" opacity="0.1"/><polygon points="438.75 502.21 438.75 510.37 431.86 510.83 395.62 510.83 395.62 502.21 438.75 502.21" opacity="0.1"/><polygon points="438.75 502.21 438.75 510.83 395.62 510.83 281.04 367.3 281.04 360.52 305.06 360.52 438.75 502.21" fill="#f1c0c0"/><polygon points="438.75 502.21 438.75 510.83 395.62 510.83 281.04 367.3 281.04 360.52 305.06 360.52 438.75 502.21" opacity="0.1"/><polygon points="438.75 502.21 438.75 510.83 395.62 510.83 281.04 367.3 281.04 360.52 396.24 502.21 438.75 502.21" opacity="0.1"/><path d="M307.15,733.83a3,3,0,0,1-2.62,3.53c-2.78.94-5.73,1.87-7.7,4s-2.36,6.08,0,7.81a7.59,7.59,0,0,0,4,1.09c4.53.31,9.25.25,13.36-1.67,2.94-1.36,5.71-3.68,8.94-3.47,1.67.1,3.45.88,4.94.12s1.91-2.88,1.92-4.65a34.43,34.43,0,0,0-1.65-10.89c-.15-.48-6.51-.85-7.27-1l-7.71-1c-1.46-.19-4.61-1.29-5.76-.07S307.15,732.38,307.15,733.83Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M353.16,708.87a24.15,24.15,0,0,0,1.58,5.24c1.07,2.72,2.44,5.61,5.06,6.93,2.38,1.19,5.3.76,7.72-.37a6.36,6.36,0,0,0,2.57-1.95,7.74,7.74,0,0,0,1-4.49c0-3.87-.23-7.87-2-11.31-1.52-3-4.17-5.58-4.21-8.9l-9.11,1.76a2.6,2.6,0,0,0-1.34.53,2.31,2.31,0,0,0-.58,1.09A29.77,29.77,0,0,0,353.16,708.87Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M244.37,613.87c-.38,3.22-.22,6.67,1.46,9.45s5.22,4.62,8.28,3.51a1.21,1.21,0,0,0,.75-.57,1.41,1.41,0,0,0-.13-1,14.76,14.76,0,0,1,.31-11.12c.2-.46.63-1,1.1-.82a1,1,0,0,1,.45.46,5.23,5.23,0,0,1,.7,2.76,10.26,10.26,0,0,0-.08,2.65c.19.86,1.11,1.67,1.91,1.3a2,2,0,0,0,.91-1.29c2.23-6.45,1.22-13.5.2-20.25a1.06,1.06,0,0,0-1.19-1.11c-4.72-.47-7.3-1.6-10,2.79C246.72,604.33,244.37,609.42,244.37,613.87Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M299.55,597.46c-1.4,5.82-2.81,11.71-2.9,17.69a81.27,81.27,0,0,0,.84,11.13l1.05,8.66c.36,2.92.71,5.83,1.22,8.72a23.15,23.15,0,0,1,.53,4.53,24.26,24.26,0,0,1-.71,4.45,52,52,0,0,0-1.05,9.3c-.11,5,.51,10,.9,15a167.05,167.05,0,0,1-.35,29.92,11.22,11.22,0,0,0,1.64,7.71,9.92,9.92,0,0,1,1.45,2.38c.75,2.29-1,4.58-1.45,6.93a7,7,0,0,0,5.82,8c8,.95,16.22.52,23.43,4.18.76-2.22-.9-4.74-.14-7,.48-1.4,1.8-2.31,2.7-3.49a10.16,10.16,0,0,0,1.72-6.1,22.29,22.29,0,0,0-1.48-8.27c-.85-2.2-2.07-4.37-2-6.73,0-1.16.41-2.38-.06-3.45a5.39,5.39,0,0,0-1.29-1.61,20.33,20.33,0,0,1-5.23-11.85,54.58,54.58,0,0,1,.42-13.14c.49-4.14,1.15-8.51,3.78-11.74a75.33,75.33,0,0,1,2.11-29.25c.26-.88.67-1.9,1.57-2.11a2.24,2.24,0,0,1,1.92.76c1.57,1.47,2.32,3.6,3,5.64.75,2.21,1.51,4.57.94,6.83-.24,1-.72,1.88-1,2.84a8.42,8.42,0,0,0,.3,5.87,5.64,5.64,0,0,1,.72,2.21,6.12,6.12,0,0,1-.6,1.92,8.84,8.84,0,0,0,.83,7.15,25.89,25.89,0,0,0,4.67,5.73,21,21,0,0,0,.65,11.56,1.46,1.46,0,0,1,.13,1.11c-.18.38-.64.52-1,.79-1,.82-.38,2.37.29,3.44a78.88,78.88,0,0,0,6.07,8.42c2,2.39,1.82,7,4.8,7.86a9,9,0,0,0,3.8,0c2.94-.45,6.22-1.3,7.66-3.9.59-1.07.83-2.37,1.75-3.17s2.11-.94,2.62-1.9-.06-2.22.11-3.33,1.14-2,1.45-3.17c.74-2.7-2.41-4.92-2.84-7.68-.62-4,4.42-7,4.21-11-.44-8.69-.72-17.42-1.17-26.11a188.26,188.26,0,0,1-.24-23.39c.35-4.85,1-9.93-.78-14.44-2.56-6.36-9.62-9.93-16.45-10.61s-13.64.94-20.41,2A129,129,0,0,1,299.55,597.46Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><circle cx="308.76" cy="398.1" r="16.02" fill="#fbbebe"/><path d="M313.33,504.87A6.83,6.83,0,0,1,306.8,509c-.58,2.4.81,4.82,2.4,6.71a28.48,28.48,0,0,0,27.26,9.35,13.45,13.45,0,0,0,5.37-2.24,11.91,11.91,0,0,0,4.1-7.1,35.3,35.3,0,0,0,.39-8.35,2.16,2.16,0,0,0-.44-1.54,2.2,2.2,0,0,0-1.4-.46c-3.38-.3-6.91-.43-9.88-2.09s-5.08-5.41-3.65-8.49c-.23.48-6.07.71-6.84.81-2.41.34-4.82.72-7.22,1.16a13.13,13.13,0,0,0-3.39.64c-1.45.75-.91.38-.57,1.74C313.44,501.22,314.19,502.71,313.33,504.87Z" transform="translate(-11.09 -87.76)" fill="#fbbebe"/><path d="M325.52,514.61a26.53,26.53,0,0,1-6.41-.71,9,9,0,0,1-5.26-3.51c-.74-1.12-1.22-2.53-2.4-3.16-1.93-1-4.13.69-5.67,2.24a20.6,20.6,0,0,1-4.82,3.88c-2.14,1.13-4.64,1.53-6.66,2.86a16.74,16.74,0,0,0-4,4.32l-14.17,19.3c-5.69,7.76-10.64,16.09-15.71,24.28-4.39,7.09-6.69,15.25-10,22.9a2.56,2.56,0,0,0-.31,1.54c.12.52.75.94,1.19.64-1.49,1.48-.18,4-.53,6.08a7.46,7.46,0,0,1-2.38,3.73,18.8,18.8,0,0,1,6.6.31,20.23,20.23,0,0,1,6.24,3c1.21-.19,1.1-2.34,2-3.14.54-.47,1.34-.41,2.05-.55,2.67-.52,3.73-3.73,5.78-5.54,1.71-1.51,4.13-2,5.94-3.42,2.94-2.31,3.57-6.42,5.11-9.83,1.31-2.89,3.37-5.41,4.52-8.37.75-1.92,1.11-4,2.18-5.77,1.71-2.86,4.93-4.38,8-5.75,1.94-.87,4-1.77,6.09-1.63-.11,4.65-.7,9.23.31,13.77.35,1.6.84,3.16,1.26,4.75,1.91,7.16,2.36,14.62,2.45,22a66.94,66.94,0,0,1,14-1.68c3.71-.11,7.41.37,11.12.3,4.4-.08,8.75-.93,13.15-1.23s9,0,12.89,2a122.46,122.46,0,0,1,.53-19l1.06-9.94A61.07,61.07,0,0,1,361,560.7c.58-2.28,1.42-4.48,2.06-6.75,2.25-8,1.84-16.54,1.41-24.87-.22-4.28-1.87-8.49-3.81-12.3a33.29,33.29,0,0,0-2.4-4.08A23.63,23.63,0,0,0,337.6,503a4.18,4.18,0,0,0-1.48.32,4.93,4.93,0,0,0-1.89,2.25A24.5,24.5,0,0,1,325.52,514.61Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M305.76,491.17c.45-1,1.66-1.37,2.4-2.17,1.42-1.52.78-3.95,1-6,.36-3,2.85-5.51,5.7-6.58a18.42,18.42,0,0,1,9-.57,8.71,8.71,0,0,1,4.06,1.35c.52.38,1,.87,1.49,1.22a4,4,0,0,0,5.44-1.27c-3.54-4.26-7.46-8.76-12.84-10.07a26.34,26.34,0,0,0-5.61-.53c-2.49-.05-5.06-.09-7.36.86-3.13,1.29-5.33,4.26-6.46,7.46a36.27,36.27,0,0,0-1.57,10,37.67,37.67,0,0,0,0,6.8,18.8,18.8,0,0,0,3.34,8.57,2.59,2.59,0,0,0,1,.93C309.91,503.17,305.39,492,305.76,491.17Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M334.33,474.68c-.55-4.71-3.91-8.6-7.48-11.73a27.58,27.58,0,0,0-10.05-6.05c-3.77-1.11-8.11-.87-11.34,1.38-2.6,1.81-4.25,4.69-5.52,7.59a23.89,23.89,0,0,0-2.41,11c.25,3.78,2.09,7.61,5.37,9.52,1.18-1.74,3.23-2.64,5.2-3.35A254.61,254.61,0,0,1,334.33,474.68Z" transform="translate(-11.09 -87.76)" fill="#fed253"/><path d="M304,472.72c.32,0,.53.33.69.6a25.35,25.35,0,0,1,2.09,4c-1.17.25-3.18.53-3.76-.5C302.71,476.3,303.08,472.67,304,472.72Z" transform="translate(-11.09 -87.76)" opacity="0.1"/><path d="M326.79,470.46c-.24.23-.52-.24-.52-.58V466a.57.57,0,0,1,.07-.31.47.47,0,0,1,.33-.16c.81-.09,1.48.6,2,1.26a21.12,21.12,0,0,1,2.05,3.41l-4.23-.13" transform="translate(-11.09 -87.76)" opacity="0.1"/><path d="M379.58,534.71a26.17,26.17,0,0,1,2.94-2.41c2.77-1.85,6.12-2.58,9.23-3.76s6.27-3.09,7.48-6.19a14.7,14.7,0,0,0,.58-6,6,6,0,0,0-.44-2.47,4.91,4.91,0,0,0-1.58-1.72c-4.22-3.12-9.88-3.37-15.12-3.05a94.77,94.77,0,0,0-33.41,8.34,2.9,2.9,0,0,0-1.4,1,2.86,2.86,0,0,0-.27,1.39,23,23,0,0,0,1.13,8.71c1.38,3.56,4.22,6.43,5.41,10.06.54,1.63.72,3.36,1.19,5a7,7,0,0,0,2.81,4.18c3.95,2.36,7.68-.81,10.42-3.27Z" transform="translate(-11.09 -87.76)" fill="#3f3d56"/><path d="M327.85,548.56l-5.07-11.06a38.71,38.71,0,0,1-1.92-4.73c-.58-1.93-.86-3.93-1.4-5.87-1.78-6.46-6.27-11.84-8.46-18.17a3.45,3.45,0,0,0-.82-1.53,2.67,2.67,0,0,0-2.23-.4c-3.06.53-5.45,2.86-8.25,4.18-1.3.6-2.7,1-4,1.69a5,5,0,0,0-2.68,3.19c-.31,1.53.45,3,1.09,4.49,2.72,6.14,3.34,13,3.46,19.72.09,4.52-.14,9.37-2.81,13-5.13,7-1.85,17.28.07,25.75.23,1,.5,2.08.66,3.14a28.87,28.87,0,0,1,.23,4c0,4.49-.25,9.12-2.13,13.19a14.76,14.76,0,0,0,6,1.7q8.71,1.11,17.49,1.56a19.06,19.06,0,0,0,5.49-.28,10,10,0,0,0,7.39-9.8c.32,2.77.91,5.78,2.92,7.7s4.94,2.21,7.67,2.36a142.6,142.6,0,0,0,23.1-.65,4,4,0,0,0,1.42-.33c1.48-.74,1.56-2.78,1.44-4.42-.22-3.07-.45-6.14-.82-9.19a37.61,37.61,0,0,1-.48-5.88,33.83,33.83,0,0,1,1-6c1.34-6.24,2.4-12.61,1.95-19a32.06,32.06,0,0,1-.19-4.69c.26-3.53,2.12-6.89,1.77-10.4-1-10.32-1.81-20.91-4.69-30.87-.52-1.78-1.18-3.69-2.73-4.71-2-1.34-4.81-.64-7.1-1.49a17.76,17.76,0,0,1-3.05-1.81,14,14,0,0,0-6.89-2.12c-1.84-.07-3.89.34-5,1.82a7.26,7.26,0,0,0-1,2.73c-1.45,6.1-3.15,12.13-4.85,18.16l-1.63,5.78-4.37,15.52C328,546.49,328.29,547,327.85,548.56Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><polyline points="342.33 400.25 439.06 501.9 439.06 510.52 395.93 510.52 323.24 415.65" fill="#f1c0c0"/><polyline points="342.33 400.25 439.06 501.9 439.06 510.52 395.93 510.52 323.24 415.65" opacity="0.1"/><polygon points="324.78 414.31 325.09 414.42 396.55 501.9 439.06 501.9 439.06 510.52 395.93 510.52 323.24 415.65 324.78 414.31" opacity="0.1"/><path d="M347,504.21c-3.5,1.53-7.39,3.49-8.44,7.17a4.12,4.12,0,0,0-.13,2,4.08,4.08,0,0,0,3.67,2.81,12,12,0,0,0,4.81-.88l20.65-6.82c.56-.18,1.2-.45,1.34-1a1.72,1.72,0,0,0-.2-1c-.64-1.56-1.27-4.75-2.61-5.84-1.1-.88-3.28-.57-4.61-.55C356.36,500.14,351.55,502.21,347,504.21Z" transform="translate(-11.09 -87.76)" fill="#81C784"/><path d="M365.41,509.3a33.21,33.21,0,0,1,10.25,1.59,18.26,18.26,0,0,1,8.49,5.8,6.36,6.36,0,0,1,1.34,2.62c.2,1,3.46,1.6,2.74,2.28,2.19-.35,1.67.68,3.89.66s4.62-.59,5.95-2.36a7.73,7.73,0,0,0,1.17-4.89,8.33,8.33,0,0,0-.66-3.46c-1-2.1-3.3-3.23-5.42-4.2l-17.86-8.17A11.86,11.86,0,0,0,372,498a12.34,12.34,0,0,0-2.91.07L361,499a12.13,12.13,0,0,1,5.53,10.67" transform="translate(-11.09 -87.76)" fill="#3f3d56"/></svg>
'''
'''--- src/components/auth-components/index.ts ---
import ActiveUsers from './ActiveUsers'

// eslint-disable-next-line import/prefer-default-export
export { ActiveUsers }

'''
'''--- src/components/core/index.ts ---
import ConfigFile from './ConfigFile'
import CreateProjectDialog from './CreateProjectDialog'
import Navigation from './Navigation'
import ProjectDisplayBoard from './ProjectDisplayBoard'

export { ConfigFile, CreateProjectDialog, Navigation, ProjectDisplayBoard }

'''
'''--- src/components/db-components/controls/index.ts ---
import CounterStoreControls from './CounterStoreControls'
import LogStoreControls from './LogStoreControls'
import FeedStoreControls from './FeedStoreControls'
import DocumentStoreControls from './DocumentStoreControls'
import KeyValueStoreControls from './KeyValueStoreControls'

export {
	CounterStoreControls,
	LogStoreControls,
	FeedStoreControls,
	DocumentStoreControls,
	KeyValueStoreControls,
}

'''
'''--- src/components/db-components/index.ts ---
import CreateDialog from './CreateDialog'
import DatabaseList from './DatabaseList'
import Header from './Header'
import Systems from './Systems'

export { CreateDialog, DatabaseList, Header, Systems }

'''
'''--- src/components/hosting-components/index.ts ---
import UploadSystem from './UploadSystem'

// eslint-disable-next-line import/prefer-default-export
export { UploadSystem }

'''
'''--- src/components/storage-components/FileManager.css ---
.FileManager {
    font-size: 14px;
    display: flex;
    flex-direction: column;
    min-height: 100%;
    height: 100%;
}

.FileManager * {
    box-sizing: border-box;
}

.FileManager.FileManager-Loading {
    pointer-events: none;
    opacity: 0.8;
}

.FileManager .FileManager-TopBar {
    height: 48px;
    line-height: 32px;
    padding: 8px;
    background-color: rgba(0, 0, 0, 0.1);
    display: flex;
    flex-direction: row;
    justify-content: space-between;
}

.FileManager-TopBar .TopBar-Left {
    flex: auto;
    white-space: nowrap;
    display: flex;
    flex-direction: row;
}

.FileManager-TopBar .TopBar-Button {
    min-width: 32px;
    height: 32px;
    padding: 0 8px;
    line-height: 32px;
}

.TopBar-Button.Icon-Button {
    padding: 0;
}

.TopBar-Button svg {
    width: 16px;
    height: 16px;
    transform: translateY(2px);
}

.TopBar-Left input[type=text] {
    flex: auto;
    line-height: 32px;
    height: 32px;
    padding: 0 8px;
}

.TopBar-Left button {
    margin-right: 4px;
}

.TopBar-Right button {
    margin-left: 4px;
}

.FileManager-SideBar .SideBar-TreeNode {
    padding: 2%;
    color: lightslategray;
}

.SideBar-TreeNode .TreeNode-Name {
    display: flex;
    align-items:center;
    cursor: pointer;
}

.TreeNode-Name.TreeNode-Current {
    color: #000000;
    background-color: rgba(0, 0, 255, 0.1);
}

.SideBar-TreeNode .TreeNode-Children {

}

.FileManager .FileManager-MiddleArea {
    flex: 1;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    padding: 1%
}

.FileManager .FileManager-SideBar {
    min-width: 250px;
    padding: 8px 0;
    overflow: auto;
    margin: 1%;
}

.FileManager .FileManager-Body {
    flex: auto;
    overflow: auto;
    border-left: 1px solid rgba(0, 0, 0, 0.2);
    padding: 8px;
    display: grid;
    grid-gap: 16px;
    grid-template-columns: repeat(auto-fill, minmax(96px, 1fr));
    grid-template-rows: repeat(auto-fill, minmax(96px, 1fr));
    margin: 1%;
}

.FileManager-Body .Body-Item {
    text-align: center;
    padding: 8px;
    border-radius: 8px;
    color: slategray;
}

.Body-Item .Body-Item-Name {
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
}

.Body-Item .Body-Item-Icon svg {
    width: 64px;
    height: 64px;
}

.Body-Item.Item-Selected {
    color: #000000;
    background-color: rgba(0, 0, 255, 0.1);
}

.FileManager .FileManager-Footer {
    padding: 0.5% 1% 0.5% 2%;
    background-color: #6247aa;
    display: flex;
    align-items: center;
    color: white;
    border-radius: 0 0 20px 20px;
    font-weight: bold;
    box-shadow: 0px 2px 4px -1px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%);
}

.FileManager-Footer .Footer-Right {
    flex: auto;
    text-align: right;
}

.Footer-Right button {
    min-width: 28px;
    height: 28px;
    padding: 0 8px;
    line-height: 28px;
    margin-left: 4px;
}

.Footer-Right button.Icon-Button {
    padding: 0;
}

.Footer-Right button svg {
    width: 16px;
    height: 16px;
    transform: translateY(2px);
}

'''
'''--- src/components/storage-components/index.ts ---
import FileManager from './FileManager'

export { FileManager }

'''
'''--- src/components/token-components/index.ts ---
import TokenDash from './TokenDash'
import TokenForm from './TokenForm'

// eslint-disable-next-line import/prefer-default-export
export { TokenDash, TokenForm }

'''
'''--- src/config.ts ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'alpha.three0.testnet'

const LOCAL_KURTOSIS_URL = process.env.KURTOSIS_URL

function getNEARConfig(env: string) {
	switch (env) {
		case 'mainnet':
			return {
				networkId: 'mainnet',
				nodeUrl: 'https://rpc.mainnet.near.org',
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.near.org',
				helperUrl: 'https://helper.mainnet.near.org',
				explorerUrl: 'https://explorer.mainnet.near.org',
			}
		case 'development':
		case 'production':
		case 'testnet':
			return {
				networkId: 'testnet',
				nodeUrl: 'https://rpc.testnet.near.org',
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.testnet.near.org',
				helperUrl: 'https://helper.testnet.near.org',
				explorerUrl: 'https://explorer.testnet.near.org',
			}
		case 'betanet':
			return {
				networkId: 'betanet',
				nodeUrl: 'https://rpc.betanet.near.org',
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.betanet.near.org',
				helperUrl: 'https://helper.betanet.near.org',
				explorerUrl: 'https://explorer.betanet.near.org',
			}
		case 'localnet':
			return {
				networkId: 'local',
				nodeUrl: `${LOCAL_KURTOSIS_URL}:8332`,
				keyPath: `${process.cwd()}/.near/validator_key.json`,
				walletUrl: `${LOCAL_KURTOSIS_URL}:8334`,
				contractName: CONTRACT_NAME,
				explorerUrl: `${LOCAL_KURTOSIS_URL}:8331`,
				helperUrl: `${LOCAL_KURTOSIS_URL}:8330`,
				masterAccount: 'test.near',
			}
		case 'test':
		case 'ci':
			return {
				networkId: 'shared-test',
				nodeUrl: 'https://rpc.ci-testnet.near.org',
				contractName: CONTRACT_NAME,
				masterAccount: 'test.near',
			}
		case 'ci-betanet':
			return {
				networkId: 'shared-test-staging',
				nodeUrl: 'https://rpc.ci-betanet.near.org',
				contractName: CONTRACT_NAME,
				masterAccount: 'test.near',
			}
		default:
			throw Error(
				`Unconfigured environment '${env}'. Can be configured in src/config.js.`
			)
	}
}

export default getNEARConfig
// module.exports = getNEARConfig

'''
'''--- src/global.css ---
@font-face {
  font-family: myFont;
  src: url('./assets/font.ttf');
}

* {
  box-sizing: border-box;
  font-family: myFont !important;
}

html,
body{
  height: 100%;
}

body {
  background-color: #ECEFF1;
  margin: 0;
  
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.majorImg {
  width: 60%;
  margin: 2% auto;
  display: block;
}

#root {
  height: 100%;
  display: flex;
  flex-direction: column;
  min-height: 100%;
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="description" content="The world's only fully decentralized Web3 BaaS">
    <meta name="theme-color" content="#6247aa">
    <link rel="apple-touch-icon" href="./assets/favicon/favicon.svg" />
    <link rel="icon" type="image/svg+xml" href="./assets/favicon/favicon.svg">
    <link rel="icon" type="image/png" href="./assets/favicon/favicon.png">
    <title>Three0</title>

    <script type="text/javascript">
      // Single Page Apps for GitHub Pages
      // MIT License
      // https://github.com/rafgraph/spa-github-pages
      // This script checks to see if a redirect is present in the query string,
      // converts it back into the correct url and adds it to the
      // browser's history using window.history.replaceState(...),
      // which won't cause the browser to attempt to load the new url.
      // When the single page app is loaded further down in this file,
      // the correct url will be waiting in the browser's history for
      // the single page app to route accordingly.
      (function(l) {
        if (l.search[1] === '/' ) {
          var decoded = l.search.slice(1).split('&').map(function(s) { 
            return s.replace(/~and~/g, '&')
          }).join('?');
          window.history.replaceState(null, null,
              l.pathname.slice(0, -1) + decoded + l.hash
          );
        }
      }(window.location))
    </script>
  </head>
  <body style="height:100vh !important">
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script type="module" src="./index.tsx"></script>
  </body>
</html>

'''
'''--- src/services/NEAR.ts ---
/* eslint-disable import/no-unresolved */
/* eslint-disable no-console */
import {
	keyStores,
	transactions,
	KeyPair,
	utils,
	// eslint-disable-next-line no-unused-vars
	providers,
	Account,
} from 'near-api-js'
// eslint-disable-next-line import/no-unresolved
import NEAR_CONTRACT from 'url:../contract-wasms/near.wasm'
// eslint-disable-next-line import/no-unresolved
import NEAR_STORAGE_CONTRACT from 'url:../contract-wasms/near-storage.wasm'
// eslint-disable-next-line import/no-unresolved
import NEAR_HOSTING_CONTRACT from 'url:../contract-wasms/near-hosting.wasm'
// eslint-disable-next-line import/no-unresolved
import NEAR_TOKEN_CONTRACT from 'url:../contract-wasms/near-token.wasm'
import { nearConfig } from '../utils'
import { tokenMetadata } from '../views/Token'

export async function generateKey(name: string) {
	const keyPair = KeyPair.fromRandom('ed25519')
	const publicKey = keyPair.getPublicKey()
	await new keyStores.BrowserLocalStorageKeyStore().setKey(
		nearConfig.networkId,
		name,
		keyPair
	)

	return publicKey
}

export async function createNEARAccount(
	name: string,
	amount: string,
	parentAccount: Account
) {
	const publicKey = await generateKey(name)
	await parentAccount.createAccount(
		name,
		publicKey,
		utils.format.parseNearAmount(amount)
	)
}

export async function createNEARProjectReference() {
	const { pid, blockchainNetwork } = JSON.parse(
		localStorage.getItem('projectDetails') || '{}'
	)

	await window.contract.create_project({
		chain_type: blockchainNetwork,
		contract_address: pid,
	})
}

export async function deployNEARProjectContract() {
	const { pid } = JSON.parse(localStorage.getItem('projectDetails') || '{}')
	localStorage.removeItem('projectDetails')
	const account = await window.near.account(pid)

	const contract = await fetch(NEAR_CONTRACT)
	const buf = await contract.arrayBuffer()

	await account.signAndSendTransaction({
		receiverId: pid,
		actions: [
			transactions.deployContract(new Uint8Array(buf)),
			transactions.functionCall('init', { pid }, 10000000000000, '0'),
		],
	})
}

export async function createNEARProjectAccount() {
	const { pid } = JSON.parse(localStorage.getItem('projectDetails') || '{}')

	const publicKey = await generateKey(pid)

	await window.near.createAccount(pid, publicKey)
	// TODO: transfer some amount of NEAR to the account in mainnet

	await createNEARProjectReference()
	await deployNEARProjectContract()
}

export async function deleteNEARProject(pid: string) {
	try {
		const canDelete = await window.contract.delete_project({
			contract_address: pid,
		})
		if (!canDelete) return false
		const account = await window.near.account(pid)

		await account.deleteAccount(
			nearConfig.networkId === 'testnet'
				? 'v1.faucet.nonofficial.testnet'
				: window.accountId
		)

		const keyStore = new keyStores.BrowserLocalStorageKeyStore()

		await keyStore.removeKey(nearConfig.networkId, pid)
		await keyStore.removeKey(nearConfig.networkId, `web4.${pid}`)
		await keyStore.removeKey(nearConfig.networkId, `storage.${pid}`)

		return true
	} catch (e) {
		console.error(e)
	}
	return false
}

// export async function checkAccountStatus(hash: any) {
// 	const provider = new providers.JsonRpcProvider({ url: nearConfig.nodeUrl })

// 	const result = await provider.txStatus(hash, nearConfig.networkId)

// 	if (result.transaction_outcome.outcome.status.SuccessReceiptId) {
// 		await createNEARProjectReference()
// 		await deployNEARProjectContract()
// 	}

// 	return result.transaction.receiver_id
// }

export async function createStorageAccount(parentPID: string) {
	const parentAccount = await window.near.account(parentPID)
	await createNEARAccount(`storage.${parentPID}`, '16', parentAccount)
}

export async function deployStorageContract(parentPID: string) {
	const storageContract = `storage.${parentPID}`
	const storageAccount = await window.near.account(storageContract)

	const contract = await fetch(NEAR_STORAGE_CONTRACT)
	const buf = await contract.arrayBuffer()

	await storageAccount.signAndSendTransaction({
		receiverId: storageContract,
		actions: [
			transactions.deployContract(new Uint8Array(buf)),
			transactions.functionCall(
				'new_default_meta',
				{ pid: parentPID },
				10000000000000,
				'0'
			),
		],
	})
}

export async function addStorage(parentContract: any) {
	await createStorageAccount(parentContract.contractId)
	await deployStorageContract(parentContract.contractId)
	await parentContract.set_storage()
}

export async function createHostingAccount(parentPID: string) {
	const parentAccount = await window.near.account(parentPID)
	await createNEARAccount(`web4.${parentPID}`, '9', parentAccount)
}

export async function deployHostingContract(parentPID: string) {
	const wallet = `web4.${parentPID}`
	const hostingAccount: Account = await window.near.account(wallet)

	hostingAccount.deployContract(
		new Uint8Array(await (await fetch(NEAR_HOSTING_CONTRACT)).arrayBuffer())
	)
}

export async function addHosting(parentContract: any) {
	await createHostingAccount(parentContract.contractId)
	await deployHostingContract(parentContract.contractId)
	await parentContract.set_hosting()
}

export async function createTokenAccount(parentPID: string) {
	const parentAccount = await window.near.account(parentPID)
	await createNEARAccount(`token.${parentPID}`, '9', parentAccount)
}

export async function deployTokenContract(
	parentPID: string,
	metadata: tokenMetadata,
	totalSupply: string,
	exchangeRate: string
) {
	const wallet = `token.${parentPID}`
	const tokenAccount = await window.near.account(wallet)

	const contract = await fetch(NEAR_TOKEN_CONTRACT)
	const buf = await contract.arrayBuffer()

	await tokenAccount.signAndSendTransaction({
		receiverId: wallet,
		actions: [
			transactions.deployContract(new Uint8Array(buf)),
			transactions.functionCall(
				'new',
				{
					owner_id: parentPID,
					initial_supply: totalSupply,
					exchange_rate: exchangeRate,
					metadata,
				},
				10000000000000,
				'0'
			),
		],
	})
}

export async function addTokenization(
	parentContract: any,
	metadata: tokenMetadata,
	totalSupply: string,
	exchangeRate: string
) {
	await createTokenAccount(parentContract.contractId)
	await deployTokenContract(
		parentContract.contractId,
		metadata,
		totalSupply,
		exchangeRate
	)
	parentContract.set_tokenization()
}

'''
'''--- src/services/Web3Storage.ts ---
const url = 'https://storage.three0dev.com'

async function web3StorageClientAuth(projectContract: any): Promise<string> {
	function getCookie(cname: string) {
		const name = `${cname}=`
		const decodedCookie = decodeURIComponent(document.cookie)
		const ca = decodedCookie.split(';')
		for (let i = 0; i < ca.length; i += 1) {
			let c = ca[i]
			while (c.charAt(0) === ' ') {
				c = c.substring(1)
			}
			if (c.indexOf(name) === 0) {
				return c.substring(name.length, c.length)
			}
		}
		return ''
	}

	function setCookie(name: string, value: string, days: number) {
		const expires = new Date(Date.now() + days * 864e5).toUTCString()
		document.cookie += `${name}=${encodeURIComponent(
			value
		)}; expires=${expires}; path=/`
	}

	const token = getCookie('three0storage')

	if (token) {
		return token
	}

	const nonce = await projectContract.set_nonce()

	const res = await fetch(`${url}/generateToken`, {
		method: 'POST',
		// credentials: 'include',
		mode: 'cors',
		headers: {
			'Content-Type': 'application/json',
		},
		body: JSON.stringify({
			nonce,
			accountId: projectContract.account.accountId,
			pid: projectContract.account.accountId,
		}),
	}).then((resp) => resp.json())

	setCookie('three0storage', res.token, 1)
	return res.token
}

async function uploadWeb3Files(
	files: Array<File>,
	projectContract: any
): Promise<string> {
	const token = await web3StorageClientAuth(projectContract)

	const fd = new FormData()
	files.forEach((file) => {
		fd.append('file', file)
	})

	const output = await fetch(`${url}/upload`, {
		// credentials: 'include',
		mode: 'cors',
		headers: {
			Authorization: `${token}`,
		},
		method: 'POST',
		body: fd,
	}).then((res) => res.json())

	if (output.status) {
		return output.cid
	}
	throw new Error(output.message)
}

const gateway = 'https://w3s.link/ipfs'

export default uploadWeb3Files

export { gateway as web3StorageGateway }

'''
'''--- src/services/database/config/index.ts ---
// eslint-disable-next-line import/no-unresolved
import { IPFSOptions } from 'ipfs-core/src/components/network'

// eslint-disable-next-line import/prefer-default-export
export const config: IPFSOptions = {
	start: true,
	EXPERIMENTAL: {
		ipnsPubsub: true,
	},
	relay: {
		enabled: true, // enable circuit relay dialer and listener
		hop: {
			enabled: true, // enable circuit relay HOP (make this node a relay)
		},
	},
	preload: {
		enabled: false,
	},
	config: {
		Addresses: {
			Swarm: [
				'/dns4/signal-rtc.three0dev.com/tcp/443/wss/p2p-webrtc-star/',
				// '/dns4/three0-ipfs-wss-node.onrender.com/tcp/10000/wss/p2p/QmXz8gH7VhjuGYRbPR8HyGXB6BGvNg9WMkiGUg2qh6Hshx',
			],
		},
	},
}

'''
'''--- src/services/database/identities/NearIdentityProvider.ts ---
/* eslint-disable no-console */
/* eslint-disable no-underscore-dangle */
import { keyStores } from 'near-api-js'
import IdentityProvider from 'orbit-db-identity-provider'
import { nearConfig as NEAR_CONFIG } from '../../../utils'

export default class NearIdentityProvider extends IdentityProvider {
	// return type
	static get type() {
		return 'NearIdentity'
	}

	// return identifier of external id (eg. a public key)
	// eslint-disable-next-line class-methods-use-this
	async getId() {
		return window.accountId
	}

	// return a signature of data (signature of the OrbitDB public key)
	// eslint-disable-next-line class-methods-use-this
	async signIdentity(
		// eslint-disable-next-line no-undef
		data: WithImplicitCoercion<ArrayBuffer | SharedArrayBuffer>
	) {
		console.log(data)
		const dataBuffer = Buffer.from(data)
		console.log(dataBuffer)

		const keyStore = new keyStores.BrowserLocalStorageKeyStore()

		const keyPair = await keyStore.getKey(
			NEAR_CONFIG.networkId,
			window.accountId
		)

		const { signature } = keyPair.sign(dataBuffer)
		console.log(signature)

		return signature
	}

	// return true if identity.signatures are valid
	static async verifyIdentity(identity: {
		publicKey: any
		signatures: {
			id: any
			publicKey: { [s: string]: unknown } | ArrayLike<unknown>
		}
	}) {
		const keyStore = new keyStores.BrowserLocalStorageKeyStore()
		const keyPair = await keyStore.getKey(
			NEAR_CONFIG.networkId,
			window.accountId
		)

		console.log(identity)

		const message = Buffer.from(identity.publicKey + identity.signatures.id)

		const verify = keyPair.verify(
			message,
			Buffer.from(Object.values(identity.signatures.publicKey) as any)
		)

		console.log(verify)

		return true
	}
}

'''
'''--- src/services/database/identities/identityProvider.d.ts ---
declare module 'orbit-db-identity-provider'

'''
'''--- src/services/database/identities/index.ts ---
import NearIdentityProvider from './NearIdentityProvider'

export default { NearIdentityProvider }

'''
'''--- src/services/database/index.ts ---
/* eslint-disable no-console */
/* eslint-disable no-unused-vars */
// TODO: Handle Identity Provider
import * as IPFS from 'ipfs-core'
import OrbitDB from 'orbit-db'
// import IdentityProvider from 'orbit-db-identity-provider'
import { config as Config } from './config'
// import NearIdentityProvider from './NearIdentityProvider'

let ipfs: IPFS.IPFS

// OrbitDB instance
let orbitdb: OrbitDB

// Databases
let programs: Array<any>

let ipfsActivate = false

// const peerDBServer = 'https://pinning.three0dev.com/'

// IdentityProvider.addIdentityProvider(NearIdentityProvider)

// Start IPFS
export const initIPFS = async () => {
	if (!(ipfs || ipfsActivate)) {
		ipfsActivate = true
		ipfs = await IPFS.create(Config)
	}
	return ipfs
}

// Start OrbitDB
export const initOrbitDB = async (ipfsLocal: any) => {
	if (ipfs && !orbitdb) {
		// const identity = await IdentityProvider.createIdentity({
		// 	type: `NearIdentity`,
		// })

		// orbitdb = await OrbitDB.createInstance(ipfs, {identity})

		orbitdb = await OrbitDB.createInstance(ipfsLocal)
	}
	return orbitdb
}

export const getAllDatabases = async (projectContract: any) => {
	console.log('Getting all databases for project')
	if (orbitdb) {
		// Load programs database
		programs = await projectContract.get_databases({})
	}
	return programs || []
}

export const getDB = async (address: string) => {
	let db
	if (orbitdb) {
		db = await orbitdb.open(address)
		await db.load()
	}
	return db
}

export const addDatabase = async (address: any) => {
	const db = await orbitdb.open(address)
	return programs?.add({
		name: db.dbname,
		type: db.type,
		address,
		added: Date.now(),
	})
}

export const createDatabase = async (
	contract: {
		add_database: (arg0: {
			database_details: { name: any; address: any; db_type: any }
		}) => any
	},
	name: any,
	type: any,
	permissions: any,
	overwrite = false
) => {
	let accessController

	switch (permissions) {
		case 'public':
			accessController = { write: ['*'] }
			break
		default:
			accessController = { write: [orbitdb.identity.id] }
			break
	}

	const db = await orbitdb.create(name, type, { accessController, overwrite })

	const dbDetails = {
		name,
		address: db.address.toString(),
		db_type: type,
	}

	console.log(dbDetails)

	// await fetch(`${peerDBServer}pin?address=${db.address.toString()}`, {
	// 	method: 'POST',
	// 	mode: 'cors',
	// 	cache: 'no-cache',
	// 	credentials: 'same-origin', // include, *same-origin, omit
	// 	redirect: 'follow',
	// 	referrerPolicy: 'no-referrer',
	// })

	await contract.add_database({
		database_details: dbDetails,
	})
}

export const removeDatabase = async (
	contract: { delete_database: (arg0: { database_name: any }) => any },
	program: { address: any }
) => {
	console.log('Removing database')
	const db = await orbitdb.open(program.address)
	await db.drop()
	await db.close()

	// await fetch(`${peerDBServer}unpin?address=${program.address}`, {
	// 	method: 'POST',
	// 	mode: 'cors',
	// 	cache: 'no-cache',
	// 	credentials: 'same-origin', // include, *same-origin, omit
	// 	redirect: 'follow',
	// 	referrerPolicy: 'no-referrer',
	// })

	await contract.delete_database({
		database_name: program.address,
	})
}

'''
'''--- src/services/database/orbitDB.d.ts ---
declare module 'orbit-db'

'''
'''--- src/utils.ts ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import { formatDistanceToNow } from 'date-fns'
import getNEARConfig from './config'

export const nearConfig = getNEARConfig(process.env.NODE_ENV || 'testnet')

// Initialize contract & set global variables
export async function initContract() {
	// Initialize connection to the NEAR testnet
	const near = await connect({
		keyStore: new keyStores.BrowserLocalStorageKeyStore(),
		...nearConfig,
	})

	window.near = near

	// Initializing Wallet based Account. It can work with NEAR testnet wallet that
	// is hosted at https://wallet.testnet.near.org
	window.walletConnection = new WalletConnection(near, null)

	// Getting the Account ID. If still unauthorized, it's just empty string
	window.accountId = window.walletConnection.getAccountId()

	window.contract = new Contract(
		window.walletConnection.account(),
		nearConfig.contractName,
		{
			viewMethods: ['get_all_projects', 'get_project'],
			changeMethods: ['create_project', 'delete_project'],
			// View methods are read only. They don't modify the state, but usually return some value.
			// Change methods can modify the state. But you don't receive the returned value when called.
		}
	)
}

export function logout() {
	window.walletConnection.signOut()
	// reload page
	window.location.replace(`${window.location.origin}/login`)
}

export function login() {
	const starter = window.location.origin
	window.walletConnection.requestSignIn({
		contractId: nearConfig.contractName,
		successUrl: `${starter}/`,
		failureUrl: `${starter}/login`,
	})
}

export function getContractRelativeDate(date: any) {
	return formatDistanceToNow(new Date(date / 1000000))
}

'''
'''--- src/views/db-views/index.ts ---
import ProgramView from './Database'
import DatabasesView from './Databases'
import SearchResultsView from './SearchResults'

export { ProgramView as DatabaseView, DatabasesView, SearchResultsView }

'''
'''--- src/views/db-views/jsonview.d.ts ---
declare module '@pgrabovets/json-view'

'''
'''--- src/views/index.ts ---
import Login from './Login'
import App from './App'
import Storage from './Storage'
import Dash from './Dash'
import NotFound from './NotFound'
import Auth from './Auth'
import ProjectsDash from './ProjectsDash'
import ProjectHome from './ProjectHome'
import Hosting from './Hosting'
import Token from './Token'

export {
	Login,
	App,
	Auth,
	Dash,
	Storage,
	NotFound,
	ProjectsDash,
	ProjectHome,
	Hosting,
	Token,
}

'''
'''--- tsconfig.json ---
{
  "include": ["src/**/*"],
  "compilerOptions": {
    "target": "ES6",
    "strict": true,
    "moduleResolution": "node",
    "jsx": "react-jsx",
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "types": ["jest", "node", "react", "react-dom", "react-test-renderer"],
    "forceConsistentCasingInFileNames": true
  },
}
  
'''