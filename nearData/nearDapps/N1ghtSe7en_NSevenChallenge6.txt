*GitHub Repository "N1ghtSe7en/NSevenChallenge6"*

'''--- contract/Cargo.toml ---
[package]
name = "NsevenNFT"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "=4.0.0-pre.4"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

'''
'''--- contract/README.md ---
zoo-dapp Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/approval.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas};

const GAS_FOR_NFT_APPROVE: Gas = Gas(10_000_000_000_000);
const NO_DEPOSIT: Balance = 0;

pub trait NonFungibleTokenCore {
    //approve an account ID to transfer a token on your behalf
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>);

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    );

    //revoke a specific account from transferring the token on your behalf
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId);

    //revoke all accounts from transferring the token on your behalf
    fn nft_revoke_all(&mut self, token_id: TokenId);
}

#[ext_contract(ext_non_fungible_approval_receiver)]
trait NonFungibleTokenApprovalsReceiver {
    //cross contract call to an external contract that is initiated during nft_approve
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //allow a specific account ID to approve a token on your behalf
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) {
        /*
            FILL THIS IN
        */
    }

    //check if the passed in account has access to approve the token ID
	fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) {
        /*
            FILL THIS IN
        */
    }

    //revoke a specific account from transferring the token on your behalf 
    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        /*
            FILL THIS IN
        */
    }

    //revoke all accounts from transferring the token on your behalf
    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        /*
            FILL THIS IN
        */
    }
}
'''
'''--- contract/src/enumeration.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    //Query for the total supply of NFTs on the contract
    pub fn nft_total_supply(&self) {
        /*
            FILL THIS IN
        */
    }

    //Query for nft tokens on the contract regardless of the owner using pagination
    pub fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) {
        /*
            FILL THIS IN
        */
    }

    //get the total supply of NFTs for a given owner
    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) {
        /*
            FILL THIS IN
        */
    }

    //Query for all the tokens for an owner
    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<JsonToken> {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);
        //if there is some set of tokens, we'll set the tokens variable equal to that set
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            //if there is no set of tokens, we'll simply return an empty vector. 
            return vec![];
        };

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through the keys vector
        tokens.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }
}
'''
'''--- contract/src/internal.rs ---
use crate::*;
use near_sdk::{CryptoHash};
use std::mem::size_of;

//used to generate a unique prefix in our storage collections (this is to avoid data collisions)
pub(crate) fn hash_account_id(account_id: &AccountId) -> CryptoHash {
    //get the default hash
    let mut hash = CryptoHash::default();
    //we hash the account ID and return it
    hash.copy_from_slice(&env::sha256(account_id.as_bytes()));
    hash
}

//refund the initial deposit based on the amount of storage that was used up
pub(crate) fn refund_deposit(storage_used: u64) {
    //get how much it would cost to store the information
    let required_cost = env::storage_byte_cost() * Balance::from(storage_used);
    //get the attached deposit
    let attached_deposit = env::attached_deposit();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert!(
        required_cost <= attached_deposit,
        "Must attach {} yoctoNEAR to cover storage",
        required_cost,
    );

    //get the refund amount from the attached deposit - required cost
    let refund = attached_deposit - required_cost;

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if refund > 1 {
        Promise::new(env::predecessor_account_id()).transfer(refund);
    }
}

impl Contract {
    //add a token to the set of tokens an owner has
    pub(crate) fn internal_add_token_to_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //get the set of tokens for the given account
        let mut tokens_set = self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            //if the account doesn't have any tokens, we create a new unordered set
            UnorderedSet::new(
                StorageKey::TokenPerOwnerInner {
                    //we get a new unique prefix for the collection
                    account_id_hash: hash_account_id(&account_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });

        //we insert the token ID into the set
        tokens_set.insert(token_id);

        //we insert that set for the given account ID. 
        self.tokens_per_owner.insert(account_id, &tokens_set);
    }
} 
'''
'''--- contract/src/lib.rs ---
#![allow(warnings)]
use std::collections::HashMap;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    env, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue,
};

use crate::internal::*;
pub use crate::metadata::*;
pub use crate::mint::*;
pub use crate::nft_core::*;
pub use crate::approval::*;
pub use crate::royalty::*;

mod internal;
mod approval; 
mod enumeration; 
mod metadata; 
mod mint; 
mod nft_core; 
mod royalty; 

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    //contract owner
    pub owner_id: AccountId,

    //keeps track of all the token IDs for a given account
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>,

    //keeps track of the token struct for a given token ID
    pub tokens_by_id: LookupMap<TokenId, Token>,

    //keeps track of the token metadata for a given token ID
    pub token_metadata_by_id: UnorderedMap<TokenId, TokenMetadata>,

    //keeps track of the metadata for the contract
    pub metadata: LazyOption<NFTContractMetadata>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokenPerOwnerInner { account_id_hash: CryptoHash },
    TokensById,
    TokenMetadataById,
    NFTContractMetadata,
    TokensPerType,
    TokensPerTypeInner { token_type_hash: CryptoHash },
    TokenTypesLocked,
}

#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default metadata so the
        user doesn't have to manually type metadata.
    */
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        //calls the other function "new: with some default metadata and the owner_id passed in 
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: "nft-1.0.0".to_string(),
                name: "Ukrainian Zoo NFT".to_string(),
                symbol: "Valerii".to_string(),
                icon: None,
                base_uri: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        //create a variable of type Self with all the fields initialized. 
        let this = Self {
            //Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            tokens_by_id: LookupMap::new(StorageKey::TokensById.try_to_vec().unwrap()),
            token_metadata_by_id: UnorderedMap::new(
                StorageKey::TokenMetadataById.try_to_vec().unwrap(),
            ),
            //set the owner_id field equal to the passed in owner_id. 
            owner_id,
            metadata: LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata),
            ),
        };

        //return the Contract object
        this
    }
}
'''
'''--- contract/src/metadata.rs ---
use crate::*;
pub type TokenId = String;
//defines the payout type we'll be returning as a part of the royalty standards.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NFTContractMetadata {
    pub spec: String,              // required, essentially a version like "nft-1.0.0"
    pub name: String,              // required, ex. "Mosaics"
    pub symbol: String,            // required, ex. "MOSIAC"
    pub icon: Option<String>,      // Data URL
    pub base_uri: Option<String>, // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    pub reference: Option<String>, // URL to a JSON file with more info
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct TokenMetadata {
    pub title: Option<String>, // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    pub description: Option<String>, // free-form description
    pub media: Option<String>, // URL to associated media, preferably to decentralized, content-addressed storage
    pub media_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    pub copies: Option<u64>, // number of copies of this set of metadata in existence when token was minted.
    pub issued_at: Option<u64>, // When token was issued or minted, Unix epoch in milliseconds
    pub expires_at: Option<u64>, // When token expires, Unix epoch in milliseconds
    pub starts_at: Option<u64>, // When token starts being valid, Unix epoch in milliseconds
    pub updated_at: Option<u64>, // When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    pub reference: Option<String>, // URL to an off-chain JSON file with more info.
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Token {
    //owner of the token
    pub owner_id: AccountId,
}

//The Json token is what will be returned from view calls. 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonToken {
    //token ID
    pub token_id: TokenId,
    //owner of the token
    pub owner_id: AccountId,
    //token metadata
    pub metadata: TokenMetadata,
}

pub trait NonFungibleTokenMetadata {
    //view call for returning the contract metadata
    fn nft_metadata(&self) -> NFTContractMetadata;
}

#[near_bindgen]
impl NonFungibleTokenMetadata for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- contract/src/mint.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    #[payable]
    pub fn nft_mint(&mut self, token_id: TokenId, metadata: TokenMetadata, receiver_id: AccountId) {
        //measure the initial storage being used on the contract
        let initial_storage_usage = env::storage_usage();

        //specify the token struct that contains the owner ID
        let token = Token {
            //set the owner ID equal to the receiver ID passed into the function
            owner_id: receiver_id,
        };

        //insert the token ID and token struct and make sure that the token doesn't exist
        // assert!(
        //     self.tokens_by_id.insert(&token_id, &token).is_none(),
        //     "Token already exists"
        // );

        if self.tokens_by_id.insert(&token_id, &token).is_none() {
            //insert the token ID and metadata
            self.token_metadata_by_id.insert(&token_id, &metadata);

            //call the internal method for adding the token to the owner
            self.internal_add_token_to_owner(&token.owner_id, &token_id);
        }

        //calculate the required storage which was the used - initial
        //let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.
        //refund_deposit(required_storage_in_bytes);
    }
}

'''
'''--- contract/src/nft_core.rs ---
use crate::*;
use near_sdk::{ext_contract, log, Gas, PromiseResult};

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(10_000_000_000_000);
const GAS_FOR_NFT_TRANSFER_CALL: Gas = Gas(25_000_000_000_000 + GAS_FOR_RESOLVE_TRANSFER.0);
const NO_DEPOSIT: Balance = 0;

pub trait NonFungibleTokenCore {
    //transfers an NFT to a receiver ID
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        memo: Option<String>,
    );

    //transfers an NFT to a receiver and calls a function on the receiver ID's contract
    /// Returns `true` if the token was transferred from the sender's account.
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        memo: Option<String>,
        msg: String,
    );

    //get information about the NFT token passed in
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken>;
}

#[ext_contract(ext_non_fungible_token_receiver)]
trait NonFungibleTokenReceiver {
    //Method stored on the receiver contract that is called via cross contract call when nft_transfer_call is called
    /// Returns `true` if the token should be returned back to the sender.
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    );
}

#[ext_contract(ext_self)]
trait NonFungibleTokenResolver {
    /*
        resolves the promise of the cross contract call to the receiver contract
        this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
        as part of the nft_transfer_call method
    */
    fn nft_resolve_transfer(
        &mut self,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
    );
}

/*
    resolves the promise of the cross contract call to the receiver contract
    this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
    as part of the nft_transfer_call method
*/ 
trait NonFungibleTokenResolver {
    fn nft_resolve_transfer(
        &mut self,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        memo: Option<String>,
    ) {
        /*
            FILL THIS IN
        */
    }

    //implementation of the transfer call method. This will transfer the NFT and call a method on the reciver_id contract
    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        memo: Option<String>,
        msg: String,
    ) {
        /*
            FILL THIS IN
        */
    }

    //get the information for a specific token ID
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken> {
        //if there is some token ID in the tokens_by_id collection
        if let Some(token) = self.tokens_by_id.get(&token_id) {
            //we'll get the metadata for that token
            let metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            //we return the JsonToken (wrapped by Some since we return an option)
            Some(JsonToken {
                token_id,
                owner_id: token.owner_id,
                metadata,
            })
        } else { //if there wasn't a token ID in the tokens_by_id collection, we return None
            None
        }
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Contract {
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
    ) {
        /*
            FILL THIS IN
        */
    }
}
'''
'''--- contract/src/royalty.rs ---
use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
  	fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32);
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) {
		/*
            FILL THIS IN
        */
	}

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) {
        /*
            FILL THIS IN
        */
    }
}

'''
'''--- package.json ---
{
  "name": "NSevenNFT",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand",
    "web": "parcel src/index.html --open",
    "predeploy": "npm run build",
    "deploy": "gh-pages -d build"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.43.1",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = 'hi.nsevenchallenge6.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/css/main.css ---
body{
    font-family: sans-serif;
    margin: 0;
    padding: 0;
    font-size: 15px;
}
h1, h2, h3, h4, h5, h6{
    margin: 0;
    font-family: 'Montserrat', sans-serif;
}
div, p, input, button,form, span, a,ul, li{
    box-sizing: border-box;
}

p{
    line-height: 1.7;
}

.logo{
    width: 180px;
    margin-left: -900px;
}
.container{
    width: 1170px;
    margin: 20px auto;
    
}

.header{
    padding-bottom: 150px;
background: rgba(4,203,176,1);
background: -moz-linear-gradient(-45deg, rgba(4,203,176,1) 0%, rgba(3,120,253,1) 100%);
background: -webkit-gradient(left top, right bottom, color-stop(0%, rgba(4,203,176,1)), color-stop(100%, rgba(3,120,253,1)));
background: -webkit-linear-gradient(-45deg, rgba(4,203,176,1) 0%, rgba(3,120,253,1) 100%);
background: -o-linear-gradient(-45deg, rgba(4,203,176,1) 0%, rgba(3,120,253,1) 100%);
background: -ms-linear-gradient(-45deg, rgba(4,203,176,1) 0%, rgba(3,120,253,1) 100%);
background: linear-gradient(135deg, rgba(4,203,176,1) 0%, rgba(3,120,253,1) 100%);
filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#04cbb0', endColorstr='#0378fd', GradientType=1 );
padding-top: 23px;
color: #fff;

}
.wrapper{
    display: flex;
    justify-content: space-between;
}
.offer{
    margin-top: 156px;
    width: 570px;
}
.title{
    font-family: 'ubuntu', sans-serif;
    font-size: 37px;
}
.title span{
    font-size: 59px;
}
.intro{
    font-size: 16px;
    margin-bottom: 42px;
    font-family: 'Open Sans', sans-serif;
    width: 410px;
}
.btn{
    margin-top: 20px;
    background: #ffd429;
    color: black;
    width: 222px;
    display: block;
    padding: 20px 0;
    font-family: 'Montserrat', sans-serif;
    text-align: center;
    text-decoration: none;
    transition: all 0.5s easy;
}
.btn:hover{
    background: #d0a90c;
}
.learn{
    margin-bottom: 120px;
}

.desktop{
    margin-top: 57px;
}

.section-title{
    margin-top: 107px;
    text-align: center;
    margin-bottom: 75px;
}
.skills{
    text-align: center;
    display: flex;
    justify-content: space-between;
}
.skills p{
    font-family: 'Ubuntu', sans-serif;
}

.skill{
    width: 350px;
    padding-top: 50px;
    text-align: center;
    border: 4px solid #088556

}
.skill-title{
    font-size: 19px;

}
.skill-travel{
    width: 270px;
    

}
.skill-create{
    
    width: 307px;
}
.mail{
    background: #ecf3f8;
    padding-top: 104px;
    padding-bottom: 102px;
}
.form {
    text-align: center;
}

.input{
    width: 343px;
    height: 50px;
    margin-bottom: 16px;
    padding-left: 16px;
    border: 1px solid #bbbbbb;
    font-family: 'Ubuntu', sans-serif;
} 

.btn-form{
    width: 343px;
    height: 50px;
    cursor: pointer;
    display: block;
    margin-left: 414px;
    padding: 10px 0;
    margin-top: 0px;
    border: 0;
} 
.section-title-mail{
    margin-bottom: 57px;
}

.footer{
    padding-top: 60px;
    padding-bottom: 60px;
    background: #164d7a;
    text-align: center;
    font-family: 'Open Sans', sans-serif;
    font-size: 14px;
}

@import url(https://fonts.googleapis.com/css?family=Fira+Sans:400,500italic);
@-webkit-keyframes eyes {
  0%, 8.8888888889%, 100% {
    top: -50px;
  }
  17.7777777778% {
    top: -45px;
  }
  91.1111111111% {
    top: -20px;
  }
  57.7777777778%, 88.8888888889% {
    top: -15px;
  }
  66.6666666667% {
    top: -25px;
  }
}
@keyframes eyes {
  0%, 8.8888888889%, 100% {
    top: -50px;
  }
  17.7777777778% {
    top: -45px;
  }
  91.1111111111% {
    top: -20px;
  }
  57.7777777778%, 88.8888888889% {
    top: -15px;
  }
  66.6666666667% {
    top: -25px;
  }
}
@-webkit-keyframes wings {
  0%, 88.8888888889%, 100% {
    top: 70px;
  }
  91.1111111111% {
    top: 60px;
  }
}
@keyframes wings {
  0%, 88.8888888889%, 100% {
    top: 70px;
  }
  91.1111111111% {
    top: 60px;
  }
}
@-webkit-keyframes feet {
  0%, 88.8888888889%, 100% {
    top: -2px;
  }
  91.1111111111% {
    top: 0px;
  }
}
@keyframes feet {
  0%, 88.8888888889%, 100% {
    top: -2px;
  }
  91.1111111111% {
    top: 0px;
  }
}
@-webkit-keyframes cloud {
  0% {
    left: -140px;
  }
  100% {
    left: 280px;
  }
}
@keyframes cloud {
  0% {
    left: -140px;
  }
  100% {
    left: 280px;
  }
}
html {
  height: 100%;
  background-color: #222024;
  background: radial-gradient(circle at center, #47414c 0%, #019024 100%);
  background-repeat: no-repeat;

}

body {
  text-align: center;
  font: normal 100% "Fira Sans", sans-serif;
}

a {
  color: #aaa;
}

.globe {
  margin: 1em 0 0 0;
  position: relative;
  display: inline-block;
  text-align: left;
  width: 400px;
  height: 400px;
  border-radius: 50%;
  border: 20px solid #f7dbcf;
  box-sizing: border-box;
  background: linear-gradient(to bottom, #86aecc 0%, #d4e4ef 100%);
  overflow: hidden;
  box-shadow: inset 0 0 80px rgba(0, 0, 0, 0.5), 0 0 20px rgba(0, 0, 0, 0.3);
}
.globe:before, .globe:after {
  position: absolute;
  content: "";
  box-sizing: border-box;
  border-radius: 50%;
  z-index: 10;
}
.globe:before {
  height: 94%;
  width: 94%;
  top: 3%;
  right: 3%;
  border: 10px solid transparent;
  border-right-color: rgba(255, 255, 255, 0.3);
  border-right-width: 10px;
  border-right-style: solid;
}
.globe:after {
  top: 50px;
  right: 65px;
  width: 10px;
  height: 10px;
  background: rgba(255, 255, 255, 0.3);
}
.globe .bird {
  position: absolute;
  z-index: 1;
  left: 96px;
  top: 100px;
}
.globe .bird .body {
  position: absolute;
  width: 175px;
  height: 186px;
  border-radius: 50%;
  background-clip: padding-box;
  background-color: #11e7d7;
  box-shadow: inset 0 0 80px rgba(0, 0, 0, 0.3);
}
.globe .bird .body:before, .globe .bird .body:after {
  position: absolute;
  content: "";
  z-index: -1;
  width: 26px;
  height: 93px;
  border-radius: 50%;
  background-color: #11e7d7;
  box-shadow: inset 0 0 13px rgba(0, 0, 0, 0.3);
  top: 70px;
  -webkit-animation: wings 4.5s linear infinite;
          animation: wings 4.5s linear infinite;
}
.globe .bird .body:before {
  left: 0;
}
.globe .bird .body:after {
  right: 0;
}
.globe .bird .body .eye {
  position: absolute;
  z-index: 1;
  overflow: hidden;
  width: 56px;
  height: 56px;
  top: 28px;
  border-radius: 50%;
  background-color: #fff;
  border: 1px solid #01c7be;
  box-shadow: inset 0 0 0 1px #01c7be;
}
.globe .bird .body .eye:before, .globe .bird .body .eye:after {
  position: absolute;
  content: "";
}
.globe .bird .body .eye:before {
  width: 18px;
  height: 18px;
  border-radius: 50%;
  background-color: #000;
  top: 30px;
}
.globe .bird .body .eye:after {
  width: 200px;
  height: 200px;
  background: radial-gradient(ellipse at center, rgba(109, 0, 25, 0) 0%, rgba(130, 1, 31, 0) 35%, #01c7be 36%, #31bfae 100%);
  -webkit-animation: eyes 4.5s linear infinite;
          animation: eyes 4.5s linear infinite;
}
.globe .bird .body .eye.left {
  left: 15px;
}
.globe .bird .body .eye.left:before {
  left: 20px;
}
.globe .bird .body .eye.left:after {
  left: -60px;
  top: -45px;
}
.globe .bird .body .eye.right {
  right: 15px;
}
.globe .bird .body .eye.right:before {
  right: 20px;
}
.globe .bird .body .eye.right:after {
  right: -60px;
  top: -45px;
}
.globe .bird .body .beak {
  position: absolute;
  z-index: 1;
  width: 41px;
  height: 55px;
  top: 70px;
  left: 67px;
  border-radius: 50%;
  background-color: #31bfae;
}
.globe .bird .body .beak:before {
  position: absolute;
  content: "";
  width: inherit;
  height: inherit;
  top: 2px;
  border-radius: 50%;
  background: #eb9f2d;
}
.globe .bird .body .beak:after {
  position: absolute;
  content: "";
  z-index: -1;
  width: 37px;
  height: inherit;
  top: 12px;
  left: 2px;
  border-radius: 50%;
  background: #31bfae;
}
.globe .bird .body .beak div {
  position: absolute;
  width: 43px;
  height: 43px;
  top: -1px;
  left: -1px;
  border-radius: 50% 60% 50% 40%;
  background-clip: padding-box;
  background-color: #f7d35d;
  transform: rotate(-45deg);
}
.globe .bird .body .beak div:before {
  position: absolute;
  content: "";
  transform: rotate(45deg);
  width: 17px;
  height: 8px;
  top: 10px;
  left: 20px;
  border-radius: 50%;
  background-color: #fff;
}
.globe .bird .body .feet {
  position: absolute;
  bottom: 15px;
  width: 100%;
}
.globe .bird .body .feet:before, .globe .bird .body .feet:after {
  position: absolute;
  content: "";
  width: 27px;
  height: 21px;
  border-radius: 50%;
  background-color: #f8c14d;
  box-shadow: inset 0 0 12px rgba(0, 0, 0, 0.2);
  -webkit-animation: feet 4.5s linear infinite;
          animation: feet 4.5s linear infinite;
}
.globe .bird .body .feet:before {
  left: 40px;
}
.globe .bird .body .feet:after {
  right: 40px;
}
.globe .wire {
  position: absolute;
  z-index: -1;
  width: 500px;
  height: 400px;
  left: -173px;
  top: -215px;
  border-radius: 50%;
  border: 3px solid transparent;
  border-bottom-color: black;
}
.globe .hills {
  position: absolute;
  width: 60px;
  height: 60px;
  border-radius: 30%;
  top: 230px;
  left: 60px;
  transform: rotate(45deg);
  background: radial-gradient(ellipse at top left, #aad95d 0%, #bbc369 100%);
  box-shadow: inset 5px 0 12px rgba(0, 0, 0, 0.2);
}
.globe .hills:before, .globe .hills:after {
  position: absolute;
  content: "";
  width: 178px;
  height: 90px;
  border-radius: 50%;
  background: inherit;
  box-shadow: inherit;
}
.globe .hills:before {
  left: -90px;
  top: 30px;
  z-index: -1;
  transform: rotate(-20deg);
}
.globe .hills:after {
  left: 0px;
  top: -55px;
  transform: rotate(120deg);
}
.globe .cloud {
  position: absolute;
  width: 70px;
  height: 24px;
  background: linear-gradient(to bottom, #f2f9fe 5%, #d6f0fd 100%);
  border-radius: 20px;
  top: -20px;
  z-index: -1;
  -webkit-animation: cloud 9s linear infinite;
          animation: cloud 9s linear infinite;
}
.globe .cloud.small {
  top: -50px;
  transform: scale(0.6);
  -webkit-animation-delay: -1.5s;
          animation-delay: -1.5s;
  -webkit-animation-duration: 13.5s;
          animation-duration: 13.5s;
}
.globe .cloud:before, .globe .cloud:after {
  position: absolute;
  content: "";
  background: inherit;
  z-index: -1;
}
.globe .cloud:before {
  width: 36px;
  height: 36px;
  top: -18px;
  right: 10px;
  border-radius: 40px;
}
.globe .cloud:after {
  width: 20px;
  height: 20px;
  top: -10px;
  left: 10px;
  border-radius: 20px;
}

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #ff585d;
  --secondary: #0072ce;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica,
    Arial, sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 40em;
}

h1 {
  background-image: url(assets/near-ua.png);
  background-position: center 1.5em;
  background-repeat: no-repeat;
  background-size: auto 1.25em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

p {
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button,
input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover,
button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button,
button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
/* aside footer *:first-child {
  color: var(--success);
} */
aside footer *:last-child {
  color: var(--success);
}
.items-container {
  text-align: center;
  display: flex;
  justify-content: space-between;
  gap: 1em;
}
.items-container img {
  max-width: 250px;
}
.items-container input {
  border-radius: 5px;
}
.items-container input[type="submit"] {
  cursor: pointer;
}

@media screen and (max-width: 600px) {
  .items-container {
    display: block;
  }
  .items-container > div {
    margin-bottom: 2em;
  }
}

@keyframes notify {
  0% {
    transform: translateY(10em);
  }
  5% {
    transform: translateY(0);
  }
  95% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(10em);
  }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@900&family=Open+Sans&family=Ubuntu:wght@700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="css/main.css">
    <title>NSevenZoo</title>
</head>
<main id="signed-out-flow" style="display: none" >
<body>
    <header id="header" class="header">       
         <div class="container">
            <img src="jpg/near_logo.png" alt="WAYUP" class="logo"> 
            <div class="wrapper">
                    <div class="offer">
                        <h1 class="title">
                            Many animals in Ukraine will face starvation because no one takes care of <span>them!</span> 
                        </h1>  
                        <p class="intro">
                            Ukrainian zoos are in dire need of help now and need help after the end of the war. There are no visitors in zoos, which is provided for the lack of budget.   
                        </p>
                        <button id="sign-in-button" class="btn">Connect wallet</button>
                    </div>
                    <div class="globe">
                        <div class="bird">
                            <div class="body">
                                <div class="eye left"></div>
                                <div class="eye right"></div>
                                <div class="beak"><div></div></div>
                                <div class="feet"></div>
                                <div class="wire"></div>
                            </div>
                            <div class="hills"></div>
                            <div class="cloud"></div>
                            <div class="cloud small"></div>
                        </div>
                    </div>
            </div>
        </div>       
    </header>
</main>
    <section id="signed-in-flow" style="display: none" id="learn" class="learn">
        <div class="container">
            <button class="link" style="float: right" id="sign-out-button">
        Sign out
            </button>
            <h2 class="section-title">Your generous donations can save many lives!</h2>
            <div class="skills">
                <div class="skill">
                    <div style="margin-left: auto; margin-right: auto">
                        <img class="photo" style="margin-top: 30px; width: 100%;" src="./jpg/panda.gif"/>
                        <div>
                            <p>Help Panda</p>
                            <form id="pform">
                            <p>
                                Donate: <input style="width: 100px; background-color: white;" min="1" step="1" type="number" required name="" id="panda">
                                <span title="NEAR Tokens">â“ƒ</span>
                            </p>
                            <input style="background-color: #0072ce; color: #efefef;" type="submit" value="Donate & Mint">
                            </form>
                        </div>
                    </div>
                </div>
                 <div class="skill skill-travel">
                    <div style="margin-left: auto; margin-right: auto">
                        <img style="margin-top: 30px; width: 76%" src="./jpg/ken.gif" />
                    <div>
                        <p>Help Kangaroo</p>
                        <form id="kform">
                            <p>
                                Donate: <input style="width: 100px; background-color: white;" min="1" step="1" type="number" required name="" id="kangaroo">
                                <span title="NEAR Tokens">â“ƒ</span>
                            </p>
                            <input style="background-color: #0072ce; color: #efefef;" type="submit" value="Donate & Mint">
                        </form>
                    </div>
                    </div>
                </div>
                 <div class="skill skill-create">
                    <div style="margin-left: auto; margin-right: auto">
                        <img
                            style="margin-top: 30px; width: 100%"
                            src="./jpg/elephant.gif"
                            />
                        <div>
                            <p>Help Elephant</p>
                            <form id="eform">
                                <p>
                                Donate: <input style="width: 100px; background-color: white;" min="1" step="1" type="number" required name="" id="elephant">
                                <span title="NEAR Tokens">â“ƒ</span>
                                </p>
                                <input style="background-color: #0072ce; color: #efefef;" type="submit" value="Donate & Mint">
                            </form>
                        </div>
                    </div>
                </div>
           </div> 
        </div>
    </section>
    
    <footer id="footer" class="footer">
        <div class="container">
            <p>Â© NSeven Project</p>
        </div>
    </footer>  
    <script src="./index.js"></script> 
</body>
</html>
'''
'''--- src/index.js ---
import 'regenerator-runtime/runtime'

import { initContract, login, logout } from './utils'
import { utils } from "near-api-js";
const BN = require("bn.js");

function showNotification() {
  document.querySelector('[data-behavior=notification]').style.display = 'block'
  setTimeout(() => {
    document.querySelector('[data-behavior=notification]').style.display = 'none'
  }, 7000)
}

let gd, ld, md

window.onload = async () => {

  gd = await window.contract.nft_token({
    token_id: window.accountId + 'p'
  });

  console.log(pd)

  ld = await window.contract.nft_token({
    token_id: window.accountId + 'k'
  });

  console.log(kd)

  md = await window.contract.nft_token({
    token_id: window.accountId + 'e'
  });

  console.log(ed)

  if (pd || kd || ed)
    showNotification()
}

const pform = document.
  getElementById('pform');

pform.addEventListener('submit', pformSubmit);

async function pformSubmit(event) {
  event.preventDefault();
  let amt = document.getElementById('panda').value
  amt = utils.format.parseNearAmount(amt.toString()).toString()
  try {
    // make an update call to the smart contract
    await window.contract.nft_mint({
      token_id: window.accountId + 'p',
      metadata: {
        title: "Thank you for help panda",
        description: "This NFT is a part of NEAR Spring Hackathon ;)",
        media: "https://i.gifer.com/YmbV.gif?wrap=0"
      },
      receiver_id: window.accountId,
    },
      300000000000000,
      new BN(amt))
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    )
    throw e
  }

}

const kform = document.
  getElementById('kform');

kform.addEventListener('submit', kformSubmit);

async function kformSubmit(event) {
  event.preventDefault();
  let amt = document.getElementById('kangaroo').value
  amt = utils.format.parseNearAmount(amt.toString()).toString()
  try {
    // make an update call to the smart contract
    await window.contract.nft_mint({
      token_id: window.accountId + 'k',
      metadata: {
        title: "Thank you for help kangaroo",
        description: "This NFT is a part of NEAR Spring Hackathon ;)",
        media: "https://i.gifer.com/BgYD.gif?wrap=0"
      },
      receiver_id: window.accountId,
    },
      300000000000000,
      new BN(amt))
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    )
    throw e
  }
}

const eform = document.
  getElementById('eform');

eform.addEventListener('submit', eformSubmit);

async function eformSubmit(event) {
  event.preventDefault();
  let amt = document.getElementById('elephant').value
  amt = utils.format.parseNearAmount(amt.toString()).toString()
  try {
    // make an update call to the smart contract
    await window.contract.nft_mint({
      token_id: window.accountId + 'e',
      metadata: {
        title: "Thank you for help elephant",
        description: "This NFT is a part of NEAR Spring Hackathon ;)",
        media: "https://i.gifer.com/LCc8.gif?wrap=0"
      },
      receiver_id: window.accountId,
    },
      300000000000000,
      new BN(amt))
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    )
    throw e
  }
}

document.querySelector('#sign-in-button').onclick = login
document.querySelector('#sign-out-button').onclick = logout

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-out-flow').style.display = 'block'
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-in-flow').style.display = 'block'

  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = window.accountId
  })
}

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
  .then(() => {
    if (window.walletConnection.isSignedIn()) signedInFlow()
    else signedOutFlow()
  })
  .catch(console.error)

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['nft_token'],
    changeMethods: ['nft_mint'],
    sender: window.accountId
  })
})

// test('get_greeting', async () => {
//   const message = await window.contract.get_greeting({ account_id: window.accountId })
//   expect(message).toEqual('Hello')
// })

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection, KeyPair } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig('testnet')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near, nearConfig.contractName)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['nft_token'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['nft_mint'],
  })

  window.senderAccount = await near.account(window.accountId);
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''