*GitHub Repository "miraclx/nosedive-rs"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
# near-nosedive

NEAR smart contract implementing a rating system between NEAR accounts.
Inspired by Black Mirror's [NoseDive](https://en.wikipedia.org/wiki/Nosedive_(Black_Mirror)) episode.
The contract in [contract/src/lib.rs](contract/src/lib.rs) provides methods to register one's own account, vote a registered account, view account state, etc.

Front end isn't implemented yet, but given that all the [integration tests](src/main.test.js) checkout, UI is a non-issue.

## Contract API

Functions with `&mut self` are change methods, requiring the caller to sign a transactio. While those without it are view methods and can be called without needing a transaction.

### <a id='fn:register'></a> register(&mut self)

> * Panics if the account already exists.
> * This requires a signed transaction.
> * Free to call (this function call requires no transfer of funds).

Registers the signer of the transaction on the smart contract. Accounts cannot be rated or queried if they haven't first registered. Registered accounts are automatically given `2` points on the rating system.

### status(account_id)

* `account_id`: &lt;[AccountId][account-id]&gt;
* Returns: &lt;[object]&gt;
  * `rating`: &lt;[float][number]&gt; Floating-point rating of the account from `0` to `5`.
  * `given`: &lt;[number]&gt; How many ratings this account has given out.
  * `received`: &lt;[number]&gt; How many ratings this account has received from other accounts.

> * This requires the account to be [registered](#fn:register) on the contract.

Queries the rating status of a single account.

### rating_timestamps(a, b)

* `a`: &lt;[AccountId][account-id]&gt;
* `b`: &lt;[AccountId][account-id]&gt;
* Returns: &lt;[object]&gt;
  * `a_to_b`: &lt;[number]&gt; | &lt;[null]&gt; Nanosecond timestamp for when last the account `a` rated `b`, `null` if never.
  * `b_to_a`: &lt;[number]&gt; | &lt;[null]&gt; Nanosecond timestamp for when last the account `b` rated `a`, `null` if never.

> * This requires both accounts to be [registered](#fn:register) on the contract.

Queries most recent timestamps for both accounts rating each other.

### rate(&mut self, account_id, rating)

* `account_id`: &lt;[AccountId][account-id]&gt; The account you want to rate.
* `rating`: &lt;[float][number]&gt; Floating-point rating between `0` and `5`, but by multiples of `.5`.

> * You cannot rate yourself.
> * This requires both the rater and the account being rated to be [registered](#fn:register) on the contract.
> * Rating must be a multiple of `.5` between `0` and `5`. (`2.5`, `4.0`, etc..)
> * By default, you can only rate an account once every 5 minutes.
> * This requires a signed transaction.
> * Free to call (this function call requires no transfer of funds).

Allows one account to rate another, on a scale of `0` to `5`.

### patch_state(&mut self, patches)

* `patches`: &lt;[object]&gt;
  * `voting_interval`: &lt;[object]&gt; | &lt;[null]&gt; (use `null` to remove the interval)
    * `secs`: &lt;[number]&gt; Duration in seconds before an account is allowed to vote the same other account again. Default: 5 minutes
    * `msg`: &lt;[string]&gt; Message to report when an account tries to rate the same other account before the expiration of that waiting interval. Default: `"you can't vote the same account more than once in 5 minutes"`

> * Only the account the contract is deployed on may call this function.
> * This requires a signed transaction.
> * Free to call (this function call requires no transfer of funds).

Aids the contract deployer in dynamically configuring the deployed contract.
A "settings" helper if you will.

<details>

<summary> This app was initialized with <a href="https://github.com/near/create-near-app">create-near-app</a> </summary>

## Quick Start

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

## Exploring The Code

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

## Deploy

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

### Step 0: Install near-cli (optional)

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

### Step 1: Create an account for the contract

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `nosedive-rs.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `nosedive-rs.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account nosedive-rs.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

### Step 2: set contract name in code

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'nosedive.YOUR-NAME.testnet'

### Step 3: deploy

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

## Troubleshooting

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

</details>

## License

[Apache 2.0][license] © **Miraculous Owonubi** ([@miraclx][author-url]) \<omiraculous@gmail.com\>

  [account-id]: https://docs.near.org/docs/concepts/account#account-id-rules
  [object]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object
  [number]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number
  [string]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String
  [null]: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null

  [license]: LICENSE "Apache 2.0 License"
  [author-url]: https://github.com/miraclx

  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "near-nosedive"
version = "0.1.0"
authors = ["Miraculous Owonubi <omiraculous@gmail.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0-pre.4"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
nosedive-rs Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1].replace("-", "_")
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
use std::fmt;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{de, Deserialize, Serialize};
use near_sdk::{
    collections::{LazyOption, LookupMap},
    AccountId, Timestamp,
};
use near_sdk::{env, near_bindgen, require};

#[derive(Eq, Debug, PartialEq, Serialize, BorshSerialize, BorshDeserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Votes {
    given: u64,
    received: u64,
}

#[derive(Debug, Serialize, Deserialize, BorshSerialize, BorshDeserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct VoteInterval {
    secs: u64,
    msg: String,
}

#[derive(Debug, PartialEq, Serialize, BorshSerialize, BorshDeserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct UserState {
    rating: f32,
    #[serde(flatten)]
    votes: Votes,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct NoseDive {
    users: LookupMap<AccountId, UserState>,
    history: LookupMap<(AccountId, AccountId), Timestamp>,
    vote_interval: LazyOption<Option<VoteInterval>>,
}

impl Default for VoteInterval {
    fn default() -> Self {
        Self {
            secs: 5 * 60,
            msg: "you can't vote the same account more than once in 5 minutes".to_string(),
        }
    }
}

impl Default for UserState {
    fn default() -> Self {
        Self {
            rating: 2.0, // you're a 2 ⭐️ simply for existing
            votes: Votes {
                given: 0,
                received: 1,
            },
        }
    }
}

impl Default for NoseDive {
    fn default() -> Self {
        let mut vote_interval = LazyOption::new(":i".as_bytes(), None);
        if let None = vote_interval.get() {
            vote_interval.set(&Some(VoteInterval::default()));
        }
        Self {
            users: LookupMap::new(":u".as_bytes()),
            history: LookupMap::new(":h".as_bytes()),
            vote_interval,
        }
    }
}

#[derive(Eq, Debug, Serialize, PartialEq)]
#[serde(crate = "near_sdk::serde")]
pub struct RatingTimestamps {
    a_to_b: Option<Timestamp>,
    b_to_a: Option<Timestamp>,
}

#[near_bindgen]
impl NoseDive {
    pub fn register(&mut self) {
        let your_account_id = env::signer_account_id();
        if self.users.contains_key(&your_account_id) {
            env::panic_str(&format!(
                "this account has already been registered: [{}]",
                your_account_id
            ));
        }
        self.users.insert(&your_account_id, &UserState::default());
    }

    fn lookup(&self, account_id: &AccountId) -> UserState {
        let state = self.users.get(account_id);
        match state {
            Some(state) => state,
            None => env::panic_str(&format!(
                "account does not exist on this service: [{}]",
                account_id,
            )),
        }
    }

    pub fn status(&self, account_id: AccountId) -> UserState {
        self.lookup(&account_id)
    }

    pub fn rating_timestamps(&self, a: AccountId, b: AccountId) -> RatingTimestamps {
        for id in [&a, &b] {
            if !self.users.contains_key(id) {
                env::panic_str(&format!("account does not exist on this service: [{}]", id));
            }
        }
        let ab_pair = (a, b);
        let a_to_b = self.history.get(&ab_pair);
        let ba_pair = (ab_pair.1, ab_pair.0);
        let b_to_a = self.history.get(&ba_pair);
        RatingTimestamps { a_to_b, b_to_a }
    }

    pub fn rate(&mut self, account_id: AccountId, rating: f32) {
        require!(
            validate_rating(rating),
            "enter a valid rating: multiples of .5 between 0 and 5"
        );
        let your_account_id = env::signer_account_id();
        let mut your_state = self.lookup(&your_account_id);
        let mut their_state = self.lookup(&account_id);
        require!(account_id != your_account_id, "you can't rate yourself");
        let (your_account_id, account_id) = {
            let now = env::block_timestamp();
            let rating_pair = (your_account_id, account_id);
            if let Some(Some(vote_interval)) = self.vote_interval.get() {
                if let Some(last_timestamp) = self.history.get(&rating_pair) {
                    require!(
                        now.checked_sub(last_timestamp)
                            .map_or(false, |delta| delta / 1_000_000_000 >= vote_interval.secs),
                        &vote_interval.msg
                    );
                }
            }
            self.history.insert(&rating_pair, &now);
            rating_pair
        };
        let total_ratings = their_state.rating * their_state.votes.received as f32;
        let this_rating = (rating + your_state.rating) / 2.0;
        their_state.votes.received += 1;
        your_state.votes.given += 1;
        their_state.rating = (total_ratings + this_rating) / their_state.votes.received as f32;
        self.users.insert(&your_account_id, &your_state);
        self.users.insert(&account_id, &their_state);
    }

    /// ## Format
    ///
    /// ```json
    /// {
    ///   "voting_interval": null | {
    ///     "secs": 5,
    ///     "msg": "wait 5 seconds"
    ///   }
    /// }
    /// ```
    pub fn patch_state(&mut self, patches: ContractPatch) {
        require!(
            env::current_account_id() == env::signer_account_id(),
            "only the account that deployed this contract is permitted to call this method"
        );
        for patch in patches.0 {
            match patch {
                PatchSpec::SetVotingInterval(interval) => {
                    self.vote_interval.set(&interval);
                }
            }
        }
    }
}

fn validate_rating(rating: f32) -> bool {
    (rating >= 0.0 && rating <= 5.0) && rating.fract() % 0.5 == 0.0
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub enum PatchSpec {
    SetVotingInterval(Option<VoteInterval>),
}

#[derive(Serialize)]
#[serde(crate = "near_sdk::serde")]
pub struct ContractPatch(Vec<PatchSpec>);

impl<'de> de::Deserialize<'de> for ContractPatch {
    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>
    where
        D: de::Deserializer<'de>,
    {
        struct Visitor;

        impl<'de> de::Visitor<'de> for Visitor {
            type Value = ContractPatch;

            fn expecting(&self, fmt: &mut fmt::Formatter<'_>) -> Result<(), fmt::Error> {
                fmt.write_str("an object defining contract patches")
            }

            fn visit_map<A>(self, mut map: A) -> Result<Self::Value, A::Error>
            where
                A: de::MapAccess<'de>,
            {
                let mut vec = Vec::with_capacity(map.size_hint().unwrap_or(0));

                while let Some(k) = map.next_key()? {
                    match k {
                        "voting_interval" => {
                            vec.push(PatchSpec::SetVotingInterval(map.next_value()?))
                        }
                        _ => {
                            map.next_value::<de::IgnoredAny>()?;
                            return Err(de::Error::unknown_field(k, &["voting_interval"]));
                        }
                    }
                }

                Ok(ContractPatch(vec))
            }
        }
        deserializer.deserialize_map(Visitor)
    }
}

#[cfg(test)]
mod tests {
    use std::time::{SystemTime, UNIX_EPOCH};

    use near_sdk::{
        test_utils::{
            test_env::{alice, bob},
            VMContextBuilder,
        },
        testing_env,
    };

    use super::*;

    fn now() -> Timestamp {
        SystemTime::now()
            .duration_since(UNIX_EPOCH)
            .unwrap()
            .as_nanos() as Timestamp
    }

    fn sys() -> AccountId {
        "nosedive_sys.near".parse().unwrap()
    }

    fn stage(account_id: AccountId) -> NoseDive {
        let context = VMContextBuilder::new()
            .current_account_id(sys())
            .signer_account_id(account_id.clone())
            .predecessor_account_id(account_id)
            .block_timestamp(now())
            .build();
        testing_env!(context);
        NoseDive::default()
    }

    fn status(account_id: AccountId) -> UserState {
        stage(sys()).status(account_id)
    }

    #[test]
    fn default() {
        stage(alice()).register();
        stage(bob()).register();
        // --
        assert_eq!(
            status(alice()),
            UserState {
                rating: 2.0,
                votes: Votes {
                    given: 0,
                    received: 1,
                }
            }
        );
        assert_eq!(
            status(bob()),
            UserState {
                rating: 2.0,
                votes: Votes {
                    given: 0,
                    received: 1,
                }
            }
        );
    }

    #[test]
    #[should_panic(expected = "this account has already been registered")]
    fn single_entry() {
        stage(alice()).register();
        stage(alice()).register();
    }

    #[test]
    #[should_panic(expected = "account does not exist on this service")]
    fn no_account() {
        stage(alice()).register();
        stage(alice()).rate(bob(), 5.0);
    }

    #[test]
    fn rate_then_view() {
        stage(sys()).patch_state(ContractPatch(vec![PatchSpec::SetVotingInterval(None)]));

        stage(alice()).register();
        stage(bob()).register();
        // --
        for _ in 1..=10 {
            stage(bob()).rate(alice(), 4.5);
            stage(alice()).rate(bob(), 5.0);
        }
        // --
        assert_eq!(
            status(alice()),
            UserState {
                rating: 3.7977424,
                votes: Votes {
                    given: 10,
                    received: 11,
                }
            }
        );
        assert_eq!(
            status(bob()),
            UserState {
                rating: 4.006109,
                votes: Votes {
                    given: 10,
                    received: 11,
                }
            }
        );
    }

    #[test]
    fn lookup_timestaps() {
        use std::{thread, time};

        stage(alice()).register();
        stage(bob()).register();
        // --
        assert_eq!(
            stage(sys()).rating_timestamps(alice(), bob()),
            RatingTimestamps {
                a_to_b: None,
                b_to_a: None,
            }
        );
        // --
        let start = now();
        stage(bob()).rate(alice(), 4.5);
        let bob_alice = now();

        thread::sleep(time::Duration::from_secs(2));

        stage(alice()).rate(bob(), 4.5);
        let alice_bob = now();
        // --
        let ratings = stage(sys()).rating_timestamps(alice(), bob());
        assert!(matches!(
            ratings,
            RatingTimestamps {
                a_to_b: Some(a_to_b),
                b_to_a: Some(b_to_a)
            }
            if (start..=bob_alice).contains(&b_to_a)
            && (bob_alice..=alice_bob).contains(&a_to_b)
        ));
    }

    #[test]
    #[should_panic(
        expected = "only the account that deployed this contract is permitted to call this method"
    )]
    fn patch_auth_violation() {
        stage(alice()).patch_state(ContractPatch(vec![PatchSpec::SetVotingInterval(None)]));
    }

    #[test]
    fn patch_auth_pass() {
        stage(sys()).patch_state(ContractPatch(vec![PatchSpec::SetVotingInterval(None)]));
    }

    #[test]
    fn interval_pass() {
        use std::{thread, time};

        stage(sys()).patch_state(ContractPatch(vec![PatchSpec::SetVotingInterval(Some(
            VoteInterval {
                secs: 2,
                msg: "wait at least two seconds to be allowed to vote the same person again"
                    .to_string(),
            },
        ))]));

        stage(alice()).register();
        stage(bob()).register();
        // --
        stage(bob()).rate(alice(), 4.5);
        thread::sleep(time::Duration::from_secs(3));
        stage(bob()).rate(alice(), 4.5);
    }

    #[test]
    #[should_panic(expected = "you can't vote the same account more than once in 5 minutes")]
    fn default_interval_violation() {
        stage(alice()).register();
        stage(bob()).register();
        // --
        stage(bob()).rate(alice(), 4.5);
        stage(bob()).rate(alice(), 4.5);
    }

    #[test]
    #[should_panic(expected = "all you had to do was wait a minute")]
    fn custom_interval_violation() {
        stage(sys()).patch_state(ContractPatch(vec![PatchSpec::SetVotingInterval(Some(
            VoteInterval {
                secs: 60,
                msg: "all you had to do was wait a minute".to_string(),
            },
        ))]));

        stage(alice()).register();
        stage(bob()).register();
        // --
        stage(bob()).rate(alice(), 4.5);
        stage(bob()).rate(alice(), 4.5);
    }

    #[test]
    fn validate_5_star_as_fract() {
        for rating in [0.0, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0, 3.5, 4.0, 4.5, 5.0] {
            assert!(
                validate_rating(rating),
                "valid rating specification marked invalid: {:.1}",
                rating
            );
        }
        for rating in [0.1, 0.2, 0.3, 0.4, 3.4, 5.5, 10.0] {
            assert!(
                !validate_rating(rating),
                "invalid rating specification marked valid: {:.1}",
                rating
            );
        }
    }
}

'''
'''--- package.json ---
{
  "name": "nosedive-rs",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.6.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "near-api-js": "~0.41.0",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'nosedive.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      // https://github.com/near/sandbox
      // near-sandbox --home /tmp/near-sandbox init
      // near-sandbox --home /tmp/near-sandbox run
      // NEAR_ENV=local yarn test
      keyPath: `/tmp/near-sandbox/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 25em;
}

h1 {
  background-image: url(assets/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(assets/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="icon" href="./assets/favicon.ico" />
  <link rel="apple-touch-icon" href="./assets/favicon.ico" />
  <title>Welcome to NEAR</title>
  <link rel="stylesheet" href="global.css">
</head>
<body>
  <main id="signed-out-flow" style="display: none">
    <h1>Welcome to NEAR!</h1>
    <p>
      To make use of the NEAR blockchain, you need to sign in. The button
      below will sign you in using NEAR Wallet.
    </p>
    <p>
      By default, when your app runs in "development" mode, it connects
      to a test network ("testnet") wallet. This works just like the main
      network ("mainnet") wallet, but the NEAR Tokens on testnet aren't
      convertible to other currencies – they're just for testing!
    </p>
    <p>
      Go ahead and click the button below to try it out:
    </p>
    <p style="text-align: center; margin-top: 2.5em">
      <button id="sign-in-button">Sign in</button>
    </p>
  </main>

  <div id="signed-in-flow" style="display: none">
    <button class="link" style="float: right" id="sign-out-button">
      Sign out
    </button>
    <main>
      <h1>
        <label
          for="greeting"
          data-behavior="greeting"
          style="color: var(--secondary); border-bottom: 2px solid var(--secondary);"
        >
        </label>
        <span data-behavior="account-id"></span>!
      </h1>
      <form>
        <fieldset id="fieldset">
          <label
            for="greeting"
            style="display: block; color: var(--gray); margin-bottom: 0.5em"
          >
            Change greeting
          </label>
          <div style="display: flex">
            <input
              style="flex: 1"
              autocomplete="off"
              id="greeting"
              data-behavior="greeting"
            />
            <button disabled style="border-radius: 0 5px 5px 0">Save</button>
          </div>
        </fieldset>
      </form>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>src/index.js</code> and <code>src/utils.js</code> – you'll see <code>get_greeting</code>
          and <code>set_greeting</code> being called on <code>contract</code>.
          What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in
          <code>assembly/index.ts</code> – this is the source code for your
          <a target="_blank" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.
        </li>
        <li>
          When you run <code>yarn dev</code>, the code in
          <code>assembly/index.ts</code> gets deployed to the NEAR testnet. You
          can see how this happens by looking in <code>package.json</code> at the
          <code>scripts</code> section to find the <code>dev</code> command.
        </li>
      </ol>
      <hr>
      <p>
        To keep learning, check out
        <a target="_blank" href="https://docs.near.org">the NEAR docs</a>
        or look through some
        <a target="_blank" href="https://examples.near.org">example apps</a>.
      </p>
    </main>
  </div>

  <aside data-behavior="notification" style="display: none">
    <a target="_blank" href="https://explorer.testnet.near.org/accounts/"></a>
    called method: 'set_greeting' in contract:
    <a target="_blank" href="https://explorer.testnet.near.org/accounts/"></a>
    <footer>
      <div>✔ Succeeded</div>
      <div>Just now</div>
    </footer>
  </aside>

  <script src="./index.js"></script>
</body>
</html>

'''
'''--- src/index.js ---
import 'regenerator-runtime/runtime'

import { initContract, login, logout } from './utils'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

// global variable used throughout
let currentGreeting

const submitButton = document.querySelector('form button')

document.querySelector('form').onsubmit = async (event) => {
  event.preventDefault()

  // get elements from the form using their id attribute
  const { fieldset, greeting } = event.target.elements

  // disable the form while the value gets updated on-chain
  fieldset.disabled = true

  try {
    // make an update call to the smart contract
    await window.contract.set_greeting({
      // pass the value that the user entered in the greeting field
      message: greeting.value
    })
  } catch (e) {
    alert(
      'Something went wrong! ' +
      'Maybe you need to sign out and back in? ' +
      'Check your browser console for more info.'
    )
    throw e
  } finally {
    // re-enable the form, whether the call succeeded or failed
    fieldset.disabled = false
  }

  // disable the save button, since it now matches the persisted value
  submitButton.disabled = true

  // update the greeting in the UI
  await fetchGreeting()

  // show notification
  document.querySelector('[data-behavior=notification]').style.display = 'block'

  // remove notification again after css animation completes
  // this allows it to be shown again next time the form is submitted
  setTimeout(() => {
    document.querySelector('[data-behavior=notification]').style.display = 'none'
  }, 11000)
}

document.querySelector('input#greeting').oninput = (event) => {
  if (event.target.value !== currentGreeting) {
    submitButton.disabled = false
  } else {
    submitButton.disabled = true
  }
}

document.querySelector('#sign-in-button').onclick = login
document.querySelector('#sign-out-button').onclick = logout

// Display the signed-out-flow container
function signedOutFlow() {
  document.querySelector('#signed-out-flow').style.display = 'block'
}

// Displaying the signed in flow container and fill in account-specific data
function signedInFlow() {
  document.querySelector('#signed-in-flow').style.display = 'block'

  document.querySelectorAll('[data-behavior=account-id]').forEach(el => {
    el.innerText = window.accountId
  })

  // populate links in the notification box
  const accountLink = document.querySelector('[data-behavior=notification] a:nth-of-type(1)')
  accountLink.href = accountLink.href + window.accountId
  accountLink.innerText = '@' + window.accountId
  const contractLink = document.querySelector('[data-behavior=notification] a:nth-of-type(2)')
  contractLink.href = contractLink.href + window.contract.contractId
  contractLink.innerText = '@' + window.contract.contractId

  // update with selected networkId
  accountLink.href = accountLink.href.replace('testnet', networkId)
  contractLink.href = contractLink.href.replace('testnet', networkId)

  fetchGreeting()
}

// update global currentGreeting variable; update DOM with it
async function fetchGreeting() {
  currentGreeting = await contract.get_greeting({ account_id: window.accountId })
  document.querySelectorAll('[data-behavior=greeting]').forEach(el => {
    // set divs, spans, etc
    el.innerText = currentGreeting

    // set input elements
    el.value = currentGreeting
  })
}

// `nearInitPromise` gets called on page load
window.nearInitPromise = initContract()
  .then(() => {
    if (window.walletConnection.isSignedIn()) signedInFlow()
    else signedOutFlow()
  })
  .catch(console.error)

'''
'''--- src/main.test.js ---
const {log} = require("console");
const {promisify} = require("util");

jest.setTimeout(100_000);

const sleep = promisify(setTimeout);

let NEAR, sys, keyStore, masterKeyPair, masterAccount;

beforeAll(async function () {
  NEAR = await nearlib.connect(nearConfig);
  keyStore = nearConfig.deps.keyStore;
  masterKeyPair = await keyStore.getKey(nearConfig.networkId, nearConfig.contractName);
  masterAccount = await NEAR.account(nearConfig.contractName);
  sys = await stage(await account(nearConfig.contractName, true));
});

async function account(accountId, qualified = false) {
  let account = await NEAR.account(qualified ? accountId : [accountId, masterAccount.accountId].join('.'));
  for (i=5;i>0;i-=1) {
    try {
      await account.state();
      return account;
    } catch {
      log(`[${nearConfig.networkId}] Creating an account on the network for [${account.accountId}]`);
      await masterAccount.createAccount(
        account.accountId,
        masterKeyPair.getPublicKey(),
        10n ** 25n
      );
      await keyStore.setKey(nearConfig.networkId, account.accountId, masterKeyPair);
    }
  }
  throw new Error(`Could not find nor create the account: ${accountId}`);
}

async function stage(account, flags = "rw") {
  return new nearlib.Contract(account, nearConfig.contractName, {
    ...(
      flags.includes('r') ? { viewMethods: ['status', 'rating_timestamps'] } : {}
    ),
    ...(
      flags.includes('w') ? { changeMethods: ['register', 'rate', 'patch_state'] } : {}
    )
  });
}

test('default', async () => {
  let alice = await stage(await account("alice"));
  await alice.register();
  let aliceStats = await sys.status({account_id: alice.account.accountId});
  expect(aliceStats).toEqual({rating: 2.0, given: 0, received: 1});
});

test('single entry', async () => {
  let bob = await stage(await account("bob"));
  await bob.register();
  await expect(async () => {
    await bob.register()
  }).rejects.toThrow("this account has already been registered");
});

test('no account', async () => {
  let carol = await account("carol");
  // await carol.register();
  await expect(async () => {
    await sys.status({account_id: carol.accountId})
  }).rejects.toThrow("account does not exist on this service");

  let carolsMom = await stage(await account("carols-mom"));
  await carolsMom.register();
  await expect(async () => {
    await carolsMom.rate({account_id: carol.accountId, rating: 5.0})
  }).rejects.toThrow("account does not exist on this service");
});

test('rate then view status', async () => {
  await sys.patch_state({patches: {voting_interval: null}});

  let derek = await stage(await account("derek"));
  await derek.register();

  let emily = await stage(await account("emily"));
  await emily.register();

  let ratings = [1.0, 4.5, 2.0, 0.5, 1.5, 3.0, 5.0];
  for (let rating of ratings)
    await derek.rate({account_id: emily.account.accountId, rating});
  let derekStats = await sys.status({account_id: derek.account.accountId});
  let emilyStats = await sys.status({account_id: emily.account.accountId});
  expect(derekStats).toEqual({rating: 2.0, given: 7, received: 1})
  expect(emilyStats).toMatchObject({
    rating: ratings.reduce((a, b, i) => ((a * (i + 1)) + (b + 2) / 2) / (i + 2), 2),
    given: 0,
    received: 8
  })
});

test('lookup timestamps', async () => {
  let fiona = await stage(await account("fiona"));
  await fiona.register();

  let gary = await stage(await account("gary"));
  await gary.register();

  expect(await sys.rating_timestamps({
    a: fiona.account.accountId,
    b: gary.account.accountId
  })).toEqual({ a_to_b: null, b_to_a: null });

  let start = Date.now();

  await fiona.rate({account_id: gary.account.accountId, rating: 3.0});
  let fiona_gary = Date.now();

  await sleep(2000);

  await gary.rate({account_id: fiona.account.accountId, rating: 3.0});
  let gary_fiona = Date.now();

  let ratings = await sys.rating_timestamps({
    a: fiona.account.accountId,
    b: gary.account.accountId
  });

  expect(ratings.a_to_b / 1_000_000).toBeGreaterThanOrEqual(start);
  expect(ratings.a_to_b / 1_000_000).toBeLessThanOrEqual(fiona_gary);
  expect(ratings.b_to_a / 1_000_000).toBeGreaterThanOrEqual(fiona_gary);
  expect(ratings.b_to_a / 1_000_000).toBeLessThanOrEqual(gary_fiona);
});

test('patch auth', async () => {
  await expect(async () => {
    let helen = await stage(await account("helen"));
    await helen.patch_state({patches: {voting_interval: null}})
  }).rejects.toThrow("only the account that deployed this contract is permitted to call this method");

  await sys.patch_state({patches: {voting_interval: null}})
});

test('interval', async () => {
  let ivan = await stage(await account("ivan"));
  await ivan.register();

  let janet = await stage(await account("janet"));
  await janet.register();

  await sys.patch_state({
    patches: {
      voting_interval: {
        secs: 60,
        msg: "all you had to do was wait a minute"
      }
    }
  });

  await ivan.rate({account_id: janet.account.accountId, rating: 4.5});
  await expect(async () => {
    await ivan.rate({account_id: janet.account.accountId, rating: 4.5});
  }).rejects.toThrow("all you had to do was wait a minute");

  await sys.patch_state({
    patches: {
      voting_interval: {
        secs: 2,
        msg: "wait at least two seconds to be allowed to vote the same person again"
      }
    }
  });

  await ivan.rate({account_id: janet.account.accountId, rating: 4.5});
  await sleep(3);
  await ivan.rate({account_id: janet.account.accountId, rating: 4.5});
});

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>Please run the following command in NEAR CLI, then enter account id here. masterAccountId default: test.near
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''