*GitHub Repository "lightsea90/token-static-info"*

'''--- README.md ---
## Testnet contract
`sales.tokenhub.testnet`

## Sample commands
```
$ near dev-deploy out/main.wasm 
Starting deployment. Account id: sales.tokenhub.testnet, node: https://rpc.testnet.near.org, helper: https://helper.testnet.near.org, file: out/main.wasm
Transaction Id 8okwhqNFRELYqecWWMX8Vmw7Kh3huLQXT717C9TMnDJr
To see the transaction in the transaction explorer, please open this url in your browser
https://explorer.testnet.near.org/transactions/8okwhqNFRELYqecWWMX8Vmw7Kh3huLQXT717C9TMnDJr
Done deploying to sales.tokenhub.testnet

$ near call sales.tokenhub.testnet new '{"owner_id": "harrynguyen.testnet"}' --accountId harrynguyen.testnet
Scheduling a call: sales.tokenhub.testnet.new({"owner_id": "harrynguyen.testnet"})
Doing account.functionCall()
Transaction Id FqEmWCWBCg4QRQxrJ1pLj5ihkgiLsnCH76SW26G6xiwg
To see the transaction in the transaction explorer, please open this url in your browser
https://explorer.testnet.near.org/transactions/FqEmWCWBCg4QRQxrJ1pLj5ihkgiLsnCH76SW26G6xiwg
''

near call sales.tokenhub.testnet add_campaign '{
    "campaign": {
        "sale_contract": "akux.sales.tokenhub.testnet",
        "reference": "https://akux.json",
        "reference_hash": "Cg=="
    }
}' --accountId harrynguyen.testnet --depositYocto 1

near call sales.tokenhub.testnet add_campaign '{
    "campaign": {
        "sale_contract": "akux2.sales.tokenhub.testnet",
        "reference": "https://akux2.json",
        "reference_hash": "Cg=="
    }
}' --accountId harrynguyen.testnet --depositYocto 1

$ near view sales.tokenhub.testnet get_campaign '{"id": 1}'
View call: sales.tokenhub.testnet.get_campaign({"id": 1})
{
  sale_contract: 'akux.sale.tokenhub.testnet',
  reference: 'https://akux.json',
  reference_hash: 'Cg=='
}

$ near view sales.tokenhub.testnet get_campaign_list '{"from_index": 0, "limit": 2}'
View call: sales.tokenhub.testnet.get_campaign_list({"from_index": 0, "limit": 2})
[
  [
    1,
    {
      sale_contract: 'akux.sale.tokenhub.testnet',
      reference: 'https://akux.json',
      reference_hash: 'Cg=='
    }
  ],
  [
    2,
    {
      sale_contract: 'akux2.sale.tokenhub.testnet',
      reference: 'https://akux2.json',
      reference_hash: 'Cg=='
    }
  ]
]

$ near call sales.tokenhub.testnet remove_campaign '{"id": 2}' --accountId harrynguyen.testnet --depositYocto 1

static files in github: https://raw.githubusercontent.com/user/repository/branch/filename
eg:
$ curl https://raw.githubusercontent.com/lightsea90/token-factory/main/package.json

get sha256
$ curl -s https://raw.githubusercontent.com/lightsea90/token-factory/main/package.json | sha256sum 2>/dev/null
403c409b69b67fcb15493d97c9b9fdcc2d1de25609b7ea46469ed582d8fc3693  -

```
'''
'''--- contract/Cargo.toml ---
[package]
name = "token_static_info"
version = "0.0.1"
authors = ["Hai Minh Nguyen"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
near-contract-standards = "3.1.1"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
/*
Functions:
    * 
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::{env, near_bindgen, assert_one_yocto};
use near_sdk::collections::UnorderedMap;
use near_sdk::AccountId;
use near_sdk::json_types::Base64VecU8;
use near_sdk::serde_json::{json, Value};

near_sdk::setup_alloc!();

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Campaign {
    sale_contract: AccountId,
    reference: Option<String>,
    reference_hash: Option<Base64VecU8>,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    owner_id: AccountId,
    campaigns: UnorderedMap<u64, Campaign>,
    counter: u64,
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            owner_id: String::from("__default_value__"),
            campaigns: UnorderedMap::new(b"__default__".to_vec()),
            counter: 0,
        }
    }
}

#[near_bindgen]
impl Contract {

    #[init]
    pub fn new(owner_id: AccountId) -> Self {
        return Self {
            owner_id: owner_id,
            campaigns: UnorderedMap::new(b"c".to_vec()),
            counter: 0
        };
    }

    fn assert_owner_id(&self) {
        assert!(
            env::predecessor_account_id() == self.owner_id,
            "Caller is not owner",
        );
    }

    #[payable]
    pub fn add_campaign(&mut self, campaign: Campaign) {        
        assert_one_yocto();
        self.assert_owner_id();
        self.counter += 1;
        self.campaigns.insert(&self.counter, &campaign);
    }

    #[payable]
    pub fn remove_campaign(&mut self, id: u64) {
        assert_one_yocto();
        self.assert_owner_id();
        if let Some(_) = self.campaigns.get(&id) {
            self.campaigns.remove(&id);
        } else {
            env::panic(format!("Campaign {} not existed", id).as_bytes())
        }
        
    }

    pub fn get_campaign(&self, id: u64) -> Campaign {
        if let Some(camp) = self.campaigns.get(&id) {
            camp
        } else {
            env::panic(format!("Campaign {} not existed", id).as_bytes())
        }
    }

    pub fn get_campaign_list(&self, from_index: u64, limit: u64) -> Value {
        let keys = self.campaigns.keys_as_vector();
        let values = self.campaigns.values_as_vector();
        let mut result = json!([]);
        for index in from_index..std::cmp::min(from_index + limit, self.campaigns.len()) {
            let id = keys.get(index).unwrap();
            let campaign = values.get(index).unwrap();
            result.as_array_mut().unwrap().push(json!([id, campaign]));
        }
        return json!({
            "total": keys.len(),
            "result": result,
        });
    }

    pub fn get_owner(&self) -> AccountId {
        self.owner_id.clone()
    }

}

'''
'''--- package.json ---
{
  "name": "token-sale-001",
  "version": "0.0.1",
  "license": "CC0 1.0 Universal",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.6.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "moment": "^2.29.1",
    "near-api-js": "~0.41.0",
    "regenerator-runtime": "^0.13.9"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  }
}

'''