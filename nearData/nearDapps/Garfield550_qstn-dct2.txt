*GitHub Repository "Garfield550/qstn-dct2"*

'''--- .github/dependabot.yml ---
# To get started with Dependabot version updates, you'll need to specify which
# package ecosystems to update and where the package manifests are located.
# Please see the documentation for all configuration options:
# https://docs.github.com/github/administering-a-repository/configuration-options-for-dependency-updates

# TODO: Enable after Dependabot supports pnpm https://github.com/dependabot/dependabot-core/issues/1736
# version: 2
# updates:
#   - package-ecosystem: 'npm'
#     directory: '/'
#     schedule:
#       interval: 'weekly'

'''
'''--- .github/workflows/actions.yml ---
# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Build and Test

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']

env:
  NEXT_PUBLIC_CHAIN_NETWORK: testnet
  NEXT_PUBLIC_NFT_CONTRACT_ADDRESS: '0x1875fcC416a92e04Ee23d2077203B02f3a51D0C0'
  NEXT_PUBLIC_AURORA_EXPLORER_GQL_URL: https://explorer.testnet.aurora.dev/graphql
  NEXT_PUBLIC_NEAR_CONTRACT_ID: guest-book.testnet
  NEXTAUTH_SECRET: ${{secrets.NEXTAUTH_SECRET}}
  NEXT_PUBLIC_INFURA_API_KEY: ${{secrets.NEXT_PUBLIC_INFURA_API_KEY}}
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID}}

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - uses: actions/checkout@v3

      - uses: pnpm/action-setup@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint codes
        run: pnpm lint

      - name: Run tests
        run: pnpm test

      - name: Build Next.js app
        run: pnpm build

'''
'''--- .github/workflows/dependency-review.yml ---
# Dependency Review Action
#
# This Action will scan dependency manifest files that change as part of a Pull Request, surfacing known-vulnerable versions of the packages declared or updated in the PR. Once installed, if the workflow run is marked as required, PRs introducing known-vulnerable packages will be blocked from merging.
#
# Source repository: https://github.com/actions/dependency-review-action
# Public documentation: https://docs.github.com/en/code-security/supply-chain-security/understanding-your-software-supply-chain/about-dependency-review#dependency-review-enforcement

name: 'Dependency Review'
on: [pull_request]

permissions:
  contents: read

jobs:
  dependency-review:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repository'
        uses: actions/checkout@v3
      - name: 'Dependency Review'
        uses: actions/dependency-review-action@v2

'''
'''--- .vscode/extensions.json ---
{
  "recommendations": [
    "streetsidesoftware.code-spell-checker",
    "editorconfig.editorconfig",
    "dbaeumer.vscode-eslint",
    "zixuanchen.vitest-explorer",
    "apollographql.vscode-apollo",
    "bradlc.vscode-tailwindcss"
  ]
}

'''
'''--- .vscode/settings.json ---
{
  "prettier.enable": false,
  "editor.formatOnSave": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": true
  },
  "eslint.format.enable": true,
  "typescript.tsdk": "node_modules/typescript/lib",
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "[javascript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[typescript]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "dbaeumer.vscode-eslint"
  },
  "cSpell.words": [
    "callees",
    "clsx",
    "commitlint",
    "connectkit",
    "hookform",
    "lucide",
    "NEXTAUTH",
    "nextjs",
    "pnpm",
    "qstn",
    "tailwindcss",
    "viem",
    "wagmi",
    "WALLETCONNECT"
  ]
}

'''
'''--- README.md ---
# QSTN Developer Code Test 2

![GitHub Actions](https://img.shields.io/github/actions/workflow/status/Garfield550/qstn-dct2/actions.yml?logo=github&style=for-the-badge)
![Vercel Deployment](https://img.shields.io/github/deployments/Garfield550/qstn-dct2/production?label=vercel&logo=vercel&style=for-the-badge)
![Version](https://img.shields.io/github/package-json/v/Garfield550/qstn-dct2?style=for-the-badge)
![License](https://img.shields.io/github/license/Garfield550/qstn-dct2?style=for-the-badge)

This is a [Next.js 13](https://nextjs.org/) project using new [App Route](https://nextjs.org/docs/app/building-your-application/routing) feature.

## Features

- New `/app` dir
- Interaction with Aurora blockchain using **ConnectKit** and **Wagmi**
- Interaction with Near blockchain using **Near Wallet Selector** and **Near JavaScript API**
- Query Aurora Explorer data using **Apollo GraphQL**
- Server and Client Components
- API Routes and Middleware
- Authentication using **NextAuth.js**
- UI Components built using **shadcn/ui** and **Radix UI**
- Styled using **Tailwind CSS**
- Validations using **Zod**
- Written in **TypeScript**

## Backlogs

- [ ] Reduce first load JS size for /dashboard page
- [ ] Performance optimizations
- [ ] Add more tests
- [ ] Interaction with [TestERC721](https://explorer.testnet.aurora.dev/address/0x1875fcC416a92e04Ee23d2077203B02f3a51D0C0/contracts#address-tabs) contract
- [ ] Interaction with Near Guest Book contract

## Known Issues

1. Hardcoded username(`johndoe`) and password(`abcd1234`)
1. Hardcoded user information
1. GitHub authentication not working
1. `/sign-in`, `/privacy` and `/terms` pages are not implemented

## Running Locally

1. Install dependencies using pnpm:

   ```sh
   pnpm install
   ```

1. Copy `example.env` to `.env.local` and update the variables.

   ```sh
   cp example.env .env.local
   ```

   > **Note**
   >
   > You can set `NEXT_PUBLIC_NFT_CONTRACT_ADDRESS` to `0x1875fcC416a92e04Ee23d2077203B02f3a51D0C0` and `NEXT_PUBLIC_NEAR_CONTRACT_ID` to `guest-book.testnet`

1. Start the development server:

   ```sh
   pnpm dev
   ```

## Running Tests

1. Install dependencies using pnpm:

   ```sh
   pnpm install
   ```

1. Copy `example.env` to `.env.test.local` and update the variables.

   ```sh
   cp example.env .env.test
   ```

1. Run tests:

   ```sh
   pnpm test
   ```

## Deploy on Vercel

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https://github.com/Garfield550/qstn-dct2&project-name=qstn-dct2&repository-name=qstn-dct2)

The easiest way to deploy a Next.js app is to use the [Vercel Platform](https://vercel.com/new).

Check out the [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

## License

Licensed under the [MIT license](LICENSE).

'''
'''--- app/api/auth/[...nextauth]/_route.ts ---
import NextAuth from 'next-auth'

import { authOptions } from '@/lib/auth'

const handler = NextAuth(authOptions)

export { handler as GET, handler as POST }

'''
'''--- app/api/hello/route.ts ---
export async function GET() {
  return new Response('Hello, Next.js!')
}

'''
'''--- components/ui/use-toast.ts ---
// Inspired by react-hot-toast library
import React from 'react'

import type { ToastActionElement, ToastProps } from '@/components/ui/toast'

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1_000_000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: 'ADD_TOAST',
  UPDATE_TOAST: 'UPDATE_TOAST',
  DISMISS_TOAST: 'DISMISS_TOAST',
  REMOVE_TOAST: 'REMOVE_TOAST',
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_VALUE
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType['ADD_TOAST']
      toast: ToasterToast
    }
  | {
      type: ActionType['UPDATE_TOAST']
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType['DISMISS_TOAST']
      toastId?: ToasterToast['id']
    }
  | {
      type: ActionType['REMOVE_TOAST']
      toastId?: ToasterToast['id']
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: 'REMOVE_TOAST',
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case 'ADD_TOAST': {
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }
    }

    case 'UPDATE_TOAST': {
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }
    }

    case 'DISMISS_TOAST': {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        for (const toast of state.toasts) {
          addToRemoveQueue(toast.id)
        }
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case 'REMOVE_TOAST': {
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
    }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  for (const listener of listeners) {
    listener(memoryState)
  }
}

type Toast = Omit<ToasterToast, 'id'>

function toast({ ...properties }: Toast) {
  const id = genId()

  const update = (properties_: ToasterToast) =>
    dispatch({
      type: 'UPDATE_TOAST',
      toast: { ...properties_, id },
    })
  const dismiss = () => dispatch({ type: 'DISMISS_TOAST', toastId: id })

  dispatch({
    type: 'ADD_TOAST',
    toast: {
      ...properties,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: 'DISMISS_TOAST', toastId }),
  }
}

export { toast, useToast }

'''
'''--- config/site.ts ---
export type SiteConfig = typeof siteConfig

export const siteConfig = {
  name: 'Create Next App',
  description: 'Generated by create next app.',
  mainNav: [
    {
      title: 'Dashboard',
      href: '/dashboard',
    },
  ],
  links: {
    docs: 'https://github.com/Garfield550/qstn-dct2/blob/main/README.md',
    github: 'https://github.com/Garfield550/qstn-dct2',
  },
}

'''
'''--- env/client.ts ---
import { z } from 'zod'

import { clientSchema, formatErrors } from './schema'

export type NetworkType = z.infer<
  typeof clientSchema
>['NEXT_PUBLIC_CHAIN_NETWORK']

/**
 * You can't destruct `process.env` as a regular object, so you have to do
 * it manually here. This is because Next.js evaluates this at build time,
 * and only used environment variables are included in the build.
 */
const _clientEnvironment: {
  [k in keyof z.infer<typeof clientSchema>]:
    | z.infer<typeof clientSchema>[k]
    | undefined
} = {
  NEXT_PUBLIC_INFURA_API_KEY: process.env.NEXT_PUBLIC_INFURA_API_KEY,
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID:
    process.env.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID,
  NEXT_PUBLIC_CHAIN_NETWORK: process.env
    .NEXT_PUBLIC_CHAIN_NETWORK as NetworkType,
  NEXT_PUBLIC_NFT_CONTRACT_ADDRESS:
    process.env.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS,
  NEXT_PUBLIC_AURORA_EXPLORER_GQL_URL:
    process.env.NEXT_PUBLIC_AURORA_EXPLORER_GQL_URL,
  NEXT_PUBLIC_NEAR_CONTRACT_ID: process.env.NEXT_PUBLIC_NEAR_CONTRACT_ID,
}

const clientEnvironment = clientSchema.safeParse(_clientEnvironment)

if (!clientEnvironment.success) {
  console.error(
    'Invalid environment variables:\n',
    ...formatErrors(clientEnvironment.error.format())
  )
  throw new Error('Invalid environment variables')
}

for (const key of Object.keys(clientEnvironment.data)) {
  if (!key.startsWith('NEXT_PUBLIC_')) {
    console.error(
      `Invalid public environment variable name: ${key}. It must begin with 'NEXT_PUBLIC_'`
    )

    throw new Error('Invalid public environment variable name')
  }
}

export const environment = clientEnvironment.data

'''
'''--- env/index.ts ---
export const isDevelopment = process.env.NODE_ENV === 'development'
export const isProduction = process.env.NODE_ENV === 'production'

'''
'''--- env/schema.ts ---
import { z, type ZodFormattedError } from 'zod'

/**
 * Specify your server-side environment variables schema here.
 * This way you can ensure the app isn't built with invalid env vars.
 */
export const serverSchema = z.object({
  NODE_ENV: z.enum(['development', 'test', 'production']),
  NEXTAUTH_SECRET: z.string().min(1),
  NEXTAUTH_URL: z.string().url().optional(),
})

/**
 * Specify your client-side environment variables schema here.
 * This way you can ensure the app isn't built with invalid env vars.
 * To expose them to the client, prefix them with `NEXT_PUBLIC_`.
 */
export const clientSchema = z.object({
  NEXT_PUBLIC_INFURA_API_KEY: z.string().nonempty(),
  NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: z.string().nonempty(),
  NEXT_PUBLIC_CHAIN_NETWORK: z.enum(['mainnet', 'testnet']).default('testnet'),
  NEXT_PUBLIC_NFT_CONTRACT_ADDRESS: z.string().nonempty(),
  NEXT_PUBLIC_AURORA_EXPLORER_GQL_URL: z.string().url(),
  NEXT_PUBLIC_NEAR_CONTRACT_ID: z.string().nonempty(),
})

export const formatErrors = (
  errors: ZodFormattedError<Map<string, string>, string>
) =>
  Object.entries(errors)
    .map(([name, value]) => {
      if (value && '_errors' in value) {
        return `${name}: ${value._errors.join(', ')}\n`
      }
      return
    })
    .filter(Boolean)

'''
'''--- env/server.ts ---
import { formatErrors, serverSchema } from './schema'

const serverEnvironment = serverSchema.safeParse(process.env)

if (!serverEnvironment.success) {
  console.error(
    'Invalid environment variables:\n',
    ...formatErrors(serverEnvironment.error.format())
  )
  throw new Error('Invalid environment variables')
}

for (const key of Object.keys(serverEnvironment.data)) {
  if (key.startsWith('NEXT_PUBLIC_')) {
    console.error('You are exposing a server-side env-variable:', key)

    throw new Error('You are exposing a server-side env-variable')
  }
}

export const environment = serverEnvironment.data

'''
'''--- example.env ---
# When adding additional env variables, the schema in `env/schema.ts` should be updated accordingly

# Next Auth
# You can generate the secret via 'openssl rand -base64 32' on Linux
# More info: https://next-auth.js.org/configuration/options#secret
NEXTAUTH_SECRET=
NEXTAUTH_URL=http://localhost:3000

# Infura api key
NEXT_PUBLIC_INFURA_API_KEY=
# WalletConnect v2 requires a projectId to be included in the client configuration.
# You can get a projectId by signing up for a free account at WalletConnect Cloud.
# Please go to https://cloud.walletconnect.com/ to create your own.
NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID=

# Network name (mainnet, testnet)
NEXT_PUBLIC_CHAIN_NETWORK=testnet
# NFT contract address
NEXT_PUBLIC_NFT_CONTRACT_ADDRESS=
# Aurora Explorer GraphQL URL
NEXT_PUBLIC_AURORA_EXPLORER_GQL_URL=https://explorer.testnet.aurora.dev/graphql

# Near contract id
NEXT_PUBLIC_NEAR_CONTRACT_ID=

'''
'''--- globalSetup/next-environment.ts ---
import { loadEnvConfig } from '@next/env'

export default async function loadEnvironment() {
  const projectDirection = process.cwd()
  loadEnvConfig(projectDirection)
}

'''
'''--- lib/apollo.ts ---
import { environment } from '@/env/client'

export function getAuroraExplorerGraphQlUrl() {
  return environment.NEXT_PUBLIC_AURORA_EXPLORER_GQL_URL
}

'''
'''--- lib/auth.ts ---
import { type NextAuthOptions, type User } from 'next-auth'
import CredentialsProvider from 'next-auth/providers/credentials'

const user: User = {
  id: '33b1b195-f33b-46a9-b5d8-1a91f13af220',
  name: 'John Doe',
  email: 'johndoe@example.com',
  image: 'https://i.pravatar.cc/150',
}

export const authOptions: NextAuthOptions = {
  session: {
    strategy: 'jwt',
  },
  pages: {
    signIn: '/sign-in',
  },
  providers: [
    CredentialsProvider({
      name: 'Credentials',
      credentials: {
        username: { label: 'Username', type: 'text' },
        password: { label: 'Password', type: 'password' },
      },
      async authorize(credentials) {
        if (
          credentials?.username === 'johndoe' &&
          credentials?.password === 'abcd1234'
        ) {
          return user
        }
        // eslint-disable-next-line unicorn/no-null
        return null
      },
    }),
  ],
  callbacks: {
    async session({ token, session }) {
      if (token) {
        session = {
          ...session,
          user: {
            name: token.name,
            email: token.email,
            image: token.picture,
          },
        }
      }
      return session
    },
    async jwt({ token, user }) {
      if (user) {
        token.id = user?.id
      }
      return token
    },
  },
}

'''
'''--- lib/chain.test.ts ---
import { describe, expect, test } from 'vitest'

import { parseNear, truncateEthAddress } from './chain'

describe('Test truncateEthAddress function', () => {
  test('truncateEthAddress should return empty string if address is undefined', () => {
    expect(truncateEthAddress()).toBe('')
  })

  test('truncateEthAddress should return empty string if address is empty string', () => {
    expect(truncateEthAddress('')).toBe('')
  })

  test('truncateEthAddress should return empty string if address is not a valid eth address', () => {
    expect(truncateEthAddress('not a valid eth address')).toBe('')
  })

  test('truncateEthAddress should return truncated address if address is a valid eth address', () => {
    expect(
      truncateEthAddress('0x1875fcC416a92e04Ee23d2077203B02f3a51D0C0')
    ).toBe('0x1875••••D0C0')
  })

  test('truncateEthAddress should return truncated address with custom separator', () => {
    expect(
      truncateEthAddress('0x1875fcC416a92e04Ee23d2077203B02f3a51D0C0', '...')
    ).toBe('0x1875...D0C0')
  })
})

describe('Test parseNear function', () => {
  test('parse zero near should be 0.000000000000000000000000', () => {
    const zeroNear = BigInt(0)
    expect(parseNear(zeroNear)).toBe('0.000000000000000000000000')
  })

  test('parse one near should be 1.000000000000000000000000', () => {
    const oneNear = BigInt('1000000000000000000000000')
    expect(parseNear(oneNear)).toBe('1.000000000000000000000000')
  })

  test('parse 42424242424242424242424242n should be 42.424242424242424242424242', () => {
    const near = BigInt('42424242424242424242424242')
    expect(parseNear(near)).toBe('42.424242424242424242424242')
  })

  test('parse 42000000000000000000000042n should be 42.000000000000000000000042', () => {
    const near = BigInt('42000000000000000000000042')
    expect(parseNear(near)).toBe('42.000000000000000000000042')
  })
})

'''
'''--- lib/chain.ts ---
import { isAddress } from 'viem'

import { environment, type NetworkType } from '@/env/client'

export function getInfuraApiKey(): string {
  const apiKey = environment.NEXT_PUBLIC_INFURA_API_KEY
  return apiKey
}

export function getWalletConnectProjectId(): string {
  return environment.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID
}

export function getNetworkType(): NetworkType {
  return environment.NEXT_PUBLIC_CHAIN_NETWORK
}

export function getNftContractAddress(): string {
  return environment.NEXT_PUBLIC_NFT_CONTRACT_ADDRESS
}

export function getNearContractId(): string {
  return environment.NEXT_PUBLIC_NEAR_CONTRACT_ID
}

const truncateRegex = /^(0x[\dA-Za-z]{4})[\dA-Za-z]+([\dA-Za-z]{4})$/

export function truncateEthAddress(address?: string, separator = '••••') {
  if (!address) return ''
  const isValid = isAddress(address)
  if (!isValid) return ''
  const match = address.match(truncateRegex)
  if (!match) return address
  return `${match[1]}${separator}${match[2]}`
}

const oneNear = '1_000_000_000_000_000_000_000_000'.replaceAll('_', '')
export const OneNear = BigInt(oneNear)

export function parseNear(value: bigint): string {
  const fraction = value % OneNear
  const integer = (value - fraction) / OneNear
  return `${integer}.${fraction.toString().padStart(24, '0')}`
}

'''
'''--- lib/fonts.ts ---
import { Inter as FontSans, JetBrains_Mono as FontMono } from 'next/font/google'

export const fontSans = FontSans({
  subsets: ['latin'],
  variable: '--font-sans',
})

export const fontMono = FontMono({
  subsets: ['latin'],
  variable: '--font-mono',
})

'''
'''--- lib/session.ts ---
import { getServerSession } from 'next-auth/next'

import { authOptions } from '@/lib/auth'

export async function getCurrentUser() {
  const session = await getServerSession(authOptions)
  return session?.user
}

'''
'''--- lib/utils.ts ---
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

'''
'''--- lib/validations/auth.ts ---
import { z } from 'zod'

export const userAuthSchema = z.object({
  username: z.string().nonempty(),
  password: z.string().nonempty(),
})

'''
'''--- lint-staged.config.js ---
// @ts-check

import path from 'node:path'

/**
 * @param {import('lint-staged').Config} config - Lint-staged configuration
 */
function defineLintStagedConfig(config) {
  return config
}

export default defineLintStagedConfig({
  '**/*.(ts|tsx|js|jsx|mjs|cjs)': (filenames) =>
    `next lint --fix --file ${filenames
      .map((f) => path.relative(process.cwd(), f))
      .join(' --file ')}`,

  '**/*.(md|json|html|yml|yaml)': (filenames) =>
    `prettier --write ${filenames.join(' ')}`,
})

'''
'''--- middleware.ts ---
/* eslint-disable unicorn/no-null */
import { NextResponse } from 'next/server'
import { getToken } from 'next-auth/jwt'
import { withAuth } from 'next-auth/middleware'

export default withAuth(
  async function middleware(request) {
    const token = await getToken({ req: request })
    const isAuth = !!token
    const isAuthPage = request.nextUrl.pathname.startsWith('/sign-in')

    // When user visit auth pages, we should check if user is already signed in.
    if (isAuthPage) {
      if (isAuth) {
        // Redirect to dashboard if user is already signed in.
        return NextResponse.redirect(new URL('/dashboard', request.url))
      }

      return null
    }

    if (isAuth) return null

    // Generate a redirect URL then user can be
    // redirected back to the current page after sign in.
    let from = request.nextUrl.pathname
    if (request.nextUrl.search) {
      // Search params are encoded in the URL.
      from += request.nextUrl.search
    }

    return NextResponse.redirect(
      new URL(`/sign-in?from=${encodeURIComponent(from)}`, request.url)
    )
  },
  {
    callbacks: {
      async authorized() {
        // This is a work-around for handling redirect on auth pages.
        // We return true here so that the middleware function above
        // is always called.
        return true
      },
    },
  }
)

export const config = {
  matcher: ['/dashboard/:path*', '/sign-in'],
}

'''
'''--- next.config.js ---
// @ts-check

/**
 * @param {import('next').NextConfig} config - Next.js configuration
 */
function defineNextConfig(config) {
  return config
}

export default defineNextConfig({
  reactStrictMode: true,
  // output: 'standalone', // standalone for Docker deployment
  webpack: (config, { isServer }) => {
    if (!isServer) {
      // Fix @walletconnect/legacy-client build error
      config.resolve.fallback = {
        fs: false,
        net: false,
        tls: false,
      }
    }
    return config
  },
})

'''
'''--- package.json ---
{
  "name": "qstn-dct2",
  "version": "0.1.0",
  "license": "MIT",
  "private": true,
  "type": "module",
  "packageManager": "pnpm@8.2.0",
  "engines": {
    "node": ">=18.15.0",
    "npm": ">=999.0.0",
    "pnpm": ">=8.2.0",
    "yarn": ">=999.0.0"
  },
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "next lint --fix",
    "test": "vitest",
    "prepare": "husky install"
  },
  "dependencies": {
    "@apollo/client": "3.8.0-beta.2",
    "@apollo/experimental-nextjs-app-support": "^0.2.1",
    "@hookform/resolvers": "^3.1.0",
    "@near-wallet-selector/core": "^8.1.3",
    "@near-wallet-selector/modal-ui": "^8.1.3",
    "@near-wallet-selector/my-near-wallet": "^8.1.3",
    "@near-wallet-selector/near-wallet": "^8.1.3",
    "@radix-ui/react-avatar": "^1.0.3",
    "@radix-ui/react-dropdown-menu": "^2.0.5",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-toast": "^1.1.4",
    "@wagmi/chains": "^1.1.0",
    "class-variance-authority": "^0.6.0",
    "clsx": "^1.2.1",
    "connectkit": "^1.4.0",
    "graphql": "^16.6.0",
    "lucide-react": "^0.241.0",
    "near-api-js": "^2.1.4",
    "next": "13.4.3",
    "next-auth": "^4.22.1",
    "next-themes": "^0.2.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.44.3",
    "rxjs": "^7.8.1",
    "tailwind-merge": "^1.13.1",
    "viem": "^1.0.2",
    "wagmi": "^1.1.1",
    "zod": "^3.21.4"
  },
  "devDependencies": {
    "@commitlint/cli": "^17.6.5",
    "@commitlint/config-conventional": "^17.6.5",
    "@commitlint/types": "^17.4.4",
    "@next/env": "13.4.3",
    "@testing-library/react": "^14.0.0",
    "@types/lint-staged": "^13.2.0",
    "@types/node": "^18.16.17",
    "@types/react": "^18.2.11",
    "@types/react-dom": "^18.2.4",
    "@typescript-eslint/eslint-plugin": "^5.59.9",
    "@typescript-eslint/parser": "^5.59.9",
    "@vitejs/plugin-react": "^4.0.0",
    "autoprefixer": "^10.4.14",
    "eslint": "^8.42.0",
    "eslint-config-next": "^13.4.5",
    "eslint-config-prettier": "^8.8.0",
    "eslint-define-config": "^1.20.0",
    "eslint-gitignore": "^0.1.0",
    "eslint-plugin-import": "^2.27.5",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-simple-import-sort": "^10.0.0",
    "eslint-plugin-tailwindcss": "^3.12.1",
    "eslint-plugin-unicorn": "^47.0.0",
    "eslint-plugin-unused-imports": "^2.0.0",
    "husky": "^8.0.3",
    "jsdom": "^22.1.0",
    "lint-staged": "^13.2.2",
    "postcss": "^8.4.24",
    "prettier": "^2.8.8",
    "tailwindcss": "^3.3.2",
    "tailwindcss-animate": "^1.0.6",
    "typescript": "^5.1.3",
    "vite-tsconfig-paths": "^4.2.0",
    "vitest": "^0.32.0"
  }
}

'''
'''--- pages/api/auth/[...nextauth].ts ---
import NextAuth from 'next-auth'

import { authOptions } from '@/lib/auth'

export default NextAuth(authOptions)

'''
'''--- public/next.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
'''
'''--- public/thirteen.svg ---
<svg xmlns="http://www.w3.org/2000/svg" width="40" height="31" fill="none"><g opacity=".9"><path fill="url(#a)" d="M13 .4v29.3H7V6.3h-.2L0 10.5V5L7.2.4H13Z"/><path fill="url(#b)" d="M28.8 30.1c-2.2 0-4-.3-5.7-1-1.7-.8-3-1.8-4-3.1a7.7 7.7 0 0 1-1.4-4.6h6.2c0 .8.3 1.4.7 2 .4.5 1 .9 1.7 1.2.7.3 1.6.4 2.5.4 1 0 1.7-.2 2.5-.5.7-.3 1.3-.8 1.7-1.4.4-.6.6-1.2.6-2s-.2-1.5-.7-2.1c-.4-.6-1-1-1.8-1.4-.8-.4-1.8-.5-2.9-.5h-2.7v-4.6h2.7a6 6 0 0 0 2.5-.5 4 4 0 0 0 1.7-1.3c.4-.6.6-1.3.6-2a3.5 3.5 0 0 0-2-3.3 5.6 5.6 0 0 0-4.5 0 4 4 0 0 0-1.7 1.2c-.4.6-.6 1.2-.6 2h-6c0-1.7.6-3.2 1.5-4.5 1-1.3 2.2-2.3 3.8-3C25 .4 26.8 0 28.8 0s3.8.4 5.3 1.1c1.5.7 2.7 1.7 3.6 3a7.2 7.2 0 0 1 1.2 4.2c0 1.6-.5 3-1.5 4a7 7 0 0 1-4 2.2v.2c2.2.3 3.8 1 5 2.2a6.4 6.4 0 0 1 1.6 4.6c0 1.7-.5 3.1-1.4 4.4a9.7 9.7 0 0 1-4 3.1c-1.7.8-3.7 1.1-5.8 1.1Z"/></g><defs><linearGradient id="a" x1="20" x2="20" y1="0" y2="30.1" gradientUnits="userSpaceOnUse"><stop/><stop offset="1" stop-color="#3D3D3D"/></linearGradient><linearGradient id="b" x1="20" x2="20" y1="0" y2="30.1" gradientUnits="userSpaceOnUse"><stop/><stop offset="1" stop-color="#3D3D3D"/></linearGradient></defs></svg>
'''
'''--- public/vercel.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
'''
'''--- styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 47.4% 11.2%;

    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;

    --popover: 0 0% 100%;
    --popover-foreground: 222.2 47.4% 11.2%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 47.4% 11.2%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;

    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;

    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;

    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;

    --destructive: 0 100% 50%;
    --destructive-foreground: 210 40% 98%;

    --ring: 215 20.2% 65.1%;

    --radius: 0.5rem;
  }

  .dark {
    --background: 224 71% 4%;
    --foreground: 213 31% 91%;

    --muted: 223 47% 11%;
    --muted-foreground: 215.4 16.3% 56.9%;

    --popover: 224 71% 4%;
    --popover-foreground: 215 20.2% 65.1%;

    --card: 224 71% 4%;
    --card-foreground: 213 31% 91%;

    --border: 216 34% 17%;
    --input: 216 34% 17%;

    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 1.2%;

    --secondary: 222.2 47.4% 11.2%;
    --secondary-foreground: 210 40% 98%;

    --accent: 216 34% 17%;
    --accent-foreground: 210 40% 98%;

    --destructive: 0 63% 31%;
    --destructive-foreground: 210 40% 98%;

    --ring: 216 34% 17%;

    --radius: 0.5rem;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    // Type Checking
    "noFallthroughCasesInSwitch": true,
    "noImplicitAny": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    "noImplicitThis": true,
    "strict": true,
    "strictBindCallApply": true,
    "strictFunctionTypes": true,
    "strictNullChecks": true,
    "strictPropertyInitialization": true,
    "useUnknownInCatchVariables": true,
    // Modules
    "resolveJsonModule": true,
    // Emit
    "noEmitOnError": true,
    "stripInternal": true,
    // JavaScript Support
    "allowJs": false,
    "checkJs": false,
    // Interop Constraints
    "forceConsistentCasingInFileNames": true,
    "verbatimModuleSyntax": true,
    // Language and Environment
    "useDefineForClassFields": true,
    // Projects
    "incremental": true,
    // Completeness
    "skipLibCheck": true,
    // Next.js
    "module": "esnext",
    "moduleResolution": "node",
    "paths": {
      "@/*": ["./*"]
    },
    "noEmit": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "esModuleInterop": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "target": "es2019"
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

'''
'''--- types/nav.ts ---
export interface NavItem {
  title: string
  href?: string
  disabled?: boolean
  external?: boolean
}

'''
'''--- vitest.config.ts ---
import react from '@vitejs/plugin-react'
import tsconfigPaths from 'vite-tsconfig-paths'
import { defineConfig } from 'vitest/config'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react(), tsconfigPaths()],
  test: {
    environment: 'jsdom',
    globals: true,
    globalSetup: ['./globalSetup/next-environment.ts'],
  },
})

'''