*GitHub Repository "Akagi201/near-guestbook"*

'''--- frontend/babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react']
}

'''
'''--- frontend/src/App.js ---
import Big from 'big.js'
import { providers, utils } from 'near-api-js'
import PropTypes from 'prop-types'
import React, { useCallback, useEffect, useState } from 'react'
import 'regenerator-runtime'
import Form from './components/Form'
import Messages from './components/Messages'
import SignIn from './components/SignIn'
import { useWalletSelector } from './contexts/WalletSelectorContext'

const SUGGESTED_DONATION = '0'
const BOATLOAD_OF_GAS = Big(3)
  .times(10 ** 13)
  .toFixed()

const App = () => {
  const { selector, accountId } = useWalletSelector()
  const [messages, setMessages] = useState([])

  const [account, setAccount] = useState(null)
  const [loading, setLoading] = useState(false)

  const getAccount = useCallback(async () => {
    if (!accountId) {
      return null
    }

    const { nodeUrl } = selector.network
    const provider = new providers.JsonRpcProvider({ url: nodeUrl })

    return provider
      .query({
        request_type: 'view_account',
        finality: 'final',
        account_id: accountId,
      })
      .then((data) => ({
        ...data,
        account_id: accountId,
      }))
  }, [accountId, selector.network])

  const getMessages = useCallback(() => {
    const provider = new providers.JsonRpcProvider({
      url: selector.network.nodeUrl,
    })

    return provider
      .query({
        request_type: 'call_function',
        account_id: selector.getContractId(),
        method_name: 'get_greeting',
        args_base64: '',
        finality: 'optimistic',
      })
      .then((res) => JSON.parse(Buffer.from(res.result).toString()))
  }, [selector])

  useEffect(() => {
    getMessages().then(setMessages)
  }, [])

  useEffect(() => {
    if (!accountId) {
      return setAccount(null)
    }

    setLoading(true)

    getAccount().then((nextAccount) => {
      setAccount({ ...nextAccount, accountId: nextAccount.account_id })
      setLoading(false)
    })
  }, [accountId, getAccount])

  const onSubmit = useCallback(
    (e) => {
      e.preventDefault()

      const { fieldset, message, donation } = e.target.elements

      fieldset.disabled = true

      selector
        .signAndSendTransaction({
          signerId: accountId,
          actions: [
            {
              type: 'FunctionCall',
              params: {
                methodName: 'set_greeting',
                args: { message: message.value },
                gas: BOATLOAD_OF_GAS,
                deposit: utils.format.parseNearAmount(donation.value || '0'),
              },
            },
          ],
        })
        .catch((err) => {
          alert('Failed to set greeting')
          console.log('Failed to set greeting')

          throw err
        })
        .then(() => {
          return getMessages()
            .then((nextMessages) => {
              setMessages(nextMessages)
              message.value = ''
              donation.value = SUGGESTED_DONATION
              fieldset.disabled = false
              message.focus()
            })
            .catch((err) => {
              alert('Failed to refresh messages')
              console.log('Failed to refresh messages')

              throw err
            })
        })
        .catch((err) => {
          console.error(err)

          fieldset.disabled = false
        })
    },
    [selector, accountId, getMessages],
  )

  const signIn = () => {
    selector.show()
  }

  const signOut = () => {
    selector.signOut().catch((err) => {
      console.log('Failed to sign out')
      console.error(err)
    })
  }

  if (loading) {
    return null
  }

  if (!account) {
    return (
      <main>
        <header>
          <h1>NEAR Guest Book</h1>
          <button onClick={signIn}>Log in</button>
        </header>
        <SignIn />
      </main>
    )
  }

  return (
    <main>
      <header>
        <h1>NEAR Guest Book</h1>
        <button onClick={signOut}>Log out</button>
      </header>
      {account && account.accountId && (
        <Form onSubmit={onSubmit} currentUser={account} />
      )}
      {!!account && !!messages.length && <Messages messages={messages} />}
    </main>
  )
}

App.propTypes = {
  contract: PropTypes.shape({
    set_greeting: PropTypes.func.isRequired,
    get_greeting: PropTypes.func.isRequired,
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired,
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired,
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired,
  }).isRequired,
}

export default App

'''
'''--- frontend/src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "nearguestbook.akagi201.testnet";

function getConfig(env) {
  switch (env) {
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case "production":
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- frontend/src/contexts/WalletSelectorContext.js ---
import NearWalletSelector from '@near-wallet-selector/core'
import { setupNearWallet } from '@near-wallet-selector/near-wallet'
import { setupSender } from '@near-wallet-selector/sender'
import React, { useContext, useEffect, useState } from 'react'

const WalletSelectorContext = React.createContext(null)

export const WalletSelectorContextProvider = ({ children }) => {
  const [selector, setSelector] = useState(null)
  const [accountId, setAccountId] = useState(null)
  const [accounts, setAccounts] = useState([])

  const syncAccountState = (currentAccountId, newAccounts) => {
    if (!newAccounts.length) {
      localStorage.removeItem('accountId')
      setAccountId(null)
      setAccounts([])

      return
    }

    const validAccountId =
      currentAccountId &&
      newAccounts.some((x) => x.accountId === currentAccountId)
    const newAccountId = validAccountId
      ? currentAccountId
      : newAccounts[0].accountId

    localStorage.setItem('accountId', newAccountId)
    setAccountId(newAccountId)
    setAccounts(newAccounts)
  }

  useEffect(() => {
    NearWalletSelector.init({
      network: 'testnet',
      contractId: 'nearguestbook.akagi201.testnet',
      wallets: [setupNearWallet(), setupSender()],
    })
      .then((instance) => {
        return instance.getAccounts().then(async (newAccounts) => {
          syncAccountState(localStorage.getItem('accountId'), newAccounts)

          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-ignore-next-line
          window.selector = instance
          setSelector(instance)
        })
      })
      .catch((err) => {
        console.error(err)
        alert('Failed to initialise wallet selector')
      })
  }, [])

  useEffect(() => {
    if (!selector) {
      return
    }

    const subscription = selector.on('accountsChanged', (e) => {
      syncAccountState(accountId, e.accounts)
    })

    return () => subscription.remove()
  }, [selector, accountId])

  if (!selector) {
    return null
  }

  return (
    <WalletSelectorContext.Provider
      value={{
        selector,
        accounts,
        accountId,
        setAccountId,
      }}
    >
      {children}
    </WalletSelectorContext.Provider>
  )
}

export function useWalletSelector() {
  const context = useContext(WalletSelectorContext)

  if (!context) {
    throw new Error(
      'useWalletSelector must be used within a WalletSelectorContextProvider',
    )
  }

  return context
}

'''
'''--- frontend/src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>NEAR Guest Book</title>
    <meta property="og:title" content="NEAR Guest Book">
    <meta property="og:description" content="A guest book with comments stored on the NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- frontend/src/index.js ---
import * as nearAPI from 'near-api-js'
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import getConfig from './config.js'
import { WalletSelectorContextProvider } from './contexts/WalletSelectorContext'

// Initializing contract
async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet')

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore()

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig })

  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near)

  // Load in user's account data
  let currentUser
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    }
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them.
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ['getMessages'],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ['addMessage'],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    },
  )

  return { contract, currentUser, nearConfig, walletConnection }
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <WalletSelectorContextProvider>
        <App
          contract={contract}
          currentUser={currentUser}
          nearConfig={nearConfig}
          wallet={walletConnection}
        />
      </WalletSelectorContextProvider>,

      document.getElementById('root'),
    )
  },
)

'''
'''--- frontend/src/tests/integration/App-integration.test.js ---
// these are made available by near-cli/test_environment
// note: do not remove the line below as it is needed for these tests
/* global nearlib, nearConfig */

import 'regenerator-runtime/runtime';

let near;
let contract;
let accountId;

beforeAll(async function() {
  near = await nearlib.connect(nearConfig);
  accountId = nearConfig.contractName;
  contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getMessages'],
    changeMethods: ['addMessage'],
    sender: accountId
  });
});

it('send one message and retrieve it', async() => {
  await contract.addMessage({ text: 'aloha' });
  const msgs = await contract.getMessages();
  const expectedMessagesResult = [{
    premium: false,
    sender: accountId,
    text: 'aloha'
  }];
  expect(msgs).toEqual(expectedMessagesResult);
});

it('send two more messages and expect three total', async() => {
  await contract.addMessage({ text: 'foo' });
  await contract.addMessage({ text: 'bar' });
  const msgs = await contract.getMessages();
  expect(msgs.length).toEqual(3);
});

'''
'''--- frontend/src/tests/ui/App-ui.test.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import TestRenderer from 'react-test-renderer';
import App from '../../App';
const { act } = TestRenderer;

// Declare stubs for contract, walletConnection, and nearConfig
const contract = {
  account: {
    connection: {},
    accountId: 'test.near'
  },
  contractId: 'test.near',
  getMessages: () => new Promise(() => {}),
  addMessage: () => ''
};
const walletConnection = {
  account: () => ({ _state: { amount: '1' + '0'.repeat(25) } }),
  requestSignIn: () => null,
  signOut: () => null,
  isSignedIn: () => false,
  getAccountId: () => 'test.near'
};
const nearConfig = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: 'test.near',
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://near-contract-helper.onrender.com'
};

// For UI tests, use pattern from: https://reactjs.org/docs/test-renderer.html
let container;

beforeEach(() => {
  container = document.createElement('div');
  document.body.appendChild(container);
});

afterEach(() => {
  document.body.removeChild(container);
  container = null;
});

it('renders with proper title', () => {
  let testRenderer;

  act(() => {
    testRenderer = TestRenderer.create(
      <App contract={contract} wallet={walletConnection} nearConfig={nearConfig} />
    );
  });

  const testInstance = testRenderer.root;

  expect(testInstance.findByType('h1').children).toEqual(['NEAR Guest Book']);
});

'''