*GitHub Repository "NEARFoundation/near-lockups"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .idea/encodings.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="Encoding">
    <file url="PROJECT" charset="UTF-8" />
  </component>
</project>
'''
'''--- .idea/misc.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="MarkdownProjectSettings" wasCopied="true">
    <PreviewSettings splitEditorLayout="SPLIT" splitEditorPreview="PREVIEW" useGrayscaleRendering="false" zoomFactor="1.0" maxImageWidth="0" showGitHubPageIfSynced="false" allowBrowsingInPreview="false" synchronizePreviewPosition="true" highlightPreviewType="NONE" highlightFadeOut="5" highlightOnTyping="true" synchronizeSourcePosition="true" verticallyAlignSourceAndPreviewSyncPosition="true" showSearchHighlightsInPreview="false" showSelectionInPreview="true" openRemoteLinks="true" replaceUnicodeEmoji="false" lastLayoutSetsDefault="false">
      <PanelProvider>
        <provider providerId="com.vladsch.idea.multimarkdown.editor.swing.html.panel" providerName="Default - Swing" />
      </PanelProvider>
    </PreviewSettings>
    <ParserSettings gitHubSyntaxChange="false" emojiShortcuts="0" emojiImages="0">
      <PegdownExtensions>
        <option name="ABBREVIATIONS" value="false" />
        <option name="ANCHORLINKS" value="true" />
        <option name="ASIDE" value="false" />
        <option name="ATXHEADERSPACE" value="true" />
        <option name="AUTOLINKS" value="true" />
        <option name="DEFINITIONS" value="false" />
        <option name="DEFINITION_BREAK_DOUBLE_BLANK_LINE" value="false" />
        <option name="FENCED_CODE_BLOCKS" value="true" />
        <option name="FOOTNOTES" value="false" />
        <option name="HARDWRAPS" value="false" />
        <option name="HTML_DEEP_PARSER" value="false" />
        <option name="INSERTED" value="false" />
        <option name="QUOTES" value="false" />
        <option name="RELAXEDHRULES" value="true" />
        <option name="SMARTS" value="false" />
        <option name="STRIKETHROUGH" value="true" />
        <option name="SUBSCRIPT" value="false" />
        <option name="SUPERSCRIPT" value="false" />
        <option name="SUPPRESS_HTML_BLOCKS" value="false" />
        <option name="SUPPRESS_INLINE_HTML" value="false" />
        <option name="TABLES" value="true" />
        <option name="TASKLISTITEMS" value="true" />
        <option name="TOC" value="false" />
        <option name="WIKILINKS" value="true" />
      </PegdownExtensions>
      <ParserOptions>
        <option name="ADMONITION_EXT" value="false" />
        <option name="ATTRIBUTES_EXT" value="false" />
        <option name="COMMONMARK_LISTS" value="false" />
        <option name="DUMMY" value="false" />
        <option name="EMOJI_SHORTCUTS" value="true" />
        <option name="ENUMERATED_REFERENCES_EXT" value="false" />
        <option name="FLEXMARK_FRONT_MATTER" value="false" />
        <option name="GFM_LOOSE_BLANK_LINE_AFTER_ITEM_PARA" value="true" />
        <option name="GFM_TABLE_RENDERING" value="true" />
        <option name="GITBOOK_URL_ENCODING" value="false" />
        <option name="GITHUB_LISTS" value="true" />
        <option name="GITHUB_WIKI_LINKS" value="true" />
        <option name="GITLAB_EXT" value="false" />
        <option name="GITLAB_MATH_EXT" value="false" />
        <option name="GITLAB_MERMAID_EXT" value="false" />
        <option name="HEADER_ID_NON_ASCII_TO_LOWERCASE" value="false" />
        <option name="HEADER_ID_NO_DUPED_DASHES" value="false" />
        <option name="JEKYLL_FRONT_MATTER" value="false" />
        <option name="MACROS_EXT" value="false" />
        <option name="NO_TEXT_ATTRIBUTES" value="false" />
        <option name="PARSE_HTML_ANCHOR_ID" value="false" />
        <option name="PLANTUML_FENCED_CODE" value="false" />
        <option name="PUML_FENCED_CODE" value="false" />
        <option name="SIM_TOC_BLANK_LINE_SPACER" value="true" />
      </ParserOptions>
    </ParserSettings>
    <HtmlSettings headerTopEnabled="false" headerBottomEnabled="false" bodyTopEnabled="false" bodyBottomEnabled="false" embedUrlContent="false" addPageHeader="true" embedImages="false" embedHttpImages="false" imageUriSerials="false" addDocTypeHtml="true" noParaTags="false" plantUmlConversion="0" mathConversion="-1">
      <GeneratorProvider>
        <provider providerId="com.vladsch.idea.multimarkdown.editor.swing.html.generator" providerName="Default Swing HTML Generator" />
      </GeneratorProvider>
      <headerTop />
      <headerBottom />
      <bodyTop />
      <bodyBottom />
    </HtmlSettings>
    <CssSettings previewScheme="UI_SCHEME" cssUri="" isCssUriEnabled="false" isCssUriSerial="true" isCssTextEnabled="false" isDynamicPageWidth="true">
      <StylesheetProvider>
        <provider providerId="com.vladsch.idea.multimarkdown.editor.swing.html.css" providerName="Default Swing Stylesheet" />
      </StylesheetProvider>
      <ScriptProviders />
      <cssText />
      <cssUriHistory />
    </CssSettings>
    <AnnotatorSettings targetHasSpaces="true" linkCaseMismatch="true" wikiCaseMismatch="true" wikiLinkHasDashes="true" notUnderWikiHome="true" targetNotWikiPageExt="true" notUnderSourceWikiHome="true" targetNameHasAnchor="true" targetPathHasAnchor="true" wikiLinkHasSlash="true" wikiLinkHasSubdir="true" wikiLinkHasOnlyAnchor="true" linkTargetsWikiHasExt="true" linkTargetsWikiHasBadExt="true" notUnderSameRepo="true" targetNotUnderVcs="false" linkNeedsExt="true" linkHasBadExt="true" linkTargetNeedsExt="true" linkTargetHasBadExt="true" wikiLinkNotInWiki="true" imageTargetNotInRaw="true" repoRelativeAcrossVcsRoots="true" multipleWikiTargetsMatch="true" unresolvedLinkReference="true" linkIsIgnored="true" anchorIsIgnored="true" anchorIsUnresolved="true" anchorLineReferenceIsUnresolved="true" anchorLineReferenceFormat="true" anchorHasDuplicates="true" abbreviationDuplicates="true" abbreviationNotUsed="true" attributeIdDuplicateDefinition="true" attributeIdNotUsed="true" footnoteDuplicateDefinition="true" footnoteUnresolved="true" footnoteDuplicates="true" footnoteNotUsed="true" macroDuplicateDefinition="true" macroUnresolved="true" macroDuplicates="true" macroNotUsed="true" referenceDuplicateDefinition="true" referenceUnresolved="true" referenceDuplicates="true" referenceNotUsed="true" referenceUnresolvedNumericId="true" enumRefDuplicateDefinition="true" enumRefUnresolved="true" enumRefDuplicates="true" enumRefNotUsed="true" enumRefLinkUnresolved="true" enumRefLinkDuplicates="true" simTocUpdateNeeded="true" simTocTitleSpaceNeeded="true" />
    <HtmlExportSettings updateOnSave="false" parentDir="" targetDir="" cssDir="css" scriptDir="js" plainHtml="false" imageDir="" copyLinkedImages="false" imageUniquifyType="0" targetPathType="2" targetExt="" useTargetExt="false" noCssNoScripts="false" useElementStyleAttribute="false" linkToExportedHtml="true" exportOnSettingsChange="true" regenerateOnProjectOpen="false" linkFormatType="HTTP_ABSOLUTE" />
    <LinkMapSettings>
      <textMaps />
    </LinkMapSettings>
  </component>
</project>
'''
'''--- .idea/modules.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ProjectModuleManager">
    <modules>
      <module fileurl="file://$PROJECT_DIR$/.idea/near-lockups.iml" filepath="$PROJECT_DIR$/.idea/near-lockups.iml" />
    </modules>
  </component>
</project>
'''
'''--- .idea/php.xml ---
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="PhpProjectSharedConfiguration" php_language_level="7.1" />
</project>
'''
'''--- README.md ---
near-lockups
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-lockups.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-lockups.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-lockups.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-lockups.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- package.json ---
{
  "name": "near-lockups",
  "version": "0.1.2",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:web",
    "build:no-contract": "npm run build:web",
    "build:web": "parcel build src/index.html --public-url ./",
    "deploy:pages": "gh-pages -d dist/",
    "deploy:no-contract": "npm run build:no-contract && npm run deploy:pages",
    "deploy": "npm run build && npm run deploy:pages",
    "prestart": "npm run build",
    "start": "parcel src/index.html --open",
    "start:web": "parcel src/index.html --open"
  },
  "devDependencies": {
    "@babel/core": "~7.12.17",
    "@babel/preset-env": "~7.12.17",
    "@babel/preset-react": "~7.12.13",
    "babel-jest": "~26.6.3",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.3",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.5.3",
    "nodemon": "~2.0.7",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4"
  },
  "dependencies": {
    "@date-io/date-fns": "1.3.11",
    "@ledgerhq/hw-transport-webhid": "^6.3.0",
    "@ledgerhq/hw-transport-webusb": "^6.3.0",
    "@material-ui/core": "^4.9.12 || ^5.0.0-alpha.22",
    "@material-ui/data-grid": "4.0.0-alpha.33",
    "@material-ui/icons": "^4.11.2",
    "@material-ui/lab": "^4.0.0-alpha.60",
    "@material-ui/pickers": "^3.3.10",
    "@material-ui/x-grid-data-generator": "4.0.0-alpha.33",
    "bn": "^1.0.5",
    "bn.js": "^5.2.0",
    "bs58": "^4.0.1",
    "date-fns": "^2.11.1",
    "decimal.js": "^10.2.1",
    "js-sha256": "^0.9.0",
    "near-api-js": "~0.42.0",
    "near-ledger-js": "^0.2.0",
    "node-fetch": "^2.6.1",
    "prop-types": "^15.7.2",
    "query-string": "^7.0.1",
    "react": "^16.8.0 || ^17.0.0",
    "react-dom": "^15.0.0 || ^16.0.0 || ^17.0.0",
    "react-json-view": "^1.21.3",
    "react-material-ui-form-validator": "^2.1.4",
    "react-number-format": "^4.4.4",
    "react-router-dom": "^5.2.0",
    "react-transition-group": "^4.4.1",
    "regenerator-runtime": "~0.13.7"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import React, {useEffect} from 'react';
import {Route, Switch} from 'react-router-dom';
import {BrowserRouterHook} from './utils/use-router';
import NotFound from "./pages/NotFound";
import Lockups from "./pages/Lockups";
import useMediaQuery from '@material-ui/core/useMediaQuery';
import {createTheme, ThemeProvider} from '@material-ui/core/styles';
import CssBaseline from '@material-ui/core/CssBaseline';
import {useGlobalState, useGlobalMutation} from './utils/container'

const App = () => {
  const stateCtx = useGlobalState();
  const mutationCtx = useGlobalMutation();

  const theme = React.useMemo(
    () =>
      createTheme({
        palette: {
          type: stateCtx.config.darkMode,
        },
      }),
    [stateCtx.config.darkMode],
  );

  return (
    <ThemeProvider theme={theme}>
      <CssBaseline/>
      <BrowserRouterHook>
        <Switch>
          <Route exact path="/" component={Lockups}/>
          <Route exact path="/view" component={Lockups}/>
          <Route path="*">
            <NotFound/>
          </Route>
        </Switch>
      </BrowserRouterHook>
    </ThemeProvider>
  )
}

export default App

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'lockup.devnet'

function getConfig(env) {
  switch (env) {

    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: 'lockup.near',
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
        lockupAccount: 'lockup.near',
        masterAccount: 'near',
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
        lockupAccount: 'lockup.devnet',
        masterAccount: 'testnet',
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
        lockupAccount: 'lockup.devnet',
        masterAccount: 'testnet',
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
        lockupAccount: 'lockup.devnet',
        masterAccount: 'testnet',
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'testnet',
        lockupAccount: 'lockup.devnet',
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
        lockupAccount: 'lockup.devnet',

      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
    box-sizing: border-box;
}

html {
    --bg: #efefef;
    --fg: #1e1e1e;
    --gray: #555;
    --light-gray: #ccc;
    --shadow: #e6e6e6;
    --success: rgb(90, 206, 132);
    --primary: #FF585D;
    --secondary: #0072CE;

    background-color: var(--bg);
    color: var(--fg);
    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
    font-size: calc(0.9em + 0.5vw);
    line-height: 1.3;
    height: 100%;
}

body {
    margin: 0;
    padding: 0;
    height: 100%;
}

main {
    margin: 0 auto;
    max-width: 25em;
}

a,
.link {
    color: var(--primary);
    text-decoration: none;
}

a:hover,
a:focus,
.link:hover,
.link:focus {
    text-decoration: underline;
}

a:active,
.link:active {
    color: var(--secondary);
}

button, input {
    font: inherit;
    outline: none;
}

button {
    background-color: var(--secondary);
    border-radius: 5px;
    border: none;
    color: #efefef;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
}

button:hover, button:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

button:active {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}

button.link {
    background: none;
    border: none;
    box-shadow: none;
    display: inline;
}

[disabled] button, button[disabled] {
    box-shadow: none;
    background-color: var(--light-gray);
    color: gray;
    cursor: not-allowed;
    transform: none;
}

[disabled] button {
    text-indent: -900em;
    width: 2em;
    position: relative;
}

[disabled] button:after {
    content: " ";
    display: block;
    width: 0.8em;
    height: 0.8em;
    border-radius: 50%;
    border: 2px solid #fff;
    border-color: var(--fg) transparent var(--fg) transparent;
    animation: loader 1.2s linear infinite;
    position: absolute;
    top: 0.45em;
    right: 0.5em;
}

@keyframes loader {
    0% {
        transform: rotate(0deg)
    }
    100% {
        transform: rotate(360deg)
    }
}

fieldset {
    border: none;
    padding: 2em 0;
}

input {
    background-color: var(--shadow);
    border: none;
    border-radius: 5px 0 0 5px;
    caret-color: var(--primary);
    color: inherit;
    padding: 0.25em 1em;
}

input::selection {
    background-color: var(--secondary);
    color: #efefef;
}

input:focus {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
    color: var(--gray);
}

li {
    padding-bottom: 1em;
}

aside {
    animation: notify ease-in-out 10s;
    background-color: var(--shadow);
    border-radius: 5px;
    bottom: 0;
    font-size: 0.8em;
    margin: 1em;
    padding: 1em;
    position: fixed;
    transform: translateY(10em);
    right: 0;
}

aside footer {
    display: flex;
    font-size: 0.9em;
    justify-content: space-between;
    margin-top: 0.5em;
}

aside footer *:first-child {
    color: var(--success);
}

aside footer *:last-child {
    color: var(--gray);
}

@keyframes notify {
    0% {
        transform: translateY(10em)
    }
    5% {
        transform: translateY(0)
    }
    95% {
        transform: translateY(0)
    }
    100% {
        transform: translateY(10em)
    }
}

@media (prefers-color-scheme: dark) {
    html {
        --bg: #1e1e1e;
        --fg: #efefef;
        --gray: #aaa;
        --shadow: #2a2a2a;
        --light-gray: #444;
    }

    h1 {
        background-image: url(assets/logo-white.svg);
    }

    input:focus {
        box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
    }
}

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8"/>
  <link rel="icon" href="./assets/favicon.ico"/>
  <meta name="viewport" content="width=device-width, initial-scale=1"/>
  <link rel="apple-touch-icon" href="./assets/favicon.ico"/>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"/>
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons"/>

  <title>Near Lockups</title>
</head>
<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
<script src="./index.js"></script>
</body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import {initContract} from './utils'
import {ContainerProvider} from './utils/container'
//import './global.css';

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <ContainerProvider>
        <App/>
      </ContainerProvider>,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'
import 'regenerator-runtime/runtime';

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

export async function initContract() {
  const near = await connect(Object.assign({deps: {keyStore: new keyStores.BrowserLocalStorageKeyStore()}}, nearConfig))
  window.walletConnection = new WalletConnection(near)
  window.accountId = window.walletConnection.getAccountId()
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: ['get_foundation_account_id','get_master_account_id','get_lockup_master_account_id','get_min_attached_balance'],
    changeMethods: ['create'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  console.log(window.walletConnection);
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

/* --------------------------------------- Ledger support ----------------------------------------------------------- */
export function getKeys() {
    let keys = window.localStorage.getItem('keys');
    return keys ? JSON.parse(keys) : [];
}

export function setKeys(keys) {
    window.localStorage.setItem('keys', JSON.stringify(keys));
}

export async function findPath(accessKeys) {
    let keys = getKeys();
    for (let i = 0; i < keys.length; ++i) {
        let publicKey = 'ed25519:' + encode(Buffer.from(keys[i].publicKey));
        console.log(accessKeys, publicKey, accessKeys.includes(publicKey));
        if (accessKeys.includes(publicKey)) {
            console.log({ publicKey, path: keys[i].path });
            return { publicKey, path: keys[i].path };
        }
    }
    return { publicKey: null, path: null };
}

'''
'''--- src/utils/Loading.js ---
import React, {useEffect, useState} from "react";

const Loading = () => {
  const [show, setShow] = useState(false);

  useEffect(() => {
    const timer = setTimeout(() => {
      setShow(true);
    }, 500);
    return () => clearTimeout(timer);
  }, []);

  return (
    <>
      {show ? (

        <div className="text-center">Loading from the chain, please wait...</div>

      ) : null}
    </>
  );
};

export default Loading;

'''
'''--- src/utils/funcs.js ---
import React from "react";

export const yoktoNear = 1000000000000000000000000;
import sha256 from 'js-sha256';
import BN from 'bn.js';
import NumberFormat from "react-number-format";
import * as nearApi from "near-api-js";
import getConfig from "../config";
import {encode, decode} from 'bs58';

const nearConfig = getConfig(process.env.NODE_ENV || 'development')
const provider = new nearApi.providers.JsonRpcProvider(nearConfig.nodeUrl);
const connection = new nearApi.Connection(nearConfig.networkId, provider, {});

export const numberFormatted = (props) => {
  const {inputRef, onChange, ...other} = props;

  return (
    <NumberFormat
      {...other}
      getInputRef={inputRef}
      onValueChange={values => {
        onChange({
          target: {
            name: props.name,
            value: values.value
          }
        });
      }}
      thousandSeparator
    />
  );
}

export const truncate = (str, n) => {
  return (str.length > n) ? str.substr(0, n - 1) + '...' : str;
}

export const accountToLockup = (masterAccountId, accountId) => {
  return `${sha256(Buffer.from(accountId)).toString('hex').slice(0, 40)}.${masterAccountId}`;
}

export const timestampToReadable = (timestamp) => {
  let seconds = Number(timestamp / 1e9);
  let y = Math.floor(seconds / 31536000);
  let m = Math.floor((seconds % 31536000) / 2628000);
  let d = Math.floor((seconds % 2628000) / (3600 * 24));

  let yDisplay = y > 0 ? y + (y === 1 ? " year, " : " years, ") : "";
  let mDisplay = m > 0 ? m + (m === 1 ? " month, " : " months, ") : "";
  let dDisplay = d > 0 ? d + (d === 1 ? " day, " : " days, ") : "";
  return (yDisplay + mDisplay + dDisplay).replace(/,\s*$/, "");

}

export const convertDuration = (duration) => {
  let utcSeconds = duration / 1e9;
  let epoch = new Date(0);
  epoch.setUTCSeconds(utcSeconds);
  return epoch;
}

export const yoktoToNear = (amount) => {
  return nearApi.utils.format.formatNearAmount(amount, 2);
}

function readOption(reader, f) {
  let x = reader.readU8();
  if (x === 1) {
    return f();
  }
  return null;
}

async function viewLockupState(connection, contractId) {
  const result = await connection.provider.sendJsonRpc("query", {
    request_type: "view_state",
    finality: "final",
    account_id: contractId,
    prefix_base64: "U1RBVEU=",
  });
  let value = Buffer.from(result.values[0].value, 'base64');
  let reader = new nearApi.utils.serialize.BinaryReader(value);
  let owner = reader.readString();
  let lockupAmount = reader.readU128().toString();
  let terminationWithdrawnTokens = reader.readU128().toString();
  let lockupDuration = reader.readU64().toString();
  let releaseDuration = readOption(reader, () => reader.readU64().toString(), "0");
  let lockupTimestamp = readOption(reader, () => reader.readU64().toString(), "0");
  let tiType = reader.readU8();
  let transferInformation;
  if (tiType === 0) {
    transferInformation = {
      transfers_timestamp: reader.readU64()
    };
  } else {
    transferInformation = {
      transfer_poll_account_id: reader.readString()
    };
  }
  let vestingType = reader.readU8();
  let vestingInformation;
  switch (vestingType) {
    case 1:
      vestingInformation = {vestingHash: reader.readArray(() => reader.readU8())};
      break;
    case 2:
      let start = reader.readU64();
      let cliff = reader.readU64();
      let end = reader.readU64();
      vestingInformation = {start, cliff, end};
      break;
    case 3:
      let unvestedAmount = reader.readU128();
      let terminationStatus = reader.readU8();
      vestingInformation = {unvestedAmount, terminationStatus};
      break;
    default:
      vestingInformation = null;
      break;
  }

  return {
    owner,
    lockupAmount: new BN(lockupAmount),
    terminationWithdrawnTokens: new BN(terminationWithdrawnTokens),
    lockupDuration: new BN(lockupDuration),
    releaseDuration: new BN(releaseDuration),
    lockupTimestamp: new BN(lockupTimestamp),
    transferInformation,
    vestingInformation,
  }
}

export const dateToNs = (dateObj) => {
  if (!(dateObj instanceof Date) && typeof dateObj !== 'number') {
    throw new Error(`Must be Date or number, got ${typeof dateObj}: ${dateObj}`);
  }
  if (dateObj instanceof Date) {
    dateObj = dateObj.getTime();
  }
  // Time from getTime is in millis, we need nanos - multiple by 1M.
  return (dateObj * 1000000).toString();
}

export const epochToHumanReadable = (epoch) => {
  let epochDate = new Date(epoch / 1000000);
  return epochDate.toUTCString();
}

export function computeVestingHash(authToken, public_key, vesting_start, vesting_end, vesting_cliff) {
  const vestingSchedule = {
    vesting_start: dateToNs(vesting_start),
    vesting_end: dateToNs(vesting_end),
    vesting_cliff: dateToNs(vesting_cliff)
  };
  const salt = Buffer.from(sha256(Buffer.from(authToken + public_key)), 'hex');
  let writer = new nearApi.utils.serialize.BinaryWriter();
  writer.write_u64(vestingSchedule.vesting_start);
  writer.write_u64(vestingSchedule.vesting_cliff);
  writer.write_u64(vestingSchedule.vesting_end);
  writer.write_u32(salt.length);
  writer.write_buffer(salt);
  const bytes = writer.toArray();
  const vestingHash = Buffer.from(sha256(bytes), 'hex').toString('base64');
  console.log('Vesting hash: ', vestingHash, authToken + public_key, vesting_start, vesting_end, vesting_cliff, salt.toString('base64'), vestingSchedule);
  return vestingHash;
}

function prepareAccountId(data) {
  if (data.toLowerCase().endsWith("." + nearConfig.masterAccount)) {
    return data.replace('@', '').replace('https://wallet.near.org/send-money/', '').toLowerCase();
  }
  if (data.length === 64 && !data.startsWith('ed25519:')) {
    return data;
  }
  let publicKey;
  if (data.startsWith('NEAR')) {
    publicKey = decode(data.slice(4)).slice(0, -4);
  } else {
    publicKey = decode(data.replace('ed25519:', ''));
  }

  return publicKey.toString('hex');
}

async function lookupLockup(near, accountId) {
    const lockupAccountId = accountToLockup(nearConfig.lockupAccount, accountId);
    console.log(lockupAccountId);
    try {
        const lockupAccount = await near.account(lockupAccountId);
        const lockupAccountBalance = await lockupAccount.viewFunction(lockupAccountId, 'get_balance', {});
        const lockupState = await viewLockupState(near.connection, lockupAccountId);
        // More details: https://github.com/near/core-contracts/pull/136
        lockupState.hasBrokenTimestamp = [
            '3kVY9qcVRoW3B5498SMX6R3rtSLiCdmBzKs7zcnzDJ7Q',
            'DiC9bKCqUHqoYqUXovAnqugiuntHWnM3cAc7KrgaHTu'
        ].includes((await lockupAccount.state()).code_hash);
        return { lockupAccountId, lockupAccountBalance, lockupState };
    } catch (error) {
        console.warn(error);
        return { lockupAccountId: `${lockupAccountId} doesn't exist`, lockupAmount: 0 };
    }
}

const options = {
  nodeUrl: nearConfig.nodeUrl,
  networkId: nearConfig.networkId,
  deps: {}
};

function getStartLockupTimestamp(lockupState) {
  const phase2Time = new BN("1602614338293769340");
  let lockupTimestamp = BN.max(
    phase2Time.add(lockupState.lockupDuration),
    lockupState.lockupTimestamp
  );
  return lockupState.hasBrokenTimestamp ? phase2Time : lockupTimestamp;
}

const saturatingSub = (a, b) => {
  let res = a.sub(b);
  return res.gte(new BN(0)) ? res : new BN(0);
};

// https://github.com/near/core-contracts/blob/master/lockup/src/getters.rs#L64
async function getLockedTokenAmount(lockupState) {
  const phase2Time = new BN("1602614338293769340");
  let now = new BN((new Date().getTime() * 1000000).toString());
  if (now.lte(phase2Time)) {
    return saturatingSub(
      lockupState.lockupAmount,
      lockupState.terminationWithdrawnTokens
    );
  }

  let lockupTimestamp = BN.max(
    phase2Time.add(lockupState.lockupDuration),
    lockupState.lockupTimestamp
  );
  let blockTimestamp = now;
  if (blockTimestamp.lt(lockupTimestamp)) {
    return saturatingSub(
      lockupState.lockupAmount,
      lockupState.terminationWithdrawnTokens
    );
  }

  let unreleasedAmount;
  if (lockupState.releaseDuration) {
    let startTimestamp = getStartLockupTimestamp(lockupState);
    let endTimestamp = startTimestamp.add(lockupState.releaseDuration);
    if (endTimestamp.lt(blockTimestamp)) {
      unreleasedAmount = new BN(0);
    } else {
      let timeLeft = endTimestamp.sub(blockTimestamp);
      unreleasedAmount = lockupState.lockupAmount
        .mul(timeLeft)
        .div(lockupState.releaseDuration);
    }
  } else {
    unreleasedAmount = new BN(0);
  }

  let unvestedAmount;
  if (lockupState.vestingInformation) {
    if (lockupState.vestingInformation.unvestedAmount) {
      // was terminated
      unvestedAmount = lockupState.vestingInformation.unvestedAmount;
    } else if (lockupState.vestingInformation.start) {
      // we have schedule
      if (blockTimestamp.lt(lockupState.vestingInformation.cliff)) {
        unvestedAmount = lockupState.lockupAmount;
      } else if (blockTimestamp.gte(lockupState.vestingInformation.end)) {
        unvestedAmount = new BN(0);
      } else {
        let timeLeft = lockupState.vestingInformation.end.sub(blockTimestamp);
        let totalTime = lockupState.vestingInformation.end.sub(
          lockupState.vestingInformation.start
        );
        unvestedAmount = lockupState.lockupAmount.mul(timeLeft).div(totalTime);
      }
    }
  }
  if (unvestedAmount === undefined) {
    unvestedAmount = new BN(0);
  }

  return BN.max(
    saturatingSub(unreleasedAmount, lockupState.terminationWithdrawnTokens),
    unvestedAmount
  );
}

export async function viewLookupNew(inputAccountId) {

  const near = await nearApi.connect(options);
  let accountId = prepareAccountId(inputAccountId);

  let lockupAccountId = '', lockupAccountBalance = 0, ownerAccountBalance = 0, lockupReleaseStartTimestamp = new BN(0),
    lockupState = {}, lockedAmount = 0;
  try {
    let account = await near.account(accountId);
    let state = await account.state();
    ownerAccountBalance = state.amount;
    ({lockupAccountId, lockupAccountBalance, lockupState} = await lookupLockup(near, accountId));
    if (lockupState) {
      lockupReleaseStartTimestamp = getStartLockupTimestamp(lockupState);
      lockedAmount = await getLockedTokenAmount(lockupState);
      lockupState.releaseDuration = lockupState.releaseDuration.div(new BN("1000000000"))
        .divn(60)
        .divn(60)
        .divn(24)
        .toString(10);
      //lockupState.vestingInformation = formatVestingInfo(lockupState.vestingInformation);
    }
  } catch (error) {
    console.error(error);
  }
  console.log(lockupState);

  let result = {}

  result.lockupAmount = lockupState.lockupAmount;
  result.owner = lockupState.owner;
  result.vestingInformation = lockupState.vestingInformation;
  result.releaseDuration = lockupState.releaseDuration;
  result.ownerAccountBalance = nearApi.utils.format.formatNearAmount(ownerAccountBalance, 2);
  result.lockedAmount = nearApi.utils.format.formatNearAmount(lockedAmount.toString(), 2);
  result.liquidAmount = nearApi.utils.format.formatNearAmount(new BN(lockupAccountBalance).sub(new BN(lockedAmount)).toString(), 2);
  result.totalAmount = nearApi.utils.format.formatNearAmount(new BN(ownerAccountBalance).add(new BN(lockupAccountBalance)).toString(), 2);
  result.lockupReleaseStartDate = new Date(lockupReleaseStartTimestamp.divn(1000000).toNumber());
  return result;
}

'''
'''--- src/utils/ledger.js ---
import {createClient} from 'near-ledger-js';
import TransportU2F from "@ledgerhq/hw-transport-webhid";
//import TransportU2F from "@ledgerhq/hw-transport-webusb";

async function createLedgerU2FTransport() {
  let transport = await TransportU2F.create();
  transport.setScrambleKey("NEAR");
  return transport;
}

async function createLedgerU2FClient() {
  const transport = await createLedgerU2FTransport();
  return await createClient(transport);
}

export {createLedgerU2FClient};

'''
'''--- src/utils/store.js ---
import getConfig from "../config";

const readDefaultState = () => {
  try {
    return JSON.parse(window.localStorage.getItem('lockups_local_storage'))
  } catch (err) {
    return {}
  }
}

const defaultState = {
  loading: false,
  config: {
    factory: getConfig(process.env.NODE_ENV || 'development').contractName,
    contract: '',
    network: getConfig(process.env.NODE_ENV || 'development'),
    darkMode: 'light',
    sentTx: null,
    createdLockups: [],
    ledgerKeys: [],
    useMultisig: false,
    ...readDefaultState(),
  }
}

const reducer = (state, action) => {
  switch (action.type) {
    case 'config': {
      return {...state, config: action.payload}
    }
    case 'loading': {
      return {...state, loading: action.payload}
    }
    default:
      throw new Error('mutation type not defined')
  }
}

export {reducer, defaultState}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''