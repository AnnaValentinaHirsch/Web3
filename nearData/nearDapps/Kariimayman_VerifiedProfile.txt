*GitHub Repository "Kariimayman/VerifiedProfile"*

'''--- __tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- __tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";
import { VMContext } from "near-mock-vm";
import { u128} from "near-sdk-as";

let contractt: Contract;
const CREATOR_ACCOUNT_ID = "someone.NEAR";
const CURRENT_ACCOUNT_ID = "someone.NEAR";
const PREDECESSOR_ACCOUNT_ID = "Owner.testnet";

beforeAll(() => {
    contractt = new Contract();
    VMContext.setSigner_account_id(CREATOR_ACCOUNT_ID);
    VMContext.setCurrent_account_id(CURRENT_ACCOUNT_ID);
    VMContext.setPredecessor_account_id(PREDECESSOR_ACCOUNT_ID);
});

describe("isAccountVerified function", () => {
    test("Check if the function isAccountVerified works probably", () => {
        VMContext.setSigner_account_id("someone.NEAR")
        contractt.createProfile()
        expect(contractt.profilesList.contains(CURRENT_ACCOUNT_ID)).toBeTruthy()
    }); 
});

describe("isAccountVerified function", () => {
    test("2", () => {
        VMContext.setSigner_account_id("someone.NEAR")
        contractt.createProfile()
        VMContext.setAttached_deposit(u128.from(1))
        VMContext.setPredecessor_account_id("Owner.testnet")
        contractt.verifyAccount("someone.NEAR" , 2)
        expect(contractt.isAccountVerified("someone.NEAR")).toBe("2")
    }); 
});
'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import { context, PersistentMap, PersistentVector, u128 } from "near-sdk-as";
export const enum verificationType {
  New = 0,
  Pending = 1,
  Rejected = 2,
  Verified = 3,
  Spam = 4,
}
@nearBindgen
export class Contract {
  // A List that contains all the registered profiles
  profilesList: PersistentMap<string, verificationType> = new PersistentMap<
    string,
    verificationType
  >("P");
  // A List contains all accounts ID
  usersAccountsId: PersistentVector<string> = new PersistentVector<string>("U");
  adminList: Array<string> = [
    "karimayman.testnet",
    "aliabdallah9.testnet",
    "hamzatest.testnet",
    "mhassanist.testnet",
  ];
  accountExist(accountID: string): bool {
    if (this.profilesList.contains(accountID)) {
      return true;
    }
    return false;
  }

  adminExist(accountID: string): bool {
    for (let i: i32 = 0; i < this.adminList.length; i++) {
      if (this.adminList[i] == accountID) {
        return true;
      }
    }
    return false;
  }

  // This functions checks if the profile is already linked to this near account or not, if it isn't then it creates as new profile
  @mutateState()
  createProfile(): string {
    let accountID = context.sender;
    assert(
      !this.accountExist(accountID),
      "This NEAR ID is already linked to another account"
    );
    this.profilesList.set(accountID, 0);
    this.usersAccountsId.push(accountID); // Storage Users' Accounts IDs
    return accountID;
  }

  // assuming that the admin id is Owner.testnet
  @mutateState()
  verifyAccount(accountID: string, verification: verificationType): string {
    assert(this.adminExist(context.predecessor), "Access Denied");
    assert(this.profilesList.contains(accountID), "This NEAR ID is missing");
    this.profilesList.set(accountID, verification);
    return accountID;
  }

  @mutateState()
  changeToPending(accountID: string): string {
    assert(
      context.predecessor == accountID ||
        this.adminList.includes(context.predecessor),
      "Access Denied"
    );
    assert(this.profilesList.contains(accountID), "This NEAR ID is missing");
    this.profilesList.set(accountID, 1);
    return accountID;
  }

  verificationPerUser(accountID: string): string {
    assert(
      context.predecessor == accountID ||
        this.adminList.includes(context.predecessor),
      "Access Denied"
    );
    let verificationType = this.profilesList.getSome(accountID);
    if (verificationType == 0) {
      return "New";
    } else if (verificationType == 1) {
      return "Pending";
    } else if (verificationType == 2) {
      return "Rejected";
    } else if (verificationType == 3) {
      return "Verified";
    } else if (verificationType == 4) {
      return "Spam";
    }
    return "Not Defined";
  }
  // This function acts as API to know if the account is Verified or not
  isAccountVerified(accountID: string): string {
    assert(context.attachedDeposit >= u128.from(1), "1 NEAR is required");
    let verificationType = this.profilesList.getSome(accountID);
    if (verificationType == 0) {
      return "New";
    } else if (verificationType == 1) {
      return "Pending";
    } else if (verificationType == 2) {
      return "Rejected";
    } else if (verificationType == 3) {
      return "Verified";
    } else if (verificationType == 4) {
      return "Spam";
    }
    return "Not Defined";
  }

  // This function returns users' accounts ID
  getUsers(): Array<string> {
    assert(this.adminList.includes(context.predecessor), "Access Denied");
    let users = new Array<string>(this.usersAccountsId.length);
    for (let i = 0; i < this.usersAccountsId.length; i++) {
      users[i] =
        this.usersAccountsId[i] +
        "," +
        this.verificationPerUser(this.usersAccountsId[i]);
    }
    return users;
  }
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- package.json ---
{
  "name": "verifiedprofile",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@world-near.org",
  "license": "ISC",
  "devDependencies": {
    "@types/jest": "^27.4.0",
    "near-sdk-as": "^3.1.0"
  }
}

'''