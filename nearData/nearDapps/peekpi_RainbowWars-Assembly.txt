*GitHub Repository "peekpi/RainbowWars-Assembly"*

'''--- .dependabot/config.yml ---
version: 1
update_configs:
  - package_manager: "javascript"
    directory: "/"
    update_schedule: "live"
    automerged_updates:
      - match:
          dependency_type: "development"
          update_type: "all"
      - match:
          dependency_type: "production"
          update_type: "all"

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: nvm use default
    init: yarn
    command: gp open README-Gitpod.md && yarn dev

ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .travis.yml ---
language: node_js
os:
  - linux
  - osx
  - windows
node_js:
  - 12
env:
  - NODE_ENV=ci YARN_GPG=no
  - NODE_ENV=ci-betanet YARN_GPG=no
cache: yarn
script:
  - yarn build
  - yarn test

'''
'''--- README-Gitpod.md ---
Counter example in AssemblyScript - Gitpod version
==================================================

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

## Description

In Gitpod, the counter will start automatically. Please look in the terminal for a link to follow.

This contract implements simple counter backed by storage on blockchain.
Contract in `assembly/main.ts` provides methods to increment / decrement counter and get it's current value or reset.

Plus and minus buttons increase and decrease value correspondingly. When button L is toggled, counter will add or minus 10 a time. RS button is for reset. LE and RE buttons to let the robot wink to you.

## To Test

```
yarn asp  # as-pect tests
NODE_ENV=ci yarn jest # jest tests
NODE_ENV=ci yarn test # both
```

## To Explore

- `assembly/main.ts` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/test.js` for the JS tests for the contract

## Data collection

By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

'''
'''--- README.md ---
# RainbowWars AssemblyScript Contract

## Description
RainbowWars is a cross-chain game. Here is the [description][describe] and [demo][demo].

This is the near contract for RainbowWars.
The RainbowWars project consists of three parts:
- [ethereum solidity contract][ethcontract]
- [near assembly contract][nearcontract]
- [vue frontend][frontend]

> This repo was ported from [near-Counter][counter] demo. Only use the assembly contract part, please ignore the front-end part.

## Setup
Install dependencies:

```
yarn
```

Make sure you have `near-cli` by running:

```
near --version
```

If you need to install `near-cli`:

```
npm install near-cli -g
```

## Modify the contract code
Modify the `assembly/main.ts`, changing the `otherSideBridge` to your ethereum Contract Address:
```
...
const otherSideBridge:u256 = str2u256('ETH CONTRACT ADDRESS');
...
```

## Compilation
```
yarn build
```

## Deployment
1. login your near account
···
near login
···
2. deploy the contract
```
near deploy
```

[counter]: https://github.com/near-examples/counter
[demo]: https://peekpi.github.io/RainbowWars/dist
[ethcontract]: https://github.com/peekpi/RainbowWars-Solidity
[nearcontract]: https://github.com/peekpi/RainbowWars-Assembly
[frontend]: https://github.com/peekpi/RainbowWars-Vue
[describe]: https://github.com/peekpi/RainbowWars
'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');
'''
'''--- asconfig.js ---
const compile = require("near-sdk-as/compiler").compile

compile("assembly/main.ts", // input file
        "out/main.wasm",    // output file
        [
        //   "-O1",          // Optional arguments
        "--debug",
        "--measure",         // Shows compiler runtime
        "--validate"         // Validate the generated wasm module
        ], {
          verbose: true     // Output the cli args passed to asc
        });

'''
'''--- assembly/MPT.ts ---

import { u256 } from "near-sdk-as";
import { math } from "near-sdk-as";
import { RlpReader } from "./RlpReader";
import {  _require, SolAbi } from './Solidity';

class MutiReturn {
    isLeaf : bool
    skipNibbles:Uint8Array
}

export class ProvethVerifier {

    isEmptyBytesequence(item : RlpReader.RLPItem ) : bool {
        return item.isEmpty();
    }

    decodeNibbles(compact : Uint8Array, skipNibbles : u32, append16 : u32) : Uint8Array {
        _require(compact.length > 0);

        let length:u32 = compact.length * 2;
        _require(skipNibbles <= length);
        length -= skipNibbles;

        const nibbles = new Uint8Array(length+append16);
        if(append16 == 1)
            nibbles[nibbles.length-1] = 0x10;
        let nibblesLength = 0;

        for (let i = skipNibbles; i < skipNibbles + length; i += 1) {
            if (i % 2 == 0) {
                nibbles[nibblesLength] = (compact[i/2] >> 4) & 0xF;
            } else {
                nibbles[nibblesLength] = (compact[i/2] >> 0) & 0xF;
            }
            nibblesLength += 1;
        }

        assert(nibblesLength + append16 == nibbles.length);
        return nibbles;
    }

    merklePatriciaCompactDecode(compact : Uint8Array) : MutiReturn {
        _require(compact.length > 0);
        
        const first_nibble = compact[0] >> 4 & 0xF;
        let skipNibbles = 0;
        let isLeaf = false;
        if (first_nibble == 0) {
            skipNibbles = 2;
            isLeaf = false;
        } else if (first_nibble == 1) {
            skipNibbles = 1;
            isLeaf = false;
        } else if (first_nibble == 2) {
            skipNibbles = 2;
            isLeaf = true;
        } else if (first_nibble == 3) {
            skipNibbles = 1;
            isLeaf = true;
        } else {
            // Not supposed to happen!
            _require(false);
        }
        return {isLeaf, skipNibbles:this.decodeNibbles(compact, skipNibbles, isLeaf?1:0)};
    }

    sharedPrefixLength(xsOffset:u32, xs:Uint8Array, ys:Uint8Array) : u32 {
        let i = 0;
        for (i = 0; i + xsOffset < xs.length && i < ys.length; i++) {
            if (xs[i + xsOffset] != ys[i]) {
                return i;
            }
        }
        return i;
    }

    /// @dev Computes the hash of the Merkle-Patricia-Trie hash of the input.
    ///      Merkle-Patricia-Tries use a weird "hash function" that outputs
    ///      *variable-length* hashes: If the input is shorter than 32 bytes,
    ///      the MPT hash is the input. Otherwise, the MPT hash is the
    ///      Keccak-256 hash of the input.
    ///      The easiest way to compare variable-length byte sequences is
    ///      to compare their Keccak-256 hashes.
    /// @param input The byte sequence to be hashed.
    /// @return Keccak-256(MPT-hash(input))
    mptHashHash(input : Uint8Array) : u256 {
        let hashArray : Uint8Array = math.keccak256(input);
        if (input.length >= 32)
            hashArray = math.keccak256(hashArray);
        return u256.fromUint8ArrayBE(hashArray);
    }

    keccak256(input : Uint8Array) : u256 {
        return u256.fromUint8ArrayBE(math.keccak256(input));
    }

    MPTProof(rootHash : u256, mptkey : Uint8Array, proof : Uint8Array) : Uint8Array {
        const item = new RlpReader.RLPItem(proof);
        const stacks = item.toList();
        return this.validateMPTProof(rootHash, mptkey, stacks);
    }

    /// @dev Validates a Merkle-Patricia-Trie proof.
    ///      If the proof proves the inclusion of some key-value pair in the
    ///      trie, the value is returned. Otherwise, i.e. if the proof proves
    ///      the exclusion of a key from the trie, an empty byte array is
    ///      returned.
    /// @param rootHash is the Keccak-256 hash of the root node of the MPT.
    /// @param mptKey is the key (consisting of nibbles) of the node whose
    ///        inclusion/exclusion we are proving.
    /// @param stack is the stack of MPT nodes (starting with the root) that
    ///        need to be traversed during verification.
    /// @return value whose inclusion is proved or an empty byte array for
    ///         a proof of exclusion
    validateMPTProof(
        rootHash : u256,
        mptKey : Uint8Array,
        stack : RlpReader.RLPItem[]
    ) : Uint8Array {
        mptKey = this.decodeNibbles(mptKey, 0, 1);
        let mptKeyOffset = 0;

        let nodeHashHash : u256 = u256.Zero;
        let rlpNode : Uint8Array;
        let node : RlpReader.RLPItem[];

        let rlpValue : RlpReader.RLPItem;

        if (stack.length == 0) {
            // Root hash of empty Merkle-Patricia-Trie
            const emptyHash = u256.fromBytesBE([86,232,31,23,27,204,85,166,255,131,69,230,146,192,248,110,91,72,224,27,153,108,173,192,1,98,47,181,227,99,180,33]);
            _require(rootHash == emptyHash);
            return new Uint8Array(0);
        }

        // Traverse stack of nodes starting at root.
        for (let i = 0; i < stack.length; i++) {

            // We use the fact that an rlp encoded list consists of some
            // encoding of its length plus the concatenation of its
            // *rlp-encoded* items.
            rlpNode = stack[i].toRlpBytes();
            // The root node is hashed with Keccak-256 ...
            if (i == 0 && rootHash != this.keccak256(rlpNode)) {
                _require(false);
            }
            // ... whereas all other nodes are hashed with the MPT
            // hash function.
            if (i != 0 && nodeHashHash != this.mptHashHash(rlpNode)) {
                _require(false);
            }
            // We verified that stack[i] has the correct hash, so we
            // may safely decode it.
            node = stack[i].toList();

            if (node.length == 2) {
                // Extension or Leaf node

                let isLeaf:bool = false;
                let nodeKey : Uint8Array;
                const r = this.merklePatriciaCompactDecode(node[0].toBytes());
                isLeaf = r.isLeaf;
                nodeKey = r.skipNibbles;

                const prefixLength = this.sharedPrefixLength(mptKeyOffset, mptKey, nodeKey);
                mptKeyOffset += prefixLength;

                if (prefixLength < <u32>nodeKey.length) {
                    // Proof claims divergent extension or leaf. (Only
                    // relevant for proofs of exclusion.)
                    // An Extension/Leaf node is divergent iff it "skips" over
                    // the point at which a Branch node should have been had the
                    // excluded key been included in the trie.
                    // Example: Imagine a proof of exclusion for path [1, 4],
                    // where the current node is a Leaf node with
                    // path [1, 3, 3, 7]. For [1, 4] to be included, there
                    // should have been a Branch node at [1] with a child
                    // at 3 and a child at 4.

                    // Sanity check
                    if (i < stack.length - 1) {
                        // divergent node must come last in proof
                        _require(false);
                    }

                    return new Uint8Array(0);
                }

                if (isLeaf) {
                    // Sanity check
                    if (i < stack.length - 1) {
                        // leaf node must come last in proof
                        _require(false);
                    }

                    if (mptKeyOffset < mptKey.length) {
                        return new Uint8Array(0);
                    }

                    rlpValue = node[1];
                    return rlpValue.toBytes();
                } else { // extension
                    // Sanity check
                    if (i == stack.length - 1) {
                        // shouldn't be at last level
                        _require(false);
                    }

                    if (!node[1].isList()) {
                        // rlp(child) was at least 32 bytes. node[1] contains
                        // Keccak256(rlp(child)).
                        nodeHashHash = this.keccak256(node[1].toBytes());
                    } else {
                        // rlp(child) was at less than 32 bytes. node[1] contains
                        // rlp(child).
                        nodeHashHash = this.keccak256(node[1].toRlpBytes());
                    }
                }
            } else if (node.length == 17) {
                // Branch node

                if (mptKeyOffset != mptKey.length) {
                    // we haven't consumed the entire path, so we need to look at a child
                    const nibble = mptKey[mptKeyOffset];
                    mptKeyOffset += 1;
                    if (nibble >= 16) {
                        // each element of the path has to be a nibble
                        _require(false);
                    }

                    if (this.isEmptyBytesequence(node[nibble])) {
                        // Sanity
                        if (i != stack.length - 1) {
                            // leaf node should be at last level
                            _require(false);
                        }

                        return new Uint8Array(0);
                    } else if (!node[nibble].isList()) {
                        nodeHashHash = this.keccak256(node[nibble].toBytes());
                    } else {
                        nodeHashHash = this.keccak256(node[nibble].toRlpBytes());
                    }
                } else {
                    // we have consumed the entire mptKey, so we need to look at what's contained in this node.

                    // Sanity
                    if (i != stack.length - 1) {
                        // should be at last level
                        _require(false);
                    }

                    return node[16].toBytes();
                }
            }
        }
        return new Uint8Array(0);
    }
}

'''
'''--- assembly/RlpReader.ts ---
import { u256 } from "near-sdk-as";
import { _require } from "./Solidity";

export namespace RlpReader {

export class RLPItem {
    private static STRING_SHORT_START: u8 = 0x80;
    private static STRING_LONG_START: u8 = 0xb8;
    private static LIST_SHORT_START: u8 = 0xc0;
    private static LIST_LONG_START: u8 = 0xf8;

    private buffer:Uint8Array

    constructor(_buffer: Uint8Array) {
        this.buffer = _buffer;
    }

    // @return entire rlp item byte length
    private static itemLength(buffer: Uint8Array) : u32 {
        
        const byte0 = buffer[0];

        if (byte0 < RLPItem.STRING_SHORT_START)
            return 1;

        else if (byte0 < RLPItem.STRING_LONG_START)
            return byte0 - RLPItem.STRING_SHORT_START + 1;

        else if (byte0 < RLPItem.LIST_SHORT_START) {
            const byteLen = byte0 - RLPItem.STRING_LONG_START + 1;
            const lenBuffer = buffer.subarray(1, byteLen+1);
            let len:u32 = 0;
            for(let i = 0; i < lenBuffer.length; i++){
                len <<= 8;
                len |= lenBuffer[i];
            }
            return len + byteLen + 1;
        }

        else if (byte0 < RLPItem.LIST_LONG_START) {
            return byte0 - RLPItem.LIST_SHORT_START + 1;
        }

        else {
            const byteLen = byte0 - RLPItem.LIST_LONG_START + 1;
            const lenBuffer = buffer.subarray(1, byteLen+1);
            let len:u32 = 0;
            for(let i = 0; i < lenBuffer.length; i++){
                len <<= 8;
                len |= lenBuffer[i];
            }
            return len + byteLen + 1;
        }
    }

    rlpLen(): u32 {
        return this.buffer.length;
    }
    payloadLen(): u32 {
        return this.rlpLen() - this.payloadOffset();
    }

    private payloadOffset(): u32 {
        const byte0 = this.buffer[0];
        if (byte0 < RLPItem.STRING_SHORT_START)
            return 0;
        else if (byte0 < RLPItem.STRING_LONG_START || (byte0 >= RLPItem.LIST_SHORT_START && byte0 < RLPItem.LIST_LONG_START))
            return 1;
        else if (byte0 < RLPItem.LIST_SHORT_START)  // being explicit
            return byte0 - (RLPItem.STRING_LONG_START - 1) + 1;
        else
            return byte0 - (RLPItem.LIST_LONG_START - 1) + 1;
    }

    // @return indicator whether encoded payload is a list. negate this function call for isData.
    isList(): bool {
        if (this.rlpLen() == 0) return false;
        return this.buffer[0] >= RLPItem.LIST_SHORT_START;
    }

    isEmpty() : bool {
        if (this.rlpLen() != 1) return false;
        const byte0 = this.buffer[0];
        return byte0 == (this.isList() ? RLPItem.LIST_SHORT_START : RLPItem.STRING_SHORT_START);
    }

    /*
  * @param item RLP encoded list in bytes
  */
    toList() : RLPItem[] {
        _require(this.isList());
        let items : RLPItem[] = [];
        let payload:Uint8Array = this.buffer.subarray(this.payloadOffset());
        while(payload.length > 0) {
            const itemLength = RLPItem.itemLength(payload);
            items.push(new RLPItem(payload.subarray(0, itemLength)));
            payload = payload.subarray(itemLength);
        }
        return items;
    }
    toRlpBytes() : Uint8Array {
        return this.buffer;
    }
    toBoolean() : bool {
        _require(this.rlpLen() == 1);
        return this.buffer[0] > 0;
    }

    toBytes() : Uint8Array {
        _require(this.rlpLen() > 0);
        const offset = this.payloadOffset();
        const len = this.rlpLen() - offset; // data length
        return this.buffer.subarray(offset, offset + len);
    }

    toUint() : u256 {
        _require(this.rlpLen() > 0 && this.rlpLen() <= 33);
        const byte32 = new Uint8Array(32);
        const bytes = this.toBytes();
        byte32.set(bytes, byte32.length - bytes.length);
        return u256.fromUint8ArrayBE(byte32);
    }

    toUintStrict() : u256 {
        _require(this.rlpLen() == 33);
        return this.toUint();
    }

    toAddress() : u256 {
        // 1 byte for the length prefix
        _require(this.rlpLen() == 21);
        return this.toUint();
    }
    toString() : string {
        return this.toBytes().toString()
    }
}

}

'''
'''--- assembly/Solidity.ts ---
import { storage } from "near-sdk-as";
import { ContractPromiseBatch, u128, u256 } from "near-sdk-as";
import { context, util, math, env } from "near-sdk-as";

export class Address extends u256 {
    private accountName: string
    constructor(account: string) {
        super();
        this.accountName = account;
        if(account.length > 0) {
            const accountBytes = util.stringToBytes(this.account);
            const hashBytes = math.keccak256(accountBytes);
            this.set(u256.fromUint8ArrayBE(hashBytes));
        }
    }
    static fromU256(add: u256): Address {
        const ret: Address = new Address("");
        ret.set(add);
        return ret;
    }
    transfer(amount: u256): ContractPromiseBatch {
        return ContractPromiseBatch.create(this.account).transfer(amount.as<u128>());
    }
    get account(): string {
        return this.accountName;
    }
    get balance(): u128 {
        throw "wrong!";
        return context.accountBalance(); // how to get the contract's balance
    }
}

class Msg {
    get sender(): Address {
        return new Address(context.sender);
    }
    get value(): u256 {
        return u256.fromU128(context.attachedDeposit);
    }
}

class Block {
    get number(): u256 {
        return u256.fromU64(context.blockIndex);
    }
    get timestamp(): u256 {
        return u256.fromU64(context.blockTimestamp)
    }
}

interface AbiElem {
    encode(): Uint8Array;
    encodePacked(): Uint8Array;
}

// only support u256 u128
class AE<T> implements AbiElem {
    private value: T;
    constructor(v: T) {
        this.value = v;
    }
    encode(): Uint8Array {
        const en = this.encodePacked();
        if (en.length == 32) return en;
        const enbuf = new Uint8Array(32);
        enbuf.set(en, enbuf.length - en.length);
        return enbuf;
    }
    encodePacked(): Uint8Array {
        return this.value.toUint8Array().reverse();
    }
}

export class SolAbi {
    private elems: AbiElem[] = [];
    append<T>(val: T): this {
        this.elems.push(new AE<T>(val));
        return this;
    }
    encodePacked(): Uint8Array {
        const enbuf = new Uint8Array(this.elems.length * 32);
        let size = 0;
        // forEach and map don't work. maybe a bug of compiler.
        for (let i = 0; i < this.elems.length; i++) {
            const elem = this.elems[i];
            const en = elem.encodePacked();
            enbuf.set(en, size);
            size += en.length;
        }
        return enbuf.subarray(0, size);
    }
    encode(): Uint8Array {
        const enbuf = new Uint8Array(this.elems.length * 32);
        // forEach and map don't work. maybe a bug of compiler.
        for (let i = 0; i < this.elems.length; i++) {
            const elem = this.elems[i];
            const en = elem.encode();
            enbuf.set(en, i * 32);
        }
        return enbuf;
    }

}

const commonPrefix = "/16::";

// only support T=>u256
export class StorageMap<K, V> {
    private _elementPrefix: string;
    static _KEY_ELEMENT_SUFFIX: string = commonPrefix + "storage::";
    private zero: V
    constructor(prefix: string, defaultValue: V) {
        this._elementPrefix = prefix + StorageMap._KEY_ELEMENT_SUFFIX;
        this.zero = defaultValue;
    }

    /**
    * @returns An internal string key for a given key of type K.
    */
    private _key(key: K): string {
        //@ts-ignore: TODO: Add interface that forces all K types to have toString
        return this._elementPrefix + key.toString();
    }

    contains(key: K): bool {
        return storage.contains(this._key(key));
    }

    delete(key: K): void {
        storage.delete(this._key(key));
    }

    get(key: K): V {
        const _key = this._key(key);

        //return <T>storage.get(this.key, <T>this.zero);
        if (this.zero instanceof u256) {
                const value = storage.getBytes(_key);
                return value === null ? this.zero : u256.fromBytes(<Uint8Array>value);
        }
        const value = storage.getSome<V>(_key);
        return value === null ? this.zero : value;
    }
    set(key: K, value: V): void {
        const _key = this._key(key);
        if (value instanceof u256){
            storage.setBytes(_key, (<u256>value).toUint8Array());
        }
        else{
            storage.set(_key, value);
        }
    }
}

export class StorageVector<T> {
    static _KEY_ELEMENT_SUFFIX: string = commonPrefix + "storage::";
    static _KEY_LENGTH_SUFFIX: string = commonPrefix + "legnth::";
    private _elementPrefix: string;
    private _lengthKey: string;
    private _length: i32;
    private zero:T;

    /** @ignore */
    [key: number]: T;

    constructor(prefix: string, zeroValue:T) {
        this._lengthKey = prefix + StorageVector._KEY_LENGTH_SUFFIX;
        this._elementPrefix = prefix + StorageVector._KEY_ELEMENT_SUFFIX;
        this._length = -1;
        this.zero = zeroValue;
    }

    @inline
    private _key(index: i32): string {
        return this._elementPrefix + index.toString();
    }

    //@ts-ignore TS doesn't like property accessors with different levels of visibility
    get length(): i32 {
        if (this._length < 0) {
            this._length = storage.getPrimitive<i32>(this._lengthKey, 0);
        }
        return this._length;
    }

    /**
    * Internally sets the length of the vector
    * @internal
    */
    //@ts-ignore TS doesn't like property accessors with different levels of visibility
    private set length(value: i32) {
        this._length = value;
        storage.set<i32>(this._lengthKey, value);
    }

    containsIndex(index: i32): bool {
        return index >= 0 && index < this.length;
    }

    private __unchecked_get(index: i32): T {
        const _key = this._key(index);
        //return <T>storage.get(this.key, <T>this.zero);
        if (storage.hasKey(_key)) {
            if (this.zero instanceof u256) {
                const value = storage.getBytes(_key);
                return u256.fromBytes(<Uint8Array>value);
            }
            return storage.getSome<T>(_key);
        }
        return this.zero;
    }
    private __unchecked_set(index: i32, value: T): void {
        const _key = this._key(index);
        if (value instanceof u256)
            storage.setBytes(_key, (<u256>value).toUint8Array());
        else
            storage.set(_key, value);
    }

    @operator("[]")
    private __get(index: i32): T {
        assert(this.containsIndex(index), "Index out of range");
        return this.__unchecked_get(index);
    }

    @operator("[]=")
    private __set(index: i32, value: T): void {
        assert(this.containsIndex(index), "Index out of range");
        this.__unchecked_set(index, value);
    }
    push(element: T): i32 {
        let index = this.length;
        this.length = index + 1;
        this.__unchecked_set(index, element);
        return index;
    }
}

export class StorageValue<T> {
    static pos: u32 = 0
    private key: string
    private zero: T
    constructor(zeroValue: T) {
        this.key = commonPrefix + StorageValue.pos.toString();
        StorageValue.pos++;
        this.zero = zeroValue;
    }
    get value(): T {
        //return <T>storage.get(this.key, <T>this.zero);
        if (storage.hasKey(this.key)) {
            if (this.zero instanceof u256) {
                const value = storage.getBytes(this.key);
                return u256.fromBytes(<Uint8Array>value);
            }
            return storage.getSome<T>(this.key);
        }
        return this.zero;
    }
    set value(v: T) {
        if (v instanceof u256)
            storage.setBytes(this.key, (<u256>v).toUint8Array());
        else
            storage.set(this.key, v);
    }
}

function PANIC<T = string>(msg: T): void {
    let msg_encoded: Uint8Array;
    if (isString<T>()) {
        //@ts-ignore
        let message = msg.toString();
        msg_encoded = util.stringToBytes(message);
    } else {
        msg_encoded = encode<T>(msg);
    }
    env.panic_utf8(msg_encoded.byteLength, msg_encoded.dataStart);
}

function RETURN<T = string>(msg: T): void {
    let msg_encoded: Uint8Array;
    if (isString<T>()) {
        //@ts-ignore
        let message = msg.toString();
        msg_encoded = util.stringToBytes(message);
    } else {
        msg_encoded = encode<T>(msg);
    }
    env.value_return(msg_encoded.byteLength, msg_encoded.dataStart);
}

export const _require = (condition: bool, error: string = ''): void => { if (!condition) PANIC(error); }
export const _revert = (error: string): void => { PANIC(error); }
export const msg = new Msg();
export const block = new Block();
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- assembly/__tests__/context.json ---
{
    "current_account_id": "eve",
    "signer_account_id": "bob",
    "signer_account_pk": "15T",
    "predecessor_account_id": "carol",
    "input": "{\"name\":\"Alice\"}",
    "block_index": 0,
    "epoch_height": 43,
    "account_balance": "0",
    "account_locked_balance": "0",
    "attached_deposit": "0",
    "prepaid_gas": 100000000000000,
    "random_seed": "15T",
    "free_of_charge": false,
    "storage_usage": 0,
    "output_data_receivers": [],
    "block_timestamp": 1,
    "is_view": false
}

'''
'''--- assembly/__tests__/main.spec.ts ---
import {
    getCounter,
    resetCounter,
    incrementCounter,
    decrementCounter
} from '../main';

import { context, storage, VM } from 'near-sdk-as';

describe("Counter ", () => {
    it("should increment by one", () => {
        incrementCounter(1);
        expect(getCounter()).toBe(1, "counter should be one after a single increment.");
    });

    it("getCounter is the same as reading from storage", () => {
        expect(storage.getPrimitive<i32>("counter", 0)).toBe(getCounter(), "storage.getPrimitive<i32>(\"counter\", 0) = getCounter()");
    });

    it("should decrement by one", () => {
        incrementCounter(1);
        decrementCounter(1);
        expect(getCounter()).toBe(0, "counter should be zero after a single decrement.");
    });

    it("should be resetable", () => {
        incrementCounter(1);
        incrementCounter(1);
        resetCounter(); // reset to zero
        expect(getCounter()).toBe(0, "counter should be zero after it is reset."); 
    });
    
    it("should increment multiple times and decrement back to zero", () => {
        incrementCounter(1);
        expect(getCounter()).toBe(1, "0 + 1 = 1");
        incrementCounter(3);
        expect(getCounter()).toBe(4, "1 + 3 = 4");
        decrementCounter(4);
        expect(getCounter()).toBe(0, "4 - 4 = 0");
    });

    it("should be eve's account", () => {
        expect(context.contractName).toBe("eve");
    });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/main.ts ---
import { context, env, logging } from "near-sdk-as";
import { u128, u256} from "near-sdk-as";
import { StorageValue, _require, msg, block, SolAbi, Address , StorageMap, StorageVector } from './Solidity';
import { RlpReader } from "./RlpReader";
import { ProvethVerifier } from "./MPT";
import { util } from "near-sdk-as";

function ReturnSuccessValue(data:Uint8Array) : void {
  env.value_return(data.byteLength, data.dataStart);
  //env.log_utf8(data.byteLength, data.dataStart);
}

const difficult = new StorageValue<u256>(u256.Max);
const bulletPrice = new StorageValue<u256>(u256.Zero);
const attackIndex = new StorageValue<u256>(u256.Zero);
const otherDifficult = new StorageValue<u256>(u256.Max);
const attackSeedHistory = new StorageVector<u256>("___attackSeedHistory", u256.Zero); // AttackInfo[]
const attackAddressHistory = new StorageVector<u256>("___attackAddressHistory", u256.Zero); // AttackInfo[]
const spentReceipt = new StorageMap<u256,bool>("__spentReceipt", false);

// ERC20 tokens code
const balances = new StorageMap<u256, u256>("__bals:", u256.Zero);
const approves = new StorageMap<u256, u256>("_approves:", u256.Zero);

const TOTAL_SUPPLY = new StorageValue<u256>(u256.Zero);;

function _mint(to:u256, amount:u256):void {
  TOTAL_SUPPLY.value += amount;
  logging.log("mint:" + amount.toString());
  const toAddress = Address.fromU256(to);
  const toAccount =  getBalance(toAddress);
  const total = toAccount + amount;
  setBalance(toAddress, total);
}

function _burn(amount:u256):void{
  TOTAL_SUPPLY.value = u256sub(TOTAL_SUPPLY.value, amount);
  //TOTAL_SUPPLY.value -= amount;
  const account = getBalance(msg.sender);
  setBalance(msg.sender, u256sub(account, amount));
}

export function burn(amount:u64):void {
  const account = getBalance(msg.sender);
  const total = TOTAL_SUPPLY.value;
  _burn(u256.fromU64(amount));
  const contractAddress = new Address(context.contractName);
  const rewards:u128 = contractAddress.balance * u128.from(amount) / total.toU128();
  msg.sender.transfer(rewards.toU256());
}

export function totalSupply(): string {
  return TOTAL_SUPPLY.value.toString();
}

export function balanceOf(tokenOwner: string): u64 {
  const address = new Address(tokenOwner);
  return getBalance(address).toU64();
}

export function allowance(tokenOwner: string, spender: string): u64 {
  const ownerAddress = new Address(tokenOwner);
  const spenderAddress = new Address(spender);
  return getAllowance(ownerAddress, spenderAddress).toU64();
}

export function transfer(to: string, tokens64: u64): boolean {
  const tokens = u256.fromU64(tokens64);
  const toAddress = new Address(to);
  logging.log("transfer: " + msg.sender.account + " to: " + to + " tokens: " + tokens64.toString());
  _transfer(msg.sender, toAddress, tokens);
  return true;
}

export function approve(spender: string, tokens: u64): boolean {
  const spenderAddress = new Address(spender);
  logging.log("approve: " + spender + " tokens: " + tokens.toString());
  setAllowance(msg.sender, spenderAddress, u256.fromU64(tokens));
  return true;
}

export function transferFrom(from: string, to: string, tokens64: u64): boolean {
  logging.log("transferFrom: " + from + " to: " + to + " tokens: " + tokens64.toString() + " by: " + msg.sender.account);
  const tokens = u256.fromU64(tokens64);
  const fromAddress = new Address(from);
  const toAddress = new Address(to);
  const fromAmount = getBalance(fromAddress);
  assert(fromAmount >= tokens, "not enough tokens on account");
  const approvedAmount = getAllowance(fromAddress, msg.sender);
  assert(tokens <= approvedAmount, "not enough tokens approved to transfer");
  const toAccount = getBalance(toAddress);
  assert(getBalance(toAddress) <= toAccount + tokens,"overflow at the receiver side");
  setBalance(fromAddress, u256sub(fromAmount, tokens));
  setBalance(toAddress, getBalance(toAddress) + tokens); // must read again: if from == to
  setAllowance(fromAddress, msg.sender, u256sub(approvedAmount, tokens));
  return true;
}

function _transfer(from: Address, to:Address, amount:u256):void {
  const fromAmount = getBalance(from);
  assert(fromAmount >= amount, "not enough tokens on account");
  assert(getBalance(to) <= getBalance(to) + amount,"overflow at the receiver side");
  setBalance(msg.sender, u256sub(fromAmount, amount));
  setBalance(to, getBalance(to) + amount); // must read again: if from == to
}

function getBalance(owner: Address): u256 {
  return balances.get(owner);
}

function setBalance(owner: Address, balance:u256):void {
  balances.set(<u256>owner, balance);
}

function getAllowance(tokenOwner: Address, spender: Address): u256 {
  const key = tokenOwner.account + ":" + spender.account;
  const address = new Address(key);
  return approves.get(address);
}
function setAllowance(tokenOwner: Address, spender: Address, amount:u256): void {
  const key = tokenOwner.account + ":" + spender.account;
  const address = new Address(key);
  approves.set(address, amount);
}

// bridage code

export function init():void{
  logging.log(difficult.value.toUint8Array(true))
  TOTAL_SUPPLY.value = u256.Zero;
  difficult.value = u256.Max;
  bulletPrice.value = u256.Zero;
  attackIndex.value = u256.Zero;
  otherDifficult.value = u256.Max;
  logging.log(difficult.value.toUint8Array(true))
}

function str2hex(str:string):Uint8Array {
  str = str.toUpperCase();
  if(str.startsWith('0X'))
    str = str.slice(2);
  const ch0:u8 = 0x30;   // '0'
  const chA:u8 = 0x41;  // 'A'
  const ret = new Uint8Array(str.length/2);
  for(let i = 0; i < str.length; i+=2){
    const ch:u8 = <u8>str.charCodeAt(i);
    let n:u8;
    if(ch >= chA) n = ch - (chA - <u8>0xa);
    else n = ch-ch0;
    const ch1 = <u8>str.charCodeAt(i+1);
    let n1:u8;
    if(ch1 >= chA) n1 = ch1 - (chA - <u8>0xa);
    else n1 = ch1-ch0;
    ret[i/2] = (n<<4)|n1;
  }
  return ret;
}

function str2u256(str:string):u256 {
  const hexStr = str2hex(str);
  const bytes32 = new Uint8Array(32);
  bytes32.set(hexStr, bytes32.length - hexStr.length);
  return u256.fromUint8ArrayBE(bytes32);
}

//const attackEvent = util.stringToBytes()
// 0x0xBC2D976E4A9331961e4478ae2b3d0BaD0C47393e
const prover = new ProvethVerifier();
const otherSideBridge:u256 = str2u256('0x2796cAaDC53f5d907332a2573F20DF23eA57C687');
const attackSig = prover.keccak256(util.stringToBytes('etherAttack(address,uint256,uint256,uint256,bytes32)'));

//const attackSig = u256.Zero;
function receiptVerify(rlpdata : Uint8Array) : u32 {
  let ret = 0;
  const stacks = new RlpReader.RLPItem(rlpdata);
  const receipt = stacks.toList();
  const PostStateOrStatus = receipt[0].toUint();
  _require(PostStateOrStatus == u256.One, "revert receipt");
  //uint CumulativeGasUsed = receipt[1].toUint();
  //bytes memory Bloom = receipt[2].toBytes();
  
  const Logs = receipt[3].toList();
  for(let i = 0; i < Logs.length; i++) {
      const rlpLog = Logs[i].toList();
      const Address = rlpLog[0].toAddress();
      if(Address != otherSideBridge) continue;
      ret++;
      const Topics = rlpLog[1].toList(); // TODO: if is lock event
      const topics : u256[] = [];
      for(let j = 0; j < Topics.length; j++) {
          topics.push(Topics[j].toUint());
      }
      const Data = rlpLog[2].toBytes();
      if(topics[0] == attackSig) {
        const _difficult = u256.fromUint8ArrayBE(Data.subarray(0, 32));
        const _timestamp = u256.fromUint8ArrayBE(Data.subarray(32, 64));
        const beneficiary = u256.fromUint8ArrayBE(Data.subarray(64, 96));
        onAttackEvent(topics[1], topics[2], _difficult, _timestamp, beneficiary);
      }
  }
  return ret; 
}

function getBlockHash(blockNo: u256): u256 {
  //return keccak256(abi.encodePacked(difficult, otherDifficult, msg.sender, address(this), blockNo, attackIndex, attackseedHistory.length, bulletPrice));
  //return blockhash(blockNo);
  return blockNo;
}

function thisSideEvent(): void {
  difficult.value = u256sub(difficult.value, u256.One)
  //difficult.value -= u256.One;
}

// there are many bugs in u256……
function u256sub(a:u256, b:u256):u256{
  const loa:u128 = a.toU128();
  const hia:u128 = (a>>128).toU128();
  const lob:u128 = b.toU128();
  const hib:u128 = (b>>128).toU128();
  let hi:u128 = hia - hib;
  let lo:u128;
  if(loa > lob){
    lo = loa - lob;
  }else{
    lo = u128.Max - (lob - loa) + u128.One;
    hi -= u128.One;
  }
  return new u256(lo.lo, lo.hi, hi.lo, hi.hi)
}
function otherSideEvent(): void {
  difficult.value = u256sub(difficult.value, u256.fromU32(10));
  //difficult.value -= u256.fromU32(10);
}

export function attack(beneficiary:Uint8Array): void {
  deal();
  thisSideEvent();
  const bullet = msg.value < bulletPrice.value ? 0 : 1; //msg.value / bulletPrice.value;
  //_require(bullet > 0 && bullet < 10, "bullet need between (0,10)");
  const totalSpend = bulletPrice.value; // u256.fromU32(bullet) * bulletPrice.value;
  if (totalSpend < msg.value) msg.sender.transfer(u256sub(msg.value, totalSpend));
  const abi = new SolAbi().append(attackSig)
     .append(<u256>msg.sender)
     .append(u256.fromU32(bullet))
     .append(difficult.value)
     .append(block.timestamp)
     .append(u256.fromUint8ArrayBE(beneficiary));
  ReturnSuccessValue(abi.encode());
}

export function ExecProof(blockHash: Uint8Array, roothash:Uint8Array, mptkey:Uint8Array, proof:Uint8Array): void {
  deal();
  const receiptRootHashNum = u256.fromUint8ArrayBE(roothash);
  const blockHashNum = u256.fromUint8ArrayBE(blockHash);
  const mptKeyNum = prover.keccak256(mptkey);
  const abi = new SolAbi().append(blockHashNum)
                          .append(receiptRootHashNum)
                          .append(mptKeyNum);
  const spentKey = prover.keccak256(abi.encodePacked());
  _require(!spentReceipt.contains(spentKey), "double spending!");
  spentReceipt.set(spentKey, true);
  const rlpdata = prover.MPTProof(receiptRootHashNum, mptkey, proof);
  const events = receiptVerify(rlpdata);
  _require(events > 0, "no valid event");
}

function onAttackEvent(attacker: u256, bullet: u256, _difficult: u256, timestamp: u256, beneficiary: u256): void {
  otherSideEvent();
  _require(otherDifficult.value != _difficult, "difficult can't equeal");
  if (otherDifficult.value > _difficult) otherDifficult.value = _difficult;
  _require(timestamp < block.timestamp && block.timestamp < timestamp + u256.fromU32(24 * 3600), "attack must be within a day");

  const abi = new SolAbi().append(attacker).append(bullet).append(otherDifficult.value).append(timestamp)

  const attackSeed = prover.keccak256(abi.encode());
  const sotreSeed = attackSeed&(~u256.fromU32(u32.MAX_VALUE))|block.number;
  attackSeedHistory.push(sotreSeed);
  attackAddressHistory.push(beneficiary);
  logging.log("onAttackEvent:" + attackIndex.value.toU32().toString() + "/" + attackSeedHistory.length.toString());
}

export function deal(): void {
  const index = attackIndex.value.toU32();
  if(index >= <u32>attackSeedHistory.length) return;
  
  const attackSeed = attackSeedHistory[index];
  const beneficiary = attackAddressHistory[index];
  const attackBlockNo = attackSeed & u256.fromU32(u32.MAX_VALUE);
  if(attackBlockNo == block.number) return;
  const attackBlockHash = getBlockHash(attackBlockNo);
  const dealParentHash = getBlockHash(u256sub(block.number, u256.One));

  const defenSeed = prover.keccak256(new SolAbi().append(difficult.value).append(block.number).append(dealParentHash).encode()); // uint256(keccak256(abi.encodePacked(difficult, block.number, dealParentHash)));
  const finalAttackSeed = prover.keccak256(new SolAbi().append(attackSeed).append(attackBlockNo).append(attackBlockHash).append(defenSeed).encode());

  const attackValue = otherDifficult.value + finalAttackSeed;
  const defenValue = difficult.value + defenSeed;
  if (attackValue < defenValue) {
    _mint(beneficiary, u256.fromU32(10000000));
  }else{
    _mint(beneficiary, u256.fromU32(1000000));
  }
  if (difficult.value > finalAttackSeed) difficult.value = finalAttackSeed;
  attackIndex.value += u256.One;
  logging.log("deal end:" + attackIndex.value.toU32().toString() + "/" + attackSeedHistory.length.toString());
}

'''
'''--- assembly/model.ts ---
// @nearfile
// TODO: Define data model here
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts",
    "../node_modules/**/*/as_types.d.ts"
  ]
}

'''
'''--- neardev/shared-test-staging/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- neardev/shared-test/test.near.json ---
{"account_id":"test.near","private_key":"ed25519:2wyRcSwSuHtRVmkMCGjPwnzZmQLeXLzLLyED1NDMt4BjnKgQL6tF85yBx6Jr26D2dUNeC716RBoTxntVHsegogYw"}

'''
'''--- package.json ---
{
  "name": "counter",
  "description": "Counter Smart Contract\n\nThis project contains implementation of counter backed by blockchain.\n\n[AssemblyScript](https://github.com/AssemblyScript/assemblyscript) compiles strictly typed TypeScript to WebAssembly using Binaryen. See the [AssemblyScript wiki](https://github.com/AssemblyScript/assemblyscript/wiki) for further instructions and documentation.",
  "version": "0.0.1",
  "scripts": {
    "build": "node asconfig.js",
    "deploy:contract": "near deploy",
    "deploy": "yarn build && yarn deploy:contract && yarn deploy:pages",
    "deploy:dev": "yarn build && near dev-deploy",
    "prestart": "yarn build && yarn deploy:contract",
    "dev": "yarn deploy:dev && yarn watch",
    "watch": "nodemon --watch assembly -e ts --exec \"env-cmd -f ./neardev/dev-account.env parcel src/index.html\"",
    "start": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test": "asp && yarn jest",
    "test:ci": "env NODE_ENV=ci yarn test",
    "asp": "asp --verbose",
    "jest": "yarn build && jest test"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "jest": "~26.4.2",
    "jest-environment-node": "~26.3.0",
    "near-sdk-as": "^0.4.2",
    "near-cli": "^1.0.3",
    "nodemon": "~2.0.4",
    "parcel-bundler": "~1.12.4"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/assembly/",
      "<rootDir>/node_modules/"
    ]
  },
  "dependencies": {
    "near-api-js": "^0.29.1",
    "regenerator-runtime": "^0.13.7"
  }
}

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'counter'; /* TODO: fill this in! */

function getConfig (env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'default',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Arvo&display=swap" rel="stylesheet">
  <style>
      h1 {
        margin-top: 3em;
        margin-bottom: 1em;
      }
      .scene {
        height: 350px;
      }
      .face {
        margin: auto;
        width: 66%;
        height: 72%;
        background-color: #fffaf2;
      }
      .number {
        text-align: center;
        margin:auto;
        width: 66%;
        height: 28%;
        background-color: #ffd9f8;
        border-top: 5px dotted #82174d;
        font-size:1.5rem;
      }
      .eyes-row {
        display: flex;
        justify-content: space-around;
        margin-top: 24%;
        padding: 0 8px;
      }
      .closed {
        width: 22px;
        height: 13px;
        border-top-left-radius: 100px;
        border-top-right-radius: 100px;
        border-left: 2px solid #ffa4b1;
        border-right: 2px solid #ffa4b1;
        border-top: 2px solid #ffa4b1;
        margin-bottom: 12px;
      }
      .eye {
        width: 26px;
        height: 26px;
        border-radius: 100px;
        background-color: #ffa4b1;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 1px;
      }
      .eye .pupil {
        position: relative;
        width: 18px;
        height: 18px;
        border-radius: 100px;
        background-color: #82174d;
      }
      .eye .pupil:before {
        content: "";
        width: 6px;
        height: 6px;
        position: absolute;
        background-color: #fff;
        top: 4px;
        left: 3px;
        border-radius: 100px;
      }
      .eye .pupil:after {
        content: "";
        width: 3px;
        height: 3px;
        position: absolute;
        background-color: #fff;
        top: 9px;
        left: 12px;
        border-radius: 100px;
      }
      .mouth-row {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        align-items: center;
      }
      .mouth-row .mouth {
        margin-top: 3%;
      }
      .mouth-row .tongue {
        position:absolute;
        width: 10px;
        height: 10px;
        background-color: #FF585D;
        border-radius: 50% 50% 30%;
        margin: 5px 0;
      }
      .mouth-row .mouth.smile {
        height: 16px;
        width: 32px;
        border-bottom-left-radius: 32px;
        border-bottom-right-radius: 32px;
        background-color: #82174d;
        top: 120px;
      }
      .mouth-row .mouth.cry {
        height: 16px;
        width: 32px;
        border-top-left-radius: 32px;
        border-top-right-radius: 32px;
        background-color: #82174d;
        top: 120px;
      }
      .mouth-row .mouth:before {
        content: "";
        left: 43px;
        margin-top: 1%;
        border-radius: 100%;
        height: 5%;
        width: 11.5%;
        background-color: #f56f79;
        position: absolute;
      }
      .mouth-row .mouth:after {
        content: "";
        left: 106px;
        margin-top: 1%;
        border-radius: 100%;
        height: 5%;
        width: 11.5%;
        background-color: #f56f79;
        position: absolute;
      }
      .gameboy {
        position: relative;
        width: 400px;
        margin: auto;
      }
      .body-shape {
        position: absolute;
        height: 300px;
        width: 205px;
        border-radius: 15px;
      }
      .body-shape .shadow {
        height: 290px;
      }
      .body-shape .screen {
        margin: 20px;
        position: relative;
        width: 168px;
        height: 134px;
        background-color: #82174d;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        justify-items: center;
      }
      .body-shape .dot {
        content: "";
        width: 8px;
        height: 8px;
        position: absolute;
        background-color: #ffa4b1;
        top: 40px;
        left: 10px;
        border-radius: 100px;
      }
      .body-shape .on {
        background-color: #F0EC74;
      }
      .body-shape .buttons {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        width: 100%;
      }
      .body-shape .buttons .row {
        display: flex;
      }
      .body-shape .buttons .selects {
        margin-top: 10px;
        padding-left: 140px;
      }
      .body-shape .buttons .arrows {
        position: relative;
        height: 40px;
        width: 40px;
        border-radius: 100px;
        background-color: #ffa4b1;
        margin-left: 30px;
        padding: 0;
        cursor: grab;
      }
      .body-shape .buttons .arrows:disabled {
        opacity: 0.8;
        background-color: #d18892;
      }
      .body-shape .buttons .arrows .updown {
        position: relative;
        height: 35px;
        width: 10px;
        background-color: #82174d;
        border-radius: 2px;
        top: -8px;
        left: 14px;
      }
      .body-shape .buttons .arrows .left {
        position: relative;
        width: 35px;
        height: 10px;
        background-color: #82174d;
        border-radius: 2px;
        top: 14px;
        left: 2px;
      }
      .body-shape .buttons .arrows .right {
        position: relative;
        width: 35px;
        height: 10px;
        background-color: #82174d;
        border-radius: 2px;
        left: 2px;
      }
      .body-shape .buttons .ab {
        width: 64px;
        height: 64px;
        background-color: #ffa4b1;
        border-radius: 10px;
        transform: rotate(45deg);
        font-size: 0.6rem;
        text-align: center;
      }
      .body-shape .buttons .ab .r {
        width: 24px;
        height: 24px;
        border-radius: 100%;
        background-color: #82174d;
        position: absolute;
        transform: rotate(-45deg);
        padding: 5px;
        color: #ffa4b1;
        cursor:pointer;
        box-shadow:-1px 0 1px #4B4F54;
      }
      .body-shape .buttons .ab .r:hover {
        opacity: 0.8;
      }
      .body-shape .buttons .ab .r:active {
        background-color: #F0EC74;
        opacity: 1;
      }
      .body-shape .buttons .ab .a {
        top: 4px;
        left: 4px;
      }
      .body-shape .buttons .ab .b {
        top: 4px;
        left: 36px;
      }
      .body-shape .buttons .ab .c {
        top: 36px;
        left: 4px;
      }
      .body-shape .buttons .ab .d {
        top: 36px;
        left: 36px;
      }
      .shadow {
        background-color: #888ad0;
        z-index: 0;
        left: -17px;
        top: 26px;
      }
      .side {
        background-color: #82174d;
        z-index: 1;
      }
      .front {
        background-color: #f56f79;
        left: 26px;
        z-index: 2;
      }
      .loader,
      .loader:before,
      .loader:after {
        background: #f56f79;
        -webkit-animation: load1 1s infinite ease-in-out;
        animation: load1 1s infinite ease-in-out;
        width: 0.4rem;
        height: 4em;
      }
      .loader {
        color: #f56f79;
        margin: 2px auto;
        font-size: 0.2rem;
        -webkit-transform: translateZ(0);
        -ms-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-animation-delay: -0.16s;
        animation-delay: -0.16s;
      }
      .loader:before,
      .loader:after {
        position: absolute;
        top: 0;
        content: '';
      }
      .loader:before {
        left: -1.5em;
        -webkit-animation-delay: -0.32s;
        animation-delay: -0.32s;
      }
      .loader:after {
        left: 1.5em;
      }
      @-webkit-keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          height: 2em;
        }
        40% {
          box-shadow: 0 -2em;
          height: 3em;
        }
      }
      @keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          height: 2em;
        }
        40% {
          box-shadow: 0 -2em;
          height: 3em;
        }
      }
    </style>
</head>
<body style="background: #eef2fe; font-family: 'Arvo', serif;">
  <div class="container">
    <h1>This is just a counter, but this time on blockchain!</h1>

    <div class="sign-in" style="display: none;">
      <p>You'll need to sign in to call contract methods:</p>
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign In</button>
    </div>

    <div class="after-sign-in" style="display: none;">
        <div class="scene">
          <div class="gameboy">
            <div class="body-shape shadow"></div>
            <div class="body-shape side"></div>
            <div class="body-shape front">
              <div class="screen">
                <div class="dot"></div>
                <div class="face">
                  <div class="eyes-row">
                    <div id="left" class="closed">
                      <div class="pupil"></div>
                    </div>
                    <div id="right" class="closed">
                      <div class="pupil"></div>
                    </div>
                  </div>
                  <div class="mouth-row">
                    <div class="mouth smile"></div>
                    <div class="tongue"></div>
                  </div>
                </div>
                <div id="show" class="number"></div>
              </div>
              <div class="buttons">
                <div class="row">
                  <button id="plus" class="arrows">
                    <div class="left">
                    </div>
                    <div class="updown">
                    </div>
                  </button>
                  <button id="minus" class="arrows">
                    <div class="right">
                    </div>
                  </button>
                </div>
                <div class="selects row">
                  <div class="ab">
                    <div id="a" class="r a">RS</div>
                    <div id="b" class="r b">LE</div>
                    <div id="c" class="r c">RE</div>
                    <div id="d" class="r d">L</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div class="sign-out">
          <button class="btn btn-primary" style="background-color: #0072CE;">Sign Out</button>
        </div>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>
  <script src="./main.js"></script>
</body>
</html>

'''
'''--- src/loader.html ---
<head>
    <script>
        window.paceOptions = {
            elements: {
                selectors: ['.never-appears']
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/pace.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/themes/black/pace-theme-center-radar.css" rel="stylesheet" />
</head>
'''
'''--- src/main.js ---
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";
import getConfig from "./config";

let nearConfig = getConfig(process.env.NODE_ENV || "development");
window.nearConfig = nearConfig;

// Connects to NEAR and provides `near`, `walletAccount` and `contract` objects in `window` scope
async function connect() {
  // Initializing connection to the NEAR node.
  window.near = await nearAPI.connect(Object.assign(nearConfig, { deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() }}));

  // Needed to access wallet login
  window.walletAccount = new nearAPI.WalletConnection(window.near);

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getCounter'],
    changeMethods: ['incrementCounter', 'decrementCounter', 'resetCounter'],
    sender: window.walletAccount.getAccountId()
  });
}

function updateUI() {
  if (!window.walletAccount.getAccountId()) {
    Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;');
  } else {
    Array.from(document.querySelectorAll('.after-sign-in')).map(it => it.style = 'display: block;');
    contract.getCounter().then(count => {
      document.querySelector('#show').classList.replace('loader','number');
      document.querySelector('#show').innerText = count == undefined ? 'calculating...' : count;
      document.querySelector('#left').classList.toggle('eye');
      document.querySelectorAll('button').forEach(button => button.disabled = false);
      if (count >= 0) {
        document.querySelector('.mouth').classList.replace('cry','smile');
      }else {
        document.querySelector('.mouth').classList.replace('smile','cry');
      }
      if (count > 20 || count < -20) {
        document.querySelector('.tongue').style.display = 'block';
      }else {
        document.querySelector('.tongue').style.display = 'none';
      }
    });
  }
}

// counter method
let value = 1;

document.querySelector('#plus').addEventListener('click', ()=>{
  document.querySelectorAll('button').forEach(button => button.disabled = true);
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
  contract.incrementCounter({value}).then(updateUI);
});
document.querySelector('#minus').addEventListener('click', ()=>{
  document.querySelectorAll('button').forEach(button => button.disabled = true);
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
  contract.decrementCounter({value}).then(updateUI);
});
document.querySelector('#a').addEventListener('click', ()=>{
  document.querySelectorAll('button').forEach(button => button.disabled = true);
  document.querySelector('#show').classList.replace('number','loader');
  document.querySelector('#show').innerText = '';
  contract.resetCounter().then(updateUI);
});
document.querySelector('#c').addEventListener('click', ()=>{
  document.querySelector('#left').classList.toggle('eye');
});
document.querySelector('#b').addEventListener('click', ()=>{
  document.querySelector('#right').classList.toggle('eye');
});
document.querySelector('#d').addEventListener('click', ()=>{
  document.querySelector('.dot').classList.toggle('on');
  if (document.querySelector('.dot').classList.contains('on')) {
    value = 10;
  }else {
    value = 1;
  }
});
// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in .btn').addEventListener('click', () => {
  walletAccount.requestSignIn(nearConfig.contractName, 'NEAR Counter Example');
});

document.querySelector('.sign-out .btn').addEventListener('click', () => {
  walletAccount.signOut();
  // TODO: Move redirect to .signOut() ^^^
  window.location.replace(window.location.origin + window.location.pathname);
});

window.nearInitPromise = connect()
  .then(updateUI)
  .catch(console.error);

'''
'''--- src/test-setup.js ---
(function () {
  let params = new URL(window.location).searchParams;
  let keyStore = new nearlib.keyStores.InMemoryKeyStore();
  nearConfig.contractName = params.get('contractName') || nearConfig.contractName;
  keyStore.setKey(nearConfig.networkId, nearConfig.contractName, nearlib.KeyPair.fromString(params.get('privateKey')));
  nearConfig.deps = { keyStore };
})();

'''
'''--- src/test.js ---
describe('Token', function () {
  let near;
  let contract;
  let accountId;

  jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;

  beforeAll(async function () {
    console.log('nearConfig', nearConfig);
    near = await nearlib.connect(nearConfig);
    accountId = nearConfig.contractName;
    contract = await near.loadContract(nearConfig.contractName, {
      viewMethods: ['getCounter'],
      changeMethods: ['incrementCounter', 'decrementCounter'],
      sender: accountId
    });
  });

  describe('counter', function () {
    it('can be incremented', async function () {
      const startCounter = await contract.getCounter();
      await contract.incrementCounter({value: 1});
      const endCounter = await contract.getCounter();
      expect(endCounter).toEqual(startCounter + 1);
    });
    it('can be decremented', async function () {
      await contract.incrementCounter({value: 1});
      const startCounter = await contract.getCounter();
      await contract.decrementCounter({value: 1});
      const endCounter = await contract.getCounter();
      expect(endCounter).toEqual(startCounter - 1);
    });
  });
});
'''