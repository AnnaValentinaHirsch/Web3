*GitHub Repository "near/zkevm-rom"*

'''--- .eslintrc.js ---
module.exports = {
    plugins: [
        'mocha',
    ],
    env: {
        node: true,
        mocha: true,
    },
    extends: 'airbnb-base',
    rules: {
        indent: ['error', 4],
        'mocha/no-exclusive-tests': 'error',
        'max-len': ['error', {
            code: 140, comments: 200, ignoreStrings: true, ignoreTemplateLiterals: true,
        }],
        'no-unused-vars': [2, { varsIgnorePattern: 'export^' }],
        'no-return-assign': [0],
        'no-underscore-dangle': [0],
        'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
        'func-names': [0],
        'class-methods-use-this': [0],
        'no-bitwise': [0],
        'no-param-reassign': 'off',
        'no-console': 'off',
        'import/prefer-default-export': [0],
        'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],
        'no-await-in-loop': 'off',
        'newline-before-return': 'error',
    },
    parserOptions: {
        ecmaVersion: 2020,
    },
};

'''
'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .github/ISSUE_TEMPLATE/bug.yml ---
name: Bug Report
description: File a bug report
title: "[Bug]: "
labels: ["bug"]
assignees: [krlosMata, laisolizq, invocamanman, ignasirv]
body:
  - type: markdown
    attributes:
      value: |
        Fill in all necessary information to report a bug
  - type: input
    id: version
    attributes:
      label: Version
      description: What version are you using ?
      placeholder: 'ex: v1.0.0'
    validations:
      required: true
  - type: textarea
    id: description
    attributes:
      label: Description
      description: Explain the bug found and the expected result
    validations:
      required: true
  - type: textarea
    id: steps
    attributes:
      label: Steps to reproduce
      description: Please share detailed information about ho to reproduce the bug
    validations:
        required: true
  - type: textarea
    id: logs
    attributes:
      label: Relevant log
      description: Please copy and paste any relevant log output
      render: shell
'''
'''--- .github/ISSUE_TEMPLATE/feature.yml ---
name: Feature Request
description: File a bug report
title: "[Feature]: "
labels: ["feature"]
assignees:
  - krlosMata
body:
  - type: markdown
    attributes:
      value: |
        Fill in all necessary information to request a feature
  - type: input
    id: version
    attributes:
      label: Version
      description: What version the features should be added ?
      placeholder: 'ex: v1.0.0'
    validations:
      required: true
  - type: textarea
    id: description
    attributes:
      label: Description
      description: Explain the feature
    validations:
      required: true
'''
'''--- .github/ISSUE_TEMPLATE/question.yml ---
name: Question
description: Submit a question
title: "[Question]: "
labels: ["question"]
assignees:
  - krlosMata
body:
  - type: markdown
    attributes:
      value: |
        Fill in all necessary information to submit a question
  - type: input
    id: version
    attributes:
      label: Version
      description: What version the question is refering to ?
      placeholder: 'ex: v1.0.0'
    validations:
      required: true
  - type: textarea
    id: question
    attributes:
      label: Description
      description: Explain the question
    validations:
      required: true
'''
'''--- README.md ---
# zkevm-rom
This repository contains the zkasm source code of the polygon-hermez zkevm

## Usage
````
npm i
npm run build
````
The resulting `json` file will be created in the `./build` directory

### Advanced options
- `-i ${input zkasm file}`: specify input source `zkasm` path
  - default value: `main/main.zkasm`
- `-o ${destination rom file}`: specify output path for the resulting `json`
  - default value: `build/rom.json`
- `-s ${steps}`: specify steps as $2^{steps}$
  - default value: current steps in `constants.zkasm`

Example:
```
npm run build -- -i ${path} -o ${path} -s ${steps}
```

'''
'''--- counters/README.md ---
## Counters testing tool  

The purpose of this tool is to detect counters altertions in zkrom code.  
A unit test is created for each function and opcode of the zkEVM. The structure of the test is the following:  
`````
INCLUDE "../initIncludes.zkasm" // Include the files imported at the beginning of the test

start:
    1000000 => GAS

operation:
    2       :MSTORE(SP++)
    2       :MSTORE(SP++)
            :JMP(opADD)
// Assert counters. Check for each function, the exact number of each counter is matched
checkCounters:
%OPADD_STEP - STEP:JMPN(failedCounters)
%OPADD_CNT_BINARY - CNT_BINARY :JMPNZ(failedCounters)
%OPADD_CNT_ARITH - CNT_ARITH :JMPNZ(failedCounters)
%OPADD_CNT_KECCAK_F - CNT_KECCAK_F :JMPNZ(failedCounters)
%OPADD_CNT_MEM_ALIGN - CNT_MEM_ALIGN :JMPNZ(failedCounters)
%OPADD_CNT_PADDING_PG - CNT_PADDING_PG :JMPNZ(failedCounters)
%OPADD_CNT_POSEIDON_G - CNT_POSEIDON_G :JMPNZ(failedCounters)
// Finalize execution
0 => A,B,C,D,E,CTX, SP, PC, GAS,  SR, HASHPOS, RR ; Set all registers to 0
finalizeExecution:
                                                                        :JMP(finalWait)
readCode:
txType:
    :JMP(checkCounters)
failedCounters: // Force failed assert
2 => A
1       :ASSERT
INCLUDE "../endIncludes.zkasm" // Include the files imported at the end of the test
`````

Run all tests:
`````
node counters/counters-executor.js
`````  
Limitations:
- Not all the tests are implemented yet, just the most complex ones
- For some test (the simplest ones), the counters it should spend are stored in `countersConstants.zkasm` file. For tests with a lot of utils calls or a lot of complexity, the values of the counters are hardcoded in the test.
- The tests always try to cover as much coverage as posible and always with the worst case counters scenario but this approach gets a bit tricky for complex opcodes as they have different contexts and behaviours.
- The objective is to keep adding tests with already not implemented functions but also adding tests for already implemented opcodes but with different scenarios (Example: calldatacopy from a call or from a create2)
'''
'''--- counters/counters-executor.js ---
const path = require('path');
const fs = require('fs');
const smMain = require('@0xpolygonhermez/zkevm-proverjs/src/sm/sm_main/sm_main');
const fileCachePil = path.join(__dirname, '../node_modules/@0xpolygonhermez/zkevm-proverjs/cache-main-pil.json');
const empty_input = require('@0xpolygonhermez/zkevm-proverjs/test/inputs/empty_input.json')
const buildPoseidon = require('@0xpolygonhermez/zkevm-commonjs').getPoseidon;
const pathMainPil = path.join(__dirname, '../node_modules/@0xpolygonhermez/zkevm-proverjs/pil/main.pil');
const { newCommitPolsArray } = require('pilcom');
const { compile } = require('pilcom');
const zkasm = require("@0xpolygonhermez/zkasmcom");
const testFilesDir = path.join(__dirname, './tests');
const { argv } = require('yargs');

async function main() {

    // Compile pil
    const cmPols = await compilePil();

    // Get all zkasm files
    const files = getTestFiles();

    // Run all zkasm files
    for (let file of files) {
        await runTest(file, cmPols)
    }
}

async function runTest(testName, cmPols) {
    const zkasmFile = `${testFilesDir}/${testName}`;
    // Compile rom
    const configZkasm = {
        defines: [],
        allowUndefinedLabels: true
    };

    const rom = await zkasm.compile(zkasmFile, null, configZkasm);
    const config = {
        debug: true,
        stepsN: 8388608,
    }
    console.log(`Running ${testName}`)
    // Execute test
    const res = await smMain.execute(cmPols.Main, empty_input, rom, config);
    console.log(res.counters)
}

// Get all zkasm counter test files
function getTestFiles() {
    if(argv.test){
        return [`${argv.test}.zkasm`]
    }
    const files = fs.readdirSync(testFilesDir).filter(name => name.endsWith('.zkasm'))
    return files
}

async function compilePil() {
    if (!fs.existsSync(fileCachePil)) {
        const poseidon = await buildPoseidon();
        const { F } = poseidon;
        const pilConfig = {
            defines: { N: 4096 },
            namespaces: ['Main', 'Global'],
            disableUnusedError: true
        };
        const p = await compile(F, pathMainPil, null, pilConfig);
        fs.writeFileSync(fileCachePil, `${JSON.stringify(p, null, 1)}\n`, 'utf8');
    }

    const pil = JSON.parse(fs.readFileSync(fileCachePil));
    return newCommitPolsArray(pil);
}

main()
'''
'''--- docs/opcode-cost-zk-counters.md ---
# ZK-COUNTERS TABLE

| opcode | name           | cnt_arith | cnt_binary | cnt_mem_align | cnt_keccak_f | cnt_padding_pg | cnt_poseidon_g | is_dynamic |
|--------|----------------|-----------|------------|---------------|--------------|----------------|----------------|------------|
| 0x00   | STOP           | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x01   | ADD            | 0         | 1          | 0             | 0            | 0              | 0              | false       |
| 0x02   | MUL            | 1         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x03   | SUB            | 0         | 1          | 0             | 0            | 0              | 0              | false       |
| 0x04   | DIV            | 1         | 2          | 0             | 0            | 0              | 0              | false      |
| 0x05   | SDIV           | 1         | 8          | 0             | 0            | 0              | 0              | false       |
| 0x06   | MOD            | 1         | 2          | 0             | 0            | 0              | 0              | false       |
| 0x07   | SMOD           | 1         | 8          | 0             | 0            | 0              | 0              | false       |
| 0x08   | ADDMOD         | 1         | 3          | 0             | 0            | 0              | 0              | false       |
| 0x09   | MULMOD         | 2         | 2          | 0             | 0            | 0              | 0              | false       |
| 0x0a   | EXP            | 512       | 1025       | 0             | 0            | 0              | 0              | [true](#EXP)       |
| 0x0b   | SIGNEXTEND     | 0         | 6          | 0             | 0            | 0              | 0              | false       |
| 0x10   | LT             | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x11   | GT             | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x12   | SLT            | 0         | 1          | 0             | 0            | 0              | 0              | false       |
| 0x13   | SGT            | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x14   | EQ             | 0         | 1          | 0             | 0            | 0              | 0              | false       |
| 0x15   | ISZERO         | 0         | 1          | 0             | 0            | 0              | 0              | false       |
| 0x16   | AND            | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x17   | OR             | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x18   | XOR            | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x19   | NOT            | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x1a   | BYTE           | 2         | 4          | 0             | 0            | 0              | 0              | false      |
| 0x1b   | SHL            | 1         | 2          | 0             | 0            | 0              | 0              | false       |
| 0x1c   | SHR            | 1         | 3          | 0             | 0            | 0              | 0              | false      |
| 0x1d   | SAR            | 2         | 10         | 0             | 0            | 0              | 0              | false       |
| 0x20   | SHA3           | 192       | 193        | 2             | 2            | 0              | 10             | [true](#SHA3)       |
| 0x30   | ADDRESS        | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x31   | BALANCE        | 0         | 0          | 0             | 0            | 0              | 9              | false      |
| 0x32   | ORIGIN         | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x33   | CALLER         | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x34   | CALLVALUE      | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x35   | CALLDATALOAD   | 64        | 66         | 0             | 0            | 0              | 0              | [true](#CALLDATALOAD)        |
| 0x36   | CALLDATASIZE   | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x37   | CALLDATACOPY   | -         | -          | -             | 0            | 0              | 0              | [true](#CALLDATACOPY)        |
| 0x38   | CODESIZE       | 0         | 0          | 0             | 0            | 0              | 252            | [true](#CODESIZE)       |
| 0x39   | CODECOPY       | 0         | -          | -             | 0            | 0              | 255            | [true](#CODECOPY)        |
| 0x3a   | GASPRICE       | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x3b   | EXTCODESIZE    | 0         | 0          | 0             | 0            | 0              | 255            | [true](#EXTCODESIZE)       |
| 0x3c   | EXTCODECOPY    | 0         | -          | -             | 0            | 11             | 510            | [true](#EXTCODECOPY)       |
| 0x3d   | RETURNDATASIZE | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| 0x3e   | RETURNDATACOPY | -         | -          | 2             | 0            | 0              | 0              | [true](#RETURNDATACOPY)       |
| 0x3f   | EXTCODEHASH    | 0         | 0          | 0             | 0            | 0              | 255            | [true](#EXTCODEHASH)       |
| 0x40   | BLOCKHASH      | 0         | 0          | 0             | 1            | 0              | 9              | false       |
| 0x41   | COINBASE       | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x42   | TIMESTAMP      | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x43   | NUMBER         | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x44   | DIFFICULTY     | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x45   | GASLIMIT       | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x46   | CHAINID        | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x47   | SELFBALANCE    | 0         | 0          | 0             | 0            | 0              | 255            | [true](#SELFBALANCE)       |
| 0x50   | POP            | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x51   | MLOAD          | 32        | 32         | 1             | 0            | 0              | 255            | [true](#MLOAD)       |
| 0x52   | MSTORE         | 32        | 32         | 1             | 0            | 0              | 255            | [true](#MSTORE)       |
| 0x53   | MSTORE8        | 32        | 1          | 1             | 0            | 0              | 255            | false      |
| 0x54   | SLOAD          | 0         | 0          | 0             | 0            | 0              | 255            | [true](#SLOAD)       |
| 0x55   | SSTORE         | 0         | -          | 0             | 0            | 0              | 255            | [true](#SSTORE)       |
| 0x56   | JUMP           | 0         | -          | 0             | 0            | 0              | 0              | [true](#JUMP)       |
| 0x57   | JUMPI          | 0         | -          | 0             | 0            | 0              | 0              | [true](#JUMPI)       |
| 0x59   | MSIZE          | 1         | 3          | 0             | 0            | 0              | 0              | false      |
| 0x5a   | GAS            | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x5b   | JUMPDEST       | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x60   | PUSH1          | 0         | 3          | 0             | 0            | 0              | 0              | true       |
| 0x61   | PUSH2          | 0         | 4          | 0             | 0            | 0              | 0              | true       |
| 0x62   | PUSH3          | 0         | 5          | 0             | 0            | 0              | 0              | false      |
| 0x63   | PUSH4          | 0         | 2          | 0             | 0            | 0              | 0              | false      |
| 0x64   | PUSH5          | 0         | 4          | 0             | 0            | 0              | 0              | false      |
| 0x65   | PUSH6          | 0         | 5          | 0             | 0            | 0              | 0              | false      |
| 0x66   | PUSH7          | 0         | 6          | 0             | 0            | 0              | 0              | false      |
| 0x67   | PUSH8          | 0         | 3          | 0             | 0            | 0              | 0              | false      |
| 0x68   | PUSH9          | 0         | 5          | 0             | 0            | 0              | 0              | false      |
| 0x69   | PUSH10         | 0         | 6          | 0             | 0            | 0              | 0              | false      |
| 0x6a   | PUSH11         | 0         | 7          | 0             | 0            | 0              | 0              | false      |
| 0x6b   | PUSH12         | 0         | 4          | 0             | 0            | 0              | 0              | false      |
| 0x6c   | PUSH13         | 0         | 6          | 0             | 0            | 0              | 0              | false      |
| 0x6d   | PUSH14         | 0         | 7          | 0             | 0            | 0              | 0              | false      |
| 0x6e   | PUSH15         | 0         | 8          | 0             | 0            | 0              | 0              | false      |
| 0x6f   | PUSH16         | 0         | 5          | 0             | 0            | 0              | 0              | false      |
| 0x70   | PUSH17         | 0         | 7          | 0             | 0            | 0              | 0              | false      |
| 0x71   | PUSH18         | 0         | 8          | 0             | 0            | 0              | 0              | false      |
| 0x72   | PUSH19         | 0         | 9          | 0             | 0            | 0              | 0              | false      |
| 0x73   | PUSH20         | 0         | 6          | 0             | 0            | 0              | 0              | false      |
| 0x74   | PUSH21         | 0         | 8          | 0             | 0            | 0              | 0              | false      |
| 0x75   | PUSH22         | 0         | 9          | 0             | 0            | 0              | 0              | false      |
| 0x76   | PUSH23         | 0         | 10         | 0             | 0            | 0              | 0              | false      |
| 0x77   | PUSH24         | 0         | 7          | 0             | 0            | 0              | 0              | false      |
| 0x78   | PUSH25         | 0         | 9          | 0             | 0            | 0              | 0              | false      |
| 0x79   | PUSH26         | 0         | 10         | 0             | 0            | 0              | 0              | false      |
| 0x7a   | PUSH27         | 0         | 11         | 0             | 0            | 0              | 0              | false      |
| 0x7b   | PUSH28         | 0         | 8          | 0             | 0            | 0              | 0              | false      |
| 0x7c   | PUSH29         | 0         | 10         | 0             | 0            | 0              | 0              | false      |
| 0x7d   | PUSH30         | 0         | 11         | 0             | 0            | 0              | 0              | false      |
| 0x7e   | PUSH31         | 0         | 12         | 0             | 0            | 0              | 0              | false      |
| 0x7f   | PUSH32         | 0         | 9          | 0             | 0            | 0              | 0              | false      |
| 0x80   | DUP1           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x81   | DUP2           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x82   | DUP3           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x83   | DUP4           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x84   | DUP5           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x85   | DUP6           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x86   | DUP7           | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x87   | DUP8           | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x88   | DUP9           | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x90   | SWAP1          | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x91   | SWAP2          | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x92   | SWAP3          | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0x93   | SWAP4          | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x94   | SWAP5          | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x95   | SWAP6          | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0x96   | SWAP7          | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0xa0   | LOG0           | 0         | -          | 0             | 0            | 0              | 0              | [true](#LOG)       |
| 0xa1   | LOG1           | 0         | -          | 0             | 0            | 0              | 0              | [true](#LOG)       |
| 0xa2   | LOG2           | 0         | -          | 0             | 0            | 0              | 0              | [true](#LOG)       |
| 0xa3   | LOG3           | 0         | -          | 0             | 0            | 0              | 0              | [true](#LOG)       |
| 0xa4   | LOG4           | 0         | -          | 0             | 0            | 0              | 0              | [true](#LOG)       |
| 0xf0   | CREATE         | -         | -          | 0             | -            | 0              | -              | [true](#CREATE)       |
| 0xf1   | CALL           | -         | -          | 0             | 0            | -              | -              | [true](#CALL)       |
| 0xf2   | CALLCODE       | -         | -          | 0             | 0            | -              | -              | [true](#CALLCODE)       |
| 0xf3   | RETURN         | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| 0xf4   | DELEGATECALL   | -         | -          | 0             | 0            | -              | -              | [true](#DELEGATECALL)       |
| 0xf5   | CREATE2        | -         | -          | 0             | -            | 0              | -              | [true](#CREATE2)       |
| 0xfa   | STATICCALL     | -         | -          | 0             | 0            | -              | -              | [true](#STATICCALL)       |
| 0xfd   | REVERT         | 0         | 0          | 0             | 0            | 0              | 0              | false       |
| 0xfe   | INVALID        | 0         | 1          | 0             | 0            | 0              | 0              | false      |

## Dynamic zk-counters
In the following doc, we calculate the cost of processing the opcode. It's important to also add the cost of calculating the cost

### EXP
Inputs:  
1- a: integer base.  
2- exponent: integer exponent.

`dynamic_gas = 50 * exponent_byte_size`
We need to calculate the exponent byte size to get the gas cost. The counters cost is dynamic but we can't calculate the cost without consuming counters in a dynamic way. We need to find a way to get the size of the exponent in a constant manner or handle the counters limitations from the zkasm.
Maximum setted: Maxmimun byte syze = 256 bytes. Max counters = 256 * (2A + 4B) + 1B = 512A + 1025B

### SHA3
L = input length  
L/32 = A  
L % 32 > 0 ? true -> B = 1, false -> B = 0  

cnt_arith = 2 + B*6  
cnt_binary = 2 + A + B*9  
cnt_keccak = 1  

### CALLDATALOAD
L = byte offset in the calldata.  
L/32 = A  
L % 32 > 0 ? true -> B = 1, false -> B = 0  

counters = divARITH + B*(SHLarith + SHRarith)

### CALLDATACOPY
L = Length to copy.  
L/32 = A  
L % 32 > 0 ? true -> B = 1, false -> B = 0  

counters = A*(divARITH + SHLarith + SHRarith + MSTORE32) + SHLarith*2 + SHRarith + MSTOREX

### CODESIZE
counters = SLOAD

### CODECOPY
L = bytes to copy.  
if is createContract -> counters = CALLDATACOPY  
else -> counters = LT + L*(LT + MEM_ALIGN_WR8)  

### EXTCODESIZE
counters = SLOAD  

### EXTCODECOPY
L = bytes to copy.  
if is createContract -> counters = CALLDATACOPY  
else -> counters = LT + L*(LT + MEM_ALIGN_WR8)

### RETURNDATACOPY
L = Length to copy.  
L/32 = A  
L % 32 > 0 ? true -> B = 1, false -> B = 0  
counters = 2*EQ + LT + divARITH + mulARITH + A*(MLOAD32 + MSTORE32) + B*(MLOADX + MSTOREX)

### EXTCODEHASH
counters = SLOAD

### SELFBALANCE
counters = SLOAD

### MLOAD
counters = MLOAD32

### MSTORE
counters = MSTORE32

### SLOAD
counters = SLOAD

### SSTORE
Cant calculate

### JUMPI
isCreateContract ? true -> A = 1, false -> A = 0  
isCreate ? true -> B = 1, false -> B = 0  

counters = EQ + A*(B*(MLOADX + SHRarith) + (1-B)*(EQ)) + (1-A)*(EQ)  

### JUMP
isCreateContract ? true -> A = 1, false -> A = 0  
isCreate ? true -> B = 1, false -> B = 0  

counters = EQ + A*(B*(MLOADX + SHRarith) + (1-B)*(EQ)) + (1-A)*(EQ)  

### LOG
L = byte size to copy.  
L/32 = A  
L % 32 > 0 ? true -> B = 1, false -> B = 0  
counters = A*MLOAD32 + B*MLOADX  

### CREATE
counters = computeGasSendCall + copySP + SLOAD + SSTORE + getLenBytes

### CALL
argsLengthCall + retLength == 0 ? true -> A = 1, false -> A = 0  
argsOffsetCall > memLength ? true -> B = 1, false -> B = 0  
counters = addARITH + EQ + (1-A)*(LT +B*saveMem ) + LT + isEmptyAccount + computeGasSendCall + copySP  

### CALLCODE
counters = 2*EQ + LT*2 + computeGasSendCall + copySP  

### DELEGATECALL
counters = 2*EQ + LT*2 + computeGasSendCall + copySP  

### CREATE2
counters = computeGasSendCall + copySP + SLOAD + SSTORE + getLenBytes  

### STATICCALL
counters = 2*EQ + LT*2 + computeGasSendCall + copySP  

# REGS TABLE
| REG Name       | cnt_arith | cnt_binary | cnt_mem_align | cnt_keccak_f | cnt_padding_pg | cnt_poseidon_g | is_dynamic |
|----------------|-----------|------------|---------------|--------------|----------------|----------------|------------|
| LT             | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| EQ             | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| ARITH          | 1         | 0          | 0             | 0            | 0              | 0              | false      |
| SLOAD          | 0         | 0          | 0             | 0            | 0              | 11              | [true](#SLOAD)      |
| SSTORE         | 0         | 0          | 0             | 0            | 0              | 11              | [true](#SSTORE)      |
| MEM_ALIGN_WR8  | 0         | 0          | 1             | 0            | 0              | 0              | false      |

## Dynamic regs
### SSTORE
### SLOAD
Should check how SLOAD is implemented

# Functions TABLE
| FUNC Name      | cnt_arith | cnt_binary | cnt_mem_align | cnt_keccak_f | cnt_padding_pg | cnt_poseidon_g | is_dynamic |
|----------------|-----------|------------|---------------|--------------|----------------|----------------|------------|
| addARITH       | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| divARITH       | 1         | 2          | 0             | 0            | 0              | 0              | false      |
| subARITH       | 0         | 1          | 0             | 0            | 0              | 0              | false      |
| mulARITH       | 1         | 0          | 0             | 0            | 0              | 0              | false      |
| saveMem        | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| computeGasSendCall| 0         | 1          | 0             | 0            | 0              | 0              | false      |
| copySP         | -         | -          | 0             | 0            | 0              | 0              | [true](#copySP)      |
| MLOAD32        | 0         | 0          | 0             | 0            | 0              | 0              | [true](#MLOAD32)      |
| MLOADX         | 0         | 0          | 0             | 0            | 0              | 0              | [true](#MLOADX)      |
| MSTORE32       | 0         | 0          | 0             | 0            | 0              | 0              | [true](#MSTORE32)      |
| MSTOREX        | 0         | 0          | 0             | 0            | 0              | 0              | [true](#MSTOREX)      |
| sliceA         | 0         | 0          | 0             | 0            | 0              | 0              | false      |
| SHRarith       | -         | -          | 0             | 0            | 0              | 0              | [true](#SHRarith)      |
| SHLarith       | -         | -          | 0             | 0            | 0              | 0              | [true](#SHLarith)      |
| opCODECOPYLoadBytes       | 0         | 1          | 0             | 0            | 0              | 0              | false     |
| isEmptyAccount | -         | -          | 0             | 0            | 0              | 0              | [true](#isEmptyAccount)      |

## Dynamic functions

### copySP
It depends on the stack size.   
L = stack length  
L/32 = A  
L % 32 > 0 ? true -> B = 1, false -> B = 0  
counters = MLOAD32 * (A + B)  

### MLOAD32
### MSTORE32
### MSTOREX
### MLOADX
L = bytes length  
L > 0 ? true -> A = 1, false -> A = 0  
isMSTOREX ? true -> B = 1, false -> B = 0  
counters = LT + B*(2*SHRarith + 2*SHLarith) + (1-B)*(C*(2*SHLarith + 4*SHRarith) + (1-C)*(2*SHRarith + 2*SHLarith) + MEM_ALIGN_WR)  
MAX:  
counters = 192A + 193B + 2MA  
### SHRarith
### SHLarith
A -> bytes to shift  
D -> times to shift (A << D)  
E -> D > 256? true = 1, false = 0  
counters= ARITH + EQ + (1-E) * (D*(LT + ARITH)) = 1A + 1B + (1-E)*(D*(1A + 1B)  
MAX:  
counters = 32A + 32B   
### isEmptyAccount
isNotPrecompiled ? true -> A = 1, false -> A = 0  
zeroBalance ? true -> B = 1, false -> B = 0  
zeroNonce ? true -> C = 1, false -> C = 0  

counters = LT + A*(SLOAD + LT + B*(SLOAD + LT + C*(SLOAD + LT)))

'''
'''--- docs/usage-ecrecover.md ---
# ecrecover zkasm

This repo contains the zkasm subroutine to calculate ecrecover

## Usage

1) Add the npm dependecy, to doit add following line in dependecies of package.json, after that executes npm update
````
"zk_ecrecover": "https://github.com/hermeznetwork/zk_ecrecover.git"
````

2) Add this line to includes ecrecover in your source.
````
INCLUDE "../node_modules/zk_ecrecover/src/ecrecover.zkasm"
````

3) To use ecrecover subroutine passing arguments in registers:
````
A  hash
B  r
C  s
D  v
````
After setting parameters, call ecrecover:
````
:CALL(ecrecover)
````

4) To use ecrecover subroutine passing arguments in global variables:
````
ecrecover_hash  hash
ecrecover_r     r
ecrecover_s     s
ecrecover_v     v
````
After setting parameters, call ecrecover_pbv (params by vars)
````
:CALL(ecrecover_pbv)
````

## Return Codes

Subroutine ecrecover returns in A register the address; if an error happens return 0 in A registger, and return error reason in B register.
````
1 - r is zero (0)
2 - r is too big
3 - s is zero (0)
4 - s is too big
5 - v not valid value (1b, 1c)
6 - not exists sqrt of y
````

'''
'''--- package.json ---
{
  "name": "@0xpolygonhermez/zkevm-rom",
  "version": "2.0.0",
  "description": "zkROM source code",
  "main": "index.js",
  "scripts": {
    "build": "mkdir -p build && npx zkasm main/main.zkasm -o build/rom.json && npm run build:metadata",
    "build:metadata": "echo \"COMMIT=$(git rev-parse HEAD)\nSHA256SUM=$(sha256sum ./build/rom.json)\" > build/metadata-rom.txt",
    "test:build:gasLimit:v1": "mkdir -p build && npx zkasm main/main.zkasm -o build/rom-89128960.test.json -D TX_GAS_LIMIT=89128960",
    "test:build:gasLimit:v2": "mkdir -p build && npx zkasm main/main.zkasm -o build/rom-100000000.test.json -D TX_GAS_LIMIT=100000000",
    "test:build:gasLimit:v3": "mkdir -p build && npx zkasm main/main.zkasm -o build/rom-2147483647.test.json -D TX_GAS_LIMIT=2147483647",
    "build:all": "npm run build && npm run test:build:gasLimit:v1 && npm run test:build:gasLimit:v2 && npm run test:build:gasLimit:v3",
    "test:bitwise": "mkdir -p build && npx zkasm test/bitwise.zkasm -o build/rom-bitwise.test.json",
    "test:comp": "mkdir -p build && npx zkasm test/comp.zkasm -o build/rom-comp.test.json",
    "test:utils": "mkdir -p build && npx zkasm test/utils-getLenBytes.zkasm -o build/rom-utils.test.json",
    "test:rotate": "mkdir -p build && npx zkasm test/rotate.zkasm -o build/rotate.test.json",
    "test:touched": "mkdir -p build && npx zkasm test/touched-assert.zkasm -o build/touched.test.json",
    "test:counters": "node counters/counters-executor.js",
    "test:calldatacopy": "mkdir -p build && npx zkasm test/opcalldatacopy.zkasm -o build/opcalldatacopy.test.json",
    "test:mstorex": "mkdir -p build && npx zkasm test/mstorex.zkasm -o build/mstorex.test.json",
    "test:zkasm": "node tools/run-tests-zkasm.js ./test",
    "eslint": "npx eslint tools/**.js && npx eslint counters/counters-executor.js",
    "eslint:fix": "npx eslint tools/**.js --fix && npx eslint counters/counters-executor.js --fix",
    "test:gen": "node tools/gen-parallel-tests.js",
    "test:start": "npx mocha --jobs $NUM_CPUS --timeout 0 --max-old-space-size=8192 --parallel tools/parallel-tests/*.test.js"
  },
  "keywords": [
    "zkrom",
    "zkevm",
    "hermez",
    "polygon"
  ],
  "author": "Jordi Baylina",
  "license": "AGPL",
  "repository": {
    "type": "git",
    "url": "https://github.com/0xPolygonHermez/zkevm-rom.git"
  },
  "dependencies": {
    "@0xpolygonhermez/zkasmcom": "https://github.com/0xPolygonHermez/zkasmcom.git#v1.0.0",
    "yargs": "^17.5.1"
  },
  "devDependencies": {
    "@0xpolygonhermez/zkevm-proverjs": "github:0xPolygonHermez/zkevm-proverjs#5f0d122fdfb5e3e5b17f45976e08fd26c9f248ba",
    "@0xpolygonhermez/zkevm-testvectors": "github:0xPolygonHermez/zkevm-testvectors#v2.0.0-fork.5",
    "@0xpolygonhermez/zkevm-commonjs": "github:0xPolygonHermez/zkevm-commonjs#v2.0.0-fork.5",
    "mocha": "^9.1.3",
    "chai": "^4.3.6",
    "chalk": "^3.0.0",
    "eslint": "^8.25.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-plugin-mocha": "^10.1.0"
  }
}

'''
'''--- tools/checker.sh ---
#!/bin/sh
FILE=$PWD/tools/parallel-tests/checker.txt
if [ -f "$FILE" ]; then
    cat "$FILE"
    exit 1
fi

'''
'''--- tools/gen-parallel-tests.js ---
/* eslint-disable no-console */
/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable no-restricted-syntax */
const { expect } = require('chai');
const fs = require('fs');
const path = require('path');

const { compile } = require('pilcom');
const buildPoseidon = require('@0xpolygonhermez/zkevm-commonjs').getPoseidon;

const folderPaths = [
    '../node_modules/@0xpolygonhermez/zkevm-testvectors/inputs-executor',
    '../node_modules/@0xpolygonhermez/zkevm-testvectors/tools/ethereum-tests/GeneralStateTests',
];

const fileCachePil = path.join(__dirname, '../node_modules/@0xpolygonhermez/zkevm-proverjs/cache-main-pil.json');
const pathMainPil = path.join(__dirname, '../node_modules/@0xpolygonhermez/zkevm-proverjs/pil/main.pil');
const inputs = [];
const testsFolder = path.join(__dirname, 'parallel-tests');
const sampleDir = path.join(__dirname, 'parallel-tests-sample/sample.test.js');

async function genTestsFiles() {
    if (!fs.existsSync(testsFolder)) {
        fs.mkdirSync(testsFolder);
    }
    for (const inputPath of inputs) {
        const name = inputPath.split('/').slice(-1)[0].replace('json', 'test.js');
        const sample = fs.readFileSync(sampleDir, 'utf-8');
        const test = sample.replace('%%INPUT_PATH%%', `${inputPath}`);
        fs.writeFileSync(`${testsFolder}/${name}`, test);
    }
    expect(true).to.be.equal(true);
}

async function main() {
    const poseidon = await buildPoseidon();
    const { F } = poseidon;

    // Add all test files to `inputs` array
    for (const folder of folderPaths) {
        const inputsPath = path.join(__dirname, folder);
        fs.readdirSync(inputsPath).forEach((file) => {
            const filePath = path.join(inputsPath, file);
            if (file.endsWith('.json')) {
                inputs.push(filePath);
            } else if (fs.statSync(filePath).isDirectory()) {
                fs.readdirSync(filePath).forEach((subFile) => {
                    const subFilePath = path.join(filePath, subFile);
                    if (subFile.endsWith('.json')) {
                        inputs.push(subFilePath);
                    }
                });
            }
        });
    }

    console.log(`Inputs executor generated: ${inputs.length}`);

    const pilConfig = {
        defines: { N: 4096 },
        namespaces: ['Main', 'Global'],
        disableUnusedError: true,
    };

    const pil = await compile(F, pathMainPil, null, pilConfig);
    fs.writeFileSync(fileCachePil, `${JSON.stringify(pil, null, 1)}\n`, 'utf8');
    genTestsFiles();
}

main();

'''
'''--- tools/helpers/helpers.js ---
/* eslint-disable import/no-extraneous-dependencies */
const path = require('path');
const fs = require('fs');
const { compile, newCommitPolsArray } = require('pilcom');

const buildPoseidon = require('@0xpolygonhermez/zkevm-commonjs').getPoseidon;

// Global paths to build Main PIL to fill polynomials in tests
const pathMainPil = path.join(__dirname, '../../node_modules/@0xpolygonhermez/zkevm-proverjs/pil/main.pil');
const fileCachePil = path.join(__dirname, '../../node_modules/@0xpolygonhermez/zkevm-proverjs/cache-main-pil.json');

async function compilePil() {
    if (!fs.existsSync(fileCachePil)) {
        const poseidon = await buildPoseidon();
        const { F } = poseidon;
        const pilConfig = {
            defines: { N: 4096 },
            namespaces: ['Main', 'Global'],
            disableUnusedError: true,
        };
        const p = await compile(F, pathMainPil, null, pilConfig);
        fs.writeFileSync(fileCachePil, `${JSON.stringify(p, null, 1)}\n`, 'utf8');
    }

    const pil = JSON.parse(fs.readFileSync(fileCachePil));

    return newCommitPolsArray(pil);
}

// Get all zkasm test files
function getTestFiles(pathZkasm) {
    // check if path provided is a file or a directory
    const stats = fs.statSync(pathZkasm);

    if (!stats.isDirectory()) {
        return [pathZkasm];
    }

    const filesNames = fs.readdirSync(pathZkasm).filter((name) => name.endsWith('.zkasm'));

    return filesNames.map((fileName) => path.join(pathZkasm, fileName));
}

module.exports = {
    compilePil,
    getTestFiles,
};

'''
'''--- tools/parallel-tests-sample/sample.test.js ---
/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable import/extensions */
/* eslint-disable import/no-unresolved */
const { expect } = require('chai');
const fs = require('fs');
const path = require('path');

const { newCommitPolsArray } = require('pilcom');
const smMain = require('@0xpolygonhermez/zkevm-proverjs/src/sm/sm_main/sm_main');

let rom = require('../../build/rom.json');
let stepsN = 2 ** 23;
let counters = false;

const fileCachePil = path.join(__dirname, '../../node_modules/@0xpolygonhermez/zkevm-proverjs/cache-main-pil.json');

const checkerDir = path.join(__dirname, 'checker.txt');

const inputPath = '%%INPUT_PATH%%';
const nameFile = path.basename(inputPath);
const input = JSON.parse(fs.readFileSync(inputPath, 'utf8'));

it(`${nameFile}`, async () => {
    if (fs.existsSync(checkerDir)) {
        process.exit(1);
    }
    const pil = JSON.parse(fs.readFileSync(fileCachePil));
    const cmPols = newCommitPolsArray(pil);
    if (input.gasLimit) {
        rom = require(`../../build/rom-${input.gasLimit}.test.json`)
    }
    if (input.stepsN) {
        stepsN = input.stepsN
        counters = true;
    }
    try {
        const config = {
            debug: true,
            debugInfo: {
                inputName: path.basename(inputPath),
            },
            stepsN: stepsN,
            counters,
            assertOutputs: true,
        };
        await smMain.execute(cmPols.Main, input, rom, config);
    } catch (err) {
        fs.writeFileSync(checkerDir, `Failed test ${inputPath}`);
        throw err;
    }
    expect(true).to.be.equal(true);
});

'''
'''--- tools/run-tests-zkasm.js ---
/* eslint-disable no-restricted-syntax */
/* eslint-disable import/no-extraneous-dependencies */
/* eslint-disable no-use-before-define */
const path = require('path');
const chalk = require('chalk');
const zkasm = require('@0xpolygonhermez/zkasmcom');
const smMain = require('@0xpolygonhermez/zkevm-proverjs/src/sm/sm_main/sm_main');

const emptyInput = require('@0xpolygonhermez/zkevm-proverjs/test/inputs/empty_input.json');

const { argv } = require('yargs')
    .alias('v', 'verbose');

const { compilePil, getTestFiles } = require('./helpers/helpers');

async function main() {
    // Compile pil
    console.log(chalk.yellow('--> Compile PIL'));
    const cmPols = await compilePil();

    // Get all zkasm files
    const pathZkasm = path.join(process.cwd(), process.argv[2]);
    const files = await getTestFiles(pathZkasm);

    // Run all zkasm files
    // eslint-disable-next-line no-restricted-syntax
    console.log(chalk.yellow('--> Start running zkasm files'));
    for (const file of files) {
        if (file.includes('ignore'))
            continue;
        await runTest(file, cmPols);
    }
}

async function runTest(pathTest, cmPols) {
    // Compile rom
    const configZkasm = {
        defines: [],
        allowUndefinedLabels: true,
        allowOverwriteLabels: true,
    };

    const rom = await zkasm.compile(pathTest, null, configZkasm);
    const config = {
        debug: true,
        stepsN: 8388608,
        assertOutputs: false,
    };

    // execute zkasm tests
    try {
        const result = await smMain.execute(cmPols.Main, emptyInput, rom, config);
        console.log(chalk.green('   --> pass'), pathTest);
        if (argv.verbose) {
            console.log(chalk.blue('   --> verbose'));
            console.log(chalk.blue('        --> counters'));
            console.log(result.counters);
            console.log(chalk.blue('        --> outputs'));
            console.log(result.output);
            console.log(chalk.blue('        --> logs'));
            console.log(result.logs);
        }
    } catch (e) {
        console.log(chalk.red('   --> fail'), pathTest);
        throw new Error(e);
    }
}

main();

'''