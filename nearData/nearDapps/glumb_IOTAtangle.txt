*GitHub Repository "glumb/IOTAtangle"*

'''--- .eslintrc.yml ---
env:
  browser: true
  es6: true
  node: true
extends: 'eslint:recommended'
rules:
  indent:
    - error
    - 4
  linebreak-style:
    - error
    - unix
  quotes:
    - error
    - single
  semi:
    - error
    - never
  no-var:
    - error
  prefer-const:
    - error
'''
'''--- .github/FUNDING.yml ---
github: [glumb]
custom: ['paypal.me/MaximilianBeck']

'''
'''--- README.md ---
# IOTA Tangle Visualiser ðŸ¦”

[![Codacy Badge](https://img.shields.io/codacy/grade/6329c35e70164a69bf4ee7ce844b1ff2.svg)](https://app.codacy.com/app/glumb/IOTAtangle?utm_source=github.com&utm_medium=referral&utm_content=glumb/IOTAtangle&utm_campaign=Badge_Grade_Dashboard)
![Codacy Badge](https://img.shields.io/badge/IOTA-100%25-94c63b.svg)

Live Visualisation of the IOTA Tangle using a dynamically layouted graph.
Demo: [http://tangle.glumb.de](http://tangle.glumb.de)

![IOTA TAngle](https://user-images.githubusercontent.com/3062564/56504720-bcf0db80-6519-11e9-898a-050709804887.png)

## Usage and UI

All circles represent transactions (tx) in the IOTA Tangle.
A circular buffer is used to populate the viewer with the last 1800 (configurable) tx on page load.

Hover a tx to see more details:

- bottom left: value, tag, hash
- top left: how many tx are confirming the selcted one (yellow)
- top left: how many tx are confirmed by the selcted one (magenta)
- tx of the same bundle are highlightes in blue

Use the input boxes on the left to filter by hast, tag or bundle. The tag filter is applied using a regex.

Toggle switches on the top right:

| config                | description                                                                                                                                                                          |
| --------------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ |
| remove floating tx    | some tx are not visually attached to the tangle since their attachement point lays so far back that it is not displayed anymore. Automatic removal of those tx increases performance |
| limit to 4k tx        | for continuous use only 4000 tx are kept on screen. Older tx are deleted first.                                                                                                      |
| pin old tx            | pinning old tx increases performance by disabling their physics ad thus excluding them from the layouting process                                                                    |
| reduce moevement      | spawns new nodes close to their neighbours                                                                                                                                           |
| size by # of confirms | tx that have been confirmed by more tx have a bigger diameter                                                                                                                        |
| size by weight        | tx that confirm more tx have a bigger diameter                                                                                                                                       |
| size by value         | size based on transferred iota value                                                                                                                                                 |
| color by order        | color ty based on the order they appear on screen. Continuous hue rotation                                                                                                           |

### Configuration

In adition to setting configuration parameters using the ui, URL parameters can be used for presets.

**Example:**
`http://tangle.glumb.de/?DARK_MODE=true&CIRCLE_SIZE=40&HIGHLIGHT_COLOR_FORWARD="0xbada55ff"&svg`

**Syntax**
`http://tangle.glumb.de/?<CONFIG_PARAM_NAME>=<VALUE>[&<CONFIG_PARAM_NAME>=<VALUE>]`

**Available Configuration Parameters**

```json
CIRCLE_SIZE: 30, // size of a node
REMOVE_LONLY_AFTER_S: 30, // remove floating nodes after time
REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH: 0.03, // remove graphs that are smaller than % of all nodes
MAX_CIRCLE_SIZE: 80, // max node size used e.g. for 'size by value'
MAX_NODES: 4000, // max nodes when 'limit to 4k nodes' is enabled

// options
REMOVE_FLOATING_NODES: true,
COLOR_BY_DEPTH: false,
SIZE_BY_VALUE: false, // size based on transferred iota value
SIZE_BY_WEIGHT: false, // tx that confirm more tx have a bigger diameter
REMOVE_OLD_NODES: false, // only MAX_NODES tx are kept on screen. Older tx are deleted first.
PIN_OLD_NODES: true, // pinning old tx increases performance by disabling their physics ad thus excluding them from the layouting process
LIGHT_LINKS: false,
SPAWN_NODE_NEAR_FINAL_POSITION: true, // spawns new nodes close to their neighbours
COLOR_BY_NUMBER: false, // color ty based on the order they appear on screen. Continuous hue rotation
DARK_MODE: false,

// colors
HIGHLIGHT_MULTIPLE_COLOR: 0xda4b29, // for tags, hash, bundle filter
SAME_BUNDLE_COLOR: 0x1287ff,
LIGHT_LINK_COLOR: 0x222222ff,
LIGHT_NODE_COLOR: 0x000000ff,
LIGHT_NODE_BG_COLOR: 0xffffff,
NODE_CONFIRMED_COLOR: 0x000000,
HIGHLIGHT_COLOR_FORWARD: 0xf1b727ff,
HIGHLIGHT_COLOR_BACKWARD: 0xe23df4ff,
NODE_MILESTONE_COLOR: 0xe53d6f,
NODE_TIP_COLOR: 0x1fe0be,

LINK_COLOR: 0,
NODE_COLOR: 0,
NODE_BG_COLOR: 0,

// sizes
NODE_CONFIRMED_BORDER_SIZE: 1,
NODE_BASE_BORDER_SIZE: 0.8,
NODE_MILESTONE_BORDER_SIZE: 0.6,
NODE_TIP_BORDER_SIZE: 0.6,

// other
TITLE: "The Tangle",
EXPLORER_TX_LINK: "https://thetangle.org/transaction/",
EXPLORER_BUNDLE_LINK: "https://thetangle.org/bundle/",
```

**Additional Parameters**
Use `hash=<tx-hash>, bundle=<bundle-hash>, tag=<tx-tag>` to select a tx. Use with caution. The tx is only highlighted when on screen. Older tx are not queried.
Use `svg=true` to display a svg export utility button on the top left.

## Installation

Clone the repo and run `npm install`.

### Tangle Setup

The visualiser can be used for multiple networks (Mainnet, testnet, Customnet). The main entrypoint is the `<NAME>App.js` file.
To get started open the `mainnetApp.js` and configure the `ZMQ_ENDPOINT` and `LSM_NODE`.
Run `node mainnnetApp.js` to start the server. Done :)

To add another network, copy the `mainnetApp.js` and rename it to `<CustomName>App.js`. Copy the `mainnetdata.json` and also rename it to `<CustomName>data.json`.
Set your network endpoints in `<CustomName>App.js` and also set the `NAME` to `<CustomName>`.

## Architecture

The visualiser follows simple client server architecture. Server-side a ZMQ client is used for for data aquisition. It listens to the ZMQ Transaction stream of an IOTA Fullnode. An Instance of the IOTA JS library is used to peridically poll the latest milestone index.

Transactions are stroed in a ringbuffer to send the last 1800TX to the client on pageload.

![IOTA Tangle Glumb Architecture](https://user-images.githubusercontent.com/3062564/56865038-cb337180-69c9-11e9-9caa-4a7d26c18b14.png)

## Telegram / Message Format

The data send to the client via WebSocket follow this structure:

**TX - Transaction**

```js
{
  hash,
    address,
    value,
    tag,
    timestamp,
    current_index,
    last_index,
    bundle_hash,
    transaction_trunk,
    transaction_branch;
}
```

**SN - Confirmed Transaction**

```js
{
  hash, address, transaction_trunk, transaction_branch, bundle;
}
```

### Socket IO Client Events

The clients data interface is based on the SocketIO library. Therefore it is server agnostic as along as the expected SocketIO events are emittet by the backend.

On initialisation/pageload the following events are expected:

```js
socket.emit("config", FRONTEND_CONFIG); // { networkName }
socket.emit("inittx", txArray); // see format above
socket.emit("initsn", snArray); // see format above
socket.emit("initms", mileStoneArray); // Array of milestone tx hashes
```

During runtime the following event can be fired:

```js
socket.emit("tx", tx); // see format above
socket.emit("sn", sn); // see format above
socket.emit("ms", ms); // milestone tx hash
```

### API

include th following scripts

```html
<link rel="stylesheet" href="main.css" />
<script src="lib/vivagraph.js"></script>
<script src="main.js"></script>
<script
  src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
  crossorigin="anonymous"
></script>
```

Instantiate `TangleGlumb($DOMElement, [config])`

```js
const tg = TangleGlumb(document.getElementById("graph"), {
  CIRCLE_SIZE: 60,
  PIN_OLD_NODES: false,
  STATIC_FRONT: false
});

tg.updateTx([tx]);
tg.removeTx([tx]);
```

Add and update array of transactions using `TG.updateTx(Array<txObj>)`

```js
const tx = {
  hash: "",
  address: "",
  value: 0,
  timestamp: Date.now(),
  bundle_hash: "",
  transaction_branch: "",
  transaction_trunk: "",
  tag: ""
  milestone: false, //optional
  confirmed: false, //optional
};

tg.updateTx([tx]);
```

Remove transactions from the visualisation using `TG.removeTx(Array<txObj|hash>)`

```js
const tx = {
  hash: "",
  address: "",
  value: 0,
  timestamp: Date.now(),
  bundle_hash: "",
  transaction_branch: "",
  transaction_trunk: "",
  tag: ""
  milestone: false, //optional
  confirmed: false, //optional
};

tg.removeTx([tx, tx.hash]);
```

'''
'''--- package-lock.json ---
{
  "name": "iotatangle",
  "version": "1.0.1",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "accepts": {
      "version": "1.3.7",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.7.tgz",
      "integrity": "sha512-Il80Qs2WjYlJIBNzNkK6KYqlVMTbZLXgHx2oT0pU/fjRHyEp+PEfEPY0R3WCwAGVOtauxh1hOxNgIf5bv7dQpA==",
      "requires": {
        "mime-types": "~2.1.24",
        "negotiator": "0.6.2"
      }
    },
    "after": {
      "version": "0.8.2",
      "resolved": "https://registry.npmjs.org/after/-/after-0.8.2.tgz",
      "integrity": "sha1-/ts5T58OAqqXaOcCvaI7UF+ufh8="
    },
    "ansi-regex": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-2.1.1.tgz",
      "integrity": "sha1-w7M6te42DYbg5ijwRorn7yfWVN8="
    },
    "aproba": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-1.2.0.tgz",
      "integrity": "sha512-Y9J6ZjXtoYh8RnXVCMOU/ttDmk1aBjunq9vO0ta5x85WDQiQfUF9sIPBITdbiiIVcBo03Hi3jMxigBtsddlXRw=="
    },
    "are-we-there-yet": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-1.1.5.tgz",
      "integrity": "sha512-5hYdAkZlcG8tOLujVDTgCT+uPX0VnpAH28gWsLfzpXYm7wP6mp5Q/gYyR7YQ0cKVJcXJnl3j2kpBan13PtQf6w==",
      "requires": {
        "delegates": "^1.0.0",
        "readable-stream": "^2.0.6"
      }
    },
    "array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha1-ml9pkFGx5wczKPKgCJaLZOopVdI="
    },
    "arraybuffer.slice": {
      "version": "0.0.7",
      "resolved": "https://registry.npmjs.org/arraybuffer.slice/-/arraybuffer.slice-0.0.7.tgz",
      "integrity": "sha512-wGUIVQXuehL5TCqQun8OW81jGzAWycqzFF8lFp+GOM5BXLYj3bKNsYC4daB7n6XjCqxQA/qgTJ+8ANR3acjrog=="
    },
    "async": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/async/-/async-2.6.3.tgz",
      "integrity": "sha512-zflvls11DCy+dQWzTW2dzuilv8Z5X/pjfmZOWba6TNIVDm+2UDaJmXSOXlasHKfNBs8oo3M0aT50fDEWfKZjXg==",
      "requires": {
        "lodash": "^4.17.14"
      }
    },
    "async-limiter": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/async-limiter/-/async-limiter-1.0.1.tgz",
      "integrity": "sha512-csOlWGAcRFJaI6m+F2WKdnMKr4HhdhFVBk0H/QbJFMCr+uO2kwohwXQPxw/9OCxp05r5ghVBFSyioixx3gfkNQ=="
    },
    "backo2": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/backo2/-/backo2-1.0.2.tgz",
      "integrity": "sha1-MasayLEpNjRj41s+u2n038+6eUc="
    },
    "base64-arraybuffer": {
      "version": "0.1.5",
      "resolved": "https://registry.npmjs.org/base64-arraybuffer/-/base64-arraybuffer-0.1.5.tgz",
      "integrity": "sha1-c5JncZI7Whl0etZmqlzUv5xunOg="
    },
    "base64id": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/base64id/-/base64id-2.0.0.tgz",
      "integrity": "sha512-lGe34o6EHj9y3Kts9R4ZYs/Gr+6N7MCaMlIFA3F1R2O5/m7K06AxfSeO5530PEERE6/WyEg3lsuyw4GHlPZHog=="
    },
    "better-assert": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/better-assert/-/better-assert-1.0.2.tgz",
      "integrity": "sha1-QIZrnhueC1W0gYlDEeaPr/rrxSI=",
      "requires": {
        "callsite": "1.0.0"
      }
    },
    "bignumber.js": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-4.1.0.tgz",
      "integrity": "sha512-eJzYkFYy9L4JzXsbymsFn3p54D+llV27oTQ+ziJG7WFRheJcNZilgVXMG0LoZtlQSKBsJdWtLFqOD0u+U0jZKA=="
    },
    "bl": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.0.1.tgz",
      "integrity": "sha512-FL/TdvchukRCuWVxT0YMO/7+L5TNeNrVFvRU2IY63aUyv9mpt8splf2NEr6qXtPo5fya5a66YohQKvGNmLrWNA==",
      "requires": {
        "readable-stream": "^3.4.0"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "blob": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/blob/-/blob-0.0.5.tgz",
      "integrity": "sha512-gaqbzQPqOoamawKg0LGVd7SzLgXS+JH61oWprSLH+P+abTczqJbhTR8CmJ2u9/bUYNmHTGJx/UEmn6doAvvuig=="
    },
    "body-parser": {
      "version": "1.19.0",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.19.0.tgz",
      "integrity": "sha512-dhEPs72UPbDnAQJ9ZKMNTP6ptJaionhP5cBb541nXPlW60Jepo9RV/a4fX4XWW9CuFNK22krhrj1+rgzifNCsw==",
      "requires": {
        "bytes": "3.1.0",
        "content-type": "~1.0.4",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "http-errors": "1.7.2",
        "iconv-lite": "0.4.24",
        "on-finished": "~2.3.0",
        "qs": "6.7.0",
        "raw-body": "2.4.0",
        "type-is": "~1.6.17"
      }
    },
    "bytes": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.0.tgz",
      "integrity": "sha512-zauLjrfCG+xvoyaqLoV8bLVXXNGC4JqlxFCutSDWA6fJrTo2ZuvLYTqZ7aHBLZSMOopbzwv8f+wZcVzfVTI2Dg=="
    },
    "callsite": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/callsite/-/callsite-1.0.0.tgz",
      "integrity": "sha1-KAOY5dZkvXQDi28JBRU+borxvCA="
    },
    "chownr": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-1.1.4.tgz",
      "integrity": "sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg=="
    },
    "clean-css": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/clean-css/-/clean-css-4.2.3.tgz",
      "integrity": "sha512-VcMWDN54ZN/DS+g58HYL5/n4Zrqe8vHJpGA8KdgUXFU4fuP/aHNw8eld9SyEIyabIMJX/0RaY/fplOo5hYLSFA==",
      "requires": {
        "source-map": "~0.6.0"
      }
    },
    "code-point-at": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/code-point-at/-/code-point-at-1.1.0.tgz",
      "integrity": "sha1-DQcLTQQ6W+ozovGkDi7bPZpMz3c="
    },
    "commander": {
      "version": "2.20.3",
      "resolved": "https://registry.npmjs.org/commander/-/commander-2.20.3.tgz",
      "integrity": "sha512-GpVkmM8vF2vQUkj2LvZmD35JxeJOLCwJ9cUkugyk2nuhbv3+mJvpLYYt+0+USMxE+oj+ey/lJEnhZw75x/OMcQ=="
    },
    "component-bind": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/component-bind/-/component-bind-1.0.0.tgz",
      "integrity": "sha1-AMYIq33Nk4l8AAllGx06jh5zu9E="
    },
    "component-emitter": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.2.1.tgz",
      "integrity": "sha1-E3kY1teCg/ffemt8WmPhQOaUJeY="
    },
    "component-inherit": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/component-inherit/-/component-inherit-0.0.3.tgz",
      "integrity": "sha1-ZF/ErfWLcrZJ1crmUTVhnbJv8UM="
    },
    "console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha1-PXz0Rk22RG6mRL9LOVB/mFEAjo4="
    },
    "content-disposition": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.3.tgz",
      "integrity": "sha512-ExO0774ikEObIAEV9kDo50o+79VCUdEB6n6lzKgGwupcVeRlhrj3qGAfwq8G6uBJjkqLrhT0qEYFcWng8z1z0g==",
      "requires": {
        "safe-buffer": "5.1.2"
      }
    },
    "content-type": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.4.tgz",
      "integrity": "sha512-hIP3EEPs8tB9AT1L+NUqtwOAps4mk2Zob89MWXMHjHWg9milF/j4osnnQLXBCBFBk/tvIG/tUc9mOUJiPBhPXA=="
    },
    "cookie": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.4.0.tgz",
      "integrity": "sha512-+Hp8fLp57wnUSt0tY0tHEXh4voZRDnoIrZPqlo3DPiI4y9lwg/jqx+1Om94/W6ZaPDOUbnjOt/99w66zk+l1Xg=="
    },
    "cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha1-4wOogrNCzD7oylE6eZmXNNqzriw="
    },
    "core-util-is": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.2.tgz",
      "integrity": "sha1-tf1UIgqivFq1eqtxQMlAdUUDwac="
    },
    "crypto-js": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/crypto-js/-/crypto-js-3.3.0.tgz",
      "integrity": "sha512-DIT51nX0dCfKltpRiXV+/TVZq+Qq2NgF4644+K7Ttnla7zEzqc+kjJyiB96BHNyUTBxyjzRcZYpUdZa+QAqi6Q=="
    },
    "debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "decompress-response": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-4.2.1.tgz",
      "integrity": "sha512-jOSne2qbyE+/r8G1VU+G/82LBs2Fs4LAsTiLSHOCOMZQl2OKZ6i8i4IyHemTe+/yIXOtTcRQMzPcgyhoFlqPkw==",
      "requires": {
        "mimic-response": "^2.0.0"
      }
    },
    "deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA=="
    },
    "delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha1-hMbhWbgZBP3KWaDvRM2HDTElD5o="
    },
    "denque": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/denque/-/denque-1.4.1.tgz",
      "integrity": "sha512-OfzPuSZKGcgr96rf1oODnfjqBFmr1DVoc/TrItj3Ohe0Ah1C5WX5Baquw/9U9KovnQ88EqmJbD66rKYUQYN1tQ=="
    },
    "depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha1-m81S4UwJd2PnSbJ0xDRu0uVgtak="
    },
    "destroy": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.0.4.tgz",
      "integrity": "sha1-l4hXRCxEdJ5CBmE+N5RiBYJqvYA="
    },
    "detect-libc": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-1.0.3.tgz",
      "integrity": "sha1-+hN8S9aY7fVc1c0CrFWfkaTEups="
    },
    "ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha1-WQxhFWsK4vTwJVcyoViyZrxWsh0="
    },
    "encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha1-rT/0yG7C0CkyL1oCw6mmBslbP1k="
    },
    "end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "requires": {
        "once": "^1.4.0"
      }
    },
    "engine.io": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/engine.io/-/engine.io-3.4.0.tgz",
      "integrity": "sha512-XCyYVWzcHnK5cMz7G4VTu2W7zJS7SM1QkcelghyIk/FmobWBtXE7fwhBusEKvCSqc3bMh8fNFMlUkCKTFRxH2w==",
      "requires": {
        "accepts": "~1.3.4",
        "base64id": "2.0.0",
        "cookie": "0.3.1",
        "debug": "~4.1.0",
        "engine.io-parser": "~2.2.0",
        "ws": "^7.1.2"
      },
      "dependencies": {
        "cookie": {
          "version": "0.3.1",
          "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.3.1.tgz",
          "integrity": "sha1-5+Ch+e9DtMi6klxcWpboBtFoc7s="
        },
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "engine.io-client": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/engine.io-client/-/engine.io-client-3.4.0.tgz",
      "integrity": "sha512-a4J5QO2k99CM2a0b12IznnyQndoEvtA4UAldhGzKqnHf42I3Qs2W5SPnDvatZRcMaNZs4IevVicBPayxYt6FwA==",
      "requires": {
        "component-emitter": "1.2.1",
        "component-inherit": "0.0.3",
        "debug": "~4.1.0",
        "engine.io-parser": "~2.2.0",
        "has-cors": "1.1.0",
        "indexof": "0.0.1",
        "parseqs": "0.0.5",
        "parseuri": "0.0.5",
        "ws": "~6.1.0",
        "xmlhttprequest-ssl": "~1.5.4",
        "yeast": "0.1.2"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        },
        "ws": {
          "version": "6.1.4",
          "resolved": "https://registry.npmjs.org/ws/-/ws-6.1.4.tgz",
          "integrity": "sha512-eqZfL+NE/YQc1/ZynhojeV8q+H050oR8AZ2uIev7RU10svA9ZnJUddHcOUZTJLinZ9yEfdA2kSATS2qZK5fhJA==",
          "requires": {
            "async-limiter": "~1.0.0"
          }
        }
      }
    },
    "engine.io-parser": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/engine.io-parser/-/engine.io-parser-2.2.0.tgz",
      "integrity": "sha512-6I3qD9iUxotsC5HEMuuGsKA0cXerGz+4uGcXQEkfBidgKf0amsjrrtwcbwK/nzpZBxclXlV7gGl9dgWvu4LF6w==",
      "requires": {
        "after": "0.8.2",
        "arraybuffer.slice": "~0.0.7",
        "base64-arraybuffer": "0.1.5",
        "blob": "0.0.5",
        "has-binary2": "~1.0.2"
      }
    },
    "escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha1-Aljq5NPQwJdN4cFpGI7wBR0dGYg="
    },
    "etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha1-Qa4u62XvpiJorr/qg6x9eSmbCIc="
    },
    "expand-template": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/expand-template/-/expand-template-2.0.3.tgz",
      "integrity": "sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg=="
    },
    "express": {
      "version": "4.17.1",
      "resolved": "https://registry.npmjs.org/express/-/express-4.17.1.tgz",
      "integrity": "sha512-mHJ9O79RqluphRrcw2X/GTh3k9tVv8YcoyY4Kkh4WDMUYKRZUq0h1o0w2rrrxBqM7VoeUVqgb27xlEMXTnYt4g==",
      "requires": {
        "accepts": "~1.3.7",
        "array-flatten": "1.1.1",
        "body-parser": "1.19.0",
        "content-disposition": "0.5.3",
        "content-type": "~1.0.4",
        "cookie": "0.4.0",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "~1.1.2",
        "fresh": "0.5.2",
        "merge-descriptors": "1.0.1",
        "methods": "~1.1.2",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.7",
        "proxy-addr": "~2.0.5",
        "qs": "6.7.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.1.2",
        "send": "0.17.1",
        "serve-static": "1.14.1",
        "setprototypeof": "1.1.1",
        "statuses": "~1.5.0",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      }
    },
    "express-minify": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/express-minify/-/express-minify-1.0.0.tgz",
      "integrity": "sha512-04/iYxB79jGeNZBBkbAW7L7FMG4Wtu78F1SayXIKiJD6MfqYnOI3DD8no7QOntgedYCdYUpj+Skg8QWR/2WnMQ==",
      "requires": {
        "clean-css": "^4.1.7",
        "on-headers": "^1.0.1",
        "uglify-js": "^3.0.28"
      }
    },
    "finalhandler": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.1.2.tgz",
      "integrity": "sha512-aAWcW57uxVNrQZqFXjITpW3sIUQmHGG3qSb9mUah9MgMC4NeWhNOlNjXEYq3HjRAvL6arUviZGGJsBg6z0zsWA==",
      "requires": {
        "debug": "2.6.9",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "on-finished": "~2.3.0",
        "parseurl": "~1.3.3",
        "statuses": "~1.5.0",
        "unpipe": "~1.0.0"
      }
    },
    "forwarded": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.1.2.tgz",
      "integrity": "sha1-mMI9qxF1ZXuMBXPozszZGw/xjIQ="
    },
    "fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha1-PYyt2Q2XZWn6g1qx+OSyOhBWBac="
    },
    "fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow=="
    },
    "gauge": {
      "version": "2.7.4",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-2.7.4.tgz",
      "integrity": "sha1-LANAXHU4w51+s3sxcCLjJfsBi/c=",
      "requires": {
        "aproba": "^1.0.3",
        "console-control-strings": "^1.0.0",
        "has-unicode": "^2.0.0",
        "object-assign": "^4.1.0",
        "signal-exit": "^3.0.0",
        "string-width": "^1.0.1",
        "strip-ansi": "^3.0.1",
        "wide-align": "^1.1.0"
      }
    },
    "github-from-package": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/github-from-package/-/github-from-package-0.0.0.tgz",
      "integrity": "sha1-l/tdlr/eiXMxPyDoKI75oWf6ZM4="
    },
    "has-binary2": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has-binary2/-/has-binary2-1.0.3.tgz",
      "integrity": "sha512-G1LWKhDSvhGeAQ8mPVQlqNcOB2sJdwATtZKl2pDKKHfpf/rYj24lkinxf69blJbnsvtqqNU+L3SL50vzZhXOnw==",
      "requires": {
        "isarray": "2.0.1"
      },
      "dependencies": {
        "isarray": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.1.tgz",
          "integrity": "sha1-o32U7ZzaLVmGXJ92/llu4fM4dB4="
        }
      }
    },
    "has-cors": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-cors/-/has-cors-1.1.0.tgz",
      "integrity": "sha1-XkdHk/fqmEPRu5nCPu9J/xJv/zk="
    },
    "has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha1-4Ob+aijPUROIVeCG0Wkedx3iqLk="
    },
    "http-errors": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.7.2.tgz",
      "integrity": "sha512-uUQBt3H/cSIVfch6i1EuPNy/YsRSOUBXTVfZ+yR7Zjez3qjBz6i9+i4zjNaoqcoFVI4lQJ5plg63TvGfRSDCRg==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.3",
        "setprototypeof": "1.1.1",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.0"
      },
      "dependencies": {
        "inherits": {
          "version": "2.0.3",
          "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.3.tgz",
          "integrity": "sha1-Yzwsg+PaQqUC9SRmAiSA9CCCYd4="
        }
      }
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "indexof": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/indexof/-/indexof-0.0.1.tgz",
      "integrity": "sha1-gtwzbSMrkGIXnQWrMpOmYFn9Q10="
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "ini": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.5.tgz",
      "integrity": "sha512-RZY5huIKCMRWDUqZlEi72f/lmXKMvuszcMBduliQ3nnWbx9X/ZBQO7DijMEYS9EhHBb2qacRUMtC7svLwe0lcw=="
    },
    "iota.lib.js": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/iota.lib.js/-/iota.lib.js-0.5.2.tgz",
      "integrity": "sha512-2+4D8kFAxPjkBS4oDmnoNxoYSAYnl23C5OTLoc2ZtSrFmFsPRb5rOjmEX4WEn2RocFMiV3Ndjfqk5ct469Ayjw==",
      "requires": {
        "async": "^2.5.0",
        "bignumber.js": "^4.1.0",
        "crypto-js": "^3.1.9-1",
        "xmlhttprequest": "^1.8.0"
      }
    },
    "ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g=="
    },
    "is-fullwidth-code-point": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-1.0.0.tgz",
      "integrity": "sha1-754xOG8DGn8NZDr4L95QxFfvAMs=",
      "requires": {
        "number-is-nan": "^1.0.0"
      }
    },
    "isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha1-u5NdSFgsuhaMBoNJV6VKPgcSTxE="
    },
    "lodash": {
      "version": "4.17.15",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz",
      "integrity": "sha512-8xOcRHvCjnocdS5cpwXQXVzmmh5e5+saE2QGoeQmbKmRS6J3VQppPOIt0MnmE+4xlZoumy0GPG0D0MVIQbNA1A=="
    },
    "media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha1-hxDXrwqmJvj/+hzgAWhUUmMlV0g="
    },
    "merge-descriptors": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.1.tgz",
      "integrity": "sha1-sAqqVW3YtEVoFQ7J0blT8/kMu2E="
    },
    "methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha1-VSmk1nZUE07cxSZmVoNbD4Ua/O4="
    },
    "mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg=="
    },
    "mime-db": {
      "version": "1.43.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.43.0.tgz",
      "integrity": "sha512-+5dsGEEovYbT8UY9yD7eE4XTc4UwJ1jBYlgaQQF38ENsKR3wj/8q8RFZrF9WIZpB2V1ArTVFUva8sAul1NzRzQ=="
    },
    "mime-types": {
      "version": "2.1.26",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.26.tgz",
      "integrity": "sha512-01paPWYgLrkqAyrlDorC1uDwl2p3qZT7yl806vW7DvDoxwXi46jsjFbg+WdwotBIk6/MbEhO/dh5aZ5sNj/dWQ==",
      "requires": {
        "mime-db": "1.43.0"
      }
    },
    "mimic-response": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-2.1.0.tgz",
      "integrity": "sha512-wXqjST+SLt7R009ySCglWBCFpjUygmCIfD790/kVbiGmUgfYGuB14PiTd5DwVxSV4NcYHjzMkoj5LjQZwTQLEA=="
    },
    "minimist": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.0.tgz",
      "integrity": "sha1-o1AIsg9BOD7sH7kU9M1d95omQoQ="
    },
    "mkdirp": {
      "version": "0.5.1",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz",
      "integrity": "sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=",
      "requires": {
        "minimist": "0.0.8"
      },
      "dependencies": {
        "minimist": {
          "version": "0.0.8",
          "resolved": "https://registry.npmjs.org/minimist/-/minimist-0.0.8.tgz",
          "integrity": "sha1-hX/Kv8M5fSYluCKCYuhqp6ARsF0="
        }
      }
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "nan": {
      "version": "2.14.0",
      "resolved": "https://registry.npmjs.org/nan/-/nan-2.14.0.tgz",
      "integrity": "sha512-INOFj37C7k3AfaNTtX8RhsTw7qRy7eLET14cROi9+5HAVbbHuIWUHEauBv5qT4Av2tWasiTY1Jw6puUNqRJXQg=="
    },
    "napi-build-utils": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/napi-build-utils/-/napi-build-utils-1.0.1.tgz",
      "integrity": "sha512-boQj1WFgQH3v4clhu3mTNfP+vOBxorDlE8EKiMjUlLG3C4qAESnn9AxIOkFgTR2c9LtzNjPrjS60cT27ZKBhaA=="
    },
    "negotiator": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.2.tgz",
      "integrity": "sha512-hZXc7K2e+PgeI1eDBe/10Ard4ekbfrrqG8Ep+8Jmf4JID2bNg7NvCPOZN+kfF574pFQI7mum2AUqDidoKqcTOw=="
    },
    "node-abi": {
      "version": "2.15.0",
      "resolved": "https://registry.npmjs.org/node-abi/-/node-abi-2.15.0.tgz",
      "integrity": "sha512-FeLpTS0F39U7hHZU1srAK4Vx+5AHNVOTP+hxBNQknR/54laTHSFIJkDWDqiquY1LeLUgTfPN7sLPhMubx0PLAg==",
      "requires": {
        "semver": "^5.4.1"
      }
    },
    "noop-logger": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/noop-logger/-/noop-logger-0.1.1.tgz",
      "integrity": "sha1-lKKxYzxPExdVMAfYlm/Q6EG2pMI="
    },
    "npmlog": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-4.1.2.tgz",
      "integrity": "sha512-2uUqazuKlTaSI/dC8AzicUck7+IrEaOnN/e0jd3Xtt1KcGpwx30v50mL7oPyr/h9bL3E4aZccVwpwP+5W9Vjkg==",
      "requires": {
        "are-we-there-yet": "~1.1.2",
        "console-control-strings": "~1.1.0",
        "gauge": "~2.7.3",
        "set-blocking": "~2.0.0"
      }
    },
    "number-is-nan": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/number-is-nan/-/number-is-nan-1.0.1.tgz",
      "integrity": "sha1-CXtgK1NCKlIsGvuHkDGDNpQaAR0="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "object-component": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/object-component/-/object-component-0.0.3.tgz",
      "integrity": "sha1-8MaapQ78lbhmwYb0AKM3acsvEpE="
    },
    "on-finished": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.3.0.tgz",
      "integrity": "sha1-IPEzZIGwg811M3mSoWlxqi2QaUc=",
      "requires": {
        "ee-first": "1.1.1"
      }
    },
    "on-headers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/on-headers/-/on-headers-1.0.2.tgz",
      "integrity": "sha512-pZAE+FJLoyITytdqK0U5s+FIpjN0JP3OzFi/u8Rx+EV5/W+JTWGXG8xFzevE7AjBfDqHv/8vL8qQsIhHnqRkrA=="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "requires": {
        "wrappy": "1"
      }
    },
    "parseqs": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/parseqs/-/parseqs-0.0.5.tgz",
      "integrity": "sha1-1SCKNzjkZ2bikbouoXNoSSGouJ0=",
      "requires": {
        "better-assert": "~1.0.0"
      }
    },
    "parseuri": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/parseuri/-/parseuri-0.0.5.tgz",
      "integrity": "sha1-gCBKUNTbt3m/3G6+J3jZDkvOMgo=",
      "requires": {
        "better-assert": "~1.0.0"
      }
    },
    "parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ=="
    },
    "path-to-regexp": {
      "version": "0.1.7",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.7.tgz",
      "integrity": "sha1-32BBeABfUi8V60SQ5yR6G/qmf4w="
    },
    "prebuild-install": {
      "version": "5.3.3",
      "resolved": "https://registry.npmjs.org/prebuild-install/-/prebuild-install-5.3.3.tgz",
      "integrity": "sha512-GV+nsUXuPW2p8Zy7SarF/2W/oiK8bFQgJcncoJ0d7kRpekEA0ftChjfEaF9/Y+QJEc/wFR7RAEa8lYByuUIe2g==",
      "requires": {
        "detect-libc": "^1.0.3",
        "expand-template": "^2.0.3",
        "github-from-package": "0.0.0",
        "minimist": "^1.2.0",
        "mkdirp": "^0.5.1",
        "napi-build-utils": "^1.0.1",
        "node-abi": "^2.7.0",
        "noop-logger": "^0.1.1",
        "npmlog": "^4.0.1",
        "pump": "^3.0.0",
        "rc": "^1.2.7",
        "simple-get": "^3.0.3",
        "tar-fs": "^2.0.0",
        "tunnel-agent": "^0.6.0",
        "which-pm-runs": "^1.0.0"
      }
    },
    "process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag=="
    },
    "proxy-addr": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.6.tgz",
      "integrity": "sha512-dh/frvCBVmSsDYzw6n926jv974gddhkFPfiN8hPOi30Wax25QZyZEGveluCgliBnqmuM+UJmBErbAUFIoDbjOw==",
      "requires": {
        "forwarded": "~0.1.2",
        "ipaddr.js": "1.9.1"
      }
    },
    "pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "requires": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "qs": {
      "version": "6.7.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.7.0.tgz",
      "integrity": "sha512-VCdBRNFTX1fyE7Nb6FYoURo/SPe62QCaAyzJvUjwRaIsc+NePBEniHlvxFmmX56+HZphIGtV0XeCirBtpDrTyQ=="
    },
    "range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg=="
    },
    "raw-body": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.4.0.tgz",
      "integrity": "sha512-4Oz8DUIwdvoa5qMJelxipzi/iJIi40O5cGV1wNYp5hvZP8ZN0T+jiNkL0QepXs+EsQ9XJ8ipEDoiH70ySUJP3Q==",
      "requires": {
        "bytes": "3.1.0",
        "http-errors": "1.7.2",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      }
    },
    "rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "requires": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      }
    },
    "readable-stream": {
      "version": "2.3.7",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.7.tgz",
      "integrity": "sha512-Ebho8K4jIbHAxnuxi7o42OrZgF/ZTNcsZj6nRKyUmkhLFq8CHItp/fy6hQZuZmP/n3yZ9VBUbp4zz/mX8hmYPw==",
      "requires": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg=="
    },
    "semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
    },
    "send": {
      "version": "0.17.1",
      "resolved": "https://registry.npmjs.org/send/-/send-0.17.1.tgz",
      "integrity": "sha512-BsVKsiGcQMFwT8UxypobUKyv7irCNRHk1T0G680vk88yf6LBByGcZJOTJCrTP2xVN6yI+XjPJcNuE3V4fT9sAg==",
      "requires": {
        "debug": "2.6.9",
        "depd": "~1.1.2",
        "destroy": "~1.0.4",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "~1.7.2",
        "mime": "1.6.0",
        "ms": "2.1.1",
        "on-finished": "~2.3.0",
        "range-parser": "~1.2.1",
        "statuses": "~1.5.0"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.1",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.1.tgz",
          "integrity": "sha512-tgp+dl5cGk28utYktBsrFqA7HKgrhgPsg6Z/EfhWI4gl1Hwq8B/GmY/0oXZ6nF8hDVesS/FpnYaD/kOWhYQvyg=="
        }
      }
    },
    "serve-static": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.14.1.tgz",
      "integrity": "sha512-JMrvUwE54emCYWlTI+hGrGv5I8dEwmco/00EvkzIIsR7MqrHonbD9pO2MOfFnpFntl7ecpZs+3mW+XbQZu9QCg==",
      "requires": {
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.17.1"
      }
    },
    "set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha1-BF+XgtARrppoA93TgrJDkrPYkPc="
    },
    "setprototypeof": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.1.1.tgz",
      "integrity": "sha512-JvdAWfbXeIGaZ9cILp38HntZSFSo3mWg6xGcJJsd+d4aRMOqauag1C63dJfDw7OaMYwEbHMOxEZ1lqVRYP2OAw=="
    },
    "signal-exit": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.2.tgz",
      "integrity": "sha1-tf3AjxKH6hF4Yo5BXiUTK3NkbG0="
    },
    "simple-concat": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/simple-concat/-/simple-concat-1.0.0.tgz",
      "integrity": "sha1-c0TLuLbib7J9ZrL8hvn21Zl1IcY="
    },
    "simple-get": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/simple-get/-/simple-get-3.1.0.tgz",
      "integrity": "sha512-bCR6cP+aTdScaQCnQKbPKtJOKDp/hj9EDLJo3Nw4y1QksqaovlW/bnptB6/c1e+qmNIDHRK+oXFDdEqBT8WzUA==",
      "requires": {
        "decompress-response": "^4.2.0",
        "once": "^1.3.1",
        "simple-concat": "^1.0.0"
      }
    },
    "socket.io": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/socket.io/-/socket.io-2.3.0.tgz",
      "integrity": "sha512-2A892lrj0GcgR/9Qk81EaY2gYhCBxurV0PfmmESO6p27QPrUK1J3zdns+5QPqvUYK2q657nSj0guoIil9+7eFg==",
      "requires": {
        "debug": "~4.1.0",
        "engine.io": "~3.4.0",
        "has-binary2": "~1.0.2",
        "socket.io-adapter": "~1.1.0",
        "socket.io-client": "2.3.0",
        "socket.io-parser": "~3.4.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "socket.io-adapter": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/socket.io-adapter/-/socket.io-adapter-1.1.2.tgz",
      "integrity": "sha512-WzZRUj1kUjrTIrUKpZLEzFZ1OLj5FwLlAFQs9kuZJzJi5DKdU7FsWc36SNmA8iDOtwBQyT8FkrriRM8vXLYz8g=="
    },
    "socket.io-client": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/socket.io-client/-/socket.io-client-2.3.0.tgz",
      "integrity": "sha512-cEQQf24gET3rfhxZ2jJ5xzAOo/xhZwK+mOqtGRg5IowZsMgwvHwnf/mCRapAAkadhM26y+iydgwsXGObBB5ZdA==",
      "requires": {
        "backo2": "1.0.2",
        "base64-arraybuffer": "0.1.5",
        "component-bind": "1.0.0",
        "component-emitter": "1.2.1",
        "debug": "~4.1.0",
        "engine.io-client": "~3.4.0",
        "has-binary2": "~1.0.2",
        "has-cors": "1.1.0",
        "indexof": "0.0.1",
        "object-component": "0.0.3",
        "parseqs": "0.0.5",
        "parseuri": "0.0.5",
        "socket.io-parser": "~3.3.0",
        "to-array": "0.1.4"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "isarray": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.1.tgz",
          "integrity": "sha1-o32U7ZzaLVmGXJ92/llu4fM4dB4="
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        },
        "socket.io-parser": {
          "version": "3.3.0",
          "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.3.0.tgz",
          "integrity": "sha512-hczmV6bDgdaEbVqhAeVMM/jfUfzuEZHsQg6eOmLgJht6G3mPKMxYm75w2+qhAQZ+4X+1+ATZ+QFKeOZD5riHng==",
          "requires": {
            "component-emitter": "1.2.1",
            "debug": "~3.1.0",
            "isarray": "2.0.1"
          },
          "dependencies": {
            "debug": {
              "version": "3.1.0",
              "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
              "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
              "requires": {
                "ms": "2.0.0"
              }
            },
            "ms": {
              "version": "2.0.0",
              "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
              "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
            }
          }
        }
      }
    },
    "socket.io-parser": {
      "version": "3.4.0",
      "resolved": "https://registry.npmjs.org/socket.io-parser/-/socket.io-parser-3.4.0.tgz",
      "integrity": "sha512-/G/VOI+3DBp0+DJKW4KesGnQkQPFmUCbA/oO2QGT6CWxU7hLGWqU3tyuzeSK/dqcyeHsQg1vTe9jiZI8GU9SCQ==",
      "requires": {
        "component-emitter": "1.2.1",
        "debug": "~4.1.0",
        "isarray": "2.0.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "isarray": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/isarray/-/isarray-2.0.1.tgz",
          "integrity": "sha1-o32U7ZzaLVmGXJ92/llu4fM4dB4="
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha1-Fhx9rBd2Wf2YEfQ3cfqZOBR4Yow="
    },
    "string-width": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-1.0.2.tgz",
      "integrity": "sha1-EYvfW4zcUaKn5w0hHgfisLmxB9M=",
      "requires": {
        "code-point-at": "^1.0.0",
        "is-fullwidth-code-point": "^1.0.0",
        "strip-ansi": "^3.0.0"
      }
    },
    "string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "requires": {
        "safe-buffer": "~5.1.0"
      }
    },
    "strip-ansi": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-3.0.1.tgz",
      "integrity": "sha1-ajhfuIU9lS1f8F0Oiq+UJ43GPc8=",
      "requires": {
        "ansi-regex": "^2.0.0"
      }
    },
    "strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha1-PFMZQukIwml8DsNEhYwobHygpgo="
    },
    "tar-fs": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-2.0.0.tgz",
      "integrity": "sha512-vaY0obB6Om/fso8a8vakQBzwholQ7v5+uy+tF3Ozvxv1KNezmVQAiWtcNmMHFSFPqL3dJA8ha6gdtFbfX9mcxA==",
      "requires": {
        "chownr": "^1.1.1",
        "mkdirp": "^0.5.1",
        "pump": "^3.0.0",
        "tar-stream": "^2.0.0"
      }
    },
    "tar-stream": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.1.1.tgz",
      "integrity": "sha512-GZjLk64XcE/58qwIc1ZfXGqTSE4OutPMEkfBE/oh9eJ4x1eMRjYkgrLrav7PzddpvIpSJSGi8FgNNYXdB9Vumg==",
      "requires": {
        "bl": "^4.0.1",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "dependencies": {
        "readable-stream": {
          "version": "3.6.0",
          "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.0.tgz",
          "integrity": "sha512-BViHy7LKeTz4oNnkcLJ+lVSL6vpiFeX6/d3oSH8zCW7UxP2onchk+vTGB143xuFjHS3deTgkKoXXymXqymiIdA==",
          "requires": {
            "inherits": "^2.0.3",
            "string_decoder": "^1.1.1",
            "util-deprecate": "^1.0.1"
          }
        }
      }
    },
    "to-array": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/to-array/-/to-array-0.1.4.tgz",
      "integrity": "sha1-F+bBH3PdTz10zaek/zI46a2b+JA="
    },
    "toidentifier": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.0.tgz",
      "integrity": "sha512-yaOH/Pk/VEhBWWTlhI+qXxDFXlejDGcQipMlyxda9nthulaxLZUNcUqFxokp0vcYnvteJln5FNQDRrxj3YcbVw=="
    },
    "tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha1-J6XeoGs2sEoKmWZ3SykIaPD8QP0=",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "requires": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      }
    },
    "uglify-es": {
      "version": "3.3.9",
      "resolved": "https://registry.npmjs.org/uglify-es/-/uglify-es-3.3.9.tgz",
      "integrity": "sha512-r+MU0rfv4L/0eeW3xZrd16t4NZfK8Ld4SWVglYBb7ez5uXFWHuVRs6xCTrf1yirs9a4j4Y27nn7SRfO6v67XsQ==",
      "requires": {
        "commander": "~2.13.0",
        "source-map": "~0.6.1"
      },
      "dependencies": {
        "commander": {
          "version": "2.13.0",
          "resolved": "https://registry.npmjs.org/commander/-/commander-2.13.0.tgz",
          "integrity": "sha512-MVuS359B+YzaWqjCL/c+22gfryv+mCBPHAv3zyVI2GN8EY6IRP8VwtasXn8jyyhvvq84R4ImN1OKRtcbIasjYA=="
        }
      }
    },
    "uglify-js": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.8.0.tgz",
      "integrity": "sha512-ugNSTT8ierCsDHso2jkBHXYrU8Y5/fY2ZUprfrJUiD7YpuFvV4jODLFmb3h4btQjqr5Nh4TX4XtgDfCU1WdioQ==",
      "requires": {
        "commander": "~2.20.3",
        "source-map": "~0.6.1"
      }
    },
    "unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha1-sr9O6FFKrmFltIF4KdIbLvSZBOw="
    },
    "util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha1-RQ1Nyfpw3nMnYvvS1KKJgUGaDM8="
    },
    "utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha1-n5VxD1CiZ5R7LMwSR0HBAoQn5xM="
    },
    "vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha1-IpnwLG3tMNSllhsLn3RSShj2NPw="
    },
    "which-pm-runs": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/which-pm-runs/-/which-pm-runs-1.0.0.tgz",
      "integrity": "sha1-Zws6+8VS4LVd9rd4DKdGFfI60cs="
    },
    "wide-align": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.3.tgz",
      "integrity": "sha512-QGkOQc8XL6Bt5PwnsExKBPuMKBxnGxWWW3fU55Xt4feHozMUhdUMaBCk290qpm/wG5u/RSKzwdAC4i51YigihA==",
      "requires": {
        "string-width": "^1.0.2 || 2"
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "ws": {
      "version": "7.2.1",
      "resolved": "https://registry.npmjs.org/ws/-/ws-7.2.1.tgz",
      "integrity": "sha512-sucePNSafamSKoOqoNfBd8V0StlkzJKL2ZAhGQinCfNQ+oacw+Pk7lcdAElecBF2VkLNZRiIb5Oi1Q5lVUVt2A=="
    },
    "xmlhttprequest": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/xmlhttprequest/-/xmlhttprequest-1.8.0.tgz",
      "integrity": "sha1-Z/4HXFwk/vOfnWX197f+dRcZaPw="
    },
    "xmlhttprequest-ssl": {
      "version": "1.5.5",
      "resolved": "https://registry.npmjs.org/xmlhttprequest-ssl/-/xmlhttprequest-ssl-1.5.5.tgz",
      "integrity": "sha1-wodrBhaKrcQOV9l+gRkayPQ5iz4="
    },
    "yeast": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/yeast/-/yeast-0.1.2.tgz",
      "integrity": "sha1-AI4G2AlDIMNy28L47XagymyKxBk="
    },
    "zeromq": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/zeromq/-/zeromq-5.2.0.tgz",
      "integrity": "sha512-qsckhCmrg6et6zrAJytC971SSN/4iLxKgkXK1Wqn2Gij5KXMY+TA+3cy/iFwehaWdU5usg5HNOOgaBdjSqtCVw==",
      "requires": {
        "nan": "^2.14.0",
        "prebuild-install": "^5.3.2"
      }
    }
  }
}

'''
'''--- package.json ---
{
  "name": "iotatangle",
  "version": "1.0.1",
  "description": "IOTA Tangle Glumb.de Visualiser",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "Maximilian Beck <maximilian@glumb.de> (http://glumb.de/)",
  "license": "MIT",
  "dependencies": {
    "denque": "^1.4.1",
    "express": "^4.17.1",
    "express-minify": "^1.0.0",
    "iota.lib.js": "^0.5.2",
    "socket.io": "^2.3.0",
    "uglify-es": "^3.3.9",
    "zeromq": "^5.2.0"
  }
}

'''
'''--- server/app.js ---
/* eslint-disable no-console */
const express = require('express')
const app = express()
const server = require('http').Server(app)
const io = require('socket.io')(server, {
    transports: ['websocket'],
})
const minify = require('express-minify')
const uglifyEs = require('uglify-es')
const sub = require('./sub.js')
const fs = require('fs')
const Deque = require('denque')
const IOTA = require('iota.lib.js')
const Cleanup = require('./cleanup')

module.exports = function initTangleViewer(NAME, LSM_NODE, ZMQ_ENDPOINT, WEB_PORT, FRONTEND_CONFIG) {

    const txQueue = new Deque()
    const snQueue = new Deque()
    const mileStoneQueue = ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '']

    let visitorCounter = 0
    let filesavedCounter = 0

    WEB_PORT = process.argv[2] || WEB_PORT
    const MAX_QUEUE_LENGTH = 1800

    // load data
    const data = JSON.parse(fs.readFileSync(NAME + 'data.json'))
    if (data) {
        console.log('loaded state from file')

        visitorCounter = data.visitorCounter
        filesavedCounter = data.filesavedCounter | 0
        filesavedCounter++

        console.log('filesavedCounter', filesavedCounter)

        for (const tx of data.tx)
            txQueue.push(tx)

        for (const sn of data.sn)
            snQueue.push(sn)

        for (const ms of data.ms) {
            mileStoneQueue.push(ms)
            mileStoneQueue.shift()
        }
    }

    Cleanup(() => {
        const data = {
            tx: txQueue.toArray(),
            sn: snQueue.toArray(),
            ms: mileStoneQueue,
            visitorCounter,
            filesavedCounter
        }
        console.log('saving state to file')
        fs.writeFileSync(NAME + 'data.json', JSON.stringify(data))
        console.log('state saved to file')
        process.exit()
    })

    console.log('listening on http://localhost:' + WEB_PORT)

    app.use(minify({
        cache: __dirname + '/' + NAME + 'cache',
        uglifyJsModule: uglifyEs,
    }))

    app.use(express.static(__dirname + '/../webroot'))

    server.listen(WEB_PORT)

    const Sub = new sub(ZMQ_ENDPOINT)

    Sub.on('tx', function (tx) {
        console.log('tx', tx.hash)
        txQueue.push(tx)
        if (txQueue.length > MAX_QUEUE_LENGTH) txQueue.shift()
        io.sockets.emit('tx', tx)
    })

    Sub.on('sn', function (sn) {
        console.log('sn', sn.hash)
        snQueue.push(sn)
        if (snQueue.length > MAX_QUEUE_LENGTH) snQueue.shift()
        io.sockets.emit('sn', sn)
    })

    let connectedCount = 0

    io.on('connection', function (socket) {
        socket.emit('config', FRONTEND_CONFIG)
        socket.emit('inittx', txQueue.toArray())
        socket.emit('initsn', snQueue.toArray())
        socket.emit('initms', mileStoneQueue)
        connectedCount += 1
        visitorCounter++
        console.log('connectedCount: ', connectedCount)
        console.log('visitorCounter: ', visitorCounter)
        socket.on('disconnect', function () {
            connectedCount -= 1
            console.log('connectedCount: ', connectedCount)
        })
    })

    const iota = new IOTA({
        'provider': LSM_NODE
    })

    console.log('connecting to LSM node:', LSM_NODE)

    function requestMilestone() {
        iota.api.getNodeInfo(function (error, data) {
            if (error) {
                console.error(error)
            } else {
                if (mileStoneQueue.indexOf(data.latestMilestone) <= 0) {
                    console.log('Milestone tx: ' + data.latestMilestone)
                    io.sockets.emit('ms', data.latestMilestone)
                    mileStoneQueue.push(data.latestMilestone)
                    mileStoneQueue.shift()
                }
            }
            setTimeout(requestMilestone, 20 * 1000)
        })
    }
    requestMilestone()
}

'''
'''--- server/cleanup.js ---
/* eslint-disable no-console */
// Object to capture process exits and call app specific cleanup function

function noOp() { }

module.exports = function Cleanup(callback) {

    // attach user callback to the process event emitter
    // if no callback, it will still exit gracefully on Ctrl-C
    callback = callback || noOp
    process.on('cleanup', callback)

    // do app specific cleaning before exiting
    process.on('exit', function () {
        process.emit('cleanup')
    })

    // catch ctrl+c event and exit normally
    process.on('SIGINT', function () {
        console.log('Ctrl-C...')
        process.exit(2)
    })

    process.on('SIGTERM', function () {
        console.log('SIGTERM')
        process.exit(0)
    })

    //catch uncaught exceptions, trace, then exit normally
    process.on('uncaughtException', function (e) {
        console.log('Uncaught Exception...')
        console.log(e.stack)
        process.exit(99)
    })
}

'''
'''--- server/mainnetApp.js ---
const Tangle = require('./app.js')

const NAME = 'mainnet' // name used for data file NAMEdata.json
const LSM_NODE = 'https://<CHANGEME>:443' // latest solid milestone node. sed for getting coordinator tx
const ZMQ_ENDPOINT = 'tcp://<CHANGEME>:5556' // used to get a livestream of all tx
const WEB_PORT = 80 // port the webserver will listen on
const FRONTEND_CONFIG = {
    networkName: 'main net' // displayed in the frontend
}

Tangle(NAME, LSM_NODE, ZMQ_ENDPOINT, WEB_PORT, FRONTEND_CONFIG)

'''
'''--- server/mainnetdata.json ---
{
    "tx": [],
    "sn": [],
    "ms": [],
    "visitorCounter": 0,
    "filesavedCounter": 0
}
'''
'''--- server/mockZMQ.js ---
/* eslint-disable */
const ZMQ_ENDPOINT = "tcp://127.0.0.1:5556";
const ZMQ_SEND_INTERVAL = 1000 / 600;
const TANGLE_WIDTH = 40;

const zmq = require("zeromq"),
  sock = zmq.socket("pub");

sock.bindSync(ZMQ_ENDPOINT);
console.log("creating ZMQ endpoint: ", ZMQ_ENDPOINT);

let hashRb = [],
  rbPointer = 0;

for (let i = 0; i < TANGLE_WIDTH; i++) {
  hashRb.push(Math.random());
}

setInterval(() => {
  let hash = Date.now(),
    address = "$addr$",
    value = Math.floor(Math.random() * 10),
    timestamp = Date.now(),
    current_index = 1,
    last_index = 0,
    bundle_hash = "$bundle_hash$",
    transaction_branch = hashRb[Math.floor(Math.random() * TANGLE_WIDTH)],
    transaction_trunk = hashRb[Math.floor(Math.random() * TANGLE_WIDTH)],
    tag = "$tag$";

    if(Math.random()<0.2){
        transaction_branch = Date.now() - 1000/ZMQ_SEND_INTERVAL
    }
  rbPointer = ++rbPointer % TANGLE_WIDTH;
  hashRb[rbPointer] = hash;

  elements = [];

  elements[0] = "tx";
  elements[1] = hash;
  elements[2] = address;
  elements[3] = value;
  elements[4] = "$obsolete_tag$";
  elements[5] = timestamp;
  elements[6] = current_index;
  elements[7] = last_index;
  elements[8] = bundle_hash;
  elements[9] = transaction_trunk;
  elements[10] = transaction_branch;
  elements[11] = "$arrival_time$";
  elements[12] = tag;

  const message = elements.join(" ");
//   console.log(message);
  sock.send(message);
}, ZMQ_SEND_INTERVAL);

'''
'''--- server/mocknetApp.js ---
const Tangle = require("./app.js");

const NAME = "mocknet"; // name used for data file NAMEdata.json
const LSM_NODE = "https://localhost:443"; // latest solid milestone node. sed for getting coordinator tx
const ZMQ_ENDPOINT = "tcp://127.0.0.1:5556"; // used to get a livestream of all tx
const WEB_PORT = 80; // port the webserver will listen on
const FRONTEND_CONFIG = {
  networkName: "mock net" // displayed in the frontend
};

Tangle(NAME, LSM_NODE, ZMQ_ENDPOINT, WEB_PORT, FRONTEND_CONFIG);

'''
'''--- server/mocknetdata.json ---
{"tx":[{"hash":"1566307516352","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516352","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516310","transaction_branch":"1566307516331"},{"hash":"1566307516355","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516355","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516331","transaction_branch":"1566307516336"},{"hash":"1566307516357","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516357","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516254","transaction_branch":"1566307516230"},{"hash":"1566307516360","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516360","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516283","transaction_branch":"1566307516259"},{"hash":"1566307516362","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516362","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516250","transaction_branch":"1566307516310"},{"hash":"1566307516365","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516365","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516283","transaction_branch":"1566307516264"},{"hash":"1566307516367","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516367","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516317","transaction_branch":"1566307516271"},{"hash":"1566307516370","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516370","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516357","transaction_branch":"1566307516252"},{"hash":"1566307516373","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516373","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516297","transaction_branch":"1566307516313"},{"hash":"1566307516375","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516375","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516254","transaction_branch":"1566307516320"},{"hash":"1566307516378","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516378","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516300","transaction_branch":"1566307516283"},{"hash":"1566307516380","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516380","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516378","transaction_branch":"1566307516310"},{"hash":"1566307516383","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516383","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516365","transaction_branch":"1566307516320"},{"hash":"1566307516385","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516385","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516266","transaction_branch":"1566307516310"},{"hash":"1566307516397","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516397","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516325","transaction_branch":"1566307516269"},{"hash":"1566307516400","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516400","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516331","transaction_branch":"1566307516360"},{"hash":"1566307516402","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516402","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516397","transaction_branch":"1566307516357"},{"hash":"1566307516404","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516404","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516317","transaction_branch":"1566307516400"},{"hash":"1566307516406","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516406","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516365","transaction_branch":"1566307516325"},{"hash":"1566307516408","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516408","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516281","transaction_branch":"1566307516370"},{"hash":"1566307516410","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516410","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516367","transaction_branch":"1566307516373"},{"hash":"1566307516412","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516412","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516360","transaction_branch":"1566307516317"},{"hash":"1566307516414","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516414","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516406","transaction_branch":"1566307516303"},{"hash":"1566307516416","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516416","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516412","transaction_branch":"1566307516367"},{"hash":"1566307516418","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516418","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516357","transaction_branch":"1566307516406"},{"hash":"1566307516420","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516420","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516325","transaction_branch":"1566307516317"},{"hash":"1566307516422","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516422","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516367","transaction_branch":"1566307516373"},{"hash":"1566307516424","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516424","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516408","transaction_branch":"1566307516328"},{"hash":"1566307516426","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516426","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516360","transaction_branch":"1566307516404"},{"hash":"1566307516428","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516428","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516424","transaction_branch":"1566307516410"},{"hash":"1566307516430","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516430","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516408","transaction_branch":"1566307516323"},{"hash":"1566307516447","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516447","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516420","transaction_branch":"1566307516357"},{"hash":"1566307516450","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516450","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516404","transaction_branch":"1566307516362"},{"hash":"1566307516452","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516452","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516430","transaction_branch":"1566307516370"},{"hash":"1566307516455","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516455","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516347","transaction_branch":"1566307516380"},{"hash":"1566307516457","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516457","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516385","transaction_branch":"1566307516416"},{"hash":"1566307516459","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516459","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516450","transaction_branch":"1566307516406"},{"hash":"1566307516461","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516461","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516365","transaction_branch":"1566307516370"},{"hash":"1566307516464","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516464","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516459","transaction_branch":"1566307516380"},{"hash":"1566307516466","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516466","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516365","transaction_branch":"1566307516397"},{"hash":"1566307516469","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516469","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516464","transaction_branch":"1566307516416"},{"hash":"1566307516471","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516471","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516362","transaction_branch":"1566307516455"},{"hash":"1566307516474","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516474","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516367","transaction_branch":"1566307516365"},{"hash":"1566307516476","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516476","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516367","transaction_branch":"1566307516474"},{"hash":"1566307516478","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516478","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516428","transaction_branch":"1566307516406"},{"hash":"1566307516481","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516481","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516452","transaction_branch":"1566307516459"},{"hash":"1566307516484","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516484","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516404","transaction_branch":"1566307516406"},{"hash":"1566307516497","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516497","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516471","transaction_branch":"1566307516452"},{"hash":"1566307516500","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516500","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516476","transaction_branch":"1566307516383"},{"hash":"1566307516503","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516503","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516497","transaction_branch":"1566307516402"},{"hash":"1566307516505","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516505","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516503","transaction_branch":"1566307516416"},{"hash":"1566307516508","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516508","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516452","transaction_branch":"1566307516385"},{"hash":"1566307516510","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516510","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516404","transaction_branch":"1566307516402"},{"hash":"1566307516512","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516512","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516471","transaction_branch":"1566307516410"},{"hash":"1566307516514","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516514","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516447","transaction_branch":"1566307516450"},{"hash":"1566307516516","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516516","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516402","transaction_branch":"1566307516412"},{"hash":"1566307516519","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516519","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516457","transaction_branch":"1566307516476"},{"hash":"1566307516521","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516521","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516428","transaction_branch":"1566307516422"},{"hash":"1566307516523","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516523","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516459","transaction_branch":"1566307516466"},{"hash":"1566307516525","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516525","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516505","transaction_branch":"1566307516503"},{"hash":"1566307516527","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516527","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516464","transaction_branch":"1566307516447"},{"hash":"1566307516530","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516530","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516416","transaction_branch":"1566307516430"},{"hash":"1566307516532","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516532","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516414","transaction_branch":"1566307516514"},{"hash":"1566307516547","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516547","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516508","transaction_branch":"1566307516519"},{"hash":"1566307516550","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516550","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516471","transaction_branch":"1566307516484"},{"hash":"1566307516552","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516552","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516525","transaction_branch":"1566307516459"},{"hash":"1566307516555","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516555","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516481","transaction_branch":"1566307516514"},{"hash":"1566307516558","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516558","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516455","transaction_branch":"1566307516552"},{"hash":"1566307516560","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516560","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516497","transaction_branch":"1566307516497"},{"hash":"1566307516562","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516562","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516514","transaction_branch":"1566307516455"},{"hash":"1566307516564","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516564","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516469","transaction_branch":"1566307516558"},{"hash":"1566307516566","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516566","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516469","transaction_branch":"1566307516558"},{"hash":"1566307516569","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516569","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516560","transaction_branch":"1566307516527"},{"hash":"1566307516571","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516571","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516478","transaction_branch":"1566307516527"},{"hash":"1566307516573","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516573","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516519","transaction_branch":"1566307516569"},{"hash":"1566307516575","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516575","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516464","transaction_branch":"1566307516474"},{"hash":"1566307516577","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516577","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516514","transaction_branch":"1566307516566"},{"hash":"1566307516579","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516579","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516474","transaction_branch":"1566307516575"},{"hash":"1566307516581","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516581","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516569","transaction_branch":"1566307516579"},{"hash":"1566307516597","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516597","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516484","transaction_branch":"1566307516562"},{"hash":"1566307516599","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516599","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516555","transaction_branch":"1566307516514"},{"hash":"1566307516601","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516601","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516555","transaction_branch":"1566307516579"},{"hash":"1566307516603","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516603","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516577","transaction_branch":"1566307516516"},{"hash":"1566307516606","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516606","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516500","transaction_branch":"1566307516519"},{"hash":"1566307516609","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516609","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516510","transaction_branch":"1566307516581"},{"hash":"1566307516611","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516611","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516575","transaction_branch":"1566307516508"},{"hash":"1566307516614","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516614","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516611","transaction_branch":"1566307516573"},{"hash":"1566307516616","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516616","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516569","transaction_branch":"1566307516550"},{"hash":"1566307516619","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516619","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516512","transaction_branch":"1566307516510"},{"hash":"1566307516621","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516621","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516555","transaction_branch":"1566307516560"},{"hash":"1566307516623","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516623","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516525","transaction_branch":"1566307516621"},{"hash":"1566307516625","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516625","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516623","transaction_branch":"1566307516525"},{"hash":"1566307516627","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516627","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516609","transaction_branch":"1566307516523"},{"hash":"1566307516629","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516629","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516523","transaction_branch":"1566307516566"},{"hash":"1566307516631","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516631","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516623","transaction_branch":"1566307516566"},{"hash":"1566307516647","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516647","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516527","transaction_branch":"1566307516562"},{"hash":"1566307516649","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516649","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516519","transaction_branch":"1566307516627"},{"hash":"1566307516651","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516651","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516581","transaction_branch":"1566307516623"},{"hash":"1566307516653","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516653","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516621","transaction_branch":"1566307516647"},{"hash":"1566307516655","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516655","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516625","transaction_branch":"1566307516564"},{"hash":"1566307516657","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516657","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516629","transaction_branch":"1566307516571"},{"hash":"1566307516659","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516659","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516653","transaction_branch":"1566307516606"},{"hash":"1566307516661","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516661","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516577","transaction_branch":"1566307516657"},{"hash":"1566307516664","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516664","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516657","transaction_branch":"1566307516619"},{"hash":"1566307516666","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516666","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516552","transaction_branch":"1566307516550"},{"hash":"1566307516669","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516669","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516659","transaction_branch":"1566307516651"},{"hash":"1566307516671","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516671","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516606","transaction_branch":"1566307516661"},{"hash":"1566307516674","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516674","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516666","transaction_branch":"1566307516579"},{"hash":"1566307516677","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516677","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516581","transaction_branch":"1566307516601"},{"hash":"1566307516679","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516679","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516577","transaction_branch":"1566307516659"},{"hash":"1566307516682","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516682","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516566","transaction_branch":"1566307516677"},{"hash":"1566307516684","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516684","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516581","transaction_branch":"1566307516679"},{"hash":"1566307516697","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516697","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516609","transaction_branch":"1566307516653"},{"hash":"1566307516700","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516700","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516649","transaction_branch":"1566307516664"},{"hash":"1566307516702","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516702","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516603","transaction_branch":"1566307516631"},{"hash":"1566307516705","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516705","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516684","transaction_branch":"1566307516661"},{"hash":"1566307516708","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516708","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516629","transaction_branch":"1566307516700"},{"hash":"1566307516710","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516710","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516708","transaction_branch":"1566307516621"},{"hash":"1566307516712","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516712","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516679","transaction_branch":"1566307516659"},{"hash":"1566307516714","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516714","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516606","transaction_branch":"1566307516674"},{"hash":"1566307516717","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516717","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516625","transaction_branch":"1566307516657"},{"hash":"1566307516720","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516720","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516677","transaction_branch":"1566307516700"},{"hash":"1566307516722","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516722","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516655","transaction_branch":"1566307516702"},{"hash":"1566307516725","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516725","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516702","transaction_branch":"1566307516625"},{"hash":"1566307516727","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516727","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516702","transaction_branch":"1566307516669"},{"hash":"1566307516730","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516730","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516700","transaction_branch":"1566307516625"},{"hash":"1566307516732","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516732","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516631","transaction_branch":"1566307516697"},{"hash":"1566307516735","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516735","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516629","transaction_branch":"1566307516661"},{"hash":"1566307516747","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516747","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516697","transaction_branch":"1566307516647"},{"hash":"1566307516750","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516750","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516621","transaction_branch":"1566307516732"},{"hash":"1566307516752","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516752","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516717","transaction_branch":"1566307516697"},{"hash":"1566307516754","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516754","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516666","transaction_branch":"1566307516647"},{"hash":"1566307516756","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516756","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516722","transaction_branch":"1566307516717"},{"hash":"1566307516758","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516758","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516679","transaction_branch":"1566307516653"},{"hash":"1566307516760","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516760","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516747","transaction_branch":"1566307516674"},{"hash":"1566307516762","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516762","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516712","transaction_branch":"1566307516649"},{"hash":"1566307516764","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516764","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516677","transaction_branch":"1566307516661"},{"hash":"1566307516766","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516766","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516722","transaction_branch":"1566307516651"},{"hash":"1566307516768","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516768","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516752","transaction_branch":"1566307516747"},{"hash":"1566307516771","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516771","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516720","transaction_branch":"1566307516671"},{"hash":"1566307516773","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516773","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516771","transaction_branch":"1566307516766"},{"hash":"1566307516776","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516776","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516720","transaction_branch":"1566307516752"},{"hash":"1566307516779","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516779","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516697","transaction_branch":"1566307516766"},{"hash":"1566307516781","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516781","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516710","transaction_branch":"1566307516714"},{"hash":"1566307516784","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516784","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516725","transaction_branch":"1566307516764"},{"hash":"1566307516797","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516797","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516717","transaction_branch":"1566307516697"},{"hash":"1566307516800","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516800","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516758","transaction_branch":"1566307516717"},{"hash":"1566307516802","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516802","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516730","transaction_branch":"1566307516758"},{"hash":"1566307516805","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516805","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516697","transaction_branch":"1566307516700"},{"hash":"1566307516807","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516807","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516712","transaction_branch":"1566307516725"},{"hash":"1566307516809","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516809","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516714","transaction_branch":"1566307516764"},{"hash":"1566307516812","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516812","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516760","transaction_branch":"1566307516747"},{"hash":"1566307516814","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516814","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516752","transaction_branch":"1566307516776"},{"hash":"1566307516817","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516817","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516809","transaction_branch":"1566307516756"},{"hash":"1566307516819","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516819","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516732","transaction_branch":"1566307516710"},{"hash":"1566307516821","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516821","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516750","transaction_branch":"1566307516735"},{"hash":"1566307516823","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516823","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516809","transaction_branch":"1566307516812"},{"hash":"1566307516826","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516826","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516756","transaction_branch":"1566307516812"},{"hash":"1566307516828","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516828","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516802","transaction_branch":"1566307516771"},{"hash":"1566307516831","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516831","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516730","transaction_branch":"1566307516747"},{"hash":"1566307516834","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516834","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516817","transaction_branch":"1566307516797"},{"hash":"1566307516847","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516847","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516768","transaction_branch":"1566307516807"},{"hash":"1566307516850","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516850","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516727","transaction_branch":"1566307516821"},{"hash":"1566307516853","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516853","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516823","transaction_branch":"1566307516802"},{"hash":"1566307516855","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516855","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516730","transaction_branch":"1566307516776"},{"hash":"1566307516858","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516858","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516766","transaction_branch":"1566307516802"},{"hash":"1566307516860","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516860","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516802","transaction_branch":"1566307516750"},{"hash":"1566307516862","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516862","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516762","transaction_branch":"1566307516773"},{"hash":"1566307516864","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516864","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516802","transaction_branch":"1566307516760"},{"hash":"1566307516866","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516866","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516762","transaction_branch":"1566307516781"},{"hash":"1566307516868","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516868","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516773","transaction_branch":"1566307516766"},{"hash":"1566307516871","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516871","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516847","transaction_branch":"1566307516800"},{"hash":"1566307516873","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516873","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516764","transaction_branch":"1566307516797"},{"hash":"1566307516875","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516875","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516868","transaction_branch":"1566307516847"},{"hash":"1566307516877","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516877","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516866","transaction_branch":"1566307516826"},{"hash":"1566307516879","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307516879","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516771","transaction_branch":"1566307516779"},{"hash":"1566307516882","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516882","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516877","transaction_branch":"1566307516831"},{"hash":"1566307516897","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516897","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516862","transaction_branch":"1566307516823"},{"hash":"1566307516900","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516900","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516877","transaction_branch":"1566307516853"},{"hash":"1566307516902","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516902","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516900","transaction_branch":"1566307516864"},{"hash":"1566307516904","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307516904","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516802","transaction_branch":"1566307516855"},{"hash":"1566307516906","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516906","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516814","transaction_branch":"1566307516904"},{"hash":"1566307516909","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516909","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516779","transaction_branch":"1566307516779"},{"hash":"1566307516911","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516911","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516875","transaction_branch":"1566307516823"},{"hash":"1566307516914","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516914","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516875","transaction_branch":"1566307516879"},{"hash":"1566307516916","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516916","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516823","transaction_branch":"1566307516823"},{"hash":"1566307516919","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516919","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516866","transaction_branch":"1566307516866"},{"hash":"1566307516921","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516921","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516873","transaction_branch":"1566307516882"},{"hash":"1566307516923","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516923","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516906","transaction_branch":"1566307516826"},{"hash":"1566307516926","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516926","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516900","transaction_branch":"1566307516866"},{"hash":"1566307516928","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516928","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516862","transaction_branch":"1566307516923"},{"hash":"1566307516931","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516931","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516831","transaction_branch":"1566307516817"},{"hash":"1566307516934","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516934","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516817","transaction_branch":"1566307516858"},{"hash":"1566307516947","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307516947","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516919","transaction_branch":"1566307516871"},{"hash":"1566307516950","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516950","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516902","transaction_branch":"1566307516926"},{"hash":"1566307516952","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307516952","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516904","transaction_branch":"1566307516850"},{"hash":"1566307516955","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516955","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516923","transaction_branch":"1566307516864"},{"hash":"1566307516958","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516958","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516853","transaction_branch":"1566307516826"},{"hash":"1566307516960","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516960","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516834","transaction_branch":"1566307516850"},{"hash":"1566307516963","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516963","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516862","transaction_branch":"1566307516958"},{"hash":"1566307516965","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516965","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516919","transaction_branch":"1566307516868"},{"hash":"1566307516967","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307516967","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516950","transaction_branch":"1566307516911"},{"hash":"1566307516969","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307516969","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516960","transaction_branch":"1566307516931"},{"hash":"1566307516971","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516971","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516904","transaction_branch":"1566307516882"},{"hash":"1566307516973","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307516973","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516960","transaction_branch":"1566307516902"},{"hash":"1566307516975","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307516975","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516879","transaction_branch":"1566307516965"},{"hash":"1566307516977","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516977","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516965","transaction_branch":"1566307516882"},{"hash":"1566307516980","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307516980","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516911","transaction_branch":"1566307516963"},{"hash":"1566307516982","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516982","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516955","transaction_branch":"1566307516873"},{"hash":"1566307516997","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307516997","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516965","transaction_branch":"1566307516900"},{"hash":"1566307517000","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517000","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516950","transaction_branch":"1566307516906"},{"hash":"1566307517002","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517002","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516952","transaction_branch":"1566307516916"},{"hash":"1566307517004","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517004","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516963","transaction_branch":"1566307516958"},{"hash":"1566307517006","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517006","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516963","transaction_branch":"1566307516963"},{"hash":"1566307517009","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517009","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516934","transaction_branch":"1566307516897"},{"hash":"1566307517011","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517011","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516967","transaction_branch":"1566307516980"},{"hash":"1566307517014","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517014","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517011","transaction_branch":"1566307516952"},{"hash":"1566307517016","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517016","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517009","transaction_branch":"1566307516958"},{"hash":"1566307517019","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517019","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516921","transaction_branch":"1566307517009"},{"hash":"1566307517021","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517021","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516914","transaction_branch":"1566307516906"},{"hash":"1566307517023","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517023","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516909","transaction_branch":"1566307516950"},{"hash":"1566307517025","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517025","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516982","transaction_branch":"1566307516977"},{"hash":"1566307517027","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517027","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516980","transaction_branch":"1566307516926"},{"hash":"1566307517029","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517029","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516997","transaction_branch":"1566307516919"},{"hash":"1566307517031","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517031","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516931","transaction_branch":"1566307516923"},{"hash":"1566307517047","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517047","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516921","transaction_branch":"1566307517004"},{"hash":"1566307517049","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517049","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516969","transaction_branch":"1566307516921"},{"hash":"1566307517051","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517051","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517014","transaction_branch":"1566307516997"},{"hash":"1566307517053","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517053","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516969","transaction_branch":"1566307517031"},{"hash":"1566307517055","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517055","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516950","transaction_branch":"1566307517019"},{"hash":"1566307517057","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517057","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516969","transaction_branch":"1566307516958"},{"hash":"1566307517059","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517059","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516975","transaction_branch":"1566307516973"},{"hash":"1566307517061","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517061","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517021","transaction_branch":"1566307517016"},{"hash":"1566307517063","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517063","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517000","transaction_branch":"1566307517029"},{"hash":"1566307517065","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517065","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516977","transaction_branch":"1566307516973"},{"hash":"1566307517067","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517067","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517057","transaction_branch":"1566307517004"},{"hash":"1566307517069","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517069","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517061","transaction_branch":"1566307517059"},{"hash":"1566307517071","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517071","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517053","transaction_branch":"1566307517011"},{"hash":"1566307517073","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517073","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517059","transaction_branch":"1566307517069"},{"hash":"1566307517076","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517076","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516971","transaction_branch":"1566307517071"},{"hash":"1566307517078","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517078","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517073","transaction_branch":"1566307517004"},{"hash":"1566307517081","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517081","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517031","transaction_branch":"1566307516975"},{"hash":"1566307517083","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517083","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517047","transaction_branch":"1566307516977"},{"hash":"1566307517097","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517097","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517014","transaction_branch":"1566307517011"},{"hash":"1566307517100","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517100","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307516982","transaction_branch":"1566307517049"},{"hash":"1566307517102","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517102","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517067","transaction_branch":"1566307516982"},{"hash":"1566307517104","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517104","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517031","transaction_branch":"1566307517078"},{"hash":"1566307517106","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517106","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517076","transaction_branch":"1566307517021"},{"hash":"1566307517108","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517108","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517061","transaction_branch":"1566307517055"},{"hash":"1566307517111","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517111","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517102","transaction_branch":"1566307517006"},{"hash":"1566307517113","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517113","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517047","transaction_branch":"1566307517059"},{"hash":"1566307517116","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517116","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517065","transaction_branch":"1566307517061"},{"hash":"1566307517118","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517118","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517073","transaction_branch":"1566307517014"},{"hash":"1566307517121","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517121","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517019","transaction_branch":"1566307517009"},{"hash":"1566307517124","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517124","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517078","transaction_branch":"1566307517011"},{"hash":"1566307517126","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517126","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517081","transaction_branch":"1566307517111"},{"hash":"1566307517129","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517129","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517025","transaction_branch":"1566307517113"},{"hash":"1566307517131","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517131","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517104","transaction_branch":"1566307517019"},{"hash":"1566307517134","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517134","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517111","transaction_branch":"1566307517108"},{"hash":"1566307517136","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517136","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517047","transaction_branch":"1566307517067"},{"hash":"1566307517147","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517147","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517121","transaction_branch":"1566307517104"},{"hash":"1566307517150","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517150","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517055","transaction_branch":"1566307517076"},{"hash":"1566307517152","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517152","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517055","transaction_branch":"1566307517047"},{"hash":"1566307517154","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517154","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517100","transaction_branch":"1566307517124"},{"hash":"1566307517156","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517156","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517076","transaction_branch":"1566307517061"},{"hash":"1566307517159","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517159","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517150","transaction_branch":"1566307517083"},{"hash":"1566307517161","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517161","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517059","transaction_branch":"1566307517113"},{"hash":"1566307517164","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517164","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517073","transaction_branch":"1566307517097"},{"hash":"1566307517166","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517166","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517150","transaction_branch":"1566307517131"},{"hash":"1566307517169","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517169","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517100","transaction_branch":"1566307517159"},{"hash":"1566307517171","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517172","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517063","transaction_branch":"1566307517121"},{"hash":"1566307517174","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517174","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517166","transaction_branch":"1566307517131"},{"hash":"1566307517177","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517177","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517061","transaction_branch":"1566307517097"},{"hash":"1566307517179","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517179","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517174","transaction_branch":"1566307517102"},{"hash":"1566307517181","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517181","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517150","transaction_branch":"1566307517083"},{"hash":"1566307517184","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517184","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517136","transaction_branch":"1566307517177"},{"hash":"1566307517197","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517197","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517156","transaction_branch":"1566307517150"},{"hash":"1566307517200","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517200","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517073","transaction_branch":"1566307517102"},{"hash":"1566307517202","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517202","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517100","transaction_branch":"1566307517073"},{"hash":"1566307517205","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517205","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517150","transaction_branch":"1566307517197"},{"hash":"1566307517207","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517207","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517171","transaction_branch":"1566307517197"},{"hash":"1566307517210","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517210","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517118","transaction_branch":"1566307517161"},{"hash":"1566307517212","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517212","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517156","transaction_branch":"1566307517152"},{"hash":"1566307517214","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517214","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517184","transaction_branch":"1566307517200"},{"hash":"1566307517216","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517216","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517161","transaction_branch":"1566307517124"},{"hash":"1566307517219","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517219","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517129","transaction_branch":"1566307517150"},{"hash":"1566307517221","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517221","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517205","transaction_branch":"1566307517116"},{"hash":"1566307517224","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517224","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517159","transaction_branch":"1566307517166"},{"hash":"1566307517226","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517226","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517150","transaction_branch":"1566307517179"},{"hash":"1566307517229","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517229","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517131","transaction_branch":"1566307517129"},{"hash":"1566307517232","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517232","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517156","transaction_branch":"1566307517124"},{"hash":"1566307517234","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517234","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517232","transaction_branch":"1566307517156"},{"hash":"1566307517247","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517247","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517121","transaction_branch":"1566307517207"},{"hash":"1566307517250","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517250","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517159","transaction_branch":"1566307517210"},{"hash":"1566307517253","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517253","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517250","transaction_branch":"1566307517179"},{"hash":"1566307517255","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517255","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517171","transaction_branch":"1566307517221"},{"hash":"1566307517258","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517258","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517214","transaction_branch":"1566307517156"},{"hash":"1566307517260","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517261","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517166","transaction_branch":"1566307517164"},{"hash":"1566307517262","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517262","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517221","transaction_branch":"1566307517150"},{"hash":"1566307517264","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517264","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517258","transaction_branch":"1566307517255"},{"hash":"1566307517266","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517266","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517179","transaction_branch":"1566307517159"},{"hash":"1566307517268","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517268","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517159","transaction_branch":"1566307517156"},{"hash":"1566307517270","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517270","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517161","transaction_branch":"1566307517152"},{"hash":"1566307517272","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517272","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517169","transaction_branch":"1566307517174"},{"hash":"1566307517274","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517274","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517212","transaction_branch":"1566307517161"},{"hash":"1566307517276","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517276","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517272","transaction_branch":"1566307517205"},{"hash":"1566307517279","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517279","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517202","transaction_branch":"1566307517266"},{"hash":"1566307517282","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517282","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517224","transaction_branch":"1566307517234"},{"hash":"1566307517297","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517297","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517274","transaction_branch":"1566307517253"},{"hash":"1566307517300","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517300","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517264","transaction_branch":"1566307517258"},{"hash":"1566307517303","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517303","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517205","transaction_branch":"1566307517207"},{"hash":"1566307517305","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517305","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517234","transaction_branch":"1566307517297"},{"hash":"1566307517308","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517308","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517300","transaction_branch":"1566307517274"},{"hash":"1566307517310","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517310","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517234","transaction_branch":"1566307517282"},{"hash":"1566307517313","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517313","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517258","transaction_branch":"1566307517282"},{"hash":"1566307517315","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517315","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517297","transaction_branch":"1566307517226"},{"hash":"1566307517318","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517318","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517205","transaction_branch":"1566307517253"},{"hash":"1566307517320","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517320","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517200","transaction_branch":"1566307517219"},{"hash":"1566307517323","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517323","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517300","transaction_branch":"1566307517210"},{"hash":"1566307517326","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517326","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517300","transaction_branch":"1566307517212"},{"hash":"1566307517328","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517328","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517247","transaction_branch":"1566307517305"},{"hash":"1566307517331","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517331","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517323","transaction_branch":"1566307517210"},{"hash":"1566307517333","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517333","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517262","transaction_branch":"1566307517224"},{"hash":"1566307517335","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517335","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517224","transaction_branch":"1566307517310"},{"hash":"1566307517347","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517347","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517221","transaction_branch":"1566307517333"},{"hash":"1566307517350","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517350","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517333","transaction_branch":"1566307517221"},{"hash":"1566307517352","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517352","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517274","transaction_branch":"1566307517315"},{"hash":"1566307517355","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517355","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517297","transaction_branch":"1566307517326"},{"hash":"1566307517358","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517358","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517331","transaction_branch":"1566307517318"},{"hash":"1566307517360","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517360","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517260","transaction_branch":"1566307517313"},{"hash":"1566307517363","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517363","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517331","transaction_branch":"1566307517247"},{"hash":"1566307517366","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517366","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517313","transaction_branch":"1566307517363"},{"hash":"1566307517368","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517368","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517262","transaction_branch":"1566307517328"},{"hash":"1566307517371","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517371","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517310","transaction_branch":"1566307517350"},{"hash":"1566307517373","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517373","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517313","transaction_branch":"1566307517320"},{"hash":"1566307517375","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517375","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517300","transaction_branch":"1566307517366"},{"hash":"1566307517377","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517377","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517333","transaction_branch":"1566307517297"},{"hash":"1566307517379","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517379","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517274","transaction_branch":"1566307517308"},{"hash":"1566307517381","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517381","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517310","transaction_branch":"1566307517358"},{"hash":"1566307517383","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517383","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517363","transaction_branch":"1566307517274"},{"hash":"1566307517397","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517397","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517303","transaction_branch":"1566307517303"},{"hash":"1566307517400","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517400","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517377","transaction_branch":"1566307517375"},{"hash":"1566307517402","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517402","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517350","transaction_branch":"1566307517377"},{"hash":"1566307517404","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517404","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517282","transaction_branch":"1566307517379"},{"hash":"1566307517407","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517407","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517400","transaction_branch":"1566307517320"},{"hash":"1566307517410","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517410","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517315","transaction_branch":"1566307517282"},{"hash":"1566307517412","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517412","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517360","transaction_branch":"1566307517377"},{"hash":"1566307517414","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517414","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517315","transaction_branch":"1566307517297"},{"hash":"1566307517416","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517416","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517368","transaction_branch":"1566307517318"},{"hash":"1566307517418","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517418","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517331","transaction_branch":"1566307517328"},{"hash":"1566307517421","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517421","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517416","transaction_branch":"1566307517379"},{"hash":"1566307517423","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517423","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517333","transaction_branch":"1566307517355"},{"hash":"1566307517426","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517426","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517318","transaction_branch":"1566307517366"},{"hash":"1566307517428","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517428","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517421","transaction_branch":"1566307517355"},{"hash":"1566307517431","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517431","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517326","transaction_branch":"1566307517333"},{"hash":"1566307517434","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517434","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517397","transaction_branch":"1566307517333"},{"hash":"1566307517447","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517447","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517407","transaction_branch":"1566307517320"},{"hash":"1566307517450","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517450","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517331","transaction_branch":"1566307517400"},{"hash":"1566307517452","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517452","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517404","transaction_branch":"1566307517428"},{"hash":"1566307517455","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517455","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517379","transaction_branch":"1566307517414"},{"hash":"1566307517458","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517458","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517452","transaction_branch":"1566307517371"},{"hash":"1566307517460","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517460","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517434","transaction_branch":"1566307517404"},{"hash":"1566307517463","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517463","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517360","transaction_branch":"1566307517407"},{"hash":"1566307517465","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517465","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517455","transaction_branch":"1566307517383"},{"hash":"1566307517467","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517467","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517381","transaction_branch":"1566307517428"},{"hash":"1566307517469","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517469","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517418","transaction_branch":"1566307517452"},{"hash":"1566307517472","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517472","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517431","transaction_branch":"1566307517414"},{"hash":"1566307517475","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517475","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517381","transaction_branch":"1566307517428"},{"hash":"1566307517477","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517477","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517383","transaction_branch":"1566307517472"},{"hash":"1566307517479","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517479","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517402","transaction_branch":"1566307517383"},{"hash":"1566307517481","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517481","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517463","transaction_branch":"1566307517379"},{"hash":"1566307517483","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517483","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517467","transaction_branch":"1566307517368"},{"hash":"1566307517497","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517497","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517414","transaction_branch":"1566307517379"},{"hash":"1566307517500","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517500","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517402","transaction_branch":"1566307517381"},{"hash":"1566307517503","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517503","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517479","transaction_branch":"1566307517428"},{"hash":"1566307517505","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517505","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517402","transaction_branch":"1566307517410"},{"hash":"1566307517507","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517507","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517465","transaction_branch":"1566307517481"},{"hash":"1566307517510","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517510","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517505","transaction_branch":"1566307517402"},{"hash":"1566307517512","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517512","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517407","transaction_branch":"1566307517431"},{"hash":"1566307517515","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517515","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517479","transaction_branch":"1566307517512"},{"hash":"1566307517517","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517517","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517423","transaction_branch":"1566307517465"},{"hash":"1566307517519","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517519","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517500","transaction_branch":"1566307517418"},{"hash":"1566307517521","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517521","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517481","transaction_branch":"1566307517431"},{"hash":"1566307517524","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517524","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517447","transaction_branch":"1566307517428"},{"hash":"1566307517526","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517526","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517472","transaction_branch":"1566307517460"},{"hash":"1566307517529","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517529","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517416","transaction_branch":"1566307517463"},{"hash":"1566307517531","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517531","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517519","transaction_branch":"1566307517507"},{"hash":"1566307517534","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517534","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517503","transaction_branch":"1566307517431"},{"hash":"1566307517547","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517547","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517529","transaction_branch":"1566307517458"},{"hash":"1566307517550","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517550","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517434","transaction_branch":"1566307517534"},{"hash":"1566307517553","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517553","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517452","transaction_branch":"1566307517455"},{"hash":"1566307517555","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517555","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517460","transaction_branch":"1566307517517"},{"hash":"1566307517557","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517557","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517519","transaction_branch":"1566307517555"},{"hash":"1566307517560","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517560","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517524","transaction_branch":"1566307517431"},{"hash":"1566307517563","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517563","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517534","transaction_branch":"1566307517515"},{"hash":"1566307517565","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517565","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517463","transaction_branch":"1566307517553"},{"hash":"1566307517568","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517568","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517565","transaction_branch":"1566307517526"},{"hash":"1566307517570","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517570","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517479","transaction_branch":"1566307517521"},{"hash":"1566307517573","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517573","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517481","transaction_branch":"1566307517547"},{"hash":"1566307517576","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517576","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517469","transaction_branch":"1566307517547"},{"hash":"1566307517577","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517577","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517531","transaction_branch":"1566307517531"},{"hash":"1566307517579","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517579","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517553","transaction_branch":"1566307517472"},{"hash":"1566307517581","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517581","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517483","transaction_branch":"1566307517463"},{"hash":"1566307517583","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517583","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517483","transaction_branch":"1566307517505"},{"hash":"1566307517597","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517597","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517469","transaction_branch":"1566307517515"},{"hash":"1566307517600","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517600","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517497","transaction_branch":"1566307517507"},{"hash":"1566307517603","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517603","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517481","transaction_branch":"1566307517600"},{"hash":"1566307517605","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517605","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517500","transaction_branch":"1566307517475"},{"hash":"1566307517608","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517608","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517576","transaction_branch":"1566307517534"},{"hash":"1566307517611","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517611","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517550","transaction_branch":"1566307517583"},{"hash":"1566307517613","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517613","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517531","transaction_branch":"1566307517531"},{"hash":"1566307517616","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517616","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517505","transaction_branch":"1566307517573"},{"hash":"1566307517618","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517618","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517503","transaction_branch":"1566307517521"},{"hash":"1566307517621","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517621","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517521","transaction_branch":"1566307517581"},{"hash":"1566307517623","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517623","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517621","transaction_branch":"1566307517583"},{"hash":"1566307517626","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517626","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517577","transaction_branch":"1566307517563"},{"hash":"1566307517629","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517629","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517605","transaction_branch":"1566307517621"},{"hash":"1566307517631","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517631","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517618","transaction_branch":"1566307517521"},{"hash":"1566307517634","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517634","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517547","transaction_branch":"1566307517577"},{"hash":"1566307517636","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517636","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517557","transaction_branch":"1566307517621"},{"hash":"1566307517647","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517647","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517636","transaction_branch":"1566307517605"},{"hash":"1566307517650","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517650","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517557","transaction_branch":"1566307517529"},{"hash":"1566307517651","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517651","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517550","transaction_branch":"1566307517553"},{"hash":"1566307517654","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517654","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517583","transaction_branch":"1566307517553"},{"hash":"1566307517656","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517656","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517626","transaction_branch":"1566307517557"},{"hash":"1566307517659","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517659","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517547","transaction_branch":"1566307517611"},{"hash":"1566307517661","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517661","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517534","transaction_branch":"1566307517597"},{"hash":"1566307517664","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517664","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517600","transaction_branch":"1566307517626"},{"hash":"1566307517666","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517666","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517597","transaction_branch":"1566307517656"},{"hash":"1566307517669","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517669","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517659","transaction_branch":"1566307517577"},{"hash":"1566307517672","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517672","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517597","transaction_branch":"1566307517666"},{"hash":"1566307517674","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517674","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517629","transaction_branch":"1566307517651"},{"hash":"1566307517677","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517677","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517661","transaction_branch":"1566307517568"},{"hash":"1566307517679","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517679","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517661","transaction_branch":"1566307517647"},{"hash":"1566307517681","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517681","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517656","transaction_branch":"1566307517664"},{"hash":"1566307517683","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517683","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517661","transaction_branch":"1566307517666"},{"hash":"1566307517697","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517697","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517669","transaction_branch":"1566307517618"},{"hash":"1566307517700","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517700","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517581","transaction_branch":"1566307517626"},{"hash":"1566307517702","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517702","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517679","transaction_branch":"1566307517613"},{"hash":"1566307517705","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517705","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517674","transaction_branch":"1566307517576"},{"hash":"1566307517707","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517707","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517659","transaction_branch":"1566307517654"},{"hash":"1566307517709","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517709","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517626","transaction_branch":"1566307517647"},{"hash":"1566307517712","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517712","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517709","transaction_branch":"1566307517659"},{"hash":"1566307517713","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517713","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517647","transaction_branch":"1566307517700"},{"hash":"1566307517716","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517716","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517651","transaction_branch":"1566307517623"},{"hash":"1566307517717","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517717","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517672","transaction_branch":"1566307517647"},{"hash":"1566307517719","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517719","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517666","transaction_branch":"1566307517611"},{"hash":"1566307517721","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517721","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517626","transaction_branch":"1566307517705"},{"hash":"1566307517723","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517723","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517681","transaction_branch":"1566307517634"},{"hash":"1566307517725","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517725","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517672","transaction_branch":"1566307517683"},{"hash":"1566307517728","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517728","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517723","transaction_branch":"1566307517707"},{"hash":"1566307517730","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517730","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517661","transaction_branch":"1566307517677"},{"hash":"1566307517732","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517732","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517723","transaction_branch":"1566307517719"},{"hash":"1566307517747","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517747","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517681","transaction_branch":"1566307517621"},{"hash":"1566307517750","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517750","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517697","transaction_branch":"1566307517669"},{"hash":"1566307517752","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517752","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517659","transaction_branch":"1566307517631"},{"hash":"1566307517755","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517755","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517713","transaction_branch":"1566307517679"},{"hash":"1566307517757","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517757","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517669","transaction_branch":"1566307517747"},{"hash":"1566307517759","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517759","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517723","transaction_branch":"1566307517654"},{"hash":"1566307517761","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517761","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517725","transaction_branch":"1566307517651"},{"hash":"1566307517763","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517763","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517664","transaction_branch":"1566307517755"},{"hash":"1566307517766","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517766","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517656","transaction_branch":"1566307517725"},{"hash":"1566307517768","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517768","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517761","transaction_branch":"1566307517757"},{"hash":"1566307517771","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517771","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517747","transaction_branch":"1566307517725"},{"hash":"1566307517773","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517773","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517747","transaction_branch":"1566307517674"},{"hash":"1566307517775","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517775","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517666","transaction_branch":"1566307517712"},{"hash":"1566307517777","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517777","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517677","transaction_branch":"1566307517747"},{"hash":"1566307517779","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517779","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517697","transaction_branch":"1566307517775"},{"hash":"1566307517781","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307517781","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517732","transaction_branch":"1566307517681"},{"hash":"1566307517783","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517783","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517775","transaction_branch":"1566307517677"},{"hash":"1566307517799","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517799","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517781","transaction_branch":"1566307517730"},{"hash":"1566307517801","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517801","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517779","transaction_branch":"1566307517779"},{"hash":"1566307517803","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517803","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517716","transaction_branch":"1566307517700"},{"hash":"1566307517805","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517805","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517757","transaction_branch":"1566307517799"},{"hash":"1566307517807","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517807","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517700","transaction_branch":"1566307517721"},{"hash":"1566307517810","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517810","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517771","transaction_branch":"1566307517747"},{"hash":"1566307517812","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517812","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517707","transaction_branch":"1566307517755"},{"hash":"1566307517815","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517815","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517755","transaction_branch":"1566307517717"},{"hash":"1566307517817","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517817","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517801","transaction_branch":"1566307517755"},{"hash":"1566307517819","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517819","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517773","transaction_branch":"1566307517712"},{"hash":"1566307517821","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517821","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517783","transaction_branch":"1566307517805"},{"hash":"1566307517823","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517823","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517779","transaction_branch":"1566307517732"},{"hash":"1566307517825","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517825","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517812","transaction_branch":"1566307517803"},{"hash":"1566307517827","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517827","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517781","transaction_branch":"1566307517747"},{"hash":"1566307517829","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517829","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517807","transaction_branch":"1566307517801"},{"hash":"1566307517832","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517832","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517799","transaction_branch":"1566307517728"},{"hash":"1566307517925","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307517925","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517823","transaction_branch":"1566307517771"},{"hash":"1566307517937","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517937","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517775","transaction_branch":"1566307517817"},{"hash":"1566307517945","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307517945","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517761","transaction_branch":"1566307517752"},{"hash":"1566307517949","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517949","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517768","transaction_branch":"1566307517945"},{"hash":"1566307517959","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517959","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517773","transaction_branch":"1566307517763"},{"hash":"1566307517966","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307517966","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517781","transaction_branch":"1566307517815"},{"hash":"1566307517972","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517972","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517832","transaction_branch":"1566307517768"},{"hash":"1566307517974","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307517974","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517752","transaction_branch":"1566307517925"},{"hash":"1566307517978","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307517978","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517974","transaction_branch":"1566307517771"},{"hash":"1566307517980","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517980","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517827","transaction_branch":"1566307517771"},{"hash":"1566307517988","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307517988","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517815","transaction_branch":"1566307517980"},{"hash":"1566307517990","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307517990","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517988","transaction_branch":"1566307517817"},{"hash":"1566307517992","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517992","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517972","transaction_branch":"1566307517803"},{"hash":"1566307517994","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307517994","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517945","transaction_branch":"1566307517966"},{"hash":"1566307517996","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307517996","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517812","transaction_branch":"1566307517988"},{"hash":"1566307518001","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518001","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517832","transaction_branch":"1566307517768"},{"hash":"1566307518004","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518004","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517825","transaction_branch":"1566307517799"},{"hash":"1566307518007","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518007","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517925","transaction_branch":"1566307517775"},{"hash":"1566307518010","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518010","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517810","transaction_branch":"1566307517823"},{"hash":"1566307518012","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518012","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517966","transaction_branch":"1566307517810"},{"hash":"1566307518016","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518016","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517925","transaction_branch":"1566307517972"},{"hash":"1566307518019","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518019","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517974","transaction_branch":"1566307517779"},{"hash":"1566307518025","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518025","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517949","transaction_branch":"1566307517996"},{"hash":"1566307518028","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518028","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517817","transaction_branch":"1566307517810"},{"hash":"1566307518031","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518031","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517832","transaction_branch":"1566307517959"},{"hash":"1566307518034","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518034","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518010","transaction_branch":"1566307518025"},{"hash":"1566307518037","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518037","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517810","transaction_branch":"1566307517925"},{"hash":"1566307518040","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518040","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517966","transaction_branch":"1566307518010"},{"hash":"1566307518042","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518042","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517959","transaction_branch":"1566307517829"},{"hash":"1566307518044","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518044","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517832","transaction_branch":"1566307517972"},{"hash":"1566307518047","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518047","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518044","transaction_branch":"1566307518010"},{"hash":"1566307518050","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518050","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518012","transaction_branch":"1566307518007"},{"hash":"1566307518053","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518053","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518001","transaction_branch":"1566307518037"},{"hash":"1566307518056","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518056","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518019","transaction_branch":"1566307518025"},{"hash":"1566307518058","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518058","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517829","transaction_branch":"1566307517959"},{"hash":"1566307518060","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518060","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517988","transaction_branch":"1566307517823"},{"hash":"1566307518062","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518062","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517978","transaction_branch":"1566307518044"},{"hash":"1566307518065","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518065","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517978","transaction_branch":"1566307518010"},{"hash":"1566307518068","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518068","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517937","transaction_branch":"1566307518050"},{"hash":"1566307518070","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518070","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518053","transaction_branch":"1566307518040"},{"hash":"1566307518073","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518073","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517990","transaction_branch":"1566307518068"},{"hash":"1566307518075","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518075","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307517937","transaction_branch":"1566307518053"},{"hash":"1566307518080","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518080","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518068","transaction_branch":"1566307517994"},{"hash":"1566307518082","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518082","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518073","transaction_branch":"1566307517959"},{"hash":"1566307518085","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518085","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518004","transaction_branch":"1566307518016"},{"hash":"1566307518087","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518087","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518034","transaction_branch":"1566307518060"},{"hash":"1566307518091","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518091","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518007","transaction_branch":"1566307518042"},{"hash":"1566307518095","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518095","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518047","transaction_branch":"1566307518068"},{"hash":"1566307518097","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518097","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518050","transaction_branch":"1566307518095"},{"hash":"1566307518099","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518099","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518080","transaction_branch":"1566307518097"},{"hash":"1566307518102","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518102","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518070","transaction_branch":"1566307518025"},{"hash":"1566307518106","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518106","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518073","transaction_branch":"1566307518007"},{"hash":"1566307518108","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518108","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518095","transaction_branch":"1566307518087"},{"hash":"1566307518111","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518111","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518034","transaction_branch":"1566307518019"},{"hash":"1566307518113","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518113","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518075","transaction_branch":"1566307518111"},{"hash":"1566307518117","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518117","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518040","transaction_branch":"1566307518113"},{"hash":"1566307518120","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518120","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518031","transaction_branch":"1566307518050"},{"hash":"1566307518122","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518122","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518068","transaction_branch":"1566307518097"},{"hash":"1566307518126","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518126","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518070","transaction_branch":"1566307518097"},{"hash":"1566307518131","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518131","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518122","transaction_branch":"1566307518075"},{"hash":"1566307518134","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518134","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518080","transaction_branch":"1566307518102"},{"hash":"1566307518138","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518138","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518058","transaction_branch":"1566307518060"},{"hash":"1566307518141","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518141","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518075","transaction_branch":"1566307518047"},{"hash":"1566307518143","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518143","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518095","transaction_branch":"1566307518087"},{"hash":"1566307518145","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518145","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518099","transaction_branch":"1566307518138"},{"hash":"1566307518147","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518147","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518097","transaction_branch":"1566307518134"},{"hash":"1566307518149","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518149","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518117","transaction_branch":"1566307518060"},{"hash":"1566307518152","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518152","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518075","transaction_branch":"1566307518060"},{"hash":"1566307518155","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518155","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518120","transaction_branch":"1566307518087"},{"hash":"1566307518158","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518158","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518044","transaction_branch":"1566307518122"},{"hash":"1566307518160","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518160","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518152","transaction_branch":"1566307518075"},{"hash":"1566307518164","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518164","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518068","transaction_branch":"1566307518147"},{"hash":"1566307518167","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518167","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518143","transaction_branch":"1566307518111"},{"hash":"1566307518169","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518169","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518131","transaction_branch":"1566307518155"},{"hash":"1566307518171","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518171","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518099","transaction_branch":"1566307518087"},{"hash":"1566307518174","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518174","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518155","transaction_branch":"1566307518134"},{"hash":"1566307518178","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518178","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518169","transaction_branch":"1566307518149"},{"hash":"1566307518180","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518180","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518120","transaction_branch":"1566307518171"},{"hash":"1566307518183","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518183","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518171","transaction_branch":"1566307518131"},{"hash":"1566307518185","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518185","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518126","transaction_branch":"1566307518126"},{"hash":"1566307518187","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518187","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518174","transaction_branch":"1566307518141"},{"hash":"1566307518190","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518190","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518087","transaction_branch":"1566307518099"},{"hash":"1566307518192","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518192","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518164","transaction_branch":"1566307518122"},{"hash":"1566307518194","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518194","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518178","transaction_branch":"1566307518160"},{"hash":"1566307518197","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518197","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518183","transaction_branch":"1566307518145"},{"hash":"1566307518199","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518199","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518095","transaction_branch":"1566307518126"},{"hash":"1566307518201","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518201","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518111","transaction_branch":"1566307518164"},{"hash":"1566307518204","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518204","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518171","transaction_branch":"1566307518145"},{"hash":"1566307518206","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518206","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518194","transaction_branch":"1566307518204"},{"hash":"1566307518209","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518209","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518120","transaction_branch":"1566307518183"},{"hash":"1566307518212","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518212","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518190","transaction_branch":"1566307518178"},{"hash":"1566307518215","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518215","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518149","transaction_branch":"1566307518204"},{"hash":"1566307518218","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518218","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518134","transaction_branch":"1566307518190"},{"hash":"1566307518221","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518221","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518180","transaction_branch":"1566307518187"},{"hash":"1566307518223","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518223","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518158","transaction_branch":"1566307518143"},{"hash":"1566307518226","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518226","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518190","transaction_branch":"1566307518126"},{"hash":"1566307518228","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518228","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518167","transaction_branch":"1566307518149"},{"hash":"1566307518230","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518230","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518201","transaction_branch":"1566307518143"},{"hash":"1566307518233","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518233","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518226","transaction_branch":"1566307518138"},{"hash":"1566307518235","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518235","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518223","transaction_branch":"1566307518183"},{"hash":"1566307518238","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518238","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518149","transaction_branch":"1566307518190"},{"hash":"1566307518240","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518241","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518138","transaction_branch":"1566307518160"},{"hash":"1566307518244","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518244","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518164","transaction_branch":"1566307518197"},{"hash":"1566307518247","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518247","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518199","transaction_branch":"1566307518230"},{"hash":"1566307518250","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518250","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518221","transaction_branch":"1566307518235"},{"hash":"1566307518252","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518252","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518180","transaction_branch":"1566307518171"},{"hash":"1566307518255","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518255","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518201","transaction_branch":"1566307518230"},{"hash":"1566307518258","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518258","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518218","transaction_branch":"1566307518255"},{"hash":"1566307518260","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518260","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518174","transaction_branch":"1566307518190"},{"hash":"1566307518262","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518262","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518250","transaction_branch":"1566307518223"},{"hash":"1566307518265","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518265","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518194","transaction_branch":"1566307518180"},{"hash":"1566307518267","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518267","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518221","transaction_branch":"1566307518228"},{"hash":"1566307518269","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518269","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518226","transaction_branch":"1566307518180"},{"hash":"1566307518272","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518272","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518194","transaction_branch":"1566307518201"},{"hash":"1566307518275","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518275","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518258","transaction_branch":"1566307518233"},{"hash":"1566307518276","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518276","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518197","transaction_branch":"1566307518199"},{"hash":"1566307518281","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518281","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518260","transaction_branch":"1566307518183"},{"hash":"1566307518284","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518284","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518180","transaction_branch":"1566307518192"},{"hash":"1566307518285","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518285","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518221","transaction_branch":"1566307518206"},{"hash":"1566307518288","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518288","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518197","transaction_branch":"1566307518285"},{"hash":"1566307518291","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518291","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518267","transaction_branch":"1566307518201"},{"hash":"1566307518293","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518293","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518252","transaction_branch":"1566307518212"},{"hash":"1566307518296","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518296","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518272","transaction_branch":"1566307518201"},{"hash":"1566307518298","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518298","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518288","transaction_branch":"1566307518250"},{"hash":"1566307518301","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518301","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518260","transaction_branch":"1566307518226"},{"hash":"1566307518304","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518304","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518258","transaction_branch":"1566307518218"},{"hash":"1566307518306","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518306","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518252","transaction_branch":"1566307518235"},{"hash":"1566307518308","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518308","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518238","transaction_branch":"1566307518269"},{"hash":"1566307518311","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518311","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518285","transaction_branch":"1566307518288"},{"hash":"1566307518312","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518312","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518272","transaction_branch":"1566307518218"},{"hash":"1566307518315","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518315","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518306","transaction_branch":"1566307518247"},{"hash":"1566307518317","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518317","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518308","transaction_branch":"1566307518306"},{"hash":"1566307518318","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518318","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518284","transaction_branch":"1566307518269"},{"hash":"1566307518321","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518321","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518247","transaction_branch":"1566307518318"},{"hash":"1566307518323","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518323","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518296","transaction_branch":"1566307518255"},{"hash":"1566307518325","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518325","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518304","transaction_branch":"1566307518230"},{"hash":"1566307518327","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518327","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518325","transaction_branch":"1566307518288"},{"hash":"1566307518330","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518330","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518240","transaction_branch":"1566307518262"},{"hash":"1566307518333","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518333","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518288","transaction_branch":"1566307518301"},{"hash":"1566307518335","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518335","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518298","transaction_branch":"1566307518252"},{"hash":"1566307518338","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518338","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518306","transaction_branch":"1566307518281"},{"hash":"1566307518341","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518341","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518275","transaction_branch":"1566307518323"},{"hash":"1566307518344","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518344","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518335","transaction_branch":"1566307518247"},{"hash":"1566307518347","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518347","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518318","transaction_branch":"1566307518323"},{"hash":"1566307518349","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518349","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518341","transaction_branch":"1566307518344"},{"hash":"1566307518351","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518351","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518304","transaction_branch":"1566307518296"},{"hash":"1566307518354","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518354","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518288","transaction_branch":"1566307518321"},{"hash":"1566307518357","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518357","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518293","transaction_branch":"1566307518288"},{"hash":"1566307518360","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518360","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518293","transaction_branch":"1566307518333"},{"hash":"1566307518362","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518362","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518315","transaction_branch":"1566307518357"},{"hash":"1566307518364","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518364","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518318","transaction_branch":"1566307518321"},{"hash":"1566307518367","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518367","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518315","transaction_branch":"1566307518275"},{"hash":"1566307518369","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518369","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518357","transaction_branch":"1566307518360"},{"hash":"1566307518371","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518371","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518330","transaction_branch":"1566307518349"},{"hash":"1566307518373","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518373","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518285","transaction_branch":"1566307518318"},{"hash":"1566307518376","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518376","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518338","transaction_branch":"1566307518284"},{"hash":"1566307518379","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518379","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518318","transaction_branch":"1566307518321"},{"hash":"1566307518381","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518381","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518354","transaction_branch":"1566307518369"},{"hash":"1566307518384","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518384","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518330","transaction_branch":"1566307518338"},{"hash":"1566307518387","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518387","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518369","transaction_branch":"1566307518308"},{"hash":"1566307518393","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518393","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518349","transaction_branch":"1566307518311"},{"hash":"1566307518396","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518396","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518351","transaction_branch":"1566307518318"},{"hash":"1566307518398","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518398","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518321","transaction_branch":"1566307518315"},{"hash":"1566307518400","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518400","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518349","transaction_branch":"1566307518393"},{"hash":"1566307518402","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518402","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518373","transaction_branch":"1566307518362"},{"hash":"1566307518404","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518404","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518364","transaction_branch":"1566307518341"},{"hash":"1566307518409","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518409","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518381","transaction_branch":"1566307518330"},{"hash":"1566307518412","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518412","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518364","transaction_branch":"1566307518373"},{"hash":"1566307518414","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518414","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518321","transaction_branch":"1566307518360"},{"hash":"1566307518416","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518416","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518333","transaction_branch":"1566307518325"},{"hash":"1566307518419","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518419","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518315","transaction_branch":"1566307518317"},{"hash":"1566307518421","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518421","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518364","transaction_branch":"1566307518335"},{"hash":"1566307518430","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518430","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518325","transaction_branch":"1566307518421"},{"hash":"1566307518435","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518435","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518398","transaction_branch":"1566307518381"},{"hash":"1566307518437","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518437","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518360","transaction_branch":"1566307518409"},{"hash":"1566307518442","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518442","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518362","transaction_branch":"1566307518419"},{"hash":"1566307518445","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518445","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518381","transaction_branch":"1566307518364"},{"hash":"1566307518448","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518448","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518393","transaction_branch":"1566307518421"},{"hash":"1566307518451","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518451","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518435","transaction_branch":"1566307518445"},{"hash":"1566307518454","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518454","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518442","transaction_branch":"1566307518398"},{"hash":"1566307518456","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518456","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518360","transaction_branch":"1566307518364"},{"hash":"1566307518458","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518458","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518371","transaction_branch":"1566307518393"},{"hash":"1566307518460","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518460","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518373","transaction_branch":"1566307518354"},{"hash":"1566307518463","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518463","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518347","transaction_branch":"1566307518419"},{"hash":"1566307518466","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518466","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518357","transaction_branch":"1566307518448"},{"hash":"1566307518469","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518469","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518442","transaction_branch":"1566307518362"},{"hash":"1566307518471","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518471","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518421","transaction_branch":"1566307518381"},{"hash":"1566307518496","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518496","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518369","transaction_branch":"1566307518396"},{"hash":"1566307518499","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518499","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518393","transaction_branch":"1566307518435"},{"hash":"1566307518500","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518500","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518435","transaction_branch":"1566307518454"},{"hash":"1566307518505","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518505","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518379","transaction_branch":"1566307518435"},{"hash":"1566307518516","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518516","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518419","transaction_branch":"1566307518463"},{"hash":"1566307518520","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518520","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518369","transaction_branch":"1566307518445"},{"hash":"1566307518522","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518522","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518499","transaction_branch":"1566307518421"},{"hash":"1566307518525","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518525","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518451","transaction_branch":"1566307518430"},{"hash":"1566307518528","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518528","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518381","transaction_branch":"1566307518379"},{"hash":"1566307518530","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518530","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518400","transaction_branch":"1566307518437"},{"hash":"1566307518532","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518532","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518421","transaction_branch":"1566307518435"},{"hash":"1566307518535","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518535","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518451","transaction_branch":"1566307518520"},{"hash":"1566307518538","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518538","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518419","transaction_branch":"1566307518456"},{"hash":"1566307518542","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518542","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518430","transaction_branch":"1566307518398"},{"hash":"1566307518544","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518544","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518409","transaction_branch":"1566307518500"},{"hash":"1566307518546","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518546","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518469","transaction_branch":"1566307518460"},{"hash":"1566307518548","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518548","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518451","transaction_branch":"1566307518445"},{"hash":"1566307518550","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518550","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518460","transaction_branch":"1566307518466"},{"hash":"1566307518553","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518553","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518505","transaction_branch":"1566307518442"},{"hash":"1566307518557","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518557","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518499","transaction_branch":"1566307518463"},{"hash":"1566307518559","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518559","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518419","transaction_branch":"1566307518421"},{"hash":"1566307518561","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518561","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518520","transaction_branch":"1566307518557"},{"hash":"1566307518563","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518563","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518442","transaction_branch":"1566307518546"},{"hash":"1566307518565","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518565","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518530","transaction_branch":"1566307518505"},{"hash":"1566307518568","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518568","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518445","transaction_branch":"1566307518538"},{"hash":"1566307518575","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518575","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518568","transaction_branch":"1566307518451"},{"hash":"1566307518578","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518578","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518500","transaction_branch":"1566307518505"},{"hash":"1566307518581","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518581","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518442","transaction_branch":"1566307518530"},{"hash":"1566307518583","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518583","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518544","transaction_branch":"1566307518559"},{"hash":"1566307518586","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518586","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518520","transaction_branch":"1566307518530"},{"hash":"1566307518587","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518587","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518559","transaction_branch":"1566307518559"},{"hash":"1566307518590","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518590","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518542","transaction_branch":"1566307518466"},{"hash":"1566307518593","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518593","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518565","transaction_branch":"1566307518532"},{"hash":"1566307518594","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518594","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518463","transaction_branch":"1566307518553"},{"hash":"1566307518596","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518596","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518505","transaction_branch":"1566307518469"},{"hash":"1566307518598","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518598","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518463","transaction_branch":"1566307518546"},{"hash":"1566307518601","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518601","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518535","transaction_branch":"1566307518568"},{"hash":"1566307518603","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518603","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518563","transaction_branch":"1566307518520"},{"hash":"1566307518605","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518605","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518598","transaction_branch":"1566307518563"},{"hash":"1566307518609","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518609","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518528","transaction_branch":"1566307518542"},{"hash":"1566307518611","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518611","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518520","transaction_branch":"1566307518596"},{"hash":"1566307518613","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518613","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518530","transaction_branch":"1566307518528"},{"hash":"1566307518616","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518616","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518609","transaction_branch":"1566307518553"},{"hash":"1566307518618","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518618","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518542","transaction_branch":"1566307518583"},{"hash":"1566307518620","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518620","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518616","transaction_branch":"1566307518594"},{"hash":"1566307518622","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518622","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518565","transaction_branch":"1566307518587"},{"hash":"1566307518624","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518624","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518565","transaction_branch":"1566307518618"},{"hash":"1566307518626","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518626","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518561","transaction_branch":"1566307518601"},{"hash":"1566307518629","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518629","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518538","transaction_branch":"1566307518528"},{"hash":"1566307518630","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518630","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518575","transaction_branch":"1566307518550"},{"hash":"1566307518632","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518632","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518546","transaction_branch":"1566307518581"},{"hash":"1566307518635","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518635","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518598","transaction_branch":"1566307518626"},{"hash":"1566307518638","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518638","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518616","transaction_branch":"1566307518542"},{"hash":"1566307518640","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518640","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518632","transaction_branch":"1566307518568"},{"hash":"1566307518643","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518643","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518587","transaction_branch":"1566307518629"},{"hash":"1566307518645","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518645","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518548","transaction_branch":"1566307518563"},{"hash":"1566307518647","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518647","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518568","transaction_branch":"1566307518598"},{"hash":"1566307518650","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518650","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518561","transaction_branch":"1566307518575"},{"hash":"1566307518653","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518653","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518561","transaction_branch":"1566307518594"},{"hash":"1566307518655","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518655","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518596","transaction_branch":"1566307518563"},{"hash":"1566307518657","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518657","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518581","transaction_branch":"1566307518635"},{"hash":"1566307518659","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518659","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518613","transaction_branch":"1566307518563"},{"hash":"1566307518661","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518661","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518575","transaction_branch":"1566307518598"},{"hash":"1566307518663","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518663","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518611","transaction_branch":"1566307518565"},{"hash":"1566307518666","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518666","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518575","transaction_branch":"1566307518603"},{"hash":"1566307518669","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518669","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518578","transaction_branch":"1566307518620"},{"hash":"1566307518671","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518671","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518663","transaction_branch":"1566307518635"},{"hash":"1566307518674","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518674","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518655","transaction_branch":"1566307518630"},{"hash":"1566307518678","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518678","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518632","transaction_branch":"1566307518661"},{"hash":"1566307518681","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518681","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518666","transaction_branch":"1566307518653"},{"hash":"1566307518683","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518683","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518622","transaction_branch":"1566307518609"},{"hash":"1566307518685","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518685","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518640","transaction_branch":"1566307518598"},{"hash":"1566307518688","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518688","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518635","transaction_branch":"1566307518601"},{"hash":"1566307518703","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518703","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518647","transaction_branch":"1566307518659"},{"hash":"1566307518706","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518706","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518640","transaction_branch":"1566307518605"},{"hash":"1566307518709","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518709","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518645","transaction_branch":"1566307518603"},{"hash":"1566307518712","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518712","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518669","transaction_branch":"1566307518611"},{"hash":"1566307518716","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518716","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518666","transaction_branch":"1566307518622"},{"hash":"1566307518719","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518719","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518638","transaction_branch":"1566307518703"},{"hash":"1566307518721","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518721","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518716","transaction_branch":"1566307518622"},{"hash":"1566307518723","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518723","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518643","transaction_branch":"1566307518624"},{"hash":"1566307518726","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518726","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518666","transaction_branch":"1566307518638"},{"hash":"1566307518730","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518730","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518632","transaction_branch":"1566307518645"},{"hash":"1566307518731","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518731","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518640","transaction_branch":"1566307518663"},{"hash":"1566307518733","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518733","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518721","transaction_branch":"1566307518703"},{"hash":"1566307518736","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518736","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518730","transaction_branch":"1566307518723"},{"hash":"1566307518739","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518739","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518635","transaction_branch":"1566307518730"},{"hash":"1566307518742","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518742","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518643","transaction_branch":"1566307518678"},{"hash":"1566307518743","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518743","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518716","transaction_branch":"1566307518742"},{"hash":"1566307518746","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518746","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518638","transaction_branch":"1566307518650"},{"hash":"1566307518750","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518750","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518643","transaction_branch":"1566307518657"},{"hash":"1566307518752","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518752","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518647","transaction_branch":"1566307518746"},{"hash":"1566307518755","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518755","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518681","transaction_branch":"1566307518703"},{"hash":"1566307518757","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518757","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518655","transaction_branch":"1566307518750"},{"hash":"1566307518760","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518760","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518743","transaction_branch":"1566307518731"},{"hash":"1566307518763","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518763","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518653","transaction_branch":"1566307518757"},{"hash":"1566307518764","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518764","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518716","transaction_branch":"1566307518716"},{"hash":"1566307518767","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518767","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518719","transaction_branch":"1566307518719"},{"hash":"1566307518770","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518770","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518659","transaction_branch":"1566307518743"},{"hash":"1566307518774","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518774","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518661","transaction_branch":"1566307518726"},{"hash":"1566307518777","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518777","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518726","transaction_branch":"1566307518723"},{"hash":"1566307518780","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518780","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518757","transaction_branch":"1566307518723"},{"hash":"1566307518781","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518781","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518683","transaction_branch":"1566307518663"},{"hash":"1566307518784","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518784","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518674","transaction_branch":"1566307518688"},{"hash":"1566307518786","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518786","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518774","transaction_branch":"1566307518666"},{"hash":"1566307518788","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518788","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518731","transaction_branch":"1566307518719"},{"hash":"1566307518790","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518790","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518752","transaction_branch":"1566307518750"},{"hash":"1566307518799","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518799","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518786","transaction_branch":"1566307518706"},{"hash":"1566307518801","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518801","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518706","transaction_branch":"1566307518788"},{"hash":"1566307518803","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518803","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518770","transaction_branch":"1566307518688"},{"hash":"1566307518806","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518806","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518750","transaction_branch":"1566307518777"},{"hash":"1566307518808","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518808","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518757","transaction_branch":"1566307518712"},{"hash":"1566307518810","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518810","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518770","transaction_branch":"1566307518764"},{"hash":"1566307518812","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518812","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518723","transaction_branch":"1566307518799"},{"hash":"1566307518815","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518815","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518780","transaction_branch":"1566307518739"},{"hash":"1566307518818","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518818","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518760","transaction_branch":"1566307518736"},{"hash":"1566307518820","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518820","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518750","transaction_branch":"1566307518818"},{"hash":"1566307518822","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518822","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518739","transaction_branch":"1566307518764"},{"hash":"1566307518826","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518826","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518781","transaction_branch":"1566307518808"},{"hash":"1566307518828","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518828","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518731","transaction_branch":"1566307518808"},{"hash":"1566307518830","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518830","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518723","transaction_branch":"1566307518742"},{"hash":"1566307518832","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518832","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518777","transaction_branch":"1566307518803"},{"hash":"1566307518835","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518835","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518764","transaction_branch":"1566307518736"},{"hash":"1566307518838","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518838","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518774","transaction_branch":"1566307518822"},{"hash":"1566307518840","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518840","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518752","transaction_branch":"1566307518810"},{"hash":"1566307518842","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518842","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518830","transaction_branch":"1566307518780"},{"hash":"1566307518844","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518844","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518764","transaction_branch":"1566307518840"},{"hash":"1566307518847","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518847","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518755","transaction_branch":"1566307518788"},{"hash":"1566307518850","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518850","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518828","transaction_branch":"1566307518770"},{"hash":"1566307518853","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518853","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518764","transaction_branch":"1566307518847"},{"hash":"1566307518856","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518856","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518788","transaction_branch":"1566307518764"},{"hash":"1566307518858","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518858","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518781","transaction_branch":"1566307518822"},{"hash":"1566307518860","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518860","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518853","transaction_branch":"1566307518850"},{"hash":"1566307518862","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518862","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518812","transaction_branch":"1566307518780"},{"hash":"1566307518868","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518868","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518764","transaction_branch":"1566307518826"},{"hash":"1566307518871","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518871","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518820","transaction_branch":"1566307518764"},{"hash":"1566307518874","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518874","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518835","transaction_branch":"1566307518871"},{"hash":"1566307518877","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518877","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518832","transaction_branch":"1566307518838"},{"hash":"1566307518880","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518880","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518826","transaction_branch":"1566307518820"},{"hash":"1566307518881","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518881","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518790","transaction_branch":"1566307518850"},{"hash":"1566307518883","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518883","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518815","transaction_branch":"1566307518818"},{"hash":"1566307518885","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518885","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518860","transaction_branch":"1566307518860"},{"hash":"1566307518887","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518887","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518862","transaction_branch":"1566307518799"},{"hash":"1566307518890","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518890","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518874","transaction_branch":"1566307518847"},{"hash":"1566307518892","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518892","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518860","transaction_branch":"1566307518803"},{"hash":"1566307518894","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518894","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518826","transaction_branch":"1566307518832"},{"hash":"1566307518897","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518897","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518877","transaction_branch":"1566307518810"},{"hash":"1566307518899","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518899","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518897","transaction_branch":"1566307518887"},{"hash":"1566307518902","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518902","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518880","transaction_branch":"1566307518801"},{"hash":"1566307518905","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518905","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518830","transaction_branch":"1566307518890"},{"hash":"1566307518907","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518907","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518874","transaction_branch":"1566307518840"},{"hash":"1566307518909","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518909","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518885","transaction_branch":"1566307518874"},{"hash":"1566307518913","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518913","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518828","transaction_branch":"1566307518907"},{"hash":"1566307518915","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518915","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518832","transaction_branch":"1566307518899"},{"hash":"1566307518918","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518918","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518907","transaction_branch":"1566307518858"},{"hash":"1566307518920","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518920","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518885","transaction_branch":"1566307518883"},{"hash":"1566307518923","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518923","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518844","transaction_branch":"1566307518905"},{"hash":"1566307518925","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518925","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518877","transaction_branch":"1566307518838"},{"hash":"1566307518928","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307518928","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518830","transaction_branch":"1566307518892"},{"hash":"1566307518931","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518931","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518928","transaction_branch":"1566307518892"},{"hash":"1566307518934","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518934","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518874","transaction_branch":"1566307518915"},{"hash":"1566307518937","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518937","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518853","transaction_branch":"1566307518905"},{"hash":"1566307518939","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518939","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518850","transaction_branch":"1566307518928"},{"hash":"1566307518941","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518941","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518880","transaction_branch":"1566307518897"},{"hash":"1566307518945","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518945","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518909","transaction_branch":"1566307518899"},{"hash":"1566307518947","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518947","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518853","transaction_branch":"1566307518894"},{"hash":"1566307518949","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518949","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518915","transaction_branch":"1566307518850"},{"hash":"1566307518952","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307518952","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518858","transaction_branch":"1566307518880"},{"hash":"1566307518954","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518954","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518947","transaction_branch":"1566307518907"},{"hash":"1566307518956","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518956","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518899","transaction_branch":"1566307518947"},{"hash":"1566307518959","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518959","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518874","transaction_branch":"1566307518928"},{"hash":"1566307518962","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518962","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518877","transaction_branch":"1566307518887"},{"hash":"1566307518964","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307518964","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518920","transaction_branch":"1566307518881"},{"hash":"1566307518966","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518966","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518939","transaction_branch":"1566307518862"},{"hash":"1566307518968","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518968","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518947","transaction_branch":"1566307518871"},{"hash":"1566307518971","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518971","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518937","transaction_branch":"1566307518871"},{"hash":"1566307518974","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518974","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518915","transaction_branch":"1566307518962"},{"hash":"1566307518976","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518976","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518909","transaction_branch":"1566307518971"},{"hash":"1566307518979","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518979","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518887","transaction_branch":"1566307518890"},{"hash":"1566307518980","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307518980","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518909","transaction_branch":"1566307518920"},{"hash":"1566307518983","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307518983","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518966","transaction_branch":"1566307518974"},{"hash":"1566307518985","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518985","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518894","transaction_branch":"1566307518959"},{"hash":"1566307518987","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307518987","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518887","transaction_branch":"1566307518894"},{"hash":"1566307518989","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307518989","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518939","transaction_branch":"1566307518976"},{"hash":"1566307518992","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307518992","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518934","transaction_branch":"1566307518941"},{"hash":"1566307518995","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307518995","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518899","transaction_branch":"1566307518897"},{"hash":"1566307518998","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307518998","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518952","transaction_branch":"1566307518909"},{"hash":"1566307519001","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519001","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518966","transaction_branch":"1566307518971"},{"hash":"1566307519004","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519004","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518915","transaction_branch":"1566307518987"},{"hash":"1566307519006","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519006","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518979","transaction_branch":"1566307518931"},{"hash":"1566307519011","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519011","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518971","transaction_branch":"1566307518983"},{"hash":"1566307519014","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519014","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518983","transaction_branch":"1566307518974"},{"hash":"1566307519017","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519017","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518915","transaction_branch":"1566307518998"},{"hash":"1566307519020","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519020","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519017","transaction_branch":"1566307518952"},{"hash":"1566307519022","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519022","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518920","transaction_branch":"1566307518941"},{"hash":"1566307519024","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519024","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518947","transaction_branch":"1566307518966"},{"hash":"1566307519027","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519027","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519020","transaction_branch":"1566307518974"},{"hash":"1566307519029","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519029","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518941","transaction_branch":"1566307519014"},{"hash":"1566307519033","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519033","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518959","transaction_branch":"1566307518985"},{"hash":"1566307519036","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519036","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518945","transaction_branch":"1566307519020"},{"hash":"1566307519037","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519037","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519027","transaction_branch":"1566307518959"},{"hash":"1566307519039","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519039","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519037","transaction_branch":"1566307518989"},{"hash":"1566307519042","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519042","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519001","transaction_branch":"1566307518959"},{"hash":"1566307519044","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519044","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518959","transaction_branch":"1566307519033"},{"hash":"1566307519046","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519046","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519022","transaction_branch":"1566307518987"},{"hash":"1566307519048","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519048","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518979","transaction_branch":"1566307518987"},{"hash":"1566307519050","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519050","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519044","transaction_branch":"1566307519011"},{"hash":"1566307519052","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519052","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519011","transaction_branch":"1566307519014"},{"hash":"1566307519054","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519054","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519036","transaction_branch":"1566307518987"},{"hash":"1566307519056","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519056","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519048","transaction_branch":"1566307518983"},{"hash":"1566307519060","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519060","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519011","transaction_branch":"1566307518985"},{"hash":"1566307519063","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519063","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519046","transaction_branch":"1566307519027"},{"hash":"1566307519066","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519066","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519006","transaction_branch":"1566307518971"},{"hash":"1566307519067","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519067","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519020","transaction_branch":"1566307518992"},{"hash":"1566307519070","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519070","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518989","transaction_branch":"1566307519066"},{"hash":"1566307519073","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519073","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519070","transaction_branch":"1566307518992"},{"hash":"1566307519076","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519076","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518987","transaction_branch":"1566307519017"},{"hash":"1566307519077","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519077","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518985","transaction_branch":"1566307519024"},{"hash":"1566307519080","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519080","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519024","transaction_branch":"1566307519060"},{"hash":"1566307519083","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519083","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307518987","transaction_branch":"1566307519001"},{"hash":"1566307519086","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519086","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519033","transaction_branch":"1566307519001"},{"hash":"1566307519089","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519089","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519017","transaction_branch":"1566307518985"},{"hash":"1566307519092","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519092","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519011","transaction_branch":"1566307519054"},{"hash":"1566307519093","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519093","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519027","transaction_branch":"1566307519017"},{"hash":"1566307519096","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519096","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519066","transaction_branch":"1566307519027"},{"hash":"1566307519099","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519099","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519093","transaction_branch":"1566307519093"},{"hash":"1566307519102","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519102","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519017","transaction_branch":"1566307519063"},{"hash":"1566307519106","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519106","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519046","transaction_branch":"1566307519022"},{"hash":"1566307519109","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519109","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519027","transaction_branch":"1566307519106"},{"hash":"1566307519110","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519110","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519086","transaction_branch":"1566307519086"},{"hash":"1566307519113","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519113","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519093","transaction_branch":"1566307519073"},{"hash":"1566307519116","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519116","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519024","transaction_branch":"1566307519110"},{"hash":"1566307519119","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519119","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519113","transaction_branch":"1566307519020"},{"hash":"1566307519121","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519121","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519092","transaction_branch":"1566307519022"},{"hash":"1566307519124","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519124","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519086","transaction_branch":"1566307519099"},{"hash":"1566307519126","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519126","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519039","transaction_branch":"1566307519096"},{"hash":"1566307519128","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519128","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519027","transaction_branch":"1566307519124"},{"hash":"1566307519130","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519130","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519080","transaction_branch":"1566307519039"},{"hash":"1566307519132","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519132","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519056","transaction_branch":"1566307519130"},{"hash":"1566307519134","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519134","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519106","transaction_branch":"1566307519086"},{"hash":"1566307519138","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519138","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519070","transaction_branch":"1566307519037"},{"hash":"1566307519141","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519141","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519113","transaction_branch":"1566307519046"},{"hash":"1566307519143","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519143","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519134","transaction_branch":"1566307519063"},{"hash":"1566307519145","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519145","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519119","transaction_branch":"1566307519080"},{"hash":"1566307519148","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519148","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519134","transaction_branch":"1566307519102"},{"hash":"1566307519150","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519150","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519113","transaction_branch":"1566307519141"},{"hash":"1566307519154","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519154","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519080","transaction_branch":"1566307519070"},{"hash":"1566307519156","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519156","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519063","transaction_branch":"1566307519109"},{"hash":"1566307519157","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519157","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519134","transaction_branch":"1566307519126"},{"hash":"1566307519160","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519160","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519070","transaction_branch":"1566307519089"},{"hash":"1566307519161","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519161","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519128","transaction_branch":"1566307519156"},{"hash":"1566307519164","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519164","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519116","transaction_branch":"1566307519141"},{"hash":"1566307519166","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519166","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519154","transaction_branch":"1566307519154"},{"hash":"1566307519169","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519169","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519134","transaction_branch":"1566307519141"},{"hash":"1566307519172","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519172","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519143","transaction_branch":"1566307519106"},{"hash":"1566307519173","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519173","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519076","transaction_branch":"1566307519092"},{"hash":"1566307519176","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519176","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519138","transaction_branch":"1566307519150"},{"hash":"1566307519179","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519179","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519134","transaction_branch":"1566307519161"},{"hash":"1566307519180","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519180","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519109","transaction_branch":"1566307519089"},{"hash":"1566307519182","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519182","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519154","transaction_branch":"1566307519176"},{"hash":"1566307519184","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519184","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519086","transaction_branch":"1566307519180"},{"hash":"1566307519187","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519187","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519154","transaction_branch":"1566307519096"},{"hash":"1566307519189","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519189","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519143","transaction_branch":"1566307519130"},{"hash":"1566307519191","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519191","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519134","transaction_branch":"1566307519113"},{"hash":"1566307519193","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519193","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519172","transaction_branch":"1566307519096"},{"hash":"1566307519195","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519195","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519102","transaction_branch":"1566307519138"},{"hash":"1566307519197","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519197","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519119","transaction_branch":"1566307519119"},{"hash":"1566307519199","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519199","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519179","transaction_branch":"1566307519110"},{"hash":"1566307519203","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519203","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519121","transaction_branch":"1566307519145"},{"hash":"1566307519206","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519206","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519197","transaction_branch":"1566307519180"},{"hash":"1566307519211","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519211","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519161","transaction_branch":"1566307519184"},{"hash":"1566307519213","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519213","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519145","transaction_branch":"1566307519195"},{"hash":"1566307519215","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519215","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519128","transaction_branch":"1566307519128"},{"hash":"1566307519218","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519218","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519191","transaction_branch":"1566307519130"},{"hash":"1566307519220","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519220","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519148","transaction_branch":"1566307519138"},{"hash":"1566307519223","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519223","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519156","transaction_branch":"1566307519169"},{"hash":"1566307519226","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519226","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519157","transaction_branch":"1566307519138"},{"hash":"1566307519228","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519228","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519191","transaction_branch":"1566307519169"},{"hash":"1566307519232","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519232","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519172","transaction_branch":"1566307519154"},{"hash":"1566307519234","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519234","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519138","transaction_branch":"1566307519156"},{"hash":"1566307519237","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519237","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519213","transaction_branch":"1566307519193"},{"hash":"1566307519240","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519240","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519180","transaction_branch":"1566307519160"},{"hash":"1566307519243","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519243","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519182","transaction_branch":"1566307519172"},{"hash":"1566307519245","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519245","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519187","transaction_branch":"1566307519189"},{"hash":"1566307519247","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519247","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519154","transaction_branch":"1566307519237"},{"hash":"1566307519249","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519249","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519193","transaction_branch":"1566307519240"},{"hash":"1566307519252","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519252","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519237","transaction_branch":"1566307519215"},{"hash":"1566307519254","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519254","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519157","transaction_branch":"1566307519184"},{"hash":"1566307519257","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519257","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519254","transaction_branch":"1566307519223"},{"hash":"1566307519259","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519259","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519243","transaction_branch":"1566307519232"},{"hash":"1566307519261","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519261","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519197","transaction_branch":"1566307519249"},{"hash":"1566307519263","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519263","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519199","transaction_branch":"1566307519164"},{"hash":"1566307519266","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519266","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519206","transaction_branch":"1566307519252"},{"hash":"1566307519267","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519267","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519249","transaction_branch":"1566307519226"},{"hash":"1566307519270","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519270","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519254","transaction_branch":"1566307519257"},{"hash":"1566307519273","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519273","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519249","transaction_branch":"1566307519215"},{"hash":"1566307519274","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519274","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519232","transaction_branch":"1566307519179"},{"hash":"1566307519276","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519276","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519215","transaction_branch":"1566307519234"},{"hash":"1566307519278","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519278","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519240","transaction_branch":"1566307519249"},{"hash":"1566307519281","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519281","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519254","transaction_branch":"1566307519270"},{"hash":"1566307519283","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519283","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519274","transaction_branch":"1566307519232"},{"hash":"1566307519286","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519286","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519237","transaction_branch":"1566307519187"},{"hash":"1566307519288","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519288","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519252","transaction_branch":"1566307519226"},{"hash":"1566307519291","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519291","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519263","transaction_branch":"1566307519288"},{"hash":"1566307519293","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519293","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519281","transaction_branch":"1566307519226"},{"hash":"1566307519296","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519296","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519274","transaction_branch":"1566307519237"},{"hash":"1566307519298","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519298","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519228","transaction_branch":"1566307519240"},{"hash":"1566307519300","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519300","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519276","transaction_branch":"1566307519206"},{"hash":"1566307519303","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519303","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519237","transaction_branch":"1566307519263"},{"hash":"1566307519306","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519306","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519283","transaction_branch":"1566307519291"},{"hash":"1566307519309","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519309","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519247","transaction_branch":"1566307519306"},{"hash":"1566307519310","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519310","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519226","transaction_branch":"1566307519278"},{"hash":"1566307519313","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519313","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519266","transaction_branch":"1566307519263"},{"hash":"1566307519316","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519316","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519234","transaction_branch":"1566307519232"},{"hash":"1566307519318","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519318","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519254","transaction_branch":"1566307519223"},{"hash":"1566307519320","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519320","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519313","transaction_branch":"1566307519232"},{"hash":"1566307519322","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519322","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519288","transaction_branch":"1566307519247"},{"hash":"1566307519325","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519325","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519254","transaction_branch":"1566307519283"},{"hash":"1566307519326","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519326","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519274","transaction_branch":"1566307519234"},{"hash":"1566307519329","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519329","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519281","transaction_branch":"1566307519243"},{"hash":"1566307519331","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519331","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519270","transaction_branch":"1566307519291"},{"hash":"1566307519333","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519333","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519274","transaction_branch":"1566307519303"},{"hash":"1566307519336","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519336","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519331","transaction_branch":"1566307519318"},{"hash":"1566307519338","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519338","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519261","transaction_branch":"1566307519245"},{"hash":"1566307519340","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519340","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519270","transaction_branch":"1566307519286"},{"hash":"1566307519343","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519343","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519270","transaction_branch":"1566307519266"},{"hash":"1566307519345","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519345","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519331","transaction_branch":"1566307519309"},{"hash":"1566307519348","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519348","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519273","transaction_branch":"1566307519310"},{"hash":"1566307519351","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519351","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519257","transaction_branch":"1566307519325"},{"hash":"1566307519353","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519353","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519266","transaction_branch":"1566307519325"},{"hash":"1566307519355","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519355","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519288","transaction_branch":"1566307519273"},{"hash":"1566307519357","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519357","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519306","transaction_branch":"1566307519333"},{"hash":"1566307519360","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519360","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519296","transaction_branch":"1566307519283"},{"hash":"1566307519362","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519362","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519267","transaction_branch":"1566307519278"},{"hash":"1566307519366","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519366","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519325","transaction_branch":"1566307519353"},{"hash":"1566307519369","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519369","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519273","transaction_branch":"1566307519355"},{"hash":"1566307519371","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519371","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519343","transaction_branch":"1566307519360"},{"hash":"1566307519374","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519374","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519276","transaction_branch":"1566307519298"},{"hash":"1566307519375","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519375","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519306","transaction_branch":"1566307519353"},{"hash":"1566307519378","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519378","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519355","transaction_branch":"1566307519283"},{"hash":"1566307519380","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519380","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519322","transaction_branch":"1566307519348"},{"hash":"1566307519383","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519383","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519300","transaction_branch":"1566307519326"},{"hash":"1566307519386","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519386","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519343","transaction_branch":"1566307519293"},{"hash":"1566307519387","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519387","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519309","transaction_branch":"1566307519293"},{"hash":"1566307519389","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519389","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519357","transaction_branch":"1566307519355"},{"hash":"1566307519391","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519391","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519338","transaction_branch":"1566307519351"},{"hash":"1566307519393","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519393","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519333","transaction_branch":"1566307519391"},{"hash":"1566307519396","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519396","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519320","transaction_branch":"1566307519300"},{"hash":"1566307519397","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519397","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519366","transaction_branch":"1566307519320"},{"hash":"1566307519399","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519399","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519320","transaction_branch":"1566307519320"},{"hash":"1566307519402","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519402","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519320","transaction_branch":"1566307519310"},{"hash":"1566307519404","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519404","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519402","transaction_branch":"1566307519320"},{"hash":"1566307519407","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519407","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519366","transaction_branch":"1566307519325"},{"hash":"1566307519410","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519410","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519357","transaction_branch":"1566307519375"},{"hash":"1566307519413","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519413","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519357","transaction_branch":"1566307519340"},{"hash":"1566307519416","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519416","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519383","transaction_branch":"1566307519396"},{"hash":"1566307519418","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519418","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519325","transaction_branch":"1566307519331"},{"hash":"1566307519420","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519420","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519375","transaction_branch":"1566307519362"},{"hash":"1566307519423","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519423","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519393","transaction_branch":"1566307519374"},{"hash":"1566307519426","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519426","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519391","transaction_branch":"1566307519375"},{"hash":"1566307519427","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519427","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519375","transaction_branch":"1566307519426"},{"hash":"1566307519429","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519429","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519338","transaction_branch":"1566307519393"},{"hash":"1566307519432","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519432","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519336","transaction_branch":"1566307519374"},{"hash":"1566307519435","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519435","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519374","transaction_branch":"1566307519399"},{"hash":"1566307519436","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519436","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519348","transaction_branch":"1566307519404"},{"hash":"1566307519439","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519439","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519386","transaction_branch":"1566307519380"},{"hash":"1566307519441","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519441","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519378","transaction_branch":"1566307519375"},{"hash":"1566307519443","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519443","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519416","transaction_branch":"1566307519366"},{"hash":"1566307519445","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519445","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519407","transaction_branch":"1566307519410"},{"hash":"1566307519448","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519448","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519387","transaction_branch":"1566307519426"},{"hash":"1566307519451","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519451","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519435","transaction_branch":"1566307519393"},{"hash":"1566307519454","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519454","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519357","transaction_branch":"1566307519404"},{"hash":"1566307519455","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519455","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519423","transaction_branch":"1566307519443"},{"hash":"1566307519458","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519458","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519443","transaction_branch":"1566307519416"},{"hash":"1566307519460","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519460","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519443","transaction_branch":"1566307519371"},{"hash":"1566307519463","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519463","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519423","transaction_branch":"1566307519380"},{"hash":"1566307519465","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519465","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519427","transaction_branch":"1566307519387"},{"hash":"1566307519468","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519468","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519465","transaction_branch":"1566307519426"},{"hash":"1566307519471","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519471","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519423","transaction_branch":"1566307519441"},{"hash":"1566307519473","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519473","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519427","transaction_branch":"1566307519454"},{"hash":"1566307519476","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519476","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519396","transaction_branch":"1566307519391"},{"hash":"1566307519478","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519478","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519460","transaction_branch":"1566307519463"},{"hash":"1566307519480","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519480","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519407","transaction_branch":"1566307519407"},{"hash":"1566307519482","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519482","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519445","transaction_branch":"1566307519407"},{"hash":"1566307519485","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519485","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519435","transaction_branch":"1566307519410"},{"hash":"1566307519487","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519487","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519480","transaction_branch":"1566307519473"},{"hash":"1566307519489","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519489","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519454","transaction_branch":"1566307519471"},{"hash":"1566307519491","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519491","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519480","transaction_branch":"1566307519489"},{"hash":"1566307519493","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519493","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519439","transaction_branch":"1566307519397"},{"hash":"1566307519495","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519495","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519473","transaction_branch":"1566307519413"},{"hash":"1566307519497","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519497","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519485","transaction_branch":"1566307519463"},{"hash":"1566307519499","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519499","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519416","transaction_branch":"1566307519487"},{"hash":"1566307519501","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519501","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519420","transaction_branch":"1566307519418"},{"hash":"1566307519504","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519504","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519478","transaction_branch":"1566307519463"},{"hash":"1566307519506","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519506","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519482","transaction_branch":"1566307519497"},{"hash":"1566307519508","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519508","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519460","transaction_branch":"1566307519493"},{"hash":"1566307519510","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519510","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519439","transaction_branch":"1566307519418"},{"hash":"1566307519513","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519513","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519491","transaction_branch":"1566307519443"},{"hash":"1566307519518","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519518","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519478","transaction_branch":"1566307519497"},{"hash":"1566307519520","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519520","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519458","transaction_branch":"1566307519441"},{"hash":"1566307519522","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519522","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519508","transaction_branch":"1566307519429"},{"hash":"1566307519525","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519525","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519480","transaction_branch":"1566307519504"},{"hash":"1566307519527","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519527","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519485","transaction_branch":"1566307519460"},{"hash":"1566307519530","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519530","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519458","transaction_branch":"1566307519485"},{"hash":"1566307519532","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519532","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519482","transaction_branch":"1566307519463"},{"hash":"1566307519535","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519535","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519525","transaction_branch":"1566307519480"},{"hash":"1566307519537","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519537","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519504","transaction_branch":"1566307519463"},{"hash":"1566307519540","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519540","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519504","transaction_branch":"1566307519455"},{"hash":"1566307519543","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519543","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519520","transaction_branch":"1566307519535"},{"hash":"1566307519544","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519544","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519493","transaction_branch":"1566307519458"},{"hash":"1566307519547","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519547","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519525","transaction_branch":"1566307519510"},{"hash":"1566307519548","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519548","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519530","transaction_branch":"1566307519530"},{"hash":"1566307519550","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519550","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519499","transaction_branch":"1566307519482"},{"hash":"1566307519552","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519552","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519540","transaction_branch":"1566307519501"},{"hash":"1566307519554","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519554","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519518","transaction_branch":"1566307519463"},{"hash":"1566307519557","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519557","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519510","transaction_branch":"1566307519473"},{"hash":"1566307519558","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519558","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519554","transaction_branch":"1566307519480"},{"hash":"1566307519560","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519560","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519513","transaction_branch":"1566307519520"},{"hash":"1566307519563","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519563","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519532","transaction_branch":"1566307519495"},{"hash":"1566307519565","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519565","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519513","transaction_branch":"1566307519513"},{"hash":"1566307519567","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519567","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519518","transaction_branch":"1566307519495"},{"hash":"1566307519570","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519570","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519482","transaction_branch":"1566307519480"},{"hash":"1566307519572","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519573","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519493","transaction_branch":"1566307519489"},{"hash":"1566307519575","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519575","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519535","transaction_branch":"1566307519518"},{"hash":"1566307519576","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519576","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519547","transaction_branch":"1566307519563"},{"hash":"1566307519578","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519578","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519540","transaction_branch":"1566307519552"},{"hash":"1566307519580","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519580","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519537","transaction_branch":"1566307519522"},{"hash":"1566307519583","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519583","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519575","transaction_branch":"1566307519563"},{"hash":"1566307519585","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519585","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519495","transaction_branch":"1566307519513"},{"hash":"1566307519588","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519588","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519552","transaction_branch":"1566307519544"},{"hash":"1566307519589","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519589","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519518","transaction_branch":"1566307519575"},{"hash":"1566307519592","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519592","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519578","transaction_branch":"1566307519540"},{"hash":"1566307519594","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519594","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519565","transaction_branch":"1566307519583"},{"hash":"1566307519597","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519597","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519518","transaction_branch":"1566307519510"},{"hash":"1566307519598","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519598","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519537","transaction_branch":"1566307519558"},{"hash":"1566307519601","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519601","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519576","transaction_branch":"1566307519578"},{"hash":"1566307519603","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519603","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519601","transaction_branch":"1566307519565"},{"hash":"1566307519606","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519606","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519513","transaction_branch":"1566307519572"},{"hash":"1566307519608","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519608","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519606","transaction_branch":"1566307519550"},{"hash":"1566307519611","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519611","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519532","transaction_branch":"1566307519565"},{"hash":"1566307519614","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519614","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519548","transaction_branch":"1566307519554"},{"hash":"1566307519616","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519616","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519547","transaction_branch":"1566307519547"},{"hash":"1566307519619","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519619","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519616","transaction_branch":"1566307519544"},{"hash":"1566307519621","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519621","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519592","transaction_branch":"1566307519597"},{"hash":"1566307519623","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519623","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519537","transaction_branch":"1566307519619"},{"hash":"1566307519626","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519626","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519601","transaction_branch":"1566307519572"},{"hash":"1566307519627","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519627","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519597","transaction_branch":"1566307519623"},{"hash":"1566307519630","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519630","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519619","transaction_branch":"1566307519544"},{"hash":"1566307519632","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519632","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519611","transaction_branch":"1566307519611"},{"hash":"1566307519634","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519634","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519594","transaction_branch":"1566307519632"},{"hash":"1566307519636","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519636","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519588","transaction_branch":"1566307519554"},{"hash":"1566307519639","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519639","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519552","transaction_branch":"1566307519550"},{"hash":"1566307519643","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519643","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519554","transaction_branch":"1566307519589"},{"hash":"1566307519645","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519645","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519585","transaction_branch":"1566307519632"},{"hash":"1566307519648","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519648","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519598","transaction_branch":"1566307519603"},{"hash":"1566307519650","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519650","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519608","transaction_branch":"1566307519583"},{"hash":"1566307519655","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519655","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519614","transaction_branch":"1566307519627"},{"hash":"1566307519658","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519658","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519636","transaction_branch":"1566307519639"},{"hash":"1566307519660","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519660","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519623","transaction_branch":"1566307519632"},{"hash":"1566307519663","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519663","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519565","transaction_branch":"1566307519570"},{"hash":"1566307519667","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519667","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519594","transaction_branch":"1566307519575"},{"hash":"1566307519670","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519670","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519608","transaction_branch":"1566307519576"},{"hash":"1566307519671","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519671","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519576","transaction_branch":"1566307519608"},{"hash":"1566307519673","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519673","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519578","transaction_branch":"1566307519606"},{"hash":"1566307519676","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519676","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519663","transaction_branch":"1566307519626"},{"hash":"1566307519677","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519677","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519655","transaction_branch":"1566307519578"},{"hash":"1566307519680","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519680","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519663","transaction_branch":"1566307519673"},{"hash":"1566307519682","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519682","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519614","transaction_branch":"1566307519616"},{"hash":"1566307519685","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519685","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519643","transaction_branch":"1566307519626"},{"hash":"1566307519687","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519687","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519598","transaction_branch":"1566307519655"},{"hash":"1566307519689","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519689","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519592","transaction_branch":"1566307519611"},{"hash":"1566307519692","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519692","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519677","transaction_branch":"1566307519677"},{"hash":"1566307519693","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519693","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519639","transaction_branch":"1566307519655"},{"hash":"1566307519696","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519696","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519676","transaction_branch":"1566307519671"},{"hash":"1566307519701","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519701","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519680","transaction_branch":"1566307519614"},{"hash":"1566307519704","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519704","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519650","transaction_branch":"1566307519663"},{"hash":"1566307519707","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519707","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519658","transaction_branch":"1566307519648"},{"hash":"1566307519709","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519709","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519677","transaction_branch":"1566307519687"},{"hash":"1566307519712","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519712","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519687","transaction_branch":"1566307519650"},{"hash":"1566307519714","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519714","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519650","transaction_branch":"1566307519682"},{"hash":"1566307519716","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519716","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519693","transaction_branch":"1566307519627"},{"hash":"1566307519719","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519719","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519632","transaction_branch":"1566307519648"},{"hash":"1566307519721","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519721","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519621","transaction_branch":"1566307519692"},{"hash":"1566307519722","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519722","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519701","transaction_branch":"1566307519621"},{"hash":"1566307519724","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519724","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519687","transaction_branch":"1566307519704"},{"hash":"1566307519727","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519727","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519667","transaction_branch":"1566307519707"},{"hash":"1566307519730","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519730","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519716","transaction_branch":"1566307519636"},{"hash":"1566307519732","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519732","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519645","transaction_branch":"1566307519639"},{"hash":"1566307519734","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519734","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519689","transaction_branch":"1566307519676"},{"hash":"1566307519738","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519738","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519682","transaction_branch":"1566307519730"},{"hash":"1566307519741","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519741","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519689","transaction_branch":"1566307519655"},{"hash":"1566307519744","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519744","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519704","transaction_branch":"1566307519704"},{"hash":"1566307519745","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519745","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519730","transaction_branch":"1566307519667"},{"hash":"1566307519748","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519748","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519645","transaction_branch":"1566307519701"},{"hash":"1566307519750","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519750","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519676","transaction_branch":"1566307519724"},{"hash":"1566307519752","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519752","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519692","transaction_branch":"1566307519721"},{"hash":"1566307519755","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519755","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519722","transaction_branch":"1566307519677"},{"hash":"1566307519757","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519757","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519696","transaction_branch":"1566307519724"},{"hash":"1566307519759","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519759","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519712","transaction_branch":"1566307519682"},{"hash":"1566307519761","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519761","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519670","transaction_branch":"1566307519759"},{"hash":"1566307519764","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519764","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519667","transaction_branch":"1566307519693"},{"hash":"1566307519765","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519765","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519748","transaction_branch":"1566307519727"},{"hash":"1566307519767","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519767","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519680","transaction_branch":"1566307519764"},{"hash":"1566307519770","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519770","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519680","transaction_branch":"1566307519709"},{"hash":"1566307519771","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519771","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519734","transaction_branch":"1566307519734"},{"hash":"1566307519773","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519773","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519738","transaction_branch":"1566307519685"},{"hash":"1566307519775","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519775","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519701","transaction_branch":"1566307519730"},{"hash":"1566307519778","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519778","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519759","transaction_branch":"1566307519701"},{"hash":"1566307519779","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519779","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519761","transaction_branch":"1566307519714"},{"hash":"1566307519781","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519781","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519770","transaction_branch":"1566307519724"},{"hash":"1566307519783","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519783","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519727","transaction_branch":"1566307519767"},{"hash":"1566307519785","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519785","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519722","transaction_branch":"1566307519778"},{"hash":"1566307519787","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519787","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519727","transaction_branch":"1566307519779"},{"hash":"1566307519790","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519790","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519764","transaction_branch":"1566307519759"},{"hash":"1566307519791","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519791","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519714","transaction_branch":"1566307519752"},{"hash":"1566307519794","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519794","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519722","transaction_branch":"1566307519779"},{"hash":"1566307519796","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519796","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519716","transaction_branch":"1566307519724"},{"hash":"1566307519798","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519798","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519732","transaction_branch":"1566307519761"},{"hash":"1566307519801","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519801","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519752","transaction_branch":"1566307519748"},{"hash":"1566307519803","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519803","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519719","transaction_branch":"1566307519773"},{"hash":"1566307519805","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519805","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519724","transaction_branch":"1566307519745"},{"hash":"1566307519808","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519808","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519767","transaction_branch":"1566307519765"},{"hash":"1566307519810","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519810","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519745","transaction_branch":"1566307519741"},{"hash":"1566307519813","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519813","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519757","transaction_branch":"1566307519790"},{"hash":"1566307519816","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519816","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519764","transaction_branch":"1566307519764"},{"hash":"1566307519819","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519819","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519734","transaction_branch":"1566307519730"},{"hash":"1566307519821","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519821","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519781","transaction_branch":"1566307519764"},{"hash":"1566307519823","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519823","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519767","transaction_branch":"1566307519796"},{"hash":"1566307519825","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519825","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519821","transaction_branch":"1566307519761"},{"hash":"1566307519828","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519828","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519808","transaction_branch":"1566307519744"},{"hash":"1566307519829","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519829","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519813","transaction_branch":"1566307519755"},{"hash":"1566307519832","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519832","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519757","transaction_branch":"1566307519773"},{"hash":"1566307519834","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519834","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519778","transaction_branch":"1566307519748"},{"hash":"1566307519836","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519836","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519803","transaction_branch":"1566307519805"},{"hash":"1566307519838","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519838","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519796","transaction_branch":"1566307519752"},{"hash":"1566307519840","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519840","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519834","transaction_branch":"1566307519838"},{"hash":"1566307519843","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519843","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519808","transaction_branch":"1566307519773"},{"hash":"1566307519844","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519844","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519757","transaction_branch":"1566307519778"},{"hash":"1566307519847","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519847","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519775","transaction_branch":"1566307519787"},{"hash":"1566307519848","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519848","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519781","transaction_branch":"1566307519813"},{"hash":"1566307519851","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519851","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519847","transaction_branch":"1566307519790"},{"hash":"1566307519853","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519853","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519810","transaction_branch":"1566307519779"},{"hash":"1566307519855","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519855","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519848","transaction_branch":"1566307519801"},{"hash":"1566307519858","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519858","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519836","transaction_branch":"1566307519823"},{"hash":"1566307519860","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519860","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519810","transaction_branch":"1566307519848"},{"hash":"1566307519862","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519862","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519798","transaction_branch":"1566307519781"},{"hash":"1566307519864","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519864","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519781","transaction_branch":"1566307519796"},{"hash":"1566307519866","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519866","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519828","transaction_branch":"1566307519858"},{"hash":"1566307519868","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519868","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519798","transaction_branch":"1566307519796"},{"hash":"1566307519870","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519870","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519808","transaction_branch":"1566307519803"},{"hash":"1566307519872","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519872","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519843","transaction_branch":"1566307519821"},{"hash":"1566307519875","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519875","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519843","transaction_branch":"1566307519870"},{"hash":"1566307519877","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519877","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519858","transaction_branch":"1566307519834"},{"hash":"1566307519880","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519880","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519834","transaction_branch":"1566307519862"},{"hash":"1566307519882","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519882","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519796","transaction_branch":"1566307519834"},{"hash":"1566307519885","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519885","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519870","transaction_branch":"1566307519819"},{"hash":"1566307519887","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519887","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519860","transaction_branch":"1566307519858"},{"hash":"1566307519889","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519889","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519801","transaction_branch":"1566307519838"},{"hash":"1566307519891","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519891","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519848","transaction_branch":"1566307519838"},{"hash":"1566307519894","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519894","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519805","transaction_branch":"1566307519866"},{"hash":"1566307519895","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519895","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519829","transaction_branch":"1566307519870"},{"hash":"1566307519897","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519897","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519813","transaction_branch":"1566307519887"},{"hash":"1566307519900","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519900","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519864","transaction_branch":"1566307519821"},{"hash":"1566307519902","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519902","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519844","transaction_branch":"1566307519823"},{"hash":"1566307519905","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519905","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519853","transaction_branch":"1566307519816"},{"hash":"1566307519907","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519907","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519862","transaction_branch":"1566307519838"},{"hash":"1566307519910","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519910","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519891","transaction_branch":"1566307519897"},{"hash":"1566307519912","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519912","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519900","transaction_branch":"1566307519853"},{"hash":"1566307519914","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519914","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519862","transaction_branch":"1566307519843"},{"hash":"1566307519917","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519917","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519868","transaction_branch":"1566307519885"},{"hash":"1566307519918","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519918","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519907","transaction_branch":"1566307519889"},{"hash":"1566307519921","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519921","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519897","transaction_branch":"1566307519866"},{"hash":"1566307519923","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519923","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519844","transaction_branch":"1566307519895"},{"hash":"1566307519926","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519926","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519855","transaction_branch":"1566307519905"},{"hash":"1566307519927","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519927","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519848","transaction_branch":"1566307519838"},{"hash":"1566307519930","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519930","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519872","transaction_branch":"1566307519927"},{"hash":"1566307519932","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519932","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519927","transaction_branch":"1566307519923"},{"hash":"1566307519935","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307519935","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519902","transaction_branch":"1566307519927"},{"hash":"1566307519936","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519936","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519914","transaction_branch":"1566307519918"},{"hash":"1566307519938","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519938","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519894","transaction_branch":"1566307519860"},{"hash":"1566307519941","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307519941","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519866","transaction_branch":"1566307519905"},{"hash":"1566307519944","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519944","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519902","transaction_branch":"1566307519894"},{"hash":"1566307519946","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519946","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519864","transaction_branch":"1566307519868"},{"hash":"1566307519948","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519948","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519895","transaction_branch":"1566307519923"},{"hash":"1566307519951","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519951","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519907","transaction_branch":"1566307519912"},{"hash":"1566307519953","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519953","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519951","transaction_branch":"1566307519944"},{"hash":"1566307519955","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519955","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519918","transaction_branch":"1566307519936"},{"hash":"1566307519958","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519958","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519900","transaction_branch":"1566307519921"},{"hash":"1566307519959","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307519959","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519917","transaction_branch":"1566307519902"},{"hash":"1566307519961","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519961","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519951","transaction_branch":"1566307519918"},{"hash":"1566307519964","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519964","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519895","transaction_branch":"1566307519887"},{"hash":"1566307519966","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519966","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519887","transaction_branch":"1566307519948"},{"hash":"1566307519969","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519969","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519944","transaction_branch":"1566307519958"},{"hash":"1566307519971","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307519971","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519912","transaction_branch":"1566307519917"},{"hash":"1566307519974","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519974","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519897","transaction_branch":"1566307519946"},{"hash":"1566307519976","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307519976","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519921","transaction_branch":"1566307519891"},{"hash":"1566307519978","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519978","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519941","transaction_branch":"1566307519969"},{"hash":"1566307519980","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307519980","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519948","transaction_branch":"1566307519895"},{"hash":"1566307519983","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519983","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519935","transaction_branch":"1566307519944"},{"hash":"1566307519985","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307519985","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519961","transaction_branch":"1566307519946"},{"hash":"1566307519988","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519988","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519927","transaction_branch":"1566307519983"},{"hash":"1566307519989","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307519989","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519959","transaction_branch":"1566307519935"},{"hash":"1566307519992","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307519992","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519948","transaction_branch":"1566307519910"},{"hash":"1566307519994","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519994","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519902","transaction_branch":"1566307519961"},{"hash":"1566307519997","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307519997","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519938","transaction_branch":"1566307519992"},{"hash":"1566307520000","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520000","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519941","transaction_branch":"1566307519938"},{"hash":"1566307520002","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520002","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519936","transaction_branch":"1566307519964"},{"hash":"1566307520004","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520004","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519936","transaction_branch":"1566307519923"},{"hash":"1566307520006","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520006","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519988","transaction_branch":"1566307519955"},{"hash":"1566307520009","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520009","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519959","transaction_branch":"1566307519944"},{"hash":"1566307520012","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520012","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519935","transaction_branch":"1566307519946"},{"hash":"1566307520014","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520014","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519978","transaction_branch":"1566307519978"},{"hash":"1566307520024","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520024","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519964","transaction_branch":"1566307519938"},{"hash":"1566307520028","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520028","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519988","transaction_branch":"1566307520014"},{"hash":"1566307520036","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520036","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519980","transaction_branch":"1566307519988"},{"hash":"1566307520038","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520038","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519932","transaction_branch":"1566307519955"},{"hash":"1566307520039","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520039","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519983","transaction_branch":"1566307519936"},{"hash":"1566307520041","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520041","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519955","transaction_branch":"1566307519978"},{"hash":"1566307520044","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520044","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519959","transaction_branch":"1566307519994"},{"hash":"1566307520047","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520047","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520000","transaction_branch":"1566307519964"},{"hash":"1566307520051","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520051","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520006","transaction_branch":"1566307519971"},{"hash":"1566307520054","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520054","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519980","transaction_branch":"1566307519969"},{"hash":"1566307520056","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520056","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520041","transaction_branch":"1566307519951"},{"hash":"1566307520058","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520058","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519948","transaction_branch":"1566307520024"},{"hash":"1566307520061","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520061","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519955","transaction_branch":"1566307520058"},{"hash":"1566307520066","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520066","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519997","transaction_branch":"1566307519961"},{"hash":"1566307520070","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520070","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520047","transaction_branch":"1566307519994"},{"hash":"1566307520073","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520073","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519964","transaction_branch":"1566307520061"},{"hash":"1566307520076","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520076","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520012","transaction_branch":"1566307520038"},{"hash":"1566307520078","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520078","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519961","transaction_branch":"1566307520070"},{"hash":"1566307520081","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520081","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519976","transaction_branch":"1566307520012"},{"hash":"1566307520085","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520085","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519985","transaction_branch":"1566307520004"},{"hash":"1566307520088","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520088","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519988","transaction_branch":"1566307520024"},{"hash":"1566307520091","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520091","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520039","transaction_branch":"1566307520073"},{"hash":"1566307520093","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520093","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520038","transaction_branch":"1566307520054"},{"hash":"1566307520096","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520096","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519980","transaction_branch":"1566307519997"},{"hash":"1566307520098","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520098","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520078","transaction_branch":"1566307520073"},{"hash":"1566307520100","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520100","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520093","transaction_branch":"1566307520085"},{"hash":"1566307520103","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520103","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520073","transaction_branch":"1566307520070"},{"hash":"1566307520105","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520105","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520044","transaction_branch":"1566307519989"},{"hash":"1566307520108","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520108","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520091","transaction_branch":"1566307520000"},{"hash":"1566307520111","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520111","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520066","transaction_branch":"1566307520009"},{"hash":"1566307520114","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520114","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519994","transaction_branch":"1566307520058"},{"hash":"1566307520117","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520117","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520000","transaction_branch":"1566307520006"},{"hash":"1566307520119","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520119","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307519997","transaction_branch":"1566307520103"},{"hash":"1566307520122","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520122","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520100","transaction_branch":"1566307520066"},{"hash":"1566307520125","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520125","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520051","transaction_branch":"1566307520002"},{"hash":"1566307520127","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520127","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520036","transaction_branch":"1566307520105"},{"hash":"1566307520130","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520130","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520088","transaction_branch":"1566307520117"},{"hash":"1566307520132","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520132","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520122","transaction_branch":"1566307520119"},{"hash":"1566307520134","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520134","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520051","transaction_branch":"1566307520014"},{"hash":"1566307520137","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520137","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520105","transaction_branch":"1566307520111"},{"hash":"1566307520139","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520139","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520047","transaction_branch":"1566307520036"},{"hash":"1566307520142","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520142","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520105","transaction_branch":"1566307520044"},{"hash":"1566307520145","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520145","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520105","transaction_branch":"1566307520100"},{"hash":"1566307520147","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520147","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520105","transaction_branch":"1566307520058"},{"hash":"1566307520150","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520150","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520073","transaction_branch":"1566307520085"},{"hash":"1566307520152","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520152","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520041","transaction_branch":"1566307520081"},{"hash":"1566307520155","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520155","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520093","transaction_branch":"1566307520142"},{"hash":"1566307520157","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520157","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520051","transaction_branch":"1566307520145"},{"hash":"1566307520160","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520160","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520070","transaction_branch":"1566307520147"},{"hash":"1566307520163","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520163","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520091","transaction_branch":"1566307520117"},{"hash":"1566307520166","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520166","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520088","transaction_branch":"1566307520091"},{"hash":"1566307520167","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520167","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520117","transaction_branch":"1566307520139"},{"hash":"1566307520170","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520170","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520081","transaction_branch":"1566307520073"},{"hash":"1566307520173","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520173","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520085","transaction_branch":"1566307520160"},{"hash":"1566307520176","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520176","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520160","transaction_branch":"1566307520122"},{"hash":"1566307520178","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520178","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520076","transaction_branch":"1566307520137"},{"hash":"1566307520180","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520180","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520139","transaction_branch":"1566307520127"},{"hash":"1566307520183","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520183","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520134","transaction_branch":"1566307520180"},{"hash":"1566307520184","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520184","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520139","transaction_branch":"1566307520127"},{"hash":"1566307520187","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520187","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520117","transaction_branch":"1566307520173"},{"hash":"1566307520188","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520188","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520184","transaction_branch":"1566307520114"},{"hash":"1566307520191","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520191","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520166","transaction_branch":"1566307520130"},{"hash":"1566307520192","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520192","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520117","transaction_branch":"1566307520132"},{"hash":"1566307520194","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520194","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520125","transaction_branch":"1566307520178"},{"hash":"1566307520197","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520197","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520152","transaction_branch":"1566307520160"},{"hash":"1566307520200","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520200","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520147","transaction_branch":"1566307520114"},{"hash":"1566307520201","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520201","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520178","transaction_branch":"1566307520170"},{"hash":"1566307520203","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520203","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520166","transaction_branch":"1566307520170"},{"hash":"1566307520206","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520206","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520111","transaction_branch":"1566307520160"},{"hash":"1566307520209","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520209","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520192","transaction_branch":"1566307520117"},{"hash":"1566307520212","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520212","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520178","transaction_branch":"1566307520184"},{"hash":"1566307520215","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520215","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520201","transaction_branch":"1566307520187"},{"hash":"1566307520216","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520216","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520157","transaction_branch":"1566307520187"},{"hash":"1566307520218","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520218","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520197","transaction_branch":"1566307520173"},{"hash":"1566307520220","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520220","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520127","transaction_branch":"1566307520130"},{"hash":"1566307520223","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520223","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520127","transaction_branch":"1566307520173"},{"hash":"1566307520224","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520224","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520134","transaction_branch":"1566307520152"},{"hash":"1566307520226","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520226","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520203","transaction_branch":"1566307520197"},{"hash":"1566307520229","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520229","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520176","transaction_branch":"1566307520178"},{"hash":"1566307520232","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520232","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520170","transaction_branch":"1566307520212"},{"hash":"1566307520233","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520233","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520232","transaction_branch":"1566307520188"},{"hash":"1566307520236","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520236","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520232","transaction_branch":"1566307520197"},{"hash":"1566307520238","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520238","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520233","transaction_branch":"1566307520203"},{"hash":"1566307520241","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520241","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520155","transaction_branch":"1566307520167"},{"hash":"1566307520244","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520244","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520241","transaction_branch":"1566307520163"},{"hash":"1566307520247","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520247","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520212","transaction_branch":"1566307520170"},{"hash":"1566307520249","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520249","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520160","transaction_branch":"1566307520183"},{"hash":"1566307520252","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520252","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520216","transaction_branch":"1566307520173"},{"hash":"1566307520253","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520253","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520200","transaction_branch":"1566307520238"},{"hash":"1566307520255","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520255","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520224","transaction_branch":"1566307520247"},{"hash":"1566307520258","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520258","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520167","transaction_branch":"1566307520249"},{"hash":"1566307520261","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520261","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520223","transaction_branch":"1566307520176"},{"hash":"1566307520263","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520263","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520203","transaction_branch":"1566307520197"},{"hash":"1566307520266","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520266","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520183","transaction_branch":"1566307520226"},{"hash":"1566307520269","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520269","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520215","transaction_branch":"1566307520244"},{"hash":"1566307520271","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520271","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520252","transaction_branch":"1566307520233"},{"hash":"1566307520274","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520274","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520215","transaction_branch":"1566307520183"},{"hash":"1566307520276","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520276","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520241","transaction_branch":"1566307520191"},{"hash":"1566307520279","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520279","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520258","transaction_branch":"1566307520241"},{"hash":"1566307520280","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520280","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520244","transaction_branch":"1566307520215"},{"hash":"1566307520282","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520282","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520197","transaction_branch":"1566307520279"},{"hash":"1566307520284","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520284","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520201","transaction_branch":"1566307520263"},{"hash":"1566307520286","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520286","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520194","transaction_branch":"1566307520284"},{"hash":"1566307520288","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520288","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520229","transaction_branch":"1566307520233"},{"hash":"1566307520291","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520291","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520203","transaction_branch":"1566307520197"},{"hash":"1566307520294","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520294","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520261","transaction_branch":"1566307520284"},{"hash":"1566307520295","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520295","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520238","transaction_branch":"1566307520294"},{"hash":"1566307520297","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520297","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520247","transaction_branch":"1566307520276"},{"hash":"1566307520300","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520300","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520238","transaction_branch":"1566307520276"},{"hash":"1566307520301","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520301","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520284","transaction_branch":"1566307520224"},{"hash":"1566307520304","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520304","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520288","transaction_branch":"1566307520226"},{"hash":"1566307520306","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520306","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520271","transaction_branch":"1566307520249"},{"hash":"1566307520309","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520309","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520252","transaction_branch":"1566307520216"},{"hash":"1566307520312","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520312","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520223","transaction_branch":"1566307520279"},{"hash":"1566307520315","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520315","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520258","transaction_branch":"1566307520282"},{"hash":"1566307520317","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520317","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520233","transaction_branch":"1566307520229"},{"hash":"1566307520320","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520320","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520274","transaction_branch":"1566307520288"},{"hash":"1566307520323","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520323","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520306","transaction_branch":"1566307520255"},{"hash":"1566307520324","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520324","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520309","transaction_branch":"1566307520301"},{"hash":"1566307520326","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520326","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520312","transaction_branch":"1566307520282"},{"hash":"1566307520328","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520328","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520324","transaction_branch":"1566307520269"},{"hash":"1566307520330","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520330","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520317","transaction_branch":"1566307520238"},{"hash":"1566307520333","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520333","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520317","transaction_branch":"1566307520253"},{"hash":"1566307520336","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520336","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520300","transaction_branch":"1566307520276"},{"hash":"1566307520339","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520339","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520294","transaction_branch":"1566307520279"},{"hash":"1566307520342","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520342","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520339","transaction_branch":"1566307520297"},{"hash":"1566307520345","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520345","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520324","transaction_branch":"1566307520276"},{"hash":"1566307520347","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520347","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520284","transaction_branch":"1566307520317"},{"hash":"1566307520349","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520349","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520279","transaction_branch":"1566307520328"},{"hash":"1566307520351","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520351","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520330","transaction_branch":"1566307520280"},{"hash":"1566307520353","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520353","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520297","transaction_branch":"1566307520261"},{"hash":"1566307520356","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520356","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520301","transaction_branch":"1566307520342"},{"hash":"1566307520357","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520357","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520304","transaction_branch":"1566307520300"},{"hash":"1566307520360","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520360","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520323","transaction_branch":"1566307520306"},{"hash":"1566307520362","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520362","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520294","transaction_branch":"1566307520312"},{"hash":"1566307520365","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520365","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520276","transaction_branch":"1566307520353"},{"hash":"1566307520368","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520368","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520362","transaction_branch":"1566307520286"},{"hash":"1566307520371","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520371","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520345","transaction_branch":"1566307520301"},{"hash":"1566307520372","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520372","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520301","transaction_branch":"1566307520294"},{"hash":"1566307520375","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520375","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520297","transaction_branch":"1566307520317"},{"hash":"1566307520378","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520378","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520347","transaction_branch":"1566307520365"},{"hash":"1566307520380","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520380","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520297","transaction_branch":"1566307520312"},{"hash":"1566307520383","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520383","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520368","transaction_branch":"1566307520371"},{"hash":"1566307520384","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520384","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520349","transaction_branch":"1566307520339"},{"hash":"1566307520387","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520387","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520384","transaction_branch":"1566307520347"},{"hash":"1566307520388","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520388","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520320","transaction_branch":"1566307520368"},{"hash":"1566307520391","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520391","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520317","transaction_branch":"1566307520371"},{"hash":"1566307520393","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520393","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520342","transaction_branch":"1566307520301"},{"hash":"1566307520395","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520395","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520347","transaction_branch":"1566307520371"},{"hash":"1566307520397","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520397","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520351","transaction_branch":"1566307520345"},{"hash":"1566307520399","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520399","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520336","transaction_branch":"1566307520378"},{"hash":"1566307520402","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520402","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520384","transaction_branch":"1566307520375"},{"hash":"1566307520404","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520404","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520330","transaction_branch":"1566307520383"},{"hash":"1566307520405","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520405","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520372","transaction_branch":"1566307520347"},{"hash":"1566307520407","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520407","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520388","transaction_branch":"1566307520402"},{"hash":"1566307520409","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520409","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520395","transaction_branch":"1566307520349"},{"hash":"1566307520412","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520412","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520378","transaction_branch":"1566307520395"},{"hash":"1566307520414","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520414","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520328","transaction_branch":"1566307520333"},{"hash":"1566307520416","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520416","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520378","transaction_branch":"1566307520333"},{"hash":"1566307520419","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520419","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520409","transaction_branch":"1566307520407"},{"hash":"1566307520422","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520422","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520353","transaction_branch":"1566307520336"},{"hash":"1566307520424","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520424","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520347","transaction_branch":"1566307520407"},{"hash":"1566307520427","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520427","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520353","transaction_branch":"1566307520387"},{"hash":"1566307520429","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520429","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520368","transaction_branch":"1566307520391"},{"hash":"1566307520432","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520432","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520356","transaction_branch":"1566307520375"},{"hash":"1566307520435","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520435","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520362","transaction_branch":"1566307520427"},{"hash":"1566307520437","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520437","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520347","transaction_branch":"1566307520388"},{"hash":"1566307520439","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520439","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520395","transaction_branch":"1566307520424"},{"hash":"1566307520441","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520441","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520357","transaction_branch":"1566307520407"},{"hash":"1566307520444","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520444","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520409","transaction_branch":"1566307520375"},{"hash":"1566307520446","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520446","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520424","transaction_branch":"1566307520409"},{"hash":"1566307520449","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520449","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520356","transaction_branch":"1566307520395"},{"hash":"1566307520451","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520451","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520362","transaction_branch":"1566307520435"},{"hash":"1566307520454","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520454","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520360","transaction_branch":"1566307520435"},{"hash":"1566307520456","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520457","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520402","transaction_branch":"1566307520419"},{"hash":"1566307520458","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520458","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520446","transaction_branch":"1566307520444"},{"hash":"1566307520461","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520461","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520446","transaction_branch":"1566307520399"},{"hash":"1566307520463","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520463","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520397","transaction_branch":"1566307520451"},{"hash":"1566307520466","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520466","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520372","transaction_branch":"1566307520397"},{"hash":"1566307520468","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520468","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520454","transaction_branch":"1566307520416"},{"hash":"1566307520471","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520471","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520399","transaction_branch":"1566307520456"},{"hash":"1566307520474","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520474","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520444","transaction_branch":"1566307520414"},{"hash":"1566307520475","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520475","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520461","transaction_branch":"1566307520456"},{"hash":"1566307520478","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520478","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520437","transaction_branch":"1566307520405"},{"hash":"1566307520481","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520481","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520444","transaction_branch":"1566307520397"},{"hash":"1566307520483","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520483","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520451","transaction_branch":"1566307520449"},{"hash":"1566307520486","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520486","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520449","transaction_branch":"1566307520427"},{"hash":"1566307520488","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520488","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520432","transaction_branch":"1566307520444"},{"hash":"1566307520491","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520491","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520444","transaction_branch":"1566307520424"},{"hash":"1566307520493","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520493","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520427","transaction_branch":"1566307520466"},{"hash":"1566307520496","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520496","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520454","transaction_branch":"1566307520493"},{"hash":"1566307520499","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520499","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520412","transaction_branch":"1566307520456"},{"hash":"1566307520500","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520500","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520454","transaction_branch":"1566307520441"},{"hash":"1566307520503","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520503","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520449","transaction_branch":"1566307520466"},{"hash":"1566307520506","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520506","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520503","transaction_branch":"1566307520437"},{"hash":"1566307520508","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520508","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520409","transaction_branch":"1566307520441"},{"hash":"1566307520510","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520510","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520422","transaction_branch":"1566307520456"},{"hash":"1566307520513","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520513","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520508","transaction_branch":"1566307520506"},{"hash":"1566307520515","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520515","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520458","transaction_branch":"1566307520486"},{"hash":"1566307520518","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520518","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520444","transaction_branch":"1566307520451"},{"hash":"1566307520520","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520520","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520429","transaction_branch":"1566307520508"},{"hash":"1566307520523","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520523","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520486","transaction_branch":"1566307520471"},{"hash":"1566307520524","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520524","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520441","transaction_branch":"1566307520506"},{"hash":"1566307520526","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520526","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520510","transaction_branch":"1566307520500"},{"hash":"1566307520529","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520529","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520444","transaction_branch":"1566307520474"},{"hash":"1566307520532","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520532","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520488","transaction_branch":"1566307520474"},{"hash":"1566307520535","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520535","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520526","transaction_branch":"1566307520475"},{"hash":"1566307520536","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520536","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520468","transaction_branch":"1566307520529"},{"hash":"1566307520538","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520538","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520520","transaction_branch":"1566307520500"},{"hash":"1566307520541","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520541","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520486","transaction_branch":"1566307520444"},{"hash":"1566307520543","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520543","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520466","transaction_branch":"1566307520478"},{"hash":"1566307520546","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520546","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520493","transaction_branch":"1566307520478"},{"hash":"1566307520549","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520549","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520486","transaction_branch":"1566307520475"},{"hash":"1566307520551","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520551","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520510","transaction_branch":"1566307520541"},{"hash":"1566307520553","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520553","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520491","transaction_branch":"1566307520546"},{"hash":"1566307520556","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520556","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520553","transaction_branch":"1566307520478"},{"hash":"1566307520559","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520559","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520478","transaction_branch":"1566307520553"},{"hash":"1566307520560","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520560","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520503","transaction_branch":"1566307520536"},{"hash":"1566307520562","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520562","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520486","transaction_branch":"1566307520518"},{"hash":"1566307520565","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520565","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520510","transaction_branch":"1566307520523"},{"hash":"1566307520567","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520567","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520560","transaction_branch":"1566307520556"},{"hash":"1566307520570","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520570","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520560","transaction_branch":"1566307520535"},{"hash":"1566307520573","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520573","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520483","transaction_branch":"1566307520543"},{"hash":"1566307520575","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520575","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520541","transaction_branch":"1566307520491"},{"hash":"1566307520578","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520578","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520513","transaction_branch":"1566307520499"},{"hash":"1566307520580","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520580","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520515","transaction_branch":"1566307520551"},{"hash":"1566307520582","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520582","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520510","transaction_branch":"1566307520551"},{"hash":"1566307520584","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520584","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520565","transaction_branch":"1566307520532"},{"hash":"1566307520587","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520587","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520500","transaction_branch":"1566307520520"},{"hash":"1566307520590","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520590","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520543","transaction_branch":"1566307520508"},{"hash":"1566307520592","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520592","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520567","transaction_branch":"1566307520532"},{"hash":"1566307520595","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520595","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520570","transaction_branch":"1566307520573"},{"hash":"1566307520597","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520597","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520590","transaction_branch":"1566307520513"},{"hash":"1566307520600","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520600","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520529","transaction_branch":"1566307520538"},{"hash":"1566307520603","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520603","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520541","transaction_branch":"1566307520597"},{"hash":"1566307520606","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520606","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520553","transaction_branch":"1566307520567"},{"hash":"1566307520608","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520608","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520560","transaction_branch":"1566307520560"},{"hash":"1566307520611","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520611","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520541","transaction_branch":"1566307520541"},{"hash":"1566307520613","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520613","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520578","transaction_branch":"1566307520515"},{"hash":"1566307520615","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520615","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520608","transaction_branch":"1566307520538"},{"hash":"1566307520617","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520617","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520608","transaction_branch":"1566307520538"},{"hash":"1566307520620","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520620","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520541","transaction_branch":"1566307520608"},{"hash":"1566307520623","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520623","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520597","transaction_branch":"1566307520546"},{"hash":"1566307520625","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520625","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520546","transaction_branch":"1566307520603"},{"hash":"1566307520627","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520627","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520567","transaction_branch":"1566307520565"},{"hash":"1566307520629","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520629","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520608","transaction_branch":"1566307520611"},{"hash":"1566307520632","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520632","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520600","transaction_branch":"1566307520584"},{"hash":"1566307520635","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520635","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520590","transaction_branch":"1566307520562"},{"hash":"1566307520637","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520637","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520551","transaction_branch":"1566307520582"},{"hash":"1566307520640","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520640","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520620","transaction_branch":"1566307520575"},{"hash":"1566307520642","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520642","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520546","transaction_branch":"1566307520597"},{"hash":"1566307520644","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520644","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520562","transaction_branch":"1566307520580"},{"hash":"1566307520646","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520646","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520625","transaction_branch":"1566307520625"},{"hash":"1566307520648","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520648","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520635","transaction_branch":"1566307520587"},{"hash":"1566307520650","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520650","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520595","transaction_branch":"1566307520567"},{"hash":"1566307520653","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520653","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520615","transaction_branch":"1566307520629"},{"hash":"1566307520655","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520655","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520646","transaction_branch":"1566307520592"},{"hash":"1566307520658","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520658","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520650","transaction_branch":"1566307520625"},{"hash":"1566307520660","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520660","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520623","transaction_branch":"1566307520615"},{"hash":"1566307520663","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520663","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520629","transaction_branch":"1566307520584"},{"hash":"1566307520664","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520664","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520611","transaction_branch":"1566307520570"},{"hash":"1566307520666","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520666","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520632","transaction_branch":"1566307520629"},{"hash":"1566307520669","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520669","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520611","transaction_branch":"1566307520664"},{"hash":"1566307520672","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520672","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520580","transaction_branch":"1566307520664"},{"hash":"1566307520675","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520675","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520653","transaction_branch":"1566307520640"},{"hash":"1566307520678","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520678","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520592","transaction_branch":"1566307520582"},{"hash":"1566307520681","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520681","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520606","transaction_branch":"1566307520600"},{"hash":"1566307520683","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520683","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520646","transaction_branch":"1566307520587"},{"hash":"1566307520685","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520685","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520666","transaction_branch":"1566307520664"},{"hash":"1566307520687","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520687","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520635","transaction_branch":"1566307520675"},{"hash":"1566307520689","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520690","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520664","transaction_branch":"1566307520648"},{"hash":"1566307520691","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520691","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520672","transaction_branch":"1566307520627"},{"hash":"1566307520694","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520694","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520669","transaction_branch":"1566307520615"},{"hash":"1566307520695","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520695","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520627","transaction_branch":"1566307520600"},{"hash":"1566307520698","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520698","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520603","transaction_branch":"1566307520687"},{"hash":"1566307520699","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520699","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520646","transaction_branch":"1566307520660"},{"hash":"1566307520702","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520702","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520695","transaction_branch":"1566307520678"},{"hash":"1566307520705","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520705","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520681","transaction_branch":"1566307520699"},{"hash":"1566307520708","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520708","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520648","transaction_branch":"1566307520658"},{"hash":"1566307520709","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520709","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520637","transaction_branch":"1566307520699"},{"hash":"1566307520712","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520712","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520658","transaction_branch":"1566307520669"},{"hash":"1566307520715","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520715","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520663","transaction_branch":"1566307520640"},{"hash":"1566307520716","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520716","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520672","transaction_branch":"1566307520702"},{"hash":"1566307520719","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520719","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520666","transaction_branch":"1566307520698"},{"hash":"1566307520720","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520720","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520691","transaction_branch":"1566307520719"},{"hash":"1566307520723","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520723","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520720","transaction_branch":"1566307520655"},{"hash":"1566307520725","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520725","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520685","transaction_branch":"1566307520716"},{"hash":"1566307520727","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520727","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520719","transaction_branch":"1566307520683"},{"hash":"1566307520730","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520730","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520725","transaction_branch":"1566307520695"},{"hash":"1566307520732","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520732","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520658","transaction_branch":"1566307520709"},{"hash":"1566307520734","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520734","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520685","transaction_branch":"1566307520685"},{"hash":"1566307520737","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520737","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520734","transaction_branch":"1566307520685"},{"hash":"1566307520739","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520739","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520737","transaction_branch":"1566307520723"},{"hash":"1566307520742","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520742","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520708","transaction_branch":"1566307520681"},{"hash":"1566307520745","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520745","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520655","transaction_branch":"1566307520715"},{"hash":"1566307520747","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520747","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520716","transaction_branch":"1566307520732"},{"hash":"1566307520750","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520750","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520699","transaction_branch":"1566307520716"},{"hash":"1566307520752","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520752","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520737","transaction_branch":"1566307520664"},{"hash":"1566307520755","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520755","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520689","transaction_branch":"1566307520720"},{"hash":"1566307520758","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520758","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520694","transaction_branch":"1566307520685"},{"hash":"1566307520759","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520759","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520681","transaction_branch":"1566307520739"},{"hash":"1566307520762","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520762","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520734","transaction_branch":"1566307520715"},{"hash":"1566307520764","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520764","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520689","transaction_branch":"1566307520723"},{"hash":"1566307520767","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520767","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520732","transaction_branch":"1566307520689"},{"hash":"1566307520768","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520768","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520759","transaction_branch":"1566307520715"},{"hash":"1566307520771","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520771","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520752","transaction_branch":"1566307520691"},{"hash":"1566307520774","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520774","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520727","transaction_branch":"1566307520720"},{"hash":"1566307520776","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520776","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520699","transaction_branch":"1566307520752"},{"hash":"1566307520779","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520779","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520702","transaction_branch":"1566307520709"},{"hash":"1566307520780","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520780","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520758","transaction_branch":"1566307520732"},{"hash":"1566307520783","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520783","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520750","transaction_branch":"1566307520767"},{"hash":"1566307520786","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520786","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520776","transaction_branch":"1566307520695"},{"hash":"1566307520787","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520787","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520720","transaction_branch":"1566307520783"},{"hash":"1566307520789","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520789","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520695","transaction_branch":"1566307520732"},{"hash":"1566307520791","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520791","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520780","transaction_branch":"1566307520719"},{"hash":"1566307520793","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520793","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520709","transaction_branch":"1566307520730"},{"hash":"1566307520795","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520795","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520719","transaction_branch":"1566307520737"},{"hash":"1566307520798","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520798","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520750","transaction_branch":"1566307520715"},{"hash":"1566307520801","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520801","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520727","transaction_branch":"1566307520774"},{"hash":"1566307520803","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520803","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520791","transaction_branch":"1566307520716"},{"hash":"1566307520805","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520805","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520725","transaction_branch":"1566307520720"},{"hash":"1566307520807","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520807","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520764","transaction_branch":"1566307520793"},{"hash":"1566307520809","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520809","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520776","transaction_branch":"1566307520789"},{"hash":"1566307520812","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520812","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520801","transaction_branch":"1566307520768"},{"hash":"1566307520813","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520813","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520739","transaction_branch":"1566307520809"},{"hash":"1566307520816","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520816","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520779","transaction_branch":"1566307520745"},{"hash":"1566307520817","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520817","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520798","transaction_branch":"1566307520747"},{"hash":"1566307520820","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520820","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520780","transaction_branch":"1566307520732"},{"hash":"1566307520822","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520822","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520730","transaction_branch":"1566307520817"},{"hash":"1566307520825","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520825","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520764","transaction_branch":"1566307520801"},{"hash":"1566307520827","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520827","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520801","transaction_branch":"1566307520820"},{"hash":"1566307520830","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520830","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520795","transaction_branch":"1566307520759"},{"hash":"1566307520833","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520833","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520755","transaction_branch":"1566307520807"},{"hash":"1566307520834","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520834","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520803","transaction_branch":"1566307520827"},{"hash":"1566307520836","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520836","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520780","transaction_branch":"1566307520834"},{"hash":"1566307520839","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520839","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520813","transaction_branch":"1566307520771"},{"hash":"1566307520842","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520842","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520768","transaction_branch":"1566307520771"},{"hash":"1566307520844","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520844","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520817","transaction_branch":"1566307520817"},{"hash":"1566307520846","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520846","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520827","transaction_branch":"1566307520768"},{"hash":"1566307520849","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520849","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520807","transaction_branch":"1566307520846"},{"hash":"1566307520851","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520851","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520842","transaction_branch":"1566307520759"},{"hash":"1566307520854","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520854","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520779","transaction_branch":"1566307520809"},{"hash":"1566307520857","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520857","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520793","transaction_branch":"1566307520776"},{"hash":"1566307520858","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520858","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520798","transaction_branch":"1566307520827"},{"hash":"1566307520860","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520860","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520776","transaction_branch":"1566307520803"},{"hash":"1566307520863","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520863","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520807","transaction_branch":"1566307520787"},{"hash":"1566307520865","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520865","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520825","transaction_branch":"1566307520839"},{"hash":"1566307520867","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520867","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520865","transaction_branch":"1566307520833"},{"hash":"1566307520870","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520870","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520830","transaction_branch":"1566307520780"},{"hash":"1566307520873","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520873","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520854","transaction_branch":"1566307520798"},{"hash":"1566307520874","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520874","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520851","transaction_branch":"1566307520830"},{"hash":"1566307520876","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520876","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520816","transaction_branch":"1566307520789"},{"hash":"1566307520879","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520879","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520827","transaction_branch":"1566307520858"},{"hash":"1566307520881","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520881","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520854","transaction_branch":"1566307520834"},{"hash":"1566307520884","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520884","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520857","transaction_branch":"1566307520827"},{"hash":"1566307520887","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520887","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520857","transaction_branch":"1566307520822"},{"hash":"1566307520888","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520888","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520836","transaction_branch":"1566307520849"},{"hash":"1566307520891","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520891","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520867","transaction_branch":"1566307520830"},{"hash":"1566307520892","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520892","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520820","transaction_branch":"1566307520816"},{"hash":"1566307520894","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520894","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520854","transaction_branch":"1566307520892"},{"hash":"1566307520896","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520896","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520858","transaction_branch":"1566307520891"},{"hash":"1566307520899","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520899","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520817","transaction_branch":"1566307520825"},{"hash":"1566307520902","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520902","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520891","transaction_branch":"1566307520854"},{"hash":"1566307520903","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520903","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520839","transaction_branch":"1566307520816"},{"hash":"1566307520905","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520905","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520873","transaction_branch":"1566307520839"},{"hash":"1566307520908","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520908","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520817","transaction_branch":"1566307520817"},{"hash":"1566307520910","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520910","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520892","transaction_branch":"1566307520894"},{"hash":"1566307520913","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520913","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520846","transaction_branch":"1566307520851"},{"hash":"1566307520915","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520915","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520865","transaction_branch":"1566307520894"},{"hash":"1566307520918","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520918","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520888","transaction_branch":"1566307520830"},{"hash":"1566307520921","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520921","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520849","transaction_branch":"1566307520899"},{"hash":"1566307520923","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520923","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520830","transaction_branch":"1566307520903"},{"hash":"1566307520926","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520926","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520923","transaction_branch":"1566307520918"},{"hash":"1566307520927","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520927","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520896","transaction_branch":"1566307520870"},{"hash":"1566307520930","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520930","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520836","transaction_branch":"1566307520887"},{"hash":"1566307520931","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520931","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520881","transaction_branch":"1566307520860"},{"hash":"1566307520933","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520933","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520851","transaction_branch":"1566307520851"},{"hash":"1566307520936","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520936","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520891","transaction_branch":"1566307520881"},{"hash":"1566307520939","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520939","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520930","transaction_branch":"1566307520903"},{"hash":"1566307520942","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520942","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520881","transaction_branch":"1566307520891"},{"hash":"1566307520945","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520945","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520908","transaction_branch":"1566307520870"},{"hash":"1566307520947","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520947","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520931","transaction_branch":"1566307520891"},{"hash":"1566307520950","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520950","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520931","transaction_branch":"1566307520910"},{"hash":"1566307520952","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520952","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520910","transaction_branch":"1566307520881"},{"hash":"1566307520955","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307520955","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520923","transaction_branch":"1566307520873"},{"hash":"1566307520956","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520956","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520936","transaction_branch":"1566307520905"},{"hash":"1566307520958","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520958","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520927","transaction_branch":"1566307520930"},{"hash":"1566307520961","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520961","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520918","transaction_branch":"1566307520947"},{"hash":"1566307520964","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520964","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520874","transaction_branch":"1566307520947"},{"hash":"1566307520966","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520966","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520964","transaction_branch":"1566307520896"},{"hash":"1566307520968","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520968","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520950","transaction_branch":"1566307520931"},{"hash":"1566307520971","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307520971","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520942","transaction_branch":"1566307520945"},{"hash":"1566307520973","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520973","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520958","transaction_branch":"1566307520947"},{"hash":"1566307520975","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520975","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520888","transaction_branch":"1566307520888"},{"hash":"1566307520977","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307520977","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520950","transaction_branch":"1566307520931"},{"hash":"1566307520979","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520979","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520926","transaction_branch":"1566307520887"},{"hash":"1566307520982","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307520982","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520913","transaction_branch":"1566307520961"},{"hash":"1566307520984","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520984","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520926","transaction_branch":"1566307520950"},{"hash":"1566307520987","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307520987","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520973","transaction_branch":"1566307520958"},{"hash":"1566307520990","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307520990","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520918","transaction_branch":"1566307520958"},{"hash":"1566307520992","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307520992","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520952","transaction_branch":"1566307520942"},{"hash":"1566307520994","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307520994","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520966","transaction_branch":"1566307520908"},{"hash":"1566307520997","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307520997","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520905","transaction_branch":"1566307520975"},{"hash":"1566307520999","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307520999","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520982","transaction_branch":"1566307520930"},{"hash":"1566307521001","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307521001","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520997","transaction_branch":"1566307520987"},{"hash":"1566307521004","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521004","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520964","transaction_branch":"1566307520913"},{"hash":"1566307521006","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521006","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520931","transaction_branch":"1566307520961"},{"hash":"1566307521009","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521009","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520926","transaction_branch":"1566307520977"},{"hash":"1566307521012","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521012","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520956","transaction_branch":"1566307520958"},{"hash":"1566307521014","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521014","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520994","transaction_branch":"1566307520999"},{"hash":"1566307521017","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521017","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520947","transaction_branch":"1566307520987"},{"hash":"1566307521020","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521020","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520964","transaction_branch":"1566307520992"},{"hash":"1566307521023","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521023","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520942","transaction_branch":"1566307520987"},{"hash":"1566307521024","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521024","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520987","transaction_branch":"1566307520971"},{"hash":"1566307521026","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521026","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521004","transaction_branch":"1566307520982"},{"hash":"1566307521029","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307521029","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521012","transaction_branch":"1566307520982"},{"hash":"1566307521031","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521031","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521029","transaction_branch":"1566307520999"},{"hash":"1566307521033","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521033","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520990","transaction_branch":"1566307520975"},{"hash":"1566307521036","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521036","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520992","transaction_branch":"1566307520966"},{"hash":"1566307521039","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521039","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521023","transaction_branch":"1566307520956"},{"hash":"1566307521040","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521040","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520958","transaction_branch":"1566307520964"},{"hash":"1566307521042","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521042","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520975","transaction_branch":"1566307520984"},{"hash":"1566307521045","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521045","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520997","transaction_branch":"1566307520950"},{"hash":"1566307521047","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521047","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520956","transaction_branch":"1566307521039"},{"hash":"1566307521050","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521050","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520987","transaction_branch":"1566307520987"},{"hash":"1566307521052","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521052","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521012","transaction_branch":"1566307521047"},{"hash":"1566307521055","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521055","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520997","transaction_branch":"1566307521052"},{"hash":"1566307521058","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521058","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521001","transaction_branch":"1566307521036"},{"hash":"1566307521059","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521059","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521020","transaction_branch":"1566307521012"},{"hash":"1566307521062","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521062","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521040","transaction_branch":"1566307521040"},{"hash":"1566307521064","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521064","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521017","transaction_branch":"1566307521012"},{"hash":"1566307521067","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521067","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520975","transaction_branch":"1566307520977"},{"hash":"1566307521070","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521070","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521039","transaction_branch":"1566307521024"},{"hash":"1566307521072","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521072","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521058","transaction_branch":"1566307520984"},{"hash":"1566307521074","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521074","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520997","transaction_branch":"1566307521058"},{"hash":"1566307521077","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521077","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520999","transaction_branch":"1566307521059"},{"hash":"1566307521079","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307521079","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521031","transaction_branch":"1566307521033"},{"hash":"1566307521081","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521081","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521042","transaction_branch":"1566307521064"},{"hash":"1566307521083","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521083","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521036","transaction_branch":"1566307521031"},{"hash":"1566307521086","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521086","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520999","transaction_branch":"1566307521059"},{"hash":"1566307521089","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521089","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307520994","transaction_branch":"1566307521070"},{"hash":"1566307521091","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521091","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521036","transaction_branch":"1566307521020"},{"hash":"1566307521094","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521094","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521079","transaction_branch":"1566307521064"},{"hash":"1566307521096","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521096","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521031","transaction_branch":"1566307521006"},{"hash":"1566307521099","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521099","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521012","transaction_branch":"1566307521096"},{"hash":"1566307521102","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521102","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521067","transaction_branch":"1566307521081"},{"hash":"1566307521103","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521103","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521052","transaction_branch":"1566307521014"},{"hash":"1566307521106","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521106","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521099","transaction_branch":"1566307521055"},{"hash":"1566307521108","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521108","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521036","transaction_branch":"1566307521062"},{"hash":"1566307521111","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521111","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521058","transaction_branch":"1566307521091"},{"hash":"1566307521114","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521114","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521081","transaction_branch":"1566307521099"},{"hash":"1566307521115","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521115","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521050","transaction_branch":"1566307521099"},{"hash":"1566307521118","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521118","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521077","transaction_branch":"1566307521031"},{"hash":"1566307521121","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521121","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521072","transaction_branch":"1566307521062"},{"hash":"1566307521122","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521122","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521108","transaction_branch":"1566307521106"},{"hash":"1566307521124","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521124","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521050","transaction_branch":"1566307521059"},{"hash":"1566307521126","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521126","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521086","transaction_branch":"1566307521055"},{"hash":"1566307521129","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521129","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521094","transaction_branch":"1566307521058"},{"hash":"1566307521131","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521131","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521042","transaction_branch":"1566307521045"},{"hash":"1566307521134","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521134","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521081","transaction_branch":"1566307521099"},{"hash":"1566307521137","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521137","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521040","transaction_branch":"1566307521121"},{"hash":"1566307521139","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521139","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521042","transaction_branch":"1566307521050"},{"hash":"1566307521142","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521142","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521103","transaction_branch":"1566307521045"},{"hash":"1566307521144","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521144","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521114","transaction_branch":"1566307521086"},{"hash":"1566307521147","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521147","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521096","transaction_branch":"1566307521108"},{"hash":"1566307521149","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521149","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521091","transaction_branch":"1566307521070"},{"hash":"1566307521152","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521152","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521134","transaction_branch":"1566307521081"},{"hash":"1566307521155","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521155","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521124","transaction_branch":"1566307521058"},{"hash":"1566307521157","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521157","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521086","transaction_branch":"1566307521083"},{"hash":"1566307521160","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521160","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521118","transaction_branch":"1566307521126"},{"hash":"1566307521163","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521163","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521103","transaction_branch":"1566307521118"},{"hash":"1566307521165","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521165","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521096","transaction_branch":"1566307521111"},{"hash":"1566307521168","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521168","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521163","transaction_branch":"1566307521160"},{"hash":"1566307521171","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521171","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521126","transaction_branch":"1566307521134"},{"hash":"1566307521174","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521174","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521149","transaction_branch":"1566307521086"},{"hash":"1566307521177","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521177","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521165","transaction_branch":"1566307521163"},{"hash":"1566307521179","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521179","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521096","transaction_branch":"1566307521149"},{"hash":"1566307521181","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521181","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521168","transaction_branch":"1566307521089"},{"hash":"1566307521183","address":"$addr$","value":"1","tag":"$tag$","timestamp":"1566307521183","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521137","transaction_branch":"1566307521131"},{"hash":"1566307521186","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521186","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521142","transaction_branch":"1566307521124"},{"hash":"1566307521188","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521188","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521139","transaction_branch":"1566307521115"},{"hash":"1566307521191","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521191","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521111","transaction_branch":"1566307521181"},{"hash":"1566307521194","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521194","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521102","transaction_branch":"1566307521191"},{"hash":"1566307521196","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521196","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521171","transaction_branch":"1566307521181"},{"hash":"1566307521199","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521199","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521106","transaction_branch":"1566307521137"},{"hash":"1566307521202","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521202","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521186","transaction_branch":"1566307521177"},{"hash":"1566307521204","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521204","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521179","transaction_branch":"1566307521194"},{"hash":"1566307521207","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521207","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521149","transaction_branch":"1566307521118"},{"hash":"1566307521208","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521208","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521196","transaction_branch":"1566307521115"},{"hash":"1566307521211","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521211","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521129","transaction_branch":"1566307521115"},{"hash":"1566307521213","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521213","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521124","transaction_branch":"1566307521174"},{"hash":"1566307521215","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521215","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521179","transaction_branch":"1566307521137"},{"hash":"1566307521217","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521217","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521129","transaction_branch":"1566307521202"},{"hash":"1566307521220","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521220","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521213","transaction_branch":"1566307521122"},{"hash":"1566307521223","address":"$addr$","value":"4","tag":"$tag$","timestamp":"1566307521223","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521174","transaction_branch":"1566307521217"},{"hash":"1566307521226","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521226","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521144","transaction_branch":"1566307521177"},{"hash":"1566307521230","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521230","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521142","transaction_branch":"1566307521171"},{"hash":"1566307521234","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521234","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521168","transaction_branch":"1566307521211"},{"hash":"1566307521237","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521237","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521202","transaction_branch":"1566307521220"},{"hash":"1566307521238","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521238","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521208","transaction_branch":"1566307521157"},{"hash":"1566307521241","address":"$addr$","value":"0","tag":"$tag$","timestamp":"1566307521241","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521213","transaction_branch":"1566307521165"},{"hash":"1566307521244","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521244","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521160","transaction_branch":"1566307521149"},{"hash":"1566307521245","address":"$addr$","value":"2","tag":"$tag$","timestamp":"1566307521245","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521237","transaction_branch":"1566307521204"},{"hash":"1566307521248","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521248","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521215","transaction_branch":"1566307521191"},{"hash":"1566307521251","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521251","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521155","transaction_branch":"1566307521188"},{"hash":"1566307521253","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521253","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521196","transaction_branch":"1566307521196"},{"hash":"1566307521256","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521256","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521157","transaction_branch":"1566307521217"},{"hash":"1566307521258","address":"$addr$","value":"8","tag":"$tag$","timestamp":"1566307521258","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521251","transaction_branch":"1566307521207"},{"hash":"1566307521261","address":"$addr$","value":"3","tag":"$tag$","timestamp":"1566307521261","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521220","transaction_branch":"1566307521183"},{"hash":"1566307521264","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521264","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521196","transaction_branch":"1566307521181"},{"hash":"1566307521266","address":"$addr$","value":"6","tag":"$tag$","timestamp":"1566307521266","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521174","transaction_branch":"1566307521177"},{"hash":"1566307521269","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521269","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521256","transaction_branch":"1566307521211"},{"hash":"1566307521271","address":"$addr$","value":"9","tag":"$tag$","timestamp":"1566307521271","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521181","transaction_branch":"1566307521256"},{"hash":"1566307521273","address":"$addr$","value":"7","tag":"$tag$","timestamp":"1566307521273","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521261","transaction_branch":"1566307521204"},{"hash":"1566307521276","address":"$addr$","value":"5","tag":"$tag$","timestamp":"1566307521276","current_index":"1","last_index":"0","bundle_hash":"$bundle_hash$","transaction_trunk":"1566307521174","transaction_branch":"1566307521207"}],"sn":[],"msvisitorCounter":94,"filesavedCounter":7}
'''
'''--- server/sub.js ---
/* eslint-disable no-console */
// subber.js
const zmq = require('zeromq'),
    sock = zmq.socket('sub')
const events = require('events')
const eventEmitter = new events.EventEmitter()

module.exports = function (ZMQ_ENDPOINT) {

    sock.connect(ZMQ_ENDPOINT)
    console.log('connetciong to zmq: ', ZMQ_ENDPOINT)

    sock.subscribe('sn')
    sock.subscribe('tx')
    console.log('Subscriber connected to port 5556')

    sock.on('message', function (topic) {
        topic = topic.toString()

        if (topic.indexOf('tx ') == 0) {
            const elements = topic.split(' ')

            const hash = elements[1]
            const address = elements[2]
            const value = elements[3]
            // obsolete tag
            const timestamp = elements[5]
            const current_index = elements[6]
            const last_index = elements[7]
            const bundle_hash = elements[8]
            const transaction_trunk = elements[9]
            const transaction_branch = elements[10]
            // arrival time 11
            const tag = elements[12]

            eventEmitter.emit('tx', {
                hash,
                address,
                value,
                tag,
                timestamp,
                current_index,
                last_index,
                bundle_hash,
                transaction_trunk,
                transaction_branch,
            })

        }
        if (topic.indexOf('sn ') == 0) {

            const elements = topic.split(' ')

            const hash = elements[6]
            const address = elements[3]
            const transaction_trunk = elements[4]
            const transaction_branch = elements[5]
            const bundle = elements[6]

            eventEmitter.emit('sn', {
                hash,
                address,
                transaction_trunk,
                transaction_branch,
                bundle
            })

        }
    })

    return eventEmitter

}

'''
'''--- webroot/index.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>the IOTA tangle</title>
  <link rel="stylesheet" href="main.css">
  <script src="lib/vivagraph.js"></script>
  <script src="main.js"></script>
  <script src="http://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g=" crossorigin="anonymous"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>

  <meta name="application-name" content="The IOTA TAngle" />
  <meta name="theme-color" content="#ffffff">

  <meta property="og:image" content="http://tangle.glumb.de/image.png" />

  <meta name="description" content="See the IOTA Tangle in action.">
</head>

<body>
  <div class="graph" id="graph"></div>

  <script type="application/javascript">
    const tg = TangleGlumb(document.getElementById('graph'), {
      CIRCLE_SIZE: 60,
      PIN_OLD_NODES: false,
      STATIC_FRONT: false
    })

    const socket = io.connect('http://localhost:80', {
      transports: ['websocket'],
    })

    socket.on('inittx', txs => {
      tg.updateTx(txs)
    })

    socket.on('initms', msHashes => {
      tg.updateTx(msHashes.map(hash => ({
        hash,
        milestone: true
      })))
    })

    socket.on('tx', tx => {
      tg.updateTx([tx])
    })

    socket.on('config', config => {
      tg.setNetworkName(config.networkName)
    })

    socket.on('ms', hash => {
      tg.updateTx([{
        hash,
        milestone: true
      }])
    })
  </script>

</body>

</html>
'''
'''--- webroot/lib/vivagraph.js ---
/* eslint-disable*/
!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var f;"undefined"!=typeof window?f=window:"undefined"!=typeof global?f=global:"undefined"!=typeof self&&(f=self),f.Viva=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * This is an entry point for global namespace. If you want to use separate
 * modules individually - you are more than welcome to do so.
 */

    var random = require('ngraph.random');

    var Viva = {
        lazyExtend: function() {
            return require('ngraph.merge').apply(this, arguments);
        },
        randomIterator: function() {
            return random.randomIterator.apply(random, arguments);
        },
        random: function() {
            return random.random.apply(random, arguments);
        },
        events: require('ngraph.events')
    };

    Viva.Graph = {
        version: require('./version.js'),
        graph: require('ngraph.graph'),

        serializer: function() {
            return {
                loadFromJSON: require('ngraph.fromjson'),
                storeToJSON: require('ngraph.tojson')
            };
        },

        centrality: require('./Algorithms/centrality.js'),
        operations: require('./Algorithms/operations.js'),

        geom: function() {
            return {
                intersect: require('gintersect'),
                intersectRect: require('./Utils/intersectRect.js')
            };
        },

        webgl: require('./WebGL/webgl.js'),
        webglInputEvents: require('./WebGL/webglInputEvents.js'),

        generator: function() {
            return require('ngraph.generators');
        },

        Input: {
            domInputManager: require('./Input/domInputManager.js'),
            webglInputManager: require('./Input/webglInputManager.js')
        },

        Utils: {
            // TODO: move to Input
            dragndrop: require('./Input/dragndrop.js'),
            findElementPosition: require('./Utils/findElementPosition.js'),
            timer: require('./Utils/timer.js'),
            getDimension: require('./Utils/getDimensions.js'),
            events: require('./Utils/backwardCompatibleEvents.js')
        },

        Layout: {
            forceDirected: require('ngraph.forcelayout'),
            constant: require('./Layout/constant.js')
        },

        View: {
            // TODO: Move `webglXXX` out to webgl namespace
            Texture: require('./WebGL/texture.js'),
            // TODO: This should not be even exported
            webglAtlas: require('./WebGL/webglAtlas.js'),
            webglImageNodeProgram: require('./WebGL/webglImageNodeProgram.js'),
            webglLinkProgram: require('./WebGL/webglLinkProgram.js'),
            webglNodeProgram: require('./WebGL/webglNodeProgram.js'),
            webglLine: require('./WebGL/webglLine.js'),
            webglSquare: require('./WebGL/webglSquare.js'),
            webglImage: require('./WebGL/webglImage.js'),
            webglGraphics: require('./View/webglGraphics.js'),
            // TODO: Deprecate this:
            _webglUtil: {
                parseColor: require('./WebGL/parseColor.js')
            },

            // TODO: move to svg namespace
            svgGraphics: require('./View/svgGraphics.js'),

            renderer: require('./View/renderer.js'),

            // deprecated
            cssGraphics: function() {
                throw new Error('cssGraphics is deprecated. Please use older version of vivagraph (< 0.7) if you need it');
            },

            svgNodeFactory: function() {
                throw new Error('svgNodeFactory is deprecated. Please use older version of vivagraph (< 0.7) if you need it');
            },

            community: function() {
                throw new Error('community is deprecated. Please use vivagraph < 0.7 if you need it, or `https://github.com/anvaka/ngraph.slpa` module');
            }
        },

        Rect: require('./Utils/rect.js'),

        svg: require('simplesvg'),

        // TODO: should be camelCase
        BrowserInfo: require('./Utils/browserInfo.js')
    };

    module.exports = Viva;

},{"./Algorithms/centrality.js":32,"./Algorithms/operations.js":33,"./Input/domInputManager.js":34,"./Input/dragndrop.js":35,"./Input/webglInputManager.js":36,"./Layout/constant.js":37,"./Utils/backwardCompatibleEvents.js":38,"./Utils/browserInfo.js":39,"./Utils/findElementPosition.js":41,"./Utils/getDimensions.js":42,"./Utils/intersectRect.js":43,"./Utils/rect.js":45,"./Utils/timer.js":46,"./View/renderer.js":48,"./View/svgGraphics.js":49,"./View/webglGraphics.js":50,"./WebGL/parseColor.js":51,"./WebGL/texture.js":52,"./WebGL/webgl.js":53,"./WebGL/webglAtlas.js":54,"./WebGL/webglImage.js":55,"./WebGL/webglImageNodeProgram.js":56,"./WebGL/webglInputEvents.js":57,"./WebGL/webglLine.js":58,"./WebGL/webglLinkProgram.js":59,"./WebGL/webglNodeProgram.js":60,"./WebGL/webglSquare.js":61,"./version.js":62,"gintersect":3,"ngraph.events":7,"ngraph.forcelayout":9,"ngraph.fromjson":10,"ngraph.generators":11,"ngraph.graph":12,"ngraph.merge":13,"ngraph.random":26,"ngraph.tojson":27,"simplesvg":28}],2:[function(require,module,exports){
    addEventListener.removeEventListener = removeEventListener
    addEventListener.addEventListener = addEventListener

    module.exports = addEventListener

    var Events = null

    function addEventListener(el, eventName, listener, useCapture) {
        Events = Events || (
            document.addEventListener ?
                {add: stdAttach, rm: stdDetach} :
                {add: oldIEAttach, rm: oldIEDetach}
        )

        return Events.add(el, eventName, listener, useCapture)
    }

    function removeEventListener(el, eventName, listener, useCapture) {
        Events = Events || (
            document.addEventListener ?
                {add: stdAttach, rm: stdDetach} :
                {add: oldIEAttach, rm: oldIEDetach}
        )

        return Events.rm(el, eventName, listener, useCapture)
    }

    function stdAttach(el, eventName, listener, useCapture) {
        el.addEventListener(eventName, listener, useCapture)
    }

    function stdDetach(el, eventName, listener, useCapture) {
        el.removeEventListener(eventName, listener, useCapture)
    }

    function oldIEAttach(el, eventName, listener, useCapture) {
        if(useCapture) {
            throw new Error('cannot useCapture in oldIE')
        }

        el.attachEvent('on' + eventName, listener)
    }

    function oldIEDetach(el, eventName, listener, useCapture) {
        el.detachEvent('on' + eventName, listener)
    }

},{}],3:[function(require,module,exports){
    module.exports = intersect;

    /**
 * Original authors: Mukesh Prasad, Appeared in Graphics Gem II book
 * http://www.opensource.apple.com/source/graphviz/graphviz-498/graphviz/dynagraph/common/xlines.c
 * and adopted to javascript version by Andrei Kashcha.
 *
 * This function computes whether two line segments,
 * respectively joining the input points (x1,y1) -- (x2,y2)
 * and the input points (x3,y3) -- (x4,y4) intersect.
 * If the lines intersect, the output variables x, y are
 * set to coordinates of the point of intersection.
 *
 * @param {Number} x1 First line segment coordinates
 * @param {Number} y1 First line segment coordinates
 * @param {Number} x2 First line segment coordinates
 * @param {Number} x2 First line segment coordinates
 *
 * @param {Number} x3 Second line segment coordinates
 * @param {Number} y3 Second line segment coordinates
 * @param {Number} x4 Second line segment coordinates
 * @param {Number} x4 Second line segment coordinates
 *
 * @return {Object} x, y coordinates of intersection point or falsy value if no
 * intersection found..
 */
    function intersect(
        x1, y1, x2, y2, // first line segment
        x3, y3, x4, y4  // second line segment
    ) {

        var a1, a2, b1, b2, c1, c2, /* Coefficients of line eqns. */
            r1, r2, r3, r4, /* 'Sign' values */
            denom, offset, num, /* Intermediate values */
            result = {
                x: 0,
                y: 0
            };

        /* Compute a1, b1, c1, where line joining points 1 and 2
   * is "a1 x  +  b1 y  +  c1  =  0".
   */
        a1 = y2 - y1;
        b1 = x1 - x2;
        c1 = x2 * y1 - x1 * y2;

        /* Compute r3 and r4.
   */
        r3 = a1 * x3 + b1 * y3 + c1;
        r4 = a1 * x4 + b1 * y4 + c1;

        /* Check signs of r3 and r4.  If both point 3 and point 4 lie on
   * same side of line 1, the line segments do not intersect.
   */

        if (r3 !== 0 && r4 !== 0 && ((r3 >= 0) === (r4 >= 4))) {
            return null; //no intersection.
        }

        /* Compute a2, b2, c2 */
        a2 = y4 - y3;
        b2 = x3 - x4;
        c2 = x4 * y3 - x3 * y4;

        /* Compute r1 and r2 */

        r1 = a2 * x1 + b2 * y1 + c2;
        r2 = a2 * x2 + b2 * y2 + c2;

        /* Check signs of r1 and r2.  If both point 1 and point 2 lie
   * on same side of second line segment, the line segments do
   * not intersect.
   */
        if (r1 !== 0 && r2 !== 0 && ((r1 >= 0) === (r2 >= 0))) {
            return null; // no intersection;
        }
        /* Line segments intersect: compute intersection point.
   */

        denom = a1 * b2 - a2 * b1;
        if (denom === 0) {
            return null; // Actually collinear..
        }

        offset = denom < 0 ? -denom / 2 : denom / 2;
        offset = 0.0;

        /* The denom/2 is to get rounding instead of truncating.  It
   * is added or subtracted to the numerator, depending upon the
   * sign of the numerator.
   */
        num = b1 * c2 - b2 * c1;
        result.x = (num < 0 ? num - offset : num + offset) / denom;

        num = a2 * c1 - a1 * c2;
        result.y = (num < 0 ? num - offset : num + offset) / denom;

        return result;
    }

},{}],4:[function(require,module,exports){
    module.exports.degree = require('./src/degree.js');
    module.exports.betweenness = require('./src/betweenness.js');

},{"./src/betweenness.js":5,"./src/degree.js":6}],5:[function(require,module,exports){
    module.exports = betweennes;

    /**
 * I'm using http://www.inf.uni-konstanz.de/algo/publications/b-vspbc-08.pdf
 * as a reference for this implementation
 */
    function betweennes(graph, oriented) {
        var Q = [],
            S = []; // Queue and Stack
        // list of predcessors on shorteest paths from source
        var pred = Object.create(null);
        // distance from source
        var dist = Object.create(null);
        // number of shortest paths from source to key
        var sigma = Object.create(null);
        // dependency of source on key
        var delta = Object.create(null);

        var currentNode;
        var centrality = Object.create(null);

        graph.forEachNode(setCentralityToZero);
        graph.forEachNode(calculateCentrality);

        if (!oriented) {
            // The centrality scores need to be divided by two if the graph is not oriented,
            // since all shortest paths are considered twice
            Object.keys(centrality).forEach(divideByTwo);
        }

        return centrality;

        function divideByTwo(key) {
            centrality[key] /= 2;
        }

        function setCentralityToZero(node) {
            centrality[node.id] = 0;
        }

        function calculateCentrality(node) {
            currentNode = node.id;
            singleSourceShortestPath(currentNode);
            accumulate();
        }

        function accumulate() {
            graph.forEachNode(setDeltaToZero);
            while (S.length) {
                var w = S.pop();
                var coeff = (1 + delta[w])/sigma[w];
                var predcessors = pred[w];
                for (var idx = 0; idx < predcessors.length; ++idx) {
                    var v = predcessors[idx];
                    delta[v] += sigma[v] * coeff;
                }
                if (w !== currentNode) {
                    centrality[w] += delta[w];
                }
            }
        }

        function setDeltaToZero(node) {
            delta[node.id] = 0;
        }

        function singleSourceShortestPath(source) {
            graph.forEachNode(initNode);
            dist[source] = 0;
            sigma[source] = 1;
            Q.push(source);

            while (Q.length) {
                var v = Q.shift();
                var dedup = Object.create(null);
                S.push(v);
                graph.forEachLinkedNode(v, toId, oriented);
            }

            function toId(otherNode) {
                // NOTE: This code will also consider multi-edges, which are often
                // ignored by popular software (Gephi/NetworkX). Depending on your use
                // case this may not be desired and deduping needs to be performed. To
                // save memory I'm not deduping here...
                processNode(otherNode.id);
            }

            function initNode(node) {
                var nodeId = node.id;
                pred[nodeId] = []; // empty list
                dist[nodeId] = -1;
                sigma[nodeId] = 0;
            }

            function processNode(w) {
                // path discovery
                if (dist[w] === -1) {
                    // Node w is found for the first time
                    dist[w] = dist[v] + 1;
                    Q.push(w);
                }
                // path counting
                if (dist[w] === dist[v] + 1) {
                    // edge (v, w) on a shortest path
                    sigma[w] += sigma[v];
                    pred[w].push(v);
                }
            }
        }
    }

},{}],6:[function(require,module,exports){
    module.exports = degree;

    /**
 * Calculates graph nodes degree centrality (in/out or both).
 *
 * @see http://en.wikipedia.org/wiki/Centrality#Degree_centrality
 *
 * @param {ngraph.graph} graph object for which we are calculating centrality.
 * @param {string} [kind=both] What kind of degree centrality needs to be calculated:
 *   'in'    - calculate in-degree centrality
 *   'out'   - calculate out-degree centrality
 *   'inout' - (default) generic degree centrality is calculated
 */
    function degree(graph, kind) {
        var getNodeDegree,
            sortedDegrees = [],
            result = Object.create(null),
            nodeDegree;

        kind = (kind || 'both').toLowerCase();
        if (kind === 'both' || kind === 'inout') {
            getNodeDegree = inoutDegreeCalculator;
        } else if (kind === 'in') {
            getNodeDegree = inDegreeCalculator;
        } else if (kind === 'out') {
            getNodeDegree = outDegreeCalculator;
        } else {
            throw new Error('Expected centrality degree kind is: in, out or both');
        }

        graph.forEachNode(calculateNodeDegree);

        return result;

        function calculateNodeDegree(node) {
            var links = graph.getLinks(node.id);
            result[node.id] = getNodeDegree(links, node.id);
        }
    }

    function inDegreeCalculator(links, nodeId) {
        var total = 0;
        for (var i = 0; i < links.length; i += 1) {
            total += (links[i].toId === nodeId) ? 1 : 0;
        }
        return total;
    }

    function outDegreeCalculator(links, nodeId) {
        var total = 0;
        for (var i = 0; i < links.length; i += 1) {
            total += (links[i].fromId === nodeId) ? 1 : 0;
        }
        return total;
    }

    function inoutDegreeCalculator(links) {
        return links.length;
    }

},{}],7:[function(require,module,exports){
    module.exports = function(subject) {
        validateSubject(subject);

        var eventsStorage = createEventsStorage(subject);
        subject.on = eventsStorage.on;
        subject.off = eventsStorage.off;
        subject.fire = eventsStorage.fire;
        return subject;
    };

    function createEventsStorage(subject) {
        // Store all event listeners to this hash. Key is event name, value is array
        // of callback records.
        //
        // A callback record consists of callback function and its optional context:
        // { 'eventName' => [{callback: function, ctx: object}] }
        var registeredEvents = Object.create(null);

        return {
            on: function (eventName, callback, ctx) {
                if (typeof callback !== 'function') {
                    throw new Error('callback is expected to be a function');
                }
                var handlers = registeredEvents[eventName];
                if (!handlers) {
                    handlers = registeredEvents[eventName] = [];
                }
                handlers.push({callback: callback, ctx: ctx});

                return subject;
            },

            off: function (eventName, callback) {
                var wantToRemoveAll = (typeof eventName === 'undefined');
                if (wantToRemoveAll) {
                    // Killing old events storage should be enough in this case:
                    registeredEvents = Object.create(null);
                    return subject;
                }

                if (registeredEvents[eventName]) {
                    var deleteAllCallbacksForEvent = (typeof callback !== 'function');
                    if (deleteAllCallbacksForEvent) {
                        delete registeredEvents[eventName];
                    } else {
                        var callbacks = registeredEvents[eventName];
                        for (var i = 0; i < callbacks.length; ++i) {
                            if (callbacks[i].callback === callback) {
                                callbacks.splice(i, 1);
                            }
                        }
                    }
                }

                return subject;
            },

            fire: function (eventName) {
                var callbacks = registeredEvents[eventName];
                if (!callbacks) {
                    return subject;
                }

                var fireArguments;
                if (arguments.length > 1) {
                    fireArguments = Array.prototype.splice.call(arguments, 1);
                }
                for(var i = 0; i < callbacks.length; ++i) {
                    var callbackInfo = callbacks[i];
                    callbackInfo.callback.apply(callbackInfo.ctx, fireArguments);
                }

                return subject;
            }
        };
    }

    function validateSubject(subject) {
        if (!subject) {
            throw new Error('Eventify cannot use falsy object as events subject');
        }
        var reservedWords = ['on', 'fire', 'off'];
        for (var i = 0; i < reservedWords.length; ++i) {
            if (subject.hasOwnProperty(reservedWords[i])) {
                throw new Error("Subject cannot be eventified, since it already has property '" + reservedWords[i] + "'");
            }
        }
    }

},{}],8:[function(require,module,exports){
    module.exports = exposeProperties;

    /**
 * Augments `target` object with getter/setter functions, which modify settings
 *
 * @example
 *  var target = {};
 *  exposeProperties({ age: 42}, target);
 *  target.age(); // returns 42
 *  target.age(24); // make age 24;
 *
 *  var filteredTarget = {};
 *  exposeProperties({ age: 42, name: 'John'}, filteredTarget, ['name']);
 *  filteredTarget.name(); // returns 'John'
 *  filteredTarget.age === undefined; // true
 */
    function exposeProperties(settings, target, filter) {
        var needsFilter = Object.prototype.toString.call(filter) === '[object Array]';
        if (needsFilter) {
            for (var i = 0; i < filter.length; ++i) {
                augment(settings, target, filter[i]);
            }
        } else {
            for (var key in settings) {
                augment(settings, target, key);
            }
        }
    }

    function augment(source, target, key) {
        if (source.hasOwnProperty(key)) {
            if (typeof target[key] === 'function') {
                // this accessor is already defined. Ignore it
                return;
            }
            target[key] = function (value) {
                if (value !== undefined) {
                    source[key] = value;
                    return target;
                }
                return source[key];
            }
        }
    }

},{}],9:[function(require,module,exports){
    module.exports = createLayout;
    module.exports.simulator = require('ngraph.physics.simulator');

    var eventify = require('ngraph.events');

    /**
 * Creates force based layout for a given graph.
 *
 * @param {ngraph.graph} graph which needs to be laid out
 * @param {object} physicsSettings if you need custom settings
 * for physics simulator you can pass your own settings here. If it's not passed
 * a default one will be created.
 */
    function createLayout(graph, physicsSettings) {
        if (!graph) {
            throw new Error('Graph structure cannot be undefined');
        }

        var createSimulator = require('ngraph.physics.simulator');
        var physicsSimulator = createSimulator(physicsSettings);

        var nodeBodies = Object.create(null);
        var springs = {};
        var bodiesCount = 0;

        var springTransform = physicsSimulator.settings.springTransform || noop;

        // Initialize physics with what we have in the graph:
        initPhysics();
        listenToEvents();

        var wasStable = false;

        var api = {
            /**
     * Performs one step of iterative layout algorithm
     *
     * @returns {boolean} true if the system should be considered stable; Flase otherwise.
     * The system is stable if no further call to `step()` can improve the layout.
     */
            step: function() {
                if (bodiesCount === 0) return true; // TODO: This will never fire 'stable'

                var lastMove = physicsSimulator.step();

                // Save the movement in case if someone wants to query it in the step
                // callback.
                api.lastMove = lastMove;

                // Allow listeners to perform low-level actions after nodes are updated.
                api.fire('step');

                // var ratio = lastMove/bodiesCount;
                // var isStableNow = ratio <= 0.01; // TODO: The number is somewhat arbitrary...
                var isStableNow = false; // TODO: The number is somewhat arbitrary...

                if (wasStable !== isStableNow) {
                    wasStable = isStableNow;
                    onStableChanged(isStableNow);
                }

                return isStableNow;
            },

            setForce : function(force){
                physicsSimulator.setForce(force)
            },

            /**
     * For a given `nodeId` returns position
     */
            getNodePosition: function (nodeId) {
                return getInitializedBody(nodeId).pos;
            },

            /**
     * Sets position of a node to a given coordinates
     * @param {string} nodeId node identifier
     * @param {number} x position of a node
     * @param {number} y position of a node
     * @param {number=} z position of node (only if applicable to body)
     */
            setNodePosition: function (nodeId) {
                var body = getInitializedBody(nodeId);
                body.setPosition.apply(body, Array.prototype.slice.call(arguments, 1));
            },

            /**
     * @returns {Object} Link position by link id
     * @returns {Object.from} {x, y} coordinates of link start
     * @returns {Object.to} {x, y} coordinates of link end
     */
            getLinkPosition: function (linkId) {
                var spring = springs[linkId];
                if (spring) {
                    return {
                        from: spring.from.pos,
                        to: spring.to.pos
                    };
                }
            },

            /**
     * @returns {Object} area required to fit in the graph. Object contains
     * `x1`, `y1` - top left coordinates
     * `x2`, `y2` - bottom right coordinates
     */
            getGraphRect: function () {
                return physicsSimulator.getBBox();
            },

            /**
     * Iterates over each body in the layout simulator and performs a callback(body, nodeId)
     */
            forEachBody: forEachBody,

            /*
     * Requests layout algorithm to pin/unpin node to its current position
     * Pinned nodes should not be affected by layout algorithm and always
     * remain at their position
     */
            pinNode: function (node, isPinned) {
                var body = getInitializedBody(node.id);
                body.isPinned = !!isPinned;
            },

            /**
     * Checks whether given graph's node is currently pinned
     */
            isNodePinned: function (node) {
                return getInitializedBody(node.id).isPinned;
            },

            /**
     * Request to release all resources
     */
            dispose: function() {
                graph.off('changed', onGraphChanged);
                api.fire('disposed');
            },

            /**
     * Gets physical body for a given node id. If node is not found undefined
     * value is returned.
     */
            getBody: getBody,

            /**
     * Gets spring for a given edge.
     *
     * @param {string} linkId link identifer. If two arguments are passed then
     * this argument is treated as formNodeId
     * @param {string=} toId when defined this parameter denotes head of the link
     * and first argument is trated as tail of the link (fromId)
     */
            getSpring: getSpring,

            /**
     * [Read only] Gets current physics simulator
     */
            simulator: physicsSimulator,

            /**
     * Gets the graph that was used for layout
     */
            graph: graph,

            /**
     * Gets amount of movement performed during last step opeartion
     */
            lastMove: 0
        };

        eventify(api);

        return api;

        function forEachBody(cb) {
            Object.keys(nodeBodies).forEach(function(bodyId) {
                cb(nodeBodies[bodyId], bodyId);
            });
        }

        function getSpring(fromId, toId) {
            var linkId;
            if (toId === undefined) {
                if (typeof fromId !== 'object') {
                    // assume fromId as a linkId:
                    linkId = fromId;
                } else {
                    // assume fromId to be a link object:
                    linkId = fromId.id;
                }
            } else {
                // toId is defined, should grab link:
                var link = graph.hasLink(fromId, toId);
                if (!link) return;
                linkId = link.id;
            }

            return springs[linkId];
        }

        function getBody(nodeId) {
            return nodeBodies[nodeId];
        }

        function listenToEvents() {
            graph.on('changed', onGraphChanged);
        }

        function onStableChanged(isStable) {
            api.fire('stable', isStable);
        }

        function onGraphChanged(changes) {
            for (var i = 0; i < changes.length; ++i) {
                var change = changes[i];
                if (change.changeType === 'add') {
                    if (change.node) {
                        initBody(change.node.id, change.node.position); //todo changes
                    }
                    if (change.link) {
                        initLink(change.link);
                    }
                } else if (change.changeType === 'remove') {
                    if (change.node) {
                        releaseNode(change.node);
                    }
                    if (change.link) {
                        releaseLink(change.link);
                    }
                }
            }
            bodiesCount = graph.getNodesCount();
        }

        function initPhysics() {
            bodiesCount = 0;

            graph.forEachNode(function (node) {
                initBody(node.id);
                bodiesCount += 1;
            });

            graph.forEachLink(initLink);
        }

        function initBody(nodeId, position) {
            var body = nodeBodies[nodeId];
            if (!body) {
                var node = graph.getNode(nodeId);
                if (!node) {
                    throw new Error('initBody() was called with unknown node id');
                }

                var pos = position || node.position;
                if (!pos) {
                    var neighbors = getNeighborBodies(node);
                    pos = physicsSimulator.getBestNewBodyPosition(neighbors);
                }

                body = physicsSimulator.addBodyAt(pos);
                body.id = nodeId;

                nodeBodies[nodeId] = body;
                updateBodyMass(nodeId);

                if (isNodeOriginallyPinned(node)) {
                    body.isPinned = true;
                }
            }
        }

        function releaseNode(node) {
            var nodeId = node.id;
            var body = nodeBodies[nodeId];
            if (body) {
                nodeBodies[nodeId] = null;
                delete nodeBodies[nodeId];

                physicsSimulator.removeBody(body);
            }
        }

        function initLink(link) {
            updateBodyMass(link.fromId);
            updateBodyMass(link.toId);

            var fromBody = nodeBodies[link.fromId],
                toBody  = nodeBodies[link.toId],
                spring = physicsSimulator.addSpring(fromBody, toBody, link.length);

            springTransform(link, spring);

            springs[link.id] = spring;
        }

        function releaseLink(link) {
            var spring = springs[link.id];
            if (spring) {
                var from = graph.getNode(link.fromId),
                    to = graph.getNode(link.toId);

                if (from) updateBodyMass(from.id);
                if (to) updateBodyMass(to.id);

                delete springs[link.id];

                physicsSimulator.removeSpring(spring);
            }
        }

        function getNeighborBodies(node) {
            // TODO: Could probably be done better on memory
            var neighbors = [];
            if (!node.links) {
                return neighbors;
            }
            var maxNeighbors = Math.min(node.links.length, 2);
            for (var i = 0; i < maxNeighbors; ++i) {
                var link = node.links[i];
                var otherBody = link.fromId !== node.id ? nodeBodies[link.fromId] : nodeBodies[link.toId];
                if (otherBody && otherBody.pos) {
                    neighbors.push(otherBody);
                }
            }

            return neighbors;
        }

        function updateBodyMass(nodeId) {
            var body = nodeBodies[nodeId];
            body.mass = nodeMass(nodeId);
        }

        /**
   * Checks whether graph node has in its settings pinned attribute,
   * which means layout algorithm cannot move it. Node can be preconfigured
   * as pinned, if it has "isPinned" attribute, or when node.data has it.
   *
   * @param {Object} node a graph node to check
   * @return {Boolean} true if node should be treated as pinned; false otherwise.
   */
        function isNodeOriginallyPinned(node) {
            return (node && (node.isPinned || (node.data && node.data.isPinned)));
        }

        function getInitializedBody(nodeId) {
            var body = nodeBodies[nodeId];
            if (!body) {
                initBody(nodeId);
                body = nodeBodies[nodeId];
            }
            return body;
        }

        /**
   * Calculates mass of a body, which corresponds to node with given id.
   *
   * @param {String|Number} nodeId identifier of a node, for which body mass needs to be calculated
   * @returns {Number} recommended mass of the body;
   */
        function nodeMass(nodeId) {
            var links = graph.getLinks(nodeId);
            if (!links) return 1;
            return 1 + links.length / 3.0;
        }
    }

    function noop() { }

},{"ngraph.events":7,"ngraph.physics.simulator":15}],10:[function(require,module,exports){
    module.exports = load;

    var createGraph = require('ngraph.graph');

    function load(jsonGraph, nodeTransform, linkTransform) {
        var stored;
        nodeTransform = nodeTransform || id;
        linkTransform = linkTransform || id;
        if (typeof jsonGraph === 'string') {
            stored = JSON.parse(jsonGraph);
        } else {
            stored = jsonGraph;
        }

        var graph = createGraph(),
            i;

        if (stored.links === undefined || stored.nodes === undefined) {
            throw new Error('Cannot load graph without links and nodes');
        }

        for (i = 0; i < stored.nodes.length; ++i) {
            var parsedNode = nodeTransform(stored.nodes[i]);
            if (!parsedNode.hasOwnProperty('id')) {
                throw new Error('Graph node format is invalid: Node id is missing');
            }

            graph.addNode(parsedNode.id, parsedNode.data);
        }

        for (i = 0; i < stored.links.length; ++i) {
            var link = linkTransform(stored.links[i]);
            if (!link.hasOwnProperty('fromId') || !link.hasOwnProperty('toId')) {
                throw new Error('Graph link format is invalid. Both fromId and toId are required');
            }

            graph.addLink(link.fromId, link.toId, link.data);
        }

        return graph;
    }

    function id(x) { return x; }

},{"ngraph.graph":12}],11:[function(require,module,exports){
    module.exports = {
        ladder: ladder,
        complete: complete,
        completeBipartite: completeBipartite,
        balancedBinTree: balancedBinTree,
        path: path,
        circularLadder: circularLadder,
        grid: grid,
        grid3: grid3,
        noLinks: noLinks,
        wattsStrogatz: wattsStrogatz
    };

    var createGraph = require('ngraph.graph');

    function ladder(n) {
        /**
 * Ladder graph is a graph in form of ladder
 * @param {Number} n Represents number of steps in the ladder
 */
        if (!n || n < 0) {
            throw new Error("Invalid number of nodes");
        }

        var g = createGraph(),
            i;

        for (i = 0; i < n - 1; ++i) {
            g.addLink(i, i + 1);
            // first row
            g.addLink(n + i, n + i + 1);
            // second row
            g.addLink(i, n + i);
            // ladder's step
        }

        g.addLink(n - 1, 2 * n - 1);
        // last step in the ladder;

        return g;
    }

    function circularLadder(n) {
        /**
 * Circular ladder with n steps.
 *
 * @param {Number} n of steps in the ladder.
 */
        if (!n || n < 0) {
            throw new Error("Invalid number of nodes");
        }

        var g = ladder(n);

        g.addLink(0, n - 1);
        g.addLink(n, 2 * n - 1);
        return g;
    }

    function complete(n) {
        /**
 * Complete graph Kn.
 *
 * @param {Number} n represents number of nodes in the complete graph.
 */
        if (!n || n < 1) {
            throw new Error("At least two nodes are expected for complete graph");
        }

        var g = createGraph(),
            i,
            j;

        for (i = 0; i < n; ++i) {
            for (j = i + 1; j < n; ++j) {
                if (i !== j) {
                    g.addLink(i, j);
                }
            }
        }

        return g;
    }

    function completeBipartite (n, m) {
        /**
 * Complete bipartite graph K n,m. Each node in the
 * first partition is connected to all nodes in the second partition.
 *
 * @param {Number} n represents number of nodes in the first graph partition
 * @param {Number} m represents number of nodes in the second graph partition
 */
        if (!n || !m || n < 0 || m < 0) {
            throw new Error("Graph dimensions are invalid. Number of nodes in each partition should be greater than 0");
        }

        var g = createGraph(),
            i, j;

        for (i = 0; i < n; ++i) {
            for (j = n; j < n + m; ++j) {
                g.addLink(i, j);
            }
        }

        return g;
    }

    function path(n) {
        /**
 * Path graph with n steps.
 *
 * @param {Number} n number of nodes in the path
 */
        if (!n || n < 0) {
            throw new Error("Invalid number of nodes");
        }

        var g = createGraph(),
            i;

        g.addNode(0);

        for (i = 1; i < n; ++i) {
            g.addLink(i - 1, i);
        }

        return g;
    }

    function grid(n, m) {
        /**
 * Grid graph with n rows and m columns.
 *
 * @param {Number} n of rows in the graph.
 * @param {Number} m of columns in the graph.
 */
        if (n < 1 || m < 1) {
            throw new Error("Invalid number of nodes in grid graph");
        }
        var g = createGraph(),
            i,
            j;
        if (n === 1 && m === 1) {
            g.addNode(0);
            return g;
        }

        for (i = 0; i < n; ++i) {
            for (j = 0; j < m; ++j) {
                var node = i + j * n;
                if (i > 0) { g.addLink(node, i - 1 + j * n); }
                if (j > 0) { g.addLink(node, i + (j - 1) * n); }
            }
        }

        return g;
    }

    function grid3(n, m, z) {
        /**
 * 3D grid with n rows and m columns and z levels.
 *
 * @param {Number} n of rows in the graph.
 * @param {Number} m of columns in the graph.
 * @param {Number} z of levels in the graph.
 */
        if (n < 1 || m < 1 || z < 1) {
            throw new Error("Invalid number of nodes in grid3 graph");
        }
        var g = createGraph(),
            i, j, k;

        if (n === 1 && m === 1 && z === 1) {
            g.addNode(0);
            return g;
        }

        for (k = 0; k < z; ++k) {
            for (i = 0; i < n; ++i) {
                for (j = 0; j < m; ++j) {
                    var level = k * n * m;
                    var node = i + j * n + level;
                    if (i > 0) { g.addLink(node, i - 1 + j * n + level); }
                    if (j > 0) { g.addLink(node, i + (j - 1) * n + level); }
                    if (k > 0) { g.addLink(node, i + j * n + (k - 1) * n * m ); }
                }
            }
        }

        return g;
    }

    function balancedBinTree(n) {
        /**
 * Balanced binary tree with n levels.
 *
 * @param {Number} n of levels in the binary tree
 */
        if (n < 0) {
            throw new Error("Invalid number of nodes in balanced tree");
        }
        var g = createGraph(),
            count = Math.pow(2, n),
            level;

        if (n === 0) {
            g.addNode(1);
        }

        for (level = 1; level < count; ++level) {
            var root = level,
                left = root * 2,
                right = root * 2 + 1;

            g.addLink(root, left);
            g.addLink(root, right);
        }

        return g;
    }

    function noLinks(n) {
        /**
 * Graph with no links
 *
 * @param {Number} n of nodes in the graph
 */
        if (n < 0) {
            throw new Error("Number of nodes shoul be >= 0");
        }

        var g = createGraph(), i;
        for (i = 0; i < n; ++i) {
            g.addNode(i);
        }

        return g;
    }

    function wattsStrogatz(n, k, p, seed) {
        /**
 * Watts-Strogatz small-world graph.
 *
 * @param {Number} n The number of nodes
 * @param {Number} k Each node is connected to k nearest neighbors in ring topology
 * @param {Number} p The probability of rewiring each edge

 * @see https://github.com/networkx/networkx/blob/master/networkx/generators/random_graphs.py
 */
        if (k >= n) throw new Error('Choose smaller `k`. It cannot be larger than number of nodes `n`');

        var random = require('ngraph.random').random(seed || 42);

        var g = createGraph(), i, to;
        for (i = 0; i < n; ++i) {
            g.addNode(i);
        }

        // connect each node to k/2 neighbors
        var neighborsSize = Math.floor(k/2 + 1);
        for (var j = 1; j < neighborsSize; ++j) {
            for (i = 0; i < n; ++i) {
                to = (j + i) % n;
                g.addLink(i, to);
            }
        }

        // rewire edges from each node
        // loop over all nodes in order (label) and neighbors in order (distance)
        // no self loops or multiple edges allowed
        for (j = 1; j < neighborsSize; ++j) {
            for (i = 0; i < n; ++i) {
                if (random.nextDouble() < p) {
                    var from = i;
                    to = (j + i) % n;

                    var newTo = random.next(n);
                    var needsRewire = (newTo === from || g.hasLink(from, newTo));
                    if (needsRewire && g.getLinks(from).length === n - 1) {
                        // we cannot rewire this node, it has too many links.
                        continue;
                    }
                    // Enforce no self-loops or multiple edges
                    while (needsRewire) {
                        newTo = random.next(n);
                        needsRewire = (newTo === from || g.hasLink(from, newTo));
                    }
                    var link = g.hasLink(from, to);
                    g.removeLink(link);
                    g.addLink(from, newTo);
                }
            }
        }

        return g;
    }

},{"ngraph.graph":12,"ngraph.random":26}],12:[function(require,module,exports){
/**
 * @fileOverview Contains definition of the core graph object.
 */

/**
 * @example
 *  var graph = require('ngraph.graph')();
 *  graph.addNode(1);     // graph has one node.
 *  graph.addLink(2, 3);  // now graph contains three nodes and one link.
 *
 */
    module.exports = createGraph;

    var eventify = require('ngraph.events');

    /**
 * Creates a new graph
 */
    function createGraph(options) {
        // Graph structure is maintained as dictionary of nodes
        // and array of links. Each node has 'links' property which
        // hold all links related to that node. And general links
        // array is used to speed up all links enumeration. This is inefficient
        // in terms of memory, but simplifies coding.
        options = options || {};
        if (options.uniqueLinkId === undefined) {
            // Request each link id to be unique between same nodes. This negatively
            // impacts `addLink()` performance (O(n), where n - number of edges of each
            // vertex), but makes operations with multigraphs more accessible.
            options.uniqueLinkId = true;
        }

        var nodes = typeof Object.create === 'function' ? Object.create(null) : {},
            links = [],
            // Hash of multi-edges. Used to track ids of edges between same nodes
            multiEdges = {},
            nodesCount = 0,
            suspendEvents = 0,

            forEachNode = createNodeIterator(),
            createLink = options.uniqueLinkId ? createUniqueLink : createSingleLink,

            // Our graph API provides means to listen to graph changes. Users can subscribe
            // to be notified about changes in the graph by using `on` method. However
            // in some cases they don't use it. To avoid unnecessary memory consumption
            // we will not record graph changes until we have at least one subscriber.
            // Code below supports this optimization.
            //
            // Accumulates all changes made during graph updates.
            // Each change element contains:
            //  changeType - one of the strings: 'add', 'remove' or 'update';
            //  node - if change is related to node this property is set to changed graph's node;
            //  link - if change is related to link this property is set to changed graph's link;
            changes = [],
            recordLinkChange = noop,
            recordNodeChange = noop,
            enterModification = noop,
            exitModification = noop;

        // this is our public API:
        var graphPart = {
            /**
     * Adds node to the graph. If node with given id already exists in the graph
     * its data is extended with whatever comes in 'data' argument.
     *
     * @param nodeId the node's identifier. A string or number is preferred.
     *   note: If you request options.uniqueLinkId, then node id should not
     *   contain 'ðŸ‘‰ '. This will break link identifiers
     * @param [data] additional data for the node being added. If node already
     *   exists its data object is augmented with the new one.
     *
     * @return {node} The newly added node or node with given id if it already exists.
     */
            addNode: addNode,

            /**
     * Adds a link to the graph. The function always create a new
     * link between two nodes. If one of the nodes does not exists
     * a new node is created.
     *
     * @param fromId link start node id;
     * @param toId link end node id;
     * @param [data] additional data to be set on the new link;
     *
     * @return {link} The newly created link
     */
            addLink: addLink,

            /**
     * Removes link from the graph. If link does not exist does nothing.
     *
     * @param link - object returned by addLink() or getLinks() methods.
     *
     * @returns true if link was removed; false otherwise.
     */
            removeLink: removeLink,

            /**
     * Removes node with given id from the graph. If node does not exist in the graph
     * does nothing.
     *
     * @param nodeId node's identifier passed to addNode() function.
     *
     * @returns true if node was removed; false otherwise.
     */
            removeNode: removeNode,

            /**
     * Gets node with given identifier. If node does not exist undefined value is returned.
     *
     * @param nodeId requested node identifier;
     *
     * @return {node} in with requested identifier or undefined if no such node exists.
     */
            getNode: getNode,

            /**
     * Gets number of nodes in this graph.
     *
     * @return number of nodes in the graph.
     */
            getNodesCount: function() {
                return nodesCount;
            },

            /**
     * Gets total number of links in the graph.
     */
            getLinksCount: function() {
                return links.length;
            },

            /**
     * Gets all links (inbound and outbound) from the node with given id.
     * If node with given id is not found null is returned.
     *
     * @param nodeId requested node identifier.
     *
     * @return Array of links from and to requested node if such node exists;
     *   otherwise null is returned.
     */
            getLinks: getLinks,

            /**
     * Invokes callback on each node of the graph.
     *
     * @param {Function(node)} callback Function to be invoked. The function
     *   is passed one argument: visited node.
     */
            forEachNode: forEachNode,

            /**
     * Invokes callback on every linked (adjacent) node to the given one.
     *
     * @param nodeId Identifier of the requested node.
     * @param {Function(node, link)} callback Function to be called on all linked nodes.
     *   The function is passed two parameters: adjacent node and link object itself.
     * @param oriented if true graph treated as oriented.
     */
            forEachLinkedNode: forEachLinkedNode,

            /**
     * Enumerates all links in the graph
     *
     * @param {Function(link)} callback Function to be called on all links in the graph.
     *   The function is passed one parameter: graph's link object.
     *
     * Link object contains at least the following fields:
     *  fromId - node id where link starts;
     *  toId - node id where link ends,
     *  data - additional data passed to graph.addLink() method.
     */
            forEachLink: forEachLink,

            /**
     * Suspend all notifications about graph changes until
     * endUpdate is called.
     */
            beginUpdate: enterModification,

            /**
     * Resumes all notifications about graph changes and fires
     * graph 'changed' event in case there are any pending changes.
     */
            endUpdate: exitModification,

            /**
     * Removes all nodes and links from the graph.
     */
            clear: clear,

            /**
     * Detects whether there is a link between two nodes.
     * Operation complexity is O(n) where n - number of links of a node.
     * NOTE: this function is synonim for getLink()
     *
     * @returns link if there is one. null otherwise.
     */
            hasLink: getLink,

            /**
     * Gets an edge between two nodes.
     * Operation complexity is O(n) where n - number of links of a node.
     *
     * @param {string} fromId link start identifier
     * @param {string} toId link end identifier
     *
     * @returns link if there is one. null otherwise.
     */
            getLink: getLink
        };

        // this will add `on()` and `fire()` methods.
        eventify(graphPart);

        monitorSubscribers();

        return graphPart;

        function monitorSubscribers() {
            var realOn = graphPart.on;

            // replace real `on` with our temporary on, which will trigger change
            // modification monitoring:
            graphPart.on = on;

            function on() {
                // now it's time to start tracking stuff:
                graphPart.beginUpdate = enterModification = enterModificationReal;
                graphPart.endUpdate = exitModification = exitModificationReal;
                recordLinkChange = recordLinkChangeReal;
                recordNodeChange = recordNodeChangeReal;

                // this will replace current `on` method with real pub/sub from `eventify`.
                graphPart.on = realOn;
                // delegate to real `on` handler:
                return realOn.apply(graphPart, arguments);
            }
        }

        function recordLinkChangeReal(link, changeType) {
            changes.push({
                link: link,
                changeType: changeType
            });
        }

        function recordNodeChangeReal(node, changeType) {
            changes.push({
                node: node,
                changeType: changeType
            });
        }

        function addNode(nodeId, data, position) {
            if (nodeId === undefined) {
                throw new Error('Invalid node identifier');
            }

            enterModification();

            var node = getNode(nodeId);
            if (!node) {
                // TODO: Should I check for ðŸ‘‰  here?
                node = new Node(nodeId);
                nodesCount++;
                node.position = position
                recordNodeChange(node, 'add');
            } else {
                recordNodeChange(node, 'update');
            }
            node.data = data;

            nodes[nodeId] = node;

            exitModification();
            return node;
        }

        function getNode(nodeId) {
            return nodes[nodeId];
        }

        function removeNode(nodeId) {
            var node = getNode(nodeId);
            if (!node) {
                return false;
            }

            enterModification();

            while (node.links.length) {
                var link = node.links[0];
                removeLink(link);
            }

            delete nodes[nodeId];
            nodesCount--;

            recordNodeChange(node, 'remove');

            exitModification();

            return true;
        }

        function addLink(fromId, toId, data) {
            enterModification();

            var fromNode = getNode(fromId) || addNode(fromId);
            var toNode = getNode(toId) || addNode(toId);

            var link = createLink(fromId, toId, data);

            links.push(link);

            // TODO: this is not cool. On large graphs potentially would consume more memory.
            fromNode.links.push(link);
            if (fromId !== toId) {
                // make sure we are not duplicating links for self-loops
                toNode.links.push(link);
            }

            recordLinkChange(link, 'add');

            exitModification();

            return link;
        }

        function createSingleLink(fromId, toId, data) {
            var linkId = fromId.toString() + toId.toString();
            return new Link(fromId, toId, data, linkId);
        }

        function createUniqueLink(fromId, toId, data) {
            var linkId = fromId.toString() + 'ðŸ‘‰ ' + toId.toString();
            var isMultiEdge = multiEdges.hasOwnProperty(linkId);
            if (isMultiEdge || getLink(fromId, toId)) {
                if (!isMultiEdge) {
                    multiEdges[linkId] = 0;
                }
                linkId += '@' + (++multiEdges[linkId]);
            }

            return new Link(fromId, toId, data, linkId);
        }

        function getLinks(nodeId) {
            var node = getNode(nodeId);
            return node ? node.links : null;
        }

        function removeLink(link) {
            if (!link) {
                return false;
            }
            var idx = indexOfElementInArray(link, links);
            if (idx < 0) {
                return false;
            }

            enterModification();

            links.splice(idx, 1);

            var fromNode = getNode(link.fromId);
            var toNode = getNode(link.toId);

            if (fromNode) {
                idx = indexOfElementInArray(link, fromNode.links);
                if (idx >= 0) {
                    fromNode.links.splice(idx, 1);
                }
            }

            if (toNode) {
                idx = indexOfElementInArray(link, toNode.links);
                if (idx >= 0) {
                    toNode.links.splice(idx, 1);
                }
            }

            recordLinkChange(link, 'remove');

            exitModification();

            return true;
        }

        function getLink(fromNodeId, toNodeId) {
            // TODO: Use sorted links to speed this up
            var node = getNode(fromNodeId),
                i;
            if (!node) {
                return null;
            }

            for (i = 0; i < node.links.length; ++i) {
                var link = node.links[i];
                if (link.fromId === fromNodeId && link.toId === toNodeId) {
                    return link;
                }
            }

            return null; // no link.
        }

        function clear() {
            enterModification();
            forEachNode(function(node) {
                removeNode(node.id);
            });
            exitModification();
        }

        function forEachLink(callback) {
            var i, length;
            if (typeof callback === 'function') {
                for (i = 0, length = links.length; i < length; ++i) {
                    callback(links[i]);
                }
            }
        }

        function forEachLinkedNode(nodeId, callback, oriented) {
            var node = getNode(nodeId);

            if (node && node.links && typeof callback === 'function') {
                if (oriented) {
                    return forEachOrientedLink(node.links, nodeId, callback);
                } else {
                    return forEachNonOrientedLink(node.links, nodeId, callback);
                }
            }
        }

        function forEachNonOrientedLink(links, nodeId, callback) {
            var quitFast;
            for (var i = 0; i < links.length; ++i) {
                var link = links[i];
                var linkedNodeId = link.fromId === nodeId ? link.toId : link.fromId;

                quitFast = callback(nodes[linkedNodeId], link);
                if (quitFast) {
                    return true; // Client does not need more iterations. Break now.
                }
            }
        }

        function forEachOrientedLink(links, nodeId, callback) {
            var quitFast;
            for (var i = 0; i < links.length; ++i) {
                var link = links[i];
                if (link.fromId === nodeId) {
                    quitFast = callback(nodes[link.toId], link);
                    if (quitFast) {
                        return true; // Client does not need more iterations. Break now.
                    }
                }
            }
        }

        // we will not fire anything until users of this library explicitly call `on()`
        // method.
        function noop() {}

        // Enter, Exit modification allows bulk graph updates without firing events.
        function enterModificationReal() {
            suspendEvents += 1;
        }

        function exitModificationReal() {
            suspendEvents -= 1;
            if (suspendEvents === 0 && changes.length > 0) {
                graphPart.fire('changed', changes);
                changes.length = 0;
            }
        }

        function createNodeIterator() {
            // Object.keys iterator is 1.3x faster than `for in` loop.
            // See `https://github.com/anvaka/ngraph.graph/tree/bench-for-in-vs-obj-keys`
            // branch for perf test
            return Object.keys ? objectKeysIterator : forInIterator;
        }

        function objectKeysIterator(callback) {
            if (typeof callback !== 'function') {
                return;
            }

            var keys = Object.keys(nodes);
            for (var i = 0; i < keys.length; ++i) {
                if (callback(nodes[keys[i]])) {
                    return true; // client doesn't want to proceed. Return.
                }
            }
        }

        function forInIterator(callback) {
            if (typeof callback !== 'function') {
                return;
            }
            var node;

            for (node in nodes) {
                if (callback(nodes[node])) {
                    return true; // client doesn't want to proceed. Return.
                }
            }
        }
    }

    // need this for old browsers. Should this be a separate module?
    function indexOfElementInArray(element, array) {
        if (array.indexOf) {
            return array.indexOf(element);
        }

        var len = array.length,
            i;

        for (i = 0; i < len; i += 1) {
            if (array[i] === element) {
                return i;
            }
        }

        return -1;
    }

    /**
 * Internal structure to represent node;
 */
    function Node(id) {
        this.id = id;
        this.links = [];
        this.data = null;
    }

    /**
 * Internal structure to represent links;
 */
    function Link(fromId, toId, data, id) {
        this.fromId = fromId;
        this.toId = toId;
        this.data = data;
        this.id = id;
    }

},{"ngraph.events":7}],13:[function(require,module,exports){
    module.exports = merge;

    /**
 * Augments `target` with properties in `options`. Does not override
 * target's properties if they are defined and matches expected type in
 * options
 *
 * @returns {Object} merged object
 */
    function merge(target, options) {
        var key;
        if (!target) { target = {}; }
        if (options) {
            for (key in options) {
                if (options.hasOwnProperty(key)) {
                    var targetHasIt = target.hasOwnProperty(key),
                        optionsValueType = typeof options[key],
                        shouldReplace = !targetHasIt || (typeof target[key] !== optionsValueType);

                    if (shouldReplace) {
                        target[key] = options[key];
                    } else if (optionsValueType === 'object') {
                        // go deep, don't care about loops here, we are simple API!:
                        target[key] = merge(target[key], options[key]);
                    }
                }
            }
        }

        return target;
    }

},{}],14:[function(require,module,exports){
    module.exports = {
        Body: Body,
        Vector2d: Vector2d,
        Body3d: Body3d,
        Vector3d: Vector3d
    };

    function Body(x, y) {
        this.pos = new Vector2d(x, y);
        this.prevPos = new Vector2d(x, y);
        this.force = new Vector2d();
        this.velocity = new Vector2d();
        this.mass = 1;
    }

    Body.prototype.setPosition = function (x, y) {
        this.prevPos.x = this.pos.x = x;
        this.prevPos.y = this.pos.y = y;
    };

    function Vector2d(x, y) {
        if (x && typeof x !== 'number') {
            // could be another vector
            this.x = typeof x.x === 'number' ? x.x : 0;
            this.y = typeof x.y === 'number' ? x.y : 0;
        } else {
            this.x = typeof x === 'number' ? x : 0;
            this.y = typeof y === 'number' ? y : 0;
        }
    }

    Vector2d.prototype.reset = function () {
        this.x = this.y = 0;
    };

    function Body3d(x, y, z) {
        this.pos = new Vector3d(x, y, z);
        this.prevPos = new Vector3d(x, y, z);
        this.force = new Vector3d();
        this.velocity = new Vector3d();
        this.mass = 1;
    }

    Body3d.prototype.setPosition = function (x, y, z) {
        this.prevPos.x = this.pos.x = x;
        this.prevPos.y = this.pos.y = y;
        this.prevPos.z = this.pos.z = z;
    };

    function Vector3d(x, y, z) {
        if (x && typeof x !== 'number') {
            // could be another vector
            this.x = typeof x.x === 'number' ? x.x : 0;
            this.y = typeof x.y === 'number' ? x.y : 0;
            this.z = typeof x.z === 'number' ? x.z : 0;
        } else {
            this.x = typeof x === 'number' ? x : 0;
            this.y = typeof y === 'number' ? y : 0;
            this.z = typeof z === 'number' ? z : 0;
        }
    };

    Vector3d.prototype.reset = function () {
        this.x = this.y = this.z = 0;
    };

},{}],15:[function(require,module,exports){
/**
 * Manages a simulation of physical forces acting on bodies and springs.
 */
    module.exports = physicsSimulator;

    function physicsSimulator(settings) {
        var Spring = require('./lib/spring');
        var expose = require('ngraph.expose');
        var merge = require('ngraph.merge');
        var eventify = require('ngraph.events');

        settings = merge(settings, {
            /**
       * Ideal length for links (springs in physical model).
       */
            springLength: 30,

            /**
       * Hook's law coefficient. 1 - solid spring.
       */
            springCoeff: 0.0008,

            /**
       * Coulomb's law coefficient. It's used to repel nodes thus should be negative
       * if you make it positive nodes start attract each other :).
       */
            gravity: -1.2,

            /**
       * Theta coefficient from Barnes Hut simulation. Ranged between (0, 1).
       * The closer it's to 1 the more nodes algorithm will have to go through.
       * Setting it to one makes Barnes Hut simulation no different from
       * brute-force forces calculation (each node is considered).
       */
            theta: 0.8,

            /**
       * Drag force coefficient. Used to slow down system, thus should be less than 1.
       * The closer it is to 0 the less tight system will be.
       */
            dragCoeff: 0.02,

            /**
       * Default time step (dt) for forces integration
       */
            timeStep : 20,

            force: {x:0, y:0}
        });

        // We allow clients to override basic factory methods:
        var createQuadTree = settings.createQuadTree || require('ngraph.quadtreebh');
        var createBounds = settings.createBounds || require('./lib/bounds');
        var createDragForce = settings.createDragForce || require('./lib/dragForce');
        var createSpringForce = settings.createSpringForce || require('./lib/springForce');
        var integrate = settings.integrator || require('./lib/eulerIntegrator');
        var createBody = settings.createBody || require('./lib/createBody');

        var bodies = [], // Bodies in this simulation.
            springs = [], // Springs in this simulation.
            quadTree =  createQuadTree(settings),
            bounds = createBounds(bodies, settings),
            springForce = createSpringForce(settings),
            dragForce = createDragForce(settings);

        var totalMovement = 0; // how much movement we made on last step

        var publicApi = {
            /**
     * Array of bodies, registered with current simulator
     *
     * Note: To add new body, use addBody() method. This property is only
     * exposed for testing/performance purposes.
     */
            bodies: bodies,

            quadTree: quadTree,

            /**
     * Array of springs, registered with current simulator
     *
     * Note: To add new spring, use addSpring() method. This property is only
     * exposed for testing/performance purposes.
     */
            springs: springs,

            /**
     * Returns settings with which current simulator was initialized
     */
            settings: settings,

            /**
     * Performs one step of force simulation.
     *
     * @returns {boolean} true if system is considered stable; False otherwise.
     */
            step: function () {
                accumulateForces();

                var movement = integrate(bodies, settings.timeStep);
                bounds.update();

                return movement;
            },

            /**
     * Adds body to the system
     *
     * @param {ngraph.physics.primitives.Body} body physical body
     *
     * @returns {ngraph.physics.primitives.Body} added body
     */
            addBody: function (body) {
                if (!body) {
                    throw new Error('Body is required');
                }
                bodies.push(body);

                return body;
            },

            /**
     * Adds body to the system at given position
     *
     * @param {Object} pos position of a body
     *
     * @returns {ngraph.physics.primitives.Body} added body
     */
            addBodyAt: function (pos) {
                if (!pos) {
                    throw new Error('Body position is required');
                }
                var body = createBody(pos);
                bodies.push(body);

                return body;
            },

            /**
     * Removes body from the system
     *
     * @param {ngraph.physics.primitives.Body} body to remove
     *
     * @returns {Boolean} true if body found and removed. falsy otherwise;
     */
            removeBody: function (body) {
                if (!body) { return; }

                var idx = bodies.indexOf(body);
                if (idx < 0) { return; }

                bodies.splice(idx, 1);
                if (bodies.length === 0) {
                    bounds.reset();
                }
                return true;
            },

            /**
     * Adds a spring to this simulation.
     *
     * @returns {Object} - a handle for a spring. If you want to later remove
     * spring pass it to removeSpring() method.
     */
            addSpring: function (body1, body2, springLength, springWeight, springCoefficient) {
                if (!body1 || !body2) {
                    throw new Error('Cannot add null spring to force simulator');
                }

                if (typeof springLength !== 'number') {
                    springLength = -1; // assume global configuration
                }

                var spring = new Spring(body1, body2, springLength, springCoefficient >= 0 ? springCoefficient : -1, springWeight);
                springs.push(spring);

                // TODO: could mark simulator as dirty.
                return spring;
            },

            /**
     * Returns amount of movement performed on last step() call
     */
            getTotalMovement: function () {
                return totalMovement;
            },

            /**
     * Removes spring from the system
     *
     * @param {Object} spring to remove. Spring is an object returned by addSpring
     *
     * @returns {Boolean} true if spring found and removed. falsy otherwise;
     */
            removeSpring: function (spring) {
                if (!spring) { return; }
                var idx = springs.indexOf(spring);
                if (idx > -1) {
                    springs.splice(idx, 1);
                    return true;
                }
            },

            getBestNewBodyPosition: function (neighbors) {
                return bounds.getBestNewPosition(neighbors);
            },

            /**
     * Returns bounding box which covers all bodies
     */
            getBBox: function () {
                return bounds.box;
            },

            gravity: function (value) {
                if (value !== undefined) {
                    settings.gravity = value;
                    quadTree.options({gravity: value});
                    return this;
                } else {
                    return settings.gravity;
                }
            },

            theta: function (value) {
                if (value !== undefined) {
                    settings.theta = value;
                    quadTree.options({theta: value});
                    return this;
                } else {
                    return settings.theta;
                }
            },

            setForce: function (value) {
                if (value !== undefined) {
                    settings.force = value;
                    quadTree.options({force: value});
                    return this;
                } else {
                    return settings.force;
                }
            }
        };

        // allow settings modification via public API:
        expose(settings, publicApi);

        eventify(publicApi);

        return publicApi;

        function accumulateForces() {
            // Accumulate forces acting on bodies.
            var body,
                i = bodies.length;

            if (i) {
                // only add bodies if there the array is not empty:
                quadTree.insertBodies(bodies); // performance: O(n * log n)
                while (i--) {
                    body = bodies[i];
                    // If body is pinned there is no point updating its forces - it should
                    // never move:
                    if (!body.isPinned) {
                        body.force.reset();

                        quadTree.updateBodyForce(body);
                        dragForce.update(body);
                    }
                }
            }

            i = springs.length;
            while(i--) {
                springForce.update(springs[i]);
            }
        }
    };

},{"./lib/bounds":16,"./lib/createBody":17,"./lib/dragForce":18,"./lib/eulerIntegrator":19,"./lib/spring":20,"./lib/springForce":21,"ngraph.events":7,"ngraph.expose":8,"ngraph.merge":13,"ngraph.quadtreebh":22}],16:[function(require,module,exports){
    module.exports = function (bodies, settings) {
        var random = require('ngraph.random').random(42);
        var boundingBox =  { x1: 0, y1: 0, x2: 0, y2: 0 };

        return {
            box: boundingBox,

            update: updateBoundingBox,

            reset : function () {
                boundingBox.x1 = boundingBox.y1 = 0;
                boundingBox.x2 = boundingBox.y2 = 0;
            },

            getBestNewPosition: function (neighbors) {
                var graphRect = boundingBox;

                var baseX = 0, baseY = 0;

                if (neighbors.length) {
                    for (var i = 0; i < neighbors.length; ++i) {
                        baseX += neighbors[i].pos.x;
                        baseY += neighbors[i].pos.y;
                    }

                    baseX /= neighbors.length;
                    baseY /= neighbors.length;
                } else {
                    baseX = (graphRect.x1 + graphRect.x2) / 2;
                    baseY = (graphRect.y1 + graphRect.y2) / 2;
                }

                var springLength = settings.springLength;
                return {
                    x: baseX + random.next(springLength) - springLength / 2,
                    y: baseY + random.next(springLength) - springLength / 2
                };
            }
        };

        function updateBoundingBox() {
            var i = bodies.length;
            if (i === 0) { return; } // don't have to wory here.

            var x1 = Number.MAX_VALUE,
                y1 = Number.MAX_VALUE,
                x2 = Number.MIN_VALUE,
                y2 = Number.MIN_VALUE;

            while(i--) {
                // this is O(n), could it be done faster with quadtree?
                // how about pinned nodes?
                var body = bodies[i];
                if (body.isPinned) {
                    body.pos.x = body.prevPos.x;
                    body.pos.y = body.prevPos.y;
                } else {
                    body.prevPos.x = body.pos.x;
                    body.prevPos.y = body.pos.y;
                }
                if (body.pos.x < x1) {
                    x1 = body.pos.x;
                }
                if (body.pos.x > x2) {
                    x2 = body.pos.x;
                }
                if (body.pos.y < y1) {
                    y1 = body.pos.y;
                }
                if (body.pos.y > y2) {
                    y2 = body.pos.y;
                }
            }

            boundingBox.x1 = x1;
            boundingBox.x2 = x2;
            boundingBox.y1 = y1;
            boundingBox.y2 = y2;
        }
    }

},{"ngraph.random":26}],17:[function(require,module,exports){
    var physics = require('ngraph.physics.primitives');

    module.exports = function(pos) {
        return new physics.Body(pos);
    }

},{"ngraph.physics.primitives":14}],18:[function(require,module,exports){
/**
 * Represents drag force, which reduces force value on each step by given
 * coefficient.
 *
 * @param {Object} options for the drag force
 * @param {Number=} options.dragCoeff drag force coefficient. 0.1 by default
 */
    module.exports = function (options) {
        var merge = require('ngraph.merge'),
            expose = require('ngraph.expose');

        options = merge(options, {
            dragCoeff: 0.02
        });

        var api = {
            update : function (body) {
                body.force.x -= options.dragCoeff * body.velocity.x;
                body.force.y -= options.dragCoeff * body.velocity.y;
            }
        };

        // let easy access to dragCoeff:
        expose(options, api, ['dragCoeff']);

        return api;
    };

},{"ngraph.expose":8,"ngraph.merge":13}],19:[function(require,module,exports){
/**
 * Performs forces integration, using given timestep. Uses Euler method to solve
 * differential equation (http://en.wikipedia.org/wiki/Euler_method ).
 *
 * @returns {Number} squared distance of total position updates.
 */

    module.exports = integrate;

    function integrate(bodies, timeStep) {
        var dx = 0, tx = 0,
            dy = 0, ty = 0,
            i,
            max = bodies.length;

        if (max === 0) {
            return 0;
        }

        for (i = 0; i < max; ++i) {
            var body = bodies[i],
                coeff = timeStep / body.mass;

            body.velocity.x += coeff * body.force.x;
            body.velocity.y += coeff * body.force.y;
            var vx = body.velocity.x,
                vy = body.velocity.y,
                v = Math.sqrt(vx * vx + vy * vy);

            if (v > 1) {
                body.velocity.x = vx / v;
                body.velocity.y = vy / v;
            }

            dx = timeStep * body.velocity.x;
            dy = timeStep * body.velocity.y;

            body.pos.x += dx;
            body.pos.y += dy;

            tx += Math.abs(dx); ty += Math.abs(dy);
        }

        return (tx * tx + ty * ty)/max;
    }

},{}],20:[function(require,module,exports){
    module.exports = Spring;

    /**
 * Represents a physical spring. Spring connects two bodies, has rest length
 * stiffness coefficient and optional weight
 */
    function Spring(fromBody, toBody, length, coeff, weight) {
        this.from = fromBody;
        this.to = toBody;
        this.length = length;
        this.coeff = coeff;

        this.weight = typeof weight === 'number' ? weight : 1;
    };

},{}],21:[function(require,module,exports){
/**
 * Represents spring force, which updates forces acting on two bodies, conntected
 * by a spring.
 *
 * @param {Object} options for the spring force
 * @param {Number=} options.springCoeff spring force coefficient.
 * @param {Number=} options.springLength desired length of a spring at rest.
 */
    module.exports = function (options) {
        var merge = require('ngraph.merge');
        var random = require('ngraph.random').random(42);
        var expose = require('ngraph.expose');

        options = merge(options, {
            springCoeff: 0.0002,
            springLength: 80
        });

        var api = {
            /**
     * Upsates forces acting on a spring
     */
            update : function (spring) {
                var body1 = spring.from,
                    body2 = spring.to,
                    length = spring.length < 0 ? options.springLength : spring.length,
                    dx = body2.pos.x - body1.pos.x,
                    dy = body2.pos.y - body1.pos.y,
                    r = Math.sqrt(dx * dx + dy * dy);

                if (r === 0) {
                    dx = (random.nextDouble() - 0.5) / 50;
                    dy = (random.nextDouble() - 0.5) / 50;
                    r = Math.sqrt(dx * dx + dy * dy);
                }

                var d = r - length;
                var coeff = ((!spring.coeff || spring.coeff < 0) ? options.springCoeff : spring.coeff) * d / r * spring.weight;

                body1.force.x += coeff * dx;
                body1.force.y += coeff * dy;

                body2.force.x -= coeff * dx;
                body2.force.y -= coeff * dy;
            }
        };

        expose(options, api, ['springCoeff', 'springLength']);
        return api;
    }

},{"ngraph.expose":8,"ngraph.merge":13,"ngraph.random":26}],22:[function(require,module,exports){
/**
 * This is Barnes Hut simulation algorithm for 2d case. Implementation
 * is highly optimized (avoids recusion and gc pressure)
 *
 * http://www.cs.princeton.edu/courses/archive/fall03/cs126/assignments/barnes-hut.html
 */

    module.exports = function(options) {
        options = options || {};
        options.gravity = typeof options.gravity === 'number' ? options.gravity : -1;
        options.theta = typeof options.theta === 'number' ? options.theta : 0.8;
        options.force = typeof options.force === 'object' ? options.force : {x:0,y:0};

        // we require deterministic randomness here
        var random = require('ngraph.random').random(1984),
            Node = require('./node'),
            InsertStack = require('./insertStack'),
            isSamePosition = require('./isSamePosition');

        var gravity = options.gravity,
            updateQueue = [],
            insertStack = new InsertStack(),
            theta = options.theta,
            force = options.force;

            nodesCache = [],
            currentInCache = 0,
            root = newNode();

        return {
            insertBodies: insertBodies,
            /**
     * Gets root node if its present
     */
            getRoot: function() {
                return root;
            },
            updateBodyForce: update,
            options: function(newOptions) {
                if (newOptions) {
                    if (typeof newOptions.gravity === 'number') {
                        gravity = newOptions.gravity;
                    }
                    if (typeof newOptions.theta === 'number') {
                        theta = newOptions.theta;
                    }
                    if (typeof newOptions.force === 'object') {
                        force = newOptions.force;
                    }

                    return this;
                }

                return {
                    gravity: gravity,
                    theta: theta
                };
            }
        };

        function newNode() {
            // To avoid pressure on GC we reuse nodes.
            var node = nodesCache[currentInCache];
            if (node) {
                node.quad0 = null;
                node.quad1 = null;
                node.quad2 = null;
                node.quad3 = null;
                node.body = null;
                node.mass = node.massX = node.massY = 0;
                node.left = node.right = node.top = node.bottom = 0;
            } else {
                node = new Node();
                nodesCache[currentInCache] = node;
            }

            ++currentInCache;
            return node;
        }

        function update(sourceBody) {
            var queue = updateQueue,
                v,
                dx,
                dy,
                r, fx = 0,
                fy = 0,
                queueLength = 1,
                shiftIdx = 0,
                pushIdx = 1;

            queue[0] = root;

            while (queueLength) {
                var node = queue[shiftIdx],
                    body = node.body;

                queueLength -= 1;
                shiftIdx += 1;
                var differentBody = (body !== sourceBody);
                if (body && differentBody) {
                    // If the current node is a leaf node (and it is not source body),
                    // calculate the force exerted by the current node on body, and add this
                    // amount to body's net force.
                    dx = body.pos.x - sourceBody.pos.x;
                    dy = body.pos.y - sourceBody.pos.y;
                    r = Math.sqrt(dx * dx + dy * dy);

                    if (r === 0) {
                        // Poor man's protection against zero distance.
                        dx = (random.nextDouble() - 0.5) / 50;
                        dy = (random.nextDouble() - 0.5) / 50;
                        r = Math.sqrt(dx * dx + dy * dy);
                    }

                    // This is standard gravition force calculation but we divide
                    // by r^3 to save two operations when normalizing force vector.
                    v = gravity * body.mass * sourceBody.mass / (r * r * r);
                    fx += v * dx;
                    fy += v * dy;
                } else if (differentBody) {
                    // Otherwise, calculate the ratio s / r,  where s is the width of the region
                    // represented by the internal node, and r is the distance between the body
                    // and the node's center-of-mass
                    dx = node.massX / node.mass - sourceBody.pos.x;
                    dy = node.massY / node.mass - sourceBody.pos.y;
                    r = Math.sqrt(dx * dx + dy * dy);

                    if (r === 0) {
                        // Sorry about code duplucation. I don't want to create many functions
                        // right away. Just want to see performance first.
                        dx = (random.nextDouble() - 0.5) / 50;
                        dy = (random.nextDouble() - 0.5) / 50;
                        r = Math.sqrt(dx * dx + dy * dy);
                    }
                    // If s / r < Î¸, treat this internal node as a single body, and calculate the
                    // force it exerts on sourceBody, and add this amount to sourceBody's net force.
                    if ((node.right - node.left) / r < theta) {
                        // in the if statement above we consider node's width only
                        // because the region was squarified during tree creation.
                        // Thus there is no difference between using width or height.
                        v = gravity * node.mass * sourceBody.mass / (r * r * r);
                        fx += v * dx;
                        fy += v * dy;
                    } else {
                        // Otherwise, run the procedure recursively on each of the current node's children.

                        // I intentionally unfolded this loop, to save several CPU cycles.
                        if (node.quad0) {
                            queue[pushIdx] = node.quad0;
                            queueLength += 1;
                            pushIdx += 1;
                        }
                        if (node.quad1) {
                            queue[pushIdx] = node.quad1;
                            queueLength += 1;
                            pushIdx += 1;
                        }
                        if (node.quad2) {
                            queue[pushIdx] = node.quad2;
                            queueLength += 1;
                            pushIdx += 1;
                        }
                        if (node.quad3) {
                            queue[pushIdx] = node.quad3;
                            queueLength += 1;
                            pushIdx += 1;
                        }
                    }
                }
            }

            sourceBody.force.x += fx + force.x/(Math.abs(sourceBody.pos.x)*0.01+1); //todo change
            sourceBody.force.y += fy + force.y/(Math.abs(sourceBody.pos.y)*0.01+1);
        }

        function insertBodies(bodies) {
            var x1 = Number.MAX_VALUE,
                y1 = Number.MAX_VALUE,
                x2 = Number.MIN_VALUE,
                y2 = Number.MIN_VALUE,
                i,
                max = bodies.length;

            // To reduce quad tree depth we are looking for exact bounding box of all particles.
            i = max;
            while (i--) {
                var x = bodies[i].pos.x;
                var y = bodies[i].pos.y;
                if (x < x1) {
                    x1 = x;
                }
                if (x > x2) {
                    x2 = x;
                }
                if (y < y1) {
                    y1 = y;
                }
                if (y > y2) {
                    y2 = y;
                }
            }

            // Squarify the bounds.
            var dx = x2 - x1,
                dy = y2 - y1;
            if (dx > dy) {
                y2 = y1 + dx;
            } else {
                x2 = x1 + dy;
            }

            currentInCache = 0;
            root = newNode();
            root.left = x1;
            root.right = x2;
            root.top = y1;
            root.bottom = y2;

            i = max - 1;
            if (i >= 0) {
                root.body = bodies[i];
            }
            while (i--) {
                insert(bodies[i], root);
            }
        }

        function insert(newBody) {
            insertStack.reset();
            insertStack.push(root, newBody);

            while (!insertStack.isEmpty()) {
                var stackItem = insertStack.pop(),
                    node = stackItem.node,
                    body = stackItem.body;

                if (!node.body) {
                    // This is internal node. Update the total mass of the node and center-of-mass.
                    var x = body.pos.x;
                    var y = body.pos.y;
                    node.mass = node.mass + body.mass;
                    node.massX = node.massX + body.mass * x;
                    node.massY = node.massY + body.mass * y;

                    // Recursively insert the body in the appropriate quadrant.
                    // But first find the appropriate quadrant.
                    var quadIdx = 0, // Assume we are in the 0's quad.
                        left = node.left,
                        right = (node.right + left) / 2,
                        top = node.top,
                        bottom = (node.bottom + top) / 2;

                    if (x > right) { // somewhere in the eastern part.
                        quadIdx = quadIdx + 1;
                        left = right;
                        right = node.right;
                    }
                    if (y > bottom) { // and in south.
                        quadIdx = quadIdx + 2;
                        top = bottom;
                        bottom = node.bottom;
                    }

                    var child = getChild(node, quadIdx);
                    if (!child) {
                        // The node is internal but this quadrant is not taken. Add
                        // subnode to it.
                        child = newNode();
                        child.left = left;
                        child.top = top;
                        child.right = right;
                        child.bottom = bottom;
                        child.body = body;

                        setChild(node, quadIdx, child);
                    } else {
                        // continue searching in this quadrant.
                        insertStack.push(child, body);
                    }
                } else {
                    // We are trying to add to the leaf node.
                    // We have to convert current leaf into internal node
                    // and continue adding two nodes.
                    var oldBody = node.body;
                    node.body = null; // internal nodes do not cary bodies

                    if (isSamePosition(oldBody.pos, body.pos)) {
                        // Prevent infinite subdivision by bumping one node
                        // anywhere in this quadrant
                        var retriesCount = 3;
                        do {
                            var offset = random.nextDouble();
                            var dx = (node.right - node.left) * offset;
                            var dy = (node.bottom - node.top) * offset;

                            oldBody.pos.x = node.left + dx;
                            oldBody.pos.y = node.top + dy;
                            retriesCount -= 1;
                            // Make sure we don't bump it out of the box. If we do, next iteration should fix it
                        } while (retriesCount > 0 && isSamePosition(oldBody.pos, body.pos));

                        if (retriesCount === 0 && isSamePosition(oldBody.pos, body.pos)) {
                            // This is very bad, we ran out of precision.
                            // if we do not return from the method we'll get into
                            // infinite loop here. So we sacrifice correctness of layout, and keep the app running
                            // Next layout iteration should get larger bounding box in the first step and fix this
                            return;
                        }
                    }
                    // Next iteration should subdivide node further.
                    insertStack.push(node, oldBody);
                    insertStack.push(node, body);
                }
            }
        }
    };

    function getChild(node, idx) {
        if (idx === 0) return node.quad0;
        if (idx === 1) return node.quad1;
        if (idx === 2) return node.quad2;
        if (idx === 3) return node.quad3;
        return null;
    }

    function setChild(node, idx, child) {
        if (idx === 0) node.quad0 = child;
        else if (idx === 1) node.quad1 = child;
        else if (idx === 2) node.quad2 = child;
        else if (idx === 3) node.quad3 = child;
    }

},{"./insertStack":23,"./isSamePosition":24,"./node":25,"ngraph.random":26}],23:[function(require,module,exports){
    module.exports = InsertStack;

    /**
 * Our implmentation of QuadTree is non-recursive to avoid GC hit
 * This data structure represent stack of elements
 * which we are trying to insert into quad tree.
 */
    function InsertStack () {
        this.stack = [];
        this.popIdx = 0;
    }

    InsertStack.prototype = {
        isEmpty: function() {
            return this.popIdx === 0;
        },
        push: function (node, body) {
            var item = this.stack[this.popIdx];
            if (!item) {
            // we are trying to avoid memory pressue: create new element
            // only when absolutely necessary
                this.stack[this.popIdx] = new InsertStackElement(node, body);
            } else {
                item.node = node;
                item.body = body;
            }
            ++this.popIdx;
        },
        pop: function () {
            if (this.popIdx > 0) {
                return this.stack[--this.popIdx];
            }
        },
        reset: function () {
            this.popIdx = 0;
        }
    };

    function InsertStackElement(node, body) {
        this.node = node; // QuadTree node
        this.body = body; // physical body which needs to be inserted to node
    }

},{}],24:[function(require,module,exports){
    module.exports = function isSamePosition(point1, point2) {
        var dx = Math.abs(point1.x - point2.x);
        var dy = Math.abs(point1.y - point2.y);

        return (dx < 1e-8 && dy < 1e-8);
    };

},{}],25:[function(require,module,exports){
/**
 * Internal data structure to represent 2D QuadTree node
 */
    module.exports = function Node() {
        // body stored inside this node. In quad tree only leaf nodes (by construction)
        // contain boides:
        this.body = null;

        // Child nodes are stored in quads. Each quad is presented by number:
        // 0 | 1
        // -----
        // 2 | 3
        this.quad0 = null;
        this.quad1 = null;
        this.quad2 = null;
        this.quad3 = null;

        // Total mass of current node
        this.mass = 0;

        // Center of mass coordinates
        this.massX = 0;
        this.massY = 0;

        // bounding box coordinates
        this.left = 0;
        this.top = 0;
        this.bottom = 0;
        this.right = 0;
    };

},{}],26:[function(require,module,exports){
    module.exports = {
        random: random,
        randomIterator: randomIterator
    };

    /**
 * Creates seeded PRNG with two methods:
 *   next() and nextDouble()
 */
    function random(inputSeed) {
        var seed = typeof inputSeed === 'number' ? inputSeed : (+ new Date());
        var randomFunc = function() {
            // Robert Jenkins' 32 bit integer hash function.
            seed = ((seed + 0x7ed55d16) + (seed << 12))  & 0xffffffff;
            seed = ((seed ^ 0xc761c23c) ^ (seed >>> 19)) & 0xffffffff;
            seed = ((seed + 0x165667b1) + (seed << 5))   & 0xffffffff;
            seed = ((seed + 0xd3a2646c) ^ (seed << 9))   & 0xffffffff;
            seed = ((seed + 0xfd7046c5) + (seed << 3))   & 0xffffffff;
            seed = ((seed ^ 0xb55a4f09) ^ (seed >>> 16)) & 0xffffffff;
            return (seed & 0xfffffff) / 0x10000000;
        };

        return {
            /**
       * Generates random integer number in the range from 0 (inclusive) to maxValue (exclusive)
       *
       * @param maxValue Number REQUIRED. Ommitting this number will result in NaN values from PRNG.
       */
            next : function (maxValue) {
                return Math.floor(randomFunc() * maxValue);
            },

            /**
       * Generates random double number in the range from 0 (inclusive) to 1 (exclusive)
       * This function is the same as Math.random() (except that it could be seeded)
       */
            nextDouble : function () {
                return randomFunc();
            }
        };
    }

    /*
 * Creates iterator over array, which returns items of array in random order
 * Time complexity is guaranteed to be O(n);
 */
    function randomIterator(array, customRandom) {
        var localRandom = customRandom || random();
        if (typeof localRandom.next !== 'function') {
            throw new Error('customRandom does not match expected API: next() function is missing');
        }

        return {
            forEach : function (callback) {
                var i, j, t;
                for (i = array.length - 1; i > 0; --i) {
                    j = localRandom.next(i + 1); // i inclusive
                    t = array[j];
                    array[j] = array[i];
                    array[i] = t;

                    callback(t);
                }

                if (array.length) {
                    callback(array[0]);
                }
            },

            /**
         * Shuffles array randomly, in place.
         */
            shuffle : function () {
                var i, j, t;
                for (i = array.length - 1; i > 0; --i) {
                    j = localRandom.next(i + 1); // i inclusive
                    t = array[j];
                    array[j] = array[i];
                    array[i] = t;
                }

                return array;
            }
        };
    }

},{}],27:[function(require,module,exports){
    module.exports = save;

    function save(graph, customNodeTransform, customLinkTransform) {
        // Object contains `nodes` and `links` arrays.
        var result = {
            nodes: [],
            links: []
        };

        var nodeTransform = customNodeTransform || defaultTransformForNode;
        var linkTransform = customLinkTransform || defaultTransformForLink;

        graph.forEachNode(saveNode);
        graph.forEachLink(saveLink);

        return JSON.stringify(result);

        function saveNode(node) {
            // Each node of the graph is processed to take only required fields
            // `id` and `data`
            result.nodes.push(nodeTransform(node));
        }

        function saveLink(link) {
            // Each link of the graph is also processed to take `fromId`, `toId` and
            // `data`
            result.links.push(linkTransform(link));
        }

        function defaultTransformForNode(node) {
            var result = {
                id: node.id
            };
            // We don't want to store undefined fields when it's not necessary:
            if (node.data !== undefined) {
                result.data = node.data;
            }

            return result;
        }

        function defaultTransformForLink(link) {
            var result = {
                fromId: link.fromId,
                toId: link.toId,
            };

            if (link.data !== undefined) {
                result.data = link.data;
            }

            return result;
        }
    }

},{}],28:[function(require,module,exports){
    module.exports = svg;

    svg.compile = require('./lib/compile');

    var compileTemplate = svg.compileTemplate = require('./lib/compile_template');

    var domEvents = require('add-event-listener');

    var svgns = "http://www.w3.org/2000/svg";
    var xlinkns = "http://www.w3.org/1999/xlink";

    function svg(element, attrBag) {
        var svgElement = augment(element);
        if (attrBag === undefined) {
            return svgElement;
        }

        var attributes = Object.keys(attrBag);
        for (var i = 0; i < attributes.length; ++i) {
            var attributeName = attributes[i];
            var value = attrBag[attributeName];
            if (attributeName === 'link') {
                svgElement.link(value);
            } else {
                svgElement.attr(attributeName, value);
            }
        }

        return svgElement;
    }

    function augment(element) {
        var svgElement = element;

        if (typeof element === "string") {
            svgElement = window.document.createElementNS(svgns, element);
        } else if (element.simplesvg) {
            return element;
        }

        var compiledTempalte;

        svgElement.simplesvg = true; // this is not good, since we are monkey patching svg
        svgElement.attr = attr;
        svgElement.append = append;
        svgElement.link = link;
        svgElement.text = text;

        // add easy eventing
        svgElement.on = on;
        svgElement.off = off;

        // data binding:
        svgElement.dataSource = dataSource;

        return svgElement;

        function dataSource(model) {
            if (!compiledTempalte) compiledTempalte = compileTemplate(svgElement);
            compiledTempalte.link(model);
            return svgElement;
        }

        function on(name, cb, useCapture) {
            domEvents.addEventListener(svgElement, name, cb, useCapture);
            return svgElement;
        }

        function off(name, cb, useCapture) {
            domEvents.removeEventListener(svgElement, name, cb, useCapture);
            return svgElement;
        }

        function append(content) {
            var child = svg(content);
            svgElement.appendChild(child);

            return child;
        }

        function attr(name, value) {
            if (arguments.length === 2) {
                if (value !== null) {
                    svgElement.setAttributeNS(null, name, value);
                } else {
                    svgElement.removeAttributeNS(null, name);
                }

                return svgElement;
            }

            return svgElement.getAttributeNS(null, name);
        }

        function link(target) {
            if (arguments.length) {
                svgElement.setAttributeNS(xlinkns, "xlink:href", target);
                return svgElement;
            }

            return svgElement.getAttributeNS(xlinkns, "xlink:href");
        }

        function text(textContent) {
            if (textContent !== undefined) {
                svgElement.textContent = textContent;
                return svgElement;
            }
            return svgElement.textContent;
        }
    }

},{"./lib/compile":29,"./lib/compile_template":30,"add-event-listener":2}],29:[function(require,module,exports){
    var parser = require('./domparser.js');
    var svg = require('../');

    module.exports = compile;

    function compile(svgText) {
        try {
            svgText = addNamespaces(svgText);
            return svg(parser.parseFromString(svgText, "text/xml").documentElement);
        } catch (e) {
            throw e;
        }
    }

    function addNamespaces(text) {
        if (!text) return;

        var namespaces = 'xmlns:svg="http://www.w3.org/2000/svg" xmlns="http://www.w3.org/2000/svg"';
        var match = text.match(/^<\w+/);
        if (match) {
            var tagLength = match[0].length;
            return text.substr(0, tagLength) + ' ' + namespaces + ' ' + text.substr(tagLength);
        } else {
            throw new Error('Cannot parse input text: invalid xml?');
        }
    }

},{"../":28,"./domparser.js":31}],30:[function(require,module,exports){
    module.exports = template;

    var BINDING_EXPR = /{{(.+?)}}/;

    function template(domNode) {
        var allBindings = Object.create(null);
        extractAllBindings(domNode, allBindings);

        return {
            link: function(model) {
                Object.keys(allBindings).forEach(function(key) {
                    var setter = allBindings[key];
                    setter.forEach(changeModel);
                });

                function changeModel(setter) {
                    setter(model);
                }
            }
        };
    }

    function extractAllBindings(domNode, allBindings) {
        var nodeType = domNode.nodeType;
        var typeSupported = (nodeType === 1) || (nodeType === 3);
        if (!typeSupported) return;
        var i;
        if (domNode.hasChildNodes()) {
            var domChildren = domNode.childNodes;
            for (i = 0; i < domChildren.length; ++i) {
                extractAllBindings(domChildren[i], allBindings);
            }
        }

        if (nodeType === 3) { // text:
            bindTextContent(domNode, allBindings);
        }

        if (!domNode.attributes) return; // this might be a text. Need to figure out what to do in that case

        var attrs = domNode.attributes;
        for (i = 0; i < attrs.length; ++i) {
            bindDomAttribute(attrs[i], domNode, allBindings);
        }
    }

    function bindDomAttribute(domAttribute, element, allBindings) {
        var value = domAttribute.value;
        if (!value) return; // unary attribute?

        var modelNameMatch = value.match(BINDING_EXPR);
        if (!modelNameMatch) return; // does not look like a binding

        var attrName = domAttribute.localName;
        var modelPropertyName = modelNameMatch[1];
        var isSimpleValue = modelPropertyName.indexOf('.') < 0;

        if (!isSimpleValue) throw new Error('simplesvg currently does not support nested bindings');

        var propertyBindings = allBindings[modelPropertyName];
        if (!propertyBindings) {
            propertyBindings = allBindings[modelPropertyName] = [attributeSetter];
        } else {
            propertyBindings.push(attributeSetter);
        }

        function attributeSetter(model) {
            element.setAttributeNS(null, attrName, model[modelPropertyName]);
        }
    }
    function bindTextContent(element, allBindings) {
        // todo reduce duplication
        var value = element.nodeValue;
        if (!value) return; // unary attribute?

        var modelNameMatch = value.match(BINDING_EXPR);
        if (!modelNameMatch) return; // does not look like a binding

        var modelPropertyName = modelNameMatch[1];
        var isSimpleValue = modelPropertyName.indexOf('.') < 0;

        var propertyBindings = allBindings[modelPropertyName];
        if (!propertyBindings) {
            propertyBindings = allBindings[modelPropertyName] = [textSetter];
        } else {
            propertyBindings.push(textSetter);
        }

        function textSetter(model) {
            element.nodeValue = model[modelPropertyName];
        }
    }

},{}],31:[function(require,module,exports){
    module.exports = createDomparser();

    function createDomparser() {
        if (typeof DOMParser === 'undefined') {
            return {
                parseFromString: fail
            };
        }
        return new DOMParser();
    }

    function fail() {
        throw new Error('DOMParser is not supported by this platform. Please open issue here https://github.com/anvaka/simplesvg');
    }

},{}],32:[function(require,module,exports){
    var centrality = require('ngraph.centrality');

    module.exports = centralityWrapper;

    function centralityWrapper() {
        // TODO: This should not be a function
        return {
            betweennessCentrality: betweennessCentrality,
            degreeCentrality: degreeCentrality
        };
    }

    function betweennessCentrality(g) {
        var betweenness = centrality.betweenness(g);
        return toVivaGraphCentralityFormat(betweenness);
    }

    function degreeCentrality(g, kind) {
        var degree = centrality.degree(g, kind);
        return toVivaGraphCentralityFormat(degree);
    }

    function toVivaGraphCentralityFormat(centrality) {
        return Object.keys(centrality).sort(byValue).map(toKeyValue);

        function byValue(x, y) {
            return centrality[y] - centrality[x];
        }

        function toKeyValue(key) {
            return {
                key: key,
                value: centrality[key]
            };
        }
    }

},{"ngraph.centrality":4}],33:[function(require,module,exports){
/**
 * @fileOverview Contains collection of primitive operations under graph.
 *
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */
    module.exports = operations;

    function operations() {

        return {
        /**
         * Gets graph density, which is a ratio of actual number of edges to maximum
         * number of edges. I.e. graph density 1 means all nodes are connected with each other with an edge.
         * Density 0 - graph has no edges. Runtime: O(1)
         *
         * @param graph represents oriented graph structure.
         * @param directed (optional boolean) represents if the graph should be treated as a directed graph.
         *
         * @returns density of the graph if graph has nodes. NaN otherwise. Returns density for undirected graph by default but returns density for directed graph if a boolean 'true' is passed along with the graph.
         */
            density : function (graph,directed) {
                var nodes = graph.getNodesCount();
                if (nodes === 0) {
                    return NaN;
                }
                if(directed){
                    return graph.getLinksCount() / (nodes * (nodes - 1));
                } else {
                    return 2 * graph.getLinksCount() / (nodes * (nodes - 1));
                }
            }
        };
    };

},{}],34:[function(require,module,exports){
/**
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */

    module.exports = domInputManager;

    var dragndrop = require('./dragndrop.js');

    function domInputManager(graph, graphics) {
        var nodeEvents = {};
        return {
            /**
     * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG
     * graphics we may listen to DOM events, whereas for WebGL the graphics
     * should provide custom eventing mechanism.
     *
     * @param node - to be monitored.
     * @param handlers - object with set of three callbacks:
     *   onStart: function(),
     *   onDrag: function(e, offset),
     *   onStop: function()
     */
            bindDragNDrop: bindDragNDrop
        };

        function bindDragNDrop(node, handlers) {
            var events;
            if (handlers) {
                var nodeUI = graphics.getNodeUI(node.id);
                events = dragndrop(nodeUI);
                if (typeof handlers.onStart === 'function') {
                    events.onStart(handlers.onStart);
                }
                if (typeof handlers.onDrag === 'function') {
                    events.onDrag(handlers.onDrag);
                }
                if (typeof handlers.onStop === 'function') {
                    events.onStop(handlers.onStop);
                }

                nodeEvents[node.id] = events;
            } else if ((events = nodeEvents[node.id])) {
                events.release();
                delete nodeEvents[node.id];
            }
        }
    }

},{"./dragndrop.js":35}],35:[function(require,module,exports){
/**
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */

    module.exports = dragndrop;

    var documentEvents = require('../Utils/documentEvents.js');
    var browserInfo = require('../Utils/browserInfo.js');
    var findElementPosition = require('../Utils/findElementPosition.js');

    // TODO: Move to input namespace
    // TODO: Methods should be extracted into the prototype. This class
    // does not need to consume so much memory for every tracked element
    function dragndrop(element) {
        var start,
            drag,
            end,
            scroll,
            prevSelectStart,
            prevDragStart,

            startX = 0,
            startY = 0,
            dragObject,
            touchInProgress = false,
            pinchZoomLength = 0,

            getMousePos = function (e) {
                var posx = 0,
                    posy = 0;

                e = e || window.event;

                if (e.pageX || e.pageY) {
                    posx = e.pageX;
                    posy = e.pageY;
                } else if (e.clientX || e.clientY) {
                    posx = e.clientX + window.document.body.scrollLeft + window.document.documentElement.scrollLeft;
                    posy = e.clientY + window.document.body.scrollTop + window.document.documentElement.scrollTop;
                }

                return [posx, posy];
            },

            move = function (e, clientX, clientY) {
                if (drag) {
                    drag(e, {x : clientX - startX, y : clientY - startY });
                }

                startX = clientX;
                startY = clientY;
            },

            stopPropagation = function (e) {
                if (e.stopPropagation) { e.stopPropagation(); } else { e.cancelBubble = true; }
            },
            preventDefault = function (e) {
                if (e.preventDefault) { e.preventDefault(); }
            },

            handleDisabledEvent = function (e) {
                stopPropagation(e);
                return false;
            },

            handleMouseMove = function (e) {
                e = e || window.event;

                move(e, e.clientX, e.clientY);
            },

            handleMouseDown = function (e) {
                e = e || window.event;
                if (touchInProgress) {
                // modern browsers will fire mousedown for touch events too
                // we do not want this, since touch is handled separately.
                    stopPropagation(e);
                    return false;
                }
                // for IE, left click == 1
                // for Firefox, left click == 0
                var isLeftButton = ((e.button === 1 && window.event !== null) || e.button === 0);

                if (isLeftButton) {
                    startX = e.clientX;
                    startY = e.clientY;

                    // TODO: bump zIndex?
                    dragObject = e.target || e.srcElement;

                    if (start) { start(e, {x: startX, y : startY}); }

                    documentEvents.on('mousemove', handleMouseMove);
                    documentEvents.on('mouseup', handleMouseUp);

                    stopPropagation(e);
                    // TODO: What if event already there? Not bullet proof:
                    prevSelectStart = window.document.onselectstart;
                    prevDragStart = window.document.ondragstart;

                    window.document.onselectstart = handleDisabledEvent;
                    dragObject.ondragstart = handleDisabledEvent;

                    // prevent text selection (except IE)
                    return false;
                }
            },

            handleMouseUp = function (e) {
                e = e || window.event;

                documentEvents.off('mousemove', handleMouseMove);
                documentEvents.off('mouseup', handleMouseUp);

                window.document.onselectstart = prevSelectStart;
                dragObject.ondragstart = prevDragStart;
                dragObject = null;
                if (end) { end(e); }
            },

            handleMouseWheel = function (e) {
                if (typeof scroll !== 'function') {
                    return;
                }

                e = e || window.event;
                if (e.preventDefault) {
                    e.preventDefault();
                }

                e.returnValue = false;
                var delta,
                    mousePos = getMousePos(e),
                    elementOffset = findElementPosition(element),
                    relMousePos = {
                        x: mousePos[0] - elementOffset[0],
                        y: mousePos[1] - elementOffset[1]
                    };

                if (e.wheelDelta) {
                    delta = e.wheelDelta / 360; // Chrome/Safari
                } else {
                    delta = e.detail / -9; // Mozilla
                }

                scroll(e, delta, relMousePos);
            },

            updateScrollEvents = function (scrollCallback) {
                if (!scroll && scrollCallback) {
                // client is interested in scrolling. Start listening to events:
                    if (browserInfo.browser === 'webkit') {
                        element.addEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
                    } else {
                        element.addEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
                    }
                } else if (scroll && !scrollCallback) {
                    if (browserInfo.browser === 'webkit') {
                        element.removeEventListener('mousewheel', handleMouseWheel, false); // Chrome/Safari
                    } else {
                        element.removeEventListener('DOMMouseScroll', handleMouseWheel, false); // Others
                    }
                }

                scroll = scrollCallback;
            },

            getPinchZoomLength = function(finger1, finger2) {
                return (finger1.clientX - finger2.clientX) * (finger1.clientX - finger2.clientX) +
                   (finger1.clientY - finger2.clientY) * (finger1.clientY - finger2.clientY);
            },

            handleTouchMove = function (e) {
                if (e.touches.length === 1) {
                    stopPropagation(e);

                    var touch = e.touches[0];
                    move(e, touch.clientX, touch.clientY);
                } else if (e.touches.length === 2) {
                // it's a zoom:
                    var currentPinchLength = getPinchZoomLength(e.touches[0], e.touches[1]);
                    var delta = 0;
                    if (currentPinchLength < pinchZoomLength) {
                        delta = -1;
                    } else if (currentPinchLength > pinchZoomLength) {
                        delta = 1;
                    }
                    scroll(e, delta, {x: e.touches[0].clientX, y: e.touches[0].clientY});
                    pinchZoomLength = currentPinchLength;
                    stopPropagation(e);
                    preventDefault(e);
                }
            },

            handleTouchEnd = function (e) {
                touchInProgress = false;
                documentEvents.off('touchmove', handleTouchMove);
                documentEvents.off('touchend', handleTouchEnd);
                documentEvents.off('touchcancel', handleTouchEnd);
                dragObject = null;
                if (end) { end(e); }
            },

            handleSignleFingerTouch = function (e, touch) {
                stopPropagation(e);
                preventDefault(e);

                startX = touch.clientX;
                startY = touch.clientY;

                dragObject = e.target || e.srcElement;

                if (start) { start(e, {x: startX, y : startY}); }
                // TODO: can I enter into the state when touch is in progress
                // but it's still a single finger touch?
                if (!touchInProgress) {
                    touchInProgress = true;
                    documentEvents.on('touchmove', handleTouchMove);
                    documentEvents.on('touchend', handleTouchEnd);
                    documentEvents.on('touchcancel', handleTouchEnd);
                }
            },

            handleTouchStart = function (e) {
                if (e.touches.length === 1) {
                    return handleSignleFingerTouch(e, e.touches[0]);
                } else if (e.touches.length === 2) {
                // handleTouchMove() will care about pinch zoom.
                    stopPropagation(e);
                    preventDefault(e);

                    pinchZoomLength = getPinchZoomLength(e.touches[0], e.touches[1]);

                }
            // don't care about the rest.
            };

        element.addEventListener('mousedown', handleMouseDown);
        element.addEventListener('touchstart', handleTouchStart);

        return {
            onStart : function (callback) {
                start = callback;
                return this;
            },

            onDrag : function (callback) {
                drag = callback;
                return this;
            },

            onStop : function (callback) {
                end = callback;
                return this;
            },

            /**
         * Occurs when mouse wheel event happens. callback = function(e, scrollDelta, scrollPoint);
         */
            onScroll : function (callback) {
                updateScrollEvents(callback);
                return this;
            },

            release : function () {
            // TODO: could be unsafe. We might wanna release dragObject, etc.
                element.removeEventListener('mousedown', handleMouseDown);
                element.removeEventListener('touchstart', handleTouchStart);

                documentEvents.off('mousemove', handleMouseMove);
                documentEvents.off('mouseup', handleMouseUp);
                documentEvents.off('touchmove', handleTouchMove);
                documentEvents.off('touchend', handleTouchEnd);
                documentEvents.off('touchcancel', handleTouchEnd);

                updateScrollEvents(null);
            }
        };
    }

},{"../Utils/browserInfo.js":39,"../Utils/documentEvents.js":40,"../Utils/findElementPosition.js":41}],36:[function(require,module,exports){
/**
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */

    module.exports = webglInputManager;

    var createInputEvents = require('../WebGL/webglInputEvents.js');

    function webglInputManager(graph, graphics) {
        var inputEvents = createInputEvents(graphics),
            draggedNode = null,
            internalHandlers = {},
            pos = {x : 0, y : 0};

        inputEvents.mouseDown(function (node, e) {
            draggedNode = node;
            pos.x = e.clientX;
            pos.y = e.clientY;

            inputEvents.mouseCapture(draggedNode);

            var handlers = internalHandlers[node.id];
            if (handlers && handlers.onStart) {
                handlers.onStart(e, pos);
            }

            return true;
        }).mouseUp(function (node) {
            inputEvents.releaseMouseCapture(draggedNode);

            draggedNode = null;
            var handlers = internalHandlers[node.id];
            if (handlers && handlers.onStop) {
                handlers.onStop();
            }
            return true;
        }).mouseMove(function (node, e) {
            if (draggedNode) {
                var handlers = internalHandlers[draggedNode.id];
                if (handlers && handlers.onDrag) {
                    handlers.onDrag(e, {x : e.clientX - pos.x, y : e.clientY - pos.y });
                }

                pos.x = e.clientX;
                pos.y = e.clientY;
                return true;
            }
        });

        return {
        /**
         * Called by renderer to listen to drag-n-drop events from node. E.g. for SVG
         * graphics we may listen to DOM events, whereas for WebGL we graphics
         * should provide custom eventing mechanism.
         *
         * @param node - to be monitored.
         * @param handlers - object with set of three callbacks:
         *   onStart: function(),
         *   onDrag: function(e, offset),
         *   onStop: function()
         */
            bindDragNDrop : function (node, handlers) {
                internalHandlers[node.id] = handlers;
                if (!handlers) {
                    delete internalHandlers[node.id];
                }
            }
        };
    }

},{"../WebGL/webglInputEvents.js":57}],37:[function(require,module,exports){
    module.exports = constant;

    var merge = require('ngraph.merge');
    var random = require('ngraph.random').random;
    var Rect = require('../Utils/rect.js');

    /**
 * Does not really perform any layouting algorithm but is compliant
 * with renderer interface. Allowing clients to provide specific positioning
 * callback and get static layout of the graph
 *
 * @param {Viva.Graph.graph} graph to layout
 * @param {Object} userSettings
 */
    function constant(graph, userSettings) {
        userSettings = merge(userSettings, {
            maxX : 1024,
            maxY : 1024,
            seed : 'Deterministic randomness made me do this'
        });
        // This class simply follows API, it does not use some of the arguments:
        /*jshint unused: false */
        var rand = random(userSettings.seed),
            graphRect = new Rect(Number.MAX_VALUE, Number.MAX_VALUE, Number.MIN_VALUE, Number.MIN_VALUE),
            layoutLinks = {},

            placeNodeCallback = function (node) {
                return {
                    x: rand.next(userSettings.maxX),
                    y: rand.next(userSettings.maxY)
                };
            },

            updateGraphRect = function (position, graphRect) {
                if (position.x < graphRect.x1) { graphRect.x1 = position.x; }
                if (position.x > graphRect.x2) { graphRect.x2 = position.x; }
                if (position.y < graphRect.y1) { graphRect.y1 = position.y; }
                if (position.y > graphRect.y2) { graphRect.y2 = position.y; }
            },

            layoutNodes = typeof Object.create === 'function' ? Object.create(null) : {},

            ensureNodeInitialized = function (node) {
                layoutNodes[node.id] = placeNodeCallback(node);
                updateGraphRect(layoutNodes[node.id], graphRect);
            },

            updateNodePositions = function () {
                if (graph.getNodesCount() === 0) { return; }

                graphRect.x1 = Number.MAX_VALUE;
                graphRect.y1 = Number.MAX_VALUE;
                graphRect.x2 = Number.MIN_VALUE;
                graphRect.y2 = Number.MIN_VALUE;

                graph.forEachNode(ensureNodeInitialized);
            },

            ensureLinkInitialized = function (link) {
                layoutLinks[link.id] = link;
            },

            onGraphChanged = function(changes) {
                for (var i = 0; i < changes.length; ++i) {
                    var change = changes[i];
                    if (change.node) {
                        if (change.changeType === 'add') {
                            ensureNodeInitialized(change.node);
                        } else {
                            delete layoutNodes[change.node.id];
                        }
                    } if (change.link) {
                        if (change.changeType === 'add') {
                            ensureLinkInitialized(change.link);
                        } else {
                            delete layoutLinks[change.link.id];
                        }
                    }
                }
            };

        graph.forEachNode(ensureNodeInitialized);
        graph.forEachLink(ensureLinkInitialized);
        graph.on('changed', onGraphChanged);

        return {
        /**
         * Attempts to layout graph within given number of iterations.
         *
         * @param {integer} [iterationsCount] number of algorithm's iterations.
         *  The constant layout ignores this parameter.
         */
            run : function (iterationsCount) {
                this.step();
            },

            /**
         * One step of layout algorithm.
         */
            step : function () {
                updateNodePositions();

                return true; // no need to continue.
            },

            /**
         * Returns rectangle structure {x1, y1, x2, y2}, which represents
         * current space occupied by graph.
         */
            getGraphRect : function () {
                return graphRect;
            },

            /**
         * Request to release all resources
         */
            dispose : function () {
                graph.off('change', onGraphChanged);
            },

            /*
         * Checks whether given node is pinned; all nodes in this layout are pinned.
         */
            isNodePinned: function (node) {
                return true;
            },

            /*
         * Requests layout algorithm to pin/unpin node to its current position
         * Pinned nodes should not be affected by layout algorithm and always
         * remain at their position
         */
            pinNode: function (node, isPinned) {
                // noop
            },

            /*
         * Gets position of a node by its id. If node was not seen by this
         * layout algorithm undefined value is returned;
         */
            getNodePosition: getNodePosition,

            /**
         * Returns {from, to} position of a link.
         */
            getLinkPosition: function (linkId) {
                var link = layoutLinks[linkId];
                return {
                    from : getNodePosition(link.fromId),
                    to : getNodePosition(link.toId)
                };
            },

            /**
         * Sets position of a node to a given coordinates
         */
            setNodePosition: function (nodeId, x, y) {
                var pos = layoutNodes[nodeId];
                if (pos) {
                    pos.x = x;
                    pos.y = y;
                }
            },

            // Layout specific methods:

            /**
         * Based on argument either update default node placement callback or
         * attempts to place given node using current placement callback.
         * Setting new node callback triggers position update for all nodes.
         *
         * @param {Object} newPlaceNodeCallbackOrNode - if it is a function then
         * default node placement callback is replaced with new one. Node placement
         * callback has a form of function (node) {}, and is expected to return an
         * object with x and y properties set to numbers.
         *
         * Otherwise if it's not a function the argument is treated as graph node
         * and current node placement callback will be used to place it.
         */
            placeNode : function (newPlaceNodeCallbackOrNode) {
                if (typeof newPlaceNodeCallbackOrNode === 'function') {
                    placeNodeCallback = newPlaceNodeCallbackOrNode;
                    updateNodePositions();
                    return this;
                }

                // it is not a request to update placeNodeCallback, trying to place
                // a node using current callback:
                return placeNodeCallback(newPlaceNodeCallbackOrNode);
            }

        };

        function getNodePosition(nodeId) {
            return layoutNodes[nodeId];
        }
    }

},{"../Utils/rect.js":45,"ngraph.merge":13,"ngraph.random":26}],38:[function(require,module,exports){
/**
 * This module provides compatibility layer with 0.6.x library. It will be
 * removed in the next version
 */

    var events = require('ngraph.events');

    module.exports = backwardCompatibleEvents;

    function backwardCompatibleEvents(g) {
        console.log("This method is deprecated. Please use Viva.events() instead");

        if (!g) {
            return g;
        }

        var eventsDefined = (g.on !== undefined) ||
    (g.off !== undefined) ||
    (g.fire !== undefined);

        if (eventsDefined) {
            // events already defined, ignore
            return {
                extend: function() {
                    return g;
                },
                on: g.on,
                stop: g.off
            };
        }

        return {
            extend: extend,
            on: g.on,
            stop: g.off
        };

        function extend() {
            var backwardCompatible = events(g);
            backwardCompatible.addEventListener = backwardCompatible.on;
            return backwardCompatible;
        }
    }

},{"ngraph.events":7}],39:[function(require,module,exports){
    module.exports = browserInfo();

    function browserInfo() {
        if (typeof window === "undefined" || !window.hasOwnProperty("navigator")) {
            return {
                browser : "",
                version : "0"
            };
        }

        var ua = window.navigator.userAgent.toLowerCase(),
            // Useragent RegExp
            rwebkit = /(webkit)[ \/]([\w.]+)/,
            ropera = /(opera)(?:.*version)?[ \/]([\w.]+)/,
            rmsie = /(msie) ([\w.]+)/,
            rmozilla = /(mozilla)(?:.*? rv:([\w.]+))?/,
            match = rwebkit.exec(ua) ||
    ropera.exec(ua) ||
    rmsie.exec(ua) ||
    (ua.indexOf("compatible") < 0 && rmozilla.exec(ua)) ||
    [];

        return {
            browser: match[1] || "",
            version: match[2] || "0"
        };
    }

},{}],40:[function(require,module,exports){
    var nullEvents = require('./nullEvents.js');

    module.exports = createDocumentEvents();

    function createDocumentEvents() {
        if (typeof document === undefined) {
            return nullEvents;
        }

        return {
            on: on,
            off: off
        };
    }

    function on(eventName, handler) {
        document.addEventListener(eventName, handler);
    }

    function off(eventName, handler) {
        document.removeEventListener(eventName, handler);
    }

},{"./nullEvents.js":44}],41:[function(require,module,exports){
/**
 * Finds the absolute position of an element on a page
 */
    module.exports = findElementPosition;

    function findElementPosition(obj) {
        var curleft = 0,
            curtop = 0;
        if (obj.offsetParent) {
            do {
                curleft += obj.offsetLeft;
                curtop += obj.offsetTop;
            } while ((obj = obj.offsetParent) !== null);
        }

        return [curleft, curtop];
    }

},{}],42:[function(require,module,exports){
    module.exports = getDimension;

    function getDimension(container) {
        if (!container) {
            throw {
                message : 'Cannot get dimensions of undefined container'
            };
        }

        // TODO: Potential cross browser bug.
        var width = container.clientWidth;
        var height = container.clientHeight;

        return {
            left : 0,
            top : 0,
            width : width,
            height : height
        };
    }

},{}],43:[function(require,module,exports){
    var intersect = require('gintersect');

    module.exports = intersectRect;

    function intersectRect(left, top, right, bottom, x1, y1, x2, y2) {
        return intersect(left, top, left, bottom, x1, y1, x2, y2) ||
    intersect(left, bottom, right, bottom, x1, y1, x2, y2) ||
    intersect(right, bottom, right, top, x1, y1, x2, y2) ||
    intersect(right, top, left, top, x1, y1, x2, y2);
    }

},{"gintersect":3}],44:[function(require,module,exports){
    module.exports = createNullEvents();

    function createNullEvents() {
        return {
            on: noop,
            off: noop,
            stop: noop
        };
    }

    function noop() { }

},{}],45:[function(require,module,exports){
    module.exports = Rect;

    /**
 * Very generic rectangle.
 */
    function Rect (x1, y1, x2, y2) {
        this.x1 = x1 || 0;
        this.y1 = y1 || 0;
        this.x2 = x2 || 0;
        this.y2 = y2 || 0;
    }

},{}],46:[function(require,module,exports){
    (function (global){
        /**
 * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com
 */

        module.exports = createTimer();

        function createTimer() {
            var lastTime = 0,
                vendors = ['ms', 'moz', 'webkit', 'o'],
                i,
                scope;

            if (typeof window !== 'undefined') {
                scope = window;
            } else if (typeof global !== 'undefined') {
                scope = global;
            } else {
                scope = {
                    setTimeout: noop,
                    clearTimeout: noop
                };
            }

            for (i = 0; i < vendors.length && !scope.requestAnimationFrame; ++i) {
                var vendorPrefix = vendors[i];
                scope.requestAnimationFrame = scope[vendorPrefix + 'RequestAnimationFrame'];
                scope.cancelAnimationFrame =
      scope[vendorPrefix + 'CancelAnimationFrame'] || scope[vendorPrefix + 'CancelRequestAnimationFrame'];
            }

            if (!scope.requestAnimationFrame) {
                scope.requestAnimationFrame = rafPolyfill;
            }

            if (!scope.cancelAnimationFrame) {
                scope.cancelAnimationFrame = cancelRafPolyfill;
            }

            return timer;

            /**
   * Timer that fires callback with given interval (in ms) until
   * callback returns true;
   */
            function timer(callback) {
                var intervalId;
                startTimer(); // start it right away.

                return {
                    /**
       * Stops execution of the callback
       */
                    stop: stopTimer,

                    restart: restart
                };

                function startTimer() {
                    intervalId = scope.requestAnimationFrame(startTimer);
                    if (!callback()) {
                        stopTimer();
                    }
                }

                function stopTimer() {
                    scope.cancelAnimationFrame(intervalId);
                    intervalId = 0;
                }

                function restart() {
                    if (!intervalId) {
                        startTimer();
                    }
                }
            }

            function rafPolyfill(callback) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = scope.setTimeout(function() {
                    callback(currTime + timeToCall);
                }, timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            }

            function cancelRafPolyfill(id) {
                scope.clearTimeout(id);
            }
        }

        function noop() {}

    }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],47:[function(require,module,exports){
    var nullEvents = require('./nullEvents.js');

    module.exports = createDocumentEvents();

    function createDocumentEvents() {
        if (typeof window === 'undefined') {
            return nullEvents;
        }

        return {
            on: on,
            off: off
        };
    }

    function on(eventName, handler) {
        window.addEventListener(eventName, handler);
    }

    function off(eventName, handler) {
        window.removeEventListener(eventName, handler);
    }

},{"./nullEvents.js":44}],48:[function(require,module,exports){
/**
 * @fileOverview Defines a graph renderer that uses CSS based drawings.
 *
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */

    module.exports = renderer;

    var eventify = require('ngraph.events');
    var forceDirected = require('ngraph.forcelayout');
    var svgGraphics = require('./svgGraphics.js');
    var windowEvents = require('../Utils/windowEvents.js');
    var domInputManager = require('../Input/domInputManager.js');
    var timer = require('../Utils/timer.js');
    var getDimension = require('../Utils/getDimensions.js');
    var dragndrop = require('../Input/dragndrop.js');

    /**
 * This is heart of the rendering. Class accepts graph to be rendered and rendering settings.
 * It monitors graph changes and depicts them accordingly.
 *
 * @param graph - Viva.Graph.graph() object to be rendered.
 * @param settings - rendering settings, composed from the following parts (with their defaults shown):
 *   settings = {
 *     // Represents a module that is capable of displaying graph nodes and links.
 *     // all graphics has to correspond to defined interface and can be later easily
 *     // replaced for specific needs (e.g. adding WebGL should be piece of cake as long
 *     // as WebGL has implemented required interface). See svgGraphics for example.
 *     graphics : Viva.Graph.View.svgGraphics(),
 *
 *     // Where the renderer should draw graph. Container size matters, because
 *     // renderer will attempt center graph to that size. Also graphics modules
 *     // might depend on it.
 *     container : document.body,
 *
 *     // Defines whether graph can respond to use input
 *     interactive: true,
 *
 *     // Layout algorithm to be used. The algorithm is expected to comply with defined
 *     // interface and is expected to be iterative. Renderer will use it then to calculate
 *     // grpaph's layout. For examples of the interface refer to Viva.Graph.Layout.forceDirected()
 *     layout : Viva.Graph.Layout.forceDirected(),
 *
 *     // Directs renderer to display links. Usually rendering links is the slowest part of this
 *     // library. So if you don't need to display links, consider settings this property to false.
 *     renderLinks : true,
 *
 *     // Number of layout iterations to run before displaying the graph. The bigger you set this number
 *     // the closer to ideal position graph will appear first time. But be careful: for large graphs
 *     // it can freeze the browser.
 *     prerender : 0
 *   }
 */
    function renderer(graph, settings) {
        // TODO: This class is getting hard to understand. Consider refactoring.
        // TODO: I have a technical debt here: fix scaling/recentering! Currently it's a total mess.
        var FRAME_INTERVAL = 30;

        settings = settings || {};

        var layout = settings.layout,
            graphics = settings.graphics,
            container = settings.container,
            interactive = settings.interactive !== undefined ? settings.interactive : true,
            inputManager,
            animationTimer,
            rendererInitialized = false,
            updateCenterRequired = true,

            currentStep = 0,
            totalIterationsCount = 0,
            isStable = false,
            userInteraction = false,
            isPaused = false,

            transform = {
                offsetX: 0,
                offsetY: 0,
                scale: 1
            },

            publicEvents = eventify({}),
            containerDrag;

        return {
            /**
     * Performs rendering of the graph.
     *
     * @param iterationsCount if specified renderer will run only given number of iterations
     * and then stop. Otherwise graph rendering is performed infinitely.
     *
     * Note: if rendering stopped by used started dragging nodes or new nodes were added to the
     * graph renderer will give run more iterations to reflect changes.
     */
            run: function(iterationsCount) {

                if (!rendererInitialized) {
                    prepareSettings();
                    prerender();

                    initDom();
                    updateCenter();
                    listenToEvents();

                    rendererInitialized = true;
                }

                renderIterations(iterationsCount);

                return this;
            },

            reset: function() {
                graphics.resetScale();
                updateCenter();
                transform.scale = 1;
            },

            pause: function() {
                isPaused = true;
                animationTimer.stop();
            },

            resume: function() {
                isPaused = false;
                animationTimer.restart();
            },

            rerender: function() {
                renderGraph();
                return this;
            },

            zoomOut: function() {
                return scale(true);
            },

            zoomIn: function() {
                return scale(false);
            },

            /**
     * Centers renderer at x,y graph's coordinates
     */
            moveTo: function(x, y) {
                graphics.graphCenterChanged(transform.offsetX - x * transform.scale, transform.offsetY - y * transform.scale);
                renderGraph();
            },

            /**
     * Gets current graphics object
     */
            getGraphics: function() {
                return graphics;
            },

            /**
     * Removes this renderer and deallocates all resources/timers
     */
            dispose: function() {
                stopListenToEvents(); // I quit!
            },

            on: function(eventName, callback) {
                publicEvents.on(eventName, callback);
                return this;
            },

            off: function(eventName, callback) {
                publicEvents.off(eventName, callback);
                return this;
            }
        };

        /**
   * Checks whether given interaction (node/scroll) is enabled
   */
        function isInteractive(interactionName) {
            if (typeof interactive === 'string') {
                return interactive.indexOf(interactionName) >= 0;
            } else if (typeof interactive === 'boolean') {
                return interactive;
            }
            return true; // default setting
        }

        function prepareSettings() {
            container = container || window.document.body;
            layout = layout || forceDirected(graph, {
                springLength: 80,
                springCoeff: 0.0002,
            });
            graphics = graphics || svgGraphics(graph, {
                container: container
            });

            if (!settings.hasOwnProperty('renderLinks')) {
                settings.renderLinks = true;
            }

            settings.prerender = settings.prerender || 0;
            inputManager = (graphics.inputManager || domInputManager)(graph, graphics);
        }

        function renderGraph() {
            graphics.beginRender();

            // todo: move this check graphics
            if (settings.renderLinks) {
                graphics.renderLinks();
            }
            graphics.renderNodes();
            graphics.endRender();
        }

        function onRenderFrame() {
            isStable = layout.step() && !userInteraction;
            renderGraph();

            return !isStable;
        }

        function renderIterations(iterationsCount) {
            if (animationTimer) {
                totalIterationsCount += iterationsCount;
                return;
            }

            if (iterationsCount) {
                totalIterationsCount += iterationsCount;

                animationTimer = timer(function() {
                    return onRenderFrame();
                }, FRAME_INTERVAL);
            } else {
                currentStep = 0;
                totalIterationsCount = 0;
                animationTimer = timer(onRenderFrame, FRAME_INTERVAL);
            }
        }

        function resetStable() {
            if (isPaused) {
                return;
            }

            isStable = false;
            animationTimer.restart();
        }

        function prerender() {
            // To get good initial positions for the graph
            // perform several prerender steps in background.
            if (typeof settings.prerender === 'number' && settings.prerender > 0) {
                for (var i = 0; i < settings.prerender; i += 1) {
                    layout.step();
                }
            }
        }

        function updateCenter() {
            var graphRect = layout.getGraphRect(),
                containerSize = getDimension(container);

            var cx = (graphRect.x2 + graphRect.x1) / 2;
            var cy = (graphRect.y2 + graphRect.y1) / 2;
            transform.offsetX = containerSize.width / 2 - (cx * transform.scale - cx);
            transform.offsetY = containerSize.height / 2 - (cy * transform.scale - cy);
            graphics.graphCenterChanged(transform.offsetX, transform.offsetY);

            updateCenterRequired = false;
        }

        function createNodeUi(node) {
            var nodePosition = layout.getNodePosition(node.id);
            graphics.addNode(node, nodePosition);
        }

        function removeNodeUi(node) {
            graphics.releaseNode(node);
        }

        function createLinkUi(link) {
            var linkPosition = layout.getLinkPosition(link.id);
            graphics.addLink(link, linkPosition);
        }

        function removeLinkUi(link) {
            graphics.releaseLink(link);
        }

        function listenNodeEvents(node) {
            if (!isInteractive('node')) {
                return;
            }

            var wasPinned = false;

            // TODO: This may not be memory efficient. Consider reusing handlers object.
            inputManager.bindDragNDrop(node, {
                onStart: function() {
                    wasPinned = layout.isNodePinned(node);
                    layout.pinNode(node, true);
                    userInteraction = true;
                    resetStable();
                },
                onDrag: function(e, offset) {
                    var oldPos = layout.getNodePosition(node.id);
                    layout.setNodePosition(node.id,
                        oldPos.x + offset.x / transform.scale,
                        oldPos.y + offset.y / transform.scale);

                    userInteraction = true;

                    renderGraph();
                },
                onStop: function() {
                    layout.pinNode(node, wasPinned);
                    userInteraction = false;
                }
            });
        }

        function releaseNodeEvents(node) {
            inputManager.bindDragNDrop(node, null);
        }

        function initDom() {
            graphics.init(container);

            graph.forEachNode(createNodeUi);

            if (settings.renderLinks) {
                graph.forEachLink(createLinkUi);
            }
        }

        function releaseDom() {
            graphics.release(container);
        }

        function processNodeChange(change) {
            var node = change.node;

            if (change.changeType === 'add') {
                createNodeUi(node);
                listenNodeEvents(node);
                if (updateCenterRequired) {
                    updateCenter();
                }
            } else if (change.changeType === 'remove') {
                releaseNodeEvents(node);
                removeNodeUi(node);
                if (graph.getNodesCount() === 0) {
                    updateCenterRequired = true; // Next time when node is added - center the graph.
                }
            } else if (change.changeType === 'update') {
                releaseNodeEvents(node);
                removeNodeUi(node);

                createNodeUi(node);
                listenNodeEvents(node);
            }
        }

        function processLinkChange(change) {
            var link = change.link;
            if (change.changeType === 'add') {
                if (settings.renderLinks) {
                    createLinkUi(link);
                }
            } else if (change.changeType === 'remove') {
                if (settings.renderLinks) {
                    removeLinkUi(link);
                }
            } else if (change.changeType === 'update') {
                throw 'Update type is not implemented. TODO: Implement me!';
            }
        }

        function onGraphChanged(changes) {
            var i, change;
            for (i = 0; i < changes.length; i += 1) {
                change = changes[i];
                if (change.node) {
                    processNodeChange(change);
                } else if (change.link) {
                    processLinkChange(change);
                }
            }

            resetStable();
        }

        function onWindowResized() {
            updateCenter();
            onRenderFrame();
        }

        function releaseContainerDragManager() {
            if (containerDrag) {
                containerDrag.release();
                containerDrag = null;
            }
        }

        function releaseGraphEvents() {
            graph.off('changed', onGraphChanged);
        }

        function scale(out, scrollPoint) {
            if (!scrollPoint) {
                var containerSize = getDimension(container);
                scrollPoint = {
                    x: containerSize.width / 2,
                    y: containerSize.height / 2
                };
            }
            var scaleFactor = Math.pow(1 + 0.4, out ? -0.2 : 0.2);
            transform.scale = graphics.scale(scaleFactor, scrollPoint);

            renderGraph();
            publicEvents.fire('scale', transform.scale);

            return transform.scale;
        }

        function listenToEvents() {
            windowEvents.on('resize', onWindowResized);

            releaseContainerDragManager();
            if (isInteractive('drag')) {
                containerDrag = dragndrop(container);
                containerDrag.onDrag(function(e, offset) {
                    graphics.translateRel(offset.x, offset.y);

                    renderGraph();
                    publicEvents.fire('drag', offset);
                });
            }

            if (isInteractive('scroll')) {
                if (!containerDrag) {
                    containerDrag = dragndrop(container);
                }
                containerDrag.onScroll(function(e, scaleOffset, scrollPoint) {
                    scale(scaleOffset < 0, scrollPoint);
                });
            }

            graph.forEachNode(listenNodeEvents);

            releaseGraphEvents();
            graph.on('changed', onGraphChanged);
        }

        function stopListenToEvents() {
            rendererInitialized = false;
            releaseGraphEvents();
            releaseContainerDragManager();
            windowEvents.off('resize', onWindowResized);
            publicEvents.off();
            animationTimer.stop();

            graph.forEachLink(function(link) {
                if (settings.renderLinks) {
                    removeLinkUi(link);
                }
            });

            graph.forEachNode(function(node) {
                releaseNodeEvents(node);
                removeNodeUi(node);
            });

            layout.dispose();
            releaseDom();
        }
    }

},{"../Input/domInputManager.js":34,"../Input/dragndrop.js":35,"../Utils/getDimensions.js":42,"../Utils/timer.js":46,"../Utils/windowEvents.js":47,"./svgGraphics.js":49,"ngraph.events":7,"ngraph.forcelayout":9}],49:[function(require,module,exports){
/**
 * @fileOverview Defines a graph renderer that uses SVG based drawings.
 *
 * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com
 */

    module.exports = svgGraphics;

    var svg = require('simplesvg');
    var eventify = require('ngraph.events');
    var domInputManager = require('../Input/domInputManager.js');

    /**
 * Performs svg-based graph rendering. This module does not perform
 * layout, but only visualizes nodes and edges of the graph.
 */
    function svgGraphics() {
        var svgContainer,
            svgRoot,
            offsetX = 0,
            offsetY = 0,
            initCallback,
            actualScale = 1,
            allNodes = {},
            allLinks = {},
            /*jshint unused: false */
            nodeBuilder = function (node) {
                return svg("rect")
                    .attr("width", 10)
                    .attr("height", 10)
                    .attr("fill", "#00a2e8");
            },

            nodePositionCallback = function (nodeUI, pos) {
            // TODO: Remove magic 5. It should be half of the width or height of the node.
                nodeUI.attr("x", pos.x - 5)
                    .attr("y", pos.y - 5);
            },

            linkBuilder = function (link) {
                return svg("line").attr("stroke", "#999");
            },

            linkPositionCallback = function (linkUI, fromPos, toPos) {
                linkUI.attr("x1", fromPos.x)
                    .attr("y1", fromPos.y)
                    .attr("x2", toPos.x)
                    .attr("y2", toPos.y);
            },

            fireRescaled = function (graphics) {
            // TODO: maybe we shall copy changes?
                graphics.fire("rescaled");
            },

            cachedPos = {x : 0, y: 0},
            cachedFromPos = {x : 0, y: 0},
            cachedToPos = {x : 0, y: 0},

            updateTransform = function () {
                if (svgContainer) {
                    var transform = "matrix(" + actualScale + ", 0, 0," + actualScale + "," + offsetX + "," + offsetY + ")";
                    svgContainer.attr("transform", transform);
                }
            };

        svgRoot = createSvgRoot();

        var graphics = {
            getNodeUI: function (nodeId) {
                return allNodes[nodeId];
            },

            getLinkUI: function (linkId) {
                return allLinks[linkId];
            },

            /**
         * Sets the callback that creates node representation.
         *
         * @param builderCallback a callback function that accepts graph node
         * as a parameter and must return an element representing this node.
         *
         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;
         * Otherwise undefined value is returned
         */
            node : function (builderCallback) {
                if (typeof builderCallback !== "function") {
                    return; // todo: throw? This is not compatible with old versions
                }

                nodeBuilder = builderCallback;

                return this;
            },

            /**
         * Sets the callback that creates link representation
         *
         * @param builderCallback a callback function that accepts graph link
         * as a parameter and must return an element representing this link.
         *
         * @returns If builderCallback is a valid callback function, instance of this is returned;
         * Otherwise undefined value is returned.
         */
            link : function (builderCallback) {
                if (typeof builderCallback !== "function") {
                    return; // todo: throw? This is not compatible with old versions
                }

                linkBuilder = builderCallback;
                return this;
            },

            /**
         * Allows to override default position setter for the node with a new
         * function. newPlaceCallback(nodeUI, position, node) is function which
         * is used by updateNodePosition().
         */
            placeNode : function (newPlaceCallback) {
                nodePositionCallback = newPlaceCallback;
                return this;
            },

            placeLink : function (newPlaceLinkCallback) {
                linkPositionCallback = newPlaceLinkCallback;
                return this;
            },

            /**
         * Called every before renderer starts rendering.
         */
            beginRender : function () {},

            /**
         * Called every time when renderer finishes one step of rendering.
         */
            endRender : function () {},

            /**
         * Sets translate operation that should be applied to all nodes and links.
         */
            graphCenterChanged : function (x, y) {
                offsetX = x;
                offsetY = y;
                updateTransform();
            },

            /**
         * Default input manager listens to DOM events to process nodes drag-n-drop
         */
            inputManager : domInputManager,

            translateRel : function (dx, dy) {
                var p = svgRoot.createSVGPoint(),
                    t = svgContainer.getCTM(),
                    origin = svgRoot.createSVGPoint().matrixTransform(t.inverse());

                p.x = dx;
                p.y = dy;

                p = p.matrixTransform(t.inverse());
                p.x = (p.x - origin.x) * t.a;
                p.y = (p.y - origin.y) * t.d;

                t.e += p.x;
                t.f += p.y;

                var transform = "matrix(" + t.a + ", 0, 0," + t.d + "," + t.e + "," + t.f + ")";
                svgContainer.attr("transform", transform);
            },

            scale : function (scaleFactor, scrollPoint) {
                var p = svgRoot.createSVGPoint();
                p.x = scrollPoint.x;
                p.y = scrollPoint.y;

                p = p.matrixTransform(svgContainer.getCTM().inverse()); // translate to SVG coordinates

                // Compute new scale matrix in current mouse position
                var k = svgRoot.createSVGMatrix().translate(p.x, p.y).scale(scaleFactor).translate(-p.x, -p.y),
                    t = svgContainer.getCTM().multiply(k);

                actualScale = t.a;
                offsetX = t.e;
                offsetY = t.f;
                var transform = "matrix(" + t.a + ", 0, 0," + t.d + "," + t.e + "," + t.f + ")";
                svgContainer.attr("transform", transform);

                fireRescaled(this);
                return actualScale;
            },

            resetScale : function () {
                actualScale = 1;
                var transform = "matrix(1, 0, 0, 1, 0, 0)";
                svgContainer.attr("transform", transform);
                fireRescaled(this);
                return this;
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider prepare to render.
        */
            init : function (container) {
                container.appendChild(svgRoot);
                updateTransform();
                // Notify the world if someone waited for update. TODO: should send an event
                if (typeof initCallback === "function") {
                    initCallback(svgRoot);
                }
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider release occupied resources.
        */
            release : function (container) {
                if (svgRoot && container) {
                    container.removeChild(svgRoot);
                }
            },

            /**
         * Called by Viva.Graph.View.renderer to let concrete graphic output
         * provider prepare to render given link of the graph
         *
         * @param link - model of a link
         */
            addLink: function (link, pos) {
                var linkUI = linkBuilder(link);
                if (!linkUI) { return; }
                linkUI.position = pos;
                linkUI.link = link;
                allLinks[link.id] = linkUI;
                if (svgContainer.childElementCount > 0) {
                    svgContainer.insertBefore(linkUI, svgContainer.firstChild);
                } else {
                    svgContainer.appendChild(linkUI);
                }
                return linkUI;
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider remove link from rendering surface.
        *
        * @param linkUI visual representation of the link created by link() execution.
        **/
            releaseLink : function (link) {
                var linkUI = allLinks[link.id];
                if (linkUI) {
                    svgContainer.removeChild(linkUI);
                    delete allLinks[link.id];
                }
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider prepare to render given node of the graph.
        *
        * @param nodeUI visual representation of the node created by node() execution.
        **/
            addNode : function (node, pos) {
                var nodeUI = nodeBuilder(node);
                if (!nodeUI) {
                    return;
                }
                nodeUI.position = pos;
                nodeUI.node = node;
                allNodes[node.id] = nodeUI;

                svgContainer.appendChild(nodeUI);

                return nodeUI;
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider remove node from rendering surface.
        *
        * @param node graph's node
        **/
            releaseNode : function (node) {
                var nodeUI = allNodes[node.id];
                if (nodeUI) {
                    svgContainer.removeChild(nodeUI);
                    delete allNodes[node.id];
                }
            },

            renderNodes : function () {
                for (var key in allNodes) {
                    if (allNodes.hasOwnProperty(key)) {
                        var nodeUI = allNodes[key];
                        cachedPos.x = nodeUI.position.x;
                        cachedPos.y = nodeUI.position.y;
                        nodePositionCallback(nodeUI, cachedPos, nodeUI.node);
                    }
                }
            },

            renderLinks : function () {
                for (var key in allLinks) {
                    if (allLinks.hasOwnProperty(key)) {
                        var linkUI = allLinks[key];
                        cachedFromPos.x = linkUI.position.from.x;
                        cachedFromPos.y = linkUI.position.from.y;
                        cachedToPos.x = linkUI.position.to.x;
                        cachedToPos.y = linkUI.position.to.y;
                        linkPositionCallback(linkUI, cachedFromPos, cachedToPos, linkUI.link);
                    }
                }
            },

            /**
         * Returns root element which hosts graphics.
         */
            getGraphicsRoot : function (callbackWhenReady) {
            // todo: should fire an event, instead of having this context.
                if (typeof callbackWhenReady === "function") {
                    if (svgRoot) {
                        callbackWhenReady(svgRoot);
                    } else {
                        initCallback = callbackWhenReady;
                    }
                }
                return svgRoot;
            },
            /**
         * Returns root SVG element.
         *
         * Note: This is internal method specific to this renderer
         */
            getSvgRoot : function () {
                return svgRoot;
            }
        };

        // Let graphics fire events before we return it to the caller.
        eventify(graphics);

        return graphics;

        function createSvgRoot() {
            var svgRoot = svg("svg");

            svgContainer = svg("g")
                .attr("buffered-rendering", "dynamic");

            svgRoot.appendChild(svgContainer);
            return svgRoot;
        }
    }

},{"../Input/domInputManager.js":34,"ngraph.events":7,"simplesvg":28}],50:[function(require,module,exports){
/**
 * @fileOverview Defines a graph renderer that uses WebGL based drawings.
 *
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */

    module.exports = webglGraphics;

    var webglInputManager = require('../Input/webglInputManager.js');
    var webglLinkProgram = require('../WebGL/webglLinkProgram.js');
    var webglNodeProgram = require('../WebGL/webglNodeProgram.js');
    var webglSquare = require('../WebGL/webglSquare.js');
    var webglLine = require('../WebGL/webglLine.js');
    var eventify = require('ngraph.events');
    var merge = require('ngraph.merge');

    /**
 * Performs webgl-based graph rendering. This module does not perform
 * layout, but only visualizes nodes and edges of the graph.
 *
 * @param options - to customize graphics  behavior. Currently supported parameter
 *  enableBlending - true by default, allows to use transparency in node/links colors.
 *  preserveDrawingBuffer - false by default, tells webgl to preserve drawing buffer.
 *                    See https://www.khronos.org/registry/webgl/specs/1.0/#5.2
 */

    function webglGraphics(options) {
        options = merge(options, {
            enableBlending : true,
            preserveDrawingBuffer : false,
            clearColor: false,
            clearColorValue : {
                r : 1,
                g : 1,
                b : 1,
                a : 1
            }
        });

        var container,
            graphicsRoot,
            gl,
            width,
            height,
            nodesCount = 0,
            linksCount = 0,
            transform = [
                1, 0, 0, 0,
                0, 1, 0, 0,
                0, 0, 1, 0,
                0, 0, 0, 1
            ],
            userPlaceNodeCallback,
            userPlaceLinkCallback,
            nodes = [],
            links = [],
            initCallback,

            allNodes = {},
            allLinks = {},
            linkProgram = webglLinkProgram(),
            nodeProgram = webglNodeProgram(),
            /*jshint unused: false */
            nodeUIBuilder = function (node) {
                return webglSquare(); // Just make a square, using provided gl context (a nodeProgram);
            },

            linkUIBuilder = function (link) {
                return webglLine(0xb3b3b3ff);
            },
            /*jshint unused: true */
            updateTransformUniform = function () {
                linkProgram.updateTransform(transform);
                nodeProgram.updateTransform(transform);
            },

            resetScaleInternal = function () {
                transform = [1, 0, 0, 0,
                    0, 1, 0, 0,
                    0, 0, 1, 0,
                    0, 0, 0, 1];
            },

            updateSize = function () {
                if (container && graphicsRoot) {
                    width = graphicsRoot.width = Math.max(container.offsetWidth, 1);
                    height = graphicsRoot.height = Math.max(container.offsetHeight, 1);
                    if (gl) { gl.viewport(0, 0, width, height); }
                    if (linkProgram) { linkProgram.updateSize(width / 2, height / 2); }
                    if (nodeProgram) { nodeProgram.updateSize(width / 2, height / 2); }
                }
            },

            fireRescaled = function (graphics) {
                graphics.fire("rescaled");
            };

        graphicsRoot = window.document.createElement("canvas");

        var graphics = {
            getLinkUI: function (linkId) {
                return allLinks[linkId];
            },

            getNodeUI: function (nodeId) {
                return allNodes[nodeId];
            },

            /**
         * Sets the callback that creates node representation.
         *
         * @param builderCallback a callback function that accepts graph node
         * as a parameter and must return an element representing this node.
         *
         * @returns If builderCallbackOrNode is a valid callback function, instance of this is returned;
         * Otherwise undefined value is returned
         */
            node : function (builderCallback) {
                if (typeof builderCallback !== "function") {
                    return; // todo: throw? This is not compatible with old versions
                }

                nodeUIBuilder = builderCallback;

                return this;
            },

            /**
         * Sets the callback that creates link representation
         *
         * @param builderCallback a callback function that accepts graph link
         * as a parameter and must return an element representing this link.
         *
         * @returns If builderCallback is a valid callback function, instance of this is returned;
         * Otherwise undefined value is returned.
         */
            link : function (builderCallback) {
                if (typeof builderCallback !== "function") {
                    return; // todo: throw? This is not compatible with old versions
                }

                linkUIBuilder = builderCallback;
                return this;
            },

            /**
         * Allows to override default position setter for the node with a new
         * function. newPlaceCallback(nodeUI, position) is function which
         * is used by updateNodePosition().
         */
            placeNode : function (newPlaceCallback) {
                userPlaceNodeCallback = newPlaceCallback;
                return this;
            },

            placeLink : function (newPlaceLinkCallback) {
                userPlaceLinkCallback = newPlaceLinkCallback;
                return this;
            },

            /**
         * Custom input manager listens to mouse events to process nodes drag-n-drop inside WebGL canvas
         */
            inputManager : webglInputManager,

            /**
         * Called every time before renderer starts rendering.
         */
            beginRender : function () {
            // this function could be replaced by this.init,
            // based on user options.
            },

            /**
         * Called every time when renderer finishes one step of rendering.
         */
            endRender : function () {
                if (linksCount > 0) {
                    linkProgram.render();
                }
                if (nodesCount > 0) {
                    nodeProgram.render();
                }
            },

            bringLinkToFront : function (linkUI) {
                var frontLinkId = linkProgram.getFrontLinkId(),
                    srcLinkId,
                    temp;

                linkProgram.bringToFront(linkUI);

                if (frontLinkId > linkUI.id) {
                    srcLinkId = linkUI.id;

                    temp = links[frontLinkId];
                    links[frontLinkId] = links[srcLinkId];
                    links[frontLinkId].id = frontLinkId;
                    links[srcLinkId] = temp;
                    links[srcLinkId].id = srcLinkId;
                }
            },

            /**
         * Sets translate operation that should be applied to all nodes and links.
         */
            graphCenterChanged : function (x, y) {
                transform[12] = (2 * x / width) - 1;
                transform[13] = 1 - (2 * y / height);
                updateTransformUniform();
            },

            /**
         * Called by Viva.Graph.View.renderer to let concrete graphic output
         * provider prepare to render given link of the graph
         *
         * @param link - model of a link
         */
            addLink: function (link, boundPosition) {
                var uiid = linksCount++,
                    ui = linkUIBuilder(link);
                ui.id = uiid;
                ui.pos = boundPosition;

                linkProgram.createLink(ui);

                links[uiid] = ui;
                allLinks[link.id] = ui;
                return ui;
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider prepare to render given node of the graph.
        *
        * @param nodeUI visual representation of the node created by node() execution.
        **/
            addNode : function (node, boundPosition) {
                var uiid = nodesCount++,
                    ui = nodeUIBuilder(node);

                ui.id = uiid;
                ui.position = boundPosition;
                ui.node = node;

                nodeProgram.createNode(ui);

                nodes[uiid] = ui;
                allNodes[node.id] = ui;
                return ui;
            },

            translateRel : function (dx, dy) {
                transform[12] += (2 * transform[0] * dx / width) / transform[0];
                transform[13] -= (2 * transform[5] * dy / height) / transform[5];
                updateTransformUniform();
            },

            scale : function (scaleFactor, scrollPoint) {
            // Transform scroll point to clip-space coordinates:
                var cx = 2 * scrollPoint.x / width - 1,
                    cy = 1 - (2 * scrollPoint.y) / height;

                cx -= transform[12];
                cy -= transform[13];

                transform[12] += cx * (1 - scaleFactor);
                transform[13] += cy * (1 - scaleFactor);

                transform[0] *= scaleFactor;
                transform[5] *= scaleFactor;

                updateTransformUniform();
                fireRescaled(this);

                return transform[0];
            },

            resetScale : function () {
                resetScaleInternal();

                if (gl) {
                    updateSize();
                    // TODO: what is this?
                    // gl.useProgram(linksProgram);
                    // gl.uniform2f(linksProgram.screenSize, width, height);
                    updateTransformUniform();
                }
                return this;
            },

            /**
        * Resizes the graphic without resetting the scale.
        * Useful with viva graph in a dynamic container
        */
            updateSize: updateSize,

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider prepare to render.
        */
            init : function (c) {
                var contextParameters = {};

                if (options.preserveDrawingBuffer) {
                    contextParameters.preserveDrawingBuffer = true;
                }

                container = c;

                updateSize();
                resetScaleInternal();
                container.appendChild(graphicsRoot);

                gl = graphicsRoot.getContext("experimental-webgl", contextParameters);
                if (!gl) {
                    var msg = "Could not initialize WebGL. Seems like the browser doesn't support it.";
                    window.alert(msg);
                    throw msg;
                }
                if (options.enableBlending) {
                    gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);
                    gl.enable(gl.BLEND);
                }
                if (options.clearColor) {
                    var color = options.clearColorValue;
                    gl.clearColor(color.r, color.g, color.b, color.a);
                    // TODO: not the best way, really. Should come up with something better
                    // what if we need more updates inside beginRender, like depth buffer?
                    this.beginRender = function () {
                        gl.clear(gl.COLOR_BUFFER_BIT);
                    };
                }

                linkProgram.load(gl);
                linkProgram.updateSize(width / 2, height / 2);

                nodeProgram.load(gl);
                nodeProgram.updateSize(width / 2, height / 2);

                updateTransformUniform();

                // Notify the world if someone waited for update. TODO: should send an event
                if (typeof initCallback === "function") {
                    initCallback(graphicsRoot);
                }
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider release occupied resources.
        */
            release : function (container) {
                if (graphicsRoot && container) {
                    container.removeChild(graphicsRoot);
                // TODO: anything else?
                }
            },

            /**
        * Checks whether webgl is supported by this browser.
        */
            isSupported : function () {
                var c = window.document.createElement("canvas"),
                    gl = c && c.getContext && c.getContext("experimental-webgl");
                return gl;
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider remove link from rendering surface.
        *
        * @param linkUI visual representation of the link created by link() execution.
        **/
            releaseLink : function (link) {
                if (linksCount > 0) { linksCount -= 1; }
                var linkUI = allLinks[link.id];
                delete allLinks[link.id];

                linkProgram.removeLink(linkUI);

                var linkIdToRemove = linkUI.id;
                if (linkIdToRemove < linksCount) {
                    if (linksCount === 0 || linksCount === linkIdToRemove) {
                        return; // no more links or removed link is the last one.
                    }

                    var lastLinkUI = links[linksCount];
                    links[linkIdToRemove] = lastLinkUI;
                    lastLinkUI.id = linkIdToRemove;
                }
            },

            /**
        * Called by Viva.Graph.View.renderer to let concrete graphic output
        * provider remove node from rendering surface.
        *
        * @param nodeUI visual representation of the node created by node() execution.
        **/
            releaseNode : function (node) {
                if (nodesCount > 0) { nodesCount -= 1; }
                var nodeUI = allNodes[node.id];
                delete allNodes[node.id];

                nodeProgram.removeNode(nodeUI);

                var nodeIdToRemove = nodeUI.id;
                if (nodeIdToRemove < nodesCount) {
                    if (nodesCount === 0 || nodesCount === nodeIdToRemove) {
                        return; // no more nodes or removed node is the last in the list.
                    }

                    var lastNodeUI = nodes[nodesCount];

                    nodes[nodeIdToRemove] = lastNodeUI;
                    lastNodeUI.id = nodeIdToRemove;

                    // Since concrete shaders may cache properties in the UI element
                    // we are letting them to make this swap (e.g. image node shader
                    // uses this approach to update node's offset in the atlas)
                    nodeProgram.replaceProperties(nodeUI, lastNodeUI);
                }
            },

            renderNodes: function () {
                var pos = {x : 0, y : 0};
                // WebGL coordinate system is different. Would be better
                // to have this transform in the shader code, but it would
                // require every shader to be updated..
                for (var i = 0; i < nodesCount; ++i) {
                    var ui = nodes[i];
                    pos.x = ui.position.x;
                    pos.y = ui.position.y;
                    if (userPlaceNodeCallback) {
                        userPlaceNodeCallback(ui, pos);
                    }

                    nodeProgram.position(ui, pos);
                }
            },

            renderLinks: function () {
                if (this.omitLinksRendering) { return; }

                var toPos = {x : 0, y : 0};
                var fromPos = {x : 0, y : 0};
                for (var i = 0; i < linksCount; ++i) {
                    var ui = links[i];
                    var pos = ui.pos.from;
                    fromPos.x = pos.x;
                    fromPos.y = -pos.y;
                    pos = ui.pos.to;
                    toPos.x = pos.x;
                    toPos.y = -pos.y;
                    if (userPlaceLinkCallback) {
                        userPlaceLinkCallback(ui, fromPos, toPos);
                    }

                    linkProgram.position(ui, fromPos, toPos);
                }
            },

            /**
         * Returns root element which hosts graphics.
         */
            getGraphicsRoot : function (callbackWhenReady) {
            // todo: should fire an event, instead of having this context.
                if (typeof callbackWhenReady === "function") {
                    if (graphicsRoot) {
                        callbackWhenReady(graphicsRoot);
                    } else {
                        initCallback = callbackWhenReady;
                    }
                }
                return graphicsRoot;
            },

            /**
         * Updates default shader which renders nodes
         *
         * @param newProgram to use for nodes.
         */
            setNodeProgram : function (newProgram) {
                if (!gl && newProgram) {
                // Nothing created yet. Just set shader to the new one
                // and let initialization logic take care about the rest.
                    nodeProgram = newProgram;
                } else if (newProgram) {
                    throw "Not implemented. Cannot swap shader on the fly... Yet.";
                // TODO: unload old shader and reinit.
                }
            },

            /**
         * Updates default shader which renders links
         *
         * @param newProgram to use for links.
         */
            setLinkProgram : function (newProgram) {
                if (!gl && newProgram) {
                // Nothing created yet. Just set shader to the new one
                // and let initialization logic take care about the rest.
                    linkProgram = newProgram;
                } else if (newProgram) {
                    throw "Not implemented. Cannot swap shader on the fly... Yet.";
                // TODO: unload old shader and reinit.
                }
            },

            /**
         * Transforms client coordinates into layout coordinates. Client coordinates
         * are DOM coordinates relative to the rendering container. Layout
         * coordinates are those assigned by by layout algorithm to each node.
         *
         * @param {Object} p - a point object with `x` and `y` attributes.
         * This method mutates p.
         */
            transformClientToGraphCoordinates: function (p) {
                // TODO: could be a problem when container has margins?
            // normalize
                p.x = ((2 * p.x) / width) - 1;
                p.y = 1 - ((2 * p.y) / height);

                // apply transform
                p.x = (p.x - transform[12]) / transform[0];
                p.y = (p.y - transform[13]) / transform[5];

                // transform to graph coordinates
                p.x = p.x * (width / 2);
                p.y = p.y * (-height / 2);

                return p;
            },

            /**
         * Transforms WebGL coordinates into client coordinates. Reverse of
         * `transformClientToGraphCoordinates()`
         *
         * @param {Object} p - a point object with `x` and `y` attributes, which
         * represents a layout coordinate. This method mutates p.
         */
            transformGraphToClientCoordinates: function (p) {
                // TODO: could be a problem when container has margins?
            // transform from graph coordinates
                p.x = p.x / (width / 2);
                p.y = p.y / (-height / 2);

                // apply transform
                p.x = (p.x * transform[0]) + transform[12];
                p.y = (p.y * transform[5]) + transform[13];

                // denormalize
                p.x = ((p.x + 1) * width) / 2;
                p.y = ((1 - p.y) * height) / 2;

                return p;
            },

            getNodeAtClientPos: function (clientPos, preciseCheck) {
                if (typeof preciseCheck !== "function") {
                // we don't know anything about your node structure here :(
                // potentially this could be delegated to node program, but for
                // right now, we are giving up if you don't pass boundary check
                // callback. It answers to a question is nodeUI covers  (x, y)
                    return null;
                }
                // first transform to graph coordinates:
                this.transformClientToGraphCoordinates(clientPos);
                // now using precise check iterate over each node and find one within box:
                // TODO: This is poor O(N) performance.
                for (var i = 0; i < nodesCount; ++i) {
                    if (preciseCheck(nodes[i], clientPos.x, clientPos.y)) {
                        return nodes[i].node;
                    }
                }
                return null;
            }
        };

        // Let graphics fire events before we return it to the caller.
        eventify(graphics);

        return graphics;
    }

},{"../Input/webglInputManager.js":36,"../WebGL/webglLine.js":58,"../WebGL/webglLinkProgram.js":59,"../WebGL/webglNodeProgram.js":60,"../WebGL/webglSquare.js":61,"ngraph.events":7,"ngraph.merge":13}],51:[function(require,module,exports){
    module.exports = parseColor;

    function parseColor(color) {
        var parsedColor = 0x009ee8ff;

        if (typeof color === 'string' && color) {
            if (color.length === 4) { // #rgb
                color = color.replace(/([^#])/g, '$1$1'); // duplicate each letter except first #.
            }
            if (color.length === 9) { // #rrggbbaa
                parsedColor = parseInt(color.substr(1), 16);
            } else if (color.length === 7) { // or #rrggbb.
                parsedColor = (parseInt(color.substr(1), 16) << 8) | 0xff;
            } else {
                throw 'Color expected in hex format with preceding "#". E.g. #00ff00. Got value: ' + color;
            }
        } else if (typeof color === 'number') {
            parsedColor = color;
        }

        return parsedColor;
    }

},{}],52:[function(require,module,exports){
    module.exports = Texture;

    /**
 * Single texture in the webglAtlas.
 */
    function Texture(size) {
        this.canvas = window.document.createElement("canvas");
        this.ctx = this.canvas.getContext("2d");
        this.isDirty = false;
        this.canvas.width = this.canvas.height = size;
    }

},{}],53:[function(require,module,exports){
/**
 * @fileOverview Utility functions for webgl rendering.
 *
 * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com
 */

    module.exports = webgl;

    function webgl(gl) {

        return {
            createProgram: createProgram,
            extendArray: extendArray,
            copyArrayPart: copyArrayPart,
            swapArrayPart: swapArrayPart,
            getLocations: getLocations,
            context: gl
        };

        function createShader(shaderText, type) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, shaderText);
            gl.compileShader(shader);

            if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
                var msg = gl.getShaderInfoLog(shader);
                window.alert(msg);
                throw msg;
            }

            return shader;
        }

        function createProgram(vertexShaderSrc, fragmentShaderSrc) {
            var program = gl.createProgram();
            var vs = createShader(vertexShaderSrc, gl.VERTEX_SHADER);
            var fs = createShader(fragmentShaderSrc, gl.FRAGMENT_SHADER);

            gl.attachShader(program, vs);
            gl.attachShader(program, fs);
            gl.linkProgram(program);

            if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                var msg = gl.getShaderInfoLog(program);
                window.alert(msg);
                throw msg;
            }

            return program;
        }

        function extendArray(buffer, itemsInBuffer, elementsPerItem) {
            if ((itemsInBuffer + 1) * elementsPerItem > buffer.length) {
                // Every time we run out of space create new array twice bigger.
                // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs
                var extendedArray = new Float32Array(buffer.length * elementsPerItem * 2);
                extendedArray.set(buffer);

                return extendedArray;
            }

            return buffer;
        }

        function getLocations(program, uniformOrAttributeNames) {
            var foundLocations = {};
            for (var i = 0; i < uniformOrAttributeNames.length; ++i) {
                var name = uniformOrAttributeNames[i];
                var location = -1;
                if (name[0] === 'a' && name[1] === '_') {
                    location = gl.getAttribLocation(program, name);
                    if (location === -1) {
                        throw new Error("Program doesn't have required attribute: " + name);
                    }

                    foundLocations[name.slice(2)] = location;
                } else if (name[0] === 'u' && name[1] === '_') {
                    location = gl.getUniformLocation(program, name);
                    if (location === null) {
                        throw new Error("Program doesn't have required uniform: " + name);
                    }

                    foundLocations[name.slice(2)] = location;
                } else {
                    throw new Error("Couldn't figure out your intent. All uniforms should start with 'u_' prefix, and attributes with 'a_'");
                }
            }

            return foundLocations;
        }
    }

    function copyArrayPart(array, to, from, elementsCount) {
        for (var i = 0; i < elementsCount; ++i) {
            array[to + i] = array[from + i];
        }
    }

    function swapArrayPart(array, from, to, elementsCount) {
        for (var i = 0; i < elementsCount; ++i) {
            var tmp = array[from + i];
            array[from + i] = array[to + i];
            array[to + i] = tmp;
        }
    }

},{}],54:[function(require,module,exports){
    var Texture = require('./texture.js');

    module.exports = webglAtlas;

    /**
 * My naive implementation of textures atlas. It allows clients to load
 * multiple images into atlas and get canvas representing all of them.
 *
 * @param tilesPerTexture - indicates how many images can be loaded to one
 *          texture of the atlas. If number of loaded images exceeds this
 *          parameter a new canvas will be created.
 */
    function webglAtlas(tilesPerTexture) {
        var tilesPerRow = Math.sqrt(tilesPerTexture || 1024) << 0,
            tileSize = tilesPerRow,
            lastLoadedIdx = 1,
            loadedImages = {},
            dirtyTimeoutId,
            skipedDirty = 0,
            textures = [],
            trackedUrls = [];

        if (!isPowerOf2(tilesPerTexture)) {
            throw "Tiles per texture should be power of two.";
        }

        // this is the return object
        var api = {
            /**
     * indicates whether atlas has changed texture in it. If true then
     * some of the textures has isDirty flag set as well.
     */
            isDirty: false,

            /**
     * Clears any signs of atlas changes.
     */
            clearDirty: clearDirty,

            /**
     * Removes given url from collection of tiles in the atlas.
     */
            remove: remove,

            /**
     * Gets all textures in the atlas.
     */
            getTextures: getTextures,

            /**
     * Gets coordinates of the given image in the atlas. Coordinates is an object:
     * {offset : int } - where offset is an absolute position of the image in the
     * atlas.
     *
     * Absolute means it can be larger than tilesPerTexture parameter, and in that
     * case clients should get next texture in getTextures() collection.
     */
            getCoordinates: getCoordinates,

            /**
     * Asynchronously Loads the image to the atlas. Cross-domain security
     * limitation applies.
     */
            load: load
        };

        return api;

        function clearDirty() {
            var i;
            api.isDirty = false;
            for (i = 0; i < textures.length; ++i) {
                textures[i].isDirty = false;
            }
        }

        function remove(imgUrl) {
            var coordinates = loadedImages[imgUrl];
            if (!coordinates) {
                return false;
            }
            delete loadedImages[imgUrl];
            lastLoadedIdx -= 1;

            if (lastLoadedIdx === coordinates.offset) {
                return true; // Ignore if it's last image in the whole set.
            }

            var tileToRemove = getTileCoordinates(coordinates.offset),
                lastTileInSet = getTileCoordinates(lastLoadedIdx);

            copy(lastTileInSet, tileToRemove);

            var replacedOffset = loadedImages[trackedUrls[lastLoadedIdx]];
            replacedOffset.offset = coordinates.offset;
            trackedUrls[coordinates.offset] = trackedUrls[lastLoadedIdx];

            markDirty();
            return true;
        }

        function getTextures() {
            return textures; // I trust you...
        }

        function getCoordinates(imgUrl) {
            return loadedImages[imgUrl];
        }

        function load(imgUrl, callback) {
            if (loadedImages.hasOwnProperty(imgUrl)) {
                callback(loadedImages[imgUrl]);
            } else {
                var img = new window.Image(),
                    imgId = lastLoadedIdx;

                lastLoadedIdx += 1;
                img.crossOrigin = "anonymous";
                img.onload = function() {
                    markDirty();
                    drawAt(imgId, img, callback);
                };

                img.src = imgUrl;
            }
        }

        function createTexture() {
            var texture = new Texture(tilesPerRow * tileSize);
            textures.push(texture);
        }

        function drawAt(tileNumber, img, callback) {
            var tilePosition = getTileCoordinates(tileNumber),
                coordinates = {
                    offset: tileNumber
                };

            if (tilePosition.textureNumber >= textures.length) {
                createTexture();
            }
            var currentTexture = textures[tilePosition.textureNumber];

            currentTexture.ctx.drawImage(img, tilePosition.col * tileSize, tilePosition.row * tileSize, tileSize, tileSize);
            trackedUrls[tileNumber] = img.src;

            loadedImages[img.src] = coordinates;
            currentTexture.isDirty = true;

            callback(coordinates);
        }

        function getTileCoordinates(absolutePosition) {
            var textureNumber = (absolutePosition / tilesPerTexture) << 0,
                localTileNumber = (absolutePosition % tilesPerTexture),
                row = (localTileNumber / tilesPerRow) << 0,
                col = (localTileNumber % tilesPerRow);

            return {
                textureNumber: textureNumber,
                row: row,
                col: col
            };
        }

        function markDirtyNow() {
            api.isDirty = true;
            skipedDirty = 0;
            dirtyTimeoutId = null;
        }

        function markDirty() {
            // delay this call, since it results in texture reload
            if (dirtyTimeoutId) {
                window.clearTimeout(dirtyTimeoutId);
                skipedDirty += 1;
                dirtyTimeoutId = null;
            }

            if (skipedDirty > 10) {
                markDirtyNow();
            } else {
                dirtyTimeoutId = window.setTimeout(markDirtyNow, 400);
            }
        }

        function copy(from, to) {
            var fromCanvas = textures[from.textureNumber].canvas,
                toCtx = textures[to.textureNumber].ctx,
                x = to.col * tileSize,
                y = to.row * tileSize;

            toCtx.drawImage(fromCanvas, from.col * tileSize, from.row * tileSize, tileSize, tileSize, x, y, tileSize, tileSize);
            textures[from.textureNumber].isDirty = true;
            textures[to.textureNumber].isDirty = true;
        }
    }

    function isPowerOf2(n) {
        return (n & (n - 1)) === 0;
    }

},{"./texture.js":52}],55:[function(require,module,exports){
    module.exports = webglImage;

    /**
 * Represents a model for image.
 */
    function webglImage(size, src) {
        return {
        /**
         * Gets texture index where current image is placed.
         */
            _texture : 0,

            /**
         * Gets offset in the texture where current image is placed.
         */
            _offset : 0,

            /**
         * Gets size of the square with the image.
         */
            size : typeof size === 'number' ? size : 32,

            /**
         * Source of the image. If image is coming not from your domain
         * certain origin restrictions applies.
         * See http://www.khronos.org/registry/webgl/specs/latest/#4.2 for more details.
         */
            src  : src
        };
    }

},{}],56:[function(require,module,exports){
/**
 * @fileOverview Defines an image nodes for webglGraphics class.
 * Shape of nodes is square.
 *
 * @author Andrei Kashcha (aka anvaka) / http://anvaka.blogspot.com
 */

    var WebglAtlas = require('./webglAtlas.js');
    var glUtils = require('./webgl.js');

    module.exports = webglImageNodeProgram;

    /**
 * Defines simple UI for nodes in webgl renderer. Each node is rendered as an image.
 */
    function webglImageNodeProgram() {
        // WebGL is gian state machine, we store some properties of the state here:
        var ATTRIBUTES_PER_PRIMITIVE = 18;
        var nodesFS = createNodeFragmentShader();
        var nodesVS = createNodeVertexShader();
        var tilesPerTexture = 1024; // TODO: Get based on max texture size
        var atlas;
        var program;
        var gl;
        var buffer;
        var utils;
        var locations;
        var nodesCount = 0;
        var nodes = new Float32Array(64);
        var width;
        var height;
        var transform;
        var sizeDirty;

        return {
            load: load,

            /**
     * Updates position of current node in the buffer of nodes.
     *
     * @param idx - index of current node.
     * @param pos - new position of the node.
     */
            position: position,

            createNode: createNode,

            removeNode: removeNode,

            replaceProperties: replaceProperties,

            updateTransform: updateTransform,

            updateSize: updateSize,

            render: render
        };

        function refreshTexture(texture, idx) {
            if (texture.nativeObject) {
                gl.deleteTexture(texture.nativeObject);
            }

            var nativeObject = gl.createTexture();
            gl.activeTexture(gl["TEXTURE" + idx]);
            gl.bindTexture(gl.TEXTURE_2D, nativeObject);
            gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, texture.canvas);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
            gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);

            gl.generateMipmap(gl.TEXTURE_2D);
            gl.uniform1i(locations["sampler" + idx], idx);

            texture.nativeObject = nativeObject;
        }

        function ensureAtlasTextureUpdated() {
            if (atlas.isDirty) {
                var textures = atlas.getTextures(),
                    i;
                for (i = 0; i < textures.length; ++i) {
                    if (textures[i].isDirty || !textures[i].nativeObject) {
                        refreshTexture(textures[i], i);
                    }
                }

                atlas.clearDirty();
            }
        }

        function load(glContext) {
            gl = glContext;
            utils = glUtils(glContext);

            atlas = new WebglAtlas(tilesPerTexture);

            program = utils.createProgram(nodesVS, nodesFS);
            gl.useProgram(program);
            locations = utils.getLocations(program, ["a_vertexPos", "a_customAttributes", "u_screenSize", "u_transform", "u_sampler0", "u_sampler1", "u_sampler2", "u_sampler3", "u_tilesPerTexture"]);

            gl.uniform1f(locations.tilesPerTexture, tilesPerTexture);

            gl.enableVertexAttribArray(locations.vertexPos);
            gl.enableVertexAttribArray(locations.customAttributes);

            buffer = gl.createBuffer();
        }

        function position(nodeUI, pos) {
            var idx = nodeUI.id * ATTRIBUTES_PER_PRIMITIVE;
            nodes[idx] = pos.x - nodeUI.size;
            nodes[idx + 1] = pos.y - nodeUI.size;
            nodes[idx + 2] = nodeUI._offset * 4;

            nodes[idx + 3] = pos.x + nodeUI.size;
            nodes[idx + 4] = pos.y - nodeUI.size;
            nodes[idx + 5] = nodeUI._offset * 4 + 1;

            nodes[idx + 6] = pos.x - nodeUI.size;
            nodes[idx + 7] = pos.y + nodeUI.size;
            nodes[idx + 8] = nodeUI._offset * 4 + 2;

            nodes[idx + 9] = pos.x - nodeUI.size;
            nodes[idx + 10] = pos.y + nodeUI.size;
            nodes[idx + 11] = nodeUI._offset * 4 + 2;

            nodes[idx + 12] = pos.x + nodeUI.size;
            nodes[idx + 13] = pos.y - nodeUI.size;
            nodes[idx + 14] = nodeUI._offset * 4 + 1;

            nodes[idx + 15] = pos.x + nodeUI.size;
            nodes[idx + 16] = pos.y + nodeUI.size;
            nodes[idx + 17] = nodeUI._offset * 4 + 3;
        }

        function createNode(ui) {
            nodes = utils.extendArray(nodes, nodesCount, ATTRIBUTES_PER_PRIMITIVE);
            nodesCount += 1;

            var coordinates = atlas.getCoordinates(ui.src);
            if (coordinates) {
                ui._offset = coordinates.offset;
            } else {
                ui._offset = 0;
                // Image is not yet loaded into the atlas. Reload it:
                atlas.load(ui.src, function(coordinates) {
                    ui._offset = coordinates.offset;
                });
            }
        }

        function removeNode(nodeUI) {
            if (nodesCount > 0) {
                nodesCount -= 1;
            }

            if (nodeUI.id < nodesCount && nodesCount > 0) {
                if (nodeUI.src) {
                    atlas.remove(nodeUI.src);
                }

                utils.copyArrayPart(nodes, nodeUI.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);
            }
        }

        function replaceProperties(replacedNode, newNode) {
            newNode._offset = replacedNode._offset;
        }

        function updateTransform(newTransform) {
            sizeDirty = true;
            transform = newTransform;
        }

        function updateSize(w, h) {
            width = w;
            height = h;
            sizeDirty = true;
        }

        function render() {
            gl.useProgram(program);
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            gl.bufferData(gl.ARRAY_BUFFER, nodes, gl.DYNAMIC_DRAW);

            if (sizeDirty) {
                sizeDirty = false;
                gl.uniformMatrix4fv(locations.transform, false, transform);
                gl.uniform2f(locations.screenSize, width, height);
            }

            gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);
            gl.vertexAttribPointer(locations.customAttributes, 1, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);

            ensureAtlasTextureUpdated();

            gl.drawArrays(gl.TRIANGLES, 0, nodesCount * 6);
        }
    }

    // TODO: Use glslify for shaders
    function createNodeFragmentShader() {
        return [
            "precision mediump float;",
            "varying vec4 color;",
            "varying vec3 vTextureCoord;",
            "uniform sampler2D u_sampler0;",
            "uniform sampler2D u_sampler1;",
            "uniform sampler2D u_sampler2;",
            "uniform sampler2D u_sampler3;",

            "void main(void) {",
            "   if (vTextureCoord.z == 0.) {",
            "     gl_FragColor = texture2D(u_sampler0, vTextureCoord.xy);",
            "   } else if (vTextureCoord.z == 1.) {",
            "     gl_FragColor = texture2D(u_sampler1, vTextureCoord.xy);",
            "   } else if (vTextureCoord.z == 2.) {",
            "     gl_FragColor = texture2D(u_sampler2, vTextureCoord.xy);",
            "   } else if (vTextureCoord.z == 3.) {",
            "     gl_FragColor = texture2D(u_sampler3, vTextureCoord.xy);",
            "   } else { gl_FragColor = vec4(0, 1, 0, 1); }",
            "}"
        ].join("\n");
    }

    function createNodeVertexShader() {
        return [
            "attribute vec2 a_vertexPos;",

            "attribute float a_customAttributes;",
            "uniform vec2 u_screenSize;",
            "uniform mat4 u_transform;",
            "uniform float u_tilesPerTexture;",
            "varying vec3 vTextureCoord;",

            "void main(void) {",
            "   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0, 1);",
            "float corner = mod(a_customAttributes, 4.);",
            "float tileIndex = mod(floor(a_customAttributes / 4.), u_tilesPerTexture);",
            "float tilesPerRow = sqrt(u_tilesPerTexture);",
            "float tileSize = 1./tilesPerRow;",
            "float tileColumn = mod(tileIndex, tilesPerRow);",
            "float tileRow = floor(tileIndex/tilesPerRow);",

            "if(corner == 0.0) {",
            "  vTextureCoord.xy = vec2(0, 1);",
            "} else if(corner == 1.0) {",
            "  vTextureCoord.xy = vec2(1, 1);",
            "} else if(corner == 2.0) {",
            "  vTextureCoord.xy = vec2(0, 0);",
            "} else {",
            "  vTextureCoord.xy = vec2(1, 0);",
            "}",

            "vTextureCoord *= tileSize;",
            "vTextureCoord.x += tileColumn * tileSize;",
            "vTextureCoord.y += tileRow * tileSize;",
            "vTextureCoord.z = floor(floor(a_customAttributes / 4.)/u_tilesPerTexture);",
            "}"
        ].join("\n");
    }

},{"./webgl.js":53,"./webglAtlas.js":54}],57:[function(require,module,exports){
    var documentEvents = require('../Utils/documentEvents.js');

    module.exports = webglInputEvents;

    /**
 * Monitors graph-related mouse input in webgl graphics and notifies subscribers.
 *
 * @param {Viva.Graph.View.webglGraphics} webglGraphics
 */
    function webglInputEvents(webglGraphics) {
        if (webglGraphics.webglInputEvents) {
            // Don't listen twice, if we are already attached to this graphics:
            return webglGraphics.webglInputEvents;
        }

        var mouseCapturedNode = null,
            mouseEnterCallback = [],
            mouseLeaveCallback = [],
            mouseDownCallback = [],
            mouseUpCallback = [],
            mouseMoveCallback = [],
            clickCallback = [],
            dblClickCallback = [],
            prevSelectStart,
            boundRect;

        var root = webglGraphics.getGraphicsRoot();
        startListen(root);

        var api = {
            mouseEnter: mouseEnter,
            mouseLeave: mouseLeave,
            mouseDown: mouseDown,
            mouseUp: mouseUp,
            mouseMove: mouseMove,
            click: click,
            dblClick: dblClick,
            mouseCapture: mouseCapture,
            releaseMouseCapture: releaseMouseCapture
        };

        // TODO I don't remember why this is needed:
        webglGraphics.webglInputEvents = api;

        return api;

        function releaseMouseCapture() {
            mouseCapturedNode = null;
        }

        function mouseCapture(node) {
            mouseCapturedNode = node;
        }

        function dblClick(callback) {
            if (typeof callback === 'function') {
                dblClickCallback.push(callback);
            }
            return api;
        }

        function click(callback) {
            if (typeof callback === 'function') {
                clickCallback.push(callback);
            }
            return api;
        }

        function mouseMove(callback) {
            if (typeof callback === 'function') {
                mouseMoveCallback.push(callback);
            }
            return api;
        }

        function mouseUp(callback) {
            if (typeof callback === 'function') {
                mouseUpCallback.push(callback);
            }
            return api;
        }

        function mouseDown(callback) {
            if (typeof callback === 'function') {
                mouseDownCallback.push(callback);
            }
            return api;
        }

        function mouseLeave(callback) {
            if (typeof callback === 'function') {
                mouseLeaveCallback.push(callback);
            }
            return api;
        }

        function mouseEnter(callback) {
            if (typeof callback === 'function') {
                mouseEnterCallback.push(callback);
            }
            return api;
        }

        function preciseCheck(nodeUI, x, y) {
            if (nodeUI && nodeUI.size) {
                var pos = nodeUI.position,
                    half = nodeUI.size;

                return pos.x - half < x && x < pos.x + half &&
        pos.y - half < y && y < pos.y + half;
            }

            return true;
        }

        function getNodeAtClientPos(pos) {
            return webglGraphics.getNodeAtClientPos(pos, preciseCheck);
        }

        function stopPropagation(e) {
            if (e.stopPropagation) {
                e.stopPropagation();
            } else {
                e.cancelBubble = true;
            }
        }

        function handleDisabledEvent(e) {
            stopPropagation(e);
            return false;
        }

        function invoke(callbacksChain, args) {
            var i, stopPropagation;
            for (i = 0; i < callbacksChain.length; i += 1) {
                stopPropagation = callbacksChain[i].apply(undefined, args);
                if (stopPropagation) {
                    return true;
                }
            }
        }

        function startListen(root) {
            var pos = {
                    x: 0,
                    y: 0
                },
                lastFound = null,
                lastUpdate = 1,
                lastClickTime = +new Date(),

                handleMouseMove = function(e) {
                    invoke(mouseMoveCallback, [lastFound, e]);
                    pos.x = e.clientX;
                    pos.y = e.clientY;
                },

                handleMouseUp = function() {
                    documentEvents.off('mousemove', handleMouseMove);
                    documentEvents.off('mouseup', handleMouseUp);
                },

                updateBoundRect = function() {
                    boundRect = root.getBoundingClientRect();
                };

            window.addEventListener('resize', updateBoundRect);
            updateBoundRect();

            // mouse move inside container serves only to track mouse enter/leave events.
            root.addEventListener('mousemove',
                function(e) {
                    if (mouseCapturedNode) {
                        return;
                    }
                    if (lastUpdate++ % 7 === 0) {
                        // since there is no bullet proof method to detect resize
                        // event, we preemptively update the bounding rectangle
                        updateBoundRect();
                        lastUpdate = 1;
                    }
                    var cancelBubble = false,
                        node;

                    pos.x = e.clientX - boundRect.left;
                    pos.y = e.clientY - boundRect.top;

                    node = getNodeAtClientPos(pos);

                    if (node && lastFound !== node) {
                        lastFound = node;
                        cancelBubble = cancelBubble || invoke(mouseEnterCallback, [lastFound]);
                    } else if (node === null && lastFound !== node) {
                        cancelBubble = cancelBubble || invoke(mouseLeaveCallback, [lastFound]);
                        lastFound = null;
                    }

                    if (cancelBubble) {
                        stopPropagation(e);
                    }
                });

            root.addEventListener('mousedown',
                function(e) {
                    var cancelBubble = false,
                        args;
                    updateBoundRect();
                    pos.x = e.clientX - boundRect.left;
                    pos.y = e.clientY - boundRect.top;

                    args = [getNodeAtClientPos(pos), e];
                    if (args[0]) {
                        cancelBubble = invoke(mouseDownCallback, args);
                        // we clicked on a node. Following drag should be handled on document events:
                        documentEvents.on('mousemove', handleMouseMove);
                        documentEvents.on('mouseup', handleMouseUp);

                        prevSelectStart = window.document.onselectstart;

                        window.document.onselectstart = handleDisabledEvent;

                        lastFound = args[0];
                    } else {
                        lastFound = null;
                    }
                    if (cancelBubble) {
                        stopPropagation(e);
                    }
                });

            root.addEventListener('mouseup',
                function(e) {
                    var clickTime = +new Date(),
                        args;

                    pos.x = e.clientX - boundRect.left;
                    pos.y = e.clientY - boundRect.top;

                    var nodeAtClientPos = getNodeAtClientPos(pos);
                    var sameNode = nodeAtClientPos === lastFound;
                    args = [nodeAtClientPos || lastFound, e];
                    if (args[0]) {
                        window.document.onselectstart = prevSelectStart;

                        if (clickTime - lastClickTime < 400 && sameNode) {
                            invoke(dblClickCallback, args);
                        } else {
                            invoke(clickCallback, args);
                        }
                        lastClickTime = clickTime;

                        if (invoke(mouseUpCallback, args)) {
                            stopPropagation(e);
                        }
                    }
                });
        }
    }

},{"../Utils/documentEvents.js":40}],58:[function(require,module,exports){
    var parseColor = require('./parseColor.js');

    module.exports = webglLine;

    /**
 * Defines a webgl line. This class has no rendering logic at all,
 * it's just passed to corresponding shader and the shader should
 * figure out how to render it.
 *
 */
    function webglLine(color) {
        return {
            /**
     * Gets or sets color of the line. If you set this property externally
     * make sure it always come as integer of 0xRRGGBBAA format
     */
            color: parseColor(color)
        };
    }

},{"./parseColor.js":51}],59:[function(require,module,exports){
/**
 * @fileOverview Defines a naive form of links for webglGraphics class.
 * This form allows to change color of links.
 **/

    var glUtils = require('./webgl.js');

    module.exports = webglLinkProgram;

    /**
 * Defines UI for links in webgl renderer.
 */
    function webglLinkProgram() {
        var ATTRIBUTES_PER_PRIMITIVE = 6, // primitive is Line with two points. Each has x,y and color = 3 * 2 attributes.
            BYTES_PER_LINK = 2 * (2 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT), // two nodes * (x, y + color)
            linksFS = [
                'precision mediump float;',
                'varying vec4 color;',
                'void main(void) {',
                '   gl_FragColor = color;',
                '}'
            ].join('\n'),

            linksVS = [
                'attribute vec2 a_vertexPos;',
                'attribute vec4 a_color;',

                'uniform vec2 u_screenSize;',
                'uniform mat4 u_transform;',

                'varying vec4 color;',

                'void main(void) {',
                '   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0.0, 1.0);',
                '   color = a_color.abgr;',
                '}'
            ].join('\n'),

            program,
            gl,
            buffer,
            utils,
            locations,
            linksCount = 0,
            frontLinkId, // used to track z-index of links.
            storage = new ArrayBuffer(16 * BYTES_PER_LINK),
            positions = new Float32Array(storage),
            colors = new Uint32Array(storage),
            width,
            height,
            transform,
            sizeDirty,

            ensureEnoughStorage = function () {
            // TODO: this is a duplicate of webglNodeProgram code. Extract it to webgl.js
                if ((linksCount+1)*BYTES_PER_LINK > storage.byteLength) {
                // Every time we run out of space create new array twice bigger.
                // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs
                    var extendedStorage = new ArrayBuffer(storage.byteLength * 2),
                        extendedPositions = new Float32Array(extendedStorage),
                        extendedColors = new Uint32Array(extendedStorage);

                    extendedColors.set(colors); // should be enough to copy just one view.
                    positions = extendedPositions;
                    colors = extendedColors;
                    storage = extendedStorage;
                }
            };

        return {
            load : function (glContext) {
                gl = glContext;
                utils = glUtils(glContext);

                program = utils.createProgram(linksVS, linksFS);
                gl.useProgram(program);
                locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);

                gl.enableVertexAttribArray(locations.vertexPos);
                gl.enableVertexAttribArray(locations.color);

                buffer = gl.createBuffer();
            },

            position: function (linkUi, fromPos, toPos) {
                var linkIdx = linkUi.id,
                    offset = linkIdx * ATTRIBUTES_PER_PRIMITIVE;
                positions[offset] = fromPos.x;
                positions[offset + 1] = fromPos.y;
                colors[offset + 2] = linkUi.color;

                positions[offset + 3] = toPos.x;
                positions[offset + 4] = toPos.y;
                colors[offset + 5] = linkUi.color;
            },

            createLink : function (ui) {
                ensureEnoughStorage();

                linksCount += 1;
                frontLinkId = ui.id;
            },

            removeLink : function (ui) {
                if (linksCount > 0) { linksCount -= 1; }
                // swap removed link with the last link. This will give us O(1) performance for links removal:
                if (ui.id < linksCount && linksCount > 0) {
                // using colors as a view to array buffer is okay here.
                    utils.copyArrayPart(colors, ui.id * ATTRIBUTES_PER_PRIMITIVE, linksCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);
                }
            },

            updateTransform : function (newTransform) {
                sizeDirty = true;
                transform = newTransform;
            },

            updateSize : function (w, h) {
                width = w;
                height = h;
                sizeDirty = true;
            },

            render : function () {
                gl.useProgram(program);
                gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
                gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);

                if (sizeDirty) {
                    sizeDirty = false;
                    gl.uniformMatrix4fv(locations.transform, false, transform);
                    gl.uniform2f(locations.screenSize, width, height);
                }

                gl.vertexAttribPointer(locations.vertexPos, 2, gl.FLOAT, false, 3 * Float32Array.BYTES_PER_ELEMENT, 0);
                gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, 3 * Float32Array.BYTES_PER_ELEMENT, 2 * 4);

                gl.drawArrays(gl.LINES, 0, linksCount * 2);

                frontLinkId = linksCount - 1;
            },

            bringToFront : function (link) {
                if (frontLinkId > link.id) {
                    utils.swapArrayPart(positions, link.id * ATTRIBUTES_PER_PRIMITIVE, frontLinkId * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);
                }
                if (frontLinkId > 0) {
                    frontLinkId -= 1;
                }
            },

            getFrontLinkId : function () {
                return frontLinkId;
            }
        };
    }

},{"./webgl.js":53}],60:[function(require,module,exports){
/**
 * @fileOverview Defines a naive form of nodes for webglGraphics class.
 * This form allows to change color of node. Shape of nodes is rectangular.
 *
 * @author Andrei Kashcha (aka anvaka) / https://github.com/anvaka
 */

    var glUtils = require('./webgl.js');

    module.exports = webglNodeProgram;

    /**
 * Defines simple UI for nodes in webgl renderer. Each node is rendered as square. Color and size can be changed.
 */
    function webglNodeProgram() {
        var ATTRIBUTES_PER_PRIMITIVE = 4; // Primitive is point, x, y, size, color
        // x, y, z - floats, color = uint.
        var BYTES_PER_NODE = 3 * Float32Array.BYTES_PER_ELEMENT + Uint32Array.BYTES_PER_ELEMENT;
        var nodesFS = [
            'precision mediump float;',
            'varying vec4 color;',

            'void main(void) {',
            '   gl_FragColor = color;',
            '}'
        ].join('\n');
        var nodesVS = [
            'attribute vec3 a_vertexPos;',
            'attribute vec4 a_color;',
            'uniform vec2 u_screenSize;',
            'uniform mat4 u_transform;',
            'varying vec4 color;',

            'void main(void) {',
            '   gl_Position = u_transform * vec4(a_vertexPos.xy/u_screenSize, 0, 1);',
            '   gl_PointSize = a_vertexPos.z * u_transform[0][0];',
            '   color = a_color.abgr;',
            '}'
        ].join('\n');

        var program;
        var gl;
        var buffer;
        var locations;
        var utils;
        var storage = new ArrayBuffer(16 * BYTES_PER_NODE);
        var positions = new Float32Array(storage);
        var colors = new Uint32Array(storage);
        var nodesCount = 0;
        var width;
        var height;
        var transform;
        var sizeDirty;

        return {
            load: load,

            /**
     * Updates position of node in the buffer of nodes.
     *
     * @param idx - index of current node.
     * @param pos - new position of the node.
     */
            position: position,

            updateTransform: updateTransform,

            updateSize: updateSize,

            removeNode: removeNode,

            createNode: createNode,

            replaceProperties: replaceProperties,

            render: render
        };

        function ensureEnoughStorage() {
            if ((nodesCount + 1) * BYTES_PER_NODE >= storage.byteLength) {
                // Every time we run out of space create new array twice bigger.
                // TODO: it seems buffer size is limited. Consider using multiple arrays for huge graphs
                var extendedStorage = new ArrayBuffer(storage.byteLength * 2),
                    extendedPositions = new Float32Array(extendedStorage),
                    extendedColors = new Uint32Array(extendedStorage);

                extendedColors.set(colors); // should be enough to copy just one view.
                positions = extendedPositions;
                colors = extendedColors;
                storage = extendedStorage;
            }
        }

        function load(glContext) {
            gl = glContext;
            utils = glUtils(glContext);

            program = utils.createProgram(nodesVS, nodesFS);
            gl.useProgram(program);
            locations = utils.getLocations(program, ['a_vertexPos', 'a_color', 'u_screenSize', 'u_transform']);

            gl.enableVertexAttribArray(locations.vertexPos);
            gl.enableVertexAttribArray(locations.color);

            buffer = gl.createBuffer();
        }

        function position(nodeUI, pos) {
            var idx = nodeUI.id;

            positions[idx * ATTRIBUTES_PER_PRIMITIVE] = pos.x;
            positions[idx * ATTRIBUTES_PER_PRIMITIVE + 1] = -pos.y;
            positions[idx * ATTRIBUTES_PER_PRIMITIVE + 2] = nodeUI.size;

            colors[idx * ATTRIBUTES_PER_PRIMITIVE + 3] = nodeUI.color;
        }

        function updateTransform(newTransform) {
            sizeDirty = true;
            transform = newTransform;
        }

        function updateSize(w, h) {
            width = w;
            height = h;
            sizeDirty = true;
        }

        function removeNode(node) {
            if (nodesCount > 0) {
                nodesCount -= 1;
            }

            if (node.id < nodesCount && nodesCount > 0) {
                // we can use colors as a 'view' into array array buffer.
                utils.copyArrayPart(colors, node.id * ATTRIBUTES_PER_PRIMITIVE, nodesCount * ATTRIBUTES_PER_PRIMITIVE, ATTRIBUTES_PER_PRIMITIVE);
            }
        }

        function createNode() {
            ensureEnoughStorage();
            nodesCount += 1;
        }

        function replaceProperties(/* replacedNode, newNode */) {}

        function render() {
            gl.useProgram(program);
            gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
            gl.bufferData(gl.ARRAY_BUFFER, storage, gl.DYNAMIC_DRAW);

            if (sizeDirty) {
                sizeDirty = false;
                gl.uniformMatrix4fv(locations.transform, false, transform);
                gl.uniform2f(locations.screenSize, width, height);
            }

            gl.vertexAttribPointer(locations.vertexPos, 3, gl.FLOAT, false, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 0);
            gl.vertexAttribPointer(locations.color, 4, gl.UNSIGNED_BYTE, true, ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT, 3 * 4);

            gl.drawArrays(gl.POINTS, 0, nodesCount);
        }
    }

},{"./webgl.js":53}],61:[function(require,module,exports){
    var parseColor = require('./parseColor.js');

    module.exports = webglSquare;

    /**
 * Can be used as a callback in the webglGraphics.node() function, to
 * create a custom looking node.
 *
 * @param size - size of the node in pixels.
 * @param color - color of the node in '#rrggbbaa' or '#rgb' format.
 */
    function webglSquare(size, color) {
        return {
            /**
     * Gets or sets size of the square side.
     */
            size: typeof size === 'number' ? size : 10,

            /**
     * Gets or sets color of the square.
     */
            color: parseColor(color)
        };
    }

},{"./parseColor.js":51}],62:[function(require,module,exports){
// todo: this should be generated at build time.
    module.exports = '0.8.1';

},{}]},{},[1])(1)
});
'''
'''--- webroot/main.css ---
body,
html {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0
}

body {
  background-color: #fff;
  margin: 0;
  overflow: hidden;
  font-family: Helvetica, Arial;
  font-size: 15px
}

div#message {
  position: absolute;
  top: 60px;
  text-align: center;
  margin: auto;
  width: 100%;
  z-index: 1;
}

.graph {
  width: 100%;
  height: 100%;
  position: relative;
}

#stats {
  position: absolute;
  right: 10px;
  bottom: 41px;
}

#stats>* {
  text-align: right;
}

#github {
  position: absolute;
  right: 10px;
  bottom: 11px;
}

#tx-info {
  position: absolute;
  left: 10px;
  bottom: 10px;
  z-index: 2;
}

div#title {
  position: absolute;
  top: 0px;
  left: 10px;
  margin: 20px;
  z-index: 2;
}

#title input {
  border: 1px solid #333;
  margin: 10px 0;
  padding: 5px
}

#title h1 {
  margin: 10px 0 20px 0;
}

span#confirmed {
  background: #000;
  border: 2px solid #000
}

span#tip {
  background: #4ee5ec;
  border: 2px solid #000
}

span#milestone {
  background: #e53d6f;
  border: 2px solid #000
}

span#node {
  background: #fff;
  border: 3px solid #000
}

#confirming-tx {
  background: #f1b727;
  border: none;
}

#confirmed-by-tx {
  border: none;
  background: #e23df4;
}

#bundle {
  border: none;
  background: #1287ff;
}

.legend {
  line-height: 17px
}

.circle {
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  width: 10px;
  height: 10px;
  background: #4ee5ec;
  display: inline-block;
  border-radius: 50%;
  border: 2px solid #000;
  margin: 0 3px
}

div#donate {
  position: absolute;
  right: 10px;
  bottom: 10px;
  font-size: 7.5px
}

div#options {
  position: absolute;
  right: 10px;
  top: 10px;
  z-index: 2;
}

/* Toggle button */

.tgl {
  display: none;
}

.tgl,
.tgl:after,
.tgl:before,
.tgl *,
.tgl *:after,
.tgl *:before,
.tgl+.tgl-btn {
  box-sizing: border-box;
}

.tgl::-moz-selection,
.tgl:after::-moz-selection,
.tgl:before::-moz-selection,
.tgl *::-moz-selection,
.tgl *:after::-moz-selection,
.tgl *:before::-moz-selection,
.tgl+.tgl-btn::-moz-selection {
  background: none;
}

.tgl::selection,
.tgl:after::selection,
.tgl:before::selection,
.tgl *::selection,
.tgl *:after::selection,
.tgl *:before::selection,
.tgl+.tgl-btn::selection {
  background: none;
}

.tgl+.tgl-btn {
  outline: 0;
  display: inline-block;
  width: 20px;
  height: 10px;
  position: relative;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.tgl+.tgl-btn:after,
.tgl+.tgl-btn:before {
  position: relative;
  display: block;
  content: "";
  width: 50%;
  height: 100%;
}

.tgl+.tgl-btn:after {
  left: 0;
}

.tgl+.tgl-btn:before {
  display: none;
}

.tgl:checked+.tgl-btn:after {
  left: 50%;
}

.tgl-light+.tgl-btn {
  background: #f1f1f1;
  border-radius: 2em;
  padding: 0px;
  -webkit-transition: all .4s ease;
  transition: all .4s ease;
}

.tgl-light+.tgl-btn:after {
  border-radius: 50%;
  background: #ccc;
  -webkit-transition: all .2s ease;
  transition: all .2s ease;
}

.tgl-light:checked+.tgl-btn {
  background: #9FD6AE;
}

.tgl-light:checked+.tgl-btn:after {
  left: 50%;
  background: #60af8b;
}

.option-label span {
  margin: 6px;
}

label.option-label {
  cursor: pointer;
}

.option {
  margin: 5px;
}

.option>* {
  float: right;
}

body.dark-mode {
  background: #071821;
  color: white;
}

.dark-mode span#confirmed {
  background: white;
  border-color: white;
}

.dark-mode span#node {
  background: black;
}

.dark-mode span.circle {
  border-color: white !important;
}

.dark-mode a {
  color: white;
}

a {
  color: black;
}

.pay-with-iota {
  position: absolute;
  bottom: 225px;
  width: 170px;
  right: 0px;
}

.pay-with-iota img {
  width: 170px;
}

.option:hover::before {
  content: attr(data-tooltip);
  position: absolute;
  right: 172px;
  top: 12px;
  background: #080808;
  padding: 5px;
  width: max-content;
  border-radius: 5px;
  color: white;
}

.option {
  position: relative;
}

.loader {
  border: 6px solid #1d1d1d;
  /* Light grey */
  border-top: 6px solid #fff;
  /* Blue */
  border-radius: 50%;
  width: 55px;
  height: 55px;
  animation: spin 2.5s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

.loader-wrapper {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);

  z-index: 100;
}

.loader-wrapper .progress {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  -webkit-transform: translate(-50%, -50%);
  -moz-transform: translate(-50%, -50%);
  -o-transform: translate(-50%, -50%);
  -ms-transform: translate(-50%, -50%);

}

.donation {
  padding: 1px;
}

.donation span {
  margin: 4px;
  font-size: small;
}

.donation-container {
  position: absolute;
  right: 0px;
  bottom: 190px;
  /* width: 100px; */
  display: inline-block;
  height: 10px;
  margin: 10px;
}

.donation-hidden {
  display: block;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: #07152be6;
  position: absolute;
  z-index: 999;
}

.donation-message {
  margin: auto;
  width: 500px;
  top: 50%;
  position: relative;
  color: white;
  transform: translate(0, -50%);
}

.donation-hidden span.donation-address {
  font-size: 9px;
}

input#donation-message {
  width: 230px;
}

#donation-message-preview a {
  color: white;
}

.donation-container button {
  float: right;
}
'''
'''--- webroot/main.js ---
/* eslint-disable no-console */
/* eslint-env jquery */
/* global Viva,buildCircleNodeShader */

/* eslint-disable no-unused-vars */
/* global Viva */

const TangleGlumb = ($container, config = {}) => {
  // defaults

  const LOG = false;

  const CONFIG = {
    // layout engine tuning
    SPRINGLENGTH: 10,
    SPRINGCOEFF: 0.0001,
    GRAVITY: -4,
    DRAGCOEFF: 0.02,
    TIMESTEP: 22,

    // rendering
    PAUSE_RENDERING: false,

    FORCE: { x: 0, y: 0.05 },
    CIRCLE_SIZE: 30, // size of a node
    REMOVE_LONLY_AFTER_S: 30, // remove floating nodes after time
    REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH: 0.03, // remove graphs that are smaller than % of all nodes
    MAX_CIRCLE_SIZE: 80, // max node size used e.g. for 'size by value'
    MAX_NODES: 4000, // max nodes when 'limit to 4k nodes' is enabled

    // options
    REMOVE_FLOATING_NODES: true,
    SIZE_BY_DEPTH: false,
    SIZE_BY_VALUE: false, // size based on transferred iota value
    SIZE_BY_WEIGHT: false, // tx that confirm more tx have a bigger diameter
    REMOVE_OLD_NODES: false, // only MAX_NODES tx are kept on screen. Older tx are deleted first.
    PIN_OLD_NODES: true, // pinning old tx increases performance by disabling their physics ad thus excluding them from the layouting process
    LIGHT_LINKS: false,
    SPAWN_NODE_NEAR_FINAL_POSITION: true, // spawns new nodes close to their neighbours
    COLOR_BY_NUMBER: false, // color ty based on the order they appear on screen. Continuous hue rotation
    DARK_MODE: false,
    STATIC_FRONT: false, // spawn new nodes at one position and move tangle outwards

    // colors
    HIGHLIGHT_MULTIPLE_COLOR: 0xda4b29, // for tags, hash, bundle filter
    SAME_BUNDLE_COLOR: 0x1287ff,
    LIGHT_LINK_COLOR: 0x222222ff,
    LIGHT_NODE_COLOR: 0x000000ff,
    LIGHT_NODE_BG_COLOR: 0xffffff,
    NODE_CONFIRMED_COLOR: 0x000000,
    HIGHLIGHT_COLOR_FORWARD: 0xf1b727ff,
    HIGHLIGHT_COLOR_BACKWARD: 0xe23df4ff,
    NODE_MILESTONE_COLOR: 0xe53d6f,
    NODE_TIP_COLOR: 0x1fe0be,
    
    LINK_COLOR: 0,
    NODE_COLOR: 0,
    NODE_BG_COLOR: 0,

    // sizes
    NODE_CONFIRMED_BORDER_SIZE: 1,
    NODE_BASE_BORDER_SIZE: 0.8,
    NODE_MILESTONE_BORDER_SIZE: 0.6,
    NODE_TIP_BORDER_SIZE: 0.6,

    TITLE: "The Tangle",
    EXPLORER_TX_LINK: "https://thetangle.org/transaction/",
    EXPLORER_BUNDLE_LINK: "https://thetangle.org/bundle/",

    ...config
  };

  CONFIG.LINK_COLOR = CONFIG.LIGHT_LINK_COLOR;
  CONFIG.NODE_COLOR = CONFIG.LIGHT_NODE_COLOR;
  CONFIG.NODE_BG_COLOR = CONFIG.LIGHT_NODE_BG_COLOR;

  const Events = (() => {
    var topics = {};
    var hOP = topics.hasOwnProperty;

    return {
      on: (topic, listener) => {
        if (!hOP.call(topics, topic)) topics[topic] = [];
        var index = topics[topic].push(listener) - 1;
        return {
          remove: () => {
            delete topics[topic][index];
          }
        };
      },
      emit: (topic, info) => {
        if (!hOP.call(topics, topic)) return;

        topics[topic].forEach(item => {
          item(info);
        });
      }
    };
  })();

  const tangle = Events;

  // model object for node ui in webgl
  function WebglCircle(
    size,
    color,
    border_size = 0.5,
    border_color = parseInt("000000", 16)
  ) {
    this.size = size;
    this.color = color;
    this.border_size = border_size;
    this.border_color = border_color;
    this.confirmed = false;
    this.tip = true;
  }

  // implementation of API for custom shader
  // program, used by webgl renderer:
  function buildCircleNodeShader() {
    let webglUtils;
    // For each primitive we need 4 attributes: x, y, color and size.
    const ATTRIBUTES_PER_PRIMITIVE = 6,
      nodesFS = [
        "precision mediump float;",
        "varying vec4 color;",
        "varying vec4 border_color;",
        "varying float border_size;",
        "void main(void) {",
        "   if ((gl_PointCoord.x - 0.5) * (gl_PointCoord.x - 0.5) + (gl_PointCoord.y - 0.5) * (gl_PointCoord.y - 0.5) < 0.25 - border_size) {",
        "     gl_FragColor = color;",
        "   } else if ((gl_PointCoord.x - 0.5) * (gl_PointCoord.x - 0.5) + (gl_PointCoord.y - 0.5) * (gl_PointCoord.y - 0.5) < 0.25) {",
        "     gl_FragColor = border_color;",
        "   } else {",
        "     gl_FragColor = vec4(0);",
        "   }",
        "}"
      ].join("\n"),
      nodesVS = [
        "attribute vec2 a_vertexPos;",

        // Pack color and size into vector. First elemnt is color, second - size.
        // Since it's floating point we can only use 24 bit to pack colors...
        // thus alpha channel is dropped, and is always assumed to be 1.
        "attribute vec4 a_customAttributes;",
        "uniform vec2 u_screenSize;",
        "uniform mat4 u_transform;",
        "varying vec4 color;",
        "varying vec4 border_color;",
        "varying float border_size;",
        "void main(void) {",

        "   gl_Position = u_transform * vec4(a_vertexPos/u_screenSize, 0, 1);",
        "   gl_PointSize = a_customAttributes[1] * u_transform[0][0];",

        "   float c = a_customAttributes[0];",
        "   color.b = mod(c, 256.0); c = floor(c/256.0);",
        "   color.g = mod(c, 256.0); c = floor(c/256.0);",
        "   color.r = mod(c, 256.0); c = floor(c/256.0); color /= 255.0;",
        "   color.a = 1.0;",

        "   float bc = a_customAttributes[3];",
        "   border_color.b = mod(bc, 256.0); bc = floor(bc/256.0);",
        "   border_color.g = mod(bc, 256.0); bc = floor(bc/256.0);",
        "   border_color.r = mod(bc, 256.0); bc = floor(bc/256.0); border_color /= 255.0;",
        "   border_color.a = 1.0;",

        "   border_size = a_customAttributes[2]/4.0;",
        "}"
      ].join("\n");
    let program,
      gl,
      buffer,
      locations,
      utils,
      nodes = new Float32Array(64),
      nodesCount = 0,
      canvasWidth,
      canvasHeight,
      transform,
      isCanvasDirty;
    return {
      /**
       * Called by webgl renderer to load the shader into gl context.
       */
      load: function(glContext) {
        gl = glContext;
        webglUtils = Viva.Graph.webgl(glContext);
        program = webglUtils.createProgram(nodesVS, nodesFS);
        gl.useProgram(program);
        locations = webglUtils.getLocations(program, [
          "a_vertexPos",
          "a_customAttributes",
          "u_screenSize",
          "u_transform"
        ]);
        gl.enableVertexAttribArray(locations.vertexPos);
        gl.enableVertexAttribArray(locations.customAttributes);
        buffer = gl.createBuffer();
      },
      /**
       * Called by webgl renderer to update node position in the buffer array
       *
       * @param nodeUI - data model for the rendered node (WebGLCircle in this case)
       * @param pos - {x, y} coordinates of the node.
       */
      position: function(nodeUI, pos) {
        const idx = nodeUI.id;
        nodes[idx * ATTRIBUTES_PER_PRIMITIVE] = pos.x;
        nodes[idx * ATTRIBUTES_PER_PRIMITIVE + 1] = -pos.y;
        nodes[idx * ATTRIBUTES_PER_PRIMITIVE + 2] = nodeUI.color;
        nodes[idx * ATTRIBUTES_PER_PRIMITIVE + 3] = nodeUI.size;
        nodes[idx * ATTRIBUTES_PER_PRIMITIVE + 4] = nodeUI.border_size;
        nodes[idx * ATTRIBUTES_PER_PRIMITIVE + 5] = nodeUI.border_color;
      },
      /**
       * Request from webgl renderer to actually draw our stuff into the
       * gl context. This is the core of our shader.
       */
      render: function() {
        gl.useProgram(program);
        gl.bindBuffer(gl.ARRAY_BUFFER, buffer);
        gl.bufferData(gl.ARRAY_BUFFER, nodes, gl.DYNAMIC_DRAW);
        if (isCanvasDirty) {
          isCanvasDirty = false;
          gl.uniformMatrix4fv(locations.transform, false, transform);
          gl.uniform2f(locations.screenSize, canvasWidth, canvasHeight);
        }
        gl.vertexAttribPointer(
          locations.vertexPos,
          2,
          gl.FLOAT,
          false,
          ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT,
          0
        );
        gl.vertexAttribPointer(
          locations.customAttributes,
          4,
          gl.FLOAT,
          false,
          ATTRIBUTES_PER_PRIMITIVE * Float32Array.BYTES_PER_ELEMENT,
          2 * 4
        );
        gl.drawArrays(gl.POINTS, 0, nodesCount);
      },
      /**
       * Called by webgl renderer when user scales/pans the canvas with nodes.
       */
      updateTransform: function(newTransform) {
        transform = newTransform;
        isCanvasDirty = true;
      },
      /**
       * Called by webgl renderer when user resizes the canvas with nodes.
       */
      updateSize: function(newCanvasWidth, newCanvasHeight) {
        canvasWidth = newCanvasWidth;
        canvasHeight = newCanvasHeight;
        isCanvasDirty = true;
      },
      /**
       * Called by webgl renderer to notify us that the new node was created in the graph
       */
      createNode: function(node) {
        nodes = webglUtils.extendArray(
          nodes,
          nodesCount,
          ATTRIBUTES_PER_PRIMITIVE
        );
        nodesCount += 1;
      },
      /**
       * Called by webgl renderer to notify us that the node was removed from the graph
       */
      removeNode: function(node) {
        if (nodesCount > 0) {
          nodesCount -= 1;
        }
        if (node.id < nodesCount && nodesCount > 0) {
          // we do not really delete anything from the buffer.
          // Instead we swap deleted node with the "last" node in the
          // buffer and decrease marker of the "last" node. Gives nice O(1)
          // performance, but make code slightly harder than it could be:
          webglUtils.copyArrayPart(
            nodes,
            node.id * ATTRIBUTES_PER_PRIMITIVE,
            nodesCount * ATTRIBUTES_PER_PRIMITIVE,
            ATTRIBUTES_PER_PRIMITIVE
          );
        }
      },
      /**
       * This method is called by webgl renderer when it changes parts of its
       * buffers. We don't use it here, but it's needed by API (see the comment
       * in the removeNode() method)
       */
      replaceProperties: function(replacedNode, newNode) {}
    };
  }

  /**
   * VivaGraphJs wrapper
   */
  const VVG = (Viva => {
    const graph = Viva.Graph.graph();
    const graphics = Viva.Graph.View.webglGraphics();

    const layout = Viva.Graph.Layout.forceDirected(graph, {
      springLength: CONFIG.SPRINGLENGTH,
      springCoeff: CONFIG.SPRINGCOEFF,
      gravity: CONFIG.GRAVITY,
      dragCoeff: CONFIG.DRAGCOEFF,
      // dragCoeff: 0.02,
      // theta: 0.25,
      // theta: 0.8,default
      timeStep: CONFIG.TIMESTEP
    });

    const renderer = Viva.Graph.View.renderer(graph, {
      container: document.getElementById("graph"),
      graphics: graphics,
      layout
      // renderLinks : true,
      // prerender: 10000
    });

    const events = Viva.Graph.webglInputEvents(graphics, graph);

    const circleNode = buildCircleNodeShader();
    graphics.setNodeProgram(circleNode);
    // custom node shader
    graphics.node(() => {
      return new WebglCircle(10, 0x000000, 0, 0x000000);
    });

    renderer.run();

    return {
      graph,
      graphics,
      layout,
      renderer,
      events
    };
  })(Viva);

  /**
   *  Loading indicator
   */
  const Loading = (($, $container) => {
    $container.insertAdjacentHTML(
      "beforeend",
      ` <div class="loader-wrapper">
                <div class="loader"></div>
                <div class="progress"></div>
            </div>`
    );

    const $wrapper = $(".loader-wrapper");
    const $progress = $(".loader-wrapper .progress");

    let loading = true;
    function start() {
      loading = true;
      $wrapper.show();
    }

    function stop() {
      if (!loading) return;
      $wrapper.hide();
      $progress.text("");
      loading = false;
    }

    function progress(i, min = 0, max = 1) {
      if (i >= max) {
        $wrapper.hide();
        $progress.text("");
        return;
      }

      $wrapper.show();
      $progress.text(`${((i / (max - min)) * 100).toFixed(1)}%`);
    }

    return {
      start,
      stop,
      progress
    };
  })($, $container);

  Loading.start();

  /**
   * Set of efficient graph iterators
   */
  const Iterators = (VVG => {
    // depth first (maybe a bit faster)
    function dfsDirectedIterator(
      node,
      cb,
      up,
      cbLinks = false,
      seenNodes = []
    ) {
      seenNodes.push(node);
      let pointer = 0;

      while (seenNodes.length > pointer) {
        const node = seenNodes[pointer++];

        if (cb(node)) return true;

        for (const link of node.links) {
          if (cbLinks) cbLinks(link);

          if (
            !up &&
            link.toId === node.id &&
            !seenNodes.includes(VVG.graph.getNode(link.fromId))
          ) {
            seenNodes.push(VVG.graph.getNode(link.fromId));
          } else if (
            up &&
            link.fromId === node.id &&
            !seenNodes.includes(VVG.graph.getNode(link.toId))
          ) {
            seenNodes.push(VVG.graph.getNode(link.toId));
          }
        }
      }
    }

    // breadth first
    function bfsDirectedIterator(
      node,
      cb,
      up,
      cbLinks = false,
      seenNodes = []
    ) {
      let pointer = 0;
      seenNodes.push(node);

      while (seenNodes.length > pointer) {
        const node = seenNodes[pointer++];

        if (cb(node)) return true;

        const links = node.links;
        for (let i = 0; i < links.length; i++) {
          const link = links[i];
          if (cbLinks) cbLinks(link);

          if (
            !up &&
            link.toId === node.id &&
            seenNodes.indexOf(VVG.graph.getNode(link.fromId)) < 0
          ) {
            seenNodes.push(VVG.graph.getNode(link.fromId));
          } else if (
            up &&
            link.fromId === node.id &&
            seenNodes.indexOf(VVG.graph.getNode(link.toId)) < 0
          ) {
            seenNodes.push(VVG.graph.getNode(link.toId));
          }
        }
      }
    }

    function bfsIterator(node, cb, cbLinks = false, seenNodes = []) {
      let pointer = 0;
      seenNodes.push(node);

      while (seenNodes.length > pointer) {
        // const node = queue.pop()
        const node = seenNodes[pointer++];

        if (cb(node)) return true;

        for (const link of node.links) {
          if (cbLinks) cbLinks(link);

          if (!seenNodes.includes(VVG.graph.getNode(link.fromId)))
            seenNodes.push(VVG.graph.getNode(link.fromId));

          if (!seenNodes.includes(VVG.graph.getNode(link.toId)))
            seenNodes.push(VVG.graph.getNode(link.toId));
        }
      }
    }

    function iterateAllConnectedNodes(node, cb, cbLinks, seenNodes) {
      // VVG.graph.beginUpdate()
      bfsIterator(node, cb, cbLinks, seenNodes);
      // VVG.graph.endUpdate()
    }

    return {
      dfsDirectedIterator,
      bfsDirectedIterator,
      bfsIterator,
      iterateAllConnectedNodes
    };
  })(VVG);

  /**
   * Handles manipulation of individual graphs
   * removal of small graphs/orphans
   */
  const Graphs = ((CONFIG, VVG, Iterators) => {
    const smallGraphsQueue = {};
    let nodeNumber = 0;

    function addNode(nodeId, nodeNum) {
      nodeNumber = nodeNum;
      // rmove some nodes from queue here
      if (CONFIG.REMOVE_FLOATING_NODES)
        for (const link of VVG.graph.getNode(nodeId).links) {
          // if (smallGraphsQueue.hasOwnProperty(link.toId))
          if (typeof smallGraphsQueue[link.toId] !== "undefined")
            delete smallGraphsQueue[link.toId];
        }

      smallGraphsQueue[nodeId] = Date.now();

      if (VVG.graph.getNodesCount() - 100 > CONFIG.MAX_NODES) {
        // is not in delete queue and is root of graph
        if (CONFIG.REMOVE_OLD_NODES) removeOldNodes();
        if (CONFIG.PIN_OLD_NODES)
          // todo reorder this use lastpinnednode counter
          pinOldNodes();
      }

      const links = VVG.graph.getNode(nodeId).links;
      // if a linked node is in the del queu remove all from del queue
      if (
        isInDeleteQueue(links[0].toId) ||
        (links[1] && isInDeleteQueue(links[1].toId))
      ) {
        Iterators.iterateAllConnectedNodes(VVG.graph.getNode(nodeId), node => {
          if (deleteQueue.indexOf(node.id) >= 0)
            deleteQueue.splice(deleteQueue.indexOf(node.id), 1);
        });
      }
    }

    function isInDeleteQueue(nodeId) {
      // maybe add an .toDelete flag to the object
      return deleteQueue.indexOf(nodeId) >= 0;
    }

    // Concept: keep a list of all not connected graphs. Remove a graph when the last element has been added before REMOVE_LONLY_AFTER_S time.
    function removeSmallGraphs() {
      const numberOfNodes = VVG.graph.getNodesCount();
      // if the expected effort to calculate all mesh sizes for item in sGQ is larger than number of nodes, reduce the SGQ first O(n)
      if (LOG) console.log(Object.keys(smallGraphsQueue).length);
      if (
        Object.keys(smallGraphsQueue).length *
          CONFIG.REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH >
        2
      ) {
        //4/0.03=133 - give it some room to work with. queu gets automatically reduced
        updateGraphsList();
      }
      for (const nodeId in smallGraphsQueue) {
        // shortcut when just added
        if (
          Date.now() - smallGraphsQueue[nodeId] <=
          CONFIG.REMOVE_LONLY_AFTER_S * 1000
        )
          continue;

        // remove all redundant items from array (one per graph is enough)

        let lastTime = 0;
        let lastTimeId = nodeId;
        const nodes = [];

        Iterators.iterateAllConnectedNodes(VVG.graph.getNode(nodeId), node => {
          // if (smallGraphsQueue.hasOwnProperty(node.id)) { // remove the node from the queue
          if (typeof smallGraphsQueue[node.id] !== "undefined") {
            // remove the node from the queue
            if (lastTime < smallGraphsQueue[node.id]) {
              lastTimeId = node.id;
              lastTime = smallGraphsQueue[node.id];
            }
            delete smallGraphsQueue[node.id];
          }
          nodes.push(node);
          return (
            nodes.length >=
            CONFIG.REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH * numberOfNodes
          );
          // return (nodes.length >= CONFIG.REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH * numberOfNodes || now - lastTime < CONFIG.REMOVE_LONLY_AFTER_S * 1000)// remove the last part to shorten the nodes graph regularly
        });

        smallGraphsQueue[lastTimeId] = lastTime;
        if (
          nodes.length <
            CONFIG.REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH *
              numberOfNodes &&
          Date.now() - lastTime > CONFIG.REMOVE_LONLY_AFTER_S * 1000
        ) {
          if (LOG)
            console.log(
              "mesh of size: " +
                nodes.length +
                " is smaller than " +
                CONFIG.REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH * 100 +
                "% of the total node count: " +
                CONFIG.REMOVE_SMALLER_THAN_PERCENTAGE_OF_TOTAL_MESH *
                  numberOfNodes
            );

          for (const node of nodes) addToDeleteQueue(node.id);
          // VVG.graph.removeNode(node.id)
        }
      }
      if (LOG) console.log(Object.keys(smallGraphsQueue).length);
    }

    const deleteQueue = [];

    function addToDeleteQueue(nodeId) {
      // if (Stats.tps > 100) {
      //     // performance optimisation
      //     VVG.graph.removeNode(nodeId)
      //     return
      // }

      if (deleteQueue.indexOf(nodeId) < 0) deleteQueue.push(nodeId);

      if (deleteQueue.length == 1) processDeleteQueue();
    }

    const DELETE_QUEUE_INTERVAL = 50;
    let deleteNodeCount = 0;

    // to not delete bulks of nodes at once, a delete queue is used. It gradually removes nodes one at a time.
    function processDeleteQueue() {
      if (deleteQueue.length > 0) {
        if (LOG) console.log("delete queue len", deleteQueue.length);

        setTimeout(() => {
          do {
            const nodeToDelete = deleteQueue.shift();
            const selectedNode = Selection.getSelectedNode();
            if (
              nodeToDelete &&
              (!selectedNode || nodeToDelete != selectedNode.id)
            ) {
              if (smallGraphsQueue[nodeToDelete]) {
                // todo change root here?
                delete smallGraphsQueue[nodeToDelete];
              }
              //todo may kill performance
              for (const link of VVG.graph.getNode(nodeToDelete).links) {
                smallGraphsQueue[
                  link.toId == nodeToDelete ? link.fromId : link.toId
                ] = Date.now();
              }

              VVG.graph.removeNode(nodeToDelete);
              deleteNodeCount++;
            } else {
              if (LOG) console.log("not deleted");
            }
          } while (deleteQueue.length > 200);
          processDeleteQueue();
        }, DELETE_QUEUE_INTERVAL);
      }
    }

    function updateGraphsList() {
      for (const nodeId in smallGraphsQueue) {
        // remove all redundant items from array (one per graph is enough)
        let lastTime = 0;
        let lastTimeId = nodeId;

        if (LOG) console.log("iter");

        Iterators.iterateAllConnectedNodes(VVG.graph.getNode(nodeId), node => {
          // much faster than hasOwnProperty
          if (typeof smallGraphsQueue[node.id] !== "undefined") {
            // remove the node from the queue
            if (lastTime < smallGraphsQueue[node.id]) {
              //make sure the root is always the newest node
              lastTimeId = node.id;
              lastTime = smallGraphsQueue[node.id];
            }
            delete smallGraphsQueue[node.id];
          }
        });
        smallGraphsQueue[lastTimeId] = lastTime;
      }
    }

    function getNodePerGraph() {
      updateGraphsList(); //todo update graph independent of removing items
      return smallGraphsQueue;
    }

    function iterateAllNodes(cb = false, linkCb = false) {
      if (linkCb && !cb) {
        VVG.graph.forEachLink(linkCb);
      } else if (cb && !linkCb) {
        VVG.graph.forEachNode(cb);
      } else if (cb && linkCb) {
        const nodes = getNodePerGraph();
        for (const nodeId in nodes) {
          Iterators.iterateAllConnectedNodes(
            VVG.graph.getNode(nodeId),
            cb,
            linkCb
          );
        }
      }
    }

    function removeOldNodes() {
      const count = VVG.graph.getNodesCount() - deleteQueue.length;
      const toDeleteCount = count - CONFIG.MAX_NODES;
      const maxNumberToDelete = nodeNumber - toDeleteCount;

      let numberToDelete = toDeleteCount;
      VVG.graph.forEachNode(node => {
        if (node.number <= maxNumberToDelete) {
          addToDeleteQueue(node.id);

          if (LOG) console.log("removed node", node.id);
          if (--numberToDelete <= 1) return true; // break when deleted enough
        }
      });
    }

    function isDeleteQueueEmpty() {
      return deleteQueue.length == 0;
    }

    let highestPinnedNumber = 0;

    function pinOldNodes() {
      const delFraction = deleteNodeCount / nodeNumber;
      const unpinnedNodes =
        (nodeNumber - highestPinnedNumber) * (1 - delFraction); //assume the deleted nodes are evenly distributed
      if (unpinnedNodes > CONFIG.MAX_NODES + 150) {
        const toPinCount = unpinnedNodes - CONFIG.MAX_NODES; //2
        const maxNumberToPin =
          (highestPinnedNumber + toPinCount) * (1 + delFraction); //4
        let numberToPin = toPinCount;
        VVG.graph.forEachNode(node => {
          if (node.number <= maxNumberToPin) {
            VVG.layout.pinNode(node, true);
            if (node.number > highestPinnedNumber) {
              if (LOG) console.log("pinned node", node.id);
              if (--numberToPin <= 1) {
                if (LOG) console.log("breaking -----------");
                return true; // break when pinned enough
              }
            }
          }
        });
        highestPinnedNumber = highestPinnedNumber + toPinCount;
      }
    }

    function unpinOldNodes() {
      highestPinnedNumber = 0;
      VVG.graph.forEachNode(node => {
        VVG.layout.pinNode(node, false);
      });
    }

    return {
      addNode,
      removeSmallGraphs,
      getNodePerGraph,
      iterateAllNodes,
      isDeleteQueueEmpty,
      unpinOldNodes
    };
  })(CONFIG, VVG, Iterators);

  setInterval(() => {
    if (CONFIG.REMOVE_FLOATING_NODES) Graphs.removeSmallGraphs();
  }, 1000 * CONFIG.REMOVE_LONLY_AFTER_S);

  /**
   * Stores and applies Node styles
   */
  const Styles = (Graphs => {
    const filters = [];
    let cacheDirty = false;

    function clearCache() {
      cacheDirty = true;
      update();
    }

    /**
     * Applies the specified filters for all nodes or one, if given.
     * Styles are only applied to all nodes after a filter change.
     * @param {VivaGraph.Node} node
     */
    function update(node) {
      if (node) {
        for (const filter of filters) {
          filter(node);
        }
      } else if (cacheDirty) {
        cacheDirty = false;
        Graphs.iterateAllNodes(node => {
          for (const filter of filters) {
            filter(node);
          }
        });
      }
    }

    function add(filter) {
      cacheDirty = true;

      filters.push(filter);
      update();
      return filter;
    }

    function remove(filter) {
      cacheDirty = true;
      filters.splice(filters.indexOf(filter), 1);
      update();
    }

    return {
      add,
      remove,
      update,
      clearCache
    };
  })(Graphs);

  /**
   * Applies base colors according to CONFIG
   */
  const Color = ((CONFIG, VVG) => {
    function colorNode(node) {
      const ui = VVG.graphics.getNodeUI(node.id);
      ui.border_color = CONFIG.NODE_COLOR >>> 8;
      if (node.tip) {
        ui.color = CONFIG.NODE_TIP_COLOR;
        ui.border_size = CONFIG.NODE_TIP_BORDER_SIZE;
      } else if (node.milestone) {
        ui.border_size = CONFIG.NODE_MILESTONE_BORDER_SIZE;
        ui.color = CONFIG.NODE_MILESTONE_COLOR;
      } else if (node.confirmed) {
        ui.border_size = CONFIG.NODE_CONFIRMED_BORDER_SIZE;
        ui.color = CONFIG.NODE_CONFIRMED_COLOR;
      } else {
        ui.border_size = CONFIG.NODE_BASE_BORDER_SIZE;
        ui.color = CONFIG.NODE_BG_COLOR;
      }
    }

    function colorLink(link) {
      const ui = VVG.graphics.getLinkUI(link.id);
      ui.color = CONFIG.LINK_COLOR;
    }
    return {
      colorNode,
      colorLink
    };
  })(CONFIG, VVG);

  Styles.add(Color.colorNode);
  Styles.add(node => {
    const nodeUI = VVG.graphics.getNodeUI(node.id);
    nodeUI.size = CONFIG.CIRCLE_SIZE;
  });

  /**
   * Formatting big numbers by addinf SI prefixes
   */
  const Format = (() => {
    const ranges = [
      {
        divider: 1e18,
        suffix: "P"
      },
      {
        divider: 1e15,
        suffix: "E"
      },
      {
        divider: 1e12,
        suffix: "T"
      },
      {
        divider: 1e9,
        suffix: "G"
      },
      {
        divider: 1e6,
        suffix: "M"
      },
      {
        divider: 1e3,
        suffix: "k"
      }
    ];

    function formatNumber(n) {
      for (let i = 0; i < ranges.length; i++) {
        if (Math.abs(n) >= ranges[i].divider) {
          return (n / ranges[i].divider).toFixed(2) + ranges[i].suffix;
        }
      }
      return n.toFixed(2);
    }

    return {
      formatNumber
    };
  })();

  const UI = ($container => {
    const mainLeftTop = `<div id="title">
            <h1>${CONFIG.TITLE} <small id="network"></small></h1>
            <div class="legend">
                <span class="circle" id="tip"></span> tip <br>
                <span class="circle" id="milestone"></span> milestone <br>
                <span class="circle" id="node"></span> transaction <br>
                <span class="circle" id="confirmed"></span> confirmed <br>
                <br> select a transaction to view<br>
                <span class="circle" id="confirmed-by-tx"></span> <span id="confirmed-by-count"></span> confirmed by tx<br>
                <span class="circle" id="confirming-tx"></span> <span id="confirming-count"></span> confirming tx<br>
                <span class="circle" id="bundle"></span> same bundle <br>
            </div>
            <div class="filter">
                <br> enter a tx hash<br>
                <input id="hash-input" type="text" name="hash" placeholder="hash">
                <span id="hash-info"></span>
                <br> enter a tag<br>
                <input id="tag-input" type="text" name="tag" placeholder="tag or regex">
                <span id="tag-info"></span>
                <br> enter a bundle-hash<br>
                <input id="bundle-hash-input" type="text" name="bundle-hash" placeholder="bundle-hash">
                <span id="bundle-hash-info"></span>
            </div>
        </div>`;
    $container.insertAdjacentHTML("beforeend", mainLeftTop);

    return {
      setNetworkName: name =>
        (document.getElementById("network").innerText = name)
    };
  })($container);

  /**
   * Highlights selected nodes and updates infoboxes
   */
  const Selection = ((VVG, Iterators, Format, $) => {
    let hoveredNode = null;
    let selectedNode = null;
    let activeNode = null;

    function hasChildren(node) {
      let children = false;
      VVG.graph.forEachLinkedNode(
        node.id,
        () => {
          children = true;
          return true;
        },
        true
      );

      return children;
    }

    function selectNodeAndChildren(node) {
      const nodeUI = VVG.graphics.getNodeUI(node.id);
      if (!nodeUI) return;
      nodeUI.size = CONFIG.CIRCLE_SIZE * 1.6;

      VVG.layout.pinNode(node, true);

      const seenNodesBackwards = [],
        seenNodesForward = []; // to get the nodes count
      const bh = (node.data || {}).bundle_hash;

      Iterators.dfsDirectedIterator(
        node,
        node => {
          const nodeUI = VVG.graphics.getNodeUI(node.id);
          nodeUI.border_color = CONFIG.HIGHLIGHT_COLOR_BACKWARD >>> 8;

          //same color when same bundle
          if (bh && bh === ((node || {}).data || {}).bundle_hash)
            nodeUI.border_color = CONFIG.SAME_BUNDLE_COLOR;
        },
        true,
        link => {
          const linkUI = VVG.graphics.getLinkUI(link.id);
          linkUI.color = CONFIG.HIGHLIGHT_COLOR_BACKWARD;
        },
        seenNodesBackwards
      );
      Iterators.dfsDirectedIterator(
        node,
        node => {
          const nodeUI = VVG.graphics.getNodeUI(node.id);
          nodeUI.border_color = CONFIG.HIGHLIGHT_COLOR_FORWARD >>> 8;

          //same color when same bundle
          if (bh && bh === ((node || {}).data || {}).bundle_hash)
            nodeUI.border_color = CONFIG.SAME_BUNDLE_COLOR;
        },
        false,
        link => {
          const linkUI = VVG.graphics.getLinkUI(link.id);
          linkUI.color = CONFIG.HIGHLIGHT_COLOR_FORWARD;
        },
        seenNodesForward
      );

      if (!hasChildren(node))
        VVG.graphics.getNodeUI(node.id).border_color =
          CONFIG.HIGHLIGHT_COLOR_BACKWARD >>> 8;

      return {
        seenNodesBackwards,
        seenNodesForward
      };
    }

    function deselectNodeAndChildren(node) {
      const nodeUI = VVG.graphics.getNodeUI(node.id);
      if (!nodeUI) return; //node may heve been deleted while hovering
      nodeUI.border_color = CONFIG.NODE_COLOR >>> 8;
      Styles.update(node);

      VVG.layout.pinNode(node, false);

      Iterators.dfsDirectedIterator(
        node,
        node => Styles.update(node),
        true,
        link => Color.colorLink(link)
      );
      Iterators.dfsDirectedIterator(
        node,
        node => Styles.update(node),
        false,
        link => Color.colorLink(link)
      );
    }

    function recursivelyColor(
      node,
      nodeColor,
      linkColor,
      backwards = false,
      seenNodes = []
    ) {
      const nodeId = node.id;
      const links = node.links;
      // skip seen nodes
      if (seenNodes.includes(nodeId)) {
        return;
      }
      seenNodes.push(nodeId);

      const nodeUI = VVG.graphics.getNodeUI(node.id);
      nodeUI.border_color = nodeColor >>> 8;

      //same color when same bundle
      const bh = ((VVG.graph.getNode(seenNodes[0]) || {}).data || {})
        .bundle_hash;
      if (bh && bh === ((node || {}).data || {}).bundle_hash)
        nodeUI.border_color = CONFIG.SAME_BUNDLE_COLOR;

      for (let i = 0; i < links.length; i++) {
        const link = links[i];

        if (backwards && link.toId === nodeId) {
          recursivelyColor(
            VVG.graph.getNode(link.fromId),
            nodeColor,
            linkColor,
            backwards,
            seenNodes
          );
          const linkUI = VVG.graphics.getLinkUI(link.id);
          linkUI.color = linkColor;
        } else if (!backwards && link.fromId === nodeId) {
          recursivelyColor(
            VVG.graph.getNode(link.toId),
            nodeColor,
            linkColor,
            backwards,
            seenNodes
          );
          const linkUI = VVG.graphics.getLinkUI(link.id);
          linkUI.color = linkColor;
        }
      }
    }

    function selectNode(node) {
      if (selectedNode) deselectNodeAndChildren(selectedNode);
      if (hoveredNode) deselectNodeAndChildren(hoveredNode);

      if (node) {
        selectedNode = node;
        activeNode = node;
      } else {
        selectedNode = null;
        activeNode = hoveredNode;
      }
      updateActiveNodeSelection();
    }

    function hoverNode(node) {
      if (selectedNode) deselectNodeAndChildren(selectedNode);
      if (hoveredNode) deselectNodeAndChildren(hoveredNode);

      if (node) {
        hoveredNode = node;
        activeNode = node;
      } else {
        hoveredNode = null;
        activeNode = selectedNode;
      }
      updateActiveNodeSelection();
    }

    const $txInfoContainer = document.createElement("div");
    $txInfoContainer.setAttribute("id", "tx-info");
    $container.appendChild($txInfoContainer);

    const $confirmedByCount = $("#confirmed-by-count");
    const $confirmingCount = $("#confirming-count");

    function updateActiveNodeSelection() {
      if (activeNode) {
        const linkedNodes = selectNodeAndChildren(activeNode);

        if (typeof activeNode.data !== "undefined") {
          const node = Selection.getActiveNode();
          $txInfoContainer.innerHTML =
            "value: " +
            Format.formatNumber(+node.data.value) +
            "i" +
            "<br>" +
            "tx tag: " +
            node.data.tag +
            "<br>" +
            "tx hash: " +
            ((CONFIG.EXPLORER_TX_LINK) ? "<a href='" + CONFIG.EXPLORER_TX_LINK + node.data.hash + "' >" + node.data.hash + "</a>" : node.data.hash) +
            "<br>" +
            "bundle hash (" +
            node.data.current_index +
            "|" +
            node.data.last_index +
            "): " +
            ((CONFIG.EXPLORER_BUNDLE_LINK) ? "<a href='" + CONFIG.EXPLORER_BUNDLE_LINK + node.data.bundle_hash + "' >" + node.data.bundle_hash + "</a>" : node.data.bundle_hash) +
            "<br>";
        }
        $confirmingCount.text(linkedNodes.seenNodesForward.length - 1);
        $confirmedByCount.text(linkedNodes.seenNodesBackwards.length - 1);
      } else {
        $txInfoContainer.innerHTML = "";
        $confirmingCount.text("");
        $confirmedByCount.text("");
      }

      VVG.renderer.rerender(); // rerender when selection or hover changed
    }

    function getActiveNode() {
      return activeNode;
    }

    function getSelectedNode() {
      return selectedNode;
    }

    //#region Mouseevents

    let mouseOverNode = null;
    VVG.events
      .mouseEnter(function(node) {
        document.body.style.cursor = "pointer";
        hoverNode(node);
        mouseOverNode = node;
      })
      .mouseLeave(function() {
        document.body.style.cursor = "default";
        hoverNode();
        mouseOverNode = null;
      });

    let isDragging = false;
    $("canvas")
      .mousedown(function() {
        isDragging = false;
      })
      .mousemove(function() {
        isDragging = true;
      })
      .mouseup(function() {
        const wasDragging = isDragging;
        isDragging = false;
        if (LOG) console.log(wasDragging);
        if (!wasDragging) {
          selectNode(mouseOverNode);
        }
      });
    //#endregion

    return {
      selectNode,
      hoverNode,
      updateActiveNodeSelection,
      getActiveNode,
      getSelectedNode
    };
  })(VVG, Iterators, Format, $);

  /**
   * Positioning and scale
   */
  const Viewport = (VVG => {
    function zoom(desiredScale, currentScale, tries) {
      tries = tries || 0;
      if (tries > 30) return;
      // zoom API in vivagraph 0.5.x is silly. There is no way to pass transform
      // directly. Maybe it will be fixed in future, for now this is the best I could do:
      if (Math.abs(desiredScale - currentScale) < 0.01) return;

      if (desiredScale < currentScale) {
        currentScale = VVG.renderer.zoomOut();
        // setTimeout(function() {
        zoom(desiredScale, currentScale, ++tries);
        // }, 16);
      } else if (desiredScale > currentScale) {
        currentScale = VVG.renderer.zoomIn();
        // setTimeout(function() {
        zoom(desiredScale, currentScale, ++tries);
        // }, 16);
      }
    }

    function fit() {
      const graphRect = VVG.layout.getGraphRect();
      if (LOG) console.log(graphRect);
      const graphSize = Math.min(
        graphRect.x2 - graphRect.x1,
        graphRect.y2 - graphRect.y1
      );
      const screenSize = Math.min(
        document.body.clientWidth,
        document.body.clientHeight
      );

      const desiredScale = screenSize / graphSize;

      if (LOG) console.log(desiredScale);
      VVG.renderer.moveTo(0, 0);
      zoom(desiredScale, VVG.renderer.zoomOut());
    }

    function moveTo(x, y) {
      VVG.renderer.moveTo(x, y);
    }

    return {
      zoom,
      fit,
      moveTo
    };
  })(VVG);

  $("body").keypress(e => {
    if (event.ctrlKey && event.key === "f") {
      // the enter key code
      e.preventDefault();
      Viewport.fit();
      return false;
    }
  });

  Viewport.zoom(0.1, 1);

  /**
   * Selection of TX based on hash, bundle hash
   */
  const Filter = ((VVG, Selection, $, Viewport) => {
    function selectNodeByHash(hash) {
      $("#hash-input").val(hash);
      const nodeId = hash;
      if (VVG.graph.getNode(nodeId)) {
        const pos = VVG.layout.getNodePosition(nodeId);
        Viewport.moveTo(pos.x, pos.y);
        Selection.selectNode(VVG.graph.getNode(nodeId));

        $("#hash-info").text("");
      } else {
        $("#hash-info").text("hash not found (yet)");
      }
    }

    $("#hash-input").keypress(function(e) {
      const key = e.which;
      if (key == 13 || event.key === "Enter") {
        // the enter key code
        e.preventDefault();
        selectNodeByHash(
          $("#hash-input")
            .val()
            .trim()
        );
        return false;
      }
    });

    function highlightNode(node, color) {
      const nodeUI = VVG.graphics.getNodeUI(node.id);
      nodeUI.border_color = color;
      nodeUI.size = CONFIG.CIRCLE_SIZE * 1.4;
    }

    let tag_filter = false;

    function selectNodesByTag(tag) {
      $("#tag-input").val(tag);

      if (tag_filter) {
        Styles.remove(tag_filter);
        tag_filter = false;
      }
      const tagRegex = tag;

      if (tagRegex.length == 0) return;

      const R = new RegExp(tagRegex, "i");
      tag_filter = Styles.add(node => {
        if (node.data && node.data.tag.match(R)) {
          highlightNode(node, CONFIG.HIGHLIGHT_MULTIPLE_COLOR);
        }
      });
    }
    $("#tag-input").keypress(function(e) {
      const key = e.which;
      if (key == 13 || event.key === "Enter") {
        // the enter key code
        e.preventDefault();
        selectNodesByTag(
          $("#tag-input")
            .val()
            .trim()
        );
        return false;
      }
    });

    let bundle_hash_filter = false;
    function selectNodesByBundle(bundle_hash) {
      if (bundle_hash_filter) {
        Styles.remove(bundle_hash_filter);
        bundle_hash_filter = false;
      }

      if (bundle_hash.length == 0) return;

      bundle_hash_filter = Styles.add(node => {
        if (node.data && node.data.bundle_hash === bundle_hash) {
          highlightNode(node, CONFIG.SAME_BUNDLE_COLOR);
        }
      });
    }

    $("#bundle-hash-input").keypress(function(e) {
      const key = e.which;
      if (key == 13 || event.key === "Enter") {
        // the enter key code
        e.preventDefault();

        const bundle_hash = $("#bundle-hash-input")
          .val()
          .trim();

        selectNodesByBundle(bundle_hash);
        return false;
      }
    });

    return {
      selectNodeByHash,
      selectNodesByTag,
      selectNodesByBundle
    };
  })(VVG, Selection, $, Viewport);

  const ImageSVGExport = ((Graphs, VVG) => {
    return {
      init: () => {
        function getNode(n, v) {
          n = document.createElementNS("http://www.w3.org/2000/svg", n);
          for (const p in v)
            n.setAttributeNS(
              null,
              p.replace(/[A-Z]/g, function(m) {
                return "-" + m.toLowerCase();
              }),
              v[p]
            );
          return n;
        }

        function createSVG() {
          function getGraphBoundingBox() {
            const bbx = {
              x1: Number.MAX_VALUE,
              x2: Number.MIN_VALUE,
              y1: Number.MAX_VALUE,
              y2: Number.MIN_VALUE
            };
            Graphs.iterateAllNodes(n => {
              const pos = VVG.layout.getNodePosition(n.id);
              if (pos.x > bbx.x2) bbx.x2 = pos.x;
              if (pos.x < bbx.x1) bbx.x1 = pos.x;
              if (pos.y > bbx.y2) bbx.y2 = pos.y;
              if (pos.y < bbx.y1) bbx.y1 = pos.y;
            });
            return bbx;
          }
          const bbx = getGraphBoundingBox();
          const svg = getNode("svg", {
            width: bbx.x2,
            height: bbx.y2,
            viewBox:
              bbx.x1 +
              " " +
              bbx.y1 +
              " " +
              (bbx.x2 - bbx.x1) +
              " " +
              (bbx.y2 - bbx.y1)
          });

          function addCircle(x, y, radius, stroke, color, strokeColor) {
            const r = getNode("circle", {
              cx: x,
              cy: y,
              r: radius,
              strokeWidth: stroke * radius,
              fill: "#" + color.toString(16),
              stroke: "#" + strokeColor.toString(16)
            });
            svg.appendChild(r);
          }

          function addLink(x1, y1, x2, y2, strokeWidth, strokeColor) {
            const r = getNode("line", {
              x1,
              x2,
              y1,
              y2,
              strokeWidth,
              stroke: "#" + strokeColor.toString(16)
            });
            svg.appendChild(r);
          }

          Graphs.iterateAllNodes(false, link => {
            const pos = VVG.layout.getLinkPosition(link.id);
            const ui = VVG.graphics.getLinkUI(link.id);
            addLink(
              pos.from.x,
              pos.from.y,
              pos.to.x,
              pos.to.y,
              3,
              ui.color >>> 8
            );
          });

          Graphs.iterateAllNodes(node => {
            const pos = VVG.layout.getNodePosition(node.id);
            const nodeUI = VVG.graphics.getNodeUI(node.id);

            addCircle(
              pos.x,
              pos.y,
              nodeUI.size * 0.45,
              nodeUI.border_size,
              nodeUI.color,
              nodeUI.border_color
            );
          });

          const svgBlob = new Blob([svg.outerHTML], {
            type: "image/svg+xml;charset=utf-8"
          });
          const svgUrl = URL.createObjectURL(svgBlob);
          const downloadLink = document.createElement("a");
          downloadLink.href = svgUrl;
          downloadLink.download = "tangle.svg";
          document.body.appendChild(downloadLink);
          downloadLink.click();
          document.body.removeChild(downloadLink);
        }

        const $button = $(`<button style="
                                    position: fixed;
                                    top: 10px;
                                    left: 10px;
                                    ">capture SVG</button>`).on("click", () => {
          createSVG();
        });

        $("body").append($button);
      }
    };
  })(Graphs, VVG);

  const UrlParams = ((Filter, ImageSVGExport) => {
    //#region HANDLE URL PARAMETERS

    function initAfterNodesAdded() {
      if (urlParams.has("hash")) {
        Filter.selectNodeByHash(urlParams.get("hash"));
      } else if (urlParams.has("tag")) {
        Filter.selectNodesByTag(urlParams.get("tag"));
      } else if (urlParams.has("bundle")) {
        Filter.selectNodesByBundle(urlParams.get("bundle"));
      }

      if (urlParams.has("tool")) {
        const script = document.createElement("script");
        script.src = urlParams.get("tool") + ".js";
        document.head.appendChild(script);
      }
      if (urlParams.has("clean")) {
        $("div")
          .not("#graph")
          .hide();
      }
      if (urlParams.has("svg")) {
        ImageSVGExport.init();
      }
    }
    //#endregion

    return {
      initAfterNodesAdded
    };
  })(Filter, ImageSVGExport);

  /**
   * Main networking and node handling
   */
  const App = ((
    VVG,
    tangle,
    Color,
    Styles,
    Graphs,
    Iterators,
    UrlParams,
    Loading
  ) => {
    let nodeNumber = 0;
    let pinnedNodesqueue = [
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null
    ];
    let pinnedNodesPointer = 0;

    function addNode(data) {
      if (LOG) console.log(data);

      let tip = true;

      let node = VVG.graph.getNode(data.hash);
      if (
        !node &&
        (!data.transaction_branch || !data.transaction_trunk || !data.hash)
      ) {
        console.warn(
          "new node must contail all required fields [branch,trunk,hash]"
        );
        return;
      }

      if (CONFIG.SPAWN_NODE_NEAR_FINAL_POSITION) VVG.graph.beginUpdate();
      if (!node) {
        const spawnPosition = CONFIG.STATIC_FRONT
          ? { x: Math.random() * 100, y: Math.random() * 100 }
          : undefined;

        node = VVG.graph.addNode(data.hash, data, spawnPosition);

        if (!node.number && CONFIG.STATIC_FRONT) {
          //no number => new node
          VVG.layout.pinNode(node, true);
          pinnedNodesqueue[pinnedNodesPointer] = node;
          pinnedNodesPointer = ++pinnedNodesPointer % 10;

          if (pinnedNodesqueue[pinnedNodesPointer])
            VVG.layout.pinNode(pinnedNodesqueue[pinnedNodesPointer], false);
        }
      }
      // adding link implicitly add nodes if not present
      // todo make sure links are only added once
      // also readd links whe node  exists to account for readding part of the tangle
      if (
        data.transaction_branch &&
        !node.links.some(link => link.fromId === data.transaction_branch)
      ) {
        VVG.graph.addLink(data.transaction_branch, data.hash);
      }
      if (
        data.transaction_trunk &&
        !node.links.some(link => link.fromId === data.transaction_trunk)
      ) {
        VVG.graph.addLink(data.transaction_trunk, data.hash);
      }

      if (CONFIG.SPAWN_NODE_NEAR_FINAL_POSITION) VVG.graph.endUpdate();

      for (const link of node.links) {
        Color.colorLink(link);
      }

      node.milestone = data.milestone;
      // node.confirmed = data.confirmed
      node.tip = tip;
      node.number = node.number || ++nodeNumber; //increment number only if not exists

      // process links
      for (const link of VVG.graph.getNode(data.hash).links) {
        const node = VVG.graph.getNode(link.fromId);
        const nodeto = VVG.graph.getNode(link.toId);
        node.number = node.number || ++nodeNumber;
        node.tip = false;
        node.confirmed = nodeto.milestone || data.confirmed || nodeto.confirmed;

        Styles.update(node);
      }

      Styles.update(node);

      Graphs.addNode(data.hash, nodeNumber);

      if (node.milestone) {
        processNewMilestone(data.hash);
      }
    }

    function processNewMilestone(nodeId) {
      const ui = VVG.graphics.getNodeUI(nodeId);
      if (ui) {
        Iterators.dfsDirectedIterator(
          //todo stop when confirmed tx reached
          VVG.graph.getNode(nodeId),
          node => {
            processNewConfirmed(node.id);
          },
          false
        );
        const node = VVG.graph.getNode(nodeId);
        if (node) {
          node.milestone = true;
          if (LOG) console.log("ms found", ui);
          Styles.update(node);
        }
      }
    }

    function processNewConfirmed(nodeId) {
      const node = VVG.graph.getNode(nodeId);
      if (node) {
        node.confirmed = true;
        // if(LOG)console.log('sn found', ui)
        Styles.update(node);
      }
    }

    function removeNode(nodeID) {
      VVG.graph.removeNode(nodeID);
    }

    //#region Network

    tangle.on("update", txs => {
      for (const tx of txs) {
        addNode(tx);
      }
    });

    tangle.on("remove", txs => {
      if (!txs || txs.length == 0) {
        VVG.graph.forEachNode(N => removeNode(N.id));
      } else {
        for (const tx of txs) {
          removeNode(tx.hash || tx);
        }
      }
    });

    //#endregion
  })(VVG, tangle, Color, Styles, Graphs, Iterators, UrlParams, Loading);

  setInterval(() => {
    // check for new children to color
    Selection.updateActiveNodeSelection();
    Styles.update();
  }, 3000);

  // eslint-disable-next-line no-unused-vars
  function getGraphBoundingBox(node) {
    const bbx = {
      x1: Number.MAX_VALUE,
      x2: Number.MIN_VALUE,
      y1: Number.MAX_VALUE,
      y2: Number.MIN_VALUE
    };
    Iterators.iterateAllConnectedNodes(node, n => {
      const pos = VVG.layout.getNodePosition(n.id);
      if (pos.x > bbx.x2) bbx.x2 = pos.x;
      if (pos.x < bbx.x1) bbx.x1 = pos.x;
      if (pos.y > bbx.y2) bbx.y2 = pos.x;
      if (pos.y < bbx.y1) bbx.y1 = pos.x;
    });
    return bbx;
  }

  /**
   * View and graph options
   */
  const Options = ((CONFIG, Iterators, $container) => {
    const $optionContainer = document.createElement("div");
    $optionContainer.setAttribute("id", "options");
    $container.appendChild($optionContainer);

    let OPTIONS = {};

    function createToggleOption(id, name, desc) {
      $optionContainer.insertAdjacentHTML(
        "beforeend",
        `<div class="option" data-tooltip="${desc} [${id}]">
                    <label class="option-label" for="${id}" >
                        <span>${name}</span>
                        <input class="tgl tgl-light" id="${id}" type="checkbox" />
                        <div class="tgl-btn"></div>
                    </label>
                </div>`
      );

      let listener;
      let initial = true;
      const onChange = () => {};

      const api = {
        onChange: cb => {
          listener = cb;
        },
        set: val => {
          if (listener && (CONFIG[id] !== val || initial)) {
            // val has changed or is initial call
            listener(val);
            CONFIG[id] = val;
            document.getElementById(id).checked = !!val;
            initial = false;
          }
        }
      };

      document.getElementById(id).addEventListener("change", event => {
        api.set(event.target.checked);
      });

      OPTIONS[id] = api;
      return api;
    }

    function calculateConfirms(node, confirms, mode) {
      let c = 0;
      Iterators.dfsDirectedIterator(
        node,
        () => {
          c++;
        },
        mode
      );
      confirms[node.id] = c;
    }

    let size_filter = false;
    createToggleOption("SIZE_BY_DEPTH", "size by # of confirms").onChange(
      function(checked) {
        if (CONFIG.SIZE_BY_VALUE) OPTIONS.SIZE_BY_VALUE.set(false);
        if (CONFIG.SIZE_BY_WEIGHT) OPTIONS.SIZE_BY_WEIGHT.set(false);

        if (size_filter) {
          Styles.remove(size_filter);
          size_filter = false;
        }

        if (checked) {
          const confirms = {};

          Graphs.iterateAllNodes(node => {
            calculateConfirms(node, confirms, true);
          });

          size_filter = Styles.add(node => {
            if (!confirms.hasOwnProperty(node.id))
              calculateConfirms(node, confirms, true);

            const nodeUI = VVG.graphics.getNodeUI(node.id);
            nodeUI.size =
              10 + (confirms[node.id] / VVG.graph.getNodesCount()) * 80;
          });
        }
      }
    );

    createToggleOption("SIZE_BY_WEIGHT", "size by weight").onChange(function(
      checked
    ) {
      if (CONFIG.SIZE_BY_VALUE) OPTIONS.SIZE_BY_VALUE.set(false);
      if (CONFIG.SIZE_BY_DEPTH) OPTIONS.SIZE_BY_DEPTH.set(false);

      if (size_filter) {
        Styles.remove(size_filter);
        size_filter = false;
      }

      if (checked) {
        const confirms = {};

        Graphs.iterateAllNodes(node => {
          calculateConfirms(node, confirms, false);
        });

        size_filter = Styles.add(node => {
          if (!confirms.hasOwnProperty(node.id))
            calculateConfirms(node, confirms, false);

          const nodeUI = VVG.graphics.getNodeUI(node.id);
          nodeUI.size =
            10 + (confirms[node.id] / VVG.graph.getNodesCount()) * 80;
        });
      }
    });

    createToggleOption("SIZE_BY_VALUE", "size by value", "").onChange(function(
      checked
    ) {
      if (CONFIG.SIZE_BY_DEPTH) OPTIONS.SIZE_BY_DEPTH.set(false);
      if (CONFIG.SIZE_BY_WEIGHT) OPTIONS.SIZE_BY_WEIGHT.set(false);

      if (size_filter) {
        Styles.remove(size_filter);
        size_filter = false;
      }

      if (checked) {
        let maxVal = 0;
        Graphs.iterateAllNodes(node => {
          if (node.data && node.data.value && +node.data.value > maxVal)
            maxVal = +node.data.value;
        });
        if (LOG) console.log("maxval", maxVal);
        size_filter = Styles.add(node => {
          if (node.data && node.data.value && node.data.value > maxVal)
            Styles.clearCache();

          // if(LOG)console.log('size', (node.data && node.data.value) ? 1 + (CONFIG.CIRCLE_SIZE *  node.data.value/maxVal): 1)
          const nodeUI = VVG.graphics.getNodeUI(node.id);
          nodeUI.size =
            node.data && node.data.value
              ? 1 +
                Math.sqrt(
                  1 +
                    (Math.abs(+node.data.value) / maxVal) *
                      CONFIG.CIRCLE_SIZE *
                      CONFIG.CIRCLE_SIZE
                )
              : 1;
        });
      }
    });

    function hslToHex(h, s, l) {
      h /= 360;
      s /= 100;
      l /= 100;
      let r, g, b;
      if (s === 0) {
        r = g = b = l; // achromatic
      } else {
        const hue2rgb = (p, q, t) => {
          if (t < 0) t += 1;
          if (t > 1) t -= 1;
          if (t < 1 / 6) return p + (q - p) * 6 * t;
          if (t < 1 / 2) return q;
          if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;
          return p;
        };

        const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
        const p = 2 * l - q;
        r = hue2rgb(p, q, h + 1 / 3);
        g = hue2rgb(p, q, h);
        b = hue2rgb(p, q, h - 1 / 3);
      }
      r = ~~(255 * r); // to int ~~
      g = ~~(255 * g); // to int ~~
      b = ~~(255 * b); // to int ~~

      return b | (g << 8) | (r << 16);
    }

    let color_by_number_filter = false;
    createToggleOption(
      "COLOR_BY_NUMBER",
      "color by order",
      "colors the tx based on the order they were attached"
    ).onChange(function(checked) {
      if (color_by_number_filter) {
        Styles.remove(color_by_number_filter);
        color_by_number_filter = false;
      }

      if (checked) {
        color_by_number_filter = Styles.add(node => {
          const nodeUI = VVG.graphics.getNodeUI(node.id);
          nodeUI.border_color = hslToHex((node.number % 3600) / 10, 80, 50);
        });
      }
    });

    createToggleOption(
      "REMOVE_FLOATING_NODES",
      "remove floating tx",
      "floating tx attach to an old, not displayed, part of the tangle"
    ).onChange(function(checked) {});
    createToggleOption(
      "PIN_OLD_NODES",
      "pin old tx",
      "improves performance by not calculating physics"
    ).onChange(function(checked) {
      if (!checked) Graphs.unpinOldNodes();
    });
    createToggleOption(
      "REMOVE_OLD_NODES",
      `limit to ${Format.formatNumber(CONFIG.MAX_NODES)} tx`,
      "improves performance by removing old tx"
    ).onChange(function(checked) {});
    createToggleOption(
      "SPAWN_NODE_NEAR_FINAL_POSITION",
      "reduce movement",
      "spawning new tx next to their referenced nodes"
    ).onChange(function(checked) {});
    createToggleOption("LIGHT_LINKS", "lighten links", "").onChange(function(
      checked
    ) {
      CONFIG.LINK_COLOR = checked
        ? 0xaaaaaaff
        : CONFIG.DARK_MODE
        ? 0xeeeeeeff
        : CONFIG.LIGHT_LINK_COLOR;
      Graphs.iterateAllNodes(false, link => Color.colorLink(link));
      // Graphs.iterateAllNodes((node) => Color.colorNode(node), (link) => Color.colorLink(link))
    });
    createToggleOption("DARK_MODE", "dark mode", "").onChange(function(
      checked
    ) {
      CONFIG.LINK_COLOR = checked ? 0xeeeeeeff : CONFIG.LIGHT_LINK_COLOR;
      CONFIG.NODE_COLOR = checked ? 0xeeeeeeff : CONFIG.LIGHT_NODE_COLOR;
      CONFIG.NODE_BG_COLOR = checked ? 0x333333 : CONFIG.LIGHT_NODE_BG_COLOR;
      Graphs.iterateAllNodes(false, link => Color.colorLink(link));
      Styles.clearCache();
      $("body").toggleClass("dark-mode", checked);
    });
    createToggleOption(
      "STATIC_FRONT",
      "center tangle",
      "new tx spawn in the center and tangles moves outwards"
    ).onChange(function(checked) {
      if (checked) {
        VVG.layout.setForce(CONFIG.FORCE);
      } else {
        VVG.layout.setForce({ x: 0, y: 0 });
      }
      $("body").toggleClass("dark-mode", CONFIG.DARK_MODE);
    });
    createToggleOption(
      "PAUSE_RENDERING",
      "freeze tangle",
      "stop node movement for better inspection"
    ).onChange(function(checked) {
      if (checked) {
        VVG.renderer.pause();
      } else {
        VVG.renderer.resume();
      }
    });

    function updateParameter(key, value) {
      if (OPTIONS.hasOwnProperty(key)) {
        OPTIONS[key].set(value);
      }
    }

    // set default config
    for (const key in CONFIG) {
      if (CONFIG.hasOwnProperty(key)) {
        const config = CONFIG[key];
        updateParameter(key, config);
      }
    }

    return { updateParameter };
  })(CONFIG, Iterators, $container);

  const handle = tangle.on("update", () => {
    Loading.stop();
    handle.remove();
  });

  return {
    updateTx: tx => {
      tangle.emit("update", tx);
    },
    removeTx: tx => {
      tangle.emit("remove", tx);
    },
    getTxByHash: VVG.graph.getNode,
    setNetworkName: UI.setNetworkName,
    setOption: Options.updateParameter
  };
};

'''
'''--- webroot/tangleGenerator.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>the IOTA tangle</title>
  <link rel="stylesheet" href="main.css">
  <script src="lib/vivagraph.js"></script>
  <script src="main.js"></script>
  <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g=" crossorigin="anonymous"></script>

  <meta name="application-name" content="The IOTA TAngle" />
  <meta name="theme-color" content="#ffffff">

  <meta property="og:image" content="http://tangle.glumb.de/image.png" />

  <meta name="description" content="See the IOTA Tangle in action.">
</head>

<body>
  <div class="graph" id="graph"></div>
  <button id="tangle-it">custom Tangle</button>
  <script type="application/javascript">
    const tg = TangleGlumb(document.getElementById('graph'), {
      CIRCLE_SIZE: 60,
      PIN_OLD_NODES: false,
      STATIC_FRONT: false
    })

    const NUMBER_NODES = 4000
    const TANGLE_WIDTH = 60
    const TPS = 100

    const mockTxGenerator = (numberOfTx, tangleWidth, tps) => {

      let hashRb = [],
        rbPointer = 0;

      for (let i = 0; i < tangleWidth; i++) {
        hashRb.push(Math.random() * 1000);
      }

      let hash = 1000

      function createTX() {
        const tx = {
          hash: hash + '',
          address: "$addr$",
          value: Math.floor(Math.random() * 10),
          timestamp: Date.now(),
          bundle_hash: "$bundle_hash$" + Math.floor(hash / 30),
          transaction_branch: hashRb[Math.floor(Math.random() * tangleWidth)] + '',
          transaction_trunk: hashRb[Math.floor(Math.random() * tangleWidth)] + '',
          // milestone: (hash == 1999),
          milestone: (Math.random() > 0.99),
          tag: "$tag$",
        }
        if (Math.random() < 0.2) {
          tx.transaction_branch = (hash - 1000 * Math.random()) + ''
        }
        rbPointer = ++rbPointer %
          tangleWidth;
        hashRb[rbPointer] = tx.hash;

        hash++

        return tx
      }

      // setInterval(() => {
      //   tg.updateTx([createTX()])
      // }, SEND_INTERVAL);

      let txs = []
      for (let i = 0; i < numberOfTx; i++) {
        txs.push(createTX())
      }
      let stop = false

      function unrollTx(cb, resolve) {
        if (txs.length == 0 || stop) {
          resolve()
          return
        }
        for (let i = 0; i < tps / 10 && txs.length > 0; i++) {
          cb(txs.shift())
        }
        setTimeout(() => unrollTx(cb, resolve), 1000 / (tps / 10))
      }

      return {
        start: (cb) => {
          const p = new Promise((resolve, rej) => {
            unrollTx(cb, resolve)
          })
          return p
        },
        stop: () => stop = true
      }
    }

    let genHandle = null
    var button = document.getElementById("tangle-it");
    button.addEventListener("click", function (e) {
      if (genHandle) genHandle.stop()
      const nodes = window.prompt('A tangle just for you. Specify number of nodes', 1000);
      const width = window.prompt('Specify width', 10);
      const tps = window.prompt('Specify TPS', 10);
      tg.removeTx()
      genHandle = mockTxGenerator(nodes, width, tps)
      genHandle.start((tx) => {
        tg.updateTx([tx])
      }).then(() => console.log('done'))
    }, false);

    genHandle = mockTxGenerator(NUMBER_NODES, TANGLE_WIDTH, TPS)
    genHandle.start((tx) => {
      tg.updateTx([tx])
    }).then(() => console.log('done'))

    // tg.removeTx()
  </script>
  <style>
    button#tangle-it {
      position: absolute;
      bottom: 10px;
      right: 10px;
    }
  </style>
</body>

</html>
'''
'''--- webroot/tangleglumb.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>the IOTA tangle</title>
  <link rel="stylesheet" href="main.css">
  <script src="lib/vivagraph.js"></script>
  <script src="main.js"></script>
  <script src="http://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g=" crossorigin="anonymous"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>

  <meta name="application-name" content="The IOTA TAngle" />
  <meta name="theme-color" content="#ffffff">

  <meta property="og:image" content="http://tangle.glumb.de/image.png" />

  <meta name="description" content="See the IOTA Tangle in action.">
</head>

<body>
  <div class="graph" id="graph"></div>

  <script type="application/javascript">
    const tg = TangleGlumb(document.getElementById('graph'), {
      CIRCLE_SIZE: 60,
      PIN_OLD_NODES: false,
      STATIC_FRONT: false
    })

    const socket = io.connect('http://tangle.glumb.de:80', {
      transports: ['websocket'],
    })

    socket.on('inittx', txs => {
      tg.updateTx(txs)
    })

    socket.on('initms', msHashes => {
      tg.updateTx(msHashes.map(hash => ({
        hash,
        milestone: true
      })))
    })

    socket.on('tx', tx => {
      tg.updateTx([tx])
    })

    socket.on('config', config => {
      tg.setNetworkName(config.networkName)
    })

    socket.on('ms', hash => {
      tg.updateTx([{
        hash,
        milestone: true
      }])
    })
  </script>

</body>

</html>
'''
'''--- webroot/tangleglumbTimemachine.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="utf-8">
  <title>the IOTA tangle</title>
  <link rel="stylesheet" href="main.css">
  <script src="lib/vivagraph.js"></script>
  <script src="main.js"></script>
  <script src="http://code.jquery.com/jquery-3.2.1.slim.min.js"
    integrity="sha256-k2WSCIexGzOj3Euiig+TlR8gA0EmPjuc79OEeY5L45g=" crossorigin="anonymous"></script>
  <script src="http://cdnjs.cloudflare.com/ajax/libs/socket.io/2.2.0/socket.io.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.0.2/nouislider.min.js"
    integrity="sha256-VG+4f1Hm2q4e+DTEOaiZKlWjJm5W4yqnXNvKkWBYA20=" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.0.2/nouislider.min.css"
    integrity="sha256-6pa9Ln4B/FyHlxOYaXuwpET9xH0e21iX0SPLg9P5Ro0=" crossorigin="anonymous" />

  <meta name="application-name" content="The IOTA TAngle" />
  <meta name="theme-color" content="#ffffff">

  <meta property="og:image" content="http://tangle.glumb.de/image.png" />

  <meta name="description" content="See the IOTA Tangle in action.">
</head>

<body>
  <div class="slider-container">
    <div id="slider"></div>
    <div id="play-pause" class="play-button"></div>
  </div>
  <div class="graph" id="graph"></div>

  <script type="application/javascript">
    const tg = TangleGlumb(document.getElementById('graph'), {
      CIRCLE_SIZE: 60,
      PIN_OLD_NODES: false,
      STATIC_FRONT: false,
      DARK_MODE: false
    })

    var slider = document.getElementById('slider');

    noUiSlider.create(slider, {
      start: [0, 100],
      connect: [false, true, false],
      range: {
        'min': [0],
        'max': [100]
      },
      tooltips: [false, true],
      format: {
        // 'to' the formatted value. Receives a number.
        to: function (value) {
          return value.toFixed(0);
        },
        // 'from' the formatted value.
        // Receives a string, should return a number.
        from: function (value) {
          return +value;
        }
      }
    });

    const TimeMachine = (tangle) => {
      const TX_BUFFER_SIZE = 3000
      let isLive = false
      let isLiveListener
      let txBuffer = []
      let txBufferStartPointer = 0
      let txBufferEndPointer = 0

      function showTxRange(start, end) {
        if (start < 0 || start > txBuffer.length || end < 0 || end > txBuffer.length || start > end) {
          console.warn(`start ${start} and end ${end} invalid. buff length: ${txBuffer.length}`)
          return
        }

        const dStart = start - txBufferStartPointer //70 - 100 = -30 | 100 - 10 = 90
        const dEnd = end - txBufferEndPointer // 70 - 100 = -30 | 2100 - 2000 = 100

        if (dStart < 0) { // add to front
          tangle.updateTx(txBuffer.slice(start, end))
        } else if (dStart > 0) {
          tangle.removeTx(txBuffer.slice(txBufferStartPointer, start))
        }

        if (dEnd < 0) { // add to front
          tangle.removeTx(txBuffer.slice(end, txBufferEndPointer))
        } else if (dEnd > 0) {
          tangle.updateTx(txBuffer.slice(txBufferEndPointer, end))
        }

        txBufferStartPointer = start
        txBufferEndPointer = end
      }

      return {
        onLiveChange: (cb) => isLiveListener = cb, //poor mans event handling
        setLive: (live) => {
          if (isLive !== live) {
            isLive = live
            isLiveListener && isLiveListener(isLive)
          }
        },
        getLive: () => isLive,
        getBufferLength: () => txBuffer.length,
        showTxRange,
        addTx: (tx) => {
          // console.log('adding tx');
          txBuffer.push(tx)

          slider.noUiSlider.updateOptions({
            range: {
              'min': 0,
              'max': txBuffer.length
            }
          })
          if (isLive) {
            slider.noUiSlider.set([null, txBuffer.length]);
            showTxRange(txBufferStartPointer, txBuffer.length)
          }

        }
      }
    }

    function debounce(func, wait, immediate) {
      var timeout;
      return function () {
        var context = this,
          args = arguments;
        var later = function () {
          timeout = null;
          if (!immediate) func.apply(context, args);
        };
        var callNow = immediate && !timeout;
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
        if (callNow) func.apply(context, args);
      };
    };

    const TM = TimeMachine(tg)

    slider.noUiSlider.on('slide',
      debounce((sliders) => {
        TM.showTxRange(Math.round(+sliders[0]), Math.round(+sliders[1]))
        TM.setLive(TM.getBufferLength() <= Math.round(+sliders[1]) + 5)
      }, 10)
    );

    var button = document.getElementById("play-pause");
    button.addEventListener("click", function (e) {
      const targetState = !TM.getLive();
      TM.setLive(targetState)
    }, false);

    const rightHandle = document.querySelector("#slider div.noUi-handle.noUi-handle-upper")
    TM.onLiveChange((isLive) => {

      if (!isLive) {
        rightHandle.classList.remove("live")
        button.classList.remove("paused")
      } else {
        rightHandle.classList.add("live")
        button.classList.add("paused");
      }
    })

    TM.setLive(true)

    const socket = io.connect('http://tangle.glumb.de:80', {
      transports: ['websocket'],
    })

    socket.on('inittx', txs => {
      txs.forEach(tx => TM.addTx(tx))
    })

    socket.on('initms', msHashes => {
      msHashes.forEach(hash => TM.addTx({
        hash,
        milestone: true
      }))
    })

    socket.on('tx', tx => {
      TM.addTx(tx)
    })

    socket.on('config', config => {
      tg.setNetworkName(config.networkName)
    })

    socket.on('ms', hash => {
      TM.addTx({
        hash,
        milestone: true
      })
    })

    // tg.removeTx()
  </script>
  <style>
    div#tx-info {
      bottom: 60px;
    }

    div#slider {
      height: 10px;
      border: 0px;
      background: #f1f1f1;
      border-radius: 0px;
    }

    #slider div.noUi-handle.noUi-handle-upper,
    #slider div.noUi-handle.noUi-handle-lower {
      height: 10px;
      right: -5px;
      width: 10px;
      top: 0px;
      border: 0px;
      box-shadow: none;
      background: #60af8b;
      border-radius: 50%;
    }

    #slider div.noUi-handle.noUi-handle-upper.live {
      background: #e0314d;
    }

    .noUi-connect {
      background: #9fd6ae;
    }

    div.noUi-handle:after,
    div.noUi-handle:before {
      background: none;
      height: 0px;
      width: 0px;
    }

    .slider-container {
      position: absolute;
      z-index: 999;
      bottom: 25px;
      left: 20px;
      right: 36px;
    }

    .noUi-touch-area {
      cursor: pointer;
    }

    .noUi-horizontal .noUi-tooltip {
      border: 0px;
      background: #272727;
      color: white;
      border-radius: 5px;
      bottom: 140%;
    }

    .noUi-connects::before,
    .noUi-connects::after {
      content: "";
      display: block;
      width: 10px;
      height: 10px;
      position: absolute;
      top: 0px;
      border-radius: 100%;
    }

    .noUi-connects::before {
      background: #cccccc;
      left: -5px;
    }

    .noUi-connects::after {
      cursor: pointer;
      background: #e0314d;
      right: -5px;
    }

    .noUi-connects {
      overflow: visible;
    }

    #slider div:focus {
      outline: none !important;
    }

    .play-button {
      position: absolute;
      border: 0;
      background: transparent;
      box-sizing: border-box;
      width: 0;
      height: 10px;
      border-color: #0000 #0000 #0000 #3a3a3a;
      transition: 100ms all ease;
      cursor: pointer;

      /* play state */
      border-style: solid;
      border-width: 5px 0 5px 8px;
      top: 0px;
      right: -20px;
    }

    .play-button.paused {
      border-style: double;
      border-width: 0px 0 0px 8px;
    }

    .dark-mode .play-button {
      border-color: #0000 #0000 #0000 #fff;
    }
  </style>

</body>

</html>
'''