*GitHub Repository "AbdelrahmanHamdy1996/near-generative-nft-landing-page"*

'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/favicon.png" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Manrope:wght@500;600;700&display=swap"
      rel="stylesheet"
    />
    <script
      type="text/javascript"
      src="https://addevent.com/libs/atc/1.6.1/atc.min.js"
      async
      defer
    ></script>

    <title>Nearkat NFT</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/Main.js ---
import React, { useEffect, useContext } from 'react';
import { appStore, onAppMount } from './state/app';
import RenderRoutes from './components/RenderRoutes';
import Layout from './layouts/Layout';
import routes from './routes';
import './styles/Main.scss';

const Main = () => {
  const { dispatch } = useContext(appStore);

  const onMount = () => {
    dispatch(onAppMount());
  };

  useEffect(onMount, []);
  return (
    <Layout>
      <RenderRoutes routes={routes} />
    </Layout>
  );
};

export default Main;

'''
'''--- src/components/Buy/BuyMore/index.js ---
export { default } from './BuyMore';

'''
'''--- src/components/Buy/index.js ---
export { default } from './Buy';

'''
'''--- src/components/BuyMoreBtn/index.js ---
export { default } from './BuyMoreBtn';

'''
'''--- src/components/ConnectWalletBtn/index.js ---
export { default } from './ConnectWalletBtn';

'''
'''--- src/components/FAQ/index.js ---
export { default } from './FAQ';

'''
'''--- src/components/Generate/index.js ---
export { default } from './Generate';

'''
'''--- src/components/GenerateCountBtn/index.js ---
export { default } from './GenerateCountBtn';

'''
'''--- src/components/Hero/index.js ---
export { default } from './Hero';

'''
'''--- src/components/Learn/index.js ---
export { default } from './Learn';

'''
'''--- src/components/Loader/Loader.js ---
import React from 'react';

const Loader = () => (
  <div className="lds-ring">
    <div></div>
    <div></div>
    <div></div>
    <div></div>
  </div>
);

export default Loader;

'''
'''--- src/components/Loader/index.js ---
export { default } from './Loader';

'''
'''--- src/components/Navigation/Navigation.js ---
import React from 'react';
import PropTypes from 'prop-types';
import { Link } from 'react-router-dom';

const Navigation = ({ className, signedIn }) => (
  <nav className={`navigation ${className || ''}`}>
    <ul className="navigation__list">
      <li className="navigation__list-item">
        <Link to="/#learn" className="navigation__link">
          Learn
        </Link>
      </li>
      <li className="navigation__list-item">
        <Link to="/#rarity" className="navigation__link">
          Rarity
        </Link>
      </li>
      <li className="navigation__list-item">
        <Link to="/#faq" className="navigation__link">
          FAQ
        </Link>
      </li>
      <li className="navigation__list-item">
        <Link to="/#roadmap" className="navigation__link">
          Roadmap
        </Link>
      </li>
      {signedIn && (
        <>
          <li className="navigation__list-item">
            <Link to="/my-nfts" className="navigation__link">
              My NFTs
            </Link>
          </li>
          <li className="navigation__list-item">
            <Link to="/link-drop" className="navigation__link">
              LinkDrop
            </Link>
          </li>
        </>
      )}
    </ul>
  </nav>
);

Navigation.propTypes = {
  className: PropTypes.string,
  signedIn: PropTypes.bool,
};

Navigation.defaultProps = {
  className: '',
  signedIn: false,
};

export default Navigation;

'''
'''--- src/components/Navigation/index.js ---
export { default } from './Navigation';

'''
'''--- src/components/NearkatsList/index.js ---
export { default } from './NearkatsList';

'''
'''--- src/components/NftItem/NftItem.js ---
/* eslint-disable jsx-a11y/click-events-have-key-events */
/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */
import React, { useState } from 'react';
import { ReactSVG } from 'react-svg';
import PropTypes from 'prop-types';
import NftItemInfo from '../NftItemInfo';
import revealIcon from '../../assets/images/reveal.svg';
import rarity from '../../assets/images/rarity-common.svg';

const NftItem = ({ item, onClick, isHide, urlIpfs }) => {
  const [reveal, setReveal] = useState(isHide);

  const handleClick = () => {
    setReveal(true);
    onClick({ [item.title]: true });
  };

  return (
    <div className="nft-item">
      {reveal ? (
        <>
          <img
            className="nft-item__img"
            src={`${urlIpfs}/${item.media}`}
            alt="nearkat"
          />
          <div className="nft-item__footer">
            <p className="nft-item__hash"># {item?.title?.padStart(5, '0')}</p>
            <ReactSVG src={item.rarity || rarity} />
          </div>
          <NftItemInfo
            className="nft-item__info"
            item={item}
            urlIpfs={urlIpfs}
          />
        </>
      ) : (
        <li className="reveal__item" onClick={handleClick}>
          <div className="reveal__image">
            <ReactSVG className="reveal__icon" src={revealIcon} />

            <div className="reveal__question-sign">
              ?<span className="reveal__question-sign-big">?</span>?
            </div>
            <div className="reveal__text-hover">Reveal</div>
          </div>
          <div className="reveal__title">
            <span># {item?.title?.padStart(5, '0')}</span>
            <div className="reveal__question-grey">?</div>
          </div>
        </li>
      )}
    </div>
  );
};

NftItem.propTypes = {
  item: PropTypes.object,
  onClick: PropTypes.func,
  isHide: PropTypes.bool,
  urlIpfs: PropTypes.string,
};

NftItem.defaultProps = {
  item: {},
  onClick: () => {},
};

export default NftItem;

'''
'''--- src/components/NftItem/index.js ---
export { default } from './NftItem';

'''
'''--- src/components/NftItemInfo/NftItemInfo.js ---
import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import { ReactSVG } from 'react-svg';
import rarity from '../../assets/images/rarity-common.svg';

const NftItemInfo = ({ className, item, urlIpfs }) => {
  const nftInfo = useRef();
  const [info, setInfo] = useState([]);

  useEffect(async () => {
    try {
      const response = await fetch(`${urlIpfs}/${item.reference}`);
      const data = await response.json();

      setInfo(data);
    } catch (e) {
      // eslint-disable-next-line
      console.log(e);
    }
  }, []);

  useEffect(() => {
    const { right } = nftInfo?.current?.getBoundingClientRect();

    if (right > window.innerWidth) {
      nftInfo.current.style.transform = 'translateX(-100%)';
    }
  }, []);

  return (
    <div ref={nftInfo} className={`nft-item-info  ${className || ''}`}>
      <div className="nft-item-info__icon-wrapper">
        <div className="nft-item-info__image-wrapper">
          <img
            className="nft-item-info__image"
            src={`${urlIpfs}/${item.media}`}
            alt="nearkat"
          />
        </div>
        <p className="nft-item-info__number">
          # {item?.title?.padStart(5, '0')}
        </p>
        <ReactSVG
          className="nft-item-info__rarity"
          src={item.rarity || rarity}
        />
      </div>
      <div className="nft-item-info__stats">
        <p key={info.value + info.trait_type}>repo : {info.repo}</p>
      </div>
    </div>
  );
};

NftItemInfo.propTypes = {
  className: PropTypes.string,
  item: PropTypes.object,
  urlIpfs: PropTypes.string,
};
export default NftItemInfo;

'''
'''--- src/components/NftItemInfo/index.js ---
export { default } from './NftItemInfo';

'''
'''--- src/components/NftList/NftList.js ---
import React, { useContext } from 'react';
import NftItem from '../NftItem';
import { appStore } from '../../state/app';

const NftList = () => {
  const { state, update } = useContext(appStore);
  const { app } = state;

  const handleClick = (revealNearkats) => {
    const newRevealNearkats = { ...app.revealNearkats, ...revealNearkats };

    update('app', { revealNearkats: newRevealNearkats });
    localStorage.setItem('revealNearkats', JSON.stringify(newRevealNearkats));
  };

  return (
    <div className="nfts-list">
      {app.nearkatsArray.map((item) => (
        <NftItem
          key={item.token_id}
          item={item.metadata}
          isHide={app.revealNearkats[item.token_id]}
          urlIpfs={app.urlIpfs}
          onClick={handleClick}
        />
      ))}
    </div>
  );
};

export default NftList;

'''
'''--- src/components/NftList/index.js ---
export { default } from './NftList';

'''
'''--- src/components/NoNfts/index.js ---
export { default } from './NoNfts';

'''
'''--- src/components/Price/index.js ---
export { default } from './Price';

'''
'''--- src/components/Rarity/index.js ---
export { default } from './Rarity';

'''
'''--- src/components/Rarity/rarityData.js ---
import shortid from 'shortid';
import common from '../../assets/images/rarity-common.svg';
import uncommon from '../../assets/images/rarity-uncommon.svg';
import rare from '../../assets/images/rarity-rare.svg';
import veryRare from '../../assets/images/rarity-very-rare.svg';
import superRare from '../../assets/images/rarity-super-rare.svg';

import rateKat1 from '../../assets/images/rarity-rate-kat1.svg';
import rateKat2 from '../../assets/images/rarity-rate-kat2.svg';
import rateKat3 from '../../assets/images/rarity-rate-kat3.svg';
import rateKat4 from '../../assets/images/rarity-rate-kat4.svg';

const rarityData = {
  rates: [
    {
      id: shortid.generate(),
      svgIcon: common,
      count: '7,500',
      text: 'Common',
    },
    {
      id: shortid.generate(),
      svgIcon: uncommon,
      count: '1,250',
      text: 'Uncommon',
    },
    {
      id: shortid.generate(),
      svgIcon: rare,
      count: '750',
      text: 'Rare',
    },
    {
      id: shortid.generate(),
      svgIcon: veryRare,
      count: '350',
      text: 'Very Rare',
    },
    {
      id: shortid.generate(),
      svgIcon: superRare,
      count: '150',
      text: 'Super Rare',
    },
  ],
  kats: [
    {
      id: shortid.generate(),
      svgRarityIcon: common,
      srcImg: './images/rarity-kat1.png',
      svgRate: rateKat1,
      palette: 2,
      clothes: 3,
      hat: 2,
    },
    {
      id: shortid.generate(),
      svgRarityIcon: superRare,
      srcImg: './images/rarity-kat2.png',
      svgRate: rateKat2,
      palette: 5,
      clothes: 5,
      hat: 5,
    },
    {
      id: shortid.generate(),
      svgRarityIcon: veryRare,
      srcImg: './images/rarity-kat3.png',
      svgRate: rateKat3,
      palette: 3,
      clothes: 3,
      hat: 4,
    },
    {
      id: shortid.generate(),
      svgRarityIcon: veryRare,
      srcImg: './images/rarity-kat4.png',
      svgRate: rateKat4,
      palette: 3,
      clothes: 3,
      hat: 4,
    },
  ],
};

export default rarityData;

'''
'''--- src/components/RateList/index.js ---
export { default } from './RateList';

'''
'''--- src/components/RenderRoutes/RenderRoutes.js ---
import React from 'react';
import { Switch, Redirect } from 'react-router';
import PropTypes from 'prop-types';
import RouteWithSubRoutes from './RouteWithSubRoutes';
import ScrollToTop from '../ScrollToTop';

const RenderRoutes = ({ routes }) => (
  <>
    <Switch>
      {routes.map((route) => (
        <RouteWithSubRoutes key={route.key} {...route} />
      ))}
      <Redirect to="/" />
    </Switch>
    <ScrollToTop />
  </>
);

RenderRoutes.propTypes = {
  routes: PropTypes.array,
};

export default RenderRoutes;

'''
'''--- src/components/RenderRoutes/RouteWithSubRoutes/RouteWithSubRoutes.js ---
import React from 'react';
import { Route } from 'react-router';

export const RouteWithSubRoutes = (route) => {
  const { path, exact, routes } = route;
  return (
    <Route
      path={path}
      exact={exact}
      render={(props) => <route.component {...props} routes={routes} />}
    />
  );
};

export default RouteWithSubRoutes;

'''
'''--- src/components/RenderRoutes/RouteWithSubRoutes/index.js ---
export { default } from './RouteWithSubRoutes';

'''
'''--- src/components/RenderRoutes/index.js ---
export { default } from './RenderRoutes';

'''
'''--- src/components/Roadmap/index.js ---
export { default } from './Roadmap';

'''
'''--- src/components/ScrollToTop/index.js ---
export { default } from './ScrollToTop';

'''
'''--- src/components/ShareSocialLinks/index.js ---
export { default } from './ShareSocialLinks';

'''
'''--- src/components/SocialLinks/index.js ---
export { default } from './SocialLinks';

'''
'''--- src/config.js ---
// const contractName =
//   process.env.REACT_APP_CONTRACT_NAME || 'minimov2.tenk.testnet';
const contractName = process.env.REACT_APP_CONTRACT_NAME || 'v0.tenk.testnet';

export default function getConfig() {
  let config = {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    contractName,
    GAS: '300000000000000',
    DEFAULT_NEW_ACCOUNT_AMOUNT: '5',
    contractMethods: {
      changeMethods: [
        'nft_mint_one',
        'nft_mint_many',
        'create_linkdrop',
        'nft_transfer',
      ],
      viewMethods: [
        'cost_per_token',
        'discount',
        'token_storage_cost',
        'total_cost',
        'nft_supply_for_owner',
        'nft_total_supply',
        'nft_tokens',
        'nft_tokens_for_owner',
        'tokens_left',
        'cost_of_linkdrop',
        'nft_metadata',
        'get_key_balance',
      ],
    },
  };

  if (process.env.REACT_APP_ENV === 'prod') {
    config = {
      ...config,
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      contractName: 'near',
    };
  }

  return config;
}

'''
'''--- src/data.js ---
import { NEAR } from 'near-units';
import { KeyPairEd25519 } from 'near-api-js/lib/utils/key_pair';
import { GAS } from './state/near';

export function fakeLinkDropGenerate(contract) {
  const keyPair = KeyPairEd25519.fromRandom();
  const url = WALLET_URL(
    contract.account.accountId,
    keyPair.secretKey.toString(),
    window.location.href,
  );
}

const WALLET_URL = (account, key, url) =>
  `https://wallet.testnet.near.org/linkdrop/${account}/${key}?redirectUrl=${url}`;

export async function linkDropGenerate(contract) {
  const keyPair = KeyPairEd25519.fromRandom();
  console.log('keyPait:', keyPair);

  const cost = await contract.total_cost({ num: 1 });

  const url = WALLET_URL(
    contract.contractId,
    keyPair.secretKey.toString(),
    window.location.href,
  );

  const linkDropArray = JSON.parse(localStorage.getItem('linkDropArray'));
  localStorage.setItem('linkDropArray', [...linkDropArray, url]);

  await contract.create_linkdrop(
    {
      public_key: keyPair.getPublicKey().toString(),
    },
    GAS,
    NEAR.parse('2').add(NEAR.from(cost)),
  );

  return url;
}

'''
'''--- src/hooks/useBuy.js ---
import { useState, useEffect, useContext } from 'react';
import useMintNft from './useMintNft';
import useLinkDrop from './useLinkDrop';
import { appStore } from '../state/app';

const useBuy = (isLinkDrop) => {
  const { state } = useContext(appStore);

  const { mintNft } = useMintNft();
  const { createLinkDrop } = useLinkDrop();

  const text = isLinkDrop ? 'Generate gift links' : 'Buy more';

  const [count, setCount] = useState();
  const [showMessage, setShowMessage] = useState(false);
  const [showCountAnimation, setShowCountAnimation] = useState('');

  useEffect(() => {
    if (showMessage) {
      setTimeout(() => {
        setShowMessage(false);
      }, 3000);
    }
    return undefined;
  }, [showMessage]);

  const handleClick = async () => {
    if (!count) {
      setShowMessage(true);
    } else {
      // eslint-disable-next-line no-unused-expressions
      isLinkDrop ? createLinkDrop(count) : mintNft(count);
    }
  };

  const formatPrice = (price) => {
    // take array from price
    const arrayFromPrice = price.toString().split('');

    // set default value of price
    let formatedPrice = arrayFromPrice.join('');

    arrayFromPrice.forEach((item, index, arr) => {
      // keep only 1 character after point if we have it
      if (item === '.') {
        formatedPrice = arr.slice(0, index + 2).join('');
      }
    });

    return formatedPrice;
  };
  const handleNumberClick = (number) => {
    if (count === number) {
      return;
    }

    setCount(number);
    setShowCountAnimation('generate-block__animation-hide');

    setTimeout(
      () => setShowCountAnimation('generate-block__animation-price'),
      0,
    );
  };

  return {
    text,
    count,
    state,
    showMessage,
    setShowMessage,
    showCountAnimation,
    formatPrice,
    handleClick,
    handleNumberClick,
  };
};

export default useBuy;

'''
'''--- src/hooks/useCopyToClipboard.js ---
const useCopyToClipboard = () => {
  const handleCopy = (link) => {
    const el = document.createElement('textarea');
    el.value = link;
    el.setAttribute('readonly', '');
    el.style.position = 'absolute';
    el.style.left = '-9999px';
    document.body.appendChild(el);
    el.select();
    document.execCommand('copy');
    document.body.removeChild(el);
  };

  return { handleCopy };
};

export default useCopyToClipboard;

'''
'''--- src/hooks/useLinkDrop.js ---
/* eslint-disable no-unused-vars */
/* eslint-disable no-console */
import { useContext } from 'react';
import { useHistory } from 'react-router-dom';
import { generate as id } from 'shortid';
import { NEAR } from 'near-units';
import { KeyPairEd25519 } from 'near-api-js/lib/utils';
import { GAS } from '../state/near';
import { appStore } from '../state/app';

const useLinkDrop = () => {
  const history = useHistory();

  const { state, update } = useContext(appStore);
  const { contract, account } = state;
  const { app } = state;

  const walletUrl = (contractId, key, url) =>
    `https://wallet.testnet.near.org/linkdrop/${contractId}/${key}?redirectUrl=${url}/my-nfts`;

  const createLinkDrop = async (count) => {
    const keyPair = KeyPairEd25519.fromRandom();
    const currentUrl = window.location.origin;
    const url = walletUrl(
      contract.contractId,
      keyPair.secretKey.toString(),
      currentUrl,
    );

    const { linkDropArray } = app;
    let anotherLinkDropsArray =
      JSON.parse(localStorage.getItem('linkDropArray')) || [];

    anotherLinkDropsArray = anotherLinkDropsArray.filter(
      ({ accountId }) => accountId !== account.accountId,
    );

    localStorage.setItem(
      'linkDropArray',
      JSON.stringify([
        ...anotherLinkDropsArray,
        ...linkDropArray,
        {
          link: url,
          text: '',
          id: id(),
          isUsed: false,
          accountId: account.accountId,
        },
      ]),
    );

    const cost = await contract.cost_of_linkdrop();
    const publicKey = keyPair.getPublicKey().toString();

    await contract.create_linkdrop({
      args: { public_key: publicKey },
      gas: GAS,
      amount: cost,
      callbackUrl: `${currentUrl}/link-drop`,
    });
  };
  return { createLinkDrop };
};

export default useLinkDrop;

'''
'''--- src/hooks/useMintNft.js ---
/* eslint-disable no-alert */
import { useContext } from 'react';
import { appStore } from '../state/app';
import { GAS } from '../state/near';

const useMintNft = () => {
  const { state } = useContext(appStore);
  const { contract, price } = state;

  const mintNft = async (count = 1) => {
    const callbackUrl = `${window.location.origin}/my-nfts`;
    if (count === 1) {
      contract.nft_mint_one({
        args: {},
        gas: GAS,
        amount: price.oneTokenCost,
        callbackUrl,
      });
    } else {
      const priceOfManyNfts = await contract.total_cost({ num: count });
      contract.nft_mint_many({
        args: { num: count },
        gas: GAS,
        amount: priceOfManyNfts,
        callbackUrl,
      });
    }
  };

  return { mintNft };
};

export default useMintNft;

'''
'''--- src/hooks/useTransfer.js ---
/* eslint-disable camelcase */
import { useContext } from 'react';
import { useHistory } from 'react-router-dom';
import { appStore } from '../state/app';

const useTransfer = () => {
  const history = useHistory();

  const { state } = useContext(appStore);
  const { contract } = state;

  const nftTransfer = async () => {
    /* eslint-disable-next-line */
    const token_id = prompt('NFT ID');
    /* eslint-disable-next-line */
    const receiver_id = prompt('Account to send to');
    if (
      token_id === null ||
      token_id === '' ||
      receiver_id === '' ||
      receiver_id === null
    ) {
      return;
    }
    /* eslint-disable-next-line */
    await contract.nft_transfer({
      args: { receiver_id, token_id },
      amount: '1',
    });
    history.push('/my-nfts');
  };
  return { nftTransfer };
};

export default useTransfer;

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import { BrowserRouter } from 'react-router-dom';
import Main from './Main';
import { AppProvider } from './state/app';

ReactDOM.render(
  <AppProvider>
    <BrowserRouter>
      <Main />
    </BrowserRouter>
  </AppProvider>,
  document.getElementById('root'),
);

'''
'''--- src/layouts/Footer/Footer.js ---
import React, { useContext, memo } from 'react';
import { ReactSVG } from 'react-svg';
import { appStore } from '../../state/app';
import Navigation from '../../components/Navigation';
import SocialLinks from '../../components/SocialLinks';
import logo from '../../assets/images/footer-near-logo.svg';

const Footer = () => {
  const { state } = useContext(appStore);
  const { wallet } = state || {};

  return wallet ? (
    <footer className="footer">
      <div className="footer__container">
        <Navigation className="footer__navigation" signedIn={wallet.signedIn} />
        <SocialLinks className="footer__social" />

        <p className="footer__built">Built on</p>
        <ReactSVG className="footer__logo" src={logo} />

        <p className="footer__text">
          Nearkat NFTs are built on top of NEAR Protocol, where minting NFTs
          cost less than a cent per item.
        </p>
        <p className="footer__copyright ">
          © 2021 Nearkat Guild. All Rights Reserved.
        </p>
      </div>
    </footer>
  ) : (
    <></>
  );
};

export default memo(Footer);

'''
'''--- src/layouts/Footer/index.js ---
export { default } from './Footer';

'''
'''--- src/layouts/Header/Header.js ---
import React, { useContext, memo } from 'react';
import { ReactSVG } from 'react-svg';
import { Link } from 'react-router-dom';
import { appStore } from '../../state/app';
import logo from '../../assets/images/nearkat-logo.svg';
import Navigation from '../../components/Navigation';
import SocialLinks from '../../components/SocialLinks';
import ConnectWalletBtn from '../../components/ConnectWalletBtn';
import Loader from '../../components/Loader/Loader';

const Header = () => {
  const { state } = useContext(appStore);
  const { wallet, account } = state;

  if (!wallet) {
    return <Loader />;
  }

  return (
    <header className="header">
      <Link to="/">
        <ReactSVG className="header__logo" src={logo} />
      </Link>
      <Navigation className="header__navigation" signedIn={wallet.signedIn} />
      <SocialLinks className="header__social" />
      {account?.accountId ? (
        <ConnectWalletBtn
          text={account.accountId}
          handleClick={() => wallet.signOut()}
        />
      ) : (
        <ConnectWalletBtn handleClick={() => wallet.signIn()} />
      )}
    </header>
  );
};

export default memo(Header);

'''
'''--- src/layouts/Header/index.js ---
export { default } from './Header';

'''
'''--- src/layouts/Layout/Layout.js ---
import React, { useEffect } from 'react';
import PropTypes from 'prop-types';
import { useLocation, useHistory } from 'react-router';
import Header from '../Header';
import Footer from '../Footer';

const Layout = ({ children }) => {
  const { pathname, hash } = useLocation();
  const history = useHistory();

  useEffect(() => {
    if (!hash) return;

    if (hash !== '#generate') history.push(pathname);

    if (hash !== '#share-nft') {
      setTimeout(() => {
        const elem = document.querySelector(hash);

        elem.scrollIntoView({
          behavior: 'smooth',
        });
      }, 100);
    } else {
      setTimeout(() => {
        window.scrollTo({
          top: 0,
          behavior: 'smooth',
        });
      });
    }
  }, [hash]);

  return (
    <>
      <Header />
      {children}
      <Footer />
    </>
  );
};

Layout.propTypes = {
  children: PropTypes.element,
};

export default Layout;

'''
'''--- src/layouts/Layout/index.js ---
export { default } from './Layout';

'''
'''--- src/pages/Home/Home.js ---
import React from 'react';
import Hero from '../../components/Hero';
import Learn from '../../components/Learn';
import Rarity from '../../components/Rarity';
import Generate from '../../components/Generate';
import Roadmap from '../../components/Roadmap';
import FAQ from '../../components/FAQ';

const Home = () => (
  <div className="home">
    <Hero />
    <Learn />
    <Rarity />
    <Generate />
    <Roadmap />
    <FAQ />
  </div>
);

export default Home;

'''
'''--- src/pages/Home/index.js ---
export { default } from './Home';

'''
'''--- src/pages/LinkDrop/LinkDrop.js ---
/* eslint-disable no-console */
import React, { useEffect, useContext, useState } from 'react';
import { useHistory } from 'react-router';
import { ReactSVG } from 'react-svg';
import { appStore } from '../../state/app';
import ShareSocialLinks from '../../components/ShareSocialLinks';
import Buy from '../../components/Buy';
import NoNfts from '../../components/NoNfts/NoNfts';
import bigCat from '../../assets/images/hero-big-cat.svg';
import background from '../../assets/images/link-drop-background.svg';
import ShareableLink from './ShareableLink';
import ShareableInput from './ShareableInput';
import ShareableCircle from './ShareableCircle';
import SaveBtn from './SaveBtn/SaveBtn';

const LinkDrop = () => {
  const history = useHistory();

  const { state } = useContext(appStore);
  const { app, account } = state;

  const [linkDropArray, setLinkDropArray] = useState([]);
  const [activeIndex, setActiveIndex] = useState(0);

  useEffect(() => {
    if (app.linkDropArray.length) {
      setLinkDropArray([...app.linkDropArray]);
    }
  }, [app.linkDropArray.length]);

  useEffect(() => {
    if (!localStorage.undefined_wallet_auth_key) {
      history.push('/');
    }
  });

  const handleChange = (e) => {
    const text = e.target.value;
    const dataIndex = +e.target.dataset.index;

    setLinkDropArray(
      linkDropArray.map((item, index) =>
        dataIndex === index ? { ...item, text } : item,
      ),
    );
  };

  const handleCircleClick = (index) => {
    setActiveIndex(index);
  };

  const handleSaveBtn = () => {
    let testLinkDropArray = JSON.parse(
      localStorage.getItem('linkDropArray'),
    ).filter(({ accountId }) => accountId !== account.accountId);
    testLinkDropArray = [...testLinkDropArray, ...linkDropArray];

    localStorage.setItem('linkDropArray', JSON.stringify(testLinkDropArray));
  };

  return linkDropArray.length ? (
    <div className="link-drop">
      <div className="link-drop__data-wrapper" id="share-nft">
        <ReactSVG src={background} className="link-drop__background" />

        <div className="link-drop__data">
          <header className="link-drop__header">
            <span className="link-drop__header-red">Share</span> a mystery{' '}
            <span className="link-drop__header-red">NFT</span> with your friend
          </header>

          <div className="link-drop__center">
            <div>
              <ul className="link-drop__list">
                {linkDropArray.map((item, index) => (
                  <li className="link-drop__item" key={item.id}>
                    <ShareableCircle
                      activeLinkForShare={activeIndex}
                      onClick={handleCircleClick}
                      index={index}
                    />
                    <ShareableLink link={item.link} />
                    <ShareableInput
                      text={item.text}
                      index={index}
                      onChange={handleChange}
                    />
                  </li>
                ))}
              </ul>
              <div className="link-drop__save">
                <SaveBtn onClick={handleSaveBtn} />
              </div>

              <ShareSocialLinks
                color="purpure"
                className="link-drop__share-links"
                text={linkDropArray[activeIndex]?.text}
                link={linkDropArray[activeIndex]?.link}
              />
            </div>
            <ReactSVG src={bigCat} />
          </div>
        </div>
      </div>

      <Buy soldOut={app.soldOut} />
    </div>
  ) : (
    <NoNfts soldOut={app.soldOut} />
  );
};

export default LinkDrop;

'''
'''--- src/pages/LinkDrop/SaveBtn/index.js ---
export { default } from './SaveBtn';

'''
'''--- src/pages/LinkDrop/ShareableCircle/index.js ---
export { default } from './ShareableCircle';

'''
'''--- src/pages/LinkDrop/ShareableInput/index.js ---
export { default } from './ShareableInput';

'''
'''--- src/pages/LinkDrop/ShareableLink/index.js ---
export { default } from './ShareableLink';

'''
'''--- src/pages/LinkDrop/dataLinkDrops.js ---
const linkDrops = [
  {
    key: 1,
    link: 'https://wallet.testnet.near.org/linkdrop/joinwallet.testnet/4tFTKj5jEMG6ykc7gkKP3ma1s8Gv5JLERkPkvhMuzLg1r5aXFFo4Qs3qBBPaNVKDqj11AWikhoy5u138FVkFDME1?redirectUrl=http://localhost:3001/link-drop',
    text: 'for my friend',
  },
  {
    key: 2,
    link: 'https://wallet.testnet.near.org/linkdrop/joinwallet.testnet/5H6sKUYyKeLMKfpA2P3Jc5rNkVn99h3vZdfxg36vUjNdHaCk1hwxzsA3UqEqz27aV8vkh1HCZboEmrwWTmgZBuGB?redirectUrl=http://localhost:3001/link-drop',
    text: 'happy birthday',
  },
  {
    key: 3,
    link: 'https://wallet.testnet.near.org/linkdrop/joinwallet.testnet/2KkGaufJ4JkRbnCnWhHHxz3wcZrxiHWHi11AxduJ9Mq2x3FPSZqxV2TaSCuKGeHSZA5nYHu2LTqXUqzm9ZVDhXeS?redirectUrl=http://localhost:3001/link-drop',
    text: 'for Ted',
  },
  {
    key: 4,
    link: 'https://wallet.testnet.near.org/linkdrop/joinwallet.testnet/3vfiSYMAXaTsr5qDUpxEynHMXSMwtYbBxAW5xyYY8bhqRDCcLDdpTHeFMtV8ePu3aLdx2FteiqtWcbC5hyVHLp9r?redirectUrl=http://localhost:3001/link-drop',
    text: '',
  },
  {
    key: 5,
    link: 'https://wallet.testnet.near.org/linkdrop/joinwallet.testnet/4szVTzKEHufrGsR6ciNdvNttJucDrXx5nJGFxD9De3VaZ624qPyScVz2ofw5wmGpoGeQsZd4GBwmy5VDt24YAQeJ?redirectUrl=http://localhost:3001/link-drop',
    text: 'from Jack to Sara',
  },
];

export default linkDrops;

'''
'''--- src/pages/LinkDrop/index.js ---
export { default } from './LinkDrop';

'''
'''--- src/pages/MyNFTS/MyNFTS.js ---
import React, { useContext, useEffect } from 'react';
import { useHistory } from 'react-router';
import NftList from '../../components/NftList/NftList';
import NoNfts from '../../components/NoNfts/NoNfts';
import { appStore } from '../../state/app';
import Buy from '../../components/Buy';

const MyNFTS = () => {
  const history = useHistory();

  const { state } = useContext(appStore);
  const { soldOut } = state.app;
  const nftsCount = state.app.nearkatsArray.length;

  useEffect(() => {
    if (!localStorage.undefined_wallet_auth_key) {
      history.push('/');
    }
  });

  return nftsCount ? (
    <div className="my-nfts">
      <div className="my-nfts__data">
        <NftList />
      </div>
      <Buy soldOut={soldOut} />
    </div>
  ) : (
    <NoNfts soldOut={soldOut} />
  );
};

export default MyNFTS;

'''
'''--- src/pages/MyNFTS/index.js ---
export { default } from './MyNFTS';

'''
'''--- src/routes.js ---
import React from 'react';
import Home from './pages/Home';
import LinkDrop from './pages/LinkDrop';
import MyNFTS from './pages/MyNFTS';

const routes = [
  {
    path: '/',
    key: 'ROOT',
    exact: true,
    component: () => <Home />,
  },
  {
    path: '/my-nfts',
    key: 'MY_NFTS',
    component: () => <MyNFTS />,
  },
  {
    path: '/link-drop',
    key: 'LINK_DROP',
    component: () => <LinkDrop />,
  },
];

export default routes;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/state/app.js ---
import { StateUtils } from '../utils/state-utils';
import { initNear } from './near';

const initialState = {
  app: {
    soldOut: false,
    oneCount: 1,
    manyCount: 10,
    revealNearkats: JSON.parse(localStorage.getItem('revealNearkats')) || {},
    nearkatsArray: [],
    linkDropArray: [],
    urlIpfs: '',
  },
  near: {
    initialized: false,
  },
  price: {
    oneNFT: 10,
    manyNFTS: 82,
    tokenStorageFormat: 0,
    discountFormat: 0,
  },
};

export const { appStore, AppProvider } = StateUtils(initialState, 'app');

export const onAppMount =
  () =>
  async ({ dispatch }) => {
    dispatch(initNear());
  };

'''
'''--- src/state/near.js ---
/* eslint-disable */
import getConfig from '../config';
import * as nearAPI from 'near-api-js';
import { getWallet, getContract, getPrice } from '../utils/near-utils';
import { KeyPairEd25519 } from 'near-api-js/lib/utils';

export const {
  networkId,
  nodeUrl,
  walletUrl,
  GAS,
  contractName,
  contractMethods,
} = getConfig();

export const {
  utils: {
    format: { formatNearAmount, parseNearAmount },
  },
} = nearAPI;

const linkmatcher =
  /https:\/\/wallet.testnet.near.org\/linkdrop\/[^/]+\/(?<key>.+)\?redirectUrl=/;

function getPublicKey(link) {
  const m = link.match(linkmatcher).groups.key;
  return KeyPairEd25519.fromString(m).getPublicKey();
}

export const initNear =
  () =>
  async ({ update, getState, dispatch }) => {
    try {
      const { near, wallet } = await getWallet();

      const price = await getPrice(near);

      wallet.signIn = (successUrl) => {
        wallet.requestSignIn({
          successUrl,
          contractId: contractName,
        });
      };

      const signOut = wallet.signOut;
      wallet.signOut = () => {
        signOut.call(wallet);
        update('wallet.signedIn', false);
        update('', { account: null });
        localStorage.removeItem('undefined_wallet_auth_key');
        wallet.signedIn = wallet.isSignedIn();
        // new nearAPI.keyStores.BrowserLocalStorageKeyStore().clear()
      };

      wallet.signedIn = wallet.isSignedIn();

      let account;
      if (wallet.signedIn) {
        account = wallet.account();

        wallet.balance = formatNearAmount(
          (await wallet.account().getAccountBalance()).available,
          2,
        );

        const linkDropFromLocalStorage =
          JSON.parse(localStorage.getItem('linkDropArray')) || [];
        // take linkDropArray from Local Storage that not for current user;
        const notCurrentUserLinkDropArray = linkDropFromLocalStorage.filter(
          ({ accountId }) => accountId !== account.accountId,
        );

        // take lindDropArray from Local Storage for only that user that connect with near wallet ( filter by accountId )
        let linkDropArray = linkDropFromLocalStorage.filter(
          ({ accountId }) => accountId === account.accountId,
        );

        // take information about NFT tokens
        const contract = getContract(account, contractMethods);

        console.log('tokens', await contract.tokens_left());
        console.log(
          'nft_supply_for_owner',
          await contract.nft_supply_for_owner({
            account_id: account.accountId,
          }),
        );
        console.log(
          'nft_tokens_for_owner',
          await contract.nft_tokens_for_owner({
            account_id: account.accountId,
          }),
        );
        console.log('nft_total_supply', await contract.nft_total_supply());

        await update('', { near, wallet, account, contract, price });

        const nearkatsArray = await contract.nft_tokens_for_owner({
          account_id: account.accountId,
        });

        // take url for IPFS where data stored
        const { base_uri: urlIpfs } = await contract.nft_metadata();

        // update state with nearkats and url for IPFS
        const state = getState();

        // Updates link object if used or missing in contract
        await Promise.all(
          linkDropArray.map(async (link) => {
            try {
              const key = getPublicKey(link.link).toString();
              await contract.get_key_balance({ key });
            } catch (err) {
              if (err.message.includes('Key is missing')) {
                link.isUsed = true;
              }
            }
            return link;
          }),
        );

        // filter linkDrops that was used
        linkDropArray = linkDropArray.filter(({ isUsed }) => !isUsed);

        // update LocalStorage
        localStorage.setItem(
          'linkDropArray',
          JSON.stringify([...notCurrentUserLinkDropArray, ...linkDropArray]),
        );

        // state.app.linkDropArray = links.filter(link => !link.isUsed);
        const app = { ...state.app, nearkatsArray, urlIpfs, linkDropArray };

        await update('', { app });
        console.log('state:', getState());

        return;
      }

      await update('', { near, wallet, account, price });
      console.log('state:', getState());
    } catch (e) {
      console.log('error:', e);
    }
  };

'''
'''--- src/utils/near-utils.js ---
/* eslint-disable */
import * as nearAPI from 'near-api-js';
import getConfig from '../config';

export const { networkId, nodeUrl, walletUrl, contractName, contractMethods } =
  getConfig();

export const {
  utils: {
    format: { formatNearAmount, parseNearAmount },
  },
} = nearAPI;

export const formatAccountId = (accountId, len = 16) => {
  if (accountId.length > len) {
    return `${accountId.substr(0, len - 3)}...`;
  }
  return accountId;
};

export const getWallet = async () => {
  const near = await nearAPI.connect({
    networkId,
    nodeUrl,
    walletUrl,
    deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() },
  });
  const wallet = new nearAPI.WalletAccount(near);
  return { near, wallet };
};

export const getContract = (account, methods = contractMethods) => {
  return new nearAPI.Contract(account, contractName, {
    ...methods,
    sender: account.accountId,
  });
};

export const getPrice = async (near) => {
  const contract = await near.loadContract(contractName, {
    ...contractMethods,
  });

  let [discount, tenTokenCost, tokenStorage, oneTokenCost, costLinkDrop] =
    await Promise.all([
      contract.discount({
        num: 10,
      }),
      contract.total_cost({ num: 10 }),
      contract.token_storage_cost(),
      contract.cost_per_token({ num: 1 }),
      contract.cost_of_linkdrop(),
    ]);

  const discountFormat = formatNearAmount(discount);
  const tenTokenFormat = formatNearAmount(tenTokenCost);
  const oneTokenFormat = formatNearAmount(oneTokenCost);
  const tokenStorageFormat = formatNearAmount(tokenStorage);

  const price = {
    oneNFT: oneTokenFormat - tokenStorageFormat,
    manyNFTS: tenTokenFormat - 10 * tokenStorageFormat,
    tokenStorageFormat,
    discountFormat,
    tenTokenCost,
    oneTokenCost,
    costLinkDrop: formatNearAmount(costLinkDrop),
  };

  return price;
};

'''
'''--- src/utils/state-utils.js ---
/* eslint-disable */
import React, { createContext, useReducer } from 'react';

export const StateUtils = (initialState, prefix) => {
  let updatedState;
  const getState = () => updatedState;
  const store = createContext(initialState);
  const { Provider: InnerProvider } = store;

  const updateState = (state, newState, path = '') => {
    // Debugging
    // console.log('updateState', state, path, newState)
    if (path.length === 0) {
      return { ...state, ...newState };
    }
    const pathArr = path.split('.');
    const first = pathArr[0];
    state = { ...state };
    if (!state[first]) {
      state[first] = {};
    }
    if (pathArr.length === 1) {
      state[first] =
        !!newState && typeof newState === 'object' && !Array.isArray(newState)
          ? {
              ...state[first],
              ...newState,
            }
          : newState;
    } else {
      state[first] = {
        ...state[first],
        ...updateState(state[first], newState, pathArr.slice(1).join('.')),
      };
    }

    return state;
  };

  const Provider = ({ children }) => {
    const [state, dispatch] = useReducer((_state, payload) => {
      const { path, newState } = payload;
      if (path === undefined) {
        return _state;
      }
      updatedState = updateState(_state, newState, path);
      return updatedState;
    }, initialState);

    const update = (path, newState) => {
      dispatch({ path, newState });
    };
    const wrappedDispatch = (fn) =>
      fn({ update, getState, dispatch: wrappedDispatch });

    return (
      <InnerProvider value={{ update, state, dispatch: wrappedDispatch }}>
        {children}
      </InnerProvider>
    );
  };

  if (prefix) {
    return {
      [`${prefix}Store`]: store,
      [`${prefix.substr(0, 1).toUpperCase() + prefix.substr(1)}Provider`]:
        Provider,
    };
  }

  return { store, Provider };
};

'''