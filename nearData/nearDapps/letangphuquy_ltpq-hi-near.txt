*GitHub Repository "letangphuquy/ltpq-hi-near"*

'''--- Cargo.toml ---
[package]
name = "ltpq-hi-near"
authors = ["Dang Quang Vu <eamondang@gmail.com>"]
edition = "2021"
version = "0.1.0"
license = "MIT"

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
debug = false
lto = true
opt-level = "z"
overflow-checks = true
panic = "abort"

[dependencies]
near-sdk = "4.1.1"

'''
'''--- Makefile.toml ---
[tasks.clean]
clear = true
script = """
cargo clean
rm -rf ./neardev/
rm -rf ./target/
"""

[tasks.prepare]
script = """
#!/usr/bin/env zsh
rustup target add wasm32-unknown-unknown && rustup install 1.69 && rustup default 1.69 && cargo --version
"""

[tasks.build]
command = "cargo"
args = ["build", "--target", "wasm32-unknown-unknown", "--release"]

[tasks.dev-deploy]
dependencies = ["build"]
script = """
#!/usr/bin/env zsh

set -e
WASM_PATH="$(find ./target/wasm32-unknown-unknown/release -maxdepth 1 -name "*.wasm")"

near dev-deploy --wasmFile $WASM_PATH
"""

[tasks.call]
script = """
#!/usr/bin/env zsh

set -e
[ -f ./neardev/dev-account ] || (echo "Contract must be deployed"; false)
near call "$(<./neardev/dev-account)" "$@"
"""

[tasks.call-self]
script = """
#!/usr/bin/env zsh

set -e
[ -f ./neardev/dev-account ] || (echo "Contract must be deployed"; false)
near call "$(<./neardev/dev-account)" "$@" --accountId "$(<./neardev/dev-account)"
"""

[tasks.view]
script = """
#!/usr/bin/env zsh

set -e
[ -f ./neardev/dev-account ] || (echo "Contract must be deployed"; false)
near view "$(<./neardev/dev-account)" "$@"
"""
'''
'''--- rust-toolchain.toml ---
[toolchain]
channel = "1.69.0"
profile = "default"
targets = ["wasm32-unknown-unknown"]

'''
'''--- rustfmt.toml ---
# Rust edition 2021
use_small_heuristics = "Max"
reorder_imports = true
edition = "2021"
version = "Two"

# Use Unix style newlines, with 2 spaces tabulation.
newline_style = "Unix"
tab_spaces = 2
hard_tabs = false

# Make one line functions in a single line
fn_single_line = true

# Format strings
format_strings = true

# Increase the max line width
max_width = 120
comment_width = 100

# Merge nested imports
merge_imports = true

# Enum and Struct alignement
enum_discrim_align_threshold = 20
struct_field_align_threshold = 20

# Reorder impl items: type > const > macros > methods.
reorder_impl_items = true

# Comments and documentation formating
format_code_in_doc_comments = true
match_block_trailing_comma = true
normalize_doc_attributes = true
error_on_line_overflow = true
normalize_comments = true
report_fixme = "Always"
wrap_comments = true
todo = "Always"
'''
'''--- src/lib.rs ---
#![allow(dead_code)]
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::serde::{Serialize, Deserialize};
use near_sdk::{near_bindgen, AccountId, Balance, Timestamp, env};
//Not LeetCode :)
// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
  pub owner: AccountId,
  pub problems_count: u32
}

#[derive(BorshDeserialize, BorshSerialize, Serialize)]
#[serde (crate = "near_sdk::serde")]
pub struct Exercise {
  pub problem_id: String,
  pub content: String, //markdown file
  pub solution_cost: Balance, //(premium) value for one problem is based on various factors, like difficulty, practicability, ... and is determined by admin. 
  //captivation for contributors like problem author, testcase setter, ... ?
  pub creation_time: Timestamp
}

#[near_bindgen]
impl Contract {
  #[init]
  pub fn init() -> Self {
    //call-self
    Self { owner: env::signer_account_id(), problems_count: 0 }
  }

  pub fn create_exercise(problem_id: String, content: String) -> Exercise {
    Exercise { problem_id, content, solution_cost: 1, creation_time: env::block_timestamp_ms() }
  }
}
 

'''