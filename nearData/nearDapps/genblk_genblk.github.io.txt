*GitHub Repository "genblk/genblk.github.io"*

'''--- .github/workflows/deploy.yml ---
name: Deploy to GitHub Pages

on:
  push:
    branches:
      - master
  pull_request:
    
jobs:
  deploy:
    name: Deploy to GitHub Pages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn
      - name: Block Genesis
        run: |
          yarn install --frozen-lockfile
          yarn build

      # Popular action to deploy to GitHub Pages:
      # Docs: https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-docusaurus
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          # Build output to publish to the `gh-pages` branch:
          publish_dir: ./build
          # Assign commit authorship to the official GH-Actions bot for deploys to `gh-pages` branch:
          # https://github.com/actions/checkout/issues/13#issuecomment-724415212
          # The GH actions bot is used by default if you didn't specify the two fields.
          # You can swap them out with your own user credentials.
          user_name: github-actions[bot]
          user_email: 41898282+github-actions[bot]@users.noreply.github.com

'''
'''--- .github/workflows/test-deploy.yml ---
name: Test deployment

on:
  pull_request:
    branches:
      - master

jobs:
  test-deploy:
    name: Test deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
          cache: yarn
      - name: Test build
        run: |
          yarn install --frozen-lockfile
          yarn build

'''
'''--- README.md ---
## Installation

```console
yarn install
```

## Local Development

```console
yarn start
```

This command starts a local development server and opens up a browser window. Most changes are reflected live without having to restart the server.

## Build

```console
yarn build
```

This command generates static content into the `build` directory and can be served using any static contents hosting service.

## Deployment

```console
GIT_USER=<Your GitHub username> USE_SSH=true yarn deploy
```

If you are using GitHub pages for hosting, this command is a convenient way to build the website and push to the `gh-pages` branch.

'''
'''--- babel.config.js ---
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};

'''
'''--- docs/buidl/overview.md ---
---
sidebar_position: 1
---

# Overview

## Useful VSCode Plugins

* alefragnani.Bookmarks
* AzBlockchain.azure-blockchain
* ban.spellright
* bierner.markdown-footnotes
* bierner.markdown-mermaid
* bpruitt-goddard.mermaid-markdown-syntax-highlighting
* christian-kohler.npm-intellisense
* CoenraadS.bracket-pair-colorizer-2
* dbaeumer.vscode-eslint
* eamodio.gitlens
* ecmel.vscode-html-css
* eg2.vscode-npm-script
* ericadamski.carbon-now-sh
* esbenp.prettier-vscode
* foam.foam-vscode
* foxundermoon.shell-format
* Gruntfuggly.todo-tree
* hbenl.vscode-mocha-test-adapter
* hbenl.vscode-test-explorer
* humao.rest-client
* jebbs.markdown-extended
* jebbs.plantuml
* JuanBlanco.solidity
* kahole.magit
* kortina.vscode-markdown-notes
* ms-python.python
* ms-python.vscode-pylance
* ms-toolsai.jupyter
* ms-toolsai.jupyter-keymap
* ms-toolsai.jupyter-renderers
* ms-vscode-remote.remote-ssh
* ms-vscode-remote.remote-ssh-edit
* ms-vscode.azure-account
* ms-vscode.test-adapter-converter
* ms-vsliveshare.vsliveshare
* ms-vsliveshare.vsliveshare-audio
* ms-vsliveshare.vsliveshare-pack
* msjsdiag.debugger-for-chrome
* mushan.vscode-paste-image
* naumovs.color-highlight
* octref.vetur
* PKief.material-icon-theme
* rogalmic.bash-debug
* streetsidesoftware.code-spell-checker
* tchayen.markdown-links
* tintinweb.graphviz-interactive-preview
* tintinweb.solidity-visual-auditor
* tintinweb.vscode-ethover
* tintinweb.vscode-inline-bookmarks
* tintinweb.vscode-solidity-flattener
* tintinweb.vscode-solidity-language
* vscode-icons-team.vscode-icons
* vsls-contrib.gitdoc
* yzhang.markdown-all-in-one

'''
'''--- docs/buidl/smart-contracts/_category_.json ---
{
  "label": "Smart Contracts Guide",
  "position": 1
}

'''
'''--- docs/buidl/smart-contracts/introduction.md ---
---
sidebar_position: 1
---

# Introduction

n this section, we aim to familiarize you with a powerful and modern development tool `hardhat`. Since we only need the basics to kick-start our own project, going through the "[Getting Started" section](https://hardhat.org/getting-started/) of the official documentation is strongly recommended.

## Prerequisites

Setup the following commandline tools:

- [`node.js` and `npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm): preferably the latest LTS version of `node`.
- [`yarn`](https://classic.yarnpkg.com/en/docs/install/)

Make a new folder to play with Hardhat basics:

```sh
mkdir tutorial && cd tutorial
npm init -y

# Then proceed with hardhat installation: https://hardhat.org/getting-started/#installation
```

Learn the following languages:

- `Solidity`
  - The most recommended tutorial is [CryptoZombies](https://cryptozombies.io/), at least Curriculum 1~4.
  - Or read the official [Solidity doc](https://docs.soliditylang.org/en/latest/index.html) for more details.
- `TypeScript`
  - If you've never wrote any TypeScript before, we strongly recommend [the "TypeScript Handbook"](https://www.typescriptlang.org/docs/handbook/intro.html).
  - Regardless of whether you come from an OOP language like Java or C#, or a functional language like Haskell or ML, or a hybrid language like Go, Rust or Scala, you should take a look at their ["Getting started section"](https://www.typescriptlang.org/docs/handbook/intro.html#get-started).
  - Main reasons for our nudging to `TypeScript` over `JavaScript` is its dominant popularity and superior protection against many common JS caveats via its type systems. (see [StackOverflow's 2021 survey](https://insights.stackoverflow.com/survey/2021#technology-most-loved-dreaded-and-wanted), or [state of JS](https://2020.stateofjs.com/en-US/technologies/javascript-flavors/#javascript_flavors_experience_ranking) for yourself)

## Add TypeScript support

The following steps are almost verbatim from the [official doc](https://hardhat.org/guides/typescript.html) except we use `yarn` as our package manager.

1. Remove `package-lock.json` and use `yarn` instead. You should be able to see a `yarn.lock` file being generated.

   ⚠ you are only removing `package-lock.json`, NOT `package.json`. Your `yarn` still replies on `package.json` to install all dependencies and other tasks.

   ```sh
   rm package-lock.json
   yarn

   ```

2. Install the following `npm` packages:

   ```sh
   yarn add --dev ts-node typescript chai @types/node @types/mocha @types/chai
   ```

3. Rename `hardhat.config.js` to `hardhat.config.ts`

   ```sh
   mv hardhat.config.js hardhat.config.ts
   ```

   and update the file, please refer to the [doc here](https://hardhat.org/config/#available-config-options),
   if you don't understand some of the configurations specified below.

   ```typescript
   import { task, HardhatUserConfig } from "hardhat/config";
   import "@nomiclabs/hardhat-waffle";

   task("accounts", "Prints the list of accounts", async (taskArgs, hre) => {
     const accounts = await hre.ethers.getSigners();
     for (const account of accounts) {
       console.log(account.address);
     }
   });

   const config: HardhatUserConfig = {
     defaultNetwork: "hardhat",
     paths: {
       sources: "./contracts",
       tests: "./test",
       artifacts: "./build/artifacts",
       cache: "./build/cache",
     },
     solidity: {
       compilers: [
         {
           version: "0.8.0",
           settings: {
             optimizer: {
               enabled: true,
               runs: 200,
             },
           },
         },
       ],
     },
     mocha: {
       timeout: 20000,
     },
   };

   export default config;
   ```

4. Add a [`tsconfig.json`](./packages/smart-contracts-boilerplate-sample/tsconfig.json) file, (learn more about what it does [here](https://www.typescriptlang.org/docs/handbook/tsconfig-json.html))

   ```json
   {
     "compilerOptions": {
       "target": "es2019",
       "module": "commonjs",
       "strict": true,
       "esModuleInterop": true,
       "resolveJsonModule": true,
       "outDir": "dist",
       "baseUrl": "."
     },
     "include": ["./scripts", "./test"],
     "files": ["./hardhat.config.ts"]
   }
   ```

5. For convenience, introduce the following scripts in `package.json`:

   ```json
   {
     "scripts": {
       "compile": "yarn hardhat compile",
       "test": "yarn compile && yarn hardhat test"
     }
   }
   ```

   Now, run `yarn compile`, you should be able to successfully compile your contracts. Woohoo! 🎉

   Notice there's `artifiacts/` and `cache/` folders being created, both of which are git ignored, and if you dig into `artifiacts/contracts/Greeter.sol/Greeter.json`, you will see an ABI spec of the compiled contract.

6. Finally, let's rename our test file:

   ```sh
   mv test/sample-test.js test/greeter.spec.ts
   rm scripts/sample-script.js # we don't use this
   ```

   Now run `yarn test`, you should see your test passing!

   ```sh
     Greeter
   Deploying a Greeter with greeting: Hello, world!
   Changing greeting from 'Hello, world!' to 'Hola, mundo!'
    ✓ Should return the new greeting once it's changed (415ms)

    1 passing (416ms)

    ✨ Done in 1.84s.
   ```

   Notice "Deploying a Greeter with greeting: Hello, world!" is actually being `console.log` from the contract constructor! This is super nice for debugging purposes, and thanks to `hardhat/console.sol` for enabling this feature.

## Add `OpenZeppelin` dependency

As demonstrated in CryptoZombies' tutorial or most other Solidity tutorials, [OpenZeppelin contracts](https://github.com/OpenZeppelin/openzeppelin-contracts) are a set of community vetted, widely used library.

1. Install these contracts in your dependencies
   ```sh
   yarn add @openzeppelin/contracts
   ```
2. To verify that we can import the OpenZeppelin library, add the following line to your `contract/Greeter.sol`

   ```sol
   import "@openzeppelin/contracts/utils/math/SafeMath.sol";

   ```

   Then run `yarn compile`. If it compiled successfully, as it should, then it means you now have `OpenZeppelin` dependency installed.

## Add code formatting and linting

We use [`solhint`](https://github.com/protofire/solhint) for linting Solidity contract code, [`prettier`](https://prettier.io/docs/en/index.html) for formatting TypeScript/Javascript/Solidity code,
and [`sort-package-json`](https://github.com/keithamus/sort-package-json) for sorting dependencies declaration in alphabetical order.

> If you wondering "linter v.s. Formatter", please [read here](https://prettier.io/docs/en/comparison.html).

1. Add those tools to `devDependencies`

   ```sh
   yarn add --dev solhint prettier sort-package-json solhint-plugin-prettier prettier-plugin-solidity
   ```

2. Add Solidity linting rules in a new file `.solhint.json`, see explanations for these configs and a complete list [here](https://github.com/protofire/solhint#rules).

   ```json
   {
     "extends": "solhint:recommended",
     "plugins": ["prettier"],
     "rules": {
       "prettier/prettier": "error",
       "compiler-version": ["off"],
       "constructor-syntax": "warn",
       "quotes": ["error", "single"],
       "func-visibility": ["warn", { "ignoreConstructors": true }],
       "not-rely-on-time": "off",
       "private-vars-leading-underscore": ["warn", { "strict": false }]
     }
   }
   ```

3. Add format rules in a new file `.prettierrc`, see explanations for these configs and a complete list [here](https://prettier.io/docs/en/options.html). The \*.sol rules adhere to the [solididty style guide](https://docs.soliditylang.org/en/latest/style-guide.html).

   ```json
   {
     "overrides": [
       {
         "files": "**.sol",
         "options": {
           "printWidth": 99,
           "tabWidth": 2,
           "useTabs": false,
           "singleQuote": true,
           "bracketSpacing": false
         }
       },
       {
         "files": ["**.ts", "**.js"],
         "options": {
           "printWidth": 145,
           "tabWidth": 2,
           "semi": true,
           "singleQuote": true,
           "useTabs": false,
           "endOfLine": "auto"
         }
       },
       {
         "files": "**.json",
         "options": {
           "tabWidth": 2,
           "printWidth": 200
         }
       }
     ]
   }
   ```

   We further specify a list of files that we don't want format in a new file `.prettierignore`

   ```text
   # General
   .prettierignore
   .solhintignore
   .husky
   .gitignore
   .gitattributes
   .env.example
   .env
   workspace.code-workspace
   .DS_STORE
   codechecks.yml

   # Hardhat
   coverage
   coverage.json
   build
   deployments
   dist

   # JS
   node_modules
   package-lock.json
   yarn.lock

   # Solidity
   contracts/mock
   ```

4. Add the following scripts to `package.json`

   ```json
   {
     "scripts": {
       "lint": "yarn solhint 'contracts/**/*.sol' && yarn prettier --check './**'",
       "lint:fix": "yarn sort-package-json && yarn prettier --write './**' && yarn solhint --fix 'contracts/**/*.sol'"
     }
   }
   ```

   Now run `yarn lint`, you should see a bunch of error reported and justifications or hints to fix them:

   ```
   contracts/Greeter.sol
   4:8   error    Replace "hardhat/console.sol" with 'hardhat/console.sol'                                                            prettier/prettier
   4:8   error    Use single quotes for string literals                                                                               quotes
   5:8   error    Replace "@openzeppelin/contracts/utils/math/SafeMath.sol" with '@openzeppelin/contracts/utils/math/SafeMath.sol'    prettier/prettier
   5:8   error    Use single quotes for string literals                                                                               quotes
   8:1   error    Delete ··                                                                                                           prettier/prettier
   8:5   warning  'greeting' should start with _                                                                                      private-vars-leading-underscore
   10:1   error    Delete ··                                                                                                           prettier/prettier
   11:5   error    Replace ····console.log("Deploying·a·Greeter·with·greeting:" with console.log('Deploying·a·Greeter·with·greeting:'  prettier/prettier
   11:21  error    Use single quotes for string literals                                                                               quotes
   12:1   error    Replace ········ with ····                                                                                          prettier/prettier
   13:3   error    Delete ··                                                                                                           prettier/prettier
   15:1   error    Delete ··                                                                                                           prettier/prettier
   16:5   error    Delete ····                                                                                                         prettier/prettier
   17:3   error    Delete ··                                                                                                           prettier/prettier
   19:1   error    Replace ···· with ··                                                                                                prettier/prettier
   20:1   error    Delete ····                                                                                                         prettier/prettier
   20:21  error    Use single quotes for string literals                                                                               quotes
   21:1   error    Replace ········ with ····                                                                                          prettier/prettier
   22:1   error    Delete ··                                                                                                           prettier/prettier

    ✖ 19 problems (18 errors, 1 warning)
   ```

   A quick way to fix is running `yarn lint:fix`.

   After which you might still see some warning and errors that our linters can't make decisions on how to fix them.
   Go to `contract/Greeter.sol`, change line 8 to `string public greeting;`, change line 20 to `console.log('Changing greeting from', greeting, 'to', _greeting);`.

   Now run `yarn lint` again, there should be no errors left.

## Add test coverage

We use [`solidity-coverage` plugin](https://hardhat.org/plugins/solidity-coverage.html) for test coverage report.

1. Install dependency
   ```sh
   yarn add --dev solidity-coverage
   ```
2. Update `hardhat.config.ts`:
   ```typescript
   import "solidity-coverage";
   ```
3. Add a new script command in `package.json`:

   ```json
   {
     "scripts": {
       "coverage": "hardhat coverage"
     }
   }
   ```

   Then run `yarn coverage`, you should get:

   ```
   --------------|----------|----------|----------|----------|----------------|
   File          |  % Stmts | % Branch |  % Funcs |  % Lines |Uncovered Lines |
   --------------|----------|----------|----------|----------|----------------|
   contracts/    |      100 |      100 |      100 |      100 |                |
   Greeter.sol   |      100 |      100 |      100 |      100 |                |
   --------------|----------|----------|----------|----------|----------------|
   All files     |      100 |      100 |      100 |      100 |                |
   --------------|----------|----------|----------|----------|----------------|
   > Istanbul reports written to ./coverage/ and ./coverage.json
   > ✨ Done in 5.15s.

   ```

4. Finally add coverage related artifacts to your `.gitignore` file
   ```
   # Coverage
   coverage
   coverage.json
   ```

## Add gas reporter

We use [`hardhat-gas-reporter` plugin](https://hardhat.org/plugins/hardhat-gas-reporter.html) for gas consumption report.

Normally we don't want to see gas reports on every test run, therefore we only enable it with an environment variable `REPORT_GAS`.
To set temporary env variable only in the context of a command, we use [`cross-env`](https://www.npmjs.com/package/cross-env).

In step 5 below, we further use [`dotenv`](https://www.npmjs.com/package/dotenv) to get secret/local variables from `.env` file.

1. Install dependencies
   ```sh
   yarn add --dev hardhat-gas-reporter cross-env dotenv
   ```
2. Add configuration to your `hardhat.config.ts`, see the list of [configuration options](https://hardhat.org/plugins/hardhat-gas-reporter.html#options).

   ```typescript
   import "hardhat-gas-reporter";
   const config: HardhatUserConfig = {
     // ...
     gasReporter: {
       currency: "USD",
       enabled: process.env.REPORT_GAS ? true : false,
       showMethodSig: true,
       onlyCalledMethods: false,
     },
   };
   ```

3. Add a new script command to `package.json`

   ```json
   {
     "scripts": {
       "gas": "cross-env REPORT_GAS=1 yarn hardhat test"
     }
   }
   ```

4. Run `yarn gas` to get a gas report from our tests run.

5. Optionally, if you want to get an actual market price, we integrate with [CoinMarketCap's API](https://coinmarketcap.com/api/pricing/) (Free tier is more than enough for personal use).

   Copy the [`.env.example`] file and paste it into your own `.env` file, fill in your CoinMarketCap API key:

   ```
   COINMARKETCAP_API_KEY=xxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxxx
   ```

   Jump back to `hardhat.config.ts`, add the following extra configuration:

   ```typescript
   import * as dotenv from "dotenv";
   dotenv.config();

   const config: HardhatUserConfig = {
     // ...
     gasReporter: {
       // ...
       coinmarketcap: process.env.COINMARKETCAP_API_KEY,
     },
   };
   ```

   Run `yarn gas` again, and you shall see the USD cost.

   ```
   ·------------------------------------|---------------------------|-------------|-----------------------------·
   |        Solc version: 0.8.0         ·  Optimizer enabled: true  ·  Runs: 200  ·  Block limit: 30000000 gas  │
   ·····································|···························|·············|······························
   |  Methods                           ·               74 gwei/gas               ·       2868.09 usd/eth       │
   ·············|·······················|·············|·············|·············|···············|··············
   |  Contract  ·  Method               ·  Min        ·  Max        ·  Avg        ·  # calls      ·  usd (avg)  │
   ·············|·······················|·············|·············|·············|···············|··············
   |  Greeter   ·  greet()              ·          -  ·          -  ·          -  ·            0  ·          -  │
   ·············|·······················|·············|·············|·············|···············|··············
   |  Greeter   ·  greeting()           ·          -  ·          -  ·          -  ·            0  ·          -  │
   ·············|·······················|·············|·············|·············|···············|··············
   |  Greeter   ·  setGreeting(string)  ·          -  ·          -  ·      34658  ·            2  ·       7.36  │
   ·············|·······················|·············|·············|·············|···············|··············
   |  Deployments                       ·                                         ·  % of limit   ·             │
   ·····································|·············|·············|·············|···············|··············
   |  Greeter                           ·          -  ·          -  ·     422738  ·        1.4 %  ·      89.72  │
   ·------------------------------------|-------------|-------------|-------------|---------------|-------------·

   ```

   > Be aware of [a bug](https://github.com/cgewecke/eth-gas-reporter/issues/254) from upstream in `hardhat-gas-report`, if you don't see the price reporting, it's most likely due to this bug.

## Add contract sizer

1. Install dependencies
   ```sh
   yarn add --dev hardhat-contract-sizer
   ```
2. Add configuration to your `hardhat.config.ts`, see the list of [configuration options](https://hardhat.org/plugins/hardhat-gas-reporter.html#options).

   ```typescript
   import "hardhat-contract-sizer";
   const config: HardhatUserConfig = {
     // ...
     contractSizer: {
       alphaSort: true,
       disambiguatePaths: false,
       runOnCompile: true,
       strict: true,
     },
   };
   ```

3. Add a new script command to `package.json`

   ```json
   {
     "scripts": {
       "size": "yarn hardhat size-contracts"
     }
   }
   ```

4. Run `yarn size` to get the contract size report for our compiled contract. Alternatively, you should also see thereport when you do `yarn compile`.

## Add commit lint and git hooks

To enforce standardized, conventional commit messages, we use [`commitlint`](https://github.com/conventional-changelog/commitlint).
We recommend skimming through ["benefits of commitlint"](https://github.com/conventional-changelog/commitlint#benefits-using-commitlint) first if you haven't used it before.
Apparently, you should read the [conventional rules](https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/config-conventional) that your future commit messages should adhere to.

To lint our commit message upon each `git commit`, we need to create [git hooks](https://git-scm.com/docs/githooks), for that we use [`husky`](https://github.com/typicode/husky).
For avid explorers, you can read this [blog post](https://blog.typicode.com/husky-git-hooks-javascript-config/) to understand some design decisions of `husky`.

⚠ If you're running from the cloned `hello-dapp` repo, then you can skip this section as `commitlint` and `husky` hooks had been configured already.
Else if you are building a contract package in your own monorepo, then you should add `husky` in root `package.json` instead.

Choose one of the two depending on your project setup:

- [Contract boilerplate as its separate repo](#contract-boilerplate-as-its-separate-repo)
- [Contract boilerplate as one of the packages in a monorepo](#contract-boilerplate-as-one-of-the-packages-in-a-monorepo)

### Contract boilerplate as its separate repo

1. Install dependencies
   ```sh
   # Install commitlint cli and conventional config
   yarn add --dev @commitlint/config-conventional @commitlint/cli husky
   ```
2. Configure `commitlint` to use conventional config
   ```sh
   echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js
   ```
   Activate/initialize `husky` (one-time):
   ```sh
   npx husky-init && yarn
   ```
   And you should be able to see a `.husky/pre-commit` file created for you.
3. First modify `.husky/pre-commit` file to run linting instead:

   ```
    #!/bin/sh
    . "$(dirname "$0")/_/husky.sh"

    yarn lint:fix
   ```

   Then add a new hook to ensure proper commit message:

   ```sh
   # ensure proper commit messages
   npx husky add .husky/commit-msg 'npx --no-install commitlint --edit "$1"'
   ```

### Contract boilerplate as one of the packages in a monorepo

⚠ Again, if you're running from the cloned `hello-dapp` repo, then you can skip this section as `commitlint` and `husky` hooks had been configured already.

1. Go back to Monorepo project root, then run

   ```sh
   yarn add --dev @commitlint/config-conventional @commitlint/cli husky
   echo "module.exports = {extends: ['@commitlint/config-conventional']}" > commitlint.config.js

   # enable Git hooks
   yarn husky install

   # ensure correct format and linting before commit
   yarn husky add .husky/pre-commit 'yarn lint:fix'
   git add .husky/pre-commit

   # ensure proper commit messages
   yarn husky add .husky/commit-msg 'npx --no-install commitlint --edit "$1"'
   git add .husky/commit-msg
   ```

   Add the following lines to `package.json` in monorepo's root:

   ```json
   {
     "scripts": {
       "lint": "yarn lerna run lint",
       "lint:fix": "yarn lerna run lint:fix"
     }
   }
   ```

   Done. Go ahead and try commit with some bad error message such as `foo blah did something`, the hooks should prevent you from committing. 🛡️

## Add `TypeChain` plugin

Next stop, we add a super helpful tool called [`TypeChain`](https://github.com/dethcrypto/TypeChain) to our project template.
The one-liner pitch is "automatically generate TypeScript bindings for smart contracts".

What that means is, when writing tests or later on writing deployment scripts, we are likely to invoke functions or query getters defined in our contracts.
Right now it doesn't seem a hustle to remember each function signature (i.e. the function name and input/output parameters and their types) since our toy `Greeter.sol` is simple;
but what if our contracts get complicated with dozens of functions?
Wouldn't it be handy the auto-completion engine in your editor/IDE knows these function signatures and offer you rich type information as you code? -- that's what `TypeChain` provides!

While `TypeChain` works with many other frameworks, we will be using its `Hardhat` plugin 👷.

1. Install dependencies, (we use `waffle+ethers.js` stack)

   ```sh
   yarn add --dev typechain @typechain/hardhat @typechain/ethers-v5
   ```

2. Ensure you have the following imports in `hardhat.config.ts`:

   ```typescript
   import "@typechain/hardhat";
   import "@nomiclabs/hardhat-ethers";
   import "@nomiclabs/hardhat-waffle";
   ```

   Add `TypeChain` plugin related configuration, more [docs here](https://github.com/dethcrypto/TypeChain/tree/master/packages/hardhat#configuration):

   ```typescript
   const config: HardhatUserConfig = {
     // ...
     typechain: {
       outDir: "typechained",
       target: "ethers-v5",
     },
   };
   ```

   Run `yarn compile`, upon completion, you should be able to see a newly generated `typechained/` folder which contains TypeScript types info of your smart contracts.

   💡 a bit explanation here: by default, all the types artifacts generated would be outputted to `typechain/`.
   The primarily reason we customize it to `outDir: typechained` is to avoid confusion between importing from `@typechaind` v.s. importing from an npm package named `@typechain`.

3. To enable internal types import similarly to a published package, we update our `tsconfig.json`:

   ```json
   {
     "compilerOptions": {
       "paths": {
         "@typechained": ["typechained/index"]
       }
     }
   }
   ```

4. Finally, jump to your `test/greeter.spec.ts` and change to the following (pay attention to `NOTICE HERE` comments):

   ```typescript
   import { expect } from "chai";
   import { ethers } from "hardhat";
   // NOTICE HERE: import autogenerated types
   import { Greeter, Greeter__factory } from "@typechained";

   describe("Greeter", function () {
     // NOTICE HERE: we can give our contract a `Greeter` type!! instead of an `any` type.
     let greeter: Greeter;
     let greeterFactory: Greeter__factory;

     beforeEach(async () => {
       greeterFactory = (await ethers.getContractFactory(
         "Greeter"
       )) as Greeter__factory;
       greeter = await greeterFactory.deploy("Hello, world!");
     });

     it("Should return the new greeting once it's changed", async function () {
       // NOTICE HERE: try type this yourself, your IDE's auto-completion should suggest available
       // functions of `greeter` as you type.
       await greeter.deployed();

       expect(await greeter.greet()).to.equal("Hello, world!");

       const setGreetingTx = await greeter.setGreeting("Hola, mundo!");

       // wait until the transaction is mined
       await setGreetingTx.wait();

       expect(await greeter.greet()).to.equal("Hola, mundo!");
     });
   });
   ```

   Note: without the customized path declaration in the last step, you can still import types via relative path `import { Greeter } from '../typechaind/index';` -- but it is (arguably) not as nice as our import style which treats `@typechaind` as just another package.

## Add deployment plugins

Now with smart contracts written and locally tested, it's time for live testnet/mainnet deployments, for which we use [`hardhat-deploy` plugin](https://github.com/wighawag/hardhat-deploy/tree/master).

Before deploying, we would like to remove debug-related harness such as `console.sol` -- for which we use [`hardhat-preprocessor`](https://hardhat.org/plugins/hardhat-preprocessor.html).

1. Install the plugin:

   ```sh
   yarn add --dev hardhat-preprocessor
   ```

   Add the following to your `hardhat.config.ts`:

   ```typescript
   import { removeConsoleLog } from "hardhat-preprocessor";

   const config: HardhatUserConfig = {
     // ...
     preprocess: {
       eachLine: removeConsoleLog(
         (hre) =>
           hre.network.name !== "hardhat" && hre.network.name !== "localhost"
       ),
     },
   };
   ```

   The configuration above, as [explained here](https://hardhat.org/plugins/hardhat-preprocessor.html#configuration), remove any `console.log()` in your contract when connecting to live networks.

   Now back to deployments.

   💡 tips: most steps below offer only minimum clarifications, you are strongly recommended to read the `README` of the `hardhat-deploy` repo for more under-the-hood explanations and other available setup options for more complicated deployment flows.
   Also when lost, try to find [template/example deployment setups here](https://github.com/wighawag/template-ethereum-contracts).

### deploying to localhost and test against deployed contracts

1. Install dependencies

   ```sh
   yarn add --dev hardhat-deploy
   ```

2. Update `hardhat.config.ts`

   ```typescript
   import "hardhat-deploy";
   const config: HardhatUserConfig = {
     // ...
     networks: {
       hardhat: {
         chainId: 1337, // temporary for MetaMask support: https://github.com/MetaMask/metamask-extension/issues/10290
       },
     },
     paths: {
       // ...
       deploy: "./scripts/deploy",
     },
     namedAccounts: {
       deployer: {
         default: 0, // by default, take the first account as deployer
         rinkeby: "0x5238A644636946963ffeDAc52Ec53fb489D3a1CD", // on rinkeby, use a specific account
       },
     },
   };
   ```

   - To use `scripts/deploy/` as the folder for all deployment scripts (personal preference, you can also go with default path which is `deploy/`, [see doc here](https://github.com/wighawag/hardhat-deploy/tree/master#3-extra-hardhatconfig-paths-options)),
   - The default `chainId` of `hardhat` network and `localhost` network are `31337`, but we can change it to something else (as long as not colliding with others). Specifically, due to [a MetaMask compatibility issue](https://github.com/MetaMask/metamask-extension/issues/10290), we change it `1337`.
   - The differences between `hardhat` and `localhost` is roughly: the latter is a separate, long-running process where changes made to it can be persistent locally across scripts and invocations; whereas the former is usually an ephemeral session (e.g. when you run fresh tests) that would shut down once scripts are done running (changes to the network are not persistent).
   - We "named" the first account as the `deployer`, (to get the full list of accounts hardhat generated for you, run `yarn hardhat accounts` task). When pushing to testnet or main net, we usually use one of our accounts in our MetaMask wallet with safer, protected private key.

3. Create a new deployment script `./scripts/deploy/001-Greeter.deploy.ts`:

   ```typescript
   import { HardhatRuntimeEnvironment } from "hardhat/types";
   import { DeployFunction } from "hardhat-deploy/types";

   export const INITIAL_GREET: { [chainId: string]: string } = {
     "1337": "Bonjour localhost!",
     "4": "Guten tag, Rinkeby!",
   };

   const deployFunc: DeployFunction = async (
     hre: HardhatRuntimeEnvironment
   ) => {
     const { deployer } = await hre.getNamedAccounts();
     const chainId = await hre.getChainId();

     await hre.deployments.deploy("Greeter", {
       from: deployer,
       args: [INITIAL_GREET[chainId]],
       log: true,
     });
   };
   deployFunc.tags = ["Greeter"];

   export default deployFunc;
   ```

   Note on the filename: as [documented here](https://github.com/wighawag/hardhat-deploy/tree/master#the-deploy-task), when you later run `yarn deploy --network <NETWORK>`, hardhat will "scan for files in alphabetical order and execute them in turn".
   If your deployment workflow is straightforwardly in a sequential order, then naming your deployment scripts using `xxx-<contract/purpose>.deploy.ts` where `xxx` dictates the order, would be sufficient.
   However, if your deployment workflow is more complicated with library linking or inter-dependencies or even conditional deployments, then you should check out [`DeployFunction`'s `skip`, `dependencies`, and `runAtTheEnd` fields here](https://github.com/wighawag/hardhat-deploy/tree/master#deploy-scripts) as well as
   [library linking](https://github.com/wighawag/hardhat-deploy/tree/master#handling-contract-using-libraries) config.

   Then add this to your `package.json` for slightly shorthanded commands:

   ```json
   {
     "scripts": {
       "deploy": "yarn hardhat deploy"
     }
   }
   ```

4. Now, first start a local node in a new terminal window: `yarn hardhat node`, you should see `Started HTTP and WebSocket JSON-RPC server at http://127.0.0.1:8545/`.

   Jump to another terminal session, run `yarn deploy --network localhost`, you should see our `Greeter.sol` successfully deployed.

   ```
   web3_clientVersion
   Contract deployment: Greeter
   Contract address:    0x5fbdb2315678afecb367f032d93f642f64180aa3
   Transaction:         0xf87999b7500e0ded42ddd10982e458c7fbcc054fd82fcaad893f45c2ecc037b8
   From:                0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266
   Value:               0 ETH
   Gas used:            542532 of 542532
   Block #1:            0x13b50db64e9e7120d870078b9b41f802c908161145cf1cf92e9ce32e35d80fd2

   eth_chainId
   eth_accounts (2)
   eth_chainId (2)
   eth_getTransactionByHash
   eth_blockNumber
   eth_chainId
   ```

   - Just for experimentation, you can try to run the same deployment script again, you will see `hardhat` by default won't create a duplicated contract `reusing "Greeter" at 0x5FbDB2315678afecb367f032d93F642f64180aa3` -- this is a clear indication that our changes made to our local blockchain are persistent.
   - You should a new folder `deployemnts/` generated, go ahead and explore what's inside.

5. Finally, let's try to test against our deployed contract.
   Copy [`test-local-deployed-greeter.ts`](./packages/smart-contracts-boilerplate-sample/scripts/test-local-deployed-greeter.ts) to your `scripts/test-local-deployed-greeter.ts`.

   Run

   ```sh
   yarn hardhat run ./scripts/test-local-deployed-greeter.ts --network localhost
   ```

   You should see our `assert((await greeter.greet()) === 'Bonjour localhost!')` passed! If you want, you can also try `console.log(greeterDeployment.address)` which would print the same address shown in the last step.

### deploying to live testnet or mainnet

Now you are ready for deploying to live [test|main] networks under your MetaMask accounts.

1. We will need to use our Alchemy hosted endpoints for live testnet access, and use wallet mnemonic (the master secret seed) to derive and sign our deployment transactions.
   If you haven't set up Alchemy, please refer to [warm up](./warmup.md#setup-alchemy).

   First, create a new file at your `utils/network.ts` and copy [this file](./packages/smart-contracts-boilerplate-sample/utils/network.ts) over.

   Update your `hardhat.config.ts` to use alchemy endpoints for `rinkeby` testnet, and use your own mnemonic (i.e. your MetaMask wallet) to send transactions:

   ```typescript
   import { nodeUrl, accounts } from "./utils/network";
   const config: HardhatUserConfig = {
     networks: {
       hardhat: {
         chainId: 1337, // temporary for MetaMask support: https://github.com/MetaMask/metamask-extension/issues/10290
       },
       localhost: {
         url: nodeUrl("localhost"),
       },
       rinkeby: {
         url: nodeUrl("rinkeby"),
         accounts: accounts("rinkeby"),
       },
       // can configure other networks, see examples:
       // https://github.com/wighawag/template-ethereum-contracts/blob/main/hardhat.config.ts
     },
   };
   ```

2. Run

   ```sh
   cp .env.example .env
   ```

   Edit your `.env` file by filling your API tokens and wallet mnemonic.

   **On wallet mnemonic:** we will be using a mnemonic wallet whose accounts are all deterministically derived from a master secret phrase (usually 12 words).
   You can

   - either directly use your MetaMask's wallet by revealing its secret seed and paste it into `.env`
   - or run `yarn hardhat run ./scripts/generate-new-mnemonic.ts` and then go to your MetaMask and send some Ethers to the newly created wallet address (since deploying contracts require gas to pay transaction fee).

   Also do remember to update the `deployer`'s address configuration in `hardhat.config.ts` to the address associated with your mnemonic wallet.

   ```typescript
   const config: HardhatUserConfig = {
     namedAccounts: {
       deployer: {
         default: 0, // by default, take the first account as deployer
         rinkeby: "0x5238A644636946963ffeDAc52Ec53fb489D3a1CD", // !!! CHANGE THIS TO YOUR ADDRESS !!!
       },
     },
   };
   ```

3. Run

   ```sh
   yarn deploy --network rinkeby
   ```

   You should see (be patient, this might take some time):

   ```
   deploying "Greeter" (tx: 0x41ef031e20b772de6b43a820e1ffdfc80b3d7fbdb978a75d13dee7a1b554f237)...: deployed at 0xD4deB045fb89E750864a7349087A6674C1E79F78 with 542664 gas
   ✨  Done in 71.73s.
   ```

   You should be able to see your transactions and deployed contracts on Etherscan. For example I have switched my MetaMask to my second account, then ran the deploy command to `rinkeby`, you can find my transaction [here](https://rinkeby.etherscan.io/tx/0x41ef031e20b772de6b43a820e1ffdfc80b3d7fbdb978a75d13dee7a1b554f237).

💡 The best practice is you version control (git commit) your `deployments/` artifacts for discovery, reference and consistency during migrations.

## Troubleshooting

#### `yarn add` failed inside a workspace/package

If you are using monorepo like `lerna` and `yarn workspaces`, then make sure:

1. specified in `lerna.json` in your monorepo root, something like:

   ```json
   {
     "npmClient": "yarn",
     "useWorkspaces": true,
     "packages": ["packages/*"],
     "version": "independent"
   }
   ```

2. in all of your `packages/*/package.json`, you have specified a `version` field
   
'''
'''--- docs/earn/intro.md ---
---
sidebar_position: 1
---

# Introduction to

'''
'''--- docs/explore/intro.md ---
---
sidebar_position: 1
---

# Down the crypto rabbit hole

'''
'''--- docs/learn/getting-started.md ---
---
sidebar_position: 1
---

# Getting Started

Genesis Block is a 4 week program, and we'll be covering a 2 new learning modules each week. Each module is made up of three sections: **Crafted Reading**, which we will expect you to have read before the beginning of each new week; **Curated Material** which is made up of articles, videos, and the occasional podcast that we highly recommend you go over; and a **Fireside Chat** where a mentor presents and discusses the concepts.

The Learn track aims to provide a more holistic framing of what Web3 is — its principles, history, and present state. We know that different people learn differently, hence the mix of text, video and audio. You will need to have read all pieces in the "Crafted Readings" to participate fully in this week's "Fireside Chat" and activities. The "Curated Material" is highly recommended if you are the sort of person who feels like they might want to add value to any of the spontaneous conversations which no doubt will spring up in the course of the work.

'''
'''--- docs/learn/module-1/_category_.json ---
{
  "label": "Module 1 - Blockchain ELI5",
  "position": 2
}

'''
'''--- docs/learn/module-1/basic-cryptography.md ---
---
sidebar_position: 1
---

# Basic Cryptography

## What is Cryptography?

Cryptography is the practice of developing protocols that prevent third parties from viewing private data. Modern cryptography combines the disciplines of math, computer science, physics, engineering, and more. Some important terms are defined below:

**Encryption**: Encoding text into an unreadable format.
**Decryption**: Reserving encryption – converting a jumbled message into its original form.
**Cipher**: An algorithm for performing encryption or decryption, usually a well-defined set of steps that can be followed.
Cryptography before the modern age was synonymous to encryption – the process of converting information from a readable format to something that makes no sense. Encryption techniques date back as far as the ancient Egyptians, and have roots spanning all throughout history.

For example, the [Caesar Cipher](http://practicalcryptography.com/ciphers/caesar-cipher/) is a famous cipher used by Julius Caesar to securely communicate with his generals. The cipher "shifts" each letter in a message by a certain amount – with a shift of 2, A would become C, B would become D, and so on.

Blockchain technology makes use of cryptography in multiple different ways – for wallets, transactions, security, and privacy-preserving protocols. This article will cover some important cryptography topics that relate to blockchain technology including public-key cryptography, hashing, and Merkle trees.

## Public-Key Cryptography
Public-key cryptography (also called asymmetric cryptography) is a cryptographic system that uses a pair of keys – a public key and a private key. The public key may be widely distributed, but the private key is meant to be known only by its owner. Keys are always created in a pair – every public key must have a corresponding private key.

Public-key cryptography is most often used for encrypting messages between two people or two computers in a secure way. Anyone can use someone’s public key to encrypt a message, but once encrypted, the only way to decrypt that message is by using the corresponding private key.

Let’s say Alice wants to send an encrypted message to Bob. It would work like this:

* Alice uses Bob’s public key to encrypt the message.
* Alice sends the encrypted message to Bob – if a third party intercepted it, all they would see is random numbers and letters.
* Bob uses his private key to decrypt and read the message.

A diagram illustrating this process is shown below:

![Public-Key Cryptography](../../../static/img/learn/module-1/basic-cryptography-1.jpg)

Public-key cryptography is a fundamental element of blockchain technology – it is the underlying technology for wallets and transactions. When a user creates a wallet on a blockchain, they are generating a public-private key pair.

The address of that wallet, or how it’s represented on the blockchain, is a string of numbers and letters generated from the public key. Due to the nature of blockchain technology, this address is public to everyone and can be used to check the balance in that wallet or send coins to it.

The private key associated with a wallet is how to prove ownership and control the wallet. It is the only way to send coins out of it, and a lost private key means the coins inside will be stuck there forever.

A transaction on the blockchain is nothing more than a broadcasted message that essentially says, “Take X coins from my wallet and credit X coins into another wallet". Once confirmed, the transaction is immutably written into the ledger, and the balances are updated.

However, this transaction message requires a signature from the private key of the sending wallet to be valid. After broadcasting, anyone can use that wallet’s public key to ensure the digital signature coming from the private key is authentic. This is one role of block validators before they add any transaction (i.e. message) to the blockchain.

## Cryptographic Hashing

Cryptographic hashing is another fundamental piece of blockchain technology and is directly responsible for producing immutability – one of blockchain’s most important features.

Hashing is a computer science term that means taking an input string of any length and producing a fixed length output. It doesn’t matter if the input to a certain hash function is 3 or 100 characters, the output will always be the same length.

Cryptographic hash functions* are hash functions that have these crucial properties:

* **Deterministic**: No matter how many times you give the function a specific input, it will always have the same output.
* **Irreversible**: It is impossible to determine an input from the output of the function.
* **Collision resistance**: No two inputs can ever have the same output.

Another important feature of cryptographic hash functions is that changing any bit of data in the input will drastically alter the output. For example, the hash outputs of 111111 and 111112 would be completely unique and have no relation to each other.

The most widespread use case for cryptographic hash functions is password storage. Most websites do not store your raw password – they store a hash of your password and simply check if the hash matches when you enter it on a given site visit. If a hacker breaks into their database, they will only have access to the irreversible password hashes.

So, how does cryptographic hashing enable immutability for blockchain technology? The answer is that every new block of data contains a hash output of all the data in the previous block.

Imagine a blockchain that just added its 1000th block. The data from block 999 exists in block 1000 as a hash function output. However, included in block 999’s data is a hash of block 998’s data, which contains a hash of block 997’s data.

By traversing the hashes backwards, every block from 1000 to 1 is linked by cryptographic hashing. A diagram of this architecture is shown below:

![Simplified Blockchain](../../../static/img/learn/module-1/basic-cryptography-2.jpg)

This is ultimately what makes the data in a blockchain immutable. If someone tried to change just 1 bit of data in any past block, it would not only alter the hash output of that blocks data, but every block after it. Miners and nodes on the network would immediately notice the resulting hashes don’t match their version of the chain and reject the change.

*For reference, Bitcoin uses a cryptographic hash function called [SHA-256](https://en.bitcoin.it/wiki/SHA-256) and Ethereum uses [keccak256](https://eth-hash.readthedocs.io/en/latest/).

## Merkle Trees
The above diagram is a simplified version of a blockchain that leaves out some important information. It has an arrow to show that each block’s transactions are stored in a Merkle root, which is the root node of a Merkle tree.

For context, a tree is a computer science term for storing data in a hierarchical tree-like structure where bits of data are called nodes. There is a single root (top) node that has “child" nodes linked under it, which themselves have child nodes, and so on. A diagram illustrating a typical tree data structure is shown below:

![Merkle Trees](../../../static/img/learn/module-1/basic-cryptography-3.jpg)

As the diagram shows, groups of nodes within the tree are called sub-trees and a node with no children (no data under it) is called a leaf node.

A Merkle tree (or hash tree) is a tree that utilizes cryptographic hash functions to store hash outputs instead of raw data in each node. Each leaf node consists of a cryptographic hash of its original data, and every parent node is a hash of the combination of its child node hashes.

The Merkle root is simply the root (top) node of a Merkle tree, meaning it represents a hash output of the combined hashes of the left and right sub-trees. A diagram of a Merkle tree with 4 leaf nodes is shown below:

![Merkle Tree with 4 leaf](../../../static/img/learn/module-1/basic-cryptography-4.jpg)

Each leaf node represents a hash of the data for transactions A, B, C, and D. Then hash A and hash B are combined and hashed to produce hash AB, and hash CD is produced in the same way. Finally, hash AB and hash CD are combined and hashed to form the Merkle root of the tree.

So why are Merkle trees important for blockchain technology?

Using the Merkle root and applying the properties of cryptographic hash functions, one can quickly tell if transactions in a given block have been tampered with and the specific transaction that is being tampered.

If a single transaction in a confirmed block is altered, the Merkle root would end up being completely different from the "correct" Merkle root and the tampering would be obvious.

Merkle trees also allow users to verify that their transaction has been included in a block without downloading the entire blockchain. Processes such as [Simplified Payment Verification](https://en.bitcoinwiki.org/wiki/Simplified_Payment_Verification) are able to traverse branches in the Merkle tree and check if a certain transaction has been hashed into that tree. This level of efficiency for blockchain technology would be impossible without including a Merkle root in each block.

An example Merkle tree of 4 transactions in a blockchain is shown below (in this diagram, Tx_Root is the Merkle root):

![Merkle Tree of 4 txs](../../../static/img/learn/module-1/basic-cryptography-5.jpg)

## Conclusion

Cryptography is an integral part of the inner-workings of blockchain technology. Public-key encryption serves as the basis for blockchain wallets and transactions, cryptographic hash functions provide the trait of immutability, and Merkle trees organize transactions while enabling blockchains to be more efficient.

'''
'''--- docs/learn/module-1/censorship-resistance.md ---
---
sidebar_position: 8
---

# Censorship Resistance

'''
'''--- docs/learn/module-1/data-ownership.md ---
---
sidebar_position: 6
---

# Data Ownership

'''
'''--- docs/learn/module-1/money-as-the-first-app.md ---
---
sidebar_position: 9
---

# Money as the First App

'''
'''--- docs/learn/module-1/network-participants.md ---
---
sidebar_position: 4
---

# Network Participants

'''
'''--- docs/learn/module-1/privacy.md ---
---
sidebar_position: 7
---

# Privacy

'''
'''--- docs/learn/module-1/system-of-coordination.md ---
---
sidebar_position: 3
---

# System of Coordination

'''
'''--- docs/learn/module-1/trustless-computing.md ---
---
sidebar_position: 5
---

# Trustless Computing

'''
'''--- docs/learn/module-1/what-is-a-blockchain.md ---
---
sidebar_position: 2
---

# What is a Blockchain

The most significant achievement in the early stages of the internet was the ability to transfer data in the form of messages, pictures, music, and more. This advancement ushered in a new era of civilization, one where people had access to an ever-growing collection of knowledge and ideas.

However, because data can be copied and distributed by anyone on the internet, there was no way to digitally transfer money between two parties in a secure way. Transactional data could easily be copied or falsified, meaning transfers of value required a third party for verification.

The invention of blockchain tackled this issue – it allows for the secure transfer of value between any two parties with an internet connection.

In short, a blockchain is a distributed ledger of data that is maintained and updated by a network of computers across the globe. The data is packaged into blocks, and each one contains a timestamp and a cryptographic link to the previous block.

The first widespread implementation of blockchain technology came along with the release of Bitcoin in 2009 by an anonymous person/entity named "Satoshi Nakamoto".

The Bitcoin blockchain is used as a ledger containing all wallet balances and transactional data, keeping records that are secure and immutable – effectively impossible to change once they are stored on the blockchain.

After Bitcoin, more projects have been released that explore the possibilities of blockchain beyond wallet balances and transactional data. Blockchain technology has the potential to optimize processes in industries such as insurance, healthcare, real estate, and more, and the use cases are just starting to be explored.

## How does it work?

As mentioned above, a blockchain is a distributed database where data is packaged into blocks and added to the database by computers (called nodes) across the world. These nodes work together to achieve a consensus on new data that is being added to the blockchain.

A new block contains a timestamp of when it was created, and a hash of all the data (transactions, difficulty target, etc.) in the previous block.

As a quick overview, hashing is a cryptographic process where a big chunk of data is converted into a much smaller string of numbers and letters. The process creates a completely different hash for every unique set of data, even if the change is just one letter or number.

Therefore, each block contains a hash of the data in the previous block, and that block contains the hash of the data from 2 blocks ago, which includes the hash of the data from 3 blocks ago… and so forth. Each new block of data is cryptographically connected to the block before it, securing the entire chain together.

## Consensus Protocol
There are many protocols that regulate how nodes achieve consensus, but the most popular is proof-of-work. Proof of work was implemented into the Bitcoin blockchain at its inception and is the consensus mechanism of many other large networks such as Ethereum.

While data is being added to the current block, other computers called miners are attempting to crack a code that validates the block. After validation, the “winning” miner broadcasts the result at which point the block is sealed and miners move on attempting to guess the next block’s code.

The mining process is comparable to guessing a random long password – the more computing power you have, the faster you can make guesses thus giving you a better chance to validate the current block.

People are incentivized to use their computers as miners through automatically distributed block rewards, where the first miner that correctly guesses the next block’s code receives an allocation of new coins.

The inflation rate is programmed into the blockchain and there is no other way to mint new coins. This incentivization is extremely important because miners are the main actors in protecting the network from malicious actors.

As an example, let’s say someone wants to alter a transaction on the blockchain to credit their wallet with 10 BTC instead of the 1 BTC they are supposed to receive. They broadcast the faulty transaction on their copy of the blockchain, and for the transaction to be accepted as valid, they would have to mine the next block. If they don’t, the computer that mines the block would broadcast the block with its valid data, not including the faulty transaction.

However, to beat the rest of the network in mining the block and continue beating them afterwards, at least 51% of all the network’s computing power is required. This is called a 51% attack and is the main security vulnerability in a proof-of-work blockchain system. It’s also the reason why a blockchain is more secure as the number of miners and difficulty of mining go up.

## Wallets

The main way to interact with a blockchain is through wallets, which allows users to own, send, and receive assets.

Each wallet has a public address and an associated private key, where both are strings of numbers and letters. The public address can be generated from the private key, but the process is not reversible as a private key can never be derived from a public address.

The public address can be thought of as a physical home address; it is public for anyone to see and used to receive mail or packages – but in this case it is assets on the blockchain.

The private key is like your house key in the sense that only you, the home owner, should ever have access to it. If you give away your house key, anyone can enter your home and steal the contents of your house. If you give away or have your private key stolen, that person then has full access to move funds out of your blockchain wallet.

## Summary

Blockchain technology is a distributed database that has provided solutions to two of the major hurdles facing the internet: (1) transferring assets in a peer-to-peer fashion and (2) immutable data.

A blockchain works by utilizing nodes and miners to validate and update the data being added to the database. Miners are incentivized to contribute their computing power to the network through block rewards, where new coins are minted.

Each block of data in the blockchain is cryptographically linked to the previous block, connecting from the current block to the first block ever created. This mechanism secures the data on the network and ensure malicious actors cannot change a blockchain’s data at will.

Wallets are the main interface for interacting with the blockchain and are comprised of a public address and private key. The public address can be seen by anyone and is only used for receiving coins, while the private key is the only way to send coins out of your wallet.

## Currated Materials

:::note Currated Watching
[Whiteboard Crypto: What is a Blockchain? (Animated + Examples)](https://www.youtube.com/watch?v=kHybf1aC-jE)
:::

'''
'''--- docs/learn/module-2/_category_.json ---
{
  "label": "Module 2 - Blockchain Technical Concepts",
  "position": 3
}

'''
'''--- docs/learn/module-2/block-explorers.md ---
---
sidebar_position: 8
---

# Block Explorers

'''
'''--- docs/learn/module-2/block-production.md ---
---
sidebar_position: 1
---

# Block Production

'''
'''--- docs/learn/module-2/consensus-mechanisms.md ---
---
sidebar_position: 3
---

# Consensus Mechanisms
'''
'''--- docs/learn/module-2/gas.md ---
---
sidebar_position: 7
---

# Gas

'''
'''--- docs/learn/module-2/keys-and-addresses.md ---
---
sidebar_position: 5
---

# Keys and Addresses

'''
'''--- docs/learn/module-2/layer-2s-and-sidechains.md ---
---
sidebar_position: 12
---

# Layer 2s and Sidechains

'''
'''--- docs/learn/module-2/miner-extractable-value.md ---
---
sidebar_position: 10
---

# Miner Extractable Value

'''
'''--- docs/learn/module-2/oracles.md ---
---
sidebar_position: 9
---

# Oracles

'''
'''--- docs/learn/module-2/scalability-trilemma.md ---
---
sidebar_position: 11
---

# Scalability Trilemma

'''
'''--- docs/learn/module-2/security.md ---
---
sidebar_position: 4
---

# Security

'''
'''--- docs/learn/module-2/transactions.md ---
---
sidebar_position: 6
---

# Overview

'''
'''--- docs/learn/module-3/_category_.json ---
{
  "label": "Module 7 - Deep Dive",
  "position": 7
}

'''
'''--- docs/learn/module-3/avalanche.md ---
---
sidebar_position: 10
---

# Avalanche

'''
'''--- docs/learn/module-3/bitcoin.md ---
---
sidebar_position: 1
---

# Bitcoin

'''
'''--- docs/learn/module-3/bnbchain.md ---
---
sidebar_position: 5
---

# BNBChain

'''
'''--- docs/learn/module-3/bridging.md ---
---
sidebar_position: 13
---

# Bridging

'''
'''--- docs/learn/module-3/cosmos.md ---
---
sidebar_position: 8
---

# Cosmos

Cosmos is an interoperable blockchain protocol that facilitates the transfer of data through a network of communicating blockchains. Its goal is to "create an Internet of Blockchains". It operates via a Hub-and-spoke model of which will consist of an ecosystem of blockchain Hubs, each of which will have several Zones (sidechains) pegged to it. The main chain is called the Cosmos Hub. Creating a Zone is permissionless, but creating a new Hub will most likely require majority agreement. ATOM is the native asset of Cosmos and is used for on-chain governance. Specifically, ATOMs can be staked by Zone validators to join Hubs. Cosmos Hub has a similar gas system and requires ATOM to be used for transaction fees. ATOMs are, however, intended to be highly illiquid, thus, Cosmos does not have a native medium of exchange.

The Cosmos Hub is designed to keep track of the account balances in Cosmos Zones. Zones have to be able to submit a light client proof of their state to Hubs that the Hub can understand. Thus, Zones can run any consensus protocol that allows them to generate such proofs. Furthermore, while incentive mechanisms are deployed on the Hub level, Zones are responsible for providing enough incentive mechanisms to keep an honest majority.

**Block Explorer**: https://cosmos.bigdipper.live/

**Addresses**: There are 3 main types of Addresses available by default in the Cosmos SDK: 1) accounts, which identify users and are derived using the secp256k1 curve; 2) validator operators, which identify the operators of validators and are derived using the secp256k1 curve; and 3) consensus nodes, which identify the validator nodes participating in consensus and are derived using the ed25519 curve. All addresses are of 20 byte length prepended with a Bech32 prefix.
Example: cosmos1hk4ze3hqwg62w89gmee3hj72u7wrap0a2ts87u

**Block Time**: Average of 6-7 seconds.

**Consensus**: Delegated Proof-of-Stake powered by Tendermint Core, a Byzantine Fault Tolerance consensus mechanism.

**ATOM Supply**: Total supply capped at 237,928,231 ATOM.

Smart Contracts: Like Polkadot, the Cosmos Hub does not implement smart contracts natively. Application-specific blockchains or Zones can implement smart contract functionality. One example is Strong Force, a C# smart contracts framework over Tendermint consensus.

Example contract code in Strong Force:

```c#
public abstract class Contract
{
    protected Contract(Address address)
    {
         this.Address = address;
    }
    public Address Address { get; }
    internal event EventHandler<ActionEventArgs> Send;
    internal event EventHandler<ActionEventArgs> Forward;
    protected internal abstract object GetState();
    protected internal virtual bool Receive(Action action)
    {
       return this.HandleReceivedAction(action);
    }
    protected abstract bool HandleReceivedAction(Action action);
    protected virtual void Redirect(Action action) { }
}
```

'''
'''--- docs/learn/module-3/ethereum.md ---
---
sidebar_position: 4
---

# Ethereum

Ethereum is a public blockchain that pioneered and popularized blockchain based smart contracts which can be used to build decentralized applications. ETH is the native currency, which is generated as a reward to miners for computations performed and is also the only currency accept in the payment of transaction fees in the network. The blockchain uses a virtual machine (dubbed the Ethereum Virtual Machine), which is Turing-complete, to execute smart contracts. The concept of "gas" is used as an internal transaction pricing mechanism to mitigate spam and resource hogging on the network. Gas is a unified unit of cost of computation on the blockchain.

Ethereum 2.0 is the upcoming and latest iteration of Ethereum, which will introduce sharding and Proof-of-Stake. Dapps will be able to choose which shard they want to run on. It is designed to have a main chain, called the Beacon Chain, and pegged to the Beacon Chain are several sub-chains or shards. Shards would need to go through the Beacon Chain should they want to communicate with each other, thus cross-shard communication, although possible, is not encouraged as it is slow. The minimum staking threshold for validators is 32 ETH. Validators will be assigned to shards and divided into block proposers and committees. A block proposer is a validator that has been pseudorandomly selected to build a block. Most of the time, validators are attesters that vote on beacon blocks and shard blocks. These votes are recorded in the Beacon Chain. The votes determine the head of the Beacon Chain, and the heads of shards. A committee is a group of validators which attempt to crosslink a particular shard. A crosslink is a reference in a beacon block to a shard block, and it is how the Beacon Chain follows the head of a shard chain. All shard chains are following the Beacon Chain at all times as the Beacon chain will be treated as the "single source of truth".

**Block Explorer**: https://etherscan.io/

**Addresses**: "0x" prefix concatenated with the rightmost 20 bytes of the Keccak-256 hash of the ECDSA public key. Account and contract addresses are indistinguishable and share the same format, however contract addresses are determined by the sender address and creation transaction nonce.
Example: `0x2B522cABE9950D1153c26C1b399B293CaA99FcF9`

**Block Time**: Average of 15 seconds.

**Consensus**: For Ethereum 1.0, consensus is Proof-of-Work with a modified version of Nakamoto consensus via transaction-based state transitions. It uses Ethash as the hashing algorithm, which is designed to be ASIC-resistant via memory-hardness. For Ethereum 2.0, consensus is Proof-of-Stake using Casper Correct by Construction with Greediest Heaviest Observed Sub-Tree (GHOST) as the fork-choice rule protocol.

**ETH Supply**: No hard cap on the total supply.

**Smart Contracts**: Solidity, a statically-typed Javascript-like language, is the most popular high-level programming language on Ethereum that compiles code to EVM bytecode.

Example contract code:

```solidity
pragma solidity >=0.5.0 <0.7.0;

contract Coin {
    // The keyword "public" makes variables
    // accessible from other contracts
    address public minter;
    mapping (address => uint) public balances;

    // Events allow clients to react to specific
    // contract changes you declare
    event Sent (address from, address to, uint amount);

    // Constructor code is only run when the contract
    // is created
    constructor() public {
        minter = msg.sender;
    }

    // Sends an amount of newly created coins to an address
    // Can only be called by the contract creator
    function mint(address receiver, uint amount) public {
        require(msg.sender == minter);
        require(amount < 1e60);
        balances[receiver] += amount;
    }

    // Sends an amount of existing coins
    // from any caller to an address
    function send(address receiver, uint amount) public {
        require(amount <= balances[msg.sender], "Insufficient balance.");
        balances[msg.sender] -= amount;
        balances[receiver] += amount;
        emit Sent (msg.sender, receiver, amount);
    }
}
```

'''
'''--- docs/learn/module-3/fantom.md ---
---
sidebar_position: 11
---

# Fantom

'''
'''--- docs/learn/module-3/monero.md ---
---
sidebar_position: 3
---

# Monero

'''
'''--- docs/learn/module-3/near.md ---
---
sidebar_position: 9
---

# NEAR

NEAR Protocol is a public blockchain and smart contract platform built to host high-throughput decentralized applications. It uses an sharding to scale the network and improve the overall user experience. NEAR, of the same name, is the native currency that holders can use to pay the costs associated with deploying applications or submitting transactions. The NEAR token also plays a central role in the platform's Proof-of-Stake consensus mechanism, where participants can stake tokens on the network to increase its cost of attack. Similar to Ethereum, the concept of gas is also used to pay for computation and mitigate spam. Accounts also pay storage rent which accumulates over time and is charged once the account submits a transaction for processing. Storage rent is charged for data and also as a tax on short account names to discourage name squatting.

In a block, transactions are split into chunks, one chunk per shard. A block is the accumulation of all chunks. Chunks are validated by nodes that maintain the state of that shard. Each logical block will theoretically contain all transactions for all shards. Each network participant maintains the state that corresponds to the shards that they validate transactions for and any additional shard that they want to track, since transmitting a logical block across the network would be expensive.

For consensus, once a block producer publishes a block, they collect the signatures of the validator nodes, then the weight of a block is determined by the cumulative stake of all the signers whose signatures are included in the block. Thus, consensus is based on the heaviest chain, as the weight of a chain is the sum of the block weights. Additionally, the consensus utilizes the Nightshade Finality Gadget, which introduces additional slashing conditions for higher chain security.

**Block Explorer**: https://explorer.near.org/

**Addresses**: Uses readable account IDs instead of a hash of a public key. Account IDs contain a minimum length of 2 with maximum length of 64. Account ID consists of Account ID parts separated by "." and each part consists of lowercase alphanumeric symbols separated by either _ or -. Example: `blockgenesis.near`

**Consensus**: Sharded Proof-of-Stake with blocks constructed with a gadget called Doomslug and a slower finality gadget called Nightshade Finality Gadget.

**NEAR Supply**: No hard cap on the total supply.

**Smart Contracts**: Contracts compile down to WebAssembly (.wasm), which is a binary instruction format for a stack-based virtual machine, that are run on a WebAssembly virtual machine. You can therefore use any language that can compile to wasm, but the recommended to use is Rust.

Example contract code:

```rust
/**
* Fungible Token implementation with JSON serialization.
* NOTES:
*  - The maximum balance value is limited by U128 (2**128 - 1).
*  - JSON calls should pass U128 as a base-10 string. E.g. "100".
*  - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some
*    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.
*  - This contract doesn't optimize the amount of storage, since any account can create unlimited
*    amount of allowances to other accounts. It's unclear how to address this issue unless, this
*    contract limits the total number of different allowances possible at the same time.
*    And even if it limits the total number, it's still possible to transfer small amounts to
*    multiple accounts.
*/
use borsh::{BorshDeserialize, BorshSerialize};
use near_sdk::collections::Map;
use near_sdk::json_types::U128;
use near_sdk::{env, near_bindgen, AccountId, Balance};

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

/// Contains balance and allowances information for one account.
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Account {
    /// Current account balance.
    pub balance: Balance,
    /// Escrow Account ID hash to the allowance amount.
    /// Allowance is the amount of tokens the Escrow Account ID can spent on behalf of the account
    /// owner.
    pub allowances: Map<Vec<u8>, Balance>,
}

impl Account {
    /// Initializes a new Account with 0 balance and no allowances for a given `account_hash`.
    pub fn new(account_hash: Vec<u8>) -> Self {
        Self {
            balance: 0,
            allowances: Map::new(account_hash),
        }
    }

    /// Sets allowance for account `escrow_account_id` to `allowance`.
    pub fn set_allowance(&mut self, escrow_account_id: &AccountId, allowance: Balance) {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        if allowance > 0 {
            self.allowances.insert(&escrow_hash, &allowance);
        } else {
            self.allowances.remove(&escrow_hash);
        }
    }

    /// Returns the allowance of account `escrow_account_id`.
    pub fn get_allowance(&self, escrow_account_id: &AccountId) -> Balance {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        self.allowances.get(&escrow_hash).unwrap_or(0)
    }
}

/// Contains balance and allowances information for one account.
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Account {
    /// Current account balance.
    pub balance: Balance,
    /// Escrow Account ID hash to the allowance amount.
    /// Allowance is the amount of tokens the Escrow Account ID can spent on behalf of the account
    /// owner.
    pub allowances: Map<Vec<u8>, Balance>,
}

impl Account {
    /// Initializes a new Account with 0 balance and no allowances for a given `account_hash`.
    pub fn new(account_hash: Vec<u8>) -> Self {
        Self {
            balance: 0,
            allowances: Map::new(account_hash),
        }
    }

    /// Sets allowance for account `escrow_account_id` to `allowance`.
    pub fn set_allowance(&mut self, escrow_account_id: &AccountId, allowance: Balance) {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        if allowance > 0 {
            self.allowances.insert(&escrow_hash, &allowance);
        } else {
            self.allowances.remove(&escrow_hash);
        }
    }

    /// Returns the allowance of account `escrow_account_id`.
    pub fn get_allowance(&self, escrow_account_id: &AccountId) -> Balance {
        let escrow_hash = env::sha256(escrow_account_id.as_bytes());
        self.allowances.get(&escrow_hash).unwrap_or(0)
    }
}

//
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct FungibleToken {
    /// sha256(AccountID) -> Account details.
    pub accounts: Map<Vec<u8>, Account>,

    /// Total supply of the all token.
    pub total_supply: Balance,
}

impl Default for FungibleToken {
    fn default() -> Self {
        panic!("Fun token should be initialized before usage")
    }
}

#[near_bindgen]
impl FungibleToken {
    /// Initializes the contract with the given total supply owned by the given `owner_id`.
    #[init]
    pub fn new(owner_id: AccountId, total_supply: U128) -> Self {
        let total_supply = total_supply.into();
        assert!(env::state_read::<Self>().is_none(), "Already initialized");
        let mut ft = Self {
            accounts: Map::new(b"a".to_vec()),
            total_supply,
        };
        let mut account = ft.get_account(&owner_id);
        account.balance = total_supply;
        ft.set_account(&owner_id, &account);
        ft
    }

    /// Sets the `allowance` for `escrow_account_id` on the account of the caller of this contract
    /// (`predecessor_id`) who is the balance owner.
    pub fn set_allowance(&mut self, escrow_account_id: AccountId, allowance: U128) {
        let allowance = allowance.into();
        let owner_id = env::predecessor_account_id();
        if escrow_account_id == owner_id {
            env::panic(b"Can't set allowance for yourself");
        }
        let mut account = self.get_account(&owner_id);

        account.set_allowance(&escrow_account_id, allowance);
        self.set_account(&owner_id, &account);
    }

    /// Transfers the `amount` of tokens from `owner_id` to the `new_owner_id`.
    /// Requirements:
    /// * `amount` should be a positive integer.
    /// * `owner_id` should have balance on the account greater or equal than the transfer `amount`.
    /// * If this function is called by an escrow account (`owner_id != predecessor_account_id`),
    ///   then the allowance of the caller of the function (`predecessor_account_id`) on
    ///   the account of `owner_id` should be greater or equal than the transfer `amount`.
    pub fn transfer_from(&mut self, owner_id: AccountId, new_owner_id: AccountId, amount: U128) {
        let amount = amount.into();
        if amount == 0 {
            env::panic(b"Can't transfer 0 tokens");
        }
        // Retrieving the account from the state.
        let mut account = self.get_account(&owner_id);

        // Checking and updating unlocked balance
        if account.balance < amount {
            env::panic(b"Not enough balance");
        }
        account.balance -= amount;

        // If transferring by escrow, need to check and update allowance.
        let escrow_account_id = env::predecessor_account_id();
        if escrow_account_id != owner_id {
            let allowance = account.get_allowance(&escrow_account_id);
            if allowance < amount {
                env::panic(b"Not enough allowance");
            }
            account.set_allowance(&escrow_account_id, allowance - amount);
        }

        // Saving the account back to the state.
        self.set_account(&owner_id, &account);

        // Deposit amount to the new owner and save the new account to the state.
        let mut new_account = self.get_account(&new_owner_id);
        new_account.balance += amount;
        self.set_account(&new_owner_id, &new_account);
    }

    /// Transfer `amount` of tokens from the caller of the contract (`predecessor_id`) to
    /// `new_owner_id`.
    /// Act the same was as `transfer_from` with `owner_id` equal to the caller of the contract
    /// (`predecessor_id`).
    pub fn transfer(&mut self, new_owner_id: AccountId, amount: U128) {
        self.transfer_from(env::predecessor_account_id(), new_owner_id, amount);
    }

    /// Returns total supply of tokens.
    pub fn get_total_supply(&self) -> U128 {
        self.total_supply.into()
    }

    /// Returns balance of the `owner_id` account.
    pub fn get_balance(&self, owner_id: AccountId) -> U128 {
        self.get_account(&owner_id).balance.into()
    }

    /// Returns current allowance of `escrow_account_id` for the account of `owner_id`.
    ///
    /// NOTE: Other contracts should not rely on this information, because by the moment a contract
    /// receives this information, the allowance may already be changed by the owner.
    /// So this method should only be used on the front-end to see the current allowance.
    pub fn get_allowance(&self, owner_id: AccountId, escrow_account_id: AccountId) -> U128 {
        self.get_account(&owner_id)
            .get_allowance(&escrow_account_id)
            .into()
    }
}
```

'''
'''--- docs/learn/module-3/other-blockchains.md ---
---
sidebar_position: 12
---

# Other Blockchains

'''
'''--- docs/learn/module-3/polkadot.md ---
---
sidebar_position: 7
---

# Polkadot

Polkadot is a heterogeneous multi-chain blockchain designed to offer interoperability and scalability. Its base protocol leverages Parity Technologies’ Substrate framework, allowing Polkadot-based chains and applications to communicate, transact, and transfer data without relying on intermediary products or services. Polkadot does not provide application functionality but instead aims to serve as a relay-chain, hosting dynamic data structures called parallelized chains, or parachains, that provide Polkadot’s consensus, finality and voting logic.

The blockchain consists of a Relay chain and a network of Parachains. Parachains are pegged to the Relay chain and are responsible for sending the hash of every block to the Relay chain. Imagine this similar to a screenshot of the current state of the Parachain. Receiving state updates from the Parachains allows the Relay chain to foster value transfer between Parachains. Note that messages can be broadcasted instantly between Prachains and do not require finality.

Polkadot’s finality mechanism is called GRANDPA, which utilizes Proof-of-Stake. GRANDPA reaches agreements on chains. It is not responsible for validating transactions on a per-block basis. To reach consensus on individual blocks, Polkadot implements a consensus mechanism, called BABE. BABE is responsible for assigning validator slots to nodes with the highest stake. This combination allows 1) probabilistic finality by BABE due to its chain selection rule, where after a certain time the block will be finalized with a probability close to one and 2) provable and deterministic finality by GRANDPA, where finalized blocks stay final forever.

To enhance interoperability between blockchains, Polkadot utilizes bridges that link the Relay chain to the external blockchain. Since Ethereum cannot become a Relay chain on the Polkadot network, it is planned to connect both chains via a bridge.

Polkadot uses erasure coding to reconstruct information on individual Parachains. This is necessary to prove to other Parachains that information on a particular Parachain is available. The information of a block are held between various validators. If a block is unavailable, it can be reconstructed by a subsection of the original. Ethereum and NEAR Protocol utilize a similar concept.

**Block Explorer**: https://polkascan.io/

**Addresses**: Substrate-based chains uses SS58 format. SS58 is a modification of Base58-check from Bitcoin with some minor modifications. Notably, the format contains an address type prefix which identifies an address as belonging to a specific network. For example, Polkadot addresses always start with the number 1. Kusama addresses always start with a capital letter like C, D, F, G, H, J, etc. Generic Substrate addresses start with 5.
Example: `1FRMM8PEiWXYax7rpS6X4XZX1aAAxSWx1CrKTyrVYhV24fg`

**Block Time**: The Relay Chain will target to produce a block every 6 seconds.

**Consensus**: Nominated Proof-of-Stake with GRANDPA as the finality gadget and BABE as the block production mechanism.

DOT Supply: No hard cap on the total supply.

**Smart Contracts**: The Polkadot Relay Chain does not implement smart contracts natively due to partly the design philosophy of Polkadot that dictates that the Relay Chain should be the minimal logic required to accomplish its job. However, Polkadot will be a platform for other chains that do implement smart contracts, such as Ink, Moonbeam, and Edgeware.

Example contract code in Ink:

```rust
// declare modules
use parity::<module>
...
//wrap entire contract inside the contract! macro
contract! {
   // contract variables as a struct
   struct NFToken {
      owner: storage::Value<AccountId>,
      ...
   }
   // compulsory deploy method that is run upon the initial contract instantiation
   impl Deploy for NFToken {
      fn deploy(&mut self, init_value: u64){}
   }
   // define events
   event EventMint { owner: AccountId, value: u64 } 
   ...
   // public contract methods in an impl{} block
   impl NFToken {
      pub(external) fn total_minted(&self) -> u64 {}
      ...
   }
   // private contract methods in a separate impl{} block
   imp NFToken {
      fn is_token_owner(
         &self, 
         of: &AccountId, 
         token_id: u64) -> bool {}
       ...
   }
}
// test functions
mod tests {
   fn it_works() {}
   ...
}
```

'''
'''--- docs/learn/module-3/solana.md ---
---
sidebar_position: 6
---

# Solana

Solana is a permissionless blockchain that supports the creation of smart contracts and hosting of decentralized applications It intends to feature automatically ordered transactions, sub-second settlement times, low transaction costs, and support for all LLVM compatible smart contract languages.

Core to Solana's scaling solution is a decentralized clock titled Proof-of-History (PoH), built to solve the problem of time in distributed networks in where there is not a single, trusted, source of time. By using Verifiable Delay Functions, PoH allows each node to locally generate timestamps with SHA256 computations. This eliminates the need for the broadcasts of timestamps accross the network, improving overall network efficiency. olana requires all validators to constantly solve SHA256-based Verifiable Delay Functions (VDF).

Solana's blockchain is built using 8 major innovations: 1) Proof-of-History, as described above; 2) Tower Byzantine Fault Tolerance, a PoH-optimized version of PBFT leveraging PoH as a clock before consensus to reduce communication overhead and latency; 3) Turbine, a block propagation protocol that solves the block propagation time as the number of nodes in the network increases; 4) Gulf Stream, a Mempool-less transaction forwarding protocol that determines upcoming network leaders according to their stakes for each block production process; 5) Sealevel, a parallel smart contracts run-time designed to scale horizontally across GPUs and SSDs; 6) Pipeline, transaction processing unit for validation that ensures that all parts of the hardware are efficiently at work all the time; 7) Cloudbreak, horizontally-scaled accounts database designed to optimize for concurrent reads and writes spread across a RAID 0 configuration of SSDs; and 8) Archivers, distributed ledger storage that is offloaded from validators to a network of nodes.

SOL is the native asset of the Solana blockchain. SOL tokens are used to pay Solana node-clusters as a fee for processing and validating on-chain programs or transactions. SOL is used for staking, transaction fees to pay for simple transactions and smart-contract executions, and soon will be used in governance voting in the future. Fractional SOLs are called lamports in honor of Turing Award winner Leslie Lamport.

**Block Explorer**: https://explorer.solana.com/

**Addresses**: Base58 encoding of a 32-byte Ed25519 public key.
Example: `GKvqsuNcnwWqPzzuhLmGi4rzzh55FhJtGizkhHaEJqiV`

**Block Time**: Every 400 milliseconds.

**Consensus**: A variant of Delegated Proof-of-Stake called Tower BFT, a Proof-of-History version of PBFT.

**SOL Supply**: 488,630,608.32170373 SOLs.

**Smart Contracts**: May be written in any programming language that can target the Berkley Packet Filter (BPF) safe execution environment. The Solana SDK offers the best support for C/C++ and Rust programs, which are compiled to BPF using the LLVM compiler infrastructure.

Example contract code in C:

```c++
#include <solana_sdk.h>

extern uint64_t entrypoint(const uint8_t *input) {
  SolAccountInfo ka[1];
  SolParameters params = (SolParameters) { .ka = ka };

  sol_log("Hello World");

  if (!sol_deserialize(input, &params, SOL_ARRAY_SIZE(ka))) {
    return ERROR_INVALID_ARGUMENT;
  }
  sol_log_params(&params);
  return SUCCESS;
}
```
'''
'''--- docs/learn/module-3/zcash.md ---
---
sidebar_position: 2
---

# ZCash

'''
'''--- docs/learn/module-4/_category_.json ---
{
  "label": "Module 2 - Financial Systems",
  "position": 3
}

'''
'''--- docs/learn/module-4/automated-market-makers.md ---
---
sidebar_position: 4
---

# Automated Market Makers

An automated market maker (AMM) is an automated liquidity protocol powered by a constant product formula and implemented in a system of non-upgradeable smart contracts on the blockchain. It obviates the need for trusted intermediaries, prioritizing decentralization, censorship resistance, and security.

Each AM smart contract, or pair, manages a liquidity pool made up of reserves of two ERC-20 tokens.

Anyone can become a liquidity provider (LP) for a pool by depositing an equivalent value of each underlying token in return for pool tokens. These tokens track pro-rata LP shares of the total reserves, and can be redeemed for the underlying assets at any time.

## How it works

Pairs act as automated market makers, standing ready to accept one token for the other as long as the "constant product" formula is preserved. This formula, most simply expressed as $x * y = k$, states that trades must not change the product ($k$) of a pair’s reserve balances ($x$ and $y$). Because $k$ remains unchanged from the reference frame of a trade, it is often referred to as the invariant. This formula has the desirable property that larger trades (relative to reserves) execute at exponentially worse rates than smaller ones.

In practice, most AMMs applies a fee (usually 0.3%) to trades, which is added to reserves. As a result, each trade actually increases $k$. This functions as a payout to LPs, which is realized when they burn their pool tokens to withdraw their portion of total reserves.

Because the relative price of the two pair assets can only be changed through trading, divergences between the AMM price and external prices create arbitrage opportunities. This mechanism ensures that AMM prices always trend toward the market-clearing price.

## Economic Participants

AMMs primarily comprised of three types of users: liquidity providers, traders, and developers. Liquidity providers are incentivized to contribute ERC-20 tokens to common liquidity pools. Traders can swap these tokens for one another for a fixed 0.30% fee (which goes to liquidity providers). Developers can integrate directly with the AMM smart contracts to power new and exciting interactions with tokens, trading interfaces, retail experiences, and more.

In total, interactions between these classes create a positive feedback loop, fueling digital economies by defining a common language through which tokens can be pooled, traded and used.

### Liquidity Providers

Liquidity providers, or LPs, are not a homogenous group:

* Passive LPs are token holders who wish to passively invest their assets to accumulate trading fees.
* Professional LPs are focused on market making as their primary strategy. They usually develop custom tools and ways of tracking their liquidity positions across different DeFi projects.
* Token projects sometimes choose to become LPs to create a liquid marketplace for their token. This allows tokens to be bought and sold more easily, and unlocks interoperability with other DeFi projects through Uniswap.
* Finally, some DeFi pioneers are exploring complex liquidity provision interactions like incentivized liquidity, liquidity as collateral, and other experimental strategies. Uniswap is the perfect protocol for projects to experiment with these kinds of ideas.

### Traders

There are a several categories of traders in the protocol ecosystem:

* Speculators use a variety of community built tools and products to swap tokens using liquidity pulled from the Uniswap protocol.
* Arbitrage bots seek profits by comparing prices across different platforms to find an edge. (Though it might seem extractive, these bots actually help equalize prices across broader Ethereum markets and keep things fair.)
* DAPP users buy tokens on Uniswap for use in other applications on Ethereum.
* Smart contracts that execute trades on the protocol by implementing swap functionality (from products like DEX aggregators to custom Solidity scripts).

In all cases, trades are subject to the same flat fee for trading on the protocol. Each is important for increasing the accuracy of prices and incentivizing liquidity.

### Developers/Projects

There are far too many ways an AMM is used in the wider blockchain ecosystem to count, but some examples include:

* The open-source, accessible nature of AMM smart contracts means there are countless UX experiments and front-ends built to offer access to AMM functionality. You can find AMM functions in most of the major DeFi dashboard projects. There are also many AMM-specific tools built by the community.
* Wallets often integrate swapping and liquidity provision functionality as a core offering of their product.
* DEX (decentralized exchange) aggregators pull liquidity from many liquidity protocols to offer traders the best prices by splitting their trades.
* Smart contract developers use the suite of functions available to invent new DeFi tools and other various experimental ideas.

'''
'''--- docs/learn/module-4/collateralized-loans.md ---
---
sidebar_position: 5
---

# Collateralized Loans

Collateralization is when a borrower pledges an asset as a means for the lender to recoup their capital in the instance that the borrower defaults on the loan. Defaulting on a loan or any sort of debt obligation is when the borrower fails to pay back the loan according to the original agreement. In other words, the borrower has continuously missed payments on the debt over an extended period of time. Lenders sometimes require the borrower to put up a valuable asset as collateral in which the lender has the right to possess in the instance that the loan defaults. In traditional finance, the most common types of collateral used to secure a loan include real estate, automobiles, art, jewelry, and securities.

As an example, let's assume that you are looking to purchase a new property. Like most, you don't have enough money to actually pay for the property so you take out a mortgage in order to pay for it. In this case, the lender would require you to collateralize the mortgage with the underlying property being purchased. In return, the lender would issue you a mortgage. Traditionally, mortgages are collateralized between 70% and 90% of the property value.

## Collateralized Loans in DeFi

In decentralized finance, collateralized loans are the backbone of open lending protocols. Given that DeFi empowers open, pseudo-anonymous finance, no one has a credit score or any sort of formal identity associated with the loan they are taking out. Therefore, similar to mortgages, most DeFi lending applications will require borrowers to collateralize their loan as an incentive to hold them accountable for repaying the debt. However, the key difference between traditional collateralization and DeFi collateralization (as it stands today), is that collateralizing a loan on MakerDAO or Compound will require the borrower to over-collateralize the loan.

This means that in order to take out the loan, the value of the collateral will exceed the value of the loan. For MakerDAO, borrowers are required to collateralize their loan, at minimum, of 150% of the loan value. To expand on this, if you are looking to take out a loan of 100 Dai on MakerDAO, you would have to collateralize your loan with at least $150 in Ether. You can choose your collateralization ratio which calculates the liquidation price and the amount of Dai you'll receive in return. The liquidation price is the price of Ether where the value of your loan will exceed the value of the minimum collateralization ratio.

Given that the minimum collateralization ratio is 150% and you collateralized your loan with $150 ETH for 100 DAI, any drop in ETH price below $150 would subject your loan to the 13% liquidation penalty. As such, you would want to (1) take out less Dai or (2) collateralized more Ether in order to avoid this penalty. With this in mind, most individuals will collateralize their loans well over 200%, with the average collateralization ratio across all platforms is 348%. This is done to give investors a nice padding in the case of any volatility in the crypto markets and to avoid the liquidation penalty.

## Borrower protections for DeFi Collateralized Loans

In DeFi, there are few borrower protections associated with lending. Unlike in traditional finance where both borrowers and lenders have protections, such as loan insurance, DeFi is currently lacking in protection on both ends. In general, the primary protection mechanism associated with DeFi lending is the game theory and incentives behind over-collateralized loans. Users are unlikely to not pay their loan and default as there's more capital locked as collateral. With this, borrowers are vulnerable to losing their private keys or having the smart contracts that hold their collateral hacked. In either one of these scenarios, the borrower or the lender would lose their capital with little to no recourse.

It's important that over the next few years that the DeFi space begins to establish better protection for both borrowers and lenders. We're already beginning to see this with the emergence of decentralized insurance protocols such as Nexus Mutual or CDx.

'''
'''--- docs/learn/module-4/decentralized-finance.md ---
---
sidebar_position: 8
---

# Decentralized Finance

'''
'''--- docs/learn/module-4/liquidity-provision.md ---
---
sidebar_position: 6
---

# Liquidity Provision

A liquidity pool is a trading venue for a pair or a group of ERC20 tokens. When a pool contract is created, its balances of each token are 0; in order for the pool to begin facilitating trades, someone must seed it with an initial deposit of each token. This first liquidity provider is the one who sets the initial price of the pool. They are incentivized to deposit an equal value of both tokens into the pool. To see why, consider the case where the first liquidity provider deposits tokens at a ratio different from the current market rate. This immediately creates a profitable arbitrage opportunity, which is likely to be taken by an external party.

When other liquidity providers add to an existing pool, they must deposit pair tokens proportional to the current price. If they don't, the liquidity they added is at risk of being arbitraged as well. If they believe the current price is not correct, they may arbitrage it to the level they desire, and add liquidity at that price.

## Why Pools?

AMMs don't use order books to derive the price of an asset or to match buyers and sellers of tokens. Instead, they uses what are called Liquidity Pools.

Liquidity is typically represented by discrete orders placed by individuals onto a centrally operated order book. A participant looking to provide liquidity or make markets must actively manage their orders, continuously updating them in response to the activity of others in the marketplace.

While order books are foundational to finance and work great for certain usecases, they suffer from a few important limitations that are especially magnified when applied to a decentralized or blockchain-native setting. Order books require intermediary infrastructure to host the orderbook and match orders. This creates points of control and adds additional layers of complexity. They also require active participation and management from market makers who usually use sophisticated infrastructure and algorithms, limiting participation to advanced traders. Order books were invented in a world with relatively few assets being traded, so it is not surprising they aren't ideal for an ecosystem where anyone can create their own token, and those tokens usually have low liquidity. In sum, with the infrastructural trade-offs presented by a platform like Ethereum, order books are not the native architecture for implementing a liquidity protocol on a blockchain.

A blockchain-native liquidity protocol should take advantage of the trusted code execution environment, the autonomous and perpetually running virtual machine, and an open, permissionless, and inclusive access model that produces an exponentially growing ecosystem of virtual assets.

It is important to reiterate that a Pool is just a smart contract, operated by users calling functions on it. Swapping tokens is calling swap on a Pool contract instance, while providing liquidity is calling deposit.

Just how end-users can interact with the AMMs through an interface (which in turn interacts with the underlying contracts), developers can interact directly with the smart contracts and integrate AMM functionality into their own applications without relying on intermediaries or needing permission.

## LP Tokens

Whenever liquidity is deposited into a pool, unique tokens known as liquidity pool tokens are minted and sent to the provider's address. These tokens represent a given liquidity provider's contribution to a pool. The proportion of the pool's liquidity provided determines the number of liquidity tokens the provider receives. If the provider is minting a new pool, the number of liquidity tokens they will receive will equal sqrt(x * y), where x and y represent the amount of each token provided.

Whenever a trade occurs, a 0.3% fee is charged to the transaction sender. This fee is distributed pro-rata to all LPs in the pool upon completion of the trade.

To retrieve the underlying liquidity, plus any fees accrued, liquidity providers must "burn" their liquidity tokens, effectively exchanging them for their portion of the liquidity pool, plus the proportional fee allocation.

As liquidity tokens are themselves tradeable assets, liquidity providers may sell, transfer, or otherwise use their liquidity tokens in any way they see fit.

'''
'''--- docs/learn/module-4/money-markets.md ---
---
sidebar_position: 5
---

# Money Markets

'''
'''--- docs/learn/module-4/stablecoins.md ---
---
sidebar_position: 7
---

# Stablecoins

'''
'''--- docs/learn/module-4/tokens-and-programmable-assets.md ---
---
sidebar_position: 3
---

# Tokens and Programmable Assets

Technically, "token" is just another word for "cryptocurrency" or "cryptoasset." But increasingly it has taken on a couple of more specific meanings depending on context. The first is to describe all cryptocurrencies besides Bitcoin and Ethereum (even though they are technically also tokens). The second is to describe certain digital assets that run on top of another cryptocurrencies' blockchain, as many decentralized finance (or DeFi) tokens do. Tokens have a huge range of potential functions, from helping make decentralized exchanges possible to selling rare items in video games. But they can all be traded or held like any other cryptocurrency.

The other increasingly common meaning for "token" has an even more specific connotation, which is to describe cryptoassets that run on top of another cryptocurrency's blockchain. You'll encounter this usage if you become interested in decentralized finance (or DeFi). While a cryptocurrency like Bitcoin has its own dedicated blockchain, DeFi tokens like Chainlink and Aave run on top of, or leverage, an existing blockchain, most commonly Ethereum's. 

## What Does ERC Mean?

ERC is an acronym that stands for Ethereum Request for Comments. ERCs are application level standards for Ethereum and can include token standards, name registries, library/package formats, and more. Anyone can create an ERC, but it is the author's responsibility to clearly explain their standard and foster support for it within the community.

This article will focus on common ERC token standards and how they are different from each other. These standards define a required set of functions for a token type, allowing applications and smart contracts to interact with them in a predictable way.

## ERC-20

ERC-20 is a token standard first proposed by Vitalik Buterin in June 2015. It is a simple interface that allows for the creation of tokens on Ethereum that can be re-used by other applications, from wallets to decentralized exchanges. It is also the most commonly used standard for Ethereum-based tokens and was the token of choice for many initial coin offerings (ICOs) between 2016-2018.

The ERC-20 standard contains 6 key functions that must be implemented to meet the standard. The functions are outlined below:

* **totalSupply()** – Used to get the token supply of a specific ERC-20 token.
* **balanceOf()** – Keeps track of the token balance in each Ethereum wallet.
* **transfer()** – Upon token creation, this function can send all the tokens to one wallet or distribute them to ICO investors.
* **transferFrom()** – Enables token holders to exchange tokens with one another after the initial distribution occurs.
* **approve()** – Used to "approve" other accounts to withdraw a certain amount of tokens from the account calling the function.
* **allowance()** – After approve() is used, allowance() is used to see the amount of tokens the approved account is allowed to withdraw from the original account.
  
ERC-20 tokens are relatively easy to create – as of December 1, 2018*, there are 150,558 ERC-20 contracts deployed on the Ethereum blockchain. Some of the most valuable ERC-20 tokens include Binance Coin (BNB), 0x (ZRX), and OmiseGo (OMG) with market caps of $678 million, $231 million, and $216 million, respectively.

## ERC-721

ERC-721 is a token standard that defines non-fungible tokens (NFTs) on the Ethereum blockchain.

Fungibility is a characteristic of a good or commodity whose individual units are identical and interchangeable. For example, US dollars are fungible because any dollar bill can be replaced by another dollar bill and they both represent the same exact thing.

ERC-20 tokens are also fungible. Let's say I create an ERC-20 token with the ticker CC – if I replaced 1 CC with another CC from a different wallet, there would be no tangible difference.

The ERC-721 standard was introduced to allow anyone to create tokens on Ethereum that are completely unique from one another. No two ERC-721 tokens are alike, and they can be thought of as one-of-a-kind collectables.

ERC-721 tokens can be used to represent ownership over assets, and the use cases are just starting to be explored. This includes physical assets such as land, houses, or unique art, and virtual assets like digital collectables.

CryptoKitties is one project utilizing ERC-721 tokens that gained mainstream attention in 2017 and 2018. CryptoKitties is an online game where users can collect and breed virtual cats that have unique genomes to define appearance and traits. Each kitty is represented by an Ethereum ERC-721 token which means they are all one-of-a-kind and can never be replicated, taken away from the owner, or destroyed.

As of December 1, 2018*, there have been 481,000 sales of CryptoKitties totaling over $27 million. The traffic on the DApp was enough to clog and slow down the entire Ethereum blockchain in late 2017, proving that digital collectables are a popular use case for ERC-721 tokens.

## Other Token Standards

* ERC 223 – A standard that defines a type of token similar to ERC-20 with added functionality. If ERC-20 tokens are sent to a smart contract not built to work with the ERC-20 standard, those tokens will be inaccessible forever. ERC-223 contains a method called tokenFallback that ensures tokens are only sent to contracts with the appropriate functionality.

* ERC 777 – Another standard attempting to improve upon the ERC-20 token. It defines advanced features including operators to send tokens on behalf of another address and offers users more control over their tokens.
  
* ERC 1155 – An interface that allows smart contracts to manage multiple token types. A deployed contract may include any combination of fungible tokens, non-fungible tokens, or other types (i.e. both ERC-20 and ERC-721).

* ERC 1337 – A token standard for recurring subscriptions on the Ethereum blockchain. This standard focuses on interoperability, allowing wallets to sign into recurring payment contracts and providing appropriate UI for managing and cancelling subscriptions.

'''
'''--- docs/learn/module-4/trading-jargon.md ---
---
sidebar_position: 2
---

# Trading Jargon

'''
'''--- docs/learn/module-4/traditional-centralized-finance.md ---
---
sidebar_position: 1
---

# Traditional Finance

![Traditional Finance](../../../static/img/learn/module-2/traditional-finance.png)

![DeFi vs TradFi](../../../static/img/learn/module-2/defi-vs-tradfi.png)
'''
'''--- docs/learn/module-5/_category_.json ---
{
  "label": "Module 4 - Smart Contracts",
  "position": 5
}

'''
'''--- docs/learn/module-5/architecture-and-software-stack.md ---
---
sidebar_position: 6
---

# Architecture and Software Stack

'''
'''--- docs/learn/module-5/code-is-law.md ---
---
sidebar_position: 1
---

# Code is Law

'''
'''--- docs/learn/module-5/evm-and-smart-contracts.md ---
---
sidebar_position: 2
---

# EVM and Smart Contracts

'''
'''--- docs/learn/module-5/frameworks-and-tools.md ---
---
sidebar_position: 4
---

# Frameworks and Tools

'''
'''--- docs/learn/module-5/solidity.md ---
---
sidebar_position: 3
---

# Solidity

'''
'''--- docs/learn/module-5/subgraphs.md ---
---
sidebar_position: 5
---

# Subgraphs
'''
'''--- docs/learn/module-6/_category_.json ---
{
  "label": "Module 5 - Crypto-economics",
  "position": 5
}

'''
'''--- docs/learn/module-6/bribes-and-cooperation-mechanisms.md ---
---
sidebar_position: 3
---

# Bribes and Cooperation Mechanisms

'''
'''--- docs/learn/module-6/incentive-and-yield-mechanisms.md ---
---
sidebar_position: 2
---

# Incentive and Yield Mechanisms

'''
'''--- docs/learn/module-6/tokenomics.md ---
---
sidebar_position: 1
---

# Tokenomics

'''
'''--- docs/learn/module-7/_category_.json ---
{
  "label": "Module 5 - Crypto-economics",
  "position": 5
}

'''
'''--- docs/learn/module-7/decentralized-applications.md ---
---
sidebar_position: 2
---

# Decentralized Applications

'''
'''--- docs/learn/module-7/governance.md ---
---
sidebar_position: 3
---

# Governance
'''
'''--- docs/learn/module-7/ux-patterns.md ---
---
sidebar_position: 5
---

# UX Patterns

'''
'''--- docs/learn/module-7/wallets.md ---
---
sidebar_position: 4
---

# Wallets
'''
'''--- docs/learn/module-7/web2-vs-web3.md ---
---
sidebar_position: 1
---

# Web2 vs Web3

'''
'''--- docs/learn/module-8/_category_.json ---
{
  "label": "Module 5 - Crypto-economics",
  "position": 5
}

'''
'''--- docs/learn/module-8/communication-tools.md ---
---
sidebar_position: 3
---

# Communication Tools

'''
'''--- docs/learn/module-8/crypto-twitter.md ---
---
sidebar_position: 1
---

# Crypto Twitter

'''
'''--- docs/learn/module-8/good-bad-crypto-subculture.md ---
---
sidebar_position: 4
---

# The Good and The Bad of Crypto Culture

'''
'''--- docs/learn/module-8/influencers-and-thought-leaders.md ---
---
sidebar_position: 2
---

# Influencers and Thought Leaders

'''
'''--- docs/resources/intro.md ---
---
sidebar_position: 1
---

# Resources

## Twitter

Suggested people to follow on Twitter:

### VCs

[Daryllautk](https://twitter.com/Daryllautk)<br />
[Darrenlautf](https://twitter.com/Darrenlautf)<br />
[santiagoroel](https://twitter.com/santiagoroel)<br />
[n2ckchong](https://twitter.com/n2ckchong)

## Builders

[0xMaki](https://twitter.com/0xMaki)

## Newsletters

[OurNetwork](https://ournetwork.substack.com/)<br />
[Cobie](https://cobie.substack.com/)<br />
[The Defiant](https://newsletter.thedefiant.io/)

## Telegram/Discord Channels

[The Daily Ape](https://t.me/thedailyape)<br />

## YouTube

[Finematics](https://www.youtube.com/c/Finematics/)
[Whiteboard Crypto](https://www.youtube.com/c/WhiteboardCrypto)

'''
'''--- docs/start/faqs.md ---
---
sidebar_position: 4
---

# FAQs

'''
'''--- docs/start/guide.md ---
---
sidebar_position: 2
---

# Guide to the University

Creating and building is not limited to code. In web3, you can be involved and create anything you like: from custom tools to protocol analysis, from artful memes to a community of your own, and everything in between.

The curriculum is here to ground us all in common fundamental threads so we can share the same core concepts together. Such shared concepts allow each person to explore their particular specialized skill more fully, and provide the minimum structure required to give you direction without coercion.

In the beginning, it's easy to become overwhelmed in the flood of new information. The team recognizes this and are here to support you every step of the way. So don't be afraid to ask for help.

## Tips and Tricks

Here are some suggestions for ways to approach your learning journey:

1. In the first week, you will be exposed to new teammates and many mind-altering ideas. **It will feel overwhelming**. There will be a lot of information overload. Simply be overwhelmed, without trying to fight the feeling and ending up anxious and constantly trying to catch up. We all started the same way. With enough repetition and practice, you **will** get it.

2. Throughout each week, realize that there will simply be too many things happening for you to keep up with. This is normal and expected: don't worry about missing some events in the space or at work in general.

3. As you can choose to be involved in any aspect of the protocols we are working on, the easiest way to navigate this is by being intentional about your own expectations. Spend the first few weeks meeting the team, exchanging ideas, and just listening and talking. Let all the new influences wash over you and inform what you want to do.

4. Write your intention for your own goals down. Write it down again at the start of each new week. It's completely okay to change it as many times as you like, but these kinds of rituals can help ground us and provide clarity.

5. Be honest with yourself. You will be exposed with all the good, all the bad, and all the drama in the space. Tell your peers how you're feeling. No one will judge you for it. We are all here for the long haul. We do not expect you to love every moment of crypto journey or feel totally engaged the whole time. A large part of this is simply just learning.

6. Be kind to yourself and others. In a shared network, this is the galaxy brain move. "Practice kindness all day to everybody and you will realize you’re already in heaven now."

'''
'''--- docs/start/intro.md ---
---
sidebar_position: 1
---

# Introduction

'''
'''--- docs/start/philosophy.md ---
---
sidebar_position: 3
---

# Philosophy of Genesis Block

Genesis Block does not provide concrete answers. We are here to ask better questions.

This is because there are no simple, one-size-fits-all answers to the questions we're interested in learning about and teaching. That is what makes them good questions.

Our intention is to give you the framework to begin thinking in transformative ways about the most important questions raised by this Web3 world we're building, together.

Students will separate themselves by their ability to identify patterns.

## Pattern Recognition

Pattern recognition is at the core of cognition. Becoming more conscious of patterns which already exist, as well as how you choose to interact with those in your local environment, is the single best thing you can do to improve your critical thinking skills.

In particular, we hope students begin thinking in terms of complementary opposites.

Rather than using dualities like 'decentralization good, centralization bad'; or 'DeFi is innovative, fiat is boring', this style of thinking recognizes that there is no good without evil; no attraction without repulsion, no North with South, no up without down.

We could describe this as "quantum thought" - being able to contemplate both 0 and 1 simultaneously, and the spectrum of probability between. This is not about just both/and thinking, or seeing "both sides" of a debate. It's seeing both sides and the entire spectrum of possible states between without grasping after certainty. This lack of certainty humbles you and it is precisely this humility, coupled with wider perspective of the total spectrum of possible outcomes which can lead you to make more effective decisions.

## Cypherpunks Movement

Cypherpunks are a collection of activists that advocate for the use of privacy-enhancing technologies such as cryptography for social and political change. In 1992 Eric Hughes, Timothy C. May, and John Gilmore founded a small group of cryptographers that would meet in person in San Francisco and adopted the name "Cypherpunks".

The Cypherpunks mailing list was created in the same year as an active forum for technical discussion on topics like cryptography, math, computer science, politics, and philosophy.

Cypherpunks generally hold Libertarian political views and many believe in the idea of crypto-anarchism outlined in Timothy C. May’s The Crypto Anarchist Manifesto (1992).

May mentions that new technologies "will alter completely the nature of government regulation, the ability to tax and control economic interactions, the ability to keep information secret, and will even alter the nature of trust and reputation."

He also states that the technology for this social and economic revolution has existed in theory since the 1980’s, but "the next ten years will bring enough additional speed to make the ideas economically feasible and essentially unstoppable."

In 1993, Eric Hughes released A Cypherpunk’s Manifesto which outlined the core principles of the Cypherpunk movement. Some of the most significant statements are included below:

* "Privacy is necessary for an open society in the electronic age."
* "Privacy in an open society requires anonymous transaction systems. Until now, cash has been the primary such system."
* "Privacy in an open society also requires cryptography. If I say something, I want it heard only by those for whom I intend it."
* "We cannot expect governments, corporations, or other large, faceless organizations to grant us privacy out of their beneficence."
* "We the Cypherpunks are dedicated to building anonymous systems. We are defending our privacy with cryptography, with anonymous mail forwarding systems, with digital signatures, and with electronic money."
* 
To summarize, the Cypherpunks mission is to build open source systems designed to defend privacy for everyone in this technological era. They believe that individuals should have the power to reveal their identity and words only when desired, and that neither governments nor corporations can sufficiently protect this right.

The Cypherpunk movement is directly responsible for the creation of digital currency, blockchain technology, and Bitcoin. All four founders of the Bitcoin precursors mentioned above (Adam Back, Nick Szabo, Wei Dai, and David Chaum) were Cypherpunks that first proposed their ideas through the mailing list.
'''
'''--- docusaurus.config.js ---
const math = require('remark-math');
const katex = require('rehype-katex');

/** @type {import('@docusaurus/types').DocusaurusConfig} */
module.exports = {
  title: 'Block Genesis',
  tagline: 'Take the crypto pill, and I show you how deep the rabbit hole goes.',
  url: 'https://block-genesis.github.io/',
  baseUrl: '/',
  trailingSlash: false,
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'ignore',
  favicon: 'img/favicon.ico',
  organizationName: 'block-genesis', // Usually your GitHub org/user name.
  projectName: 'block-genesis.github.io', // Usually your repo name.
  deploymentBranch: 'gh-pages',
  themeConfig: {
    colorMode: {
      defaultMode: 'light',
      disableSwitch: true,
    },
    prism: {
      additionalLanguages: ["solidity"],
    },
    hideableSidebar: false,
    navbar: {
      hideOnScroll: false,
      logo: {
        alt: 'My Site Logo',
        src: 'img/logo-title.png',
      },
      items: [
        {
          type: 'doc',
          docId: 'start/intro',
          position: 'left',
          label: 'Start',
        },
        {
          type: 'doc',
          docId: 'learn/getting-started',
          position: 'left',
          label: '📖 Learn',
        },
        {
          type: 'doc',
          docId: 'buidl/overview',
          position: 'left',
          label: '🛠️ Buidl',
        },
        {
          type: 'doc',
          docId: 'explore/intro',
          position: 'left',
          label: '🌐 Explore',
        },
        {
          type: 'doc',
          docId: 'earn/intro',
          position: 'left',
          label: 'Earn',
        },
        {
          type: 'doc',
          docId: 'resources/intro',
          position: 'left',
          label: 'Resources',
        },
      ],
    },
    footer: {
      style: 'light',
      links: [
        {
          title: 'Pages',
          items: [
            {
              label: 'Website',
              href: 'https://pendle.finance',
            },
            {
              label: 'App',
              href: 'https://app.pendle.finance',
            },
          ],
        },
        {
          title: 'Socials',
          items: [
            {
              label: 'Discord',
              href: 'https://discord.gg/EAujvncY2R/',
            },
            {
              label: 'Twitter',
              href: 'https://twitter.com/pendle_fi/',
            },
            {
              label: 'Telegram',
              href: 'https://t.me/pendlefinance/',
            },
          ],
        },
        {
          title: 'About Us',
          items: [
            {
              label: 'Medium',
              href: 'https://medium.com/pendle/',
            },
            {
              label: 'Careers',
              href: 'https://angel.co/company/pendle_finance/',
            },
            {
              label: 'Media Kit',
              href: 'https://pendle.finance/Pendle_Media_Kit.zip',
            },
            {
              label: 'Audits',
              href: 'https://github.com/pendle-finance/pendle-core/tree/master/docs/audits'
            }
          ],
        },
      ],
      logo: {
        alt: 'Pendle Finance Logo',
        src: 'img/logo.svg',
        href: 'https://pendle.finance',
      },
      copyright: `Copyright © ${new Date().getFullYear()} Pendle Finance`,
    },
  },
  presets: [
    [
      '@docusaurus/preset-classic',
      {
        docs: {
          sidebarPath: require.resolve('./sidebars.js'),
          remarkPlugins: [math],
          rehypePlugins: [katex],
        },
        theme: {
          customCss: require.resolve('./src/css/custom.css'),
        },
      },
    ],
  ],
  stylesheets: [
    {
      href: "https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/katex.min.css",
      integrity: "sha384-Um5gpz1odJg5Z4HAmzPtgZKdTBHZdw8S29IecapCSB31ligYPhHQZMIlWLYQGVoc",
      crossorigin: "anonymous",
    },
  ],
};

'''
'''--- package.json ---
{
  "name": "pendle-documentation",
  "version": "1.0.0",
  "description": "Documentation of the Pendle Protocol.",
  "author": "Pendle Labs",
  "license": "MIT",
  "homepage": "https://docs.pendle.finance",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/pendle-finance/documentation.git"
  },
  "scripts": {
    "docusaurus": "docusaurus",
    "start": "docusaurus start",
    "build": "docusaurus build",
    "swizzle": "docusaurus swizzle",
    "deploy": "docusaurus deploy",
    "clear": "docusaurus clear",
    "serve": "docusaurus serve",
    "write-translations": "docusaurus write-translations",
    "write-heading-ids": "docusaurus write-heading-ids"
  },
  "dependencies": {
    "@algolia/autocomplete-preset-algolia": "^1.5.3",
    "@algolia/client-search": "^4.13.0",
    "@babel/core": "^7.17.5",
    "@docusaurus/core": "2.0.0-beta.17",
    "@docusaurus/plugin-content-docs": "^2.0.0-beta.17",
    "@docusaurus/preset-classic": "2.0.0-beta.17",
    "@docusaurus/theme-search-algolia": "^2.0.0-beta.17",
    "@emotion/react": "^11.8.2",
    "@emotion/styled": "^11.8.1",
    "@heroicons/react": "^1.0.6",
    "@mdx-js/react": "^1.6.22",
    "@svgr/webpack": "^6.2.1",
    "algoliasearch": "^4.13.0",
    "clsx": "^1.1.1",
    "file-loader": "^6.2.0",
    "hast-util-is-element": "2.1.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "rehype-katex": "4",
    "remark-math": "3",
    "url-loader": "^4.1.1"
  },
  "browserslist": {
    "production": [
      ">0.5%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- sidebars.js ---
/**
 * Creating a sidebar enables you to:
 - create an ordered group of docs
 - render a sidebar for each doc of that group
 - provide next/previous navigation

 The sidebars can be generated from the filesystem, or explicitly defined here.

 Create as many sidebars as you want.
 */

module.exports = {
  // By default, Docusaurus generates a sidebar from the docs folder structure
  sidebarStart: [
    {type: 'autogenerated', dirName: 'start'},
  ],
  sidebarLearn: [
    'learn/getting-started',
    {
      type: 'category',
      label: 'Module 1 - Blockchain Fundamental Concepts',
      collapsed: true,
      items: [
        'learn/module-1/basic-cryptography',
        'learn/module-1/what-is-a-blockchain',
        'learn/module-1/system-of-coordination',
        'learn/module-1/network-participants',
        'learn/module-1/trustless-computing',
        'learn/module-1/data-ownership',
        'learn/module-1/privacy',
        'learn/module-1/censorship-resistance',
        'learn/module-1/money-as-the-first-app',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 2 - Blockchain Technical Concepts',
      collapsed: true,
      items: [
        'learn/module-2/block-production',
        'learn/module-2/consensus-mechanisms',
        'learn/module-2/security',
        'learn/module-2/keys-and-addresses',
        'learn/module-2/transactions',
        'learn/module-2/gas',
        'learn/module-2/block-explorers',
        'learn/module-2/oracles',
        'learn/module-2/miner-extractable-value',
        'learn/module-2/scalability-trilemma',
        'learn/module-2/layer-2s-and-sidechains',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 3 - Blockchain Wars',
      collapsed: true,
      items: [
        'learn/module-3/bitcoin',
        'learn/module-3/zcash',
        'learn/module-3/monero',
        'learn/module-3/ethereum',
        'learn/module-3/bnbchain',
        'learn/module-3/solana',
        'learn/module-3/polkadot',
        'learn/module-3/cosmos',
        'learn/module-3/near',
        'learn/module-3/avalanche',
        'learn/module-3/fantom',
        'learn/module-3/other-blockchains',
        'learn/module-3/bridging',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 4 - Financial Systems',
      collapsed: true,
      items: [
        'learn/module-4/traditional-centralized-finance',
        'learn/module-4/trading-jargon',
        'learn/module-4/tokens-and-programmable-assets',
        'learn/module-4/automated-market-makers',
        'learn/module-4/money-markets',
        'learn/module-4/liquidity-provision',
        'learn/module-4/stablecoins',
        'learn/module-4/decentralized-finance',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 5 - Development',
      collapsed: true,
      items: [
        'learn/module-5/code-is-law',
        'learn/module-5/evm-and-smart-contracts',
        'learn/module-5/solidity',
        'learn/module-5/frameworks-and-tools',
        'learn/module-5/subgraphs',
        'learn/module-5/architecture-and-software-stack',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 6 - Cryptoeconomics and Game Theory',
      collapsed: true,
      items: [
        'learn/module-6/tokenomics',
        'learn/module-6/incentive-and-yield-mechanisms',
        'learn/module-6/bribes-and-cooperation-mechanisms',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 7 - Product Design',
      collapsed: true,
      items: [
        'learn/module-7/web2-vs-web3',
        'learn/module-7/decentralized-applications',
        'learn/module-7/governance',
        'learn/module-7/wallets',
        'learn/module-7/ux-patterns',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
    {
      type: 'category',
      label: 'Module 8 - Crypto Subculture and Tribes',
      collapsed: true,
      items: [
        'learn/module-8/crypto-twitter',
        'learn/module-8/influencers-and-thought-leaders',
        'learn/module-8/communication-tools',
        'learn/module-8/good-bad-crypto-subculture',
        {type: 'link', label: '🔥 Fireside Chat', href: 'https://docs.google.com/presentation/d/1iF2iVo_g5daJAvgf1kP14TEzw9MXsO2ZJPHfHN80qNw/'},
      ],
    },
  ],
  sidebarBuidl: [
    {type: 'autogenerated', dirName: 'buidl'},
  ],
  sidebarExplore: [
    {type: 'autogenerated', dirName: 'explore'},
  ],
  sidebarResources: [
    {type: 'autogenerated', dirName: 'resources'},
  ],
};

'''
'''--- src/components/HomepageFeatures.js ---
import React from 'react';
import Link from '@docusaurus/Link';
import clsx from 'clsx';
import styles from './HomepageFeatures.module.css';

const FeatureList = [
  {
    title: 'Learn about us',
    Svg: require('../../static/img/logo.svg').default,
    description: (
      <>
        All you need to know to get started on your Pendle journey
      </>
    ),
    url: '/docs/information/intro',
  },
  {
    title: 'Build on top of Pendle',
    Svg: require('../../static/img/database.svg').default,
    description: (
      <>
        Build DApps on top of the Pendle ecosystem
      </>
    ),
    url: '/docs/guides/intro',
  },
  {
    title: 'Contract reference',
    Svg: require('../../static/img/contracts.svg').default,
    description: (
      <>
        Detailed documentation on Pendle's contracts
      </>
    ),
    url: '/docs/reference/intro',
  },
  {
    title: 'List of addresses',
    Svg: require('../../static/img/addresses.svg').default,
    description: (
      <>
        The necessary Pendle contract addresses across the different chains
      </>
    ),
    url: '/docs/addresses/avalanche',
  },
];

function Feature({Svg, title, description, url}) {
  return (
    <Link
    className="button col col--4 item shadow--md"
    to={url}>
      <div>
        <div className="text--center">
          <Svg className={styles.featureSvg} alt={title} />
        </div>
        <div className={`text--left padding-left--xl ${styles.featureText}`}>
          <h3>{title}</h3>
          <p>{description}</p>
        </div>
      </div>
    </Link>
  );
}

export default function HomepageFeatures() {
  return (
    <section className={styles.features}>
      <div className="container">
        <div className={`row ${styles.featureRow}`}>
          {FeatureList.map((props, idx) => (
            <Feature key={idx} {...props} />
          ))}
        </div>
      </div>
    </section>
  );
}

'''
'''--- src/components/HomepageFeatures.module.css ---
.features {
  display: flex;
  align-items: center;
  padding: 2rem 0;
  width: 100%;
}

.featureSvg {
  float: left;
  vertical-align: middle;
  height: 50px;
  width: 50px;
  margin-top: 10px;
}

.featureText {
  color: #152e51;
  font-size: 1rem;
}

.featureRow {
  justify-content: left;
}

'''
'''--- src/css/custom.css ---
/* stylelint-disable docusaurus/copyright-header */
/**
 * Any CSS included here will be global. The classic template
 * bundles Infima by default. Infima is a CSS framework designed to
 * work well for content-centric websites.
 */

/* You can override the default Infima variables here. */
@font-face {
  font-family: "Consolas";
  src: url('/static/Consolas-Regular.ttf') format('truetype');
}

:root {
  --ifm-color-primary: #FF5C13;
  --ifm-color-primary-dark: #B3400D;
  --ifm-color-primary-darker: #99370B;
  --ifm-color-primary-darkest: #802E0A;
  --ifm-color-primary-light: #FF7D42;
  --ifm-color-primary-lighter: #FF9D71;
  --ifm-color-primary-lightest: #FFAE89;
  --ifm-code-font-size: 95%;
  --ifm-font-family-monospace: "Consolas";
  --ifm-font-family-headers: "Roboto, -apple-system, BlinkMacSystemFont, Segoe UI, Oxygen, Ubuntu, Cantarell, Fira Sans, Droid Sans, Helvetica Neue, sans-serif";
  --ifm-font-color-base: rgba(0, 41, 60, 0.9);
  --ifm-link-color: #64667F;
  --ifm-navbar-background-color: #F5F5F5;
}

.theme-doc-sidebar-container {
  border-right: none !important;
}

.markdown a {
  text-decoration: underline;
}

.navbar {
  box-shadow: none;
}

.navbar__link {
  font-weight: normal;
}

.docusaurus-highlight-code-line {
  background-color: rgba(0, 0, 0, 0.1);
  display: block;
  margin: 0 calc(-1 * var(--ifm-pre-padding));
  padding: 0 var(--ifm-pre-padding);
}

.header-github-link:hover {
  opacity: 0.6;
}

.header-github-link::before {
  content: '';
  width: 24px;
  height: 24px;
  display: flex;
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
}

html[data-theme='dark'] .header-github-link::before {
  background: url("data:image/svg+xml,%3Csvg viewBox='0 0 24 24' xmlns='http://www.w3.org/2000/svg'%3E%3Cpath fill='white' d='M12 .297c-6.63 0-12 5.373-12 12 0 5.303 3.438 9.8 8.205 11.385.6.113.82-.258.82-.577 0-.285-.01-1.04-.015-2.04-3.338.724-4.042-1.61-4.042-1.61C4.422 18.07 3.633 17.7 3.633 17.7c-1.087-.744.084-.729.084-.729 1.205.084 1.838 1.236 1.838 1.236 1.07 1.835 2.809 1.305 3.495.998.108-.776.417-1.305.76-1.605-2.665-.3-5.466-1.332-5.466-5.93 0-1.31.465-2.38 1.235-3.22-.135-.303-.54-1.523.105-3.176 0 0 1.005-.322 3.3 1.23.96-.267 1.98-.399 3-.405 1.02.006 2.04.138 3 .405 2.28-1.552 3.285-1.23 3.285-1.23.645 1.653.24 2.873.12 3.176.765.84 1.23 1.91 1.23 3.22 0 4.61-2.805 5.625-5.475 5.92.42.36.81 1.096.81 2.22 0 1.606-.015 2.896-.015 3.286 0 .315.21.69.825.57C20.565 22.092 24 17.592 24 12.297c0-6.627-5.373-12-12-12'/%3E%3C/svg%3E")
    no-repeat;
}

html[data-theme='dark'] .docusaurus-highlight-code-line {
  background-color: #0000004d;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--ifm-font-family-headers);
}

h3 code {
  background-color: transparent;
  color: #1E79C1;
}

body {
  background-color: #F5F5F5;
}

code {
  font-family: var(--ifm-font-family-monospace);
}

img {
  display: block;
  margin: 0 auto;
}

h3 {
  margin: 0;
}

figcaption {
  color: grey;
  text-align: center;
}

.hero__title {
  text-align: left;
}

.hero__subtitle {
  text-align: justify;
  width: 50%
}

.main-wrapper {
  margin-top: 20px;
}

.button {
  white-space: normal;
}

.button p {
  font-weight: normal;
}

.padding-left--xl {
  padding-left: 5rem !important;
}

.row {
  column-gap: 50px;
  row-gap: 40px;
  justify-content: center;
  flex-wrap: nowrap;
}

.row .col.col--4 {
  background-color: #f2f6fa;
  border-radius: 30px;
  padding: 30px 30px 10px 30px;
}

@media screen and (max-width: 800px) {
  footer {
    font-size: 1.5rem;
  }

  .footer__title {
    font-size: 1.5rem;
  }

  .footer__col {
    text-align: center;
  }

  .hero__subtitle {
    text-align: left;
    width: 100%
  }

  .hero__title {
    font-size: 2rem;
  }
}

'''
'''--- src/pages/index.js ---
import React from 'react';
import clsx from 'clsx';
import Layout from '@theme/Layout';
import useDocusaurusContext from '@docusaurus/useDocusaurusContext';
import styles from './index.module.css';
import HomepageFeatures from '../components/HomepageFeatures';

function HomepageHeader() {
  const {siteConfig} = useDocusaurusContext();
  return (
    <div className="row">
      <div className="col">
        <img alt="Merkle Tree" src="/img/merkle_tree.png" />
      </div>
      <div className="col">
        <div className="padding-left--md">
          <h2 className="hero__title">Learn</h2>
          <p>
            Whether you have no idea what a blockchain is, or have been building all the decentralized things since 2009, our community will help you learn what you need to know to participate in building a better web, together.
          </p>
        </div>
      </div>
    </div>
  );
}

export default function Home() {
  const {siteConfig} = useDocusaurusContext();
  return (
    <Layout
      title={siteConfig.title}
      description="Description will go into a meta tag in <head />">
      <main className="main--landing">
        <div className="container">
          <HomepageHeader />
          {/* <HomepageFeatures /> */}
        </div>
      </main>
    </Layout>
  );
}

'''
'''--- src/pages/index.module.css ---
/* stylelint-disable docusaurus/copyright-header */

/**
 * CSS files with the .module.css suffix will be treated as CSS modules
 * and scoped locally.
 */

.heroBanner {
  padding: 4rem 0;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.buttons {
  display: flex;
  align-items: center;
  justify-content: center;
}

'''
'''--- src/theme/Footer/index.js ---
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
import React from 'react';
import clsx from 'clsx';
import Link from '@docusaurus/Link';
import {useThemeConfig} from '@docusaurus/theme-common';
import useBaseUrl from '@docusaurus/useBaseUrl';
import isInternalUrl from '@docusaurus/isInternalUrl';
import styles from './styles.module.css';
import ThemedImage from '@theme/ThemedImage';

function FooterLink({to, href, label, prependBaseUrlToHref, ...props}) {
  const toUrl = useBaseUrl(to);
  const normalizedHref = useBaseUrl(href, {
    forcePrependBaseUrl: true,
  });
  return (
    <Link
      className="footer__link-item"
      {...(href
        ? {
            href: prependBaseUrlToHref ? normalizedHref : href,
          }
        : {
            to: toUrl,
          })}
      {...props}>
      {href && !isInternalUrl(href) ? (
        <span>
          {label}
        </span>
      ) : (
        label
      )}
    </Link>
  );
}

const FooterLogo = ({sources, alt, width, height}) => (
  <ThemedImage
    className="footer__logo"
    alt={alt}
    sources={sources}
    width={width}
    height={height}
  />
);

function Footer() {
  const {footer} = useThemeConfig();
  const {copyright, links = [], logo = {}} = footer || {};
  const sources = {
    light: useBaseUrl(logo.src),
    dark: useBaseUrl(logo.srcDark || logo.src),
  };

  if (!footer) {
    return null;
  }

  return (
    <footer
      className={clsx('footer', styles.footerPadding, {
        'footer--dark': footer.style === 'dark',
      })}>
      <div className="container">
        <div class={clsx('row', styles.footerRow)}>
          <div class="col col--2 col--offset-1">
            {(logo) && (
              <div className="footer__bottom text--center">
                {logo && (logo.src || logo.srcDark) && (
                  <div className="margin-bottom--sm">
                    {logo.href ? (
                      <Link href={logo.href} className={styles.footerLogoLink}>
                        <FooterLogo
                          alt={logo.alt}
                          sources={sources}
                          width={logo.width}
                          height={logo.height}
                        />
                      </Link>
                    ) : (
                      <FooterLogo alt={logo.alt} sources={sources} />
                    )}
                  </div>
                )}
              </div>
            )}
          </div>
          <div class="col col--4 col--offset-3">
            {links && links.length > 0 && (
              <div className={clsx('row footer__links', styles.footerColumn)}>
                {links.map((linkItem, i) => (
                  <div key={i} className="col footer__col">
                    {linkItem.title != null ? (
                      <div className="footer__title">{linkItem.title}</div>
                    ) : null}
                    {linkItem.items != null &&
                    Array.isArray(linkItem.items) &&
                    linkItem.items.length > 0 ? (
                      <ul className="footer__items">
                        {linkItem.items.map((item, key) =>
                          item.html ? (
                            <li
                              key={key}
                              className="footer__item" // Developer provided the HTML, so assume it's safe.
                              // eslint-disable-next-line react/no-danger
                              dangerouslySetInnerHTML={{
                                __html: item.html,
                              }}
                            />
                          ) : (
                            <li key={item.href || item.to} className="footer__item">
                              <FooterLink {...item} />
                            </li>
                          ),
                        )}
                      </ul>
                    ) : null}
                  </div>
                ))}
              </div>
            )}
          </div>
          {copyright ? (
            <div
              className="footer__copyright" // Developer provided the HTML, so assume it's safe.
              // eslint-disable-next-line react/no-danger
              dangerouslySetInnerHTML={{
                __html: copyright,
              }}
            />
          ) : null}
        </div>
      </div>
    </footer>
  );
}

export default Footer;

'''
'''--- src/theme/Footer/styles.module.css ---
/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

.footerColumn {
  column-gap: 0;
}

.footerLogoLink {
  opacity: 0.5;
  transition: opacity var(--ifm-transition-fast) var(--ifm-transition-timing-default);
}

.footerLogoLink:hover {
  opacity: 1;
}

.footerPadding {
  padding-top: 100px;
}

.footerRow {
  column-gap: 0;
}

'''
'''--- static/Inter/OFL.txt ---
Copyright 2020 The Inter Project Authors (https://github.com/rsms/inter)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

'''
'''--- static/Inter/README.txt ---
Inter Variable Font
===================

This download contains Inter as both a variable font and static fonts.

Inter is a variable font with these axes:
  slnt
  wght

This means all the styles are contained in a single file:
  Inter-VariableFont_slnt,wght.ttf

If your app fully supports variable fonts, you can now pick intermediate styles
that aren’t available as static fonts. Not all apps support variable fonts, and
in those cases you can use the static font files for Inter:
  static/Inter-Thin.ttf
  static/Inter-ExtraLight.ttf
  static/Inter-Light.ttf
  static/Inter-Regular.ttf
  static/Inter-Medium.ttf
  static/Inter-SemiBold.ttf
  static/Inter-Bold.ttf
  static/Inter-ExtraBold.ttf
  static/Inter-Black.ttf

Get started
-----------

1. Install the font files you want to use

2. Use your app's font picker to view the font family and all the
available styles

Learn more about variable fonts
-------------------------------

  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts
  https://variablefonts.typenetwork.com
  https://medium.com/variable-fonts

In desktop apps

  https://theblog.adobe.com/can-variable-fonts-illustrator-cc
  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts

Online

  https://developers.google.com/fonts/docs/getting_started
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide
  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts

Installing fonts

  MacOS: https://support.apple.com/en-us/HT201749
  Linux: https://www.google.com/search?q=how+to+install+a+font+on+gnu%2Blinux
  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows

Android Apps

  https://developers.google.com/fonts/docs/android
  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts

License
-------
Please read the full license text (OFL.txt) to understand the permissions,
restrictions and requirements for usage, redistribution, and modification.

You can use them freely in your products & projects - print or digital,
commercial or otherwise.

This isn't legal advice, please consider consulting a lawyer and see the full
license for all details.

'''
'''--- static/img/addresses.svg ---
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Generator: Adobe Illustrator 19.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 500 500" style="enable-background:new 0 0 500 500;" fill="#1e4480" xml:space="preserve">
<g>
	<g>
		<path d="M464.844,0H35.156C15.744,0,0,15.74,0,35.156v429.688C0,484.26,15.744,500,35.156,500h429.688
			C484.26,500,500,484.26,500,464.844V35.156C500,15.74,484.26,0,464.844,0z M122.14,397.624c-19.392,0-35.164-15.776-35.164-35.172
			c0-19.388,15.772-35.164,35.164-35.164c19.392,0,35.172,15.776,35.172,35.164C157.312,381.848,141.532,397.624,122.14,397.624z
			 M122.14,292.156c-19.392,0-35.164-15.776-35.164-35.172c0-19.388,15.772-35.164,35.164-35.164
			c19.392,0,35.172,15.776,35.172,35.164C157.312,276.38,141.532,292.156,122.14,292.156z M122.14,186.688
			c-19.392,0-35.164-15.776-35.164-35.172c0-19.388,15.772-35.164,35.164-35.164c19.392,0,35.172,15.776,35.172,35.164
			C157.312,170.912,141.532,186.688,122.14,186.688z M419.324,375H215.96c-6.472,0-11.72-5.248-11.72-11.72
			c0-6.476,5.248-11.72,11.72-11.72h203.364c6.472,0,11.72,5.244,11.72,11.72C431.044,369.752,425.796,375,419.324,375z
			 M419.324,269.532H215.96c-6.472,0-11.72-5.248-11.72-11.72c0-6.476,5.248-11.72,11.72-11.72h203.364
			c6.472,0,11.72,5.244,11.72,11.72C431.044,264.28,425.796,269.532,419.324,269.532z M419.324,164.064H215.96
			c-6.472,0-11.72-5.248-11.72-11.72c0-6.476,5.248-11.72,11.72-11.72h203.364c6.472,0,11.72,5.244,11.72,11.72
			C431.044,158.812,425.796,164.064,419.324,164.064z"/>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>

'''
'''--- static/img/contracts.svg ---
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 width="610.633px" height="610.633px" viewBox="0 0 610.633 610.633" style="enable-background:new 0 0 610.633 610.633;"
	 fill="#1e4480" xml:space="preserve">
<g>
	<g>
		<polygon points="553.941,473.344 418.288,473.344 418.288,610.633 		"/>
		<path d="M553.941,38.164C553.941,17.069,536.872,0,515.777,0H94.855C73.78,0,56.691,17.069,56.691,38.164v534.305
			c0,21.095,17.088,38.164,38.164,38.164h284.613V449.395c0-10.548,8.534-19.082,19.082-19.082h155.391V38.164z M114.066,95.625
			h191.25v43.031h-191.25V95.625z M114.066,215.156h191.25v43.031h-191.25V215.156z M305.316,497.25h-191.25v-43.031h191.25V497.25z
			 M487.004,377.719H114.066v-43.031h372.938V377.719z M487.004,258.188H367.473V95.625h119.531V258.188z"/>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>

'''
'''--- static/img/database.svg ---
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Generator: Adobe Illustrator 18.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"
	 viewBox="0 0 55 55" style="enable-background:new 0 0 55 55;" xml:space="preserve">
<g>
	<g>
		<path style="fill:#545E73;" d="M48.955,8L48.955,8C48.224,3.538,37.781,0,25,0S1.776,3.538,1.045,8l0,0H1v0.5V20v0.5V21v11v0.5V33
			v12h0.045C1.776,49.461,12.219,53,25,53s23.224-3.539,23.955-8H49V33v-0.5V32V21v-0.5V20V8.5V8H48.955z"/>
		<g>
			<path style="fill:#38454F;" d="M25,41c-13.255,0-24-3.806-24-8.5V45h0.045C1.776,49.461,12.219,53,25,53s23.224-3.539,23.955-8
				H49V32.5C49,37.194,38.255,41,25,41z"/>
			<path style="fill:#38454F;" d="M1,32v0.5c0-0.168,0.018-0.334,0.045-0.5H1z"/>
			<path style="fill:#38454F;" d="M48.955,32C48.982,32.166,49,32.332,49,32.5V32H48.955z"/>
		</g>
		<g>
			<path style="fill:#556080;" d="M25,29c-13.255,0-24-3.806-24-8.5V33h0.045C1.776,37.461,12.219,41,25,41s23.224-3.539,23.955-8
				H49V20.5C49,25.194,38.255,29,25,29z"/>
			<path style="fill:#556080;" d="M1,20v0.5c0-0.168,0.018-0.334,0.045-0.5H1z"/>
			<path style="fill:#556080;" d="M48.955,20C48.982,20.166,49,20.332,49,20.5V20H48.955z"/>
		</g>
		<ellipse style="fill:#91BAE1;" cx="25" cy="8.5" rx="24" ry="8.5"/>
		<g>
			<path style="fill:#8697CB;" d="M25,17C11.745,17,1,13.194,1,8.5V21h0.045C1.776,25.461,12.219,29,25,29s23.224-3.539,23.955-8H49
				V8.5C49,13.194,38.255,17,25,17z"/>
			<path style="fill:#8697CB;" d="M1,8v0.5C1,8.332,1.018,8.166,1.045,8H1z"/>
			<path style="fill:#8697CB;" d="M48.955,8C48.982,8.166,49,8.332,49,8.5V8H48.955z"/>
		</g>
	</g>
	<g>
		<path style="fill:#91BAE1;" d="M44,42h-2l0,0c-3.633-1.453-6-4.861-6-8.64V30h14v3.36C50,37.139,47.633,40.547,44,42L44,42z"/>
		<path style="fill:#91BAE1;" d="M42,42h2l0,0c3.633,1.453,6,4.861,6,8.64V54H36v-3.36C36,46.861,38.367,43.453,42,42L42,42z"/>
		<g>
			<path style="fill:#D0E8F9;" d="M33,31h1h2h17c0.553,0,1-0.448,1-1s-0.447-1-1-1H36h-2h-1c-0.553,0-1,0.448-1,1S32.447,31,33,31z"
				/>
			<path style="fill:#D0E8F9;" d="M52.999,52.998h-18c-0.003,0-0.006,0.002-0.01,0.002H33c-0.553,0-1,0.448-1,1s0.447,1,1,1h3
				c0.003,0,0.006-0.002,0.01-0.002h16.989c0.553,0,1-0.448,1-1S53.552,52.998,52.999,52.998z"/>
		</g>
	</g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
<g>
</g>
</svg>

'''
'''--- static/img/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 2800.02 3500"><defs><style>.cls-1{fill:#dedede;}.cls-2{fill:#152e51;}.cls-3{fill:#1e4480;}</style></defs><title>Asset 3</title><g id="Layer_2" data-name="Layer 2"><g id="Layer_1-2" data-name="Layer 1"><path class="cls-1" d="M1400.3.25c773.18,0,1400,626.79,1400,1400,0,726.77-553.8,1324.2-1262.43,1393.29a774,774,0,0,0-2.53-150.81c-40.68-355.63-321-636.29-676.55-677.39V110.75l-.68-1.62C1024.85,39,1208.05.25,1400.3.25Z" transform="translate(-0.25 -0.25)"/><path class="cls-2" d="M683.76,1965.2V198.75l-.65-1.09a1394.58,1394.58,0,0,1,175-88.53l.68,1.62V1965.31c355.5,41.1,635.87,321.76,676.55,677.39a774,774,0,0,1,2.53,150.81q-67.87,6.63-137.54,6.68c-486,0-914.17-247.65-1165.18-623.63A766.63,766.63,0,0,1,682.81,1965.2Z" transform="translate(-0.25 -0.25)"/><path class="cls-3" d="M1537.84,2793.51c-29.23,359-308.58,659.2-680,701.68-422.5,48.33-804.17-255-852.5-677.5C-23,2570.47,69.16,2337.22,235.12,2176.56c251,376,679.18,623.63,1165.18,623.63Q1469.92,2800.19,1537.84,2793.51Z" transform="translate(-0.25 -0.25)"/><path class="cls-1" d="M683.76,198.75V1965.2h-1a766.63,766.63,0,0,0-447.69,211.36C86.79,1954.39.32,1687.4.32,1400.22c0-511.05,273.84-958.15,682.79-1202.56Z" transform="translate(-0.25 -0.25)"/></g></g></svg>

'''