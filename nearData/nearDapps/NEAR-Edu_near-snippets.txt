*GitHub Repository "NEAR-Edu/near-snippets"*

'''--- .github/workflows/add-snippets.yml ---
# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: 16.x
      - run: yarn install --frozen-lockfile
      - run: yarn save-snippets
        env:
          MONGODB_URI: ${{ secrets.MONGODB_URI }}

'''
'''--- README.md ---
# NEAR Snippets

NEAR Snippets is a project to teach people Rust through an exploration of NEAR smart contracts. You can see it live at [near-snippets.com](https://near-snippets.com).

## Adding Snippets

To create a new snippet add a markdown file under the snippets directory. Each snippet must include yaml front matter:

```yaml
---
title: YOUR TITLE
tags: [tag1, tag2, tag3]
topics: [topic1, topic2]
repo: GITHUB REPO
sdk:
  language: rust
  version: near-sdk-rs@SDK_VERSION
difficulty:
  near: 1-3
  language: 1-3
---
```

Under the front matter write markdown blocks to explain snippets. Code snippets can be imported using a markdown code black followed by a github permalink url.

## Development

To get started:

* `yarn install`
* `yarn server`
* navigate to [localhost:8080](http://localhost:8080)

'''
'''--- babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- examples.json ---
[
  {
    "tags": ["overflows"],
    "topics": ["Basic Types", "Mutability"],
    "title": "i8 Basic Type",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near-examples/rust-counter/blob/ce7e8df3d87bf0f695537d50de2a058de545f7ab/contract/src/lib.rs#L18-L23"
      },
      {
        "sort": 2,
        "link": "https://github.com/near-examples/rust-counter/blob/ce7e8df3d87bf0f695537d50de2a058de545f7ab/contract/src/lib.rs#L51-L60"
      },
      {
        "sort": 3,
        "link": "https://github.com/near-examples/rust-counter/blob/ce7e8df3d87bf0f695537d50de2a058de545f7ab/contract/src/lib.rs#L70-L79"
      }
    ],
    "repo": "https://github.com/near-examples/rust-counter",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 1, "language": 1 }
  },
  {
    "tags": ["LookupMap"],
    "topics": ["Mutability"],
    "title": "LookupMap Insert",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near-examples/rust-status-message/blob/f47c092ca743071c5a5ea0b71de02517001cc3bc/src/lib.rs#L9-L11"
      },
      {
        "sort": 2,
        "link": "https://github.com/near-examples/rust-status-message/blob/f47c092ca743071c5a5ea0b71de02517001cc3bc/src/lib.rs#L23-L26"
      }
    ],
    "repo": "https://github.com/near-examples/rust-status-message",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 1, "language": 1 }
  },
  {
    "tags": ["enum", "cross contract calls", "promises", "nearcore", "match"],
    "topics": ["Compound Types", "Control Flow"],
    "title": "match with PromiseResult",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near/nearcore/blob/354c7a5d24a2fc793573b690852359818860879d/runtime/near-vm-logic/src/types.rs#L37-L43"
      },
      {
        "sort": 2,
        "link": "https://github.com/ref-finance/ref-contracts/blob/2be596669c364265a0c0ec39b67e6c5cc1051fbb/ref-exchange/src/multi_fungible_token.rs#L191-L201"
      }
    ],
    "repo": "https://github.com/ref-finance/ref-contracts",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 3, "language": 1 }
  },
  {
    "tags": ["struct", "fungible token", "standards"],
    "topics": ["Compound Types"],
    "title": "FungibleToken Metadata struct",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near/near-sdk-rs/blob/42f62384c3acd024829501ee86e480917da03896/near-contract-standards/src/fungible_token/metadata.rs#L7-L17"
      },
      {
        "sort": 2,
        "link": "https://github.com/near/near-sdk-rs/blob/master/examples/fungible-token/ft/src/lib.rs#L33-L36"
      },
      {
        "sort": 3,
        "link": "https://github.com/near/near-sdk-rs/blob/master/examples/fungible-token/ft/src/lib.rs#L51-L65"
      }
    ],
    "repo": "https://github.com/near/near-sdk-rs",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 1, "language": 1 }
  },
  {
    "tags": [],
    "topics": ["Basic Types", "Mutability"],
    "title": "Boolean Basic Type",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near/core-contracts/blob/d84f7a924b79009d3f7aa4e577c07b08a0489dc9/staking-pool/src/lib.rs#L89-L117"
      },
      {
        "sort": 2,
        "link": "https://github.com/near/core-contracts/blob/d84f7a924b79009d3f7aa4e577c07b08a0489dc9/staking-pool/src/lib.rs#L464-L471"
      },
      {
        "sort": 3,
        "link": "https://github.com/near/core-contracts/blob/d84f7a924b79009d3f7aa4e577c07b08a0489dc9/staking-pool/src/lib.rs#L475-L482"
      }
    ],
    "repo": "https://github.com/near/core-contracts",
    "sdk": { "language": "rust", "version": "near-sdk-rs@2.0.0" },
    "difficulty": { "min": 1, "max": 3, "near": 1, "language": 1 }
  },
  {
    "tags": ["Vector", "match"],
    "topics": ["Mutability", "Control Flow"],
    "title": "Multiple Vector Pushes",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near-examples/nft-exquisite-corpse/blob/e1e0759ffc7a3f3911b86dd79b2e3417e671e8f8/src/lib.rs#L62-L70"
      },
      {
        "sort": 2,
        "link": "https://github.com/near-examples/nft-exquisite-corpse/blob/e1e0759ffc7a3f3911b86dd79b2e3417e671e8f8/src/lib.rs#L103-L105"
      },
      {
        "sort": 3,
        "link": "https://github.com/near-examples/nft-exquisite-corpse/blob/e1e0759ffc7a3f3911b86dd79b2e3417e671e8f8/src/lib.rs#L241-L275"
      }
    ],
    "repo": "https://github.com/near-examples/nft-exquisite-corpse",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 1, "language": 2 }
  },
  {
    "tags": ["Option", "storage"],
    "topics": ["Control Flow"],
    "title": "Increment Storage with if let",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near-examples/token-factory/blob/a56667bf930d2316a911d6cc6f703a5a420739dd/contracts/factory/src/lib.rs#L36-L42"
      },
      {
        "sort": 2,
        "link": "https://github.com/near-examples/token-factory/blob/a56667bf930d2316a911d6cc6f703a5a420739dd/contracts/factory/src/lib.rs#L87-L99"
      }
    ],
    "repo": "https://github.com/near-examples/token-factory",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 2, "language": 1 }
  },
  {
    "tags": ["u128", "u32", "json_types"],
    "topics": ["Basic Types", "Mutability"],
    "title": "Basic Number Types",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near-examples/token-printer/blob/4f2377f1b08943db9c039e081c8d1bc5cdacb3aa/contract-rs/src/lib.rs#L20-L29"
      },
      {
        "sort": 2,
        "link": "https://github.com/near-examples/token-printer/blob/4f2377f1b08943db9c039e081c8d1bc5cdacb3aa/contract-rs/src/lib.rs#L73-L75"
      },
      {
        "sort": 3,
        "link": "https://github.com/near-examples/token-printer/blob/4f2377f1b08943db9c039e081c8d1bc5cdacb3aa/contract-rs/src/lib.rs#L77-L79"
      }
    ],
    "repo": "https://github.com/near-examples/token-printer",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 2, "language": 1 }
  },
  {
    "tags": ["nearcore"],
    "topics": ["Control Flow"],
    "title": "Processing Transactions and Sending Receipts",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near/nearcore/blob/9a121f42379d67bcb67d65d9d1137797105c9666/runtime/runtime/src/lib.rs#L1177-L1193"
      }
    ],
    "repo": "https://github.com/near/nearcore",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 3, "language": 1 }
  },
  {
    "tags": ["nearcore"],
    "topics": ["Compound Types", "Control Flow"],
    "title": "Processing Transactions and Sending Receipts",
    "explainer": "",
    "code": [
      {
        "sort": 1,
        "link": "https://github.com/near/nearcore/blob/9a121f42379d67bcb67d65d9d1137797105c9666/runtime/runtime/src/lib.rs#L1177-L1193"
      }
    ],
    "repo": "https://github.com/near/nearcore",
    "sdk": { "language": "rust", "version": "near-sdk-rs@3.1.0" },
    "difficulty": { "min": 1, "max": 3, "near": 3, "language": 1 }
  }
]

'''
'''--- package.json ---
{
  "name": "near-topics",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint",
    "save-snippets": "node store-snippets.js"
  },
  "dependencies": {
    "@heroicons/vue": "^1.0.1",
    "algoliasearch": "^4.9.1",
    "core-js": "^3.6.5",
    "highlight.js": "^10.7.2",
    "instantsearch.css": "^7.4.5",
    "instantsearch.js": "^4.22.0",
    "js-yaml": "^4.1.0",
    "marked": "^2.0.3",
    "near-api-js": "^0.41.0",
    "realm-web": "^1.2.1",
    "vue": "^3.0.0",
    "vue-router": "4"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-plugin-eslint": "~4.5.0",
    "@vue/cli-service": "~4.5.0",
    "@vue/compiler-sfc": "^3.0.0",
    "autoprefixer": "^9.8.6",
    "babel-eslint": "^10.1.0",
    "eslint": "^6.7.2",
    "eslint-plugin-vue": "^7.0.0",
    "mongodb": "^3.6.9",
    "postcss": "^7.0.35",
    "prettier": "^2.3.0",
    "tailwindcss": "npm:@tailwindcss/postcss7-compat@^2.1.2"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/highlight.js/10.7.2/styles/atom-one-dark.min.css">
    <title>NEAR Snippets</title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but NEAR Snippets doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- snippets/basic-number-types.md ---
---
title: Basic Number Types
tags: [u128, u32, json_types]
topics: [Basic Types, Mutability]
repo: https://github.com/near-examples/token-printer
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 2
  language: 1
---

```https://github.com/near-examples/token-printer/blob/4f2377f1b08943db9c039e081c8d1bc5cdacb3aa/contract-rs/src/lib.rs#L20-L29
```

```https://github.com/near-examples/token-printer/blob/4f2377f1b08943db9c039e081c8d1bc5cdacb3aa/contract-rs/src/lib.rs#L73-L75
```

```https://github.com/near-examples/token-printer/blob/4f2377f1b08943db9c039e081c8d1bc5cdacb3aa/contract-rs/src/lib.rs#L77-L79
```

'''
'''--- snippets/boolean-basic-type.md ---
---
title: Boolean Basic Type
tags: []
topics: [Basic Types, Mutability]
repo: https://github.com/near/core-contracts
sdk:
  language: rust
  version: near-sdk-rs@2.0.0
difficulty:
  near: 1
  language: 1
---

Adding a basic type, like an `bool`, to the struct of a smart contract will persist the value across method invocations.

Here `paused` is included in the `StakingContract` struct:

```https://github.com/near/core-contracts/blob/d84f7a924b79009d3f7aa4e577c07b08a0489dc9/staking-pool/src/lib.rs#L89-L117
```

The current value of `paused` is available in each smart contract method with `self.paused` and can be mutated if `self` is mutably borrowed:

```https://github.com/near/core-contracts/blob/d84f7a924b79009d3f7aa4e577c07b08a0489dc9/staking-pool/src/lib.rs#L464-L471
```

**NOTE** in the method signature `self` is mutably borrowed with `&mut self`.

```https://github.com/near/core-contracts/blob/d84f7a924b79009d3f7aa4e577c07b08a0489dc9/staking-pool/src/lib.rs#L475-L482
```

'''
'''--- snippets/fungibletoken-metadata-struct.md ---
---
title: FungibleToken Metadata struct
tags: [struct, fungible token, standards]
topics: [Compound Types]
repo: https://github.com/near/near-sdk-rs
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 1
  language: 1
---

Fungible tokens can include metadata that is used to help display the token in the NEAR wallet. The `FungibleTokenMetadata` is defined as a struct (dictionary like data of key/value pairs):

```https://github.com/near/near-sdk-rs/blob/42f62384c3acd024829501ee86e480917da03896/near-contract-standards/src/fungible_token/metadata.rs#L7-L17
```

Include the `FungibleTokenMetadata` struct inside the contract struct using a `LazyOption` so the metadata is only loaded when it is needed (to save gas):

```https://github.com/near/near-sdk-rs/blob/master/examples/fungible-token/ft/src/lib.rs#L33-L36
```

When the contract is initialized, create an instance of the `FungibleTokenMetadata` struct:

```https://github.com/near/near-sdk-rs/blob/master/examples/fungible-token/ft/src/lib.rs#L51-L65
```

'''
'''--- snippets/i8-basic-type.md ---
---
title: i8 Basic Type
tags: [overflows]
topics: [Basic Types, Mutability]
repo: https://github.com/near-examples/rust-counter
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 1
  language: 1
---

Adding a basic type, like an `i8`, to the struct of a smart contract will persist the value across method invocations.

Here `val` is included in the `Contract` struct:

```https://github.com/near-examples/rust-counter/blob/ce7e8df3d87bf0f695537d50de2a058de545f7ab/contract/src/lib.rs#L18-L23

```

The current value of `val` is available in each smart contract method with `self.val` and can be mutated if `self` is mutably borrowed:

```https://github.com/near-examples/rust-counter/blob/ce7e8df3d87bf0f695537d50de2a058de545f7ab/contract/src/lib.rs#L51-L60

```

**NOTE** in the method signature `self` is mutably borrowed with `&mut self`.

```https://github.com/near-examples/rust-counter/blob/ce7e8df3d87bf0f695537d50de2a058de545f7ab/contract/src/lib.rs#L70-L79

```

'''
'''--- snippets/increment-storage-with-if-let.md ---
---
title: Increment Storage with if let
tags: [Option, storage]
topics: [Control Flow]
repo: https://github.com/near-examples/token-factory
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 2
  language: 1
---

```https://github.com/near-examples/token-factory/blob/a56667bf930d2316a911d6cc6f703a5a420739dd/contracts/factory/src/lib.rs#L36-L42
```

```https://github.com/near-examples/token-factory/blob/a56667bf930d2316a911d6cc6f703a5a420739dd/contracts/factory/src/lib.rs#L87-L99
```

'''
'''--- snippets/lookupmap-insert.md ---
---
title: LookupMap Insert
tags: [LookupMap]
topics: [Mutability]
repo: https://github.com/near-examples/rust-status-message
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 1
  language: 1
---

Persisting dictionary like data (key/value pairs) is done with a `LookupMap`.

To use a `LookupMap` create a field in the contract struct:

```https://github.com/near-examples/rust-status-message/blob/f47c092ca743071c5a5ea0b71de02517001cc3bc/src/lib.rs#L9-L11
```

Instantiate the `LookupMap` either in an `#[init]` method or as a `Default` implementation:

```https://github.com/near-examples/rust-status-message/blob/f47c092ca743071c5a5ea0b71de02517001cc3bc/src/lib.rs#L13-L19
```

Insert into the `LookupMap` and persist the data to the blockchain:

```https://github.com/near-examples/rust-status-message/blob/f47c092ca743071c5a5ea0b71de02517001cc3bc/src/lib.rs#L23-L26
```

**IMPORTANT** make sure to mutably borrow `self` with `&mut self` in the method signature.

'''
'''--- snippets/match-with-promiseresult.md ---
---
title: match with PromiseResult
tags: [enum, cross contract calls, promises, nearcore, match]
topics: [Compound Types, Control Flow]
repo: https://github.com/ref-finance/ref-contracts
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 3
  language: 1
---

A `PromiseResult` is an enum that can take three values: `NotReady`, `Successful`, and `Failed`:

```https://github.com/near/nearcore/blob/354c7a5d24a2fc793573b690852359818860879d/runtime/near-vm-logic/src/types.rs#L34-L43
```

When making cross contract calls a smart contract method will often be registered as a callback, to be invoked after another smart contract method finishes. In these cases, the callback smart contract method will need to know if the previous method was `Successful` or `Failed`. This can be with `if/else` branching, but the idiomatic rust way is to use match (similar to a `switch/case`):

```https://github.com/ref-finance/ref-contracts/blob/2be596669c364265a0c0ec39b67e6c5cc1051fbb/ref-exchange/src/multi_fungible_token.rs#L191-L201
```

'''
'''--- snippets/multiple-vector-pushes.md ---
---
title: Multiple Vector Pushes
tags: [Vector, match]
topics: [Mutability, Control Flow]
repo: https://github.com/near-examples/nft-exquisite-corpse
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 1
  language: 2
---

Persisting list like data is done with the `Vector` collection.

To use a `Vector` create a filed in the contract struct:

```https://github.com/near-examples/nft-exquisite-corpse/blob/e1e0759ffc7a3f3911b86dd79b2e3417e671e8f8/src/lib.rs#L62-L70
```

Instantiate the `Vector` either as a `Default` implementation or in an `#[init]` method:

```https://github.com/near-examples/nft-exquisite-corpse/blob/e1e0759ffc7a3f3911b86dd79b2e3417e671e8f8/src/lib.rs#L280-L292
```

Push into the `Vector` and persist the data to the blockchain:

```https://github.com/near-examples/nft-exquisite-corpse/blob/e1e0759ffc7a3f3911b86dd79b2e3417e671e8f8/src/lib.rs#L241-L275
```

**IMPORTANT** make sure to mutably borrow `self` with `&mut self` in the method signature.

'''
'''--- snippets/processing-transactions-and-sending-receipts.md ---
---
title: Processing Transactions and Sending Receipts
tags: [nearcore]
topics: [Control Flow]
repo: https://github.com/near/nearcore
sdk:
  language: rust
  version: near-sdk-rs@3.1.0
difficulty:
  near: 3
  language: 1
---

```https://github.com/near/nearcore/blob/9a121f42379d67bcb67d65d9d1137797105c9666/runtime/runtime/src/lib.rs#L1177-L1193
```

'''
'''--- src/composables/examples.js ---
import { ref, onMounted, watch } from "vue";
import { findExamples, findExampleById } from "../services/examples";

export const useExamples = (topic) => {
  const examples = ref([]);

  onMounted(async () => {
    examples.value = await findExamples(topic ? { topics: topic.value } : {});
  });

  watch(topic, async () => {
    examples.value = await findExamples(topic ? { topics: topic.value } : {});
  });

  return examples;
};

export const useExample = (id) => {
  const example = ref(null);

  onMounted(async () => {
    example.value = await findExampleById(id);
  });

  return example;
};

'''
'''--- src/composables/near.js ---
import { ref } from "@vue/reactivity";
import { onMounted, watch } from "@vue/runtime-core";
import { getWallet } from "../services/near";

export const useWallet = () => {
  const wallet = ref();

  onMounted(async () => {
    wallet.value = await getWallet();
  });

  return wallet;
};

export const useNearAuth = () => {
  const accountId = ref();
  const wallet = useWallet();

  onMounted(() => {
    if (wallet.value?.isSignedIn())
      accountId.value = wallet.value.getAccountId();
  });

  watch(wallet, () => {
    accountId.value = wallet.value.getAccountId();
  });

  return {
    accountId,
  };
};

'''
'''--- src/composables/topics.js ---
import { ref, onMounted } from "vue";
import { findTopics } from '../services/topics';

export const useTopics = (query) => {
  const topics = ref([]);

  onMounted(async () => {
    topics.value = await findTopics(query);
  });

  return topics;
};

'''
'''--- src/main.js ---
import { createApp } from "vue";
import App from "./App.vue";
import router from "./router.js";
import "tailwindcss/tailwind.css";

createApp(App).use(router).mount("#app");

'''
'''--- src/router.js ---
import { createRouter, createWebHistory } from "vue-router";
import NotFound from "@/pages/NotFound.vue";
import Topics from "@/components/Topics.vue";
import Examples from "@/components/Examples.vue";
import Example from "@/components/Example.vue";

const routes = [
  { path: "/", redirect: "/topics", props: true },
  {
    path: "/topics",
    component: Topics,
    children: [
      { path: "/topics", component: Examples, props: true },
      { path: "/topics/:topic", component: Examples, props: true },
      { path: "/examples/:id", component: Example, props: true },
    ],
  },
  {
    path: "/search",
    component: () => import("@/pages/Search.vue"),
  },
  { path: "/:notFound(.*)", component: NotFound },
];

export default createRouter({
  routes,
  history: createWebHistory(),
});

'''
'''--- src/services/db.js ---
import * as Realm from "realm-web";

const app = new Realm.App({ id: "near-topics-rcavt" });
const credentials = Realm.Credentials.anonymous();
let db;

export const getDb = async () => {
  if (db) return db;

  const user = await app.logIn(credentials);
  db = user.mongoClient("mongodb-atlas").db("near");
  return db;
};

export const getCollection = async (collection) => {
  const db = await getDb();
  return db.collection(collection);
};

'''
'''--- src/services/examples.js ---
import { BSON } from "realm-web";
import { toHTML } from "../utils/markdown";
import { getCollection } from "./db";

export const findExamples = async (query) => {
  const collection = await getCollection("examples");
  return collection.find(query, {
    sort: { "difficulty.language": 1, "difficulty.near": 1 },
  });
};

export const findExampleById = async (_id) => {
  const collection = await getCollection("examples");
  const example = await collection.findOne({ _id: BSON.ObjectID(_id) });

  return {
    ...example,
    explainer: await toHTML(example.explainer),
  };
};

'''
'''--- src/services/near.js ---
import { connect, keyStores, WalletConnection } from "near-api-js";

export const getNear = async () => {
  return connect({
    networkId: "testnet",
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
  });
};

export const getWallet = async () => {
  return new WalletConnection(await getNear(), "near-snippets");
};

'''
'''--- src/services/topics.js ---
import { getCollection } from "./db";

export const findTopics = async () => {
  const collection = await getCollection("examples");
  return collection.aggregate([
    { $unwind: "$topics" },
    { $group: { _id: "$topics", exampleCount: { $sum: 1 } } },
    { $project: { name: "$_id", exampleCount: true } },
  ]);
};

'''
'''--- src/utils/markdown.js ---
import marked from "marked";
import hljs from "highlight.js";

marked.setOptions({
  highlight(code, language, cb) {
    if (!language.startsWith("https://github.com")) return code;

    const url = new URL(language);
    const startLine = Number(url.hash.split("-")[0].slice(2)) - 1;
    const endLine = Number(url.hash.split("-")[1]?.slice(1) || startLine);
    const path = url.pathname.replace("/blob", "");

    return fetch(`https://raw.githubusercontent.com${path}`)
      .then((res) => res.text())
      .then((text) => text.split("\n").slice(startLine, endLine))
      .then((rawCode) => {
        const indentationLevel = rawCode[0].match(/\s*/)[0].length;
        const code = rawCode
          .map(
            (c, i) =>
              `${startLine + i + 1}\t${c.replace(
                new RegExp(`\\s{${indentationLevel}}`),
                ""
              )}`
          )
          .join("\n");
        cb(null, hljs.highlight(code, { language: "rust" }).value);
      });
  },
});

marked.use({
  renderer: {
    code(code, language) {
      if (!language.startsWith("https://github.com")) return false;
      return `<section>
        <pre class="hljs"><code>${code}</code></pre>
        <a href="${language}" class="block border p-2 text-center" style="background-color: #282c34; color: #abb2bf">Full Code</a>
      </section>`;
    },
  },
});

export const toHTML = (explainer) => {
  return new Promise((resolve, reject) => {
    marked(explainer, (err, result) => {
      if (err) reject(err);
      else resolve(result);
    });
  });
};

'''
'''--- store-snippets.js ---
const fs = require("fs");
const yaml = require("js-yaml");
const { MongoClient } = require("mongodb");

const SNIPPETS_DIRECTORY = `${__dirname}/snippets`;

const MONGODB_URI = process.env.MONGODB_URI;

const client = new MongoClient(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const files = fs.readdirSync(SNIPPETS_DIRECTORY);

const docs = files.map((file) => {
  const [, rawFrontMatter, explainer] = fs
    .readFileSync(`${SNIPPETS_DIRECTORY}/${file}`, "utf-8")
    .split("---");

  const frontMatter = yaml.load(rawFrontMatter);
  return {
    ...frontMatter,
    explainer: explainer.trim(),
  };
});

client
  .connect()
  .then(() => client.db("near").collection("examples"))
  .then((collection) => {
    return Promise.all(
      docs.map((doc) => {
        return collection.findOneAndUpdate(
          { title: doc.title },
          { $set: doc },
          {
            upsert: true,
          }
        );
      })
    );
  })
  .finally(() => client.close());

'''
'''--- tailwind.config.js ---
const defaultTheme = require('tailwindcss/defaultTheme')

module.exports = {
  purge: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}'],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter var', ...defaultTheme.fontFamily.sans],
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [],
}

'''