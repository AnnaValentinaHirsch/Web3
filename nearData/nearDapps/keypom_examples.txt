*GitHub Repository "keypom/examples"*

'''--- .eslintrc.js ---
module.exports = {
	parserOptions: {
		ecmaVersion: 2020,
        sourceType: 'module',
        ecmaFeatures: {
            jsx: true,
        }
    },
	rules: {
        semi: [2, 'always'],
        indent: [2, 'tab'],
	}
};

'''
'''--- README.md ---
# React 17, Parcel with useContext and useReducer
- Bundled with Parcel 2.0.1
- *Minimal all-in-one state management with async/await support*

## Getting Started: State Store & useContext

>The following steps are already done, but describe how to use `src/utils/state` to create and use your own `store` and `StateProvider`.

1. Create a file e.g. `/state/app.js` and add the following code
```js
import { State } from '../utils/state';

// example
const initialState = {
	app: {
		mounted: false
	}
};

export const { store, Provider } = State(initialState);
```
2. Now in your `index.js` wrap your `App` component with the `StateProvider`
```js
import { Provider } from './state/app';

ReactDOM.render(
    <Provider>
        <App />
    </Provider>,
    document.getElementById('root')
);
```
3. Finally in `App.js` you can `useContext(store)`
```js
const { state, dispatch, update } = useContext(store);
```

## Usage in Components
### Print out state values
```js
<p>Hello {state.foo && state.foo.bar.hello}</p>
```
### Update state directly in component functions
```js
const handleClick = () => {
    update('clicked', !state.clicked);
};
```
### Dispatch a state update function (action listener)
```js
const onMount = () => {
    dispatch(onAppMount('world'));
};
useEffect(onMount, []);
```
## Dispatched Functions with context (update, getState, dispatch)

When a function is called using dispatch, it expects arguments passed in to the outer function and the inner function returned to be async with the following json args: `{ update, getState, dispatch }`

Example of a call:
```js
dispatch(onAppMount('world'));
```

All dispatched methods **and** update calls are async and can be awaited. It also doesn't matter what file/module the functions are in, since the json args provide all the context needed for updates to state.

For example:
```js
import { helloWorld } from './hello';

export const onAppMount = (message) => async ({ update, getState, dispatch }) => {
	update('app', { mounted: true });
	update('clicked', false);
	update('data', { mounted: true });
	await update('', { data: { mounted: false } });

	console.log('getState', getState());

	update('foo.bar', { hello: true });
	update('foo.bar', { hello: false, goodbye: true });
	update('foo', { bar: { hello: true, goodbye: false } });
	update('foo.bar.goodbye', true);

	await new Promise((resolve) => setTimeout(() => {
		console.log('getState', getState());
		resolve();
	}, 2000));

	dispatch(helloWorld(message));
};
```
## Prefixing store and Provider

The default names the `State` factory method returns are `store` and `Provider`. However, if you want multiple stores and provider contexts you can pass an additional `prefix` argument to disambiguate.

```js
export const { appStore, AppProvider } = State(initialState, 'app');
```

## Performance and memo

The updating of a single store, even several levels down, is quite quick. If you're worried about components re-rendering, use `memo`:
```js
import React, { memo } from 'react';

const HelloMessage = memo(({ message }) => {
	console.log('rendered message');
	return <p>Hello { message }</p>;
});

export default HelloMessage;
```
Higher up the component hierarchy you might have:
```js
const App = () => {
	const { state, dispatch, update } = useContext(appStore);
    ...
	const handleClick = () => {
		update('clicked', !state.clicked);
	};

	return (
		<div className="root">
			<HelloMessage message={state.foo && state.foo.bar.hello} />
			<p>clicked: {JSON.stringify(state.clicked)}</p>
			<button onClick={handleClick}>Click Me</button>
		</div>
	);
};
```
When the button is clicked, the component HelloMessage will not re-render, it's value has been memoized (cached). Using this method you can easily prevent performance intensive state updates in further down components until they are neccessary.

Reference:
- https://reactjs.org/docs/context.html
- https://dmitripavlutin.com/use-react-memo-wisely/

'''
'''--- package.json ---
{
	"name": "react-parcel-boilerplate",
	"version": "1.0.0",
	"description": "React Parcel Boilerplate",
	"author": "Matt Lockyer",
	"license": "ISC",
	"dependencies": {
		"@near-wallet-selector/core": "v7.0.3",
		"@near-wallet-selector/modal-ui": "^7.0.3",
		"@near-wallet-selector/my-near-wallet": "^7.0.3",
		"@near-wallet-selector/sender": "v7.0.3",
		"copy-to-clipboard": "^3.3.2",
		"gh-pages": "^4.0.0",
		"near-api-js": "^0.45.1",
		"near-seed-phrase": "^0.2.0",
		"parcel": "^2.6.2",
		"react": "^18.2.0",
		"react-dom": "^18.2.0",
		"react-feather": "^2.0.10",
		"react-router-dom": "^6.3.0"
	},
	"devDependencies": {
		"@parcel/transformer-sass": "2.6.2",
		"ava": "^4.3.0",
		"buffer": "^6.0.3",
		"crypto-browserify": "^3.12.0",
		"eslint": "^8.19.0",
		"events": "^3.3.0",
		"os-browserify": "^0.3.0",
		"path-browserify": "^1.0.1",
		"process": "^0.11.10",
		"rimraf": "^3.0.2",
		"stream-browserify": "^3.0.0"
	},
	"browserslist": [
		"last 2 Chrome versions"
	],
	"scripts": {
		"gh-pages": "yarn clean && yarn build --public-url ./ && gh-pages -d dist",
		"prebuild": "yarn clean",
		"build": "parcel build src/index.html",
		"clean": "rimraf ./dist",
		"start": "yarn clean && parcel src/index.html --open",
		"fix": "eslint test/ --fix"
	}
}

'''
'''--- src/App.js ---
import React, { useContext, useEffect } from 'react';
import {
	Routes,
	Route,
	useLocation,
} from "react-router-dom";

import { appStore, onAppMount } from './state/app';
import { Header } from './components/Header';
import { Home } from './components/Home';
import { NEAR } from './components/NEAR';
import { FT } from './components/FT';
import { NFT } from './components/NFT';
import { Account } from './components/Account';
import { Modal } from './components/Modal';

import './css/modal-ui.css';
import './App.scss';

const App = () => {
	const { state, dispatch, update } = useContext(appStore);

	const { app, wallet } = state
	const { menu } = app
	const { pathname } = useLocation();

	const onMount = () => {
		dispatch(onAppMount());
	};
	useEffect(onMount, []);

	const routeArgs = {
		state, update, wallet
	}

	return (
		<div>
			<Modal {...{ state, update }} />
			<Header {...{ pathname, menu, wallet, update }} />
			{
				wallet &&
				<main>
					<Routes>
				{
					wallet.accountId ?
					/* Account Paths */
					<>
						<Route path="/account" element={<Account {...routeArgs} />} />
						<Route path="/near" element={<NEAR {...routeArgs} />} />
						<Route path="/ft" element={<FT {...routeArgs} />} />
						<Route path="/nft" element={<NFT {...routeArgs} />} />
						<Route path="/" element={<Home {...routeArgs} />} />
					</>
								
							
					:
					/* Public Paths */
					<>
						<Route path="/" element={
							<>
								<p>Please sign in to get started</p>
								<button onClick={() => wallet.signIn()}>Sign In</button>
							</>
						} />
					</>
				}
					</Routes>
				</main>
			}
		</div>
	);
};

export default App;

'''
'''--- src/components/Account.js ---

import React, { useEffect } from 'react'

import { contractId, receiverId } from '../state/app';
import {
	useNavigate,
} from "react-router-dom";
import { ROOT_KEY } from "../state/app"
import { set, file } from '../utils/store'
import { generateSeedPhrase } from "near-seed-phrase"
import { formatNearAmount } from 'near-api-js/lib/utils/format';

export const Account = ({ state, update, wallet }) => {

	const navigate = useNavigate();
	const { rootKey, balance } = state

	const onMount = async () => {
		const balance = await wallet.viewFunction({
			contractId,
			methodName: 'get_user_balance',
			args: {
				account_id: wallet.accountId,
			},
		})
		console.log(balance)
		update('balance', balance)
	}
	useEffect(() => {
		onMount()
	}, [])

	return <>
		
		<h4>Root Key</h4>
		<p>Used to generate your links. If you lose it, you can still delete your drop and reclaim funds.</p>
		{rootKey
			? <>
				<button className="outline" onClick={() => window.prompt('Copy this somewhere safe! Do NOT lose it!', rootKey)}>Copy</button>
				<button className="outline" onClick={() => file('KeypomRootKey.txt', rootKey)}>Save as File</button>
				<button className="outline" onClick={() => {
					const seedPhrase = window.prompt('WARNING! First save your existing root key or you will NOT be able to share any links!')
					if (!seedPhrase || seedPhrase.length === 0 || seedPhrase.split(' ').filter((w) => w.length > 1).length !== 12) return alert('invalid key')
					set(ROOT_KEY, seedPhrase)
					update('rootKey', seedPhrase)
				}}>!!! Update Key !!!</button>
			</>
			: <button className="outline" onClick={() => {
				const { seedPhrase } = generateSeedPhrase()
				set(ROOT_KEY, seedPhrase)
				update('rootKey', seedPhrase)
			}}>Create Root Key</button>
		}

		<h4>Wallet</h4>
		<p>Signed in as: {wallet.accountId}</p>
		<button onClick={() => {
			wallet.signOut()
			navigate('/')
		}}>Sign Out</button>

		<h4>Balance in Keypom Contract</h4>
		<p>Usually zero, but might have small amounts of NEAR if you deleted a large drop.</p>
		<p>{formatNearAmount(balance, 4)}</p>
		<button className="outline" onClick={() => {
			const res = wallet.signAndSendTransactions({
				transactions: [{
					receiverId: 'v1.keypom.testnet',
					actions: [{
						type: 'FunctionCall',
						params: {
							methodName: 'withdraw_from_balance',
							args: {},
							gas: '100000000000000',
						}
					}]
				}]
			})
		}}>Withdraw Balance</button>
	</>
}
'''
'''--- src/components/FT.js ---
import React, { useEffect } from 'react'
import * as nearAPI from 'near-api-js';
import { BN } from 'bn.js'
import { Form } from './Form'
import { simpleDrop } from '../configs/simple'
import { ftDrop, FT_CONTRACT_ID } from '../configs/ft'
import { estimateRequiredDeposit, ATTACHED_GAS_FROM_WALLET } from '../configs/keypom-utils'
import { share } from '../utils/mobile'
import { generateSeedPhrase } from 'near-seed-phrase';

import {
	useNavigate
} from "react-router-dom";
import { contractId, receiverId } from '../state/app';
const {
	KeyPair,
	utils: { format: { parseNearAmount, formatNearAmount } },
} = nearAPI

const hashBuf = (str) => crypto.subtle.digest('SHA-256', new TextEncoder().encode(str))
const genKey = async (rootKey, meta, nonce) => {
	const hash = await hashBuf(`${rootKey}_${meta}_${nonce}`)
	const { secretKey } = generateSeedPhrase(hash)
	return KeyPair.fromString(secretKey)
}

export const FT = ({ state, update, wallet }) => {

	const { near, drops, ftBalance, rootKey } = state
	const navigate = useNavigate();

	const onMount = async () => {
		
		const ftBalance = await wallet.viewFunction({
			contractId: FT_CONTRACT_ID,
			methodName: 'ft_balance_of',
			args: {
				account_id: wallet.accountId
			}
		})
		update('ftBalance', ftBalance)
	}
	useEffect(() => {
		onMount()
	}, [])

	/// Main Event Handlers

	const handleGetFTs = async () => {
		const res = wallet.signAndSendTransactions({
			transactions: [{
				receiverId: FT_CONTRACT_ID,
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'storage_deposit',
						args: {
							account_id: wallet.accountId,
						},
						gas: '100000000000000',
						deposit: parseNearAmount('0.1')
					}
				}]
			}, {
				receiverId: FT_CONTRACT_ID,
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'ft_mint',
						args: {
							account_id: wallet.accountId,
							// The max amount of tokens an account can receive PER `ft_transfer` call is 10
							amount: parseNearAmount("100")
						},
						gas: '100000000000000',
					}
				}]
			}]
		})
	}

	const createFTDrop = async (values) => {
		console.log(values)

		const DEPOSIT_PER_USE = parseNearAmount(values['NEAR Value'].toString());
		const NUM_KEYS = parseInt(values['Number of Drops'].toString())
		const DROP_METADATA = Date.now().toString() // unique identifier for keys

		const {
			DROP_CONFIG,
			STORAGE_REQUIRED,
			FT_DATA,
		} = ftDrop;

		FT_DATA.balance_per_use = parseNearAmount(values['FT Value'].toString());
		FT_DATA.sender_id = wallet.accountId

		let requiredDeposit = await estimateRequiredDeposit({
			near,
			depositPerUse: DEPOSIT_PER_USE,
			numKeys: NUM_KEYS,
			usesPerKey: DROP_CONFIG.uses_per_key,
			attachedGas: ATTACHED_GAS_FROM_WALLET,
			storage: STORAGE_REQUIRED,
			ftData: FT_DATA,
		})

		// console.log(formatNearAmount(requiredDeposit))

		let keyPairs = [], pubKeys = [];
		for (var i = 0; i < NUM_KEYS; i++) {
			const keyPair = await genKey(rootKey, DROP_METADATA, i)
			keyPairs.push(keyPair)
			pubKeys.push(keyPair.publicKey.toString());
		}

		/// redirect with mynearwallet
		const nextDropId = await wallet.viewFunction({
			contractId,
			methodName: 'get_next_drop_id'
		})
		const res = wallet.signAndSendTransactions({
			transactions: [{
				receiverId: 'v1.keypom.testnet',
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'create_drop',
						args: {
							public_keys: pubKeys,
							deposit_per_use: DEPOSIT_PER_USE,
							config: DROP_CONFIG,
							metadata: JSON.stringify(DROP_METADATA),
							ft_data: FT_DATA,
						},
						gas: '250000000000000',
						deposit: requiredDeposit,
					}
				}]
			}, {
				receiverId: FT_CONTRACT_ID,
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'ft_transfer_call',
						args: {
							receiver_id: contractId,
							amount: new BN(FT_DATA.balance_per_use).mul(new BN(NUM_KEYS)).toString(),
							msg: nextDropId.toString(),
						},
						gas: '50000000000000',
						deposit: '1',
					}
				}]
			}]
		})
	}

	/// Render

	if (!rootKey) return <p>Make a Root Key first in Account tab</p>

	return <div>

		<button onClick={() => navigate('/')}>Drops</button>

		<p>Balance { formatNearAmount(ftBalance, 4) }</p>
		<button className="outline" onClick={handleGetFTs}>Get 100 FTs</button>

		<h4>Create FT Drop</h4>

		<Form {...{
			data: {
				['FT Value']: 10,
				['NEAR Value']: 0.2,
				['Number of Drops']: 1,
			},
			minMax: {
				['NEAR Value']: {
					min: 0.2,
					step: 0.1
				},
				['Number of Drops']: {
					min: 1,
					max: 50
				},
			},
			submitLabel: 'Create FT Drop',
			submit: createFTDrop,
			submitDisabled: ftBalance === '0'
		}} />

	</div>
}
'''
'''--- src/components/Form.js ---
import { useEffect, useState } from 'react'

const genFields = ({data, values, minMax, onValueChange}) => {
	return Object.entries(data).map(([k, v]) => {
		if (/__/.test(k)) return null

		const input = {
			id: k,
			type: 'text',
			className: 'u-full-width',
			required: v !== '_',
			value: values[k],
			onChange: (e) => {
				onValueChange(k, e.target[/true|false/.test(v) ? 'checked' : 'value'])
			}
		}
		if (typeof v === 'number') {
			input.type = 'number'
			if (minMax[k]) {
				Object.entries(minMax[k]).forEach(([k, v]) => input[k] = v)
			}
		} else if (typeof v === 'boolean') {
			input.type = 'checkbox'
			input.checked = values[k]
		}
		
		return <div key={k}>
			<label htmlFor={k}>{k}</label>
			{
				v.toString().length > 64 ? 
				<textarea {...input} />
				:
				<input {...input} />
			}
		</div>
	})
}

export const Form = ({ data, onChange, submit, submitLabel, minMax, submitDisabled = false }) => {

	const [values, setValues] = useState({ ...data })
	const onValueChange = (k, v) => {
		const newValues = { ...values, [k]: v }
		setValues(newValues)
		if (onChange) onChange(k, newValues)
	}

	return <>
		<div className="row">
			{genFields({data, values, minMax, onValueChange})}
		</div>
		{ submit && <button className="outline button-primary" disabled={submitDisabled} onClick={() => {

			/// validation
			let error = null
			Object.entries(values).forEach(([k, v]) => {
				if (!minMax[k]) return
				if (values[k] > minMax[k].max) {
					error = `Exceeded max value: ${minMax[k].max} for ${k}`
					onValueChange(k, minMax[k].max)
				}
				if (values[k] < minMax[k].min) {
					error = `Exceeded min value: ${minMax[k].min} for ${k}`
					onValueChange(k, minMax[k].min)
				}
			})
			if (error) return alert(error)

			submit(values)
		}}>{ submitLabel ? submitLabel : 'Submit' }</button> }
	</>
}
'''
'''--- src/components/Header.js ---
import React from 'react'
import {
	Link,
} from "react-router-dom";

import './Header.scss';

import { Menu } from 'react-feather';

const Links = ({ update, wallet }) => {
	const hideMenu = () => update('app.menu', false)

	return <nav>
		<Link onClick={hideMenu} to="/">Home</Link>
		{
			wallet?.accountId && <>
				<Link onClick={hideMenu} to="/near">NEAR</Link>
				<Link onClick={hideMenu} to="/ft">FT</Link>
				<Link onClick={hideMenu} to="/nft">NFT</Link>
				<Link onClick={hideMenu} to="/account">Account</Link>
			</>
		}
		<a onClick={() => window.open('https://github.com/keypom/examples')}>GH</a>
	</nav>
}

export const Header = ({ pathname, menu, wallet, update }) => {
	return <header>
		<div>
			<p>
				<Link to="/">Keypom Examples</Link> { pathname.length > 1 && '/ ' + pathname.substring(1) }
			</p>
		</div>
		<div>
			<Menu onClick={() => update('app', { menu: !menu })} />
			<Links {...{ update, wallet }} />
		</div>
		{menu && window.innerWidth < 768 && <Links {...{ update, wallet }} />}
	</header>
}
'''
'''--- src/components/Home.js ---
import React, { useEffect } from 'react'
import * as nearAPI from 'near-api-js';
import { BN } from 'bn.js'
import { Form } from './Form'
import { simpleDrop } from '../configs/simple'
import { ftDrop, FT_CONTRACT_ID } from '../configs/ft'
import { estimateRequiredDeposit, ATTACHED_GAS_FROM_WALLET } from '../configs/keypom-utils'
import { share } from '../utils/mobile'
import { generateSeedPhrase } from 'near-seed-phrase';

import { contractId, receiverId } from '../state/app';
const {
	KeyPair,
	utils: { format: { parseNearAmount, formatNearAmount } },
} = nearAPI

const hashBuf = (str) => crypto.subtle.digest('SHA-256', new TextEncoder().encode(str))
const genKey = async (rootKey, meta, nonce) => {
	const hash = await hashBuf(`${rootKey}_${meta}_${nonce}`)
	const { secretKey } = generateSeedPhrase(hash)
	return KeyPair.fromString(secretKey)
}

export const Home = ({ state, update, wallet }) => {

	const { near, drops, ftBalance, rootKey } = state

	const onMount = async () => {
		const drops = await wallet.viewFunction({
			contractId,
			methodName: 'get_drops_for_owner',
			args: {
				account_id: wallet.accountId,
			},
		})

		await Promise.all(drops.map(async (drop, i) => {
			const { drop_id } = drop
			drop.keys = await wallet.viewFunction({
				contractId,
				methodName: 'get_keys_for_drop',
				args: {
					drop_id
				}
			})
			drop.keyPairs = await Promise.all(drop.keys.map((_, i) => genKey(rootKey, drop.metadata.replaceAll(`\"`, ``), i)))
		}))

		console.log('drops', drops)

		update('drops', drops)
	}
	useEffect(() => {
		onMount()
	}, [])

	/// Render

	if (!rootKey) return <p>Make a Root Key first in Account tab</p>

	return <div>

		<h4>About</h4>
		
		<p>Example app for developers interested in using Keypom in their apps.</p>
		<p>Testnet only. Click "GH" for source.</p>

		{drops.length > 0 ? <>
			<h4>Your Drops</h4>
			{
				drops.map(({ drop_id, drop_type, keyPairs, keys }, i) => <div key={i}>
					<p>Drop ID: {drop_id}</p>
					<h4>Keys</h4>
					{keyPairs.map(({ publicKey, secretKey }, i) => <div className="grid sm" key={i}>
						<div>
							{publicKey.toString()}
						</div>
						<div>
							<button className="outline" onClick={() => {
								const link = `https://testnet.mynearwallet.com/linkdrop/${contractId}/${secretKey}`
								const { mobile } = share(link)
								if (!mobile) alert('Link Copied')
							}}>Share Link</button>
						</div>
					</div>)}
					<button className="outline" onClick={() => {
						const actions = []
						if (drop_type.FungibleToken || drop_type.NonFungibleToken) {
							actions.push({
								type: 'FunctionCall',
								params: {
									methodName: 'refund_assets',
									args: {
										drop_id,
									},
									gas: '100000000000000',
								}
							})
						}
						actions.push({
							type: 'FunctionCall',
							params: {
								methodName: 'delete_keys',
								args: {
									drop_id,
									public_keys: keys.map(({ pk }) => pk),
								},
								gas: '100000000000000',
							}
						}, {
							type: 'FunctionCall',
							params: {
								methodName: 'withdraw_from_balance',
								args: {},
								gas: '100000000000000',
							}
						})

						const res = wallet.signAndSendTransactions({
							transactions: [{
								receiverId,
								actions
							}]
						})
					}}>Delete Drop (reclaim funds)</button>
				</div>)
			}
		</>
		:
		<>
			<h4>No Drops Yet.</h4>
			<p>Click NEAR, FT, or NFT to explore!</p>
		</>
		}

	</div>
}
'''
'''--- src/components/Modal.js ---

import './Modal.scss';

export const Modal = ({
	state, update
}) => {

	const {
		dialog
	} = state

	if (!dialog) return null

	return <div className="modal">
		<div>
			<div className='dialog'>
				{dialog}
			</div>
		</div>
	</div>
}
'''
'''--- src/components/NEAR.js ---
import React, { useEffect } from 'react'
import * as nearAPI from 'near-api-js';
import { BN } from 'bn.js'
import { Form } from './Form'
import { simpleDrop } from '../configs/simple'
import { ftDrop, FT_CONTRACT_ID } from '../configs/ft'
import { estimateRequiredDeposit, ATTACHED_GAS_FROM_WALLET } from '../configs/keypom-utils'
import { share } from '../utils/mobile'
import { generateSeedPhrase } from 'near-seed-phrase';
import {
	useNavigate
} from "react-router-dom";

import { contractId, receiverId } from '../state/app';
const {
	KeyPair,
	utils: { format: { parseNearAmount, formatNearAmount } },
} = nearAPI

const hashBuf = (str) => crypto.subtle.digest('SHA-256', new TextEncoder().encode(str))
const genKey = async (rootKey, meta, nonce) => {
	const hash = await hashBuf(`${rootKey}_${meta}_${nonce}`)
	const { secretKey } = generateSeedPhrase(hash)
	return KeyPair.fromString(secretKey)
}

export const NEAR = ({ state, update, wallet }) => {

	const { near, drops, ftBalance, rootKey } = state
	const navigate = useNavigate();

	/// Main Event Handlers

	const createSimpleDrop = async (values) => {
		console.log(values)

		const DEPOSIT_PER_USE = parseNearAmount(values['NEAR Value'].toString());
		const NUM_KEYS = parseInt(values['Number of Drops'].toString())
		const DROP_METADATA = Date.now().toString() // unique identifier for keys

		const {
			DROP_CONFIG,
			STORAGE_REQUIRED,
		} = simpleDrop;

		let requiredDeposit = await estimateRequiredDeposit({
			near,
			depositPerUse: DEPOSIT_PER_USE,
			numKeys: NUM_KEYS,
			usesPerKey: DROP_CONFIG.uses_per_key,
			attachedGas: ATTACHED_GAS_FROM_WALLET,
			storage: STORAGE_REQUIRED,
		})

		// console.log(formatNearAmount(requiredDeposit, 6))

		let keyPairs = [], pubKeys = [];
		for (var i = 0; i < NUM_KEYS; i++) {
			const keyPair = await genKey(rootKey, DROP_METADATA, i)
			keyPairs.push(keyPair)
			pubKeys.push(keyPair.publicKey.toString());
		}

		/// redirect with mynearwallet
		const res = wallet.signAndSendTransactions({
			transactions: [{
				receiverId: 'v1.keypom.testnet',
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'create_drop',
						args: {
							public_keys: pubKeys,
							deposit_per_use: DEPOSIT_PER_USE,
							config: DROP_CONFIG,
							metadata: JSON.stringify(DROP_METADATA)
						},
						gas: '300000000000000',
						deposit: requiredDeposit,
					}
				}]
			}]
		})
	}

	/// Render

	if (!rootKey) return <p>Make a Root Key first in Account tab</p>

	return <div>

	<button onClick={() => navigate('/')}>Drops</button>

		<h4>Create NEAR Drop</h4>

		<Form {...{
			data: {
				['NEAR Value']: 1,
				['Number of Drops']: 1,
			},
			minMax: {
				['NEAR Value']: {
					min: 0.2,
					step: 0.1
				},
				['Number of Drops']: {
					min: 1,
					max: 50
				},
			},
			submitLabel: 'Create NEAR Drop',
			submit: createSimpleDrop
		}} />

	</div>
}
'''
'''--- src/components/NFT.js ---
import React, { useEffect } from 'react'
import * as nearAPI from 'near-api-js';
import { BN } from 'bn.js'
import { Form } from './Form'
import { simpleDrop } from '../configs/simple'
import { nftDrop, NFT_CONTRACT_ID, NFT_METADATA } from '../configs/nft'
import { estimateRequiredDeposit, ATTACHED_GAS_FROM_WALLET } from '../configs/keypom-utils'
import { share } from '../utils/mobile'
import { generateSeedPhrase } from 'near-seed-phrase';

import {
	useNavigate
} from "react-router-dom";
import { contractId, receiverId } from '../state/app';
import { networkId } from '../state/near';
const {
	KeyPair,
	utils: { format: { parseNearAmount, formatNearAmount } },
} = nearAPI

const hashBuf = (str) => crypto.subtle.digest('SHA-256', new TextEncoder().encode(str))
const genKey = async (rootKey, meta, nonce) => {
	const hash = await hashBuf(`${rootKey}_${meta}_${nonce}`)
	const { secretKey } = generateSeedPhrase(hash)
	return KeyPair.fromString(secretKey)
}

export const NFT = ({ state, update, wallet }) => {

	const { near, nftBalance, rootKey } = state
	const navigate = useNavigate();

	const onMount = async () => {

		const nftBalance = await wallet.viewFunction({
			contractId: NFT_CONTRACT_ID,
			methodName: 'nft_tokens_for_owner',
			args: {
				account_id: wallet.accountId
			}
		})
		update('nftBalance', nftBalance)
	}
	useEffect(() => {
		onMount()
	}, [])

	console.log(nftBalance)

	/// Main Event Handlers

	const handleGetNFT = async () => {
		let tokenId = `Keypom-${Date.now()}`;

		const res = wallet.signAndSendTransactions({
			transactions: [{
				receiverId: NFT_CONTRACT_ID,
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'nft_mint',
						args: {
							receiver_id: wallet.accountId,
							metadata: NFT_METADATA,
							token_id: tokenId,
						},
						gas: '100000000000000',
						deposit: parseNearAmount('0.1')
					}
				}]
			}]
		})
	}

	const handleRemoveNFTs = async () => {
		const actions = []
		for (let i = 0; i < Math.min(nftBalance.length, 6); i++) {
			actions.push({
				type: 'FunctionCall',
				params: {
					methodName: 'nft_transfer',
					args: {
						receiver_id: networkId === 'testnet' ? 'testnet' : 'near',
						token_id: nftBalance[i].token_id,
					},
					gas: '50000000000000',
					deposit: '1',
				}
			})
		}
		const res = wallet.signAndSendTransactions({
			transactions: [{
				receiverId: NFT_CONTRACT_ID,
				actions,
			}]
		})
	}

	const createNFTDrop = async (values) => {

		const tokenId = values['NFT Token ID'];
		const DEPOSIT_PER_USE = parseNearAmount(values['NEAR Value'].toString());
		const NUM_KEYS = parseInt(values['Number of Drops'].toString())
		const DROP_METADATA = Date.now().toString() // unique identifier for keys

		const {
			DROP_CONFIG,
			STORAGE_REQUIRED,
			NFT_DATA,
		} = nftDrop;

		NFT_DATA.sender_id = wallet.accountId

		let requiredDeposit = await estimateRequiredDeposit({
			near,
			depositPerUse: DEPOSIT_PER_USE,
			numKeys: NUM_KEYS,
			usesPerKey: DROP_CONFIG.uses_per_key,
			attachedGas: ATTACHED_GAS_FROM_WALLET,
			storage: STORAGE_REQUIRED,
		})

		// console.log(formatNearAmount(requiredDeposit))

		let keyPairs = [], pubKeys = [];
		for (var i = 0; i < NUM_KEYS; i++) {
			const keyPair = await genKey(rootKey, DROP_METADATA, i)
			keyPairs.push(keyPair)
			pubKeys.push(keyPair.publicKey.toString());
		}

		/// redirect with mynearwallet
		const nextDropId = await wallet.viewFunction({
			contractId,
			methodName: 'get_next_drop_id'
		})

		// return console.log(nextDropId, tokenId)

		const res = wallet.signAndSendTransactions({
			transactions: [{
				receiverId: 'v1.keypom.testnet',
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'create_drop',
						args: {
							public_keys: pubKeys,
							deposit_per_use: DEPOSIT_PER_USE,
							config: DROP_CONFIG,
							metadata: JSON.stringify(DROP_METADATA),
							nft_data: NFT_DATA,
						},
						gas: '250000000000000',
						deposit: requiredDeposit,
					}
				}]
			}, {
				receiverId: NFT_CONTRACT_ID,
				actions: [{
					type: 'FunctionCall',
					params: {
						methodName: 'nft_transfer_call',
						args: {
							receiver_id: contractId,
							token_id: tokenId,
							msg: nextDropId.toString(),
						},
						gas: '50000000000000',
						deposit: '1',
					}
				}]
			}]
		})
	}

	/// Render

	if (!rootKey) return <p>Make a Root Key first in Account tab</p>

	return <div>

		<button onClick={() => navigate('/')}>Drops</button>

		<h4>NFTs</h4>
		{
			nftBalance.length === 0 && <p>No NFTs yet. Click 'Get NFT'.</p>
		}
		{
			nftBalance.map(({ token_id, metadata: { title, description, media } }) => {
				return <div className="nft" key={token_id}>
					<p>{token_id}</p>
					<p>{title}</p>
					<p>{description}</p>
					<img src={media} />
				</div>
			})
		}
		<button className="outline" onClick={handleGetNFT}>Get NFT</button>
		{
			nftBalance.length > 0 && <button className="outline" onClick={handleRemoveNFTs}>Remove NFTs</button>
		}

		{nftBalance.length > 0 && <>

			<h4>Create NFT Drop</h4>

			<Form {...{
				data: {
					['NFT Token ID']: nftBalance[0].token_id,
					['NEAR Value']: 0.2,
					['Number of Drops']: 1,
				},
				minMax: {
					['NEAR Value']: {
						min: 0.2,
						step: 0.1
					},
					['Number of Drops']: {
						min: 1,
						max: 50
					},
				},
				submitLabel: 'Create NFT Drop',
				submit: createNFTDrop,
				submitDisabled: nftBalance.length === 0,
			}} />

		</>}

	</div>
}
'''
'''--- src/configs/ft.js ---
const { parseNearAmount } = require("near-api-js/lib/utils/format");

const KEYPOM_CONTRACT = "v1.keypom.testnet"
const FUNDING_ACCOUNT_ID = "benjiman.testnet";
const NETWORK_ID = "testnet";
const DEPOSIT_PER_USE = parseNearAmount("1");
const NUM_KEYS = 1;
export const FT_CONTRACT_ID = "ft.keypom.testnet";
const STORAGE_REQUIRED = parseNearAmount('0.01')

const FT_DATA = {
    // Contract ID of the fungible token
    contract_id: FT_CONTRACT_ID,
    // Who will be sending the FTs to the Keypom contract
    sender_id: FUNDING_ACCOUNT_ID,
    // How many FTs should be sent to the claimed account everytime a key is used
    balance_per_use: parseNearAmount("1"),
}

const DROP_CONFIG = {
    // How many claims can each key have.
    uses_per_key: 1,

    // Should the drop be automatically deleted when all the keys are used? This is defaulted to false and
    // Must be overwritten
    delete_on_empty: true,

    // When this drop is deleted and it is the owner's *last* drop, automatically withdraw their balance.
    auto_withdraw: true,

    // Minimum block timestamp that keys can be used. If None, keys can be used immediately
    // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.
    start_timestamp: null,

    // How often can a key be used
    // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.
    throttle_timestamp: null,

    // If claim is called, refund the deposit to the owner's balance. If None, default to false.
    on_claim_refund_deposit: null,

    // Can the access key only call the claim method_name? Default to both method_name callable
    claim_permission: null,

    // Root account that all sub-accounts will default to. If None, default to the global drop root.
    drop_root: null,
}

const DROP_METADATA = "";

export const ftDrop = {
    FUNDING_ACCOUNT_ID,
    NETWORK_ID,
    DEPOSIT_PER_USE,
    NUM_KEYS,
    DROP_CONFIG,
    DROP_METADATA,
    KEYPOM_CONTRACT,
    FT_DATA,
    FT_CONTRACT_ID,
	STORAGE_REQUIRED,
}
'''
'''--- src/configs/keypom-utils.js ---
const { BN } = require("bn.js");
const { parseNearAmount, formatNearAmount } = require("near-api-js/lib/utils/format");
const { connect, KeyPair, keyStores, utils } = require("near-api-js");
const path = require("path");
const homedir = require("os").homedir();

/// How much Gas each each cross contract call with cost to be converted to a receipt
const GAS_PER_CCC = 5000000000000; // 5 TGas
const RECEIPT_GAS_COST = 2500000000000; // 2.5 TGas
const YOCTO_PER_GAS = 100000000; // 100 million
export const ATTACHED_GAS_FROM_WALLET = 100000000000000; // 100 TGas

/// How much yoctoNEAR it costs to store 1 access key
const ACCESS_KEY_STORAGE = new BN("1000000000000000000000");

// Initiate the connection to the NEAR blockchain.
const initiateNearConnection = async (network) => {
	const CREDENTIALS_DIR = ".near-credentials";

	const credentialsPath = (await path).join(homedir, CREDENTIALS_DIR);
	(await path).join;
	let keyStore = new keyStores.UnencryptedFileSystemKeyStore(credentialsPath);

	let nearConfig = {
		networkId: network,
		keyStore,
		nodeUrl: `https://rpc.${network}.near.org`,
		walletUrl: `https://wallet.${network}.near.org`,
		helperUrl: `https://helper.${network}.near.org`,
		explorerUrl: `https://explorer.${network}.near.org`,
	};

	near = await connect(nearConfig);
	return near;
};

// Initiate the connection to the NEAR blockchain.
const estimateRequiredDeposit = async ({
    near,
    depositPerUse,
    numKeys,
    usesPerKey,
    attachedGas,
    storage = parseNearAmount("0.034"),
    keyStorage = parseNearAmount("0.0065"),
    fcData = null,
    ftData = null,
}) => {
    const numKeysBN = new BN(numKeys)
    
    let totalRequiredStorage = new BN(storage).add(new BN(keyStorage).mul(numKeysBN));
    console.log('totalRequiredStorage: ', totalRequiredStorage.toString())

    let actualAllowance = estimatePessimisticAllowance(attachedGas);
    console.log('actualAllowance: ', actualAllowance.toString())

    let totalAllowance = actualAllowance.mul(numKeysBN);
    console.log('totalAllowance: ', totalAllowance.toString())

    let totalAccessKeyStorage = ACCESS_KEY_STORAGE.mul(numKeysBN);
    console.log('totalAccessKeyStorage: ', totalAccessKeyStorage.toString())

    let {numNoneFcs, depositRequiredForFcDrops} = getNoneFcsAndDepositRequired(fcData, usesPerKey);
    let totalDeposits = new BN(depositPerUse).mul(new BN(usesPerKey - numNoneFcs)).mul(numKeysBN);
    console.log('totalDeposits: ', totalDeposits.toString())

    let totalDepositsForFc = depositRequiredForFcDrops.mul(numKeysBN);
    console.log('totalDepositsForFc: ', totalDepositsForFc.toString())

    let requiredDeposit = totalRequiredStorage
        .add(totalAllowance)
        .add(totalAccessKeyStorage)
        .add(totalDeposits)
        .add(totalDepositsForFc);
    
    console.log('requiredDeposit B4 FT costs: ', requiredDeposit.toString())
    
    if (ftData != null) {
        let extraFtCosts = await getFtCosts(near, numKeys, usesPerKey, ftData.contract_id);
        requiredDeposit = requiredDeposit.add(new BN(extraFtCosts));

        console.log('requiredDeposit AFTER FT costs: ', requiredDeposit.toString())
    }

    return requiredDeposit.toString();
};

// Estimate the amount of allowance required for a given attached gas.
const estimatePessimisticAllowance = (attachedGas) => {
    // Get the number of CCCs you can make with the attached GAS
    let numCCCs = Math.floor(attachedGas / GAS_PER_CCC);
    console.log('numCCCs: ', numCCCs)
    // Get the constant used to pessimistically calculate the required allowance
    let powOutcome = Math.pow(1.03, numCCCs);
    console.log('powOutcome: ', powOutcome)

    let requiredGas = (attachedGas + RECEIPT_GAS_COST) * powOutcome + RECEIPT_GAS_COST;
    console.log('requiredGas: ', requiredGas)
    let requiredAllowance = new BN(requiredGas).mul(new BN(YOCTO_PER_GAS));
    console.log('requiredAllowance: ', requiredAllowance.toString())
    return requiredAllowance;
};

// Estimate the amount of allowance required for a given attached gas.
const getNoneFcsAndDepositRequired = (fcData, usesPerKey) => {
    let depositRequiredForFcDrops = new BN(0);
    let numNoneFcs = 0;
    if (fcData == null) {
        return {numNoneFcs, depositRequiredForFcDrops};
    }

    let numMethodData = fcData.methods.length;

    // If there's one method data specified and more than 1 claim per key, that data is to be used
    // For all the claims. In this case, we need to tally all the deposits for each method in all method data.
    if (usesPerKey > 1 && numMethodData == 1) {
        let methodData = fcData.methods[0];

        // Keep track of the total attached deposit across all methods in the method data
        let attachedDeposit = new BN(0);
        for (let i = 0; i < methodData.length; i++) {
            attachedDeposit = attachedDeposit.add(new BN(methodData[i].attachedDeposit));
        }

        depositRequiredForFcDrops = depositRequiredForFcDrops.add(attachedDeposit).mul(usesPerKey);

        return {
            numNoneFcs,
            depositRequiredForFcDrops,
        }
    }
    // In the case where either there's 1 claim per key or the number of FCs is not 1,
    // We can simply loop through and manually get this data
    for (let i = 0; i < numMethodData; i++) {
        let methodData = fcData.methods[i];
        let isNoneFc = methodData == null;
        numNoneFcs += isNoneFc;

        if (!isNoneFc) {
            // Keep track of the total attached deposit across all methods in the method data
            let attachedDeposit = new BN(0);
            for (let j = 0; j < methodData.length; j++) {
                attachedDeposit = attachedDeposit.add(new BN(methodData[j].attachedDeposit));
            }

            depositRequiredForFcDrops = depositRequiredForFcDrops.add(attachedDeposit);
        }
    }

    return {
        numNoneFcs,
        depositRequiredForFcDrops,
    } 
};

// Estimate the amount of allowance required for a given attached gas.
const getFtCosts = async (near, numKeys, usesPerKey, ftContract) => {
    const viewAccount = await near.account("foo");
    const storageBalanceBounds = await viewAccount.viewFunction(ftContract, "storage_balance_bounds", {}); 
    console.log('storageBalanceBounds: ', storageBalanceBounds)
    let costs = new BN(storageBalanceBounds.min).mul(new BN(numKeys)).mul(new BN(usesPerKey)).add(new BN(storageBalanceBounds.min));
    console.log('costs: ', costs.toString());
    return costs.toString();
};

module.exports = {
    initiateNearConnection,
    estimateRequiredDeposit,
    estimatePessimisticAllowance,
    getNoneFcsAndDepositRequired,
    getFtCosts,
    ATTACHED_GAS_FROM_WALLET
};
'''
'''--- src/configs/nft.js ---
const { parseNearAmount } = require("near-api-js/lib/utils/format");

const KEYPOM_CONTRACT = "v1.keypom.testnet"
const FUNDING_ACCOUNT_ID = "benjiman.testnet";
const NETWORK_ID = "testnet";
const DEPOSIT_PER_USE = parseNearAmount("1");
const NUM_KEYS = 1;
export const NFT_CONTRACT_ID = "nft.examples.testnet";
const STORAGE_REQUIRED = parseNearAmount('0.01')

export const NFT_METADATA = {
    title: "Keypom FTW!",
    description: "Keypom is lit fam!",
    media: "https://bafkreidsht2pxoytl3d4zdnpsjmxedtk7dhuef2vmr3muz7si3vlthbcr4.ipfs.nftstorage.link",
}

const NFT_DATA = {
    // NFT Contract Id that the tokens will come from
    contract_id: NFT_CONTRACT_ID,
    // Who will be sending the NFTs to the Keypom contract
    sender_id: FUNDING_ACCOUNT_ID,
}

const DROP_CONFIG = {
    // How many claims can each key have.
    uses_per_key: 1,

    // Should the drop be automatically deleted when all the keys are used? This is defaulted to false and
    // Must be overwritten
    delete_on_empty: true,

    // When this drop is deleted and it is the owner's *last* drop, automatically withdraw their balance.
    auto_withdraw: true,

    // Minimum block timestamp that keys can be used. If None, keys can be used immediately
    // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.
    start_timestamp: null,

    // How often can a key be used
    // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.
    throttle_timestamp: null,

    // If claim is called, refund the deposit to the owner's balance. If None, default to false.
    on_claim_refund_deposit: null,

    // Can the access key only call the claim method_name? Default to both method_name callable
    claim_permission: null,

    // Root account that all sub-accounts will default to. If None, default to the global drop root.
    drop_root: null,
}

const DROP_METADATA = "";

export const nftDrop = {
    FUNDING_ACCOUNT_ID,
    NETWORK_ID,
    DEPOSIT_PER_USE,
    NUM_KEYS,
    DROP_CONFIG,
    DROP_METADATA,
    KEYPOM_CONTRACT,
    NFT_DATA,
    NFT_METADATA,
    STORAGE_REQUIRED,
}
'''
'''--- src/configs/simple.js ---
import { parseNearAmount } from "near-api-js/lib/utils/format";

const KEYPOM_CONTRACT = "v1.keypom.testnet"
const FUNDING_ACCOUNT_ID = "benjiman.testnet";
const NETWORK_ID = "testnet";
const DEPOSIT_PER_USE = parseNearAmount("1");
const STORAGE_REQUIRED = parseNearAmount('0.0075')
const NUM_KEYS = 1;

const DROP_CONFIG = {
    // How many claims can each key have.
    uses_per_key: 1,

    // Should the drop be automatically deleted when all the keys are used? This is defaulted to false and
    // Must be overwritten
    delete_on_empty: true,

    // When this drop is deleted and it is the owner's *last* drop, automatically withdraw their balance.
    auto_withdraw: true,

    // Minimum block timestamp that keys can be used. If None, keys can be used immediately
    // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.
    start_timestamp: null,

    // How often can a key be used
    // Measured in number of non-leap-nanoseconds since January 1, 1970 0:00:00 UTC.
    throttle_timestamp: null,

    // If claim is called, refund the deposit to the owner's balance. If None, default to false.
    on_claim_refund_deposit: null,

    // Can the access key only call the claim method_name? Default to both method_name callable
    claim_permission: null,

    // Root account that all sub-accounts will default to. If None, default to the global drop root.
    drop_root: null,
}

const DROP_METADATA = "";

export const simpleDrop = {
    FUNDING_ACCOUNT_ID,
    NETWORK_ID,
    DEPOSIT_PER_USE,
    NUM_KEYS,
    DROP_CONFIG,
    DROP_METADATA,
    KEYPOM_CONTRACT,
    STORAGE_REQUIRED,
}
'''
'''--- src/css/modal-ui.css ---
@import url("https://fonts.googleapis.com/css2?family=Manrope:wght@400;500;600&display=swap");

#near-wallet-selector-modal {
    --backdrop-bg: #26262630;
    --heading-color: #222222;
    --text-color: #676767;
    --sidebar-border-color: #EDEDED;
    --selected-wallet-bg: #4F7CD1;
    --selected-wallet-bg-hover: transparent;
    --wallet-option-border-color: #A7A7A730;
    --wallet-option-bg-hover: #EDEDED;
    --content-bg: #FFFFFF;
    --change-path-bg: #EDEDED;
    --home-button-bg: #EDEDED;
    --confirm-button-bg: #5F8AFA;
    --confirm-button-bg-hover: #5AA6FF;
    --error: #DB5555;
    --close-button-bg-color: #EDEDED;
    --close-button-fill-icon-color: #9F9F9F;
    --spinner-color: #676767;
    --bottom-section: #ececec;
    --mobile-text: #3e3e3e;
    --connected-green: #47E586;
}

#near-wallet-selector-modal .dark-theme {
    --backdrop-bg: #26262630;
    --heading-color: #FFFFFF;
    --text-color: #C1C1C1;
    --sidebar-border-color: #313030;
    --selected-wallet-bg: #4F7CD1;
    --selected-wallet-bg-hover: #262626CC;
    --wallet-option-border-color: #A7A7A730;
    --wallet-option-bg-hover: #313030;
    --content-bg: #232323;
    --change-path-bg: #161616;
    --home-button-bg: #313030;
    --confirm-button-bg: #5F8AFA;
    --confirm-button-bg-hover: #5AA6FF;
    --error: #DB5555;
    --close-button-bg-color: #313030;
    --close-button-fill-icon-color: #C1C1C1;
    --spinner-color: #FFFFFF;
    --bottom-section: #131313;
    --mobile-text: #c1c1c1;
    --connected-green: #47E586;
}

@media (prefers-color-scheme: dark) {
    #near-wallet-selector-modal {
        --backdrop-bg: #26262630;
        --heading-color: #FFFFFF;
        --text-color: #C1C1C1;
        --sidebar-border-color: #313030;
        --selected-wallet-bg: #4F7CD1;
        --selected-wallet-bg-hover: #262626CC;
        --wallet-option-border-color: #A7A7A730;
        --wallet-option-bg-hover: #313030;
        --content-bg: #232323;
        --change-path-bg: #161616;
        --home-button-bg: #313030;
        --confirm-button-bg: #5F8AFA;
        --confirm-button-bg-hover: #5AA6FF;
        --error: #DB5555;
        --close-button-bg-color: #313030;
        --close-button-fill-icon-color: #C1C1C1;
        --spinner-color: #FFFFFF;
        --bottom-section: #131313;
        --mobile-text: #c1c1c1;
        --connected-green: #47E586;
    }
}

/**
 * Modal Wrapper
 */

.nws-modal-wrapper {
    position: fixed;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
    opacity: 0;
    visibility: hidden;
    /*transition: visibility 0s linear 0.25s, opacity 0.25s 0s;*/
    color: var(--wallet-selector-text-color, var(--text-color));
    font-family: Manrope, sans-serif;
    font-weight: 500;
    z-index: 100;
    display: flex;
    justify-content: center;
    align-items: center;
}

.nws-modal-wrapper .nws-modal-overlay {
    background: var(--wallet-selector-backdrop-bg, var(--backdrop-bg));
    height: 100%;
    width: 100%;
    position: absolute;
}

/**
 * Modal
 */

.nws-modal-wrapper .nws-modal {
    background: var(--wallet-selector-content-bg, var(--content-bg));
    width: 100%;
    max-width: 812px;
    height: 555px;
    border-radius: 16px;
    position: absolute;
    left: 50%;
    transform: translate(-50%, 0px);
    transition: visibility 0s linear 0s, opacity 0.25s 0s, transform 0.25s;
    background-color: var(--wallet-selector-content-bg, var(--content-bg));
    overflow-y: auto;
    font-size: 16px;
    line-height: 1.6;
    overflow: hidden;
    display: inline-flex;
}

.nws-modal-wrapper .nws-modal * {
  box-sizing: border-box;
}

.nws-modal-wrapper .nws-modal button {
  padding: 0.5em 1em;
  cursor: pointer;
  border: none;
}

/**
* Modal Left Side
*/

.nws-modal-wrapper .nws-modal .modal-left {
    width: 35%;
    border-right: 1px solid var(--wallet-selector-sidebar-border-color, var(--sidebar-border-color));
    padding: 32px 24px;
    height: 100%;
    overflow: auto;
}

.nws-modal-wrapper .nws-modal .modal-left .modal-left-title h2 {
    margin-top: 0;
    margin-bottom: 20px;
    font-size: 18px;
    font-weight: bold;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

.nws-modal-wrapper .nws-modal .modal-left::-webkit-scrollbar {
    width: 10px;
}

/**
 * Modal Wallet Options Section/Wrapper
 */

.nws-modal-wrapper .nws-modal .wallet-options-wrapper {
    margin-bottom: 20px;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .description {
    margin-top: 0;
    margin-bottom: 0;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list {
    margin: 0;
    list-style-type: none;
    padding: 0;
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
    gap: 10px;
}

.single-wallet {
    display: flex;
    flex-wrap: nowrap;
    flex-direction: row;
    align-content: center;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    column-gap: 24px;
    padding: 12px;
    cursor: pointer;
}

.single-wallet .icon {
    height: 48px;
    width: auto;
}

.single-wallet .icon img {
    width: 100%;
    height: auto;
    max-width: 48px;
}

.single-wallet .content {
    width: 50%;
}

.single-wallet .content .name {
    font-family: inherit;
    font-style: normal;
    font-weight: 700;
    font-size: 14px;
    line-height: 24px;
    color: #FFFFFF;
}

.single-wallet .content .description {
    font-family: inherit;
    font-style: normal;
    font-weight: 700;
    font-size: 14px;
    line-height: 150%;
}

.single-wallet .button-get {
    margin-left: auto;
    margin-right: 0;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar {
    border-radius: 8px;
    justify-content: flex-start;
    column-gap: 12px;
    cursor: pointer;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar:hover {
    background-color: var(--wallet-selector-wallet-option-bg-hover, var(--wallet-option-bg-hover));
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar.selected-wallet {
    padding: 12px;
    background-color: var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar.selected-wallet .content .title {
    color: #FFFFFF;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar.deprecated-wallet {
    opacity: 0.4;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar .warning-triangle {
    display: flex;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar .icon {
    width: 40px;
    height: 40px;
    background-color: #FFF;
    padding: 5px;
    border-radius: 5px;
    position: relative;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar.connected-wallet .icon::before {
  content: '';
  display: block;
  width: 10px;
  height: 10px;
  background-color: var(--connected-green);
  border-radius: 50%;
  position: absolute;
  top: -8px;
  right: -8px;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar.connected-wallet .icon::before {
  border: 3px solid var(--wallet-selector-content-bg, var(--content-bg));
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar.selected-wallet.connected-wallet .icon::before {
  border: 3px solid var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar .content {
    height: 32px;
    width: auto;
}

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar .content .title {
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 32px;
    /* identical to box height, or 171% */
    align-items: center;
    color: var(--wallet-selector-heading-color, var(--heading-color));
    margin-left: 10px;
  }

.nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list .single-wallet.sidebar .content .description {
    display: none;
}

/**
* Modal Right Side
*/

.nws-modal-wrapper .nws-modal .modal-right {
    width: 65%;
    padding: 32px;
    overflow: auto;
}

.nws-modal-wrapper .nws-modal .modal-right::-webkit-scrollbar {
    width: 10px;
}

.nws-modal-wrapper .nws-modal .wallet-home-wrapper .get-wallet-wrapper,
.nws-modal-wrapper .nws-modal .wallet-home-wrapper .wallet-info-wrapper,
.nws-modal-wrapper .nws-modal .connecting-wrapper,
.nws-modal-wrapper .nws-modal .wallet-not-installed-wrapper,
.nws-modal-wrapper .nws-modal .switch-network-message-wrapper {
  margin-top: 91px;
  padding: 0 28px;
}

.nws-modal-wrapper .nws-modal .connecting-wrapper-err {
    margin-top: 45px;
    padding: 0 28px;
}

.nws-modal-wrapper .nws-modal .wallet-home-wrapper .get-wallet-wrapper {
    padding: 0;
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what {
    display: flex;
    align-content: center;
    flex-direction: row;
    align-items: flex-start;
    width: 100%;
    gap: 32px;
    justify-content: flex-start;
    flex-wrap: nowrap;
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what + .wallet-what {
    margin-top: 50px;
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what .icon-side {
    width: 15%;
    padding-top: 9px;
    padding-bottom: 9px;
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what .icon-side img {
    width: 100%;
    height: auto;
    max-height: 65px;
    border-radius: 6px;
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what .content-side {
    width: 100%;
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what .content-side h3 {
    margin: 0 auto 8px 0;
    font-family: inherit;
    font-style: normal;
    font-weight: 700;
    font-size: 16px;
    line-height: 24px;
    color: var(--wallet-selector-text-color, var(--heading-color));
}

.nws-modal-wrapper .nws-modal .modal-right .wallet-what .content-side p {
    margin: 0;
    font-family: inherit;
    font-style: normal;
    font-weight: 400;
    font-size: 14px;
    line-height: 150%;
    word-break: break-word;
    width: 80%;
}

/**
 * Modal Header
 */

.nws-modal-wrapper .nws-modal .modal-right .nws-modal-header h3.middleTitle {
    text-align: center;
    margin: 4px auto;
    font-size: 18px;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

.nws-modal-wrapper .nws-modal .modal-right .nws-modal-body.get-wallet-body {
    padding-left: 32px;
    padding-right: 0;
    row-gap: 16px;
    margin-top: 64px;
}

.nws-modal-wrapper .nws-modal .nws-modal-body button.middleButton {
    background-color: var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
    font: inherit;
    border-radius: 4px;
    color: #FFFFFF;
    font-weight: 700;
    font-size: 14px;
    line-height: 24px;
    border-color: var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
    display: block;
    margin: 25px auto 12px auto;
    border: 0.1em solid var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
}

.nws-modal-wrapper .nws-modal .nws-modal-body button.get-wallet {
    margin: 4px 0;
    background-color: var(--wallet-selector-home-button-bg, var(--home-button-bg));
    border-radius: 4px;
    padding: 8px 24px;
    border-width: 0;
    font-style: normal;
    font-weight: 700;
    font-size: 14px;
    line-height: 24px;
    font-family: inherit;
    color: #6494EE;
}

.nws-modal-wrapper .nws-modal .nws-modal-header {
    width: 100%;
    display: flex;
    flex: 1;
    align-items: flex-start;
    justify-content: space-between;
}

.nws-modal-wrapper .nws-modal .nws-modal-header .close-button {
    border: 0;
    cursor: pointer;
    height: 32px;
    width: 32px;
    padding: 0;
    background-color: var(--wallet-selector-close-button-bg-color, var(--close-button-bg-color));
    border-radius: 50px;
}

.nws-modal-wrapper .nws-modal .nws-modal-header .close-button svg {
    fill: var(--wallet-selector-close-button-fill-icon-color, var(--close-button-fill-icon-color));
}

.nws-modal-wrapper .nws-modal .back-button {
    background: transparent;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: block;
    /* vertical-align: middle; */
    border: none;
    padding: 4px
}

.nws-modal-wrapper .nws-modal .nws-modal-header-wrapper {
    display: flex;
    align-items: center;
}

.nws-modal-wrapper .nws-modal .nws-modal-header .close-button:active {
    background: transparent;
}

.nws-modal-wrapper .nws-modal .nws-modal-header .close-button svg {
    pointer-events: none;
}

.nws-modal-wrapper .nws-modal .nws-modal-header h2 {
    margin-top: 0;
    margin-bottom: 20px;
    font-size: 18px;
    font-weight: bold;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

.nws-modal-wrapper .nws-modal .action-buttons {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

/**
 * Modal Switch Network Message Section/Wrapper
 */

.nws-modal-wrapper .nws-modal .switch-network-message-wrapper .content .network-id {
    color: var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
}

/**
 * Modal Ledger Derivation Path Section/Wrapper
 */

.nws-modal-wrapper .nws-modal .derivation-path-wrapper {
    padding: 0 26px;
}

.nws-modal-wrapper .nws-modal .derivation-path-wrapper .enter-derivation-path .ledger-image {
    display: flex;
    justify-content: center;
    margin-top: 53px;
    margin-bottom: 40px;
}

.nws-modal-wrapper .nws-modal .derivation-path-wrapper .enter-derivation-path .ledger-description {
    font-size: 14px;
    text-align: center;
}

.nws-modal-wrapper .nws-modal .derivation-path-wrapper .enter-derivation-path .ledger-description .specify-path {
    color: var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
    cursor: pointer;
}

.nws-modal-wrapper .nws-modal .derivation-path-wrapper .derivation-path-list {
    display: flex;
    justify-content: center;
    flex-direction: column;
    margin-bottom: 16px;
}

.nws-modal-wrapper .specify-path-wrapper .change-path-wrapper {
    display: flex;
    justify-content: center;
    margin-top: 91px;
}

.nws-modal-wrapper .specify-path-wrapper .change-path-wrapper .display-path {
    background: var(--home-button-bg);
    color: #606060;
    padding: 16px;
    border-radius: 8px;
    letter-spacing: 1px;
    font-weight: 700;
}

.nws-modal-wrapper .specify-path-wrapper .change-path-wrapper .change-path {
    background: var(--change-path-bg);
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-left: 10px;
    width: 63px;
    padding: 0 5px;
    border-radius: 8px;
}

.nws-modal-wrapper .specify-path-wrapper .change-path-wrapper .change-path .path-value {
    width: 100%;
    text-align: center;
    font-weight: bold;
}

.nws-modal-wrapper .nws-modal .specify-path-wrapper .path-description {
    font-size: 14px;
    margin-top: 24px;
    text-align: center;
}

.nws-modal-wrapper .nws-modal .specify-path-wrapper .what-link {
    font-size: 14px;
    text-align: center;
    color: var(--selected-wallet-bg);
    cursor: pointer;
}

.nws-modal-wrapper .specify-path-wrapper .change-path-wrapper .change-path .buttons-wrapper {
    display: flex;
    flex-direction: column;
}

.nws-modal-wrapper .specify-path-wrapper .change-path-wrapper .change-path .buttons-wrapper button {
    padding: 0;
    width: 23px;
    background-color: var(--home-button-bg);
    border: none;
}

.nws-modal-wrapper .nws-modal .no-accounts-found-wrapper {
    margin-top: 50px;
    font-size: 14px;
}

.nws-modal-wrapper .nws-modal .enter-custom-account {
    margin-top: 20px;
}

.nws-modal-wrapper .nws-modal .enter-custom-account p {
    text-align: center;
    font-size: 14px;
}

.nws-modal-wrapper .nws-modal .enter-custom-account .input-wrapper {
    display: flex;
    justify-content: center;
    margin-top: 90px;
}

.nws-modal-wrapper .nws-modal .enter-custom-account .input-wrapper input {
    text-align: center;
    color: var(--wallet-selector-heading-color, var(--heading-color));
    border: 1px solid var(--confirm-button-bg-hover);
    padding: 6px 8px;
    border-radius: 50px;
}

/**
 * Modal Wallet ChooseLedgerAccountForm/Wrapper
 */

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper p {
    font-size: 14px;
    text-align: center;
    margin-top: 20px;
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .button-wrapper {
    display: flex;
    justify-content: center;
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .button-wrapper button {
    color: var(--selected-wallet-bg);
    font-weight: 600;
    background-color: transparent;
    border-radius: 20px;
    font-size: 14px;
    border: 1px solid var(--selected-wallet-bg);
    width: 78px;
    padding: 6px 8px;
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .form {
    margin-top: 96px;
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .nws-form-control {
    display: flex;
    flex-direction: column;
    margin-bottom: 16px;
    padding: 10px;
    color: var(--text-color);
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .nws-form-control .account {
    border-bottom: 1px solid var(--sidebar-border-color);
    padding: 16px 0;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .nws-form-control .account input[type=checkbox] {
    width: 25px;
    -ms-transform: scale(2);
    -moz-transform: scale(2);
    -webkit-transform: scale(2);
    -o-transform: scale(2);
    transform: scale(1.7);
    padding: 10px;
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .nws-form-control label {
    color: inherit;
}

.nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .action-buttons {
    justify-content: flex-end;
}

.nws-modal-wrapper .nws-modal .overview-wrapper p {
    font-size: 14px;
    text-align: center;
}

.nws-modal-wrapper .nws-modal .overview-wrapper .accounts {
    margin-top: 96px;
}

.nws-modal-wrapper .nws-modal .overview-wrapper .account {
    border-bottom: 1px solid var(--sidebar-border-color);
    padding: 16px 0;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

/*
  Connecting Wrapper Section/Wrapper
*/
.nws-modal-wrapper .nws-modal .connecting-wrapper .content {
    display: flex;
    flex-direction: column;
    align-items: center;
}

/**
 * Modal Wallet Not Installed Section/Wrapper
 */

.nws-modal-wrapper .wallet-not-installed-wrapper .refresh-link {
    color: #5f8afa;
    cursor: pointer;
}

.nws-modal-wrapper .wallet-not-installed-wrapper .wallet-data {
    display: flex;
    align-items: center;
}

.nws-modal-wrapper .wallet-not-installed-wrapper .wallet-data p {
    margin: 0 0 0 10px;
}

.nws-modal-wrapper .wallet-not-installed-wrapper .wallet-data .wallet-icon-box {
    width: 40px;
    height: 40px;
}

.nws-modal-wrapper .wallet-not-installed-wrapper .wallet-data .wallet-icon-box img {
    width: 100%;
    height: auto;
}

.open {
    opacity: 1;
    visibility: visible;
    transition: visibility 0s linear 0s, opacity 0.25s 0s;
}

.nws-modal-wrapper .spinner {
    margin-right: 10px;
    --size: 160px;
    --border: 6px;
    width: var(--size);
    height: var(--size);
    border-radius: 50%;
    position: relative;
    display: flex;
    align-items: center;
    justify-content: center;
}

.nws-modal-wrapper .spinner .icon {
    width: calc(var(--size) / 1.2);
    height: calc(var(--size) / 1.2);
    border: 1px solid rgba(0, 0, 0, 0.05);
    border-radius: 50%;
    box-shadow: rgba(0, 0, 0, 0.05) 0 10px 20px 0;
}

.nws-modal-wrapper .spinner img {
    width: 100%;
    height: auto;
}

@keyframes spin {
    100% {
        transform: rotate(360deg);
    }
}

@media (max-width: 600px) {
    .nws-modal-wrapper .nws-modal-wrapper .nws-modal {
        width: 250px;
    }

    .nws-modal-wrapper .nws-modal-wrapper .nws-modal .derivation-path-wrapper .derivation-path-list input {
        max-width: 140px;
    }

    .nws-modal-wrapper .nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .nws-form-control {
        flex-direction: column;
    }

    .nws-modal-wrapper .nws-modal-wrapper .nws-modal .choose-ledger-account-form-wrapper .nws-form-control select {
        text-align: center;
    }
}

.nws-modal-wrapper .nws-modal-wrapper.dark-theme .nws-modal #near-wallet img,
.nws-modal-wrapper .nws-modal-wrapper.dark-theme .nws-modal #math-wallet img,
.nws-modal-wrapper .nws-modal-wrapper.dark-theme .nws-modal #ledger img,
.nws-modal-wrapper .nws-modal-wrapper.dark-theme .nws-modal .wallet-not-installed-wrapper .math-wallet img {
    filter: invert(1);
}

.nws-modal-wrapper .nws-modal-wrapper.dark-theme .spinner .icon {
    box-shadow: 0 10px 20px 0 rgba(255, 255, 255, 0.05);
}

@media (prefers-color-scheme: dark) {

    .nws-modal-wrapper .nws-modal #near-wallet img,
    .nws-modal-wrapper .nws-modal #math-wallet img,
    .nws-modal-wrapper .nws-modal #ledger img,
    .nws-modal-wrapper .nws-modal .wallet-not-installed-wrapper .math-wallet img {
        filter: invert(1);
    }

    .nws-modal-wrapper .spinner .icon {
        box-shadow: 0 10px 20px 0 rgba(255, 255, 255, 0.05);
    }
}

@keyframes outAnimation {
    0% {
        opacity: 1;
    }

    100% {
        opacity: 0;
        visibility: hidden;
    }
}

/**
* Modal Wallet Connecting Section/Wrapper
*/

.connecting-wrapper {
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: flex-start;
}

.connecting-wrapper .content .icon {
    width: 80px;
    height: 80px;
    background-color: white;
    border-radius: 10px;
    padding: 10px
}

.connecting-wrapper .content .icon img {
    width: 100%;
    height: auto;
}

.connecting-wrapper .content .connecting-name {
    font-style: normal;
    font-weight: 700;
    font-size: 16px;
    line-height: 24px;
    display: flex;
    align-items: center;
    text-align: center;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

.connecting-wrapper .content .connecting-details {
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 24px;
    display: flex;
    align-items: center;
    margin-top: 40px;
}
.connecting-wrapper .content .connecting-details span {
    color: var(--wallet-selector-selected-wallet-bg, var(--selected-wallet-bg));
}
.connecting-wrapper .content .connecting-details .spinner {
    width: 25px;
    height: auto;
    animation: spinner 2s linear infinite;
}

@keyframes spinner {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

.nws-modal-wrapper .nws-modal .nws-modal-body .alert-message .connection button {
    margin: 24px auto;
    font-style: normal;
    font-weight: 700;
    font-size: 14px;
    line-height: 24px;
    display: flex;
    color: #6494EE;
    align-items: center;
    padding: 8px 24px;
    gap: 8px;
    width: 86px;
    height: 40px;
    background-color: var(--wallet-selector-home-button-bg, var(--home-button-bg));
    border-radius: 4px;
    border: 0;
}

.nws-modal-wrapper .nws-modal .nws-modal-body .alert-message .connection .error-wrapper {
    vertical-align: middle;
    align-items: center;
    display: flex;
    flex-wrap: nowrap;
    justify-content: center;
    flex-direction: column;
    column-gap: 12px;
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 150%;
    text-align: center;
}

.nws-modal-wrapper .nws-modal .nws-modal-body .alert-message .connection .error {
    color: #CE5A6F;
    vertical-align: middle;
    align-items: center;
    display: flex;
    flex-wrap: nowrap;
    justify-content: center;
    flex-direction: row;
    column-gap: 12px;
    font-style: normal;
    font-weight: 500;
    font-size: 14px;
    line-height: 150%;
    text-align: center;
}

.nws-modal-wrapper .nws-modal .nws-modal-body .alert-message .connection .error-wrapper .error svg {
  color: var(--wallet-selector-content-bg,var(--content-bg));
}

.nws-modal-wrapper .nws-modal .nws-modal-body .alert-message .connection .success {
    color: #4FD98F;
}

.nws-modal-wrapper .nws-modal .connecting-wrapper .content {
    padding: 25px;
}

.connecting-wrapper .content .connecting-details {
    margin-top: 20px;
}

.connecting-wrapper .wallet-connected-success {
  display: flex;
  align-items: center;
}

.connecting-wrapper .wallet-connected-success svg{
  color: var(--content-bg);
}

.connecting-wrapper .wallet-connected-success span {
  font-size: 14px;
  margin-left: 10px;
  color: var(--wallet-selector-connected-green, var(--connected-green));
}

.single-wallet-get {
    display: flex;
    flex-wrap: nowrap;
    flex-direction: row;
    align-content: center;
    align-items: center;
    justify-content: space-between;
    width: 100%;
    column-gap: 24px;
    padding: 12px;
    max-width: 450px;
    margin: auto;
    margin-top: 20px;
}

.single-wallet-get .icon {
    min-width: 48px;
    max-height: 48px;
    width: 48px;
    height: 48px;
    background-color: #FFF;
    padding: 5px;
    border-radius: 4px;
    position: relative;
}

.single-wallet-get .icon img {
    width: 100%;
    height: auto;
    max-width: 48px;
}

.single-wallet-get .title {
    font-family: inherit;
    font-style: normal;
    font-weight: 700;
    font-size: 14px;
    line-height: 24px;
    align-items: center;
    color: var(--wallet-selector-heading-color, var(--heading-color));
}

.single-wallet-get .description {
    font-family: inherit;
    font-style: normal;
    font-weight: 400;
    font-size: 14px;
    line-height: 150%;
    align-items: center;
}

.single-wallet-get .button-get {
    margin-left: auto;
    margin-right: 0;
}

.connected-flag {
    color: var(--connected-green);
    border: 1px solid var(--connected-green);
    border-radius: 50px;
    padding: 3px 10px;
    display: flex;
    align-items: center;
}

.connected-flag::before {
    content: '';
    display: block;
    width: 10px;
    height: 10px;
    border-radius: 50%;
    background-color: var(--connected-green);
    margin-right: 5px;
}

/************* Responsive and mobile **********/

@media (min-width: 577px) {
    .nws-modal-wrapper .nws-modal .modal-right .nws-modal-body .what-wallet-mobile {
        display: none;
    }
}

@media (min-width: 769px) {
    .button-spacing {
      margin: 90px
    }
}

@media (max-width: 768px) {

    .nws-modal-wrapper .nws-modal .wallet-home-wrapper .wallet-info-wrapper {
      margin-top: 45px;
    }

    .button-spacing {
      margin: 45px
    }

    .nws-modal-wrapper .nws-modal .modal-left {
      width: 40%;
      border-right: 1px solid var(--wallet-selector-sidebar-border-color, var(--sidebar-border-color));
      padding: 32px 16px;
      height: 100%;
      max-height: 70vh;
      overflow: auto;
    }

    .nws-modal-wrapper .nws-modal .modal-right {
      width: 60%;
      padding: 32px 16px;
      overflow: auto;
    }

    .nws-modal-wrapper .nws-modal .wallet-home-wrapper .wallet-info-wrapper {
      padding:  0 0 0 10px;
    }

   .nws-modal-wrapper .nws-modal .derivation-path-wrapper .enter-derivation-path .ledger-image {
      margin-top: 30px;
      margin-bottom: 35px;
    }
}

@media (max-width: 576px) {

    .nws-modal-wrapper .nws-modal .wallet-home-wrapper .get-wallet-wrapper,
    .nws-modal-wrapper .nws-modal .wallet-home-wrapper .wallet-info-wrapper,
    .nws-modal-wrapper .nws-modal .connecting-wrapper,
    .nws-modal-wrapper .nws-modal .wallet-not-installed-wrapper,
    .nws-modal-wrapper .nws-modal .switch-network-message-wrapper {
        margin-top: 20px;
    }

    .nws-modal-wrapper .nws-modal .modal-left .modal-left-title h2 {
      text-align: center;
    }

    .nws-modal-wrapper .wallet-not-installed-wrapper > p {
        margin: 20px 0px 30px 0px;
        max-width: 500px;
    }

    .nws-modal-wrapper .nws-modal .nws-modal-body button.get-wallet {
      background-color: var(--wallet-selector-home-button-bg, var(--content-bg));
    }

    .nws-modal-wrapper .nws-modal .modal-right .nws-modal-body .what-wallet-hide {
        display: none;
    }

    .nws-modal-wrapper .nws-modal .modal-right .nws-modal-body .what-wallet-mobile p {
        font-size: 14px;
        margin-bottom: 0;
        text-align: center;
        margin: auto;
    }

    .nws-modal-wrapper .nws-modal {
        width: 100%;
        display: block;
        overflow: auto;
        bottom: 0;
        height: 500px;
        background: var(--wallet-selector-mobile-bottom-section, var(--bottom-section));
        border-radius: 16px 16px 0px 0px;
    }

    .nws-modal-wrapper .nws-modal .modal-left {
        width: 100%;
        background-color: var(--wallet-selector-content-bg, var(--content-bg));
        height: auto;
        padding: 32px 12px;
    }

    .nws-modal-wrapper .nws-modal .modal-left .nws-modal-body {
        display: flex;
        overflow: auto;
    }

    .nws-modal-wrapper .nws-modal .modal-left .nws-modal-body .wallet-options-wrapper {
        display: flex;
        margin: auto;
    }

    .nws-modal-wrapper .nws-modal .modal-right {
        width: 100%;
        background-color: var(--wallet-selector-mobile-bottom-section, var(--bottom-section));
    }

    .nws-modal-wrapper .nws-modal .modal-right .nws-modal-header h3.middleTitle {
        text-align: center;
        font-size: 16px;
        margin: 4px auto;
    }

    .nws-modal-wrapper .nws-modal .modal-right .nws-modal-body .content {
        font-size: 14px;
        text-align: center;
        color: var(--mobile-text);
        margin: 0
    }

    .nws-modal-wrapper .nws-modal .modal-right .nws-modal-body {
        margin-top: 10px;
        padding: 0;
    }

    .nws-modal-wrapper .nws-modal .nws-modal-body button.middleButton {
        margin: 25px auto 12px auto;
    }

    .nws-modal-wrapper .nws-modal .modal-header {
        display: block;
        font-size: 18px;
        text-align: center;
    }

    .nws-modal-wrapper .nws-modal .nws-modal-header .close-button {
        position: absolute;
        right: 30px;
        top: 30px;
    }

    .nws-modal-wrapper .nws-modal .nws-modal-header h2 {
        font-size: 18px;
        text-align: center;
    }

    .nws-modal-wrapper .nws-modal .wallet-options-wrapper .description {
        display: none;
    }

    .nws-modal-wrapper .nws-modal .wallet-options-wrapper .options-list {
        display: flex;
        overflow-x: auto;
    }

    .nws-modal-wrapper .nws-modal .info {
        display: none;
        width: 90px;
    }

    .single-wallet {
        display: block;
        width: 85px;
    }

    .single-wallet.sidebar .icon {
        width: 56px;
        height: 56px;
        margin: auto;
    }

    .single-wallet.sidebar .content {
        width: auto;
    }

    .single-wallet .content .title {
        margin-top: 10px;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
    }

    .nws-modal-wrapper .nws-modal .wallet-home-wrapper .get-wallet-wrapper {
        margin-top: 0;
    }

    .nws-modal-wrapper .nws-modal .derivation-path-wrapper .enter-derivation-path .ledger-image,
    .nws-modal-wrapper .specify-path-wrapper .change-path-wrapper {
        margin-top: 30px;
        margin-bottom: 30px;
    }

    .nws-modal-wrapper .nws-modal .derivation-path-wrapper .enter-derivation-path .ledger-description > p {
        max-width: 450px;
        margin-left: auto;
        margin-right: auto;
    }

    ::-webkit-scrollbar {
        height: 4px;
        width: 4px;
        background: var(--backdrop-bg);

    }

    ::-webkit-scrollbar-thumb:horizontal {
        background: var(--close-button-fill-icon-color);
        border-radius: 10px;
    }
}
'''
'''--- src/css/theme.css ---
/* Pink Light scheme (Default) */
/* Can be forced with data-theme="light" */
[data-theme="light"],
:root:not([data-theme="dark"]) {
  --primary: #da0088;
  --primary-hover: #fb00bb;
  --primary-focus: rgba(216, 27, 96, 0.125);
  --primary-inverse: #FFF;
  --form-element-border-color: #DDD;
  --border-radius: 0;
}

/* Pink Dark scheme (Auto) */
/* Automatically enabled if user has Dark mode enabled */
@media only screen and (prefers-color-scheme: dark) {
  :root:not([data-theme="light"]) {
    --primary: #d81b60;
    --primary-hover: #e91e63;
    --primary-focus: rgba(216, 27, 96, 0.25);
    --primary-inverse: #FFF;
	--form-element-border-color: #DDD;
	--border-radius: 0;
  }
}

/* Pink Dark scheme (Forced) */
/* Enabled if forced with data-theme="dark" */
[data-theme="dark"] {
  --primary: #d81b60;
  --primary-hover: #e91e63;
  --primary-focus: rgba(216, 27, 96, 0.25);
  --primary-inverse: #FFF;
}

/* Pink (Common styles) */
:root {
  --form-element-active-border-color: var(--primary);
  --form-element-focus-color: var(--primary-focus);
  --switch-color: var(--primary-inverse);
  --switch-checked-background-color: var(--primary);
}

.web-share-fade-in-up > button {
	background: var(--primary) !important;
}
'''
'''--- src/img/my-near-wallet-icon.svg ---
<svg width="111" height="112" viewBox="0 0 111 112" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M78.0001 66.34V38.64C78.0001 33.12 72.4 27.71 65.48 27.71C61.7606 27.7749 58.2115 29.2805 55.5801 31.91L43.0901 19.58C46.4088 16.3502 50.3852 13.8743 54.7479 12.3211C59.1106 10.7679 63.757 10.1741 68.3701 10.58C84.6101 12.12 95.3101 25.27 95.3101 39.03V84.03L78.0001 66.34Z" fill="url(#paint0_linear_528_1332)"/>
<path d="M16.1001 28V73C16.1001 86.76 26.8101 99.91 43.0401 101.45C47.6532 101.856 52.2996 101.262 56.6623 99.7089C61.025 98.1557 65.0014 95.6798 68.3201 92.45L55.8301 80.12C53.1987 82.7495 49.6496 84.2552 45.9301 84.32C39.0101 84.32 33.4101 78.91 33.4101 73.39V45.89" fill="url(#paint1_linear_528_1332)"/>
<path d="M62.7999 51.19L95.2899 83.77V92.77C95.2899 95.72 92.3699 98.83 88.8599 98.89C86.8599 98.89 84.7698 97.32 83.4698 96.02L50.3999 62.78L16.1099 28.28V19.28C16.1099 16.33 19.0299 13.22 22.5399 13.16C24.5399 13.16 26.6299 14.73 27.9299 16.03L62.7999 51.19Z" fill="url(#paint2_linear_528_1332)"/>
<defs>
<linearGradient id="paint0_linear_528_1332" x1="50.9601" y1="9.49001" x2="108.59" y2="70.34" gradientUnits="userSpaceOnUse">
<stop offset="0.06" stop-color="#B6D7FE"/>
<stop offset="0.12" stop-color="#A6D4FC"/>
<stop offset="0.26" stop-color="#88CEF8"/>
<stop offset="0.38" stop-color="#76CAF6"/>
<stop offset="0.47" stop-color="#70C9F5"/>
<stop offset="0.73" stop-color="#18A0EC"/>
</linearGradient>
<linearGradient id="paint1_linear_528_1332" x1="21.3201" y1="35.88" x2="55.5801" y2="117.2" gradientUnits="userSpaceOnUse">
<stop offset="0.01" stop-color="#8537FF"/>
<stop offset="0.49" stop-color="#D095FE"/>
<stop offset="0.72" stop-color="#E9ADFF"/>
<stop offset="0.85" stop-color="#F8BCFF"/>
</linearGradient>
<linearGradient id="paint2_linear_528_1332" x1="98.3799" y1="97.71" x2="17.9099" y2="19.16" gradientUnits="userSpaceOnUse">
<stop stop-color="#35D7FD"/>
<stop offset="0.68" stop-color="#9A68FE"/>
<stop offset="1" stop-color="#B45DFF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/img/near-icon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><g id="Layer_1" data-name="Layer 1"><path d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>
'''
'''--- src/img/sender-icon.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<svg width="60px" height="108px" viewBox="0 0 60 108" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <title>symble-Color</title>
    <g id="定稿" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
        <g id="Sender-svg" transform="translate(-924.000000, -240.000000)" fill="#2E79DF">
            <g id="1" transform="translate(240.000000, 240.000000)">
                <path d="M731.030358,44.7388566 C732.635586,45.3251687 734.109757,46.091225 735.41929,47.0327914 C737.161902,48.2855715 738.612713,49.8504902 739.688121,51.720433 C740.241158,52.6820654 740.675161,53.6889918 740.99372,54.7317766 C741.315894,55.7822725 741.522009,56.8689832 741.616271,57.9821168 C742.282833,65.8085593 737.453761,74.9096997 728.859932,81.6705677 L728.471956,81.9722564 C726.977363,83.1204604 725.372095,84.1987928 723.665529,85.1879265 L684.307532,108 C683.15258,100.329149 685.283073,92.4505304 690.153902,86.3765836 C692.259598,83.7497243 694.877695,81.4608337 697.964392,79.6717703 L720.955703,66.345902 C724.089121,64.5297585 726.081012,61.4940724 726.67294,58.1919345 C727.144026,55.5661934 726.730102,52.7726869 725.301512,50.2886231 C724.152788,48.2911981 722.503123,46.7639035 720.600481,45.7730364 C718.437905,44.6451761 715.947781,44.2105553 713.495722,44.5661608 C713.634239,44.500585 713.773199,44.4372041 713.912602,44.3760182 C715.999127,43.8580037 718.060524,43.5286154 720.061104,43.3856575 C724.054093,43.1012096 727.805214,43.5592194 731.030358,44.7388566 Z M743.692468,0 C744.84742,7.67085123 742.716927,15.5494696 737.846098,21.6234164 C735.740402,24.2502757 733.122305,26.5391663 730.035608,28.3282297 L707.044297,41.654098 C703.910879,43.4702415 701.918988,46.5059276 701.32706,49.8080655 C700.855974,52.4338066 701.269898,55.2273131 702.698488,57.7113769 C703.847212,59.7088019 705.496877,61.2360965 707.399519,62.2269636 C709.562095,63.3548239 712.052219,63.7894447 714.504278,63.4338392 C714.365761,63.499415 714.226801,63.5627959 714.087398,63.6239818 C712.000873,64.1419963 709.939476,64.4713846 707.938896,64.6143425 C703.945907,64.8987904 700.194786,64.4407806 696.969642,63.2611434 C695.364414,62.6748313 693.890243,61.908775 692.58071,60.9672086 C690.838098,59.7144285 689.387287,58.1495098 688.311879,56.279567 C687.758842,55.3179346 687.324839,54.3110082 687.00628,53.2682234 C686.684106,52.2177275 686.477991,51.1310168 686.383729,50.0178832 C685.717167,42.1914407 690.546239,33.0903003 699.140068,26.3294323 L699.528044,26.0277436 C701.022637,24.8795396 702.627905,23.8012072 704.334471,22.8120735 L743.692468,0 Z" id="symble-Color"></path>
            </g>
        </g>
    </g>
</svg>
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>React Parcel Boilerplate</title>
    <link rel="stylesheet" href="https://unpkg.com/@picocss/pico@latest/css/pico.min.css">
    <link rel="stylesheet" href="./css/theme.css" />
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script type="module" src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import { AppProvider } from './state/app.js';
import { HashRouter } from "react-router-dom";

const container = document.getElementById('root');
const root = createRoot(container);
root.render(<AppProvider>
	<HashRouter>
		<App />
	</HashRouter>
</AppProvider>);

'''
'''--- src/state/app.js ---
import { State } from '../utils/state';

import { initNear } from './near';
import { get } from '../utils/store'

export const ROOT_KEY = '__ROOT_KEY'
export const contractId = 'v1.keypom.testnet';
export const receiverId = contractId;
// example
const initialState = {
	app: {
		mounted: false,
		menu: false,
	},
	drops: [],
	ftBalance: '0',
	nftBalance: [],
	rootKey: get(ROOT_KEY)
};

export const { appStore, AppProvider } = State(initialState, 'app');

// example app function
export const onAppMount = (message) => async ({ update, getState, dispatch }) => {
	update('app', { mounted: true });
	
	dispatch(initNear());
};

'''
'''--- src/state/near.js ---

export { accountSuffix, networkId, contractId, walletUrl } from '../../utils/near-utils';
import getConfig from '../../utils/config';
const { networkId, contractId } = getConfig();
import { getNear, getSelector, getAccount, viewFunction, functionCall as _functionCall } from '../utils/wallet-selector-compat'

export const initNear = () => async ({ update, getState }) => {

	const selector = await getSelector({
		networkId,
		contractId,
		onAccountChange: async (accountId) => {
			if (!accountId) {
				return update('app.loading', false)
			}
			console.log('Current Account:', accountId)
		}
	})

	const near = getNear()
	
	const account = await getAccount()
	if (account.accountId) {
		selector.accountId = account.accountId
		selector.functionCall = _functionCall
		selector.viewFunction = viewFunction
		selector.wallet = await selector.wallet()
		selector.signAndSendTransaction = selector.wallet.signAndSendTransaction
		selector.signAndSendTransactions = selector.wallet.signAndSendTransactions
	}

	await update('', { near, wallet: selector });
};

'''
'''--- src/utils/mobile.js ---
import copy from 'copy-to-clipboard';

export const share = (text) => {
	if (navigator.share && /mobile/gi.test(window.navigator.userAgent)) {
		navigator.share({
			text
		}).catch((e) => {
			copy(text);
			return { mobile: true, error: true };
		});
		return { mobile: true };
	} else {
		copy(text);
		return { mobile: false };
	}
};
'''
'''--- src/utils/state.js ---
import React, { createContext, useReducer } from 'react';

export const State = (initialState, prefix) => {
	let updatedState = initialState;
	const getState = () => updatedState;
	const store = createContext(initialState);
	const { Provider: InnerProvider } = store;

	const updateState = (state, newState, path = '') => {
		// console.log('updateState', state, path, newState) // debugging
		if (path.length === 0) {
			const retState = { ...state }
			if (newState === null) return null
			Object.entries(newState).map(([k, v]) => {
				retState[k] = state[k] && typeof v === 'object' && !Array.isArray(v) ?
					updateState(state[k], v) : v
			})
			return retState;
		}
		const pathArr = path.split('.');
		const first = pathArr[0];
		state = { ...state };
		if (!state[first]) {
			state[first] = {};
		}
		if (pathArr.length === 1) {
			state[first] = !!newState && typeof newState === 'object' && !Array.isArray(newState) ? {
				...state[first],
				...newState
			} : newState;
		} else {
			state[first] = {
				...state[first],
				...updateState(state[first], newState, pathArr.slice(1).join('.'))
			};
		}

		return state;
	};

	const Provider = ({ children }) => {
		const [state, dispatch] = useReducer((state, payload) => {
			const { path, newState } = payload;
			if (path === undefined) {
				return state;
			}
			updatedState = updateState(state, newState, path);
			return updatedState;
		}, initialState);

		const update = (path, newState) => {
			dispatch({ path, newState });
		};
		const wrappedDispatch = (fn) => fn({ update, getState, dispatch: wrappedDispatch });

		return <InnerProvider value={{ update, state, dispatch: wrappedDispatch }}>{children}</InnerProvider>;
	};

	if (prefix) {
		return {
			[prefix + 'Store']: store,
			[prefix.substr(0, 1).toUpperCase() + prefix.substr(1) + 'Provider']: Provider,
		};
	}
    
	return { store, Provider };
};

'''
'''--- src/utils/store.js ---
export const get = window.get = (k) => {
	const v = localStorage.getItem(k);
	if (!/\{|\[/.test(v?.charAt(0))) {
		return v;
	}
	try {
		return JSON.parse(v);
	} catch (e) {
		console.warn(e);
	}
};
export const set = window.set = (k, v) => localStorage.setItem(k, typeof v === 'string' ? v : JSON.stringify(v));
export const del = window.del = (k) => localStorage.removeItem(k);

export const file = (fn, data) => {
	// Dynamically create a File
	const file = new File([data], fn);
    // Create a link and set the URL using `createObjectURL`
    const link = document.createElement('a');
    link.style.display = 'none';
    link.href = URL.createObjectURL(file);
    link.download = file.name;

    // It needs to be added to the DOM so it can be clicked
    document.body.appendChild(link);
    link.click();

    // To make this work on Firefox we need to wait
    // a little while before removing it.
    setTimeout(() => {
        URL.revokeObjectURL(link.href);
        link.parentNode.removeChild(link);
    }, 0);
}
'''
'''--- src/utils/wallet-selector-compat.ts ---
import { setupWalletSelector } from "@near-wallet-selector/core";
import { setupModal } from "@near-wallet-selector/modal-ui";
import { setupMyNearWallet } from "@near-wallet-selector/my-near-wallet";
import { setupSender } from "@near-wallet-selector/sender";
import * as nearAPI from "near-api-js";
import BN from "bn.js";
import NearIcon from '../img/my-near-wallet-icon.svg'
import SenderIcon from '../img/sender-icon.svg'

import '../css/modal-ui.css'

const {
	Near, Account,
	keyStores: { BrowserLocalStorageKeyStore }
} = nearAPI

let network, contractId, selector, modal, wallet, init, accountId, near;

const networks = {
	mainnet: {
		networkId: 'mainnet',
		nodeUrl: 'https://rpc.mainnet.near.org',
		walletUrl: 'https://wallet.near.org',
		helperUrl: 'https://helper.mainnet.near.org'
	},
	testnet: {
		networkId: 'testnet',
		nodeUrl: 'https://rpc.testnet.near.org',
		walletUrl: 'https://wallet.testnet.near.org',
		helperUrl: 'https://helper.testnet.near.org'
	}
}

interface WalletMethodArgs {
	signerId?: string;
	contractId?: string;
	methodName?: string;
	args?: any;
	gas?: string | BN;
	attachedDeposit?: string | BN;
}

interface GetWalletSelectorArgs {
	networkId: string,
	contractId: string | null,
	onAccountChange: (accountId: string | null) => void;
}

export const getSelector = async ({
	networkId,
	contractId: _contractId,
	onAccountChange,
}: GetWalletSelectorArgs) => {
	if (init) return selector;
	init = true;

	network = networkId;
	contractId = _contractId;

	selector = await setupWalletSelector({
		network,
		debug: true,
		modules: [
			setupMyNearWallet({
				iconUrl: NearIcon,
			}),
			setupSender({
				iconUrl: SenderIcon
			}),
		],
	});

	selector.store.observable.subscribe(async (state) => {
		const newAccountId = state.accounts[0]?.accountId
		if (newAccountId && newAccountId !== accountId) {
			accountId = newAccountId
			wallet = await selector.wallet()
			onAccountChange(accountId);
		}
	})

    modal = setupModal(selector, { contractId });

	let defaultAccountId
	try {
		wallet = await selector.wallet()
		defaultAccountId = (await wallet?.getAccounts())?.[0]?.accountId;
	} catch(e) {
		if (!/No wallet/.test(e)) throw e
		console.warn(e)
		onAccountChange(null)
	}
	if (defaultAccountId) {
		accountId = defaultAccountId;
	}
	// await onAccountChange(accountId);

	selector.signIn = () => {
		modal.show()
	}

	selector.signOut = async () => {
		await wallet.signOut().catch((err) => {
			console.log("Failed to disconnect wallet-selector");
			console.error(err);
		});
		window.location.reload()
	}

	return selector;
}

export const getNear = () => {
	if (!near) {
		near = new Near({
			...networks[network],
			deps: { keyStore: new BrowserLocalStorageKeyStore() },
		});
	}
	return near;
};

export const getAccount = async (viewAsAccountId: string | null) => {
	near = getNear();
	return new Account(near.connection, viewAsAccountId || accountId);
};

export const viewFunction = async ({
	contractId: _contractId,
	methodName,
	args = {},
}: WalletMethodArgs) => {
	if (!_contractId && !contractId) {
		throw new Error("viewFunction error: contractId undefined");
	}
	if (!methodName) {
		throw new Error("viewFunction error: methodName undefined");
	}
	const account = await getAccount(network);
	return account.viewFunction(_contractId || contractId, methodName, args)
};

export const functionCall = async ({
	contractId: _contractId,
	methodName,
	args,
	gas,
	attachedDeposit,
}: WalletMethodArgs) => {
	if (!selector) {
		throw new Error("functionCall error: selector not initialized");
	}
	if (!wallet) {
		throw new Error("functionCall error: no wallet selected");
	}
	if (!_contractId && !contractId) {
		throw new Error("functionCall error: contractId undefined");
	}
	if (!methodName) {
		throw new Error("functionCall error: methodName undefined");
	}

	const res = await wallet.signAndSendTransaction({
		receiverId: _contractId || contractId,
		actions: [
			{
				type: "FunctionCall",
				params: {
					methodName,
					args: args || '',
					gas: gas?.toString() || "30000000000000",
					deposit: attachedDeposit?.toString() || undefined,
				},
			},
		],
	});
	return res
};

'''
'''--- test/contract.test.js ---
const test = require('ava');
const {
	getAccount, init,
	recordStart, recordStop,
} = require('./test-utils');
const getConfig = require("../utils/config");
const {
	contractId,
	gas,
	attachedDeposit,
} = getConfig();

// test.beforeEach((t) => {
// });

let contractAccount, event_name, aliceId, bobId, alice, bob;

test('contract is deployed', async (t) => {
	contractAccount = await init();

	t.is(contractId, contractAccount.accountId);
});

test('users initialized', async (t) => {
	aliceId = 'alice.' + contractId;
	bobId = 'bob.' + contractId;
	alice = await getAccount(aliceId);
	bob = await getAccount(bobId);

	t.true(true);
});

test('create an event', async (t) => {
	event_name = 'event-' + Date.now();

	const res = await contractAccount.functionCall({
		contractId,
		methodName: 'create_event',
		args: {
			event_name,
		},
		gas,
		attachedDeposit,
	});

	t.is(res?.status?.SuccessValue, '');
});

test('get events', async (t) => {
	const res = await contractAccount.viewFunction(
		contractId,
		'get_events',
		{}
	);

	// console.log(res)

	t.true(res.length >= 1);
});

test('create a connection', async (t) => {

	await recordStart(contractId);
	
	const res = await alice.functionCall({
		contractId,
		methodName: 'create_connection',
		args: {
			event_name,
			new_connection_id: bobId,
		},
		gas,
		attachedDeposit,
	});

	await recordStop(contractId);

	t.is(res?.status?.SuccessValue, '');
});

test('create another connection', async (t) => {

	const carolId = 'car.' + contractId;

	await recordStart(contractId);

	const res = await alice.functionCall({
		contractId,
		methodName: 'create_connection',
		args: {
			event_name,
			new_connection_id: carolId,
		},
		gas,
		attachedDeposit,
	});
	
	await recordStop(contractId);

	t.is(res?.status?.SuccessValue, '');
});

test('get connections', async (t) => {
	const res = await alice.viewFunction(
		contractId,
		'get_connections',
		{
			event_name,
			network_owner_id: aliceId,
		}
	);

	console.log(res);

	t.true(res.length >= 1);
});
'''
'''--- test/test-utils.js ---
const fs = require('fs');
const BN = require('bn.js');
const nearAPI = require('near-api-js');
const { 
	KeyPair,
	utils: { format: {
		formatNearAmount
	} }
} = nearAPI;
const { connection, keyStore, contractAccount } = require('../utils/near-utils');
const getConfig = require("../utils/config");
const {
	networkId, contractId, gas,
	NEW_ACCOUNT_AMOUNT,
} = getConfig();

const init = async (owner_id = contractId) => {
	/// try to call new on contract, swallow e if already initialized
	try {
		await contractAccount.functionCall({
			contractId,
			methodName: 'new',
			args: {
				owner_id
			},
			gas
		});
	} catch (e) {
		console.log('contract already initialized');
		if (!/initialized/.test(e.toString())) {
			throw e;
		}
	}
	return contractAccount;
};

const getAccount = async (accountId, fundingAmount = NEW_ACCOUNT_AMOUNT, secret) => {
	const account = new nearAPI.Account(connection, accountId);
	try {
		const secret = await fs.readFileSync(`./neardev/${accountId}`, 'utf-8');
		const newKeyPair = KeyPair.fromString(secret);
		keyStore.setKey(networkId, accountId, newKeyPair);
		await account.state();
		return account;
	} catch(e) {
		if (!/no such file|does not exist/.test(e.toString())) {
			throw e;
		}
	}
	return await createAccount(accountId, fundingAmount, secret);
};

const createAccount = async (accountId, fundingAmount = NEW_ACCOUNT_AMOUNT, secret) => {
	const newKeyPair = secret ? KeyPair.fromString(secret) : KeyPair.fromRandom('ed25519');
	fs.writeFileSync(`./neardev/${accountId}` , newKeyPair.toString(), 'utf-8');
	await contractAccount.createAccount(accountId, newKeyPair.publicKey, fundingAmount);
	keyStore.setKey(networkId, accountId, newKeyPair);
	return new nearAPI.Account(connection, accountId);
};

/// debugging

const getAccountBalance = (accountId) => (new nearAPI.Account(connection, accountId)).getAccountBalance();
const getAccountState = (accountId) => (new nearAPI.Account(connection, accountId)).state();
const stateCost = (balanceBefore, balanceAfter) => formatNearAmount(new BN(balanceAfter.stateStaked).sub(new BN(balanceBefore.stateStaked)).toString(), 8);
const bytesUsed = (stateBefore, stateAfter) => parseInt(stateAfter.storage_usage, 10) - parseInt(stateBefore.storage_usage);

/// analyzing

let data = {};
const recordStart = async (accountId) => {
	data[accountId] = {
		balance: await getAccountBalance(accountId),
		state: await getAccountState(accountId),
	};
};

const recordStop = async (accountId) => {
	const before = data[accountId];
	const after = {
		balance: await getAccountBalance(accountId),
		state: await getAccountState(accountId),
	};

	console.log('\nAnalysis:\n');
	console.log('State stake:', stateCost(before.balance, after.balance));
	console.log('Bytes used:', bytesUsed(before.state, after.state));
	console.log('\n');
};

module.exports = {
	init,
	getAccount,
	createAccount,
	getAccountBalance,
	getAccountState,
	stateCost,
	bytesUsed,
	recordStart,
	recordStop,
};
'''
'''--- utils/config.js ---
const contractName = 'v1.keypom.testnet';

module.exports = function getConfig(network = 'testnet') {
	let config = {
		networkId: "testnet",
		nodeUrl: "https://rpc.testnet.near.org",
		walletUrl: "https://wallet.testnet.near.org",
		helperUrl: "https://helper.testnet.near.org",
		contractName,
	};

	switch (network) {
	case 'testnet':
		config = {
			explorerUrl: "https://explorer.testnet.near.org",
			...config,
			GAS: "200000000000000",
			gas: "200000000000000",
			attachedDeposit: '10000000000000000000000', // 0.01 N (1kb storage)
			NEW_ACCOUNT_AMOUNT: '1000000000000000000000000',
			NEW_CONTRACT_AMOUNT: '5000000000000000000000000',
			contractId: contractName,
			isBrowser: new Function("try {return this===window;}catch(e){ return false;}")()
		};
		break;
	}

	return config;
};

'''
'''--- utils/near-utils.js ---
const fs = require("fs");
const nearAPI = require("near-api-js");
const getConfig = require("./config");
const { nodeUrl, walletUrl, networkId, contractId, isBrowser } = getConfig();

const {
	keyStores: { InMemoryKeyStore, BrowserLocalStorageKeyStore },
	Near,
	Account,
	Contract,
	KeyPair,
	utils: {
		format: { parseNearAmount },
	},
} = nearAPI;

let credentials, keyStore;

if (isBrowser) {
	keyStore = new BrowserLocalStorageKeyStore();
} else {
	/// nodejs (for tests)
	try {
		console.log(`Loading Credentials: ${process.env.HOME}/.near-credentials/${networkId}/${contractId}.json`);
		credentials = JSON.parse(
			fs.readFileSync(
				`${process.env.HOME}/.near-credentials/${networkId}/${contractId}.json`
			)
		);
	} catch(e) {
		console.warn(`Loading Credentials: ./neardev/${networkId}/${contractId}.json`);
		credentials = JSON.parse(
			fs.readFileSync(
				`./neardev/${networkId}/${contractId}.json`
			)
		);
	}
	keyStore = new InMemoryKeyStore();
	keyStore.setKey(
		networkId,
		contractId,
		KeyPair.fromString(credentials.private_key)
	);
}

const near = new Near({
	networkId,
	nodeUrl,
	walletUrl,
	deps: { keyStore },
});
const { connection } = near;
const contractAccount = new Account(connection, contractId);

module.exports = {
	near,
	credentials,
	keyStore,
	connection,
	contractId,
	contractAccount,
};

'''