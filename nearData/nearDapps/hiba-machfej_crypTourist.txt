*GitHub Repository "hiba-machfej/crypTourist"*

'''--- README.md ---
# Thanks

Say "thanks!" to other students of the NCD by calling _their_ instance of this contract.

You can optionally attach tokens to your message, or even leave an anonymous tip.

Of course keep in mind that your signing account will be visible on the blockchain via NEAR Explorer even if you send an anonymous message.

## Contract

```ts
// ------------------------------------
// contract initialization
// ------------------------------------

/**
 * initialize contract with owner ID and other config data
 *
 * (note: this method is called "constructor" in the singleton contract code)
 */
function init(owner: AccountId, allow_anonymous: bool = true): void

// ------------------------------------
// public methods
// ------------------------------------

/**
 * give thanks to the owner of the contract
 * and optionally attach tokens
 */
function say(message: string, anonymous: bool): bool

// ------------------------------------
// owner methods
// ------------------------------------

/**
 * show all messages and users
 */
function list(): Array<Message>

/**
 * generate a summary report
 */
function summarize(): Contract

/**
 * transfer received funds to owner account
 */
function transfer(): void
```

## Usage

### Development

To deploy the contract for development, follow these steps:

1. clone this repo locally
2. run `./scripts/1.dev-deploy.sh` to deploy the contract (this uses `near dev-deploy`)

**Your contract is now ready to use.**

To use the contract you can do any of the following:

_Public scripts_

```sh
2.say-thanks.sh         # post a message saying thank you, optionally attaching NEAR tokens
2.say-anon-thanks.sh    # post an anonymous message (otherwise same as above)
```

_Owner scripts_

```sh
o-report.sh             # generate a summary report of the contract state
o-transfer.sh           # transfer received funds to the owner account
```

### Production

It is recommended that you deploy the contract to a subaccount under your MainNet account to make it easier to identify you as the owner

1. clone this repo locally
2. run `./scripts/x-deploy.sh` to rebuild, deploy and initialize the contract to a target account

   requires the following environment variables
   - `NEAR_ENV`: Either `testnet` or `mainnet`
   - `OWNER`: The owner of the contract and the parent account.  The contract will be deployed to `thanks.$OWNER`

3. run `./scripts/x-remove.sh` to delete the account

   requires the following environment variables
   - `NEAR_ENV`: Either `testnet` or `mainnet`
   - `OWNER`: The owner of the contract and the parent account.  The contract will be deployed to `thanks.$OWNER`

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": ["src/crypTourist"]
}

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html>

<head>
  <meta charset="UTF-8" />
  <title>Add React in One Minute</title>
</head>

<body>

  <h2>Add React in One Minute</h2>
  <p>This page demonstrates using React with no build tooling.</p>
  <p>React is loaded as a script tag.</p>

  <!-- We will put our React component inside this div. -->
  <div id="like_button_container"></div>

  <!-- Load React. -->
  <!-- Note: when deploying, replace "development.js" with "production.min.js". -->
  <script src="https://unpkg.com/react@16/umd/react.development.js" crossorigin></script>
  <script src="https://unpkg.com/react-dom@16/umd/react-dom.development.js" crossorigin></script>

  <!-- Load our React component. -->
  <script src="index.js"></script>

</body>

</html>
'''
'''--- frontend/index.js ---
'use strict';

const e = React.createElement;
// import getConfig from './config.js';
// import * as nearAPI from 'near-api-js';

class LikeButton extends React.Component {
  constructor(props) {
    super(props);
    this.state = { liked: false };
  }

  render() {
    if (this.state.liked) {
      return 'You liked this.';
    }

    return e(
      'button',
      { onClick: () => this.setState({ liked: true }) },
      'Like'
    );
  }
}

const domContainer = document.querySelector('#like_button_container');
ReactDOM.render(e(LikeButton), domContainer);

'''
'''--- package.json ---
{
  "name": "starter--assemblyscript",
  "version": "0.0.1",
  "description": "Starter project for writing AssemblyScript contracts for NEAR Protocol",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test:unit'",
    "asp": "asp --verbose --nologo",
    "test:unit": "yarn asp -f unit.spec",
    "build": "asb --target debug",
    "build:release": "asb",
    "test": "yarn build:release && yarn test:unit && yarn test:simulate",
    "test:simulate": "cargo test -- --nocapture",
    "clean": "rm -rf ./build && rm -rf ./neardev && rm -rf ./target"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo "deleting $CONTRACT and setting $OWNER as beneficiary"
echo
near delete $CONTRACT $OWNER

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/crypTourist.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=<your own account>'
echo
echo

exit 0

'''
'''--- scripts/2.addPlace-getPlace.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1

echo
echo 'About to call addPlace() on the contract'
echo near call \$CONTRACT addPlace '{"name":"Galata Tower", "description":"abc","image":"abc","max_radius":4 }' --account_id \$OWNER
echo
echo \$CONTRACT is $CONTRACT
echo
# near call $CONTRACT say '{"message":"'$1'", "anonymous": true}' --account_id $SPEAKER --amount $2
near call $CONTRACT addPlace '{"name":"Galata Tower", "description":"abc","image":"abc","max_radius":4 }' --accountId $OWNER

echo
echo
echo
echo 'About to call findPlace() on the contract'
echo near call \$CONTRACT findPlace --account_id \$OWNER
near call $CONTRACT findPlace '{"placeId":0}' --accountId $OWNER

echo
echo
echo
echo 'About to call changePlaceName() on the contract'
echo near call \$CONTRACT changePlaceName --account_id \$OWNER
near call $CONTRACT changePlaceName '{"placeId":1, "placeName":"Hagia Sophia"}' --accountId $OWNER

echo
echo
echo 'About to call changeMaxRadius() on the contract'
echo near call \$CONTRACT changeMaxRadius --account_id \$OWNER
near call $CONTRACT changeMaxRadius '{"placeId":1, "max_radius": 8}' --accountId $OWNER

echo
echo 'About to call getPlaces() on the contract'
echo near call \$CONTRACT getPlaces --account_id \$OWNER
echo
echo
near call $CONTRACT getPlaces --accountId $OWNER

'''
'''--- scripts/2.say-thanks.sh ---
#!/usr/bin/env bash
set -e

[ -z "$NEAR_ENV" ] && echo "Missing \$NEAR_ENV environment variable" && exit 1
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$SPEAKER" ] && echo "Missing \$SPEAKER environment variable" && exit 1

echo
echo 'About to call say() on the contract'
echo near call \$CONTRACT say '{"message":"$1"}' --account_id \$SPEAKER --amount \$1
echo
echo \$CONTRACT is $CONTRACT
echo \$SPEAKER is $SPEAKER
echo \$1 is [ $1 ] '(the message)'
echo \$2 is [ $2 NEAR ] '(optionally attached amount)'
echo
near call $CONTRACT say '{"message":"'"$1"'"}' --account_id $SPEAKER --amount $2

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder support a simple demonstration of the contract.

It uses the following setup:

```txt
┌───────────────────────────────────────┬───────────────────────────────────────┐
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                   A                   │                   B                   │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
└───────────────────────────────────────┴───────────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  ```

- Commands

  _Owner scripts_
  ```sh
  1.dev-deploy.sh         # cleanup, compile and deploy contract
  o-report.sh             # generate a summary report of the contract state
  o-transfer.sh           # transfer received funds to the owner account
  ```

  _Public scripts_
  ```sh
  2.say-thanks.sh         # post a message saying thank you, optionally attaching NEAR tokens
  2.say-anon-thanks.sh    # post an anonymous message (otherwise same as above)
  ```
### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- scripts/o-report.sh ---
#!/usr/bin/env bash
set -e

[ -z "$NEAR_ENV" ] && echo "Missing \$NEAR_ENV environment variable" && exit 1
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

echo "These are the environment variables being used:"
echo
echo "CONTRACT is [ $CONTRACT ]"
echo "OWNER is [ $OWNER ]"
echo
echo

echo "--------------------------------------------"
echo Report for $CONTRACT
echo "--------------------------------------------"
# what are the 10 most recent messages? -> Array<Message>
echo "near call \$CONTRACT list '{}' --accountId \$OWNER"
near call $CONTRACT list '{}' --accountId $OWNER
echo

# what is the state of this contract? -> bool
echo "near call \$CONTRACT summarize '{}' --accountId \$OWNER"
near call $CONTRACT summarize '{}' --accountId $OWNER
echo
echo

'''
'''--- scripts/o-transfer.sh ---
#!/usr/bin/env bash
set -e

[ -z "$NEAR_ENV" ] && echo "Missing \$NEAR_ENV environment variable" && exit 1
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

echo
echo 'About to call transfer() on the contract'
echo near call \$CONTRACT transfer --account_id \$OWNER
echo
echo \$CONTRACT is $CONTRACT
echo \$OWNER is $OWNER
echo
near call $CONTRACT transfer --account_id $OWNER

'''
'''--- scripts/x-deploy.sh ---
#!/usr/bin/env bash

[ -z "$NEAR_ENV" ] && echo "Missing \$NEAR_ENV environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

# exit on first error after this point
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "creating a subaccount under $OWNER"
echo
near create-account thanks.$OWNER --masterAccount=$OWNER --initialBalance "1"

echo --------------------------------------------
echo
echo "deploying and initializing the contract in a single transaction"
echo
near deploy --accountId=thanks.$OWNER --wasmFile=./build/release/thanks.wasm --initFunction 'init' --initArgs '{"owner":"'$OWNER'"}'

exit 0

'''
'''--- scripts/x-remove.sh ---
#!/usr/bin/env bash

[ -z "$NEAR_ENV" ] && echo "Missing \$NEAR_ENV environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

# exit on first error after this point
set -e

echo "deleting thanks.$OWNER and setting $OWNER as beneficiary"
echo
near delete thanks.$OWNER $OWNER

'''
'''--- src/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/crypTourist/__tests__/README.md ---
## Unit tests

Unit tests can be run from the top level folder using the following command:

```
yarn test:unit
```

'''
'''--- src/crypTourist/__tests__/index.unit.spec.ts ---

'''
'''--- src/crypTourist/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/crypTourist/assembly/index.ts ---
import { PlaceId, Place, places, PlaceName } from './models';
import { u128, Context, logging } from 'near-sdk-as';

export function addPlace(
	name: PlaceName,
	description: string,
	image: string,
	// geolocation: Geolocation,
	max_radius: u16
): void {
	const place = new Place(
		name,
		description,
		image,
		// geolocation,
		max_radius
	);

	places.push(place);
}

export function changePlaceName(placeId: u32, placeName: PlaceName): void {
	assert(placeId >= 0, 'Place ID must be >= 0');
	const place = Place.find(placeId);
	logging.log(place.name);
	place.name = placeName;
	logging.log(place.name);
	place.save();
}

export function changeMaxRadius(placeId: u32, max_radius: u16): void {
	assert(placeId >= 0, 'Place ID must be >= 0');
	const place = Place.find(placeId);
	logging.log(place.max_radius);
	place.max_radius = max_radius;
	logging.log(place.max_radius);
	place.save();
}

export function getPlaces(): Place[] {
	return Place.all();
}
export function findPlace(placeId: u32): Place {
	return Place.find(placeId);
}
// "name":"Galata Tower", "description":"abc","image":"abc","price":3,"max_radius":4

// near call addPlace '{"name":"Galata Tower", "description":"abc","image":"abc","price":3,"max_radius":4 }' --accountId

// near call $CONTRACT addPlace '{"name":"Galata Tower", "description":"abc","image":"abc","max_radius":4 }' --accountId hiba.testnet

export function remove(placeId: PlaceId): Place {
	// find the place
	const place = Place.find(placeId);
	// mark it as hidden somehow
	place.hide()
	// save it
	place.save()
	// return it
	return place
}

'''
'''--- src/crypTourist/assembly/models.ts ---
import { context, u128, PersistentVector } from 'near-sdk-as';

type AccountId = string;
export type PlaceId = i32; // index in places Vector
export type PlaceName = string;
const MAX_PLACES = 10;
// export type Geolocation = number

@nearBindgen
export class Place {

	owner: string;
	private id: PlaceId;
	private isHidden: bool = false;

	constructor(
		public name: PlaceName,
		public description: string,
		public image: string,
		public max_radius: u16,
		public price: u128 = u128.One,
		// public geolocation: Geolocation,
		public max_owners: u32 = 10,
		public total_owners: u32 = 0
	) {
		this.owner = context.sender;
	}

	static all(): Place[] {
		const numPlaces = min(MAX_PLACES, places.length);
		const startIndex = places.length - numPlaces;
		const result = new Array<Place>(numPlaces);
		for (let i = 0; i < numPlaces; i++) {
			result[i] = places[i + startIndex];
		}
		return result;
	}

	static find(placeId: PlaceId): Place {
		assert(placeId >= 0, 'Place ID must be >= 0');
		assert(placeId < places.length, 'Place ID must be valid');
		const place = places[placeId];
		place.id = placeId;
		return place;
	}

	save(): void {
		places[this.id] = this;
	}

	hide(): void {
		this.isHidden = true
	}
}

export const places = new PersistentVector<Place>('p');

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''