*GitHub Repository "amirsaranBIH/nearkick"*

'''--- .github/workflows/integrate.yml ---
name: Nearkick CI

on:
  pull_request:
    branches: [main, dev]

jobs:
  test_pull_request:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
        with:
          node-version: 12
      - run: npm run contract:test

'''
'''--- README.md ---
# nearkick

Decentralized kickstarter app using NEAR Protocol.

# How to build and deploy for development

- `npm run deploy:contract:dev` in root directory to build and deploy contract
- `cd client` -> `npm install` -> `npm start` to install and start React development server

'''
'''--- client/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- client/package.json ---
{
  "name": "client",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "assert": "^2.0.0",
    "buffer": "^6.0.3",
    "ipfs-http-client": "^55.0.0",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-qr-code": "^2.0.3",
    "react-qr-reader": "^2.2.1",
    "react-responsive-carousel": "^3.2.22",
    "react-router-dom": "^6.2.1",
    "react-scripts": "5.0.0",
    "react-toast-notifications": "^2.5.1",
    "web-vitals": "^2.1.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- client/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#2ca7f5" />
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css?family=BioRhyme"
    />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Nearkick - Decentralized kickstarter application</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- client/public/manifest.json ---
{
  "short_name": "Nearkick",
  "name": "Nearkick Kickstarter",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#f50303",
  "background_color": "#ffffff"
}

'''
'''--- client/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- client/src/App.css ---
.header {
  background-color: var(--red);
  height: var(--header-height);
}

.header .navigation-links li:nth-child(2) {
  height: var(--header-height);
}

.header .brand-logo {
  height: var(--header-height);
}

.header .navigation-links > ul {
  list-style-type: none;
  display: flex;
  align-items: center;
  justify-content: center;
  height: var(--header-height);
}

.header .navigation-links > ul > li + li {
  margin-left: 3em;
}

.header .navigation-links > ul > li a,
.header .navigation-links > ul > li.a {
  color: white;
  cursor: pointer;
  font-weight: bold;
}

.header .wallet-button {
  position: relative;
}

.header .wallet-button span {
  padding: 0.75em 1.25em;
  background-color: black;
  color: white;
  cursor: pointer;
}

.header .wallet-connect {
  --btn-height: 50px;
  position: absolute;
  right: calc(var(--btn-height) / 2);
  list-style: none;
  top: calc((var(--header-height) / 2) - (var(--btn-height) / 2));
}

.header .wallet-connect span {
  height: var(--btn-height);
  display: block;
  line-height: calc(var(--btn-height) / 2);
}

.wallet-button-dropdown {
  list-style: none;
  position: absolute;
  top: 110%;
  right: 0;
  background-color: #fff;
  width: 100%;
  border: 1px solid #ccc;
}

.wallet-button-dropdown li {
  padding: 0.75em 1.25em;
  cursor: pointer;
}

.wallet-button-dropdown li + li {
  border-top: 1px solid #ccc;
}

.main {
  max-width: 1200px;
  min-height: calc(100vh - var(--header-height));
  background-color: #fff;
  margin: 0 auto;
  padding: 2em;
}

.mobile-navigation {
  position: absolute;
  top: 0;
  right: 0;
  display: none;
  flex-direction: column;
  align-items: end;
}

.mobile-navigation .mobile-navigation-button {
  display: flex;
  height: var(--header-height);
  width: var(--header-height);
  background-color: var(--yellow);
  cursor: pointer;
}

.mobile-navigation .mobile-navigation-button span {
  margin: auto;
}

.mobile-navigation .mobile-navigation-dropdown {
  background-color: white;
  list-style: none;
  z-index: 10000;
}

.mobile-navigation .mobile-navigation-dropdown li {
  border: 1px solid #ccc;
  cursor: pointer;
}

.mobile-navigation .mobile-navigation-dropdown li a,
.mobile-navigation .mobile-navigation-dropdown li span {
  display: block;
  height: 100%;
  width: 100%;
  padding: 0.75em 1.25em;
}

.loading {
  height: 10px;
  width: 100%;
  background-color: var(--yellow);
  position: fixed;
  overflow-x: hidden;
  top: 0;
  left: 0;
  z-index: 20000;
}

.loading .loading-bar {
  height: 100%;
  width: 20%;
  background-color: var(--blue);
  position: absolute;
  animation: loading 1.5s infinite linear;
}

@keyframes loading {
  0% {
    left: -20%;
  }
  100% {
    left: 100%;
  }
}

@media only screen and (max-width: 992px) {
  .header .navigation-links > ul li:first-child,
  .header .navigation-links > ul li:last-child {
    display: none;
  }

  .header .navigation-links > ul li {
    margin-left: 0 !important;
  }

  .header .navigation-links > ul {
    justify-content: start;
  }

  .wallet-connect {
    display: none;
  }

  .mobile-navigation {
    display: flex;
  }

  .main {
    padding: 1em;
  }
}

'''
'''--- client/src/App.js ---
import "./App.css";
import { useContext } from "react";
import {
  BrowserRouter as Router,
  Routes,
  Route,
  Navigate,
} from "react-router-dom";

import Home from "./components/Home/Home";
import Projects from "./components/Projects/Projects";
import About from "./components/About/About";
import Dashboard from "./components/Dashboard/Dashboard";
import Project from "./components/Project/Project";
import CreateProject from "./components/Dashboard/components/CreateProject/CreateProject";
import EditProject from "./components/Dashboard/components/EditProject/EditProject";

import WalletContext from "./store/wallet-context";
import LoadingContext from "./store/loading-context";

import Header from "./components/Header/Header";

function App() {
  const walletContext = useContext(WalletContext);
  const loadingContext = useContext(LoadingContext);

  return (
    <Router>
      <div>
        <Header />
        {loadingContext.loading && (
          <div className="loading">
            <div className="loading-bar"></div>
          </div>
        )}
        <main className="main">
          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/projects" element={<Projects />} />
            <Route path="/about" element={<About />} />
            <Route path="/project/:id" element={<Project />} />
            <Route
              path="/dashboard"
              element={
                walletContext.isSignedIn ? <Dashboard /> : <Navigate to="/" />
              }
            />
            <Route
              path="/dashboard/create-project"
              element={
                walletContext.isSignedIn ? (
                  <CreateProject />
                ) : (
                  <Navigate to="/" />
                )
              }
            />
            <Route
              path="/dashboard/edit-project/:id"
              element={
                walletContext.isSignedIn ? <EditProject /> : <Navigate to="/" />
              }
            />
          </Routes>
        </main>
      </div>
    </Router>
  );
}

export default App;

'''
'''--- client/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- client/src/components/About/About.css ---
.about p {
  margin-bottom: 1em;
}

.about a {
  color: var(--blue);
  text-decoration: underline;
}

.faq details + details {
  margin-top: 1em;
}

.faq details p {
  margin-top: 0.5em;
}

.faq summary {
  cursor: pointer;
}

'''
'''--- client/src/components/About/About.js ---
import "./About.css";

function About() {
  return (
    <div className="about">
      <h1 className="h1">About Nearkick</h1>
      <p>
        Nearkick is a decentralized application that allows you to create and
        kickstart your own projects. The goal is to create a platform that
        allows anyone to create and kickstart their own projects and anyone to
        fund them.
      </p>
      <p>
        When supporters of a project reach the goal, the project will be marked
        as completed. All the supporters will be added to a list of supporters
        of the project. Later they can verify that they are a supporter of the
        project. If the project is not funded by the marked deadline, the
        supporters will be refunded the amount they have contributed. The
        project will be closed and the supporters will be notified.
      </p>
      <p>
        Nearkick is a loosely-knit community ecosystem which seeks to replace
        the systems which are currently in place. We provide a decentralized
        platform to create and fund their own projects. The goal of Nearkick is
        to create a platform that allows anyone to create and kickstart their
        own projects and anytime someone wants to fund them.
      </p>
      <p>
        Nearkick is designed for people who want to start a project, no matter
        the purpose. Projects are found and funded on Nearkick by people on the
        platform. Users can also contribute to the projects they are interested
        in, which allows project creators to gain value and become more
        successful.
      </p>
      <p>
        This project is a entry into the Near MetaBUILD Hackathon (
        <a
          href="https://metabuild.devpost.com"
          target="_blank"
          rel="noreferrer"
        >
          https://metabuild.devpost.com
        </a>
        ). I built this on my own in less than two months. This project is open
        source. You can check out the code here:{" "}
        <a
          href="https://github.com/amirsaranBIH/nearkick"
          target="_blank"
          rel="noreferrer"
        >
          https://github.com/amirsaranBIH/nearkick
        </a>
      </p>
      <div className="faq">
        <h2 className="h2">Frequently Asked Questions</h2>
        <div>
          <details>
            <summary>What is Nearkick?</summary>
            <p>
              Nearkick is a decentralized application that allows you to create
              and kickstart your own projects.
            </p>
          </details>
          <details>
            <summary>How does it work?</summary>
            <p>
              Nearkick uses a blockchain to store all the information about the
              project. The data is decentralized and can be accessed by anyone.
              The project can be created and funded by anyone and anyone can
              kickstart the project.
            </p>
          </details>
          <details>
            <summary>
              How can I get my rewards after a project is funded?
            </summary>
            <p>
              If the project is a physical product, the project creator will
              scan your QR code that is located in your dashboard. After that if
              you are a supporter of the project you will be able to collect
              your reward. If the project is a digital product, the project
              creator will have a verification page that will call our contract
              method to verify that you are a supporter of the project. After
              that if you are a supporter of the project you will be able to
              collect your reward.
            </p>
          </details>
          <details>
            <summary>What happens if a project doesn't reach its goal?</summary>
            <p>
              If the project is not funded by the marked deadline, the
              supporters will automatically be refunded the amount they have
              contributed. The project will be closed and will no longer be
              elegible for supporting.
            </p>
          </details>
        </div>
      </div>
    </div>
  );
}

export default About;

'''
'''--- client/src/components/Dashboard/Dashboard.css ---
.dashboard > div + div {
  margin-top: 3em;
}

.dashboard-projects ul {
  list-style-type: none;
  margin: 1em 0;
}

.dashboard-projects ul li {
  border-left: 10px solid var(--red);
  padding: 0.75em;
}

.dashboard-projects ul li:hover {
  background-color: #f1f1f1;
}

.dashboard-projects ul li + li {
  margin-top: 1em;
}

.dashboard-project-details {
  display: flex;
  justify-content: space-between;
}

.dashboard-project-details-second {
  min-width: max-content;
}

.dashboard-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

.dashboard-header .h1 {
  margin-bottom: 0;
}

.dashboard-no-projects a {
  color: var(--blue);
  text-decoration: underline;
}

.my-qr-code {
  margin-top: 1em;
  text-align: center;
}

@media only screen and (max-width: 992px) {
  .dashboard-project-details {
    flex-direction: column;
  }

  .dashboard-project-details .dashboard-project-details-second {
    display: flex;
    flex-wrap: wrap;
    margin-top: 0.5em;
    min-width: initial;
  }

  .dashboard-project-details .dashboard-project-details-second p {
    flex-basis: 50%;
  }
}

@media only screen and (max-width: 768px) {
  .dashboard-project-details .dashboard-project-details-second {
    display: none;
  }

  .dashboard-header .h1 {
    margin-right: 0.5em;
  }

  .dashboard-header .h1 span {
    display: none;
  }
}

'''
'''--- client/src/components/Dashboard/Dashboard.js ---
import "./Dashboard.css";
import { useState, useContext, useEffect } from "react";
import { Link } from "react-router-dom";
import WalletContext from "../../store/wallet-context";
import QRCode from "react-qr-code";

function Dashboard() {
  const walletContext = useContext(WalletContext);

  const [projects, setProjects] = useState([]);

  useEffect(() => {
    if (walletContext.wallet && walletContext.contract) {
      walletContext.contract
        .get_all_projects_by_owner({
          owner: walletContext.wallet.getAccountId(),
        })
        .then((res) => {
          console.log(res);
          setProjects(res);
        });
    }
  }, [walletContext.contract, walletContext.wallet]);

  function calculateEndDate(endDateInNanoSec) {
    return new Date(endDateInNanoSec / 1000000).toDateString();
  }

  function parseDescriptionWithDots(description) {
    if (description.length > 300) {
      return description.substring(0, 300).trim() + "...";
    } else {
      return description;
    }
  }

  return (
    <div className="dashboard">
      <div className="dashboard-header">
        <div>
          <h1 className="h1">
            <span>Logged in as</span> {walletContext.wallet.getAccountId()}
          </h1>
        </div>
        <div>
          <Link to="/dashboard/create-project">
            <button className="btn" type="button">
              Create New Project
            </button>
          </Link>
        </div>
      </div>
      <div>
        <h2>My QR Code</h2>
        <div className="my-qr-code">
          <QRCode value={walletContext.wallet.getAccountId()} />
        </div>
      </div>
      <div className="dashboard-projects">
        <h2>My Projects</h2>
        <ul>
          {projects.length > 0 &&
            projects.map((project) => (
              <li key={project.id}>
                <Link to={"/dashboard/edit-project/" + project.id}>
                  <div className="dashboard-project">
                    <div className="dashboard-project-details">
                      <div className="dashboard-project-details-first">
                        <h2>{project.name}</h2>
                        <p>{parseDescriptionWithDots(project.description)}</p>
                      </div>
                      <div className="dashboard-project-details-second">
                        <p>
                          <b>End Date:</b> {calculateEndDate(project.end_time)}
                        </p>
                        <p>
                          <b>Owner Account:</b> {project.owner}
                        </p>
                        <p>
                          <b>Progress: </b>
                          {Math.ceil((project.balance / project.goal) * 100)}%
                        </p>
                        <p>
                          <b>Status:</b> {project.status}
                        </p>
                      </div>
                    </div>
                  </div>
                </Link>
              </li>
            ))}
          {projects.length === 0 && (
            <div className="dashboard-no-projects">
              No projects created. Create your first project{" "}
              <Link to="/dashboard/create-project">here</Link>.
            </div>
          )}
        </ul>
      </div>
    </div>
  );
}

export default Dashboard;

'''
'''--- client/src/components/Dashboard/components/CreateProject/CreateProject.css ---
.project-image-preview-list {
  list-style: none;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  grid-gap: 10px;
}
.project-image-preview-list li {
  position: relative;
  border: 1px solid #ccc;
  display: flex;
}

.project-image-preview-list li img {
  display: block;
  width: 100%;
  height: auto;
  margin: auto;
}

.project-image-preview-list li .remove-image {
  position: absolute;
  top: 0;
  right: 0;
  padding: 0.3em 1em;
  background: #f00;
  color: #fff;
  cursor: pointer;
}

.level-amounts {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-gap: 10px;
}

.description-length {
  text-align: right;
}

'''
'''--- client/src/components/Dashboard/components/CreateProject/CreateProject.js ---
import "./CreateProject.css";
import { useState, useRef, useContext, useEffect } from "react";
import { Navigate } from "react-router-dom";
import WalletContext from "../../../../store/wallet-context";
import LoadingContext from "../../../../store/loading-context";
import { create } from "ipfs-http-client";
import { useToasts } from "react-toast-notifications";
import { utils } from "near-api-js";

function CreateProject() {
  const { addToast } = useToasts();
  const walletContext = useContext(WalletContext);
  const loadingContext = useContext(LoadingContext);
  const [errors, setErrors] = useState({});

  const [createdProjectId, setCreatedProjectId] = useState(null);
  const [dirty, setDirty] = useState(false);
  const [projectImages, setProjectImages] = useState([]);
  const [descriptionLength, setDescriptionLength] = useState(0);

  const projectNameInputRef = useRef(null);
  const projectDescriptionInputRef = useRef(null);
  const projectGoalInputRef = useRef(null);
  const projectPlanInputRef = useRef(null);
  const projectEndDateInputRef = useRef(null);
  const projectBasicAmountInputRef = useRef(null);
  const projectIntermediateAmountInputRef = useRef(null);
  const projectAdvancedAmountInputRef = useRef(null);

  const [goalInNear, setGoalInNear] = useState("0");
  const [basicAmountInNear, setBasicAmountInNear] = useState("0");
  const [intermediateAmountInNear, setIntermediateAmountInNear] = useState("0");
  const [advancedAmountInNear, setAdvancedAmountInNear] = useState("0");

  useEffect(() => {
    checkErrors();
  }, [projectImages]);

  async function onSubmitHandler(e) {
    e.preventDefault();

    setDirty(true);

    const valid = verifyFormValues();

    if (!valid) {
      console.log("Form is not valid");
      return;
    }

    const projectNameValue = projectNameInputRef.current.value;
    const projectDescriptionValue = projectDescriptionInputRef.current.value;
    const projectGoalValue = projectGoalInputRef.current.value;
    const projectPlanValue = projectPlanInputRef.current.value;
    const projectEndDateValue = projectEndDateInputRef.current.value;
    const projectBasicAmountValue = projectBasicAmountInputRef.current.value;
    const projectIntermediateAmountValue =
      projectIntermediateAmountInputRef.current.value;
    const projectAdvancedAmountValue =
      projectAdvancedAmountInputRef.current.value;

    const newDate =
      (new Date(projectEndDateValue).valueOf() - new Date().valueOf()) *
      1000000;
    const date = new Date(new Date(projectEndDateValue).valueOf());
    const cadence = `0 ${date.getMinutes()} ${date.getHours()} ${date.getDate()} ${
      date.getMonth() + 1
    } *`;

    const ipfs = create({
      host: "ipfs.infura.io",
      port: "5001",
      protocol: "https",
    });

    const imageCids = [];

    for (let i = 0; i < projectImages.length; i++) {
      const { path } = await ipfs.add(projectImages[i], {
        onlyHash: true,
      });
      imageCids.push(path);
    }

    loadingContext.setLoading(true);

    walletContext.contract
      .add_project(
        {
          goal: projectGoalValue,
          name: projectNameValue,
          description: projectDescriptionValue,
          plan: projectPlanValue,
          end_time: newDate,
          cadence,
          basic_supporter_amount: projectBasicAmountValue,
          intermediate_supporter_amount: projectIntermediateAmountValue,
          advanced_supporter_amount: projectAdvancedAmountValue,
          images: imageCids,
        },
        300000000000000
      )
      .then(async (res) => {
        for (let i = 0; i < projectImages.length; i++) {
          await ipfs.add(projectImages[i]);
        }
        setCreatedProjectId(parseInt(res, 10));
        addToast("Successfully created project", {
          appearance: "success",
          autoDismiss: true,
        });
        loadingContext.setLoading(false);
      })
      .catch((err) => {
        console.log(err);
        loadingContext.setLoading(false);
      });
  }

  function verifyFormValues() {
    const errorMessages = {};

    const projectNameValue = projectNameInputRef.current.value;
    const projectDescriptionValue = projectDescriptionInputRef.current.value;
    const projectGoalValue = projectGoalInputRef.current.value;
    const projectPlanValue = projectPlanInputRef.current.value;
    const projectEndDateValue = projectEndDateInputRef.current.value;
    const projectBasicAmountValue = projectBasicAmountInputRef.current.value;
    const projectIntermediateAmountValue =
      projectIntermediateAmountInputRef.current.value;
    const projectAdvancedAmountValue =
      projectAdvancedAmountInputRef.current.value;

    if (projectNameValue.length < 3) {
      errorMessages.name = "Project name must be at least 3 characters";
    }

    if (projectNameValue.length > 100) {
      errorMessages.name = "Project name must be 100 characters or less";
    }

    if (projectDescriptionValue.length < 100) {
      errorMessages.description =
        "Project description must be at least 100 characters";
    }

    if (projectDescriptionValue.length > 500) {
      errorMessages.description =
        "Project description must be 500 characters or less";
    }

    if (projectGoalValue < 1) {
      errorMessages.goal = "Project goal must be at least 1";
    }

    if (projectPlanValue !== "OneTime" && projectPlanValue !== "Recurring") {
      errorMessages.plan = "Project plan must be either OneTime or Recurring";
    }

    if (projectEndDateValue <= new Date().toISOString().slice(0, 16)) {
      errorMessages.endDate = "Project end date must be in the future";
    }

    if (projectEndDateValue.length < 1) {
      errorMessages.endDate = "Project end date must be set";
    }

    if (projectImages.length < 1) {
      errorMessages.images = "Project must have at least one image";
    }

    if (projectImages.length > 5) {
      errorMessages.images = "Project can have a maximum of 5 images";
    }

    if (projectBasicAmountValue < 1) {
      errorMessages.basicAmount = "Project basic amount must be at least 1";
    }

    if (projectIntermediateAmountValue < 1) {
      errorMessages.intermediateAmount =
        "Project intermediate amount must be at least 1";
    }

    if (projectAdvancedAmountValue < 1) {
      errorMessages.advancedAmount =
        "Project advanced amount must be at least 1";
    }

    setErrors(errorMessages);

    return Object.keys(errorMessages).length === 0;
  }

  function onImageUploadHandler(e) {
    const images = Array.from(e.target.files);
    setProjectImages([...projectImages, ...images]);
  }

  function onImageRemoveHandler(index) {
    setProjectImages(projectImages.filter((_, i) => i !== index));
  }

  function hasErrors(field) {
    return errors[field] !== undefined;
  }

  function getError(field) {
    return errors[field];
  }

  function checkErrors() {
    if (dirty) {
      verifyFormValues();
    }
  }

  function onGoalInputChange() {
    checkErrors();
    setGoalInNear(
      utils.format.formatNearAmount(projectGoalInputRef.current.value)
    );
  }

  function onBasicLevelInputChange() {
    checkErrors();
    setBasicAmountInNear(
      utils.format.formatNearAmount(projectBasicAmountInputRef.current.value)
    );
  }

  function onIntermediateLevelInputChange() {
    checkErrors();
    setIntermediateAmountInNear(
      utils.format.formatNearAmount(
        projectIntermediateAmountInputRef.current.value
      )
    );
  }

  function onAdvancedLevelInputChange() {
    checkErrors();
    setAdvancedAmountInNear(
      utils.format.formatNearAmount(projectAdvancedAmountInputRef.current.value)
    );
  }

  if (createdProjectId) {
    return <Navigate to={`/dashboard/edit-project/${createdProjectId}`} />;
  }

  return (
    <div>
      <h1 className="h1">Create Project</h1>
      <form onSubmit={onSubmitHandler}>
        <div className={`form-group ${hasErrors("name") ? "input-error" : ""}`}>
          <label htmlFor="name">Name</label>
          <input
            type="text"
            id="name"
            ref={projectNameInputRef}
            onChange={checkErrors}
          />
          {hasErrors("name") && (
            <span className="error-message">{getError("name")}</span>
          )}
        </div>
        <div
          className={`form-group ${
            hasErrors("description") ? "input-error" : ""
          }`}
        >
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            ref={projectDescriptionInputRef}
            onChange={(e) => {
              checkErrors(e);
              setDescriptionLength(e.target.value.length);
            }}
          ></textarea>
          <p className="description-length">
            {descriptionLength}/500 characters
          </p>
          {hasErrors("description") && (
            <span className="error-message">{getError("description")}</span>
          )}
        </div>
        <div className={`form-group ${hasErrors("goal") ? "input-error" : ""}`}>
          <label htmlFor="goal">Goal ({goalInNear}Ⓝ)</label>
          <input
            type="number"
            id="goal"
            ref={projectGoalInputRef}
            onChange={onGoalInputChange}
          />
          {hasErrors("goal") && (
            <span className="error-message">{getError("goal")}</span>
          )}
        </div>
        <div className={`form-group ${hasErrors("plan") ? "input-error" : ""}`}>
          <label htmlFor="plan">
            Plan{" "}
            <span title="What type of subscription does your product or service provide?">
              &#x1F6C8;
            </span>
          </label>
          <select id="plan" ref={projectPlanInputRef} onChange={checkErrors}>
            <option value="OneTime">One Time</option>
            <option value="Recurring">Recurring</option>
          </select>
          {hasErrors("plan") && (
            <span className="error-message">{getError("plan")}</span>
          )}
        </div>
        <div
          className={`form-group ${hasErrors("endDate") ? "input-error" : ""}`}
        >
          <label htmlFor="endDate">End Date</label>
          <input
            type="datetime-local"
            id="endDate"
            ref={projectEndDateInputRef}
            onChange={checkErrors}
          />
          {hasErrors("endDate") && (
            <span className="error-message">{getError("endDate")}</span>
          )}
        </div>
        <div>
          <h2 className="h2">Images</h2>
          <div>
            <div
              className={`form-group ${
                hasErrors("images") ? "input-error" : ""
              }`}
            >
              <label htmlFor="image">Add up to five images</label>
              <input
                type="file"
                id="image"
                multiple
                accept=".png, .jpg, jpeg, .gif"
                onInput={onImageUploadHandler}
              />
              {hasErrors("images") && (
                <span className="error-message">{getError("images")}</span>
              )}
            </div>
            <ul className="project-image-preview-list">
              {projectImages.map((image, index) => (
                <li key={index}>
                  <span
                    className="remove-image"
                    onClick={() => {
                      onImageRemoveHandler(index);
                    }}
                  >
                    Remove
                  </span>
                  <img src={URL.createObjectURL(image)} alt="project preview" />
                </li>
              ))}
            </ul>
          </div>
        </div>
        <div>
          <h2 className="h2">Supporter Level Amounts</h2>
          <div className="level-amounts">
            <div
              className={`form-group ${
                hasErrors("basicAmount") ? "input-error" : ""
              }`}
            >
              <label htmlFor="basic-level">
                Basic Level ({basicAmountInNear}Ⓝ)
              </label>
              <input
                type="number"
                id="basic-level"
                ref={projectBasicAmountInputRef}
                onChange={onBasicLevelInputChange}
              />
              {hasErrors("basicAmount") && (
                <span className="error-message">{getError("basicAmount")}</span>
              )}
            </div>
            <div
              className={`form-group ${
                hasErrors("intermediateAmount") ? "input-error" : ""
              }`}
            >
              <label htmlFor="intermediate-level">
                Intermediate Level ({intermediateAmountInNear}Ⓝ)
              </label>
              <input
                type="number"
                id="intermediate-level"
                ref={projectIntermediateAmountInputRef}
                onChange={onIntermediateLevelInputChange}
              />
              {hasErrors("intermediateAmount") && (
                <span className="error-message">
                  {getError("intermediateAmount")}
                </span>
              )}
            </div>
            <div
              className={`form-group ${
                hasErrors("advancedAmount") ? "input-error" : ""
              }`}
            >
              <label htmlFor="advanced-level">
                Advanced Level ({advancedAmountInNear}Ⓝ)
              </label>
              <input
                type="number"
                id="advanced-level"
                ref={projectAdvancedAmountInputRef}
                onChange={onAdvancedLevelInputChange}
              />
              {hasErrors("advancedAmount") && (
                <span className="error-message">
                  {getError("advancedAmount")}
                </span>
              )}
            </div>
          </div>
        </div>
        <button className="btn" type="submit" disabled={loadingContext.loading}>
          Create Project
        </button>
      </form>
    </div>
  );
}

export default CreateProject;

'''
'''--- client/src/components/Dashboard/components/EditProject/EditProject.css ---
.edit-project .buttons button + button {
  margin-left: 10px;
}

.edit-project .heading {
  display: flex;
  align-items: center;
  margin-bottom: 1em;
}

.edit-project .heading h1 {
  margin-right: 0.5em;
  margin-bottom: 0;
}

.edit-project .heading .project-status {
  color: white;
  padding: 0.1em 0.5em;
}

.project-status.Funding {
  background-color: var(--blue);
}

.project-status.Funded {
  background-color: green;
}

.project-status.Cancelled {
  background-color: var(--red);
}

.project-status.Unfulfilled {
  background-color: brown;
}

.level-amounts {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  grid-gap: 10px;
}

.description-length {
  text-align: right;
}

.verify-supporters {
  margin-top: 2em;
}

.stop-scanning-btn {
  position: fixed;
  top: 0;
  right: 0;
  z-index: 9999;
}

'''
'''--- client/src/components/Dashboard/components/EditProject/EditProject.js ---
import "./EditProject.css";
import { useState, useEffect, useContext } from "react";
import { useParams } from "react-router-dom";
import WalletContext from "../../../../store/wallet-context";
import { create } from "ipfs-http-client";
import LoadingContext from "../../../../store/loading-context";
import { useToasts } from "react-toast-notifications";
import QrReader from "react-qr-reader";

function EditProject() {
  const { id } = useParams();

  const { addToast } = useToasts();
  const walletContext = useContext(WalletContext);
  const loadingContext = useContext(LoadingContext);

  const [project, setProject] = useState(null);
  const [errors, setErrors] = useState({});
  const [dirty, setDirty] = useState(false);
  const [scanQrCode, setScanQrCode] = useState(false);

  useEffect(() => {
    if (walletContext.wallet && walletContext.contract) {
      walletContext.contract
        .get_project({ project_id: parseInt(id, 10) })
        .then((res) => {
          setProject(res);
        });
    }
  }, [walletContext.contract, walletContext.wallet, id]);

  useEffect(() => {
    checkErrors();
  }, [project]);

  async function onSubmitHandler(e) {
    e.preventDefault();

    setDirty(true);

    const valid = verifyFormValues();

    if (!valid) {
      return;
    }

    const ipfs = create({
      host: "ipfs.infura.io",
      port: "5001",
      protocol: "https",
    });

    const images = [];
    const newlyAddedImages = [];

    for (let i = 0; i < project.images.length; i++) {
      if (typeof project.images[i] !== "string") {
        const { path } = await ipfs.add(project.images[i], {
          onlyHash: true,
        });
        images.push(path);
        newlyAddedImages.push(path);
      } else {
        images.push(project.images[i]);
      }
    }

    loadingContext.setLoading(true);

    walletContext.contract
      .update_project({
        project_id: parseInt(id, 10),
        goal: Number(project.goal),
        name: project.name,
        description: project.description,
        plan: project.plan,
        basic_supporter_amount: Number(project.level_amounts.Basic),
        intermediate_supporter_amount: Number(
          project.level_amounts.Intermediate
        ),
        advanced_supporter_amount: Number(project.level_amounts.Advanced),
        images,
      })
      .then(async () => {
        for (let i = 0; i < newlyAddedImages.length; i++) {
          await ipfs.add(newlyAddedImages[i]);
        }
        addToast("Successfully updated project", {
          appearance: "success",
          autoDismiss: true,
        });
        loadingContext.setLoading(false);
      })
      .catch((err) => {
        console.log(err);
        loadingContext.setLoading(false);
      });
  }

  function onNameChangeHandler(event) {
    setProject({ ...project, name: event.target.value });
  }

  function onDescriptionChangeHandler(event) {
    setProject({ ...project, description: event.target.value });
  }

  function onGoalChangeHandler(event) {
    setProject({ ...project, goal: event.target.value });
  }

  function onPlanChangeHandler(event) {
    setProject({ ...project, plan: event.target.value });
  }

  function onBasicAmountChangeHandler(event) {
    setProject({
      ...project,
      level_amounts: {
        ...project.level_amounts,
        Basic: event.target.value,
      },
    });
  }

  function onIntermediateAmountChangeHandler(event) {
    setProject({
      ...project,
      level_amounts: {
        ...project.level_amounts,
        Intermediate: event.target.value,
      },
    });
  }

  function onAdvancedAmountChangeHandler(event) {
    setProject({
      ...project,
      level_amounts: {
        ...project.level_amounts,
        Advanced: Number(event.target.value),
      },
    });
  }

  function onEndDateChangeHandler(event) {
    const newDate = new Date(event.target.value).valueOf() * 1000000;
    setProject({ ...project, end_time: newDate });
  }

  function onCancelProjectHandler() {
    walletContext.contract
      .cancel_project({ project_id: parseInt(id, 10) })
      .then((res) => {
        console.log(res);
        addToast("Successfully canceled project", {
          appearance: "success",
          autoDismiss: true,
        });
      });
  }

  function calculateEndDate(endDateInNanoSec) {
    return new Date(endDateInNanoSec / 1000000).toISOString().split(".")[0];
  }

  function verifyFormValues() {
    const errorMessages = {};

    if (project.name.length < 3) {
      errorMessages.name = "Project name must be at least 3 characters";
    }

    if (project.name.length > 100) {
      errorMessages.name = "Project name must be 100 characters or less";
    }

    if (project.description.length < 100) {
      errorMessages.description =
        "Project description must be at least 100 characters";
    }

    if (project.description.length > 500) {
      errorMessages.description =
        "Project description must be 500 characters or less";
    }

    if (project.goal < 1) {
      errorMessages.goal = "Project goal must be at least 1";
    }

    if (project.plan !== "OneTime" && project.plan !== "Recurring") {
      errorMessages.plan = "Project plan must be either OneTime or Recurring";
    }

    if (project.end_time <= new Date().toISOString().slice(0, 16)) {
      errorMessages.endDate = "Project end date must be in the future";
    }

    if (project.end_time.length < 1) {
      errorMessages.endDate = "Project end date must be set";
    }

    if (project.images.length < 1) {
      errorMessages.images = "Project must have at least one image";
    }

    if (project.images.length > 5) {
      errorMessages.images = "Project can have a maximum of 5 images";
    }

    if (project.level_amounts.Basic < 1) {
      errorMessages.basicAmount = "Project basic amount must be at least 1";
    }

    if (project.level_amounts.Intermediate < 1) {
      errorMessages.intermediateAmount =
        "Project intermediate amount must be at least 1";
    }

    if (project.level_amounts.Advanced < 1) {
      errorMessages.advancedAmount =
        "Project advanced amount must be at least 1";
    }

    setErrors(errorMessages);

    return Object.keys(errorMessages).length === 0;
  }

  function hasErrors(field) {
    return errors[field] !== undefined;
  }

  function getError(field) {
    return errors[field];
  }

  function checkErrors() {
    if (dirty) {
      verifyFormValues();
    }
  }

  function onImageUploadHandler(e) {
    setProject({
      ...project,
      images: [...project.images, ...Array.from(e.target.files)],
    });
  }

  function onImageRemoveHandler(index) {
    const newImages = project.images.filter((image, i) => i !== index);
    setProject({ ...project, images: newImages });
  }

  function onQrReaderError(err) {
    alert(err);
  }

  function onQrReaderScan(result) {
    if (result !== null) {
      loadingContext.setLoading(true);
      setScanQrCode(false);
      walletContext.contract
        .verify_supporter_on_project({
          project_id: parseInt(id, 10),
          supporter_id: result,
        })
        .then((res) => {
          if (res) {
            addToast(`${result} is a supporter!`, {
              appearance: "success",
              autoDismiss: true,
            });
          } else {
            addToast(`${result} is NOT a supporter!`, {
              appearance: "error",
              autoDismiss: true,
            });
          }
          loadingContext.setLoading(false);
        })
        .catch((err) => {
          let errorMessage = err.kind.ExecutionError;
          if (!errorMessage) {
            errorMessage = "Failed to verify supporter";
          }
          addToast(errorMessage, {
            appearance: "error",
            autoDismiss: true,
          });
          loadingContext.setLoading(false);
        });
    }
  }

  function showQrCodeScanner() {
    setScanQrCode(true);
  }

  function hideQrCodeScanner() {
    setScanQrCode(false);
  }

  if (!project) {
    return <div>Loading...</div>;
  }

  return (
    <div className="edit-project">
      <div className="heading">
        <h1 className="h1">Update Project</h1>
        <span className={`project-status ${project.status}`}>
          {project.status}
        </span>
      </div>
      <form onSubmit={onSubmitHandler}>
        <div className={`form-group ${hasErrors("name") ? "input-error" : ""}`}>
          <label htmlFor="name">Name</label>
          <input
            type="text"
            id="name"
            value={project.name}
            onInput={onNameChangeHandler}
          />
          {hasErrors("name") && (
            <span className="error-message">{getError("name")}</span>
          )}
        </div>
        <div
          className={`form-group ${
            hasErrors("description") ? "input-error" : ""
          }`}
        >
          <label htmlFor="description">Description</label>
          <textarea
            id="description"
            value={project.description}
            onInput={onDescriptionChangeHandler}
          ></textarea>
          <p className="description-length">
            {project.description.length}/500 characters
          </p>
          {hasErrors("description") && (
            <span className="error-message">{getError("description")}</span>
          )}
        </div>
        <div className={`form-group ${hasErrors("goal") ? "input-error" : ""}`}>
          <label htmlFor="goal">Goal (in yoctoⓃ)</label>
          <input
            type="number"
            id="goal"
            value={project.goal}
            onInput={onGoalChangeHandler}
          />
          {hasErrors("goal") && (
            <span className="error-message">{getError("goal")}</span>
          )}
        </div>
        <div className={`form-group ${hasErrors("plan") ? "input-error" : ""}`}>
          <label htmlFor="plan">
            Plan{" "}
            <span title="What type of subscription does your product or service provide?">
              &#x1F6C8;
            </span>
          </label>
          <select id="plan" value={project.plan} onInput={onPlanChangeHandler}>
            <option value="OneTime">One Time</option>
            <option value="Recurring">Recurring</option>
          </select>
          {hasErrors("plan") && (
            <span className="error-message">{getError("plan")}</span>
          )}
        </div>
        <div
          className={`form-group ${hasErrors("endDate") ? "input-error" : ""}`}
        >
          <label htmlFor="endDate">End Date</label>
          <input
            type="datetime-local"
            id="endDate"
            disabled
            value={calculateEndDate(project.end_time)}
            onChange={onEndDateChangeHandler}
          />
          {hasErrors("endDate") && (
            <span className="error-message">{getError("endDate")}</span>
          )}
        </div>
        <div>
          <h2 className="h2">Images</h2>
          <div>
            <div
              className={`form-group ${
                hasErrors("images") ? "input-error" : ""
              }`}
            >
              <label htmlFor="image">Add up to five images</label>
              <input
                type="file"
                id="image"
                multiple
                accept=".png, .jpg, jpeg, .gif"
                onChange={onImageUploadHandler}
              />
              {hasErrors("images") && (
                <span className="error-message">{getError("images")}</span>
              )}
            </div>
            <ul className="project-image-preview-list">
              {project.images.map((image, index) => (
                <li key={index}>
                  <span
                    className="remove-image"
                    onClick={() => {
                      onImageRemoveHandler(index);
                    }}
                  >
                    Remove
                  </span>
                  <img
                    src={
                      typeof image === "string"
                        ? `https://ipfs.io/ipfs/${image}`
                        : URL.createObjectURL(image)
                    }
                    alt="project preview"
                  />
                </li>
              ))}
            </ul>
          </div>
        </div>
        <div>
          <h2 className="h2">Supporter Level Amounts</h2>
          <div className="level-amounts">
            <div
              className={`form-group ${
                hasErrors("basicAmount") ? "input-error" : ""
              }`}
            >
              <label htmlFor="basic-level">Basic Level (in yoctoⓃ)</label>
              <input
                type="number"
                id="basic-level"
                value={project.level_amounts.Basic}
                onInput={onBasicAmountChangeHandler}
              />
              {hasErrors("basicAmount") && (
                <span className="error-message">{getError("basicAmount")}</span>
              )}
            </div>
            <div
              className={`form-group ${
                hasErrors("intermediateAmount") ? "input-error" : ""
              }`}
            >
              <label htmlFor="intermediate-level">
                Intermediate Level (in yoctoⓃ)
              </label>
              <input
                type="number"
                id="intermediate-level"
                value={project.level_amounts.Intermediate}
                onInput={onIntermediateAmountChangeHandler}
              />
              {hasErrors("intermediateAmount") && (
                <span className="error-message">
                  {getError("intermediateAmount")}
                </span>
              )}
            </div>
            <div
              className={`form-group ${
                hasErrors("advancedAmount") ? "input-error" : ""
              }`}
            >
              <label htmlFor="advanced-level">Advanced Level (in yoctoⓃ)</label>
              <input
                type="number"
                id="advanced-level"
                value={project.level_amounts.Advanced}
                onInput={onAdvancedAmountChangeHandler}
              />
              {hasErrors("advancedAmount") && (
                <span className="error-message">
                  {getError("advancedAmount")}
                </span>
              )}
            </div>
          </div>
        </div>
        <div className="buttons">
          <button
            className="btn"
            type="submit"
            disabled={loadingContext.loading}
          >
            Update Project
          </button>
          {project.status === "Funding" && (
            <button
              className="btn btn--red"
              type="button"
              onClick={onCancelProjectHandler}
            >
              Cancel Project
            </button>
          )}
        </div>
      </form>
      <div className="verify-supporters">
        <h2>Verify Supporters</h2>
        {!scanQrCode && (
          <button className="btn" type="button" onClick={showQrCodeScanner}>
            Scan QR Code
          </button>
        )}
        {scanQrCode && (
          <div>
            <button
              className="btn stop-scanning-btn"
              type="button"
              onClick={hideQrCodeScanner}
            >
              Cancel
            </button>
            <QrReader
              delay={300}
              onError={onQrReaderError}
              onScan={onQrReaderScan}
              style={{
                width: "100%",
                position: "fixed",
                top: 0,
                left: 0,
                height: "100vh",
                backgroundColor: "black",
                display: "flex",
                flexDirection: "column",
                justifyContent: "center",
                alignItems: "center",
              }}
            />
          </div>
        )}
      </div>
    </div>
  );
}

export default EditProject;

'''
'''--- client/src/components/Header/Header.css ---

'''
'''--- client/src/components/Header/Header.js ---
import "./Header.css";
import { useState, useContext, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { getConfig } from "../../config";
import { useToasts } from "react-toast-notifications";
import WalletContext from "../../store/wallet-context";

function Header() {
  const location = useLocation();
  const { addToast } = useToasts();
  const walletContext = useContext(WalletContext);

  const [showDropdown, setShowDropdown] = useState(false);
  const [showMobileDropdown, setShowMobileDropdown] = useState(false);

  useEffect(() => {
    setShowDropdown(false);
    setShowMobileDropdown(false);
  }, [location]);

  function connectWalletHandler() {
    const config = getConfig(process.env.NODE_ENV);

    walletContext.wallet
      .requestSignIn(config.contractAddress, "Nearkick")
      .then((res) => {
        console.log(res);
      });
  }

  function disconnectWalletHandler() {
    walletContext.wallet.signOut();
    walletContext.setIsSignedIn(false);
    addToast("Successfully logged out of wallet", {
      appearance: "success",
      autoDismiss: true,
    });
  }

  function toggleDropdown() {
    setShowDropdown(!showDropdown);
  }

  function onMobileDropdownToggleHandler() {
    setShowMobileDropdown(!showMobileDropdown);
  }

  return (
    <header className="header">
      <nav className="navigation-links">
        <ul>
          <li>
            <Link to="/projects">Projects</Link>
          </li>
          <li>
            <Link to="/">
              <img className="brand-logo" src="/logo.png" alt="nearkick logo" />
            </Link>
          </li>
          <li>
            <Link to="/about">About</Link>
          </li>
        </ul>
      </nav>
      <div className="wallet-connect">
        {walletContext.wallet && walletContext.isSignedIn && (
          <li className="wallet-button">
            <span onClick={toggleDropdown}>
              {walletContext.wallet.getAccountId()}
            </span>
            {showDropdown && (
              <ul className="wallet-button-dropdown">
                <li>
                  <Link to="/dashboard">Dashboard</Link>
                </li>
                <li onClick={disconnectWalletHandler}>Logout</li>
              </ul>
            )}
          </li>
        )}
        {walletContext.wallet && !walletContext.isSignedIn && (
          <li className="wallet-button">
            <span onClick={connectWalletHandler}>Connect Wallet</span>
          </li>
        )}
      </div>
      <div className="mobile-navigation">
        <div
          className="mobile-navigation-button"
          onClick={onMobileDropdownToggleHandler}
        >
          <span>MENU</span>
        </div>
        {showMobileDropdown && (
          <ul className="mobile-navigation-dropdown">
            <li>
              <Link to="/projects">Projects</Link>
            </li>
            <li>
              <Link to="/about">About</Link>
            </li>
            {walletContext.wallet && walletContext.isSignedIn && (
              <li>
                <Link to="/dashboard">Dashboard</Link>
              </li>
            )}
            {walletContext.wallet && walletContext.isSignedIn && (
              <li onClick={disconnectWalletHandler}>
                <span>Logout</span>
              </li>
            )}
            {walletContext.wallet && !walletContext.isSignedIn && (
              <li onClick={connectWalletHandler}>
                <span>Connect Wallet</span>
              </li>
            )}
          </ul>
        )}
      </div>
    </header>
  );
}

export default Header;

'''
'''--- client/src/components/Home/Home.css ---
.home-projects ul {
  list-style-type: none;
  margin: 1em 0;
}

.home-projects ul li .home-project {
  border-left: 5px solid rgb(218, 139, 22);
  padding: 0.75em;
}

.home-projects ul li .home-project:hover {
  background-color: #f1f1f1;
}

.home-projects ul li + li {
  margin-top: 1em;
}

.home-project-details {
  display: flex;
  justify-content: space-between;
}

.home-project-details-second {
  min-width: max-content;
}

.search-projects {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.cta {
  text-align: center;
}

.cta img {
  max-width: 100%;
}

.cta p {
  margin: 1em auto;
  max-width: 700px;
  font-size: 1.75em;
}

.cta .buttons a + a {
  margin-left: 1em;
}

@media only screen and (max-width: 992px) {
  .cta p {
    font-size: 1em;
  }
}

'''
'''--- client/src/components/Home/Home.js ---
import "./Home.css";
import { Link } from "react-router-dom";

function Home() {
  return (
    <div>
      <div className="cta">
        <div>
          <img
            src="/people-networking-through-technology.jpg"
            alt="Pepople networking through technology"
          />
        </div>
        <p>
          Nearkick is a decentralized kickstarter app that allows you to
          kickstart your own projects or fund existing ones.
        </p>
        <div className="buttons">
          <Link to="/projects">
            <button className="btn" type="button">
              Find a Project
            </button>
          </Link>
          <Link to="/about">
            <button className="btn" type="button">
              About Nearkick
            </button>
          </Link>
        </div>
      </div>
    </div>
  );
}

export default Home;

'''
'''--- client/src/components/Project/Project.css ---
.project-details {
  display: flex;
  justify-content: space-between;
  margin-bottom: 2em;
}

.project-details-first {
  flex: 1;
}

.project-details-second {
  min-width: max-content;
  margin-left: 2em;
}

.project-details-second p {
  margin-bottom: 0.5em;
}

.project-supporters {
  list-style-type: square;
  padding: 1em;
}

.project-description {
  white-space: pre-line;
}

.project-images {
  position: relative;
  display: flex;
  justify-content: center;
  margin-bottom: 2em;
  background-color: rgba(0, 0, 0, 0.1);
}

.project-images img {
  display: block;
}

.project-images .project-image-control {
  position: absolute;
  top: 50%;
  cursor: pointer;
}

.project-images .project-image-control-previous {
  left: 1em;
}

.project-images .project-image-control-next {
  right: 1em;
}

.become-supporter {
  margin-top: 2em;
}

.hr {
  margin-bottom: 1em;
  border: 0;
  height: 1px;
  width: 100%;
  background-color: #ccc;
}

@media only screen and (max-width: 768px) {
  .project-details {
    flex-direction: column;
  }

  .project-details-second {
    margin-left: 0;
    margin-top: 2em;
  }
}

'''
'''--- client/src/components/Project/Project.js ---
import "./Project.css";
import { useState, useEffect, useContext } from "react";
import { useParams } from "react-router-dom";
import WalletContext from "../../store/wallet-context";
import { getConfig } from "../../config";
import "react-responsive-carousel/lib/styles/carousel.min.css";
import { Carousel } from "react-responsive-carousel";
import { useToasts } from "react-toast-notifications";

function Project() {
  const { id } = useParams();

  const { addToast } = useToasts();
  const walletContext = useContext(WalletContext);
  const [project, setProject] = useState(null);
  const [supporterLevel, setSupporterLevel] = useState("Basic");

  useEffect(() => {
    if (walletContext.wallet && walletContext.contract) {
      walletContext.contract
        .get_project({ project_id: parseInt(id, 10) })
        .then((res) => {
          setProject(res);
          console.log(res);
        });
    }
  }, [walletContext.contract, walletContext.wallet, id]);

  function supportProject() {
    if (!walletContext.isSignedIn) {
      const config = getConfig(process.env.NODE_ENV);
      walletContext.wallet.requestSignIn(config.contractAddress, "Nearkick");
    } else {
      walletContext.contract
        .add_supporter_to_project(
          {
            project_id: parseInt(id, 10),
            level: supporterLevel,
          },
          300000000000000,
          project.level_amounts[supporterLevel]
        )
        .then((res) => {
          console.log(res);
          addToast("Successfully became a supporter on project", {
            appearance: "success",
            autoDismiss: true,
          });
        });
    }
  }

  function calculateEndDate(endDateInNanoSec) {
    return new Date(endDateInNanoSec / 1000000).toDateString();
  }

  function onSupporterLevelChangeHandler(event) {
    setSupporterLevel(event.target.value);
  }

  function removeFromProject() {
    walletContext.contract
      .remove_supporter_from_project({
        project_id: parseInt(id, 10),
      })
      .then((res) => {
        console.log(res);
        addToast("Successfully removed yourself from project", {
          appearance: "success",
          autoDismiss: true,
        });
      });
  }

  if (!project) {
    return <div>Loading...</div>;
  }

  return (
    <div>
      <h1 className="h1">{project.name}</h1>
      <div className="project-details">
        <div className="project-details-first">
          <div className="project-images">
            <Carousel
              showArrows={true}
              showStatus={false}
              showThumbs={project.images.length > 1}
              showIndicators={project.images.length > 1}
            >
              {project.images.map((image, index) => (
                <div key={index}>
                  <img
                    src={`https://ipfs.io/ipfs/${image}`}
                    alt={project.name}
                  />
                </div>
              ))}
            </Carousel>
          </div>
          <p>
            <b>About Project:</b>
          </p>
          <p className="project-description">{project.description}</p>
        </div>
        <div className="project-details-second">
          <p>
            <b>End Date:</b> {calculateEndDate(project.end_time)}
          </p>
          <p>
            <b>Owner Account:</b> {project.owner}
          </p>
          <p>
            <b>Gathered:</b> {project.balance} yoctoⓃ
          </p>
          <p>
            <b>Goal:</b> {project.goal} yoctoⓃ
          </p>
          <p>
            <b>Plan:</b> {project.plan}
          </p>
          <p>
            <b>Status:</b> {project.status}
          </p>
          {(project.status === "Funding" || project.status === "Funded") && (
            <div className="become-supporter">
              {project.supporters[walletContext.wallet.getAccountId()] ? (
                <div>
                  <p>You are a supporter for this project!</p>
                  <button
                    className="btn btn--red"
                    type="button"
                    onClick={removeFromProject}
                  >
                    Remove yourself from project
                  </button>
                </div>
              ) : (
                <div>
                  <h2>Become a Supporter</h2>
                  <div className="form-group">
                    <label htmlFor="type">Supporter Type</label>
                    <select
                      id="type"
                      value={supporterLevel}
                      onChange={onSupporterLevelChangeHandler}
                    >
                      {Object.entries(project.level_amounts).map(
                        ([level, amount]) => (
                          <option key={level} value={level}>
                            {level} - {amount} yoctoⓃ
                          </option>
                        )
                      )}
                    </select>
                  </div>
                  <button
                    className="btn"
                    type="button"
                    onClick={supportProject}
                  >
                    Become a Supporter
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      </div>
      <hr className="hr" />
      <div>
        <p>
          <b>Supporters:</b>
        </p>
        <ul className="project-supporters">
          {Object.keys(project.supporters).length > 0 ? (
            Object.entries(project.supporters).map(([key, value]) => (
              <li key={key}>
                {key} ({value.level} supporter)
              </li>
            ))
          ) : (
            <div>No supporters yet.</div>
          )}
        </ul>
      </div>
    </div>
  );
}

export default Project;

'''
'''--- client/src/components/Projects/Projects.css ---
.all-projects ul {
  list-style-type: none;
  margin: 1em 0;
}

.all-projects ul li .project {
  border-left: 10px solid var(--red);
  padding: 0.75em;
}

.all-projects ul li .project:hover {
  background-color: #f1f1f1;
}

.all-projects ul li + li {
  margin-top: 1em;
}

.all-project-details {
  display: flex;
  justify-content: space-between;
}

.all-project-details-second {
  min-width: max-content;
}

.search-projects {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

@media only screen and (max-width: 992px) {
  .all-project-details {
    flex-direction: column;
  }

  .all-project-details .all-project-details-second {
    display: flex;
    flex-wrap: wrap;
    margin-top: 0.5em;
    min-width: initial;
  }

  .all-project-details .all-project-details-second p {
    flex-basis: 50%;
  }
}

@media only screen and (max-width: 768px) {
  .all-project-details .all-project-details-second {
    display: none;
  }
}

'''
'''--- client/src/components/Projects/Projects.js ---
import "./Projects.css";
import { useState, useEffect, useContext } from "react";
import { Link } from "react-router-dom";
import WalletContext from "../../store/wallet-context";

function Projects() {
  const walletContext = useContext(WalletContext);

  const [allProjects, setAllProjects] = useState([]);
  const [projects, setProjects] = useState([]);

  useEffect(() => {
    if (walletContext.wallet && walletContext.contract) {
      walletContext.contract.get_all_projects().then((res) => {
        console.log(res);
        setAllProjects(res);
        setProjects(res);
      });
    }
  }, [walletContext.contract, walletContext.wallet]);

  function calculateEndDate(endDateInNanoSec) {
    return new Date(endDateInNanoSec / 1000000).toDateString();
  }

  function parseDescriptionWithDots(description) {
    if (description.length > 300) {
      return description.substring(0, 300).trim() + "...";
    } else {
      return description;
    }
  }

  function onProjectSearchHandler(event) {
    const searchTerm = event.target.value.toLowerCase();
    setProjects(
      allProjects.filter((project) => {
        return project.name.toLowerCase().includes(searchTerm);
      })
    );
  }

  return (
    <div>
      <div className="search-projects">
        <h1 className="h1">Find a Project To Support</h1>
        <div className="form-group">
          <input
            type="search"
            placeholder="Search"
            onInput={onProjectSearchHandler}
          />
        </div>
      </div>
      <div className="all-projects">
        <ul>
          {projects.map((project) => (
            <li key={project.id}>
              <Link to={"/project/" + project.id}>
                <div className="project">
                  <div className="all-project-details">
                    <div className="all-project-details-first">
                      <h2>{project.name}</h2>
                      <p>{parseDescriptionWithDots(project.description)}</p>
                    </div>
                    <div className="all-project-details-second">
                      <p>
                        <b>End Date:</b> {calculateEndDate(project.end_time)}
                      </p>
                      <p>
                        <b>Owner Account:</b> {project.owner}
                      </p>
                      <p>
                        <b>Progress: </b>
                        {Math.ceil((project.balance / project.goal) * 100)}%
                      </p>
                      <p>
                        <b>Status:</b> {project.status}
                      </p>
                    </div>
                  </div>
                </div>
              </Link>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
}

export default Projects;

'''
'''--- client/src/config.js ---
const CONTRACT_ADDRESS = process.env.REACT_APP_CONTRACT_ADDRESS;

export function getConfig(env) {
  switch (env) {
    case "notconfigured":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractAddress: CONTRACT_ADDRESS,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
      };
    case "production":
    case "development":
    case "test":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractAddress: CONTRACT_ADDRESS,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

'''
'''--- client/src/index.css ---
:root {
  --header-height: 100px;

  --red: #f50303;
  --yellow: #f5f22c;
  --blue: #2ca7f5;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  font-family: "BioRhyme", sans-serif;
}

body {
  font-family: "BioRhyme", sans-serif;
  font-size: 16px;
  background-image: url("../public/crossline-dots.png");
}

.btn {
  padding: 0.75em 1.25em;
  background-color: var(--blue);
  color: white;
  cursor: pointer;
  border: 0;
}

.btn--red {
  background-color: var(--red);
}

p {
  line-height: 1.4em;
}

a {
  text-decoration: none;
  color: black;
}

.h1 {
  font-size: 2em;
  font-weight: bold;
  margin-bottom: 0.5em;
}

.h2 {
  font-size: 1.5em;
  font-weight: bold;
  margin-bottom: 0.5em;
}

.form-group {
  margin-bottom: 1em;
}

.form-group input,
.form-group textarea,
.form-group select {
  width: 100%;
  padding: 0.5em 0.75em;
}

.form-group label {
  margin-bottom: 0.25em;
  display: inline-block;
}

.form-group textarea {
  max-width: 100%;
  resize: vertical;
  height: 100px;
  min-height: 100px;
  max-height: 300px;
}

.form-group.input-error input,
.form-group.input-error textarea,
.form-group.input-error select {
  border: 1px solid red;
}

.form-group.input-error label {
  color: red;
}

.form-group.input-error .error-message {
  color: red;
  font-size: 0.8em;
}

@media only screen and (max-width: 992px) {
  :root {
    --header-height: 70px;

    --red: #f50303;
    --yellow: #f5f22c;
    --blue: #2ca7f5;
  }
}

@media only screen and (max-width: 768px) {
  .h1 {
    font-size: 1.5em;
  }

  .h2 {
    font-size: 1.2em;
  }
}

'''
'''--- client/src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { WalletContextProvider } from "./store/wallet-context";
import { LoadingContextProvider } from "./store/loading-context";
import { ToastProvider } from "react-toast-notifications";
import { initWallet } from "./wallet";

initWallet().then((res) => {
  ReactDOM.render(
    <WalletContextProvider wallet={res.wallet} contract={res.contract}>
      <LoadingContextProvider>
        <React.StrictMode>
          <ToastProvider>
            <App />
          </ToastProvider>
        </React.StrictMode>
      </LoadingContextProvider>
    </WalletContextProvider>,
    document.getElementById("root")
  );
});

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- client/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- client/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- client/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- client/src/store/loading-context.js ---
import { createContext, useState } from "react";

const LoadingContext = createContext({
  loading: false,
});

export function LoadingContextProvider({ children }) {
  const [loading, setLoading] = useState(false);

  const context = {
    loading,
    setLoading,
  };

  return (
    <LoadingContext.Provider value={context}>
      {children}
    </LoadingContext.Provider>
  );
}

export default LoadingContext;

'''
'''--- client/src/store/wallet-context.js ---
import { createContext, useState } from "react";
import { Buffer } from "buffer";

window.Buffer = Buffer;

const WalletContext = createContext({
  wallet: null,
  contract: null,
  isSignedIn: false,
});

export function WalletContextProvider({ children, wallet, contract }) {
  const [isSignedIn, setIsSignedIn] = useState(wallet.isSignedIn());

  const context = {
    wallet,
    contract,
    isSignedIn,
    setIsSignedIn,
  };

  return (
    <WalletContext.Provider value={context}>{children}</WalletContext.Provider>
  );
}

export default WalletContext;

'''
'''--- client/src/wallet.js ---
import * as nearAPI from "near-api-js";
import { getConfig } from "./config";

export async function initWallet() {
  const config = getConfig(process.env.NODE_ENV);

  const connectConfig = {
    networkId: config.networkId,
    keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: config.nodeUrl,
    walletUrl: config.walletUrl,
    helperUrl: config.helperUrl,
    explorerUrl: config.explorerUrl,
  };

  const near = await nearAPI.connect(connectConfig);
  const wallet = new nearAPI.WalletConnection(near, "nearkick");
  const account = wallet.account();

  const contract = new nearAPI.Contract(account, config.contractAddress, {
    viewMethods: [
      "get_project",
      "get_all_projects",
      "get_all_projects_by_owner",
    ],
    changeMethods: [
      "add_project",
      "update_project",
      "add_supporter_to_project",
      "remove_supporter_from_project",
      "cancel_project",
      "verify_supporter_on_project",
    ],
    sender: account,
  });

  return { wallet, contract };
}

'''
'''--- contract/Cargo.toml ---
[package]
name = "nearkick"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.2"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::UnorderedMap;
use near_sdk::json_types::U128;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::serde_json::json;
use near_sdk::{base64, env, ext_contract, near_bindgen, AccountId, Gas, PanicOnDefault, Promise, Balance};
use std::collections::HashMap;

#[ext_contract(ext_croncat)]
pub trait CronContract {
    fn create_task(
        &mut self,
        contract_id: AccountId,
        function_id: String,
        cadence: String,
        recurring: Option<bool>,
        deposit: Option<U128>,
        gas: Option<u64>,
        arguments: Option<String>,
    ) -> Base64VecU8;
}
#[ext_contract(ext)]
pub trait CronContract {
    fn schedule_callback(
        &mut self,
        #[callback]
        #[serializer(borsh)]
        task_hash: Base64VecU8,
    );
}

#[derive(PartialEq, Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub enum ProjectStatus {
    Funding,
    Funded,
    Cancelled,
    Unfulfilled,
}

#[derive(
    Clone,
    Copy,
    Hash,
    Eq,
    PartialEq,
    PartialOrd,
    Serialize,
    Deserialize,
    BorshDeserialize,
    BorshSerialize,
    Debug,
)]
#[serde(crate = "near_sdk::serde")]
pub enum SupporterType {
    Basic,
    Intermediate,
    Advanced,
}

#[derive(PartialEq, Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub enum SupporterPlans {
    OneTime,
    Recurring,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Supporter {
    pub level: SupporterType,
    pub used_verification: bool,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct Project {
    pub id: u64,
    pub owner: AccountId,
    pub name: String,
    pub description: String,
    pub supporters: HashMap<AccountId, Supporter>,
    pub balance: Balance,
    pub goal: Balance,
    pub end_time: u64,
    pub status: ProjectStatus,
    pub plan: SupporterPlans,
    pub level_amounts: HashMap<SupporterType, Balance>,
    pub images: Vec<String>,
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Nearkick {
    current_id: u64,
    projects: UnorderedMap<u64, Project>,
}

#[near_bindgen]
impl Nearkick {
    #[init]
    pub fn new() -> Self {
        Self {
            current_id: 0,
            projects: UnorderedMap::new(b"p".to_vec()),
        }
    }

    pub fn add_project(
        &mut self,
        goal: U128,
        name: String,
        description: String,
        plan: SupporterPlans,
        end_time: u64,
        cadence: String,
        basic_supporter_amount: U128,
        intermediate_supporter_amount: U128,
        advanced_supporter_amount: U128,
        images: Vec<String>,
    ) -> u64 {
        self.current_id += 1;
        let project = Project {
            id: self.current_id,
            owner: env::signer_account_id(),
            name,
            description,
            supporters: HashMap::new(),
            balance: 0,
            goal: goal.into(),
            end_time: env::block_timestamp() + end_time,
            status: ProjectStatus::Funding,
            plan,
            level_amounts: HashMap::from([
                (SupporterType::Basic, basic_supporter_amount.into()),
                (SupporterType::Intermediate, intermediate_supporter_amount.into()),
                (SupporterType::Advanced, advanced_supporter_amount.into()),
            ]),
            images,
        };

        self.validate_project(&project);

        self.projects.insert(&project.id, &project);

        ext_croncat::create_task(
            env::current_account_id(),
            "check_if_project_funded_or_unfulfilled".to_string(),
            cadence,
            Some(false),
            Some(U128::from(0)),
            Some(30_000_000_000_000), // 30 Tgas
            Some(base64::encode(
                json!({
                    "project_id": self.current_id,
                })
                .to_string(),
            )),
            AccountId::new_unchecked("manager_v1.croncat.testnet".to_string()),
            3_500_000_000_000_000_000_000,
            Gas::from(25_000_000_000_000),
        );

        project.id
    }

    pub fn update_project(
        &mut self,
        project_id: u64,
        goal: U128,
        name: String,
        description: String,
        plan: SupporterPlans,
        basic_supporter_amount: U128,
        intermediate_supporter_amount: U128,
        advanced_supporter_amount: U128,
        images: Vec<String>,
    ) {
        let project = self.projects.get(&project_id).unwrap();

        if project.owner != env::signer_account_id() {
            env::panic_str("Only the owner can update the project");
        }

        let new_project = Project {
            id: project_id,
            owner: env::signer_account_id(),
            name,
            description,
            supporters: project.supporters,
            balance: project.balance,
            goal: goal.into(),
            end_time: project.end_time,
            status: project.status,
            plan,
            level_amounts: HashMap::from([
                (SupporterType::Basic, basic_supporter_amount.into()),
                (SupporterType::Intermediate, intermediate_supporter_amount.into()),
                (SupporterType::Advanced, advanced_supporter_amount.into()),
            ]),
            images,
        };

        self.validate_project(&new_project);

        self.projects.insert(&project_id, &new_project);
    }

    fn validate_project(&self, project: &Project) {
        let mut error_messages = Vec::new();

        if project.name.len() < 3 {
            error_messages.push("Project name must be at least 3 characters");
        }

        if project.name.len() > 100 {
            error_messages.push("Project name must be 100 characters or less");
        }

        if project.description.len() < 100 {
            error_messages.push("Project description must be at least 100 characters");
        }

        if project.description.len() > 500 {
            error_messages.push("Project description must be 500 characters or less");
        }

        if project.goal < 1 {
            error_messages.push("Project goal must be at least 1");
        }

        if project.plan != SupporterPlans::OneTime && project.plan != SupporterPlans::Recurring {
            error_messages.push("Project plan must be either OneTime or Recurring");
        }

        if project.end_time < 1 {
            error_messages.push("Project end date must be in the future");
        }

        if project.level_amounts[&SupporterType::Basic] < 1 {
            error_messages.push("Basic supporter amount must be at least 1");
        }

        if project.level_amounts[&SupporterType::Intermediate] < 1 {
            error_messages.push("Intermediate supporter amount must be at least 1");
        }

        if project.level_amounts[&SupporterType::Advanced] < 1 {
            error_messages.push("Advanced supporter amount must be at least 1");
        }

        if project.images.len() < 1 {
            error_messages.push("Project must have at least 1 image");
        }

        if project.images.len() > 5 {
            error_messages.push("Project images must be 5 or less");
        }

        if error_messages.len() > 0 {
            env::panic_str(error_messages.join(", ").as_str());
        }
    }

    #[payable]
    pub fn add_supporter_to_project(&mut self, project_id: u64, level: SupporterType) -> near_sdk::Promise {
        let supporter_amount_needed = self.get_supporter_level_amount(&project_id, &level);
        let attached_deposit = env::attached_deposit();

        if attached_deposit < supporter_amount_needed {
            env::panic_str(
                format!(
                    "Not enough attached deposit: Needed: {}, Attached: {}",
                    supporter_amount_needed, attached_deposit
                )
                .as_str(),
            );
        }

        let mut project = self.projects.get(&project_id).unwrap();

        if project.status != ProjectStatus::Funding {
            env::panic_str("Project needs to be of status (Funding), cannot add supporter");
        }

        if project.supporters.contains_key(&env::signer_account_id()) {
            env::panic_str("Already supporting project");
        }

        let supporter = Supporter {
            level,
            used_verification: false,
        };
        project
            .supporters
            .insert(env::signer_account_id(), supporter);
        project.balance += supporter_amount_needed;
        if project.balance >= project.goal {
            project.status = ProjectStatus::Funded;
        }
        self.projects.insert(&project_id, &project);

        Promise::new(project.owner).transfer(supporter_amount_needed)
    }

    pub fn remove_supporter_from_project(&mut self, project_id: u64) -> near_sdk::Promise {
        let mut project = self.projects.get(&project_id).unwrap();

        if project.status != ProjectStatus::Funding {
            env::panic_str("An account can only be removed if project has status (Funding)");
        }

        let account_id = env::signer_account_id();

        let supporter = project.supporters.get(&account_id);

        if supporter.is_none() {
            env::panic_str("Account not supporting project");
        }

        let supported_amount = project.level_amounts[&supporter.unwrap().level];

        project.balance -= supported_amount;
        project.supporters.remove(&account_id);

        self.projects.insert(&project_id, &project);

        Promise::new(account_id).transfer(supported_amount)
    }

    pub fn verify_supporter_on_project(
        &mut self,
        project_id: u64,
        supporter_id: AccountId,
    ) -> bool {
        let mut project = self.projects.get(&project_id).unwrap();

        if project.status == ProjectStatus::Cancelled
            || project.status == ProjectStatus::Unfulfilled
        {
            env::panic_str("Project is cancelled or unfulfilled, cannot verify supporter");
        }

        if project.status != ProjectStatus::Funded {
            env::panic_str("Project is not funded, cannot verify supporter");
        }

        let supporter = project.supporters.get(&supporter_id).unwrap().clone();

        if !project.supporters.contains_key(&supporter_id) {
            env::panic_str(format!("{} is not a supporter of this project", supporter_id).as_str());
        }

        if project.plan == SupporterPlans::OneTime && supporter.used_verification {
            env::panic_str("Supporter already used verification code");
        }

        let new_supporter = Supporter {
            level: supporter.level,
            used_verification: true,
        };
        project.supporters.insert(supporter_id, new_supporter);
        self.projects.insert(&project_id, &project);
        true
    }

    pub fn get_all_projects(&self) -> Vec<Project> {
        let mut projects = Vec::new();
        for project in self.projects.iter() {
            projects.push(project.1);
        }
        projects
    }

    pub fn get_all_projects_by_owner(&self, owner: AccountId) -> Vec<Project> {
        let mut projects = Vec::new();
        for project in self.projects.iter() {
            if project.1.owner == owner {
                projects.push(project.1);
            }
        }
        projects
    }

    pub fn get_project(&self, project_id: u64) -> Project {
        self.projects.get(&project_id).unwrap()
    }

    pub fn cancel_project(&mut self, project_id: u64) {
        let mut project = self.projects.get(&project_id).unwrap();

        if project.owner != env::signer_account_id() {
            env::panic_str("Only the owner can cancel the project");
        }

        if project.status != ProjectStatus::Funding {
            env::panic_str("Project must be in Funding status to be cancelled");
        }

        project.status = ProjectStatus::Cancelled;
        self.projects.insert(&project_id, &project);
        self.refund_supporters(project_id);
    }

    pub fn check_if_project_funded_or_unfulfilled(&mut self, project_id: u64) {
        let mut project = self.projects.get(&project_id).unwrap();

        if project.end_time > env::block_timestamp() {
            env::panic_str("Project end time is in the future");
        }

        if project.status != ProjectStatus::Funding {
            env::panic_str(
                "Project must be in Funding status to be checked if funded or unfulfilled",
            );
        }

        if project.goal > project.balance {
            project.status = ProjectStatus::Unfulfilled;
            self.refund_supporters(project_id);
            self.projects.insert(&project_id, &project);
        }
    }

    fn get_supporter_level_amount(&self, project_id: &u64, level: &SupporterType) -> Balance {
        let project = self.projects.get(project_id).unwrap();
        project.level_amounts[&level]
    }

    fn refund_supporters(&mut self, project_id: u64) -> Vec<near_sdk::Promise> {
        let mut transfer_promises = Vec::new();
        let mut project = self.projects.get(&project_id).unwrap();
        for supporter in project.supporters.iter() {
            let amount = self.get_supporter_level_amount(&project_id, &supporter.1.level);
            transfer_promises.push(Promise::new(supporter.0.clone()).transfer(amount));
        }
        project.balance = 0;
        self.projects.insert(&project_id, &project);
        transfer_promises
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::test_utils::VMContextBuilder;
    use near_sdk::{testing_env, VMContext};

    fn get_context(signer_account_id: AccountId, is_view: bool) -> VMContext {
        VMContextBuilder::new()
            .signer_account_id(signer_account_id)
            .is_view(is_view)
            .build()
    }

    fn alice() -> AccountId {
        "alice".parse().unwrap()
    }

    fn goal() -> u128 {
        5_000_000_000_000_000_000_000_000 // 5 NEAR
    }

    fn basic_amount() -> u128 {
        500_000_000_000_000_000_000_000 // 0.5 NEAR
    }

    fn intermediate_amount() -> u128 {
        1_000_000_000_000_000_000_000_000 // 1 NEAR
    }

    fn advanced_amount() -> u128 {
        5_000_000_000_000_000_000_000_000 // 5 NEAR
    }

    fn get_project_mock_data() -> Project {
        Project {
            id: 1,
            owner: env::signer_account_id(),
            name: "Project name".to_string(),
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent molestie augue eu sem mollis, tincidunt.".to_string(),
            supporters: HashMap::new(),
            balance: 0,
            goal: goal(),
            end_time: env::block_timestamp() + 100,
            status: ProjectStatus::Funding,
            plan: SupporterPlans::OneTime,
            level_amounts: HashMap::from([
                (SupporterType::Basic, basic_amount()),
                (SupporterType::Intermediate, intermediate_amount()),
                (SupporterType::Advanced, advanced_amount()),
            ]),
            images: vec!["QmdG5NGpe9Vd4Zp5rs1hbkvsgC5makB1KUSRvV6vaqVyt4".to_string()],
        }
    }

    fn create_project(contract: &mut Nearkick) -> u64 {
        let mock_data = get_project_mock_data();

        let project_id = contract.add_project(
            U128::from(mock_data.goal),
            mock_data.name,
            mock_data.description,
            mock_data.plan,
            mock_data.end_time,
            "0 30 23 * * *".to_string(),
            U128::from(mock_data.level_amounts[&SupporterType::Basic]),
                U128::from(mock_data.level_amounts[&SupporterType::Intermediate]),
                    U128::from(mock_data.level_amounts[&SupporterType::Advanced]),
            mock_data.images,
        );

        project_id
    }

    #[test]
    fn test_add_project() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        assert_eq!(nearkick.projects.get(&project_id).unwrap().id, project_id);
    }

    #[test]
    fn test_update_project() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let new_project_name = "New project name";

        let project_id = create_project(&mut nearkick);
        nearkick.update_project(
            project_id,
            U128::from(goal()),
            new_project_name.to_string(), // updated property
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Praesent molestie augue eu sem mollis, tincidunt.".to_string(),
            SupporterPlans::OneTime,
            U128::from(basic_amount()),
            U128::from(intermediate_amount()),
            U128::from(advanced_amount()),
            vec!["QmdG5NGpe9Vd4Zp5rs1hbkvsgC5makB1KUSRvV6vaqVyt4".to_string()],
        );
        assert_eq!(
            nearkick.projects.get(&project_id).unwrap().name,
            new_project_name
        );
    }

    #[test]
    fn test_add_supporter_to_project() {
        let mut context = get_context(alice(), false);
        context.attached_deposit = basic_amount();
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        nearkick.add_supporter_to_project(project_id, SupporterType::Basic);
        assert_eq!(nearkick.projects.get(&project_id).unwrap().balance, basic_amount());
    }

    #[test]
    fn test_remove_supporter_from_project() {
        let mut context = get_context(alice(), false);
        context.attached_deposit = basic_amount();
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        nearkick.add_supporter_to_project(project_id, SupporterType::Basic);
        assert_eq!(nearkick.projects.get(&project_id).unwrap().supporters.len(), 1);
        nearkick.remove_supporter_from_project(project_id);
        assert_eq!(nearkick.projects.get(&project_id).unwrap().supporters.len(), 0);
    }

    #[test]
    fn test_verify_supporter_on_project() {
        let mut context = get_context(alice(), false);
        context.attached_deposit = advanced_amount(); // depositing 5 NEAR to fund whole goal
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        nearkick.add_supporter_to_project(project_id, SupporterType::Advanced);
        assert_eq!(
            nearkick.verify_supporter_on_project(project_id, alice()),
            true
        );
    }

    #[test]
    fn test_cancel_project() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        nearkick.cancel_project(project_id);
        assert_eq!(
            nearkick.projects.get(&project_id).unwrap().status,
            ProjectStatus::Cancelled
        );
    }

    #[test]
    fn test_check_if_project_funded_or_unfulfilled() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);

        // set end_time to current timestamp to bypass asserts in check
        let mut project = nearkick.get_project(project_id);
        project.end_time = env::block_timestamp();
        nearkick.projects.insert(&project_id, &project);

        assert_eq!(project.status, ProjectStatus::Funding);
        nearkick.check_if_project_funded_or_unfulfilled(project_id);
        let project = nearkick.get_project(project_id);
        assert_eq!(project.status, ProjectStatus::Unfulfilled);
    }

    #[test]
    fn test_get_supporter_level_amount() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        let amount = nearkick.get_supporter_level_amount(&project_id, &SupporterType::Basic);
        assert_eq!(amount, basic_amount());
    }

    #[test]
    fn test_refund_supporters() {
        let mut context = get_context(alice(), false);
        context.attached_deposit = basic_amount();
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        nearkick.add_supporter_to_project(project_id, SupporterType::Basic);
        let project = nearkick.get_project(project_id);
        assert_eq!(project.balance, basic_amount());
        nearkick.refund_supporters(project_id);
        let project = nearkick.get_project(project_id);
        assert_eq!(project.balance, 0);
    }

    #[test]
    fn test_get_all_projects() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        create_project(&mut nearkick);
        let projects = nearkick.get_all_projects();
        assert_eq!(projects.len(), 1);
    }

    #[test]
    fn test_get_all_projects_by_owner() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        create_project(&mut nearkick);
        let projects = nearkick.get_all_projects_by_owner(alice());
        assert_eq!(projects.len(), 1);
    }

    #[test]
    fn test_get_project() {
        let context = get_context(alice(), false);
        testing_env!(context);

        let mut nearkick = Nearkick::new();

        let project_id = create_project(&mut nearkick);
        let project = nearkick.get_project(project_id);
        assert_eq!(project.id, project_id);
    }
}

'''
'''--- create_contract_env.sh ---
#! /bin/bash

CONTRACT_ADDRESS=$(cat ./neardev/dev-account)

echo "REACT_APP_CONTRACT_ADDRESS=${CONTRACT_ADDRESS}"
'''
'''--- package.json ---
{
  "name": "nearkick",
  "version": "1.0.0",
  "description": "Decentralized kickstarter app using NEAR Protocol.",
  "main": "index.js",
  "scripts": {
    "build:compile": "cd contract && rustup target add wasm32-unknown-unknown && cargo build --target wasm32-unknown-unknown --release",
    "build:cpcontract": "cd contract && rm -f nearkick.wasm && cp ./target/wasm32-unknown-unknown/release/nearkick.wasm ./nearkick.wasm",
    "build:contract": "npm run build:compile && npm run build:cpcontract",
    "deploy:setenv": "bash create_contract_env.sh > ./client/.env.development",
    "deploy:contract:dev": "npm run build:contract && near dev-deploy --wasmFile ./contract/nearkick.wasm --initFunction new --initArgs '{}' && npm run deploy:setenv && rm -r -f neardev",
    "contract:test": "cd contract && cargo test"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/amirsaranBIH/nearkick.git"
  },
  "author": "",
  "license": "ISC",
  "bugs": {
    "url": "https://github.com/amirsaranBIH/nearkick/issues"
  },
  "homepage": "https://github.com/amirsaranBIH/nearkick#readme"
}

'''