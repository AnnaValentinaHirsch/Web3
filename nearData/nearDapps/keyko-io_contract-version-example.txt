*GitHub Repository "keyko-io/contract-version-example"*

'''--- .github/workflows/build.yml ---
name: Build
on:
  # (you may add filters for when running the workflow)
  push:
  pull_request:
env:
  # better visualization
  CARGO_TERM_COLOR: always
jobs:
  # the first job is used to acquire some tag-naming information
  #
  # this snippet was based on:
  # https://raw.githubusercontent.com/BurntSushi/ripgrep/master/.github/workflows/release.yml
  # in case a tag was set, a binary release will be made
  create-release-on-tags:
    name: Create a new release on tags
    runs-on: ubuntu-latest
    # env:
      # Set to force version number, e.g., when no tag exists.
      # RG_VERSION: TEST-0.0.0
    outputs:
      rg_version: ${{ env.RG_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.RG_VERSION == ''
        run: |
          # Apparently, this is the right way to get a tag name. Really?
          #
          # See: https://github.community/t5/GitHub-Actions/How-to-get-just-the-tag-name/m-p/32167/highlight/true#M1027
          echo "RG_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.RG_VERSION }}"

  # this second job builds and tests the contracts
  # if it's a tag release, it also creates their release file
  build:
    # in case this is a binary release, we make sure to wait
    # for any requirement to be ready
    needs: ['create-release-on-tags']
    runs-on: ubuntu-latest
    steps:
      # rust compiler for running tests
      - uses: actions/checkout@v2
      - name: Install latest stable (for linux-gnu)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: x86_64-unknown-linux-gnu
          components: rustfmt, clippy
      # rust compiler for creating binaries
      - name: Install latest stable (for wasm)
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
          components: rustfmt, clippy
      # caching (cargo registry)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ubuntu-latest-stable-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo index)
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ubuntu-latest-stable-cargo-index-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo wasm artifacts)
      - name: Cache cargo wasm build (including docs)
        uses: actions/cache@v1
        with:
          path: target/wasm32-unknown-unknown
          key: ubuntu-latest-stable-cargo-release-target-${{ hashFiles('**/Cargo.toml') }}
      # caching (cargo testing artifacts)
      - name: Cache cargo linux-gnu build (for testing)
        uses: actions/cache@v1
        with:
          path: target/x86_64-unknown-linux-gnu
          key: ubuntu-latest-stable-cargo-release-target-${{ hashFiles('**/Cargo.toml') }}
      # downloads/installs any extra requirements
      #
      # binaryen, which is used to reduce the contract's size.
      # based on:
      # https://github.com/rustwasm/walrus/blob/9d6c9de432d6a97478dc76ebdf18aed51584c3af/.github/workflows/main.yml#L56
      - name: Install binaryen
        run: |
          set -e
          curl -L https://github.com/WebAssembly/binaryen/releases/download/version_105/binaryen-version_105-x86_64-linux.tar.gz | tar xzf -
          echo "`pwd`/binaryen-version_105/bin" >> $GITHUB_PATH
      # triggers all build.rs steps
      - name: Trigger build.rs steps
        run: |
          find . \
            -maxdepth 2 \
            -name build.rs  \
            -prune \
            -exec touch -c {} \;
      # Builds the wasm binaries
      - name: Build wasm binaries
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target wasm32-unknown-unknown
      # Copies the wasm binaries to res/ and strips them 
      # (reducing their's sizes)
      - name: Wasm copy and strip
        run: |
          find target/wasm32-unknown-unknown/release \
            -maxdepth 1 \
            -name \*.wasm \
            -prune \
            -exec cp {} res \;
          for f in res/*.wasm
          do
            wasm-opt -Oz -o "$f" "$f"
          done
      - name: Show the wasm files and their sizes
        run: |
          ls -lah res/*.wasm | awk '{print $5 " " $9}'
      # run the tests (which depend on the binaries from res/)
      - name: Run native tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          # the jobs is optional, to reduce RAM usage
          # the --nocapture prints the tests' stdout
          args: --target=x86_64-unknown-linux-gnu --jobs=2 -- --nocapture
      # for tagged runs, create an archive releaseruns
      #
      # based on:
      # https://raw.githubusercontent.com/BurntSushi/ripgrep/master/.github/workflows/release.yml
      - name: Build archive
        if: startsWith(github.ref, 'refs/tags')
        shell: bash
        run: |
          staging="contracts-${{ needs.create-release-on-tags.outputs.rg_version }}"
          mkdir -p "$staging/info"
          # copy all markdown files
          find . -name \*.md -not -path "./target/*" -prune -not -path "./$staging/*" -prune -exec cp --parents {} "$staging/info/" \;
          # copy all wasm files
          cp res/*.wasm "$staging/"
          # save the tag name and git sha to the VERSION file
          echo ${{ needs.create-release-on-tags.outputs.rg_version }} >> "$staging/info/VERSION"
          git rev-parse HEAD >> "$staging/info/VERSION"
          tar czf "$staging.tar.gz" "$staging"
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
      - name: Upload release archive
        if: startsWith(github.ref, 'refs/tags')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.ASSET }}

'''
'''--- Cargo.toml ---
[package]
name = "example-counter"
version = "0.0.2"
authors = ["Thiago Machado <thiago@chikai.io>"]
edition = "2018"
resolver = "2"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = {version = "4.0.0-pre.4", features = ["unstable"]}

[dependencies.contract-version]
git = "https://github.com/nearcomponents/contract-version.git"
rev = "6d452a4"

[dev-dependencies]
near-sdk-sim = "4.0.0-pre.4"

[build-dependencies.contract-version]
git = "https://github.com/nearcomponents/contract-version.git"
rev = "6d452a4"

'''
'''--- README.md ---
# Counter App

This is an example project to show how the [contract-version](https://github.com/nearcomponents/contract-version) library can be used. Please check that library for more details.

This contract has an internal counter that can be incremented, and also has a view method to show information gathered at compile-time.

## Live Testing

Download and extract the latest [release](https://github.com/nearcomponents/contract-version-example/releases), _dev-deploy_ the `example_counter.wasm` and then `near view` the `version` method.

Alternatively, you can use a live contract:
```bash
near view "dev-1644939364756-75367548411779" "version"
```

output:
```json
{
  "name": "example-counter",
  "semver": "0.0.2",
  "git_sha": "5e9df2b96ded9a80c21c0609d27c36758d2bcfca",
  "git_datetime": "2022-02-15 12:03:35 -0300",
  "git_dirty": true,
  "cargo_features": "default",
  "cargo_profile": "release",
  "rustc_semver": "1.56.1",
  "rustc_llvm": "13.0",
  "rustc_sha": "59eed8a2aac0230a8b53e89d4e99d55912ba6b35"
}
```

## Build

Build the wasm binary:

```bash
cargo build --release --target wasm32-unknown-unknown
```

## Test

After having built the wasm binary, copy them to the `res/` directory:

```bash
find target/wasm32-unknown-unknown/release \
    -maxdepth 1 \
    -name \*.wasm \
    -prune \
    -exec cp {} res \;
```

Then run the simulation tests:

```bash
cargo test
```

'''
'''--- build.rs ---
//! Executed before the contract's compilation.

use contract_version::build;

fn main() {
    // generates the version information and set the env vars
    // that will be present at compile-time on the contract's
    // compilation
    build::create_version().set_env();
    // makes it so this build.rs step always runs
    build::setup_rerun();
    //
    // note: if the build.rs step panics, it may not trigger
    // it's automatic rerun, so you'd need to `touch build.rs`
    // to guarantee it's next rerun.
}

'''
'''--- rust-toolchain.toml ---
[toolchain]
channel = "1.56.1"
targets = [ "wasm32-unknown-unknown" ]
'''
'''--- src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::near_bindgen;

pub mod version;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, Default)]
pub struct Counter {
    val: u32,
}

#[near_bindgen]
impl Counter {
    pub fn increment(&mut self) -> u32 {
        self.val += 1;
        self.val
    }
}

'''
'''--- src/version.rs ---
use crate::Counter;
use contract_version::{version_from_env, IVersion, Version};
use near_sdk::near_bindgen;

#[cfg(not(target_arch = "wasm32"))]
use crate::CounterContract;

#[near_bindgen]
impl IVersion for Counter {
    fn version(&self) -> Version {
        version_from_env!()
    }
}

'''
'''--- tests/test_counter.rs ---
#![allow(clippy::ref_in_deref)]

use contract_version::Version;
pub use near_sdk::json_types::{Base64VecU8, U64};
use near_sdk_sim::{self as sim, call, view};

pub mod utils;

#[test]
fn test_counter() {
    let root = sim::init_simulator(None);
    let counter = utils::setup_counter(&root);

    let res = call!(root, counter.increment());
    let val: u32 = res.unwrap_json();
    assert_eq!(val, 1);

    let res = view!(counter.version());
    let version: Version = res.unwrap_json();
    assert_eq!(version.name, "example-counter".to_string());
    assert_eq!(version.semver, "0.0.2".to_string());
}

'''
'''--- tests/utils/mod.rs ---
#![allow(dead_code)]
#![allow(unused_imports)]

use example_counter::CounterContract;
pub use near_sdk::json_types::{Base64VecU8, U64};
use near_sdk::AccountId;
use near_sdk_sim::transaction::ExecutionStatus;
use near_sdk_sim::ExecutionResult;
use near_sdk_sim::{deploy, ContractAccount, UserAccount};

near_sdk_sim::lazy_static_include::lazy_static_include_bytes! {
    COUNTER_WASM_BYTES => "res/example_counter.wasm",
}

pub fn setup_counter(root: &UserAccount) -> ContractAccount<CounterContract> {
    let counter: ContractAccount<CounterContract> = deploy!(
        contract: CounterContract,
        contract_id: "example-counter".to_string(),
        bytes: &COUNTER_WASM_BYTES,
        signer_account: root,
    );

    counter
}

pub fn user(id: u32) -> AccountId {
    format!("user{}", id).parse().unwrap()
}

'''