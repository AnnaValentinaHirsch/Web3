*GitHub Repository "lamha79/mynftstandardcontract"*

'''--- README.md ---
# NEAR NFT-Tutorial JavaScript Edition

[![](https://img.shields.io/github/workflow/status/near-examples/nft-tutorial-js/Tests/master?label=Tests)](https://github.com/near-examples/nft-tutorial-js/actions/workflows/tests.yml)

Welcome to NEAR's NFT tutorial, where we will help you parse the details around NEAR's [NEP-171 standard](https://nomicon.io/Standards/NonFungibleToken/Core.html) (Non-Fungible Token Standard), and show you how to build your own NFT smart contract from the ground up, improving your understanding about the NFT standard along the way. 

## Prerequisites

* [Node.js](/develop/prerequisites#nodejs)
* [NEAR Wallet Account](wallet.testnet.near.org)
* [NEAR-CLI](https://docs.near.org/tools/near-cli#setup)
* [yarn](https://classic.yarnpkg.com/en/docs/install#mac-stable)

## Tutorial Stages 

Each branch you will find in this repo corresponds to various stages of this tutorial with a partially completed contract at each stage. You are welcome to start from any stage you want to learn the most about. 

| Branch        | Docs Tutorial                                                                                    | Description |
| ------------- | ------------------------------------------------------------------------------------------------ | ----------- |
| 1.skeleton    | [Contract Architecture](https://docs.near.org/docs/tutorials/contracts/nfts/js/skeleton) | You'll learn the basic architecture of the NFT smart contract.            |
| 2.minting     | [Minting](https://docs.near.org/docs/tutorials/contracts/nfts/js/minting)                |Here you'll flesh out the skeleton so the smart contract can mint a non-fungible token             |
| 3.enumeration | [Enumeration](https://docs.near.org/docs/tutorials/contracts/nfts/js/enumeration)        |    Here you'll find different enumeration methods that can be used to return the smart contract's states.          |
| 4.core        | [Core](https://docs.near.org/docs/tutorials/contracts/nfts/js/core)                      | In this tutorial you'll extend the NFT contract using the core standard, which will allow you to transfer non-fungible tokens.             |
| 5.approval    | [Approval](https://docs.near.org/docs/tutorials/contracts/nfts/js/approvals)             | Here you'll expand the contract allowing other accounts to transfer NFTs on your behalf.            |
| 6.royalty     | [Royalty](https://docs.near.org/docs/tutorials/contracts/nfts/js/royalty)                                                                                        |Here you'll add the ability for non-fungible tokens to have royalties. This will allow people to get a percentage of the purchase price when an NFT is purchased.             |
| 7.events      | -----------                                                                                        |   This allows indexers to know what functions are being called and make it easier and more reliable to keep track of information that can be used to populate the collectibles tab in the wallet for example. (tutorial docs have yet to be implemented )          |
| 8.marketplace | -----------                                                                                      | -----------             |

The tutorial series also contains a very helpful section on [**Upgrading Smart Contracts**](https://docs.near.org/docs/tutorials/contracts/nfts/js/upgrade-contract). Definitely go and check it out as this is a common pain point.

# Quick-Start 

If you want to see the full completed contract go ahead and clone and build this repo using 

```=bash
git clone https://github.com/near-examples/nft-tutorial-js.git 
cd nft-tutorial-js
yarn && yarn build
```

Now that you've cloned and built the contract we can try a few things. 

## Mint An NFT

Once you've created your near wallet go ahead and login to your wallet with your cli and follow the on-screen prompts

```=bash
near login
```

Once your logged in you have to deploy the contract. Make a subaccount with the name of your choosing 

```=bash 
near create-account nft-example.your-account.testnet --masterAccount your-account.testnet --initialBalance 10
```

After you've created your sub account deploy the contract to that sub account, set this variable to your sub account name

```=bash
NFT_CONTRACT_ID=nft-example.your-account.testnet

MAIN_ACCOUNT=your-account.testnet
```

Verify your new variable has the correct value
```=bash
echo $NFT_CONTRACT_ID

echo $MAIN_ACCOUNT
```

### Deploy Your Contract
```=bash
near deploy --accountId $NFT_CONTRACT_ID --wasmFile build/nft.wasm
```

### Initialize Your Contract 

```=bash
near call $NFT_CONTRACT_ID init '{"owner_id": "'$NFT_CONTRACT_ID'"}' --accountId $NFT_CONTRACT_ID
```

### View Contracts Meta Data

```=bash
near view $NFT_CONTRACT_ID nft_metadata
```
### Minting Token

```bash=
near call $NFT_CONTRACT_ID nft_mint '{"token_id": "token-1", "metadata": {"title": "My Non Fungible Team Token", "description": "The Team Most Certainly Goes :)", "media": "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif"}, "receiver_id": "'$MAIN_ACCOUNT'"}' --accountId $MAIN_ACCOUNT --amount 0.1
```

After you've minted the token go to wallet.testnet.near.org to `your-account.testnet` and look in the collections tab and check out your new sample NFT! 

## View NFT Information

After you've minted your NFT you can make a view call to get a response containing the `token_id` `owner_id` and the `metadata`

```bash=
near view $NFT_CONTRACT_ID nft_token '{"token_id": "token-1"}'
```

## Transfering NFTs

To transfer an NFT go ahead and make another [testnet wallet account](https://wallet.testnet.near.org).

Then run the following
```bash=
MAIN_ACCOUNT_2=your-second-wallet-account.testnet
```

Verify the correct variable names with this

```=bash
echo $NFT_CONTRACT_ID

echo $MAIN_ACCOUNT

echo $MAIN_ACCOUNT_2
```

To initiate the transfer..

```bash=
near call $NFT_CONTRACT_ID nft_transfer '{"receiver_id": "$MAIN_ACCOUNT_2", "token_id": "token-1", "memo": "Go Team :)"}' --accountId $MAIN_ACCOUNT --depositYocto 1
```

In this call you are depositing 1 yoctoNEAR for security and so that the user will be redirected to the NEAR wallet.
'''
'''--- __tests__/test-template.ava.js ---
import { Worker } from 'near-workspaces';
import test from 'ava';

test.beforeEach(async t => {
    // Init the worker and start a Sandbox server
    const worker = await Worker.init();

    // Prepare sandbox for tests, create accounts, deploy contracts, etc.
    const root = worker.rootAccount;

    // Deploy the counter contract.
    const counter = await root.createAndDeploy(
        root.getSubAccount('counter').accountId,
        './build/nft.wasm'
    );

    // Init the contract
    await counter.call(counter, 'init', {});

    // Test users
    const ali = await root.createSubAccount('ali');
    const bob = await root.createSubAccount('bob');

    // Save state for test runs
    t.context.worker = worker;
    t.context.accounts = { root, counter, ali, bob };
});

// If the environment is reused, use test.after to replace test.afterEach
test.afterEach(async t => {
    await t.context.worker.tearDown().catch(error => {
        console.log('Failed to tear down the worker:', error);
    });
});

test('Initial count is 0', async t => {
    const { counter } = t.context.accounts;
    const result = await counter.view('getCount', {});
    t.is(result, 0);
});

test('Increase works', async t => {
    const { counter, ali, bob } = t.context.accounts;
    await ali.call(counter, 'increase', {});

    let result = await counter.view('getCount', {});
    t.is(result, 1);

    await bob.call(counter, 'increase', { n: 4 });
    result = await counter.view('getCount', {});
    t.is(result, 5);
});

test('Decrease works', async t => {
    const { counter, ali, bob } = t.context.accounts;
    await ali.call(counter, 'decrease', {});

    let result = await counter.view('getCount', {});
    t.is(result, -1);

    await bob.call(counter, 'decrease', { n: 4 });
    result = await counter.view('getCount', {});
    t.is(result, -5);
});
'''
'''--- babel.config.json ---
{
  "plugins": [
    "near-sdk-js/lib/build-tools/near-bindgen-exporter",
    ["@babel/plugin-proposal-decorators", {"version": "legacy"}]
  ],
  "presets": ["@babel/preset-typescript"]
}
'''
'''--- build/builder.c ---
#include <string.h>
#include "../node_modules/near-sdk-js/cli/deps/quickjs/quickjs-libc-min.h"
#include "../node_modules/near-sdk-js/cli/deps/quickjs/libbf.h"
#include "code.h"

static JSContext *JS_NewCustomContext(JSRuntime *rt)
{
  JSContext *ctx = JS_NewContextRaw(rt);
  if (!ctx)
    return NULL;
  JS_AddIntrinsicBaseObjects(ctx);
  JS_AddIntrinsicDate(ctx);
  JS_AddIntrinsicEval(ctx);
  JS_AddIntrinsicStringNormalize(ctx);
  JS_AddIntrinsicRegExp(ctx);
  JS_AddIntrinsicJSON(ctx);
  JS_AddIntrinsicProxy(ctx);
  JS_AddIntrinsicMapSet(ctx);
  JS_AddIntrinsicTypedArrays(ctx);
  JS_AddIntrinsicPromise(ctx);
  JS_AddIntrinsicBigInt(ctx);
  return ctx;
}

#define DEFINE_NEAR_METHOD(name) \
  void name () __attribute__((export_name(#name))) {\
    JSRuntime *rt;\
    JSContext *ctx;\
    JSValue mod_obj, fun_obj, result, error, error_message, error_stack;\
    const char *error_message_c, *error_stack_c;\
    char *error_c;\
    size_t msg_len, stack_len;\
    rt = JS_NewRuntime();\
    ctx = JS_NewCustomContext(rt);\
    js_add_near_host_functions(ctx);\
    mod_obj = js_load_module_binary(ctx, code, code_size);\
    fun_obj = JS_GetProperty(ctx, mod_obj, JS_NewAtom(ctx, #name));\
    result = JS_Call(ctx, fun_obj, mod_obj, 0, NULL);\
    if (JS_IsException(result)) {\
      error = JS_GetException(ctx);\
      error_message = JS_GetPropertyStr(ctx, error, "message");\
      error_stack = JS_GetPropertyStr(ctx, error, "stack");\
      error_message_c = JS_ToCStringLen(ctx, &msg_len, error_message);\
      error_stack_c = JS_ToCStringLen(ctx, &stack_len, error_stack);\
      error_c = malloc(msg_len+1+stack_len);\
      strncpy(error_c, error_message_c, msg_len);\
      error_c[msg_len] = '\n';\
      strncpy(error_c+msg_len+1, error_stack_c, stack_len);\
      panic_utf8(msg_len+1+stack_len, (uint64_t)error_c);\
    }\
    js_std_loop(ctx);\
  }

// #############
// # Registers #
// #############
extern void read_register(uint64_t register_id, uint64_t ptr);
extern uint64_t register_len(uint64_t register_id);
extern void write_register(uint64_t register_id, uint64_t data_len, uint64_t data_ptr);
// ###############
// # Context API #
// ###############
extern void current_account_id(uint64_t register_id);
extern void signer_account_id(uint64_t register_id);
extern void signer_account_pk(uint64_t register_id);
extern void predecessor_account_id(uint64_t register_id);
extern void input(uint64_t register_id);
extern uint64_t block_index();
extern uint64_t block_timestamp();
extern uint64_t epoch_height();
extern uint64_t storage_usage();
// #################
// # Economics API #
// #################
extern void account_balance(uint64_t balance_ptr);
extern void account_locked_balance(uint64_t balance_ptr);
extern void attached_deposit(uint64_t balance_ptr);
extern uint64_t prepaid_gas();
extern uint64_t used_gas();
// ############
// # Math API #
// ############
extern void random_seed(uint64_t register_id);
extern void sha256(uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern void keccak256(uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern void keccak512(uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern void ripemd160(uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern uint64_t ecrecover(uint64_t hash_len, uint64_t hash_ptr, uint64_t sign_len, uint64_t sig_ptr, uint64_t v, uint64_t malleability_flag, uint64_t register_id);
// #####################
// # Miscellaneous API #
// #####################
extern void value_return(uint64_t value_len, uint64_t value_ptr);
extern void panic(void);
extern void panic_utf8(uint64_t len, uint64_t ptr);
extern void log_utf8(uint64_t len, uint64_t ptr);
extern void log_utf16(uint64_t len, uint64_t ptr);
// Name confliction with WASI. Can be re-exported with a different name on NEAR side with a protocol upgrade
// Or, this is actually not a primitive, can be implement with log and panic host functions in C side or JS side. 
// extern void abort(uint32_t msg_ptr, uint32_t filename_ptr, uint32_t u32, uint32_t col);
// ################
// # Promises API #
// ################
extern uint64_t promise_create(uint64_t account_id_len, uint64_t account_id_ptr, uint64_t method_name_len, uint64_t method_name_ptr, uint64_t arguments_len, uint64_t arguments_ptr, uint64_t amount_ptr, uint64_t gas);
extern uint64_t promise_then(uint64_t promise_index, uint64_t account_id_len, uint64_t account_id_ptr, uint64_t method_name_len, uint64_t method_name_ptr, uint64_t arguments_len, uint64_t arguments_ptr, uint64_t amount_ptr, uint64_t gas);
extern uint64_t promise_and(uint64_t promise_idx_ptr, uint64_t promise_idx_count);
extern uint64_t promise_batch_create(uint64_t account_id_len, uint64_t account_id_ptr);
extern uint64_t promise_batch_then(uint64_t promise_index, uint64_t account_id_len, uint64_t account_id_ptr);
// #######################
// # Promise API actions #
// #######################
extern void promise_batch_action_create_account(uint64_t promise_index);
extern void promise_batch_action_deploy_contract(uint64_t promise_index, uint64_t code_len, uint64_t code_ptr);
extern void promise_batch_action_function_call(uint64_t promise_index, uint64_t method_name_len, uint64_t method_name_ptr, uint64_t arguments_len, uint64_t arguments_ptr, uint64_t amount_ptr, uint64_t gas);
extern void promise_batch_action_transfer(uint64_t promise_index, uint64_t amount_ptr);
extern void promise_batch_action_stake(uint64_t promise_index, uint64_t amount_ptr, uint64_t public_key_len, uint64_t public_key_ptr);
extern void promise_batch_action_add_key_with_full_access(uint64_t promise_index, uint64_t public_key_len, uint64_t public_key_ptr, uint64_t nonce);
extern void promise_batch_action_add_key_with_function_call(uint64_t promise_index, uint64_t public_key_len, uint64_t public_key_ptr, uint64_t nonce, uint64_t allowance_ptr, uint64_t receiver_id_len, uint64_t receiver_id_ptr, uint64_t method_names_len, uint64_t method_names_ptr);
extern void promise_batch_action_delete_key(uint64_t promise_index, uint64_t public_key_len, uint64_t public_key_ptr);
extern void promise_batch_action_delete_account(uint64_t promise_index, uint64_t beneficiary_id_len, uint64_t beneficiary_id_ptr);
// #######################
// # Promise API results #
// #######################
extern uint64_t promise_results_count(void);
extern uint64_t promise_result(uint64_t result_idx, uint64_t register_id);
extern void promise_return(uint64_t promise_idx);
// ###############
// # Storage API #
// ###############
extern uint64_t storage_write(uint64_t key_len, uint64_t key_ptr, uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern uint64_t storage_read(uint64_t key_len, uint64_t key_ptr, uint64_t register_id);
extern uint64_t storage_remove(uint64_t key_len, uint64_t key_ptr, uint64_t register_id);
extern uint64_t storage_has_key(uint64_t key_len, uint64_t key_ptr);
// #################
// # Validator API #
// #################
extern void validator_stake(uint64_t account_id_len, uint64_t account_id_ptr, uint64_t stake_ptr);
extern void validator_total_stake(uint64_t stake_ptr);
// #############
// # Alt BN128 #
// #############
#ifdef NIGHTLY
extern void alt_bn128_g1_multiexp(uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern void alt_bn128_g1_sum(uint64_t value_len, uint64_t value_ptr, uint64_t register_id);
extern uint64_t alt_bn128_pairing_check(uint64_t value_len, uint64_t value_ptr);
#endif

static JSValue near_read_register(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  char *data;
  uint64_t data_len;
  JSValue ret;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  data_len = register_len(register_id);
  if (data_len != UINT64_MAX) {
    data = malloc(data_len);
    read_register(register_id, (uint64_t)data);
    ret = JS_NewStringLenRaw(ctx, data, data_len);
    free(data);
    return ret;
  } else {
    return JS_UNDEFINED;
  }
}

static JSValue near_register_len(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id, len;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  len = register_len(register_id);
  return JS_NewBigUint64(ctx, len);
}

static JSValue near_write_register(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[1]);

  write_register(register_id, data_len, (uint64_t)data_ptr);
  return JS_UNDEFINED;
}

static JSValue near_current_account_id(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  current_account_id(register_id);
  return JS_UNDEFINED;
}

static JSValue near_signer_account_id(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
  uint64_t register_id;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  signer_account_id(register_id);
  return JS_UNDEFINED;
}

static JSValue near_signer_account_pk(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
  uint64_t register_id;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  signer_account_pk(register_id);
  return JS_UNDEFINED;
}

static JSValue near_predecessor_account_id(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) {
  uint64_t register_id;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  predecessor_account_id(register_id);
  return JS_UNDEFINED;
}

static JSValue near_input(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  input(register_id);
  return JS_UNDEFINED;
}

static JSValue near_block_index(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = block_index();
  return JS_NewBigUint64(ctx, value);
}

static JSValue near_block_timestamp(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = block_timestamp();
  return JS_NewBigUint64(ctx, value);
}

static JSValue near_epoch_height(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = epoch_height();
  return JS_NewBigUint64(ctx, value);
}

static JSValue near_storage_usage(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = storage_usage();
  return JS_NewBigUint64(ctx, value);
}

// ptr[0] ptr[1] is little-endian u128.
static JSValue u128_to_quickjs(JSContext *ctx, uint64_t* ptr) {
  JSValue value;
  bf_t* bn;
  bf_t b;

  value = JS_NewBigInt(ctx);
  bn = JS_GetBigInt(value);
  // from ptr[] to bn
  // high 64 bits
  bf_set_ui(bn, ptr[1]);
  bf_mul_2exp(bn, 64, BF_PREC_INF, BF_RNDZ);
  // low 64 bits
  bf_init(bn->ctx, &b);
  bf_set_ui(&b, ptr[0]);
  bf_add(bn, bn, &b, BF_PREC_INF, BF_RNDZ);
  bf_delete(&b);
  
  return value;
}

static int quickjs_bigint_to_u128(JSContext *ctx, JSValueConst val, uint64_t* ptr) {
  bf_t* a;
  bf_t q, r, b, one, u128max;
  a = JS_GetBigInt(val);
  bf_init(a->ctx, &u128max);
  bf_set_ui(&u128max, 1);
  bf_mul_2exp(&u128max, 128, BF_PREC_INF, BF_RNDZ);
  if (bf_cmp_le(&u128max, a)) {
    return 1;
  }
  bf_init(a->ctx, &q);
  bf_init(a->ctx, &r);
  bf_init(a->ctx, &b);
  bf_init(a->ctx, &one);
  bf_set_ui(&b, UINT64_MAX);
  bf_set_ui(&one, 1);
  bf_add(&b, &b, &one, BF_PREC_INF, BF_RNDZ);
  bf_divrem(&q, &r, a, &b, BF_PREC_INF, BF_RNDZ, BF_RNDZ);
  
  bf_get_uint64(ptr, &r);
  bf_get_uint64(ptr+1, &q);
  return 0;
}

static int quickjs_int_to_u128(JSContext *ctx, JSValueConst val, uint64_t* ptr) {
  if (JS_ToUint64Ext(ctx, ptr, val) < 0) {
    return 1;
  }
  ptr[1] = 0;
  return 0;
}

static int quickjs_to_u128(JSContext *ctx, JSValueConst val, uint64_t* ptr) {
  if (JS_IsBigInt(ctx, val))
    return quickjs_bigint_to_u128(ctx, val, ptr);
  else {
    return quickjs_int_to_u128(ctx, val, ptr);
  }
}

static JSValue near_account_balance(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{  
  uint64_t ptr[2];

  account_balance((uint64_t)ptr); 
  return u128_to_quickjs(ctx, ptr);
}

static JSValue near_account_locked_balance(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t ptr[2];

  account_locked_balance((uint64_t)ptr);
  return u128_to_quickjs(ctx, ptr);
}

static JSValue near_attached_deposit(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t ptr[2];

  attached_deposit((uint64_t)ptr);
  return u128_to_quickjs(ctx, ptr);
}

static JSValue near_prepaid_gas(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = prepaid_gas();
  return JS_NewBigUint64(ctx, value);
}

static JSValue near_used_gas(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = used_gas();
  return JS_NewBigUint64(ctx, value);
}

static JSValue near_random_seed(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;

  if (JS_ToUint64Ext(ctx, &register_id, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  random_seed(register_id);
  return JS_UNDEFINED;
}

static JSValue near_sha256(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  
  sha256(data_len, (uint64_t)data_ptr, register_id);
  return JS_UNDEFINED;
}

static JSValue near_keccak256(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }  
  keccak256(data_len, (uint64_t)data_ptr, register_id);
  return JS_UNDEFINED;
}

static JSValue near_keccak512(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  
  keccak512(data_len, (uint64_t)data_ptr, register_id);
  return JS_UNDEFINED;
}

static JSValue near_ripemd160(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  
  ripemd160(data_len, (uint64_t)data_ptr, register_id);
  return JS_UNDEFINED;
}

static JSValue near_ecrecover(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t malleability_flag, v, register_id, result;
  const char *hash_ptr, *sig_ptr;
  size_t hash_len, sign_len;

  hash_ptr = JS_ToCStringLenRaw(ctx, &hash_len, argv[0]);
  sig_ptr = JS_ToCStringLenRaw(ctx, &sign_len, argv[1]);
  if (JS_ToUint64Ext(ctx, &malleability_flag, argv[2]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for malleability_flag");
  }
  if (JS_ToUint64Ext(ctx, &v, argv[3]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for v");
  }
  if (JS_ToUint64Ext(ctx, &register_id, argv[4]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
 
  result = ecrecover(hash_len, (uint64_t)hash_ptr, sign_len, (uint64_t)sig_ptr, malleability_flag, v, register_id);
  return JS_NewBigUint64(ctx, result);
}

static JSValue near_value_return(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv) 
{
  const char *value_ptr;
  size_t value_len;

  value_ptr = JS_ToCStringLenRaw(ctx, &value_len, argv[0]);
  value_return(value_len, (uint64_t)value_ptr);
  return JS_UNDEFINED;
}

static JSValue near_panic(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *data_ptr;
  size_t data_len;

  if (argc == 1) {
    data_ptr = JS_ToCStringLen(ctx, &data_len, argv[0]);
    panic_utf8(data_len, (uint64_t)data_ptr);
  } else {
    panic();
  }
  return JS_UNDEFINED;
}

static JSValue near_panic_utf8(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  
  panic_utf8(data_len, (uint64_t)data_ptr);
  return JS_UNDEFINED;
}

static JSValue near_log(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLen(ctx, &data_len, argv[0]);
  
  log_utf8(data_len, (uint64_t)data_ptr);
  return JS_UNDEFINED;
}

static JSValue near_log_utf8(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  
  log_utf8(data_len, (uint64_t)data_ptr);
  return JS_UNDEFINED;
}

static JSValue near_log_utf16(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  log_utf16(data_len, (uint64_t)data_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_create(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *account_id_ptr, *method_name_ptr, *arguments_ptr;
  size_t account_id_len, method_name_len, arguments_len;
  uint64_t amount_ptr[2]; // amount is u128
  uint64_t gas, ret;

  account_id_ptr = JS_ToCStringLen(ctx, &account_id_len, argv[0]);
  method_name_ptr = JS_ToCStringLen(ctx, &method_name_len, argv[1]);
  arguments_ptr = JS_ToCStringLenRaw(ctx, &arguments_len, argv[2]);
  if (quickjs_to_u128(ctx, argv[3], amount_ptr) != 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint128 for amount");
  }
  if (JS_ToUint64Ext(ctx, &gas, argv[4]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for gas");
  }

  ret = promise_create(account_id_len, (uint64_t)account_id_ptr, method_name_len, (uint64_t)method_name_ptr, arguments_len, (uint64_t)arguments_ptr, (uint64_t)amount_ptr, gas);
  
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_promise_then(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *account_id_ptr, *method_name_ptr, *arguments_ptr;
  size_t account_id_len, method_name_len, arguments_len;
  uint64_t amount_ptr[2]; // amount is u128
  uint64_t gas, ret;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  account_id_ptr = JS_ToCStringLen(ctx, &account_id_len, argv[1]);
  method_name_ptr = JS_ToCStringLen(ctx, &method_name_len, argv[2]);
  arguments_ptr = JS_ToCStringLenRaw(ctx, &arguments_len, argv[3]);
  if (quickjs_to_u128(ctx, argv[4], amount_ptr) != 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint128 for amount");
  }
  if (JS_ToUint64Ext(ctx, &gas, argv[5]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for gas");
  }

  ret = promise_then(promise_index, account_id_len, (uint64_t)account_id_ptr, method_name_len, (uint64_t)method_name_ptr, arguments_len, (uint64_t)arguments_ptr, (uint64_t)amount_ptr, gas);
  
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_promise_and(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_idx_ptr[argc], ret;

  for(int i = 0; i < argc; i++) {
    if (JS_ToUint64Ext(ctx, &promise_idx_ptr[i], argv[i]) < 0) {
      return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_id");
    }
  }
  ret = promise_and((uint64_t)promise_idx_ptr, argc);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_promise_batch_create(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *account_id_ptr;
  size_t account_id_len;
  uint64_t ret;

  account_id_ptr = JS_ToCStringLen(ctx, &account_id_len, argv[0]);
  ret = promise_batch_create(account_id_len, (uint64_t)account_id_ptr);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_promise_batch_then(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *account_id_ptr;
  size_t account_id_len;
  uint64_t ret;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  account_id_ptr = JS_ToCStringLen(ctx, &account_id_len, argv[1]);
  ret = promise_batch_then(promise_index, account_id_len, (uint64_t)account_id_ptr);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_promise_batch_action_create_account(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  promise_batch_action_create_account(promise_index);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_deploy_contract(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *code_ptr;
  size_t code_len;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  code_ptr = JS_ToCStringLenRaw(ctx, &code_len, argv[1]);
  promise_batch_action_deploy_contract(promise_index, code_len, (uint64_t)code_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_function_call(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *method_name_ptr, *arguments_ptr;
  size_t method_name_len, arguments_len;
  uint64_t amount_ptr[2]; // amount is u128
  uint64_t gas;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  method_name_ptr = JS_ToCStringLen(ctx, &method_name_len, argv[1]);
  arguments_ptr = JS_ToCStringLenRaw(ctx, &arguments_len, argv[2]);
  if (quickjs_to_u128(ctx, argv[3], amount_ptr) != 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint128 for amount");
  }
  if (JS_ToUint64Ext(ctx, &gas, argv[4]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for gas");
  }
  promise_batch_action_function_call(promise_index, method_name_len, (uint64_t)method_name_ptr, arguments_len, (uint64_t)arguments_ptr, (uint64_t)amount_ptr, gas);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_transfer(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  uint64_t amount_ptr[2]; // amount is u128

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  if (quickjs_to_u128(ctx, argv[1], amount_ptr) != 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint128 for amount");
  }
  promise_batch_action_transfer(promise_index, (uint64_t)amount_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_stake(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  uint64_t amount_ptr[2];
  const char *public_key_ptr;
  size_t public_key_len;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  if (quickjs_to_u128(ctx, argv[1], amount_ptr) != 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint128 for amount");
  }
  public_key_ptr = JS_ToCStringLenRaw(ctx, &public_key_len, argv[2]);

  promise_batch_action_stake(promise_index, (uint64_t)amount_ptr, public_key_len, (uint64_t)public_key_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_add_key_with_full_access(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *public_key_ptr;
  size_t public_key_len;
  uint64_t nonce;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  public_key_ptr = JS_ToCStringLenRaw(ctx, &public_key_len, argv[1]);
  if (JS_ToUint64Ext(ctx, &nonce, argv[2]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for nonce");
  }
  promise_batch_action_add_key_with_full_access(promise_index, public_key_len, (uint64_t)public_key_ptr, nonce);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_add_key_with_function_call(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *public_key_ptr, *receiver_id_ptr, *method_names_ptr;
  size_t public_key_len, receiver_id_len, method_names_len;
  uint64_t nonce, allowance_ptr[2];

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  public_key_ptr = JS_ToCStringLenRaw(ctx, &public_key_len, argv[1]);
  if (JS_ToUint64Ext(ctx, &nonce, argv[2]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for nonce");
  }
  if (quickjs_to_u128(ctx, argv[3], allowance_ptr) != 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint128 for allowance");
  }
  receiver_id_ptr = JS_ToCStringLen(ctx, &receiver_id_len, argv[4]);
  method_names_ptr = JS_ToCStringLen(ctx, &method_names_len, argv[5]);

  promise_batch_action_add_key_with_function_call(promise_index, public_key_len, (uint64_t)public_key_ptr, nonce, (uint64_t)allowance_ptr, receiver_id_len, (uint64_t)receiver_id_ptr, method_names_len, (uint64_t)method_names_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_delete_key(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *public_key_ptr;
  size_t public_key_len;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  public_key_ptr = JS_ToCStringLenRaw(ctx, &public_key_len, argv[1]);
  promise_batch_action_delete_key(promise_index, public_key_len, (uint64_t)public_key_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_batch_action_delete_account(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_index;
  const char *beneficiary_id_ptr;
  size_t beneficiary_id_len;

  if (JS_ToUint64Ext(ctx, &promise_index, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_index");
  }
  beneficiary_id_ptr = JS_ToCStringLen(ctx, &beneficiary_id_len, argv[1]);
  promise_batch_action_delete_account(promise_index, beneficiary_id_len, (uint64_t)beneficiary_id_ptr);
  return JS_UNDEFINED;
}

static JSValue near_promise_results_count(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t value;

  value = promise_results_count();
  return JS_NewBigUint64(ctx, value);
}

static JSValue near_promise_result(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t result_idx, register_id;
  uint64_t ret;

  if (JS_ToUint64Ext(ctx, &result_idx, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for result_idx");
  }
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  ret = promise_result(result_idx, register_id);

  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_promise_return(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t promise_idx;
  if (JS_ToUint64Ext(ctx, &promise_idx, argv[0]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for promise_idx");
  }
  promise_return(promise_idx);
  
  return JS_UNDEFINED;
}

static JSValue near_storage_write(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *key_ptr, *value_ptr;
  size_t key_len, value_len;
  uint64_t register_id, ret;

  key_ptr = JS_ToCStringLenRaw(ctx, &key_len, argv[0]);
  value_ptr = JS_ToCStringLenRaw(ctx, &value_len, argv[1]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[2]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  ret = storage_write(key_len, (uint64_t)key_ptr, value_len, (uint64_t)value_ptr, register_id);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_storage_read(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *key_ptr;
  size_t key_len;
  uint64_t register_id;
  uint64_t ret;

  key_ptr = JS_ToCStringLenRaw(ctx, &key_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  ret = storage_read(key_len, (uint64_t)key_ptr, register_id);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_storage_remove(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *key_ptr;
  size_t key_len;
  uint64_t register_id;
  uint64_t ret;

  key_ptr = JS_ToCStringLenRaw(ctx, &key_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }
  ret = storage_remove(key_len, (uint64_t)key_ptr, register_id);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_storage_has_key(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *key_ptr;
  size_t key_len;
  uint64_t ret;

  key_ptr = JS_ToCStringLenRaw(ctx, &key_len, argv[0]);
  ret = storage_has_key(key_len, (uint64_t)key_ptr);
  return JS_NewBigUint64(ctx, ret);
}

static JSValue near_validator_stake(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *account_id_ptr;
  size_t account_id_len;
  uint64_t stake_ptr[2];

  account_id_ptr = JS_ToCStringLen(ctx, &account_id_len, argv[0]);
  validator_stake(account_id_len, (uint64_t)account_id_ptr, (uint64_t)stake_ptr);

  return u128_to_quickjs(ctx, stake_ptr);
}

static JSValue near_validator_total_stake(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t stake_ptr[2];

  validator_total_stake((uint64_t)stake_ptr);
  return u128_to_quickjs(ctx, stake_ptr);
}

#ifdef NIGHTLY
static JSValue near_alt_bn128_g1_multiexp(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }

  alt_bn128_g1_multiexp(data_len, (uint64_t)data_ptr, register_id);
  return JS_UNDEFINED;
}

static JSValue near_alt_bn128_g1_sum(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  uint64_t register_id;
  const char *data_ptr;
  size_t data_len;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  if (JS_ToUint64Ext(ctx, &register_id, argv[1]) < 0) {
    return JS_ThrowTypeError(ctx, "Expect Uint64 for register_id");
  }

  alt_bn128_g1_sum(data_len, (uint64_t)data_ptr, register_id);
  return JS_UNDEFINED;
}

static JSValue near_alt_bn128_pairing_check(JSContext *ctx, JSValueConst this_val, int argc, JSValueConst *argv)
{
  const char *data_ptr;
  size_t data_len;
  uint64_t ret;

  data_ptr = JS_ToCStringLenRaw(ctx, &data_len, argv[0]);
  
  ret = alt_bn128_pairing_check(data_len, (uint64_t)data_ptr);
  return JS_NewBigUint64(ctx, ret);
}
#endif

static void js_add_near_host_functions(JSContext* ctx) {
  JSValue global_obj, env;

  global_obj = JS_GetGlobalObject(ctx);
  env = JS_NewObject(ctx);

  JS_SetPropertyStr(ctx, env, "read_register", JS_NewCFunction(ctx, near_read_register, "read_register", 1));
  JS_SetPropertyStr(ctx, env, "register_len", JS_NewCFunction(ctx, near_register_len, "register_len", 1));
  JS_SetPropertyStr(ctx, env, "write_register", JS_NewCFunction(ctx, near_write_register, "write_register", 2));
  JS_SetPropertyStr(ctx, env, "current_account_id", JS_NewCFunction(ctx, near_current_account_id, "current_account_id", 1));
  JS_SetPropertyStr(ctx, env, "signer_account_id", JS_NewCFunction(ctx, near_signer_account_id, "signer_account_id", 1));
  JS_SetPropertyStr(ctx, env, "signer_account_pk", JS_NewCFunction(ctx, near_signer_account_pk, "signer_account_pk", 1));
  JS_SetPropertyStr(ctx, env, "predecessor_account_id", JS_NewCFunction(ctx, near_predecessor_account_id, "predecessor_account_id", 1));
  JS_SetPropertyStr(ctx, env, "input", JS_NewCFunction(ctx, near_input, "input", 1));
  JS_SetPropertyStr(ctx, env, "block_index", JS_NewCFunction(ctx, near_block_index, "block_index", 0));
  JS_SetPropertyStr(ctx, env, "block_timestamp", JS_NewCFunction(ctx, near_block_timestamp, "block_timestamp", 0));
  JS_SetPropertyStr(ctx, env, "epoch_height", JS_NewCFunction(ctx, near_epoch_height, "epoch_height", 0));
  JS_SetPropertyStr(ctx, env, "storage_usage", JS_NewCFunction(ctx, near_storage_usage, "storage_usage", 0));
  JS_SetPropertyStr(ctx, env, "account_balance", JS_NewCFunction(ctx, near_account_balance, "account_balance", 0));
  JS_SetPropertyStr(ctx, env, "account_locked_balance", JS_NewCFunction(ctx, near_account_locked_balance, "account_locked_balance", 0));
  JS_SetPropertyStr(ctx, env, "attached_deposit", JS_NewCFunction(ctx, near_attached_deposit, "attached_deposit", 0));
  JS_SetPropertyStr(ctx, env, "prepaid_gas", JS_NewCFunction(ctx, near_prepaid_gas, "prepaid_gas", 0));
  JS_SetPropertyStr(ctx, env, "used_gas", JS_NewCFunction(ctx, near_used_gas, "used_gas", 0));
  JS_SetPropertyStr(ctx, env, "random_seed", JS_NewCFunction(ctx, near_random_seed, "random_seed", 1));
  JS_SetPropertyStr(ctx, env, "sha256", JS_NewCFunction(ctx, near_sha256, "sha256", 2));
  JS_SetPropertyStr(ctx, env, "keccak256", JS_NewCFunction(ctx, near_keccak256, "keccak256", 2));
  JS_SetPropertyStr(ctx, env, "keccak512", JS_NewCFunction(ctx, near_keccak512, "keccak512", 2));
  JS_SetPropertyStr(ctx, env, "ripemd160", JS_NewCFunction(ctx, near_ripemd160, "ripemd160", 2));
  JS_SetPropertyStr(ctx, env, "ecrecover", JS_NewCFunction(ctx, near_ecrecover, "ecrecover", 5));
  JS_SetPropertyStr(ctx, env, "value_return", JS_NewCFunction(ctx, near_value_return, "value_return", 1));
  JS_SetPropertyStr(ctx, env, "panic", JS_NewCFunction(ctx, near_panic, "panic", 1));
  JS_SetPropertyStr(ctx, env, "panic_utf8", JS_NewCFunction(ctx, near_panic_utf8, "panic_utf8", 1));
  JS_SetPropertyStr(ctx, env, "log", JS_NewCFunction(ctx, near_log, "log", 1));
  JS_SetPropertyStr(ctx, env, "log_utf8", JS_NewCFunction(ctx, near_log_utf8, "log_utf8", 1));
  JS_SetPropertyStr(ctx, env, "log_utf16", JS_NewCFunction(ctx, near_log_utf16, "log_utf16", 1));
  JS_SetPropertyStr(ctx, env, "promise_create", JS_NewCFunction(ctx, near_promise_create, "promise_create", 5));
  JS_SetPropertyStr(ctx, env, "promise_then", JS_NewCFunction(ctx, near_promise_then, "promise_then", 6));
  JS_SetPropertyStr(ctx, env, "promise_and", JS_NewCFunction(ctx, near_promise_and, "promise_and", 1));
  JS_SetPropertyStr(ctx, env, "promise_batch_create", JS_NewCFunction(ctx, near_promise_batch_create, "promise_batch_create", 1));
  JS_SetPropertyStr(ctx, env, "promise_batch_then", JS_NewCFunction(ctx, near_promise_batch_then, "promise_batch_then", 2));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_create_account", JS_NewCFunction(ctx, near_promise_batch_action_create_account, "promise_batch_action_create_account", 1));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_deploy_contract", JS_NewCFunction(ctx, near_promise_batch_action_deploy_contract, "promise_batch_action_deploy_contract", 2));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_function_call", JS_NewCFunction(ctx, near_promise_batch_action_function_call, "promise_batch_action_function_call", 5));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_transfer", JS_NewCFunction(ctx, near_promise_batch_action_transfer, "promise_batch_action_transfer", 2));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_stake", JS_NewCFunction(ctx, near_promise_batch_action_stake, "promise_batch_action_stake", 3));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_add_key_with_full_access", JS_NewCFunction(ctx, near_promise_batch_action_add_key_with_full_access, "promise_batch_action_add_key_with_full_access", 3));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_add_key_with_function_call", JS_NewCFunction(ctx, near_promise_batch_action_add_key_with_function_call, "promise_batch_action_add_key_with_function_call", 6));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_delete_key", JS_NewCFunction(ctx, near_promise_batch_action_delete_key, "promise_batch_action_delete_key", 2));
  JS_SetPropertyStr(ctx, env, "promise_batch_action_delete_account", JS_NewCFunction(ctx, near_promise_batch_action_delete_account, "promise_batch_action_delete_account", 2));
  JS_SetPropertyStr(ctx, env, "promise_results_count", JS_NewCFunction(ctx, near_promise_results_count, "promise_results_count", 0));
  JS_SetPropertyStr(ctx, env, "promise_result", JS_NewCFunction(ctx, near_promise_result, "promise_result", 2));
  JS_SetPropertyStr(ctx, env, "promise_return", JS_NewCFunction(ctx, near_promise_return, "promise_return", 1));
  JS_SetPropertyStr(ctx, env, "storage_write", JS_NewCFunction(ctx, near_storage_write, "storage_write", 2));
  JS_SetPropertyStr(ctx, env, "storage_read", JS_NewCFunction(ctx, near_storage_read, "storage_read", 2));
  JS_SetPropertyStr(ctx, env, "storage_remove", JS_NewCFunction(ctx, near_storage_remove, "storage_remove", 2));
  JS_SetPropertyStr(ctx, env, "storage_has_key", JS_NewCFunction(ctx, near_storage_has_key, "storage_has_key", 2));
  JS_SetPropertyStr(ctx, env, "validator_stake", JS_NewCFunction(ctx, near_validator_stake, "validator_stake", 2));
  JS_SetPropertyStr(ctx, env, "validator_total_stake", JS_NewCFunction(ctx, near_validator_total_stake, "validator_total_stake", 1));
  #ifdef NIGHTLY
  // as of Jun 24, 2022, alt_bn128 is not a nightly protocol feature any more. It's part of protocol version 55. But, testnet
// is at protocol version 54 and mainnet is at protocol version 53. We'll enable and add alt_bn128 as they in testnet.
  JS_SetPropertyStr(ctx, env, "alt_bn128_g1_multiexp", JS_NewCFunction(ctx, near_alt_bn128_g1_multiexp, "alt_bn128_g1_multiexp", 2));
  JS_SetPropertyStr(ctx, env, "alt_bn128_g1_sum", JS_NewCFunction(ctx, near_alt_bn128_g1_sum, "alt_bn128_g1_sum", 2));
  JS_SetPropertyStr(ctx, env, "alt_bn128_pairing_check", JS_NewCFunction(ctx, near_alt_bn128_pairing_check, "alt_bn128_pairing_check", 1));
  #endif

  JS_SetPropertyStr(ctx, global_obj, "env", env);
}

JSValue JS_Call(JSContext *ctx, JSValueConst func_obj, JSValueConst this_obj,
                int argc, JSValueConst *argv);

void _start() {}

#include "methods.h"

'''
'''--- build/code.h ---
/* File generated automatically by the QuickJS compiler. */

#include <inttypes.h>

const uint32_t code_size = 24191;

const uint8_t code[24191] = {
 0x02, 0xa4, 0x02, 0x1e, 0x62, 0x75, 0x69, 0x6c,
 0x64, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
 0x2e, 0x6a, 0x73, 0x10, 0x43, 0x6f, 0x6e, 0x74,
 0x72, 0x61, 0x63, 0x74, 0x12, 0x44, 0x45, 0x4c,
 0x49, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x22, 0x4e,
 0x46, 0x54, 0x5f, 0x4d, 0x45, 0x54, 0x41, 0x44,
 0x41, 0x54, 0x41, 0x5f, 0x53, 0x50, 0x45, 0x43,
 0x22, 0x4e, 0x46, 0x54, 0x5f, 0x53, 0x54, 0x41,
 0x4e, 0x44, 0x41, 0x52, 0x44, 0x5f, 0x4e, 0x41,
 0x4d, 0x45, 0x20, 0x53, 0x54, 0x4f, 0x52, 0x41,
 0x47, 0x45, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x53,
 0x41, 0x4c, 0x45, 0x10, 0x67, 0x65, 0x74, 0x5f,
 0x73, 0x61, 0x6c, 0x65, 0x38, 0x67, 0x65, 0x74,
 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x5f, 0x62,
 0x79, 0x5f, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f,
 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
 0x64, 0x2a, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x61,
 0x6c, 0x65, 0x73, 0x5f, 0x62, 0x79, 0x5f, 0x6f,
 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x3a,
 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70,
 0x6c, 0x79, 0x5f, 0x62, 0x79, 0x5f, 0x6e, 0x66,
 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
 0x63, 0x74, 0x5f, 0x69, 0x64, 0x2c, 0x67, 0x65,
 0x74, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79,
 0x5f, 0x62, 0x79, 0x5f, 0x6f, 0x77, 0x6e, 0x65,
 0x72, 0x5f, 0x69, 0x64, 0x20, 0x67, 0x65, 0x74,
 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6c, 0x79, 0x5f,
 0x73, 0x61, 0x6c, 0x65, 0x73, 0x08, 0x69, 0x6e,
 0x69, 0x74, 0x1c, 0x6e, 0x66, 0x74, 0x5f, 0x6f,
 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76,
 0x65, 0x0a, 0x6f, 0x66, 0x66, 0x65, 0x72, 0x16,
 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73,
 0x61, 0x6c, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f,
 0x6c, 0x76, 0x65, 0x5f, 0x70, 0x75, 0x72, 0x63,
 0x68, 0x61, 0x73, 0x65, 0x24, 0x73, 0x74, 0x6f,
 0x72, 0x61, 0x67, 0x65, 0x5f, 0x62, 0x61, 0x6c,
 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x6f, 0x66, 0x1e,
 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x2e,
 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
 0x6d, 0x69, 0x6e, 0x69, 0x6d, 0x75, 0x6d, 0x5f,
 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x20,
 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77,
 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x4e, 0x65,
 0x61, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
 0x63, 0x74, 0x12, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
 0x70, 0x4d, 0x61, 0x70, 0x0c, 0x56, 0x65, 0x63,
 0x74, 0x6f, 0x72, 0x1c, 0x56, 0x65, 0x63, 0x74,
 0x6f, 0x72, 0x49, 0x74, 0x65, 0x72, 0x61, 0x74,
 0x6f, 0x72, 0x18, 0x55, 0x6e, 0x6f, 0x72, 0x64,
 0x65, 0x72, 0x65, 0x64, 0x4d, 0x61, 0x70, 0x28,
 0x55, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
 0x64, 0x4d, 0x61, 0x70, 0x49, 0x74, 0x65, 0x72,
 0x61, 0x74, 0x6f, 0x72, 0x18, 0x55, 0x6e, 0x6f,
 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65,
 0x74, 0x08, 0x53, 0x61, 0x6c, 0x65, 0x32, 0x5f,
 0x61, 0x70, 0x70, 0x6c, 0x79, 0x44, 0x65, 0x63,
 0x6f, 0x72, 0x61, 0x74, 0x65, 0x64, 0x44, 0x65,
 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x08, 0x76, 0x69,
 0x65, 0x77, 0x16, 0x4e, 0x65, 0x61, 0x72, 0x42,
 0x69, 0x6e, 0x64, 0x67, 0x65, 0x6e, 0x0e, 0x55,
 0x36, 0x34, 0x5f, 0x4d, 0x41, 0x58, 0x20, 0x45,
 0x56, 0x49, 0x43, 0x54, 0x45, 0x44, 0x5f, 0x52,
 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x06,
 0x6c, 0x6f, 0x67, 0x1e, 0x73, 0x69, 0x67, 0x6e,
 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
 0x74, 0x49, 0x64, 0x28, 0x70, 0x72, 0x65, 0x64,
 0x65, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x41,
 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64,
 0x1e, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
 0x64, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74,
 0x0a, 0x70, 0x61, 0x6e, 0x69, 0x63, 0x16, 0x73,
 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x65,
 0x61, 0x64, 0x1a, 0x73, 0x74, 0x6f, 0x72, 0x61,
 0x67, 0x65, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79,
 0x22, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
 0x47, 0x65, 0x74, 0x45, 0x76, 0x69, 0x63, 0x74,
 0x65, 0x64, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
 0x6e, 0x74, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
 0x74, 0x49, 0x64, 0x16, 0x70, 0x72, 0x6f, 0x6d,
 0x69, 0x73, 0x65, 0x54, 0x68, 0x65, 0x6e, 0x24,
 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x42,
 0x61, 0x74, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61,
 0x74, 0x65, 0x3c, 0x70, 0x72, 0x6f, 0x6d, 0x69,
 0x73, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41,
 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e,
 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c,
 0x6c, 0x34, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x41, 0x63,
 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x72, 0x61, 0x6e,
 0x73, 0x66, 0x65, 0x72, 0x1a, 0x50, 0x72, 0x6f,
 0x6d, 0x69, 0x73, 0x65, 0x52, 0x65, 0x73, 0x75,
 0x6c, 0x74, 0x1a, 0x70, 0x72, 0x6f, 0x6d, 0x69,
 0x73, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
 0x1a, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65,
 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x73,
 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x57, 0x72,
 0x69, 0x74, 0x65, 0x1a, 0x73, 0x74, 0x6f, 0x72,
 0x61, 0x67, 0x65, 0x52, 0x65, 0x6d, 0x6f, 0x76,
 0x65, 0x1e, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
 0x65, 0x42, 0x79, 0x74, 0x65, 0x43, 0x6f, 0x73,
 0x74, 0x1c, 0x75, 0x38, 0x41, 0x72, 0x72, 0x61,
 0x79, 0x54, 0x6f, 0x42, 0x79, 0x74, 0x65, 0x73,
 0x1c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f,
 0x55, 0x38, 0x41, 0x72, 0x72, 0x61, 0x79, 0x0a,
 0x62, 0x79, 0x74, 0x65, 0x73, 0x24, 0x63, 0x68,
 0x65, 0x63, 0x6b, 0x53, 0x74, 0x72, 0x69, 0x6e,
 0x67, 0x49, 0x73, 0x42, 0x79, 0x74, 0x65, 0x73,
 0x0c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x2e,
 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45,
 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46,
 0x5f, 0x42, 0x4f, 0x55, 0x4e, 0x44, 0x53, 0x30,
 0x45, 0x52, 0x52, 0x5f, 0x49, 0x4e, 0x43, 0x4f,
 0x4e, 0x53, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x54,
 0x5f, 0x53, 0x54, 0x41, 0x54, 0x45, 0x24, 0x32,
 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x54, 0x6f,
 0x4b, 0x65, 0x79, 0x30, 0x45, 0x52, 0x52, 0x5f,
 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49, 0x53,
 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54, 0x41,
 0x54, 0x45, 0x24, 0x31, 0x2c, 0x45, 0x52, 0x52,
 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4e, 0x53, 0x49,
 0x53, 0x54, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x54,
 0x41, 0x54, 0x45, 0x1a, 0x72, 0x65, 0x73, 0x74,
 0x6f, 0x72, 0x65, 0x4f, 0x77, 0x6e, 0x65, 0x72,
 0x73, 0x1c, 0x61, 0x73, 0x73, 0x65, 0x72, 0x74,
 0x4f, 0x6e, 0x65, 0x59, 0x6f, 0x63, 0x74, 0x6f,
 0x28, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
 0x6c, 0x6c, 0x79, 0x52, 0x65, 0x6d, 0x6f, 0x76,
 0x65, 0x53, 0x61, 0x6c, 0x65, 0x22, 0x47, 0x41,
 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f, 0x52, 0x4f,
 0x59, 0x41, 0x4c, 0x54, 0x49, 0x45, 0x53, 0x28,
 0x47, 0x41, 0x53, 0x5f, 0x46, 0x4f, 0x52, 0x5f,
 0x4e, 0x46, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x4e,
 0x53, 0x46, 0x45, 0x52, 0x24, 0x69, 0x6e, 0x74,
 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x6d,
 0x6f, 0x76, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x26,
 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72,
 0x69, 0x63, 0x65, 0x1a, 0x69, 0x6e, 0x74, 0x65,
 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x66, 0x66, 0x65,
 0x72, 0x1e, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
 0x73, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
 0x65, 0x2e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
 0x61, 0x6c, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76,
 0x65, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
 0x65, 0x26, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
 0x61, 0x6c, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x79,
 0x53, 0x61, 0x6c, 0x65, 0x73, 0x2e, 0x69, 0x6e,
 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x75,
 0x70, 0x70, 0x6c, 0x79, 0x42, 0x79, 0x4f, 0x77,
 0x6e, 0x65, 0x72, 0x49, 0x64, 0x2c, 0x69, 0x6e,
 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x61,
 0x6c, 0x65, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e,
 0x65, 0x72, 0x49, 0x64, 0x3a, 0x69, 0x6e, 0x74,
 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x53, 0x75, 0x70,
 0x70, 0x6c, 0x79, 0x42, 0x79, 0x4e, 0x66, 0x74,
 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
 0x49, 0x64, 0x38, 0x69, 0x6e, 0x74, 0x65, 0x72,
 0x6e, 0x61, 0x6c, 0x53, 0x61, 0x6c, 0x65, 0x73,
 0x42, 0x79, 0x4e, 0x66, 0x74, 0x43, 0x6f, 0x6e,
 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x1e,
 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
 0x47, 0x65, 0x74, 0x53, 0x61, 0x6c, 0x65, 0x28,
 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c,
 0x4e, 0x66, 0x74, 0x4f, 0x6e, 0x41, 0x70, 0x70,
 0x72, 0x6f, 0x76, 0x65, 0x0c, 0x5f, 0x63, 0x6c,
 0x61, 0x73, 0x73, 0x0e, 0x5f, 0x63, 0x6c, 0x61,
 0x73, 0x73, 0x32, 0x16, 0x64, 0x65, 0x73, 0x65,
 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x12,
 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
 0x65, 0x1e, 0x64, 0x65, 0x73, 0x65, 0x72, 0x69,
 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x41, 0x72, 0x67,
 0x73, 0x1e, 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c,
 0x69, 0x7a, 0x65, 0x52, 0x65, 0x74, 0x75, 0x72,
 0x6e, 0x16, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69,
 0x6e, 0x73, 0x4b, 0x65, 0x79, 0x0c, 0x72, 0x65,
 0x6d, 0x6f, 0x76, 0x65, 0x0c, 0x65, 0x78, 0x74,
 0x65, 0x6e, 0x64, 0x26, 0x49, 0x6e, 0x64, 0x65,
 0x78, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x66,
 0x20, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0xcc,
 0x01, 0x54, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6c,
 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20,
 0x69, 0x73, 0x20, 0x61, 0x6e, 0x20, 0x69, 0x6e,
 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
 0x6e, 0x74, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65,
 0x2e, 0x20, 0x44, 0x69, 0x64, 0x20, 0x70, 0x72,
 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x20, 0x73,
 0x6d, 0x61, 0x72, 0x74, 0x20, 0x63, 0x6f, 0x6e,
 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x65, 0x78,
 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20,
 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x74,
 0x65, 0x20, 0x75, 0x6e, 0x65, 0x78, 0x70, 0x65,
 0x63, 0x74, 0x65, 0x64, 0x6c, 0x79, 0x3f, 0x06,
 0x6c, 0x65, 0x6e, 0x0e, 0x69, 0x73, 0x45, 0x6d,
 0x70, 0x74, 0x79, 0x14, 0x73, 0x77, 0x61, 0x70,
 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x08, 0x70,
 0x75, 0x73, 0x68, 0x06, 0x70, 0x6f, 0x70, 0x0e,
 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x10,
 0x69, 0x74, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
 0x0a, 0x63, 0x6c, 0x65, 0x61, 0x72, 0x0e, 0x74,
 0x6f, 0x41, 0x72, 0x72, 0x61, 0x79, 0x1c, 0x73,
 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x64, 0x65,
 0x73, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x16, 0x67,
 0x65, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x52,
 0x61, 0x77, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x61,
 0x69, 0x6e, 0x73, 0x12, 0x6e, 0x66, 0x74, 0x2d,
 0x31, 0x2e, 0x30, 0x2e, 0x30, 0x0c, 0x6e, 0x65,
 0x70, 0x31, 0x37, 0x31, 0x02, 0x2e, 0x10, 0x70,
 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x14,
 0x64, 0x65, 0x63, 0x6f, 0x72, 0x61, 0x74, 0x6f,
 0x72, 0x73, 0x14, 0x64, 0x65, 0x73, 0x63, 0x72,
 0x69, 0x70, 0x74, 0x6f, 0x72, 0x0e, 0x63, 0x6f,
 0x6e, 0x74, 0x65, 0x78, 0x74, 0x08, 0x64, 0x65,
 0x73, 0x63, 0x08, 0x6b, 0x65, 0x79, 0x73, 0x0e,
 0x66, 0x6f, 0x72, 0x45, 0x61, 0x63, 0x68, 0x16,
 0x69, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x69,
 0x7a, 0x65, 0x72, 0x0a, 0x73, 0x6c, 0x69, 0x63,
 0x65, 0x0e, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73,
 0x65, 0x0c, 0x72, 0x65, 0x64, 0x75, 0x63, 0x65,
 0x06, 0x6b, 0x65, 0x79, 0x12, 0x64, 0x65, 0x63,
 0x6f, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x0a, 0x5f,
 0x69, 0x6e, 0x69, 0x74, 0x08, 0x5f, 0x67, 0x65,
 0x74, 0x08, 0x61, 0x72, 0x67, 0x73, 0x06, 0x72,
 0x65, 0x74, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74,
 0x65, 0x0c, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73,
 0x06, 0x65, 0x6e, 0x76, 0x06, 0x6d, 0x61, 0x70,
 0x02, 0x20, 0x02, 0x78, 0x12, 0x73, 0x74, 0x72,
 0x69, 0x6e, 0x67, 0x69, 0x66, 0x79, 0x22, 0x73,
 0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x61, 0x63,
 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x69, 0x64,
 0x1a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x72, 0x65,
 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2c, 0x70,
 0x72, 0x65, 0x64, 0x65, 0x63, 0x65, 0x73, 0x73,
 0x6f, 0x72, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x20, 0x61, 0x74,
 0x74, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x64,
 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x06, 0x6d,
 0x73, 0x67, 0x18, 0x73, 0x74, 0x6f, 0x72, 0x61,
 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x1e,
 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
 0x68, 0x61, 0x73, 0x5f, 0x6b, 0x65, 0x79, 0x24,
 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x5f,
 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
 0x69, 0x64, 0x18, 0x70, 0x72, 0x6f, 0x6d, 0x69,
 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49,
 0x64, 0x14, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
 0x4e, 0x61, 0x6d, 0x65, 0x0c, 0x61, 0x6d, 0x6f,
 0x75, 0x6e, 0x74, 0x06, 0x67, 0x61, 0x73, 0x18,
 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x5f,
 0x74, 0x68, 0x65, 0x6e, 0x28, 0x70, 0x72, 0x6f,
 0x6d, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74,
 0x63, 0x68, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
 0x65, 0x44, 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73,
 0x65, 0x5f, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f,
 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66,
 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
 0x63, 0x61, 0x6c, 0x6c, 0x3a, 0x70, 0x72, 0x6f,
 0x6d, 0x69, 0x73, 0x65, 0x5f, 0x62, 0x61, 0x74,
 0x63, 0x68, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f,
 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66,
 0x65, 0x72, 0x10, 0x4e, 0x6f, 0x74, 0x52, 0x65,
 0x61, 0x64, 0x79, 0x14, 0x53, 0x75, 0x63, 0x63,
 0x65, 0x73, 0x73, 0x66, 0x75, 0x6c, 0x0c, 0x46,
 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x72, 0x65,
 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x78, 0x1c,
 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x5f,
 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x30, 0x55,
 0x6e, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
 0x64, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
 0x20, 0x63, 0x6f, 0x64, 0x65, 0x3a, 0x20, 0x14,
 0x70, 0x72, 0x6f, 0x6d, 0x69, 0x73, 0x65, 0x49,
 0x64, 0x78, 0x1c, 0x70, 0x72, 0x6f, 0x6d, 0x69,
 0x73, 0x65, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72,
 0x6e, 0x0a, 0x65, 0x78, 0x69, 0x73, 0x74, 0x1a,
 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f,
 0x77, 0x72, 0x69, 0x74, 0x65, 0x1c, 0x73, 0x74,
 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65,
 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x72, 0x61, 0x77,
 0x53, 0x74, 0x61, 0x74, 0x65, 0x0a, 0x73, 0x74,
 0x61, 0x74, 0x65, 0x02, 0x63, 0x08, 0x69, 0x74,
 0x65, 0x6d, 0x0a, 0x53, 0x54, 0x41, 0x54, 0x45,
 0x0a, 0x70, 0x61, 0x72, 0x73, 0x65, 0x0c, 0x61,
 0x73, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x43, 0x6f,
 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x73,
 0x74, 0x61, 0x74, 0x65, 0x20, 0x69, 0x73, 0x20,
 0x65, 0x6d, 0x70, 0x74, 0x79, 0x04, 0x7b, 0x7d,
 0x12, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x66,
 0x69, 0x78, 0x14, 0x73, 0x74, 0x6f, 0x72, 0x61,
 0x67, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x73, 0x74,
 0x6f, 0x72, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c,
 0x75, 0x65, 0x0e, 0x6f, 0x62, 0x6a, 0x65, 0x63,
 0x74, 0x73, 0x04, 0x6b, 0x76, 0x08, 0x64, 0x61,
 0x74, 0x61, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79,
 0x02, 0x65, 0x18, 0x66, 0x72, 0x6f, 0x6d, 0x43,
 0x68, 0x61, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x02,
 0x69, 0x14, 0x63, 0x68, 0x61, 0x72, 0x43, 0x6f,
 0x64, 0x65, 0x41, 0x74, 0x18, 0x73, 0x74, 0x72,
 0x4f, 0x72, 0x55, 0x38, 0x41, 0x72, 0x72, 0x61,
 0x79, 0x48, 0x62, 0x79, 0x74, 0x65, 0x73, 0x3a,
 0x20, 0x65, 0x78, 0x70, 0x65, 0x63, 0x74, 0x65,
 0x64, 0x20, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
 0x20, 0x6f, 0x72, 0x20, 0x55, 0x69, 0x6e, 0x74,
 0x38, 0x41, 0x72, 0x72, 0x61, 0x79, 0x06, 0x73,
 0x74, 0x72, 0x0e, 0x73, 0x74, 0x72, 0x69, 0x6e,
 0x67, 0x20, 0x14, 0x20, 0x61, 0x74, 0x20, 0x69,
 0x6e, 0x64, 0x65, 0x78, 0x20, 0x04, 0x3a, 0x20,
 0x28, 0x20, 0x69, 0x73, 0x20, 0x6e, 0x6f, 0x74,
 0x20, 0x61, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
 0x20, 0x62, 0x79, 0x74, 0x65, 0x02, 0x62, 0x24,
 0x61, 0x73, 0x73, 0x65, 0x72, 0x74, 0x69, 0x6f,
 0x6e, 0x20, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64,
 0x3a, 0x20, 0x0c, 0x70, 0x72, 0x65, 0x66, 0x69,
 0x78, 0x0c, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72,
 0x08, 0x6c, 0x61, 0x73, 0x74, 0x0e, 0x65, 0x6c,
 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x0e, 0x6c, 0x61,
 0x73, 0x74, 0x4b, 0x65, 0x79, 0x10, 0x65, 0x6c,
 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x02, 0x76,
 0x0c, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x0e,
 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x10,
 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4b, 0x65, 0x79,
 0x14, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x56, 0x61,
 0x6c, 0x75, 0x65, 0x1c, 0x6b, 0x65, 0x79, 0x49,
 0x6e, 0x64, 0x65, 0x78, 0x50, 0x72, 0x65, 0x66,
 0x69, 0x78, 0x02, 0x6b, 0x0e, 0x6b, 0x65, 0x79,
 0x73, 0x4c, 0x65, 0x6e, 0x12, 0x76, 0x61, 0x6c,
 0x75, 0x65, 0x73, 0x4c, 0x65, 0x6e, 0x16, 0x6b,
 0x65, 0x79, 0x73, 0x49, 0x73, 0x45, 0x6d, 0x70,
 0x74, 0x79, 0x1a, 0x76, 0x61, 0x6c, 0x75, 0x65,
 0x73, 0x49, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79,
 0x10, 0x72, 0x61, 0x77, 0x49, 0x6e, 0x64, 0x65,
 0x78, 0x16, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x4c,
 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x10, 0x69, 0x6e,
 0x64, 0x65, 0x78, 0x52, 0x61, 0x77, 0x12, 0x6e,
 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
 0x18, 0x6e, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x64,
 0x65, 0x78, 0x52, 0x61, 0x77, 0x1a, 0x6c, 0x61,
 0x73, 0x74, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70,
 0x4b, 0x65, 0x79, 0x06, 0x6b, 0x76, 0x73, 0x18,
 0x75, 0x6e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65,
 0x64, 0x4d, 0x61, 0x70, 0x1c, 0x65, 0x6c, 0x65,
 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x50, 0x72, 0x65,
 0x66, 0x69, 0x78, 0x24, 0x65, 0x6c, 0x65, 0x6d,
 0x65, 0x6e, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78,
 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x16, 0x6c,
 0x61, 0x73, 0x74, 0x45, 0x6c, 0x65, 0x6d, 0x65,
 0x6e, 0x74, 0x22, 0x6c, 0x61, 0x73, 0x74, 0x4c,
 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x45, 0x6c, 0x65,
 0x6d, 0x65, 0x6e, 0x74, 0x14, 0x63, 0x6f, 0x6c,
 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x60,
 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
 0x20, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x65,
 0x64, 0x20, 0x64, 0x65, 0x70, 0x6f, 0x73, 0x69,
 0x74, 0x20, 0x6f, 0x66, 0x20, 0x65, 0x78, 0x61,
 0x63, 0x74, 0x6c, 0x79, 0x20, 0x31, 0x20, 0x79,
 0x6f, 0x63, 0x74, 0x6f, 0x4e, 0x45, 0x41, 0x52,
 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
 0x74, 0x1a, 0x6e, 0x66, 0x74, 0x43, 0x6f, 0x6e,
 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x0e,
 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x49, 0x64, 0x24,
 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
 0x41, 0x6e, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
 0x49, 0x64, 0x08, 0x73, 0x61, 0x6c, 0x65, 0x12,
 0x62, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
 0x64, 0x1e, 0x62, 0x79, 0x4e, 0x66, 0x74, 0x43,
 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49,
 0x64, 0x0a, 0x73, 0x61, 0x6c, 0x65, 0x73, 0x0e,
 0x6e, 0x6f, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x10,
 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
 0x22, 0x6e, 0x6f, 0x20, 0x73, 0x61, 0x6c, 0x65,
 0x73, 0x20, 0x62, 0x79, 0x20, 0x6f, 0x77, 0x6e,
 0x65, 0x72, 0x30, 0x6e, 0x6f, 0x20, 0x73, 0x61,
 0x6c, 0x65, 0x73, 0x20, 0x62, 0x79, 0x20, 0x6e,
 0x66, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72,
 0x61, 0x63, 0x74, 0x0e, 0x6f, 0x77, 0x6e, 0x65,
 0x72, 0x49, 0x64, 0x14, 0x61, 0x70, 0x70, 0x72,
 0x6f, 0x76, 0x61, 0x6c, 0x49, 0x64, 0x1c, 0x73,
 0x61, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x16, 0x61, 0x70,
 0x70, 0x72, 0x6f, 0x76, 0x61, 0x6c, 0x5f, 0x69,
 0x64, 0x1e, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f,
 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x69,
 0x64, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f,
 0x69, 0x64, 0x1e, 0x73, 0x61, 0x6c, 0x65, 0x5f,
 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
 0x6e, 0x73, 0x50, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
 0x74, 0x68, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65,
 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65,
 0x20, 0x73, 0x61, 0x6c, 0x65, 0x20, 0x63, 0x61,
 0x6e, 0x20, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65,
 0x20, 0x69, 0x74, 0x0a, 0x70, 0x72, 0x69, 0x63,
 0x65, 0x50, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x74,
 0x68, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72,
 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
 0x73, 0x61, 0x6c, 0x65, 0x20, 0x63, 0x61, 0x6e,
 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x20,
 0x69, 0x74, 0x0e, 0x64, 0x65, 0x70, 0x6f, 0x73,
 0x69, 0x74, 0x0e, 0x62, 0x75, 0x79, 0x65, 0x72,
 0x49, 0x64, 0x3c, 0x64, 0x65, 0x70, 0x6f, 0x73,
 0x69, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74,
 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20,
 0x30, 0x40, 0x79, 0x6f, 0x75, 0x20, 0x63, 0x61,
 0x6e, 0x27, 0x74, 0x20, 0x6f, 0x66, 0x66, 0x65,
 0x72, 0x20, 0x6f, 0x6e, 0x20, 0x79, 0x6f, 0x75,
 0x72, 0x20, 0x6f, 0x77, 0x6e, 0x20, 0x73, 0x61,
 0x6c, 0x65, 0x5c, 0x64, 0x65, 0x70, 0x6f, 0x73,
 0x69, 0x74, 0x20, 0x6d, 0x75, 0x73, 0x74, 0x20,
 0x62, 0x65, 0x20, 0x67, 0x72, 0x65, 0x61, 0x74,
 0x65, 0x72, 0x20, 0x74, 0x68, 0x61, 0x6e, 0x20,
 0x6f, 0x72, 0x20, 0x65, 0x71, 0x75, 0x61, 0x6c,
 0x20, 0x74, 0x6f, 0x20, 0x70, 0x72, 0x69, 0x63,
 0x65, 0x26, 0x6e, 0x66, 0x74, 0x5f, 0x74, 0x72,
 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x5f, 0x70,
 0x61, 0x79, 0x6f, 0x75, 0x74, 0x16, 0x72, 0x65,
 0x63, 0x65, 0x69, 0x76, 0x65, 0x72, 0x5f, 0x69,
 0x64, 0x24, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x6d, 0x61,
 0x72, 0x6b, 0x65, 0x74, 0x08, 0x6d, 0x65, 0x6d,
 0x6f, 0x0e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
 0x65, 0x1c, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x65,
 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74,
 0x10, 0x62, 0x75, 0x79, 0x65, 0x72, 0x5f, 0x69,
 0x64, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
 0x0c, 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x18,
 0x70, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4f, 0x70,
 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x72, 0x65, 0x6d,
 0x61, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5a, 0x4f,
 0x6e, 0x6c, 0x79, 0x20, 0x74, 0x68, 0x65, 0x20,
 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
 0x20, 0x69, 0x74, 0x73, 0x65, 0x6c, 0x66, 0x20,
 0x63, 0x61, 0x6e, 0x20, 0x63, 0x61, 0x6c, 0x6c,
 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x6d, 0x65,
 0x74, 0x68, 0x6f, 0x64, 0x44, 0x43, 0x61, 0x6e,
 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65,
 0x20, 0x6d, 0x6f, 0x72, 0x65, 0x20, 0x74, 0x68,
 0x61, 0x6e, 0x20, 0x31, 0x30, 0x20, 0x72, 0x6f,
 0x79, 0x61, 0x6c, 0x74, 0x69, 0x65, 0x73, 0x0e,
 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x2a,
 0x50, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x69,
 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x63, 0x6f,
 0x72, 0x72, 0x65, 0x63, 0x74, 0x38, 0x65, 0x72,
 0x72, 0x6f, 0x72, 0x20, 0x70, 0x61, 0x72, 0x73,
 0x69, 0x6e, 0x67, 0x20, 0x70, 0x61, 0x79, 0x6f,
 0x75, 0x74, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63,
 0x74, 0x20, 0x12, 0x66, 0x72, 0x6f, 0x6d, 0x49,
 0x6e, 0x64, 0x65, 0x78, 0x0a, 0x6c, 0x69, 0x6d,
 0x69, 0x74, 0x10, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
 0x53, 0x65, 0x74, 0x0a, 0x73, 0x74, 0x61, 0x72,
 0x74, 0x06, 0x6d, 0x61, 0x78, 0x10, 0x70, 0x61,
 0x72, 0x73, 0x65, 0x49, 0x6e, 0x74, 0x20, 0x6e,
 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61,
 0x63, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x14,
 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
 0x49, 0x64, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x65,
 0x72, 0x49, 0x64, 0x1a, 0x73, 0x74, 0x6f, 0x72,
 0x61, 0x67, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
 0x74, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x50,
 0x61, 0x69, 0x64, 0x53, 0x74, 0x6f, 0x72, 0x61,
 0x67, 0x65, 0x2a, 0x73, 0x69, 0x67, 0x6e, 0x65,
 0x72, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
 0x74, 0x74, 0x68, 0x69, 0x73, 0x20, 0x66, 0x75,
 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x63,
 0x61, 0x6e, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20,
 0x62, 0x65, 0x20, 0x63, 0x61, 0x6c, 0x6c, 0x65,
 0x64, 0x20, 0x76, 0x69, 0x61, 0x20, 0x61, 0x20,
 0x63, 0x72, 0x6f, 0x73, 0x73, 0x2d, 0x63, 0x6f,
 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x20, 0x63,
 0x61, 0x6c, 0x6c, 0x54, 0x6f, 0x6e, 0x6c, 0x79,
 0x20, 0x74, 0x68, 0x65, 0x20, 0x6f, 0x77, 0x6e,
 0x65, 0x72, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20,
 0x63, 0x61, 0x6e, 0x20, 0x61, 0x70, 0x70, 0x72,
 0x6f, 0x76, 0x65, 0x20, 0x69, 0x74, 0x1e, 0x73,
 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x44, 0x65,
 0x70, 0x6f, 0x73, 0x69, 0x74, 0x73, 0x78, 0x74,
 0x68, 0x65, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72,
 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f,
 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x65,
 0x6e, 0x6f, 0x75, 0x67, 0x68, 0x20, 0x73, 0x74,
 0x6f, 0x72, 0x61, 0x67, 0x65, 0x20, 0x74, 0x6f,
 0x20, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x65,
 0x20, 0x74, 0x68, 0x69, 0x73, 0x20, 0x74, 0x6f,
 0x6b, 0x65, 0x6e, 0x1c, 0x68, 0x61, 0x73, 0x4f,
 0x77, 0x6e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72,
 0x74, 0x79, 0x2e, 0x69, 0x6e, 0x76, 0x61, 0x6c,
 0x69, 0x64, 0x20, 0x73, 0x61, 0x6c, 0x65, 0x20,
 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
 0x6e, 0x73, 0x14, 0x61, 0x63, 0x63, 0x6f, 0x75,
 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x20, 0x73, 0x74,
 0x6f, 0x72, 0x61, 0x67, 0x65, 0x41, 0x63, 0x63,
 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x14, 0x6e,
 0x65, 0x77, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
 0x65, 0x38, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
 0x65, 0x73, 0x20, 0x6d, 0x69, 0x6e, 0x69, 0x6d,
 0x75, 0x6d, 0x20, 0x64, 0x65, 0x70, 0x6f, 0x73,
 0x69, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x08, 0x64,
 0x69, 0x66, 0x66, 0x14, 0x61, 0x6d, 0x6f, 0x75,
 0x6e, 0x74, 0x4c, 0x65, 0x66, 0x74, 0x14, 0x66,
 0x72, 0x6f, 0x6d, 0x5f, 0x69, 0x6e, 0x64, 0x65,
 0x78, 0x24, 0x6e, 0x66, 0x74, 0x5f, 0x63, 0x6f,
 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74,
 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x5f, 0x63, 0x6f,
 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x18, 0x76,
 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x74,
 0x75, 0x72, 0x6e, 0x0f, 0xbc, 0x03, 0x00, 0x15,
 0x00, 0x43, 0xbe, 0x03, 0x00, 0x42, 0xc0, 0x03,
 0x00, 0x3f, 0xc2, 0x03, 0x00, 0x40, 0xc4, 0x03,
 0x00, 0x41, 0xc6, 0x03, 0x00, 0x46, 0xc8, 0x03,
 0x00, 0x47, 0xca, 0x03, 0x00, 0x49, 0xcc, 0x03,
 0x00, 0x48, 0xce, 0x03, 0x00, 0x4a, 0xd0, 0x03,
 0x00, 0x4b, 0xd2, 0x03, 0x00, 0x44, 0xd4, 0x03,
 0x00, 0x45, 0xd6, 0x03, 0x00, 0x4d, 0xd8, 0x03,
 0x00, 0x4f, 0xda, 0x03, 0x00, 0x4c, 0xdc, 0x03,
 0x00, 0x50, 0xde, 0x03, 0x00, 0x53, 0xe0, 0x03,
 0x00, 0x51, 0xe2, 0x03, 0x00, 0x52, 0xe4, 0x03,
 0x00, 0x4e, 0xe6, 0x03, 0x00, 0x00, 0x0e, 0x00,
 0x06, 0x01, 0xa0, 0x01, 0x00, 0x12, 0x00, 0x09,
 0x54, 0x92, 0x01, 0xd2, 0x10, 0x12, 0xe8, 0x03,
 0x02, 0x00, 0x30, 0xec, 0x01, 0x03, 0x01, 0x70,
 0xea, 0x03, 0x04, 0x00, 0x70, 0xec, 0x01, 0x05,
 0x03, 0x70, 0xec, 0x03, 0x06, 0x00, 0x70, 0xec,
 0x01, 0x07, 0x05, 0x70, 0xee, 0x03, 0x08, 0x00,
 0x30, 0xec, 0x01, 0x09, 0x07, 0x70, 0xf0, 0x03,
 0x0a, 0x00, 0x70, 0xec, 0x01, 0x0b, 0x09, 0x70,
 0xf2, 0x03, 0x0c, 0x00, 0x30, 0xec, 0x01, 0x0d,
 0x0b, 0x70, 0xf4, 0x03, 0x0e, 0x00, 0x70, 0xec,
 0x01, 0x0f, 0x0d, 0x70, 0xf6, 0x03, 0x10, 0x00,
 0x30, 0xec, 0x01, 0x11, 0x0f, 0x70, 0xbe, 0x03,
 0x12, 0x00, 0x70, 0xec, 0x01, 0x13, 0x11, 0x70,
 0xf8, 0x03, 0x00, 0x01, 0xfa, 0x03, 0x01, 0x01,
 0xfc, 0x03, 0x02, 0x01, 0xfe, 0x03, 0x03, 0x01,
 0x80, 0x04, 0x04, 0x0d, 0x82, 0x04, 0x05, 0x0d,
 0x84, 0x04, 0x06, 0x01, 0x86, 0x04, 0x07, 0x01,
 0x88, 0x04, 0x08, 0x01, 0x8a, 0x04, 0x09, 0x01,
 0x8c, 0x04, 0x0a, 0x01, 0x8e, 0x04, 0x0b, 0x01,
 0x90, 0x04, 0x0c, 0x01, 0x92, 0x04, 0x0d, 0x01,
 0x94, 0x04, 0x0e, 0x01, 0xb0, 0x01, 0x0f, 0x01,
 0x96, 0x04, 0x10, 0x01, 0x98, 0x04, 0x11, 0x01,
 0x9a, 0x04, 0x12, 0x01, 0x9c, 0x04, 0x13, 0x01,
 0x9e, 0x04, 0x14, 0x01, 0xa0, 0x04, 0x15, 0x01,
 0xa2, 0x04, 0x16, 0x01, 0xa4, 0x04, 0x17, 0x01,
 0xa6, 0x04, 0x18, 0x01, 0xa8, 0x04, 0x19, 0x01,
 0xe8, 0x03, 0x1a, 0x09, 0xea, 0x03, 0x1b, 0x09,
 0xaa, 0x04, 0x1c, 0x01, 0xac, 0x04, 0x1d, 0x01,
 0xae, 0x04, 0x1e, 0x01, 0xb0, 0x04, 0x1f, 0x01,
 0xb2, 0x04, 0x20, 0x01, 0xb4, 0x04, 0x21, 0x0d,
 0xb6, 0x04, 0x22, 0x0d, 0xb8, 0x04, 0x23, 0x01,
 0xec, 0x03, 0x24, 0x09, 0xee, 0x03, 0x25, 0x09,
 0xba, 0x04, 0x26, 0x0d, 0xf0, 0x03, 0x27, 0x09,
 0xf2, 0x03, 0x28, 0x09, 0xbc, 0x04, 0x29, 0x0d,
 0xf4, 0x03, 0x2a, 0x09, 0xbe, 0x04, 0x2b, 0x01,
 0xc0, 0x04, 0x2c, 0x01, 0xc2, 0x04, 0x2d, 0x01,
 0xc4, 0x04, 0x2e, 0x0d, 0xc6, 0x04, 0x2f, 0x0d,
 0xf6, 0x03, 0x30, 0x09, 0xc8, 0x04, 0x31, 0x01,
 0xca, 0x04, 0x32, 0x01, 0xcc, 0x04, 0x33, 0x01,
 0xce, 0x04, 0x34, 0x01, 0xd0, 0x04, 0x35, 0x01,
 0xd2, 0x04, 0x36, 0x01, 0xd4, 0x04, 0x37, 0x01,
 0xd6, 0x04, 0x38, 0x01, 0xd8, 0x04, 0x39, 0x01,
 0xda, 0x04, 0x3a, 0x01, 0xdc, 0x04, 0x3b, 0x01,
 0xde, 0x04, 0x3c, 0x01, 0xe0, 0x04, 0x3d, 0x01,
 0xe2, 0x04, 0x3e, 0x01, 0xc2, 0x03, 0x3f, 0x0d,
 0xc4, 0x03, 0x40, 0x0d, 0xc6, 0x03, 0x41, 0x0d,
 0xc0, 0x03, 0x42, 0x0d, 0xbe, 0x03, 0x43, 0x09,
 0xd4, 0x03, 0x44, 0x01, 0xd6, 0x03, 0x45, 0x01,
 0xc8, 0x03, 0x46, 0x01, 0xca, 0x03, 0x47, 0x01,
 0xce, 0x03, 0x48, 0x01, 0xcc, 0x03, 0x49, 0x01,
 0xd0, 0x03, 0x4a, 0x01, 0xd2, 0x03, 0x4b, 0x01,
 0xdc, 0x03, 0x4c, 0x01, 0xd8, 0x03, 0x4d, 0x01,
 0xe6, 0x03, 0x4e, 0x01, 0xda, 0x03, 0x4f, 0x01,
 0xde, 0x03, 0x50, 0x01, 0xe2, 0x03, 0x51, 0x01,
 0xe4, 0x03, 0x52, 0x01, 0xe0, 0x03, 0x53, 0x01,
 0x08, 0x69, 0x29, 0x01, 0x00, 0x00, 0xc0, 0x00,
 0xe1, 0xc0, 0x01, 0xe2, 0xc0, 0x02, 0xe3, 0xc0,
 0x03, 0xe4, 0xc0, 0x08, 0x5f, 0x06, 0x00, 0xc0,
 0x09, 0x5f, 0x07, 0x00, 0xc0, 0x0a, 0x5f, 0x08,
 0x00, 0xc0, 0x0b, 0x5f, 0x09, 0x00, 0xc0, 0x0c,
 0x5f, 0x0a, 0x00, 0xc0, 0x0d, 0x5f, 0x0b, 0x00,
 0xc0, 0x0e, 0x5f, 0x0c, 0x00, 0xc0, 0x0f, 0x5f,
 0x0d, 0x00, 0xc0, 0x10, 0x5f, 0x0e, 0x00, 0xc0,
 0x11, 0x5f, 0x0f, 0x00, 0xc0, 0x12, 0x5f, 0x10,
 0x00, 0xc0, 0x13, 0x5f, 0x11, 0x00, 0xc0, 0x14,
 0x5f, 0x12, 0x00, 0xc0, 0x15, 0x5f, 0x13, 0x00,
 0xc0, 0x17, 0x5f, 0x15, 0x00, 0xc0, 0x18, 0x5f,
 0x16, 0x00, 0xc0, 0x19, 0x5f, 0x17, 0x00, 0xc0,
 0x1a, 0x5f, 0x18, 0x00, 0xc0, 0x1b, 0x5f, 0x19,
 0x00, 0xc0, 0x2a, 0x5f, 0x1c, 0x00, 0xc0, 0x2b,
 0x5f, 0x1d, 0x00, 0xc0, 0x2c, 0x5f, 0x1e, 0x00,
 0xc0, 0x2d, 0x5f, 0x1f, 0x00, 0xc0, 0x2e, 0x5f,
 0x20, 0x00, 0xc0, 0x2f, 0x5f, 0x23, 0x00, 0xc0,
 0x5f, 0x5f, 0x2b, 0x00, 0xc0, 0x60, 0x5f, 0x2c,
 0x00, 0xc0, 0x61, 0x5f, 0x2d, 0x00, 0xc0, 0x65,
 0x5f, 0x31, 0x00, 0xc0, 0x66, 0x5f, 0x32, 0x00,
 0xc0, 0x67, 0x5f, 0x33, 0x00, 0xc0, 0x68, 0x5f,
 0x34, 0x00, 0xc0, 0x69, 0x5f, 0x35, 0x00, 0xc0,
 0x6a, 0x5f, 0x36, 0x00, 0xc0, 0x6b, 0x5f, 0x37,
 0x00, 0xc0, 0x6c, 0x5f, 0x38, 0x00, 0xc0, 0x6d,
 0x5f, 0x39, 0x00, 0xc0, 0x6e, 0x5f, 0x3a, 0x00,
 0xc0, 0x6f, 0x5f, 0x3b, 0x00, 0xc0, 0x70, 0x5f,
 0x3c, 0x00, 0xc0, 0x82, 0x5f, 0x44, 0x00, 0xc0,
 0x83, 0x5f, 0x45, 0x00, 0xc0, 0x84, 0x5f, 0x46,
 0x00, 0xc0, 0x85, 0x5f, 0x47, 0x00, 0xc0, 0x86,
 0x5f, 0x48, 0x00, 0xc0, 0x87, 0x5f, 0x49, 0x00,
 0xc0, 0x88, 0x5f, 0x4a, 0x00, 0xc0, 0x89, 0x5f,
 0x4b, 0x00, 0xc0, 0x8a, 0x5f, 0x4c, 0x00, 0xc0,
 0x8b, 0x5f, 0x4d, 0x00, 0xc0, 0x8c, 0x5f, 0x4e,
 0x00, 0xc0, 0x8d, 0x5f, 0x4f, 0x00, 0xc0, 0x8e,
 0x5f, 0x50, 0x00, 0xc0, 0x8f, 0x5f, 0x51, 0x00,
 0xc0, 0x90, 0x5f, 0x52, 0x00, 0xc0, 0x91, 0x5f,
 0x53, 0x00, 0x29, 0xbf, 0x04, 0xbf, 0x05, 0x9f,
 0xbf, 0x06, 0x9e, 0x5f, 0x04, 0x00, 0x65, 0x04,
 0x00, 0xbf, 0x07, 0x9e, 0x5f, 0x05, 0x00, 0xc0,
 0x16, 0x5e, 0x14, 0x00, 0x11, 0xeb, 0x06, 0x0e,
 0x0b, 0x60, 0x14, 0x00, 0xef, 0x0e, 0x61, 0x00,
 0x00, 0x06, 0x61, 0x01, 0x00, 0xbf, 0x21, 0x56,
 0xf4, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x1c, 0x54,
 0x32, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x1d, 0x54,
 0x33, 0x01, 0x00, 0x00, 0x00, 0x1b, 0xc0, 0x1e,
 0x54, 0x34, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x1b,
 0xc0, 0x1f, 0x54, 0x35, 0x01, 0x00, 0x00, 0x00,
 0x1b, 0xc0, 0x20, 0x54, 0xea, 0x00, 0x00, 0x00,
 0x00, 0x06, 0xca, 0x0e, 0xcd, 0x68, 0x01, 0x00,
 0x5f, 0x1a, 0x00, 0x61, 0x02, 0x00, 0x06, 0x61,
 0x03, 0x00, 0xbf, 0x22, 0x56, 0xf5, 0x00, 0x00,
 0x00, 0x00, 0xc0, 0x23, 0x54, 0x36, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x24, 0x54, 0x41, 0x00, 0x00,
 0x00, 0x00, 0xc0, 0x25, 0x54, 0x37, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x26, 0x54, 0x42, 0x00, 0x00,
 0x00, 0x00, 0xc0, 0x27, 0x54, 0x38, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x28, 0x54, 0x33, 0x01, 0x00,
 0x00, 0x00, 0x1b, 0xc0, 0x29, 0x54, 0x32, 0x01,
 0x00, 0x00, 0x00, 0x1b, 0x06, 0xcc, 0x0e, 0xcf,
 0x68, 0x03, 0x00, 0x68, 0x02, 0x00, 0x5f, 0x1b,
 0x00, 0x04, 0x39, 0x01, 0x00, 0x00, 0x5f, 0x21,
 0x00, 0x04, 0x3a, 0x01, 0x00, 0x00, 0x5f, 0x22,
 0x00, 0x61, 0x04, 0x00, 0x06, 0x61, 0x05, 0x00,
 0xbf, 0x30, 0x56, 0xf6, 0x00, 0x00, 0x00, 0x00,
 0xc0, 0x31, 0x54, 0x3b, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x32, 0x54, 0x3c, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x33, 0x54, 0x41, 0x00, 0x00, 0x00, 0x00,
 0xc0, 0x34, 0x54, 0x3d, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x35, 0x54, 0x3e, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x36, 0x54, 0x3f, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x37, 0x54, 0x40, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x38, 0x54, 0x38, 0x01, 0x00, 0x00, 0x00,
 0x38, 0x98, 0x00, 0x00, 0x00, 0x41, 0x41, 0x01,
 0x00, 0x00, 0xc0, 0x39, 0x55, 0x00, 0xc0, 0x3a,
 0x54, 0x42, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x3b,
 0x54, 0x43, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x3c,
 0x54, 0x33, 0x01, 0x00, 0x00, 0x00, 0x1b, 0xc0,
 0x3d, 0x54, 0x32, 0x01, 0x00, 0x00, 0x00, 0x1b,
 0x06, 0xc3, 0x05, 0x0e, 0xc4, 0x04, 0x68, 0x05,
 0x00, 0x68, 0x04, 0x00, 0x5f, 0x24, 0x00, 0x61,
 0x06, 0x00, 0x06, 0x61, 0x07, 0x00, 0xbf, 0x3e,
 0x56, 0xf7, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x3f,
 0x54, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x06, 0xc3,
 0x07, 0x0e, 0xc4, 0x06, 0x68, 0x07, 0x00, 0x5f,
 0x25, 0x00, 0x04, 0x3a, 0x01, 0x00, 0x00, 0x5f,
 0x26, 0x00, 0x61, 0x08, 0x00, 0x06, 0x61, 0x09,
 0x00, 0xbf, 0x40, 0x56, 0xf8, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x41, 0x54, 0x3b, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x42, 0x54, 0x3c, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x43, 0x54, 0x44, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x44, 0x54, 0x45, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x45, 0x54, 0x46, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x46, 0x54, 0x41, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x47, 0x54, 0x42, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x48, 0x54, 0x37, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x49, 0x54, 0x42, 0x01, 0x00, 0x00,
 0x00, 0xc0, 0x4a, 0x54, 0x43, 0x01, 0x00, 0x00,
 0x00, 0x38, 0x98, 0x00, 0x00, 0x00, 0x41, 0x41,
 0x01, 0x00, 0x00, 0xc0, 0x4b, 0x55, 0x00, 0xc0,
 0x4c, 0x54, 0x38, 0x01, 0x00, 0x00, 0x00, 0xc0,
 0x4d, 0x54, 0x33, 0x01, 0x00, 0x00, 0x00, 0x1b,
 0xc0, 0x4e, 0x54, 0x32, 0x01, 0x00, 0x00, 0x00,
 0x1b, 0x06, 0xc3, 0x09, 0x0e, 0xc4, 0x08, 0x68,
 0x09, 0x00, 0x68, 0x08, 0x00, 0x5f, 0x27, 0x00,
 0x61, 0x0a, 0x00, 0x06, 0x61, 0x0b, 0x00, 0xbf,
 0x4f, 0x56, 0xf9, 0x00, 0x00, 0x00, 0x00, 0xc0,
 0x50, 0x54, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x06,
 0xc3, 0x0b, 0x0e, 0xc4, 0x0a, 0x68, 0x0b, 0x00,
 0x5f, 0x28, 0x00, 0x04, 0x3a, 0x01, 0x00, 0x00,
 0x5f, 0x29, 0x00, 0x61, 0x0c, 0x00, 0x06, 0x61,
 0x0d, 0x00, 0xbf, 0x51, 0x56, 0xfa, 0x00, 0x00,
 0x00, 0x00, 0xc0, 0x52, 0x54, 0x3b, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x53, 0x54, 0x3c, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x54, 0x54, 0x44, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x55, 0x54, 0x45, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x56, 0x54, 0x47, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x57, 0x54, 0x42, 0x00, 0x00,
 0x00, 0x00, 0xc0, 0x58, 0x54, 0x37, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x59, 0x54, 0x42, 0x01, 0x00,
 0x00, 0x00, 0xc0, 0x5a, 0x54, 0x43, 0x01, 0x00,
 0x00, 0x00, 0x38, 0x98, 0x00, 0x00, 0x00, 0x41,
 0x41, 0x01, 0x00, 0x00, 0xc0, 0x5b, 0x55, 0x00,
 0xc0, 0x5c, 0x54, 0x38, 0x01, 0x00, 0x00, 0x00,
 0xc0, 0x5d, 0x54, 0x33, 0x01, 0x00, 0x00, 0x00,
 0x1b, 0xc0, 0x5e, 0x54, 0x32, 0x01, 0x00, 0x00,
 0x00, 0x1b, 0x06, 0xc3, 0x0d, 0x0e, 0xc4, 0x0c,
 0x68, 0x0d, 0x00, 0x68, 0x0c, 0x00, 0x5f, 0x2a,
 0x00, 0xbf, 0x62, 0x5f, 0x2e, 0x00, 0xbf, 0x63,
 0x5f, 0x2f, 0x00, 0x61, 0x0e, 0x00, 0x06, 0x61,
 0x0f, 0x00, 0xbf, 0x64, 0x56, 0xfb, 0x00, 0x00,
 0x00, 0x00, 0x06, 0xc3, 0x0f, 0x0e, 0xc4, 0x0e,
 0x68, 0x0f, 0x00, 0x5f, 0x30, 0x00, 0x04, 0x48,
 0x01, 0x00, 0x00, 0x5f, 0x3f, 0x00, 0x04, 0x49,
 0x01, 0x00, 0x00, 0x5f, 0x40, 0x00, 0x38, 0xaf,
 0x00, 0x00, 0x00, 0xbe, 0xe8, 0x03, 0xef, 0x5e,
 0x19, 0x00, 0xee, 0x42, 0x39, 0x00, 0x00, 0x00,
 0x24, 0x00, 0x00, 0x9a, 0x5f, 0x41, 0x00, 0x04,
 0x4a, 0x01, 0x00, 0x00, 0x5f, 0x42, 0x00, 0xe0,
 0x61, 0x10, 0x00, 0x65, 0x1a, 0x00, 0x61, 0x11,
 0x00, 0xbf, 0x71, 0x56, 0xdf, 0x00, 0x00, 0x00,
 0x01, 0xc0, 0x72, 0x54, 0x16, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x73, 0x54, 0xf0, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x74, 0x54, 0xf2, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x75, 0x54, 0xf1, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x76, 0x54, 0xef, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x77, 0x54, 0xed, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x78, 0x54, 0xf3, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x79, 0x54, 0xec, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x7a, 0x54, 0xee, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x7b, 0x54, 0xe9, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x7c, 0x54, 0xe8, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x7d, 0x54, 0xe6, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x7e, 0x54, 0xe7, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x7f, 0x54, 0xe5, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x80, 0x54, 0xe4, 0x00, 0x00, 0x00,
 0x00, 0xc0, 0x81, 0x54, 0xeb, 0x00, 0x00, 0x00,
 0x00, 0x06, 0xc3, 0x11, 0x0e, 0xc4, 0x10, 0x68,
 0x11, 0x00, 0x68, 0x10, 0x00, 0x5f, 0x3e, 0x00,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xf0, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xf0, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xf2, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xf2, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xf1, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xf1, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xef, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xef, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xed, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xed, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xf3, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xf3, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xec, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xec, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xee, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xee, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xe9, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xe9, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xe8, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xe8, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xe6, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xe6, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xe7, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xe7, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xe5, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xe5, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xe4, 0x00, 0x00, 0x00, 0xdf, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xe4, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0xdd, 0x5e, 0x3e, 0x00, 0x41, 0x3b, 0x00, 0x00,
 0x00, 0x04, 0xeb, 0x00, 0x00, 0x00, 0xde, 0x26,
 0x01, 0x00, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x66, 0x00, 0x00, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x04, 0xeb, 0x00, 0x00,
 0x00, 0x24, 0x02, 0x00, 0x5e, 0x3e, 0x00, 0x41,
 0x3b, 0x00, 0x00, 0x00, 0x22, 0x05, 0x00, 0x0e,
 0x5e, 0x3e, 0x00, 0x60, 0x3d, 0x00, 0xef, 0x11,
 0xeb, 0x05, 0x0e, 0x5e, 0x3d, 0x00, 0x5f, 0x43,
 0x00, 0x29, 0xbc, 0x03, 0x01, 0x85, 0x02, 0x01,
 0x00, 0xab, 0x02, 0x6a, 0x3a, 0x00, 0x09, 0x92,
 0x01, 0x00, 0x0f, 0x4c, 0x00, 0x0f, 0x24, 0x00,
 0x08, 0x08, 0x2c, 0x0a, 0x31, 0x09, 0x31, 0x2c,
 0x36, 0x00, 0x0f, 0x10, 0x00, 0x08, 0x16, 0x00,
 0x08, 0x14, 0x00, 0x08, 0x16, 0x00, 0x08, 0x0c,
 0x00, 0x08, 0x08, 0x2d, 0x09, 0x31, 0x00, 0x0d,
 0x64, 0x2b, 0x00, 0x08, 0x16, 0x00, 0x0f, 0x10,
 0x00, 0x08, 0x08, 0x00, 0x08, 0x12, 0x00, 0x08,
 0x28, 0x00, 0x08, 0x0c, 0x00, 0x08, 0x20, 0x00,
 0x08, 0x1c, 0x00, 0x08, 0x0c, 0x2c, 0x36, 0x00,
 0x04, 0x12, 0x00, 0x08, 0x14, 0x00, 0x08, 0x08,
 0x2d, 0x00, 0x01, 0x08, 0x31, 0x4e, 0x00, 0x0f,
 0x28, 0x2c, 0x40, 0x2b, 0x00, 0x0f, 0x28, 0x00,
 0x08, 0x16, 0x00, 0x08, 0x0c, 0x00, 0x08, 0x0c,
 0x00, 0x08, 0x0c, 0x00, 0x08, 0x22, 0x00, 0x08,
 0x22, 0x00, 0x08, 0x46, 0x00, 0x08, 0x14, 0x00,
 0x08, 0x14, 0x2c, 0x36, 0x00, 0x04, 0x0c, 0x00,
 0x08, 0x08, 0x2d, 0x00, 0x01, 0x16, 0x31, 0x4f,
 0x00, 0x0f, 0x24, 0x2c, 0x40, 0x2b, 0x00, 0x0f,
 0x16, 0x00, 0x08, 0x08, 0x00, 0x08, 0x0c, 0x00,
 0x08, 0x0c, 0x00, 0x08, 0x0a, 0x00, 0x08, 0x1c,
 0x00, 0x08, 0x46, 0x00, 0x08, 0x12, 0x00, 0x08,
 0x14, 0x2c, 0x36, 0x00, 0x04, 0x0c, 0x00, 0x08,
 0x08, 0x2d, 0x00, 0x01, 0x12, 0x31, 0x00, 0x0f,
 0x78, 0x1c, 0x1d, 0x00, 0x0f, 0x28, 0x00, 0x0c,
 0xd4, 0x05, 0x2c, 0x2c, 0x81, 0x2b, 0x00, 0x12,
 0x40, 0x00, 0x08, 0x2e, 0x00, 0x08, 0x4c, 0x00,
 0x08, 0x0a, 0x00, 0x08, 0x0e, 0x00, 0x08, 0x20,
 0x00, 0x08, 0x1c, 0x00, 0x08, 0x18, 0x00, 0x08,
 0x16, 0x00, 0x08, 0x16, 0x00, 0x08, 0x14, 0x00,
 0x08, 0x1c, 0x00, 0x08, 0x14, 0x00, 0x08, 0x1c,
 0x00, 0x08, 0x14, 0x00, 0x08, 0x28, 0x2c, 0x00,
 0xe8, 0x06, 0xe0, 0x02, 0x0e, 0x43, 0x06, 0x01,
 0xf8, 0x03, 0x05, 0x01, 0x05, 0x05, 0x00, 0x02,
 0xc8, 0x01, 0x06, 0xac, 0x01, 0x00, 0x01, 0x40,
 0x96, 0x05, 0x00, 0x01, 0x40, 0x98, 0x05, 0x00,
 0x01, 0x00, 0x9a, 0x05, 0x00, 0x01, 0x40, 0x9c,
 0x05, 0x00, 0x01, 0x00, 0x9e, 0x05, 0x00, 0x00,
 0x40, 0x0b, 0xc9, 0x38, 0x92, 0x00, 0x00, 0x00,
 0x42, 0x50, 0x01, 0x00, 0x00, 0xd4, 0x24, 0x01,
 0x00, 0x42, 0x51, 0x01, 0x00, 0x00, 0xc0, 0x00,
 0x24, 0x01, 0x00, 0x0e, 0xc5, 0xc5, 0x41, 0x3f,
 0x00, 0x00, 0x00, 0x96, 0x96, 0x43, 0x3f, 0x00,
 0x00, 0x00, 0xc5, 0xc5, 0x41, 0x3d, 0x00, 0x00,
 0x00, 0x96, 0x96, 0x43, 0x3d, 0x00, 0x00, 0x00,
 0x04, 0x40, 0x00, 0x00, 0x00, 0xc5, 0xa8, 0x11,
 0xeb, 0x08, 0x0e, 0xc5, 0x41, 0x52, 0x01, 0x00,
 0x00, 0xea, 0x08, 0xc5, 0x0a, 0x43, 0x3e, 0x00,
 0x00, 0x00, 0xd3, 0x42, 0x53, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0x42, 0x54, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0x42, 0x55, 0x01, 0x00, 0x00,
 0xc0, 0x01, 0xc5, 0x24, 0x02, 0x00, 0xc9, 0x5b,
 0x04, 0x00, 0xea, 0x38, 0xc5, 0x41, 0x52, 0x01,
 0x00, 0x00, 0x06, 0xac, 0xea, 0x2e, 0xc5, 0xc5,
 0x41, 0x52, 0x01, 0x00, 0x00, 0xea, 0x14, 0xc5,
 0x41, 0x52, 0x01, 0x00, 0x00, 0x42, 0xfd, 0x00,
 0x00, 0x00, 0x5b, 0x04, 0x00, 0x24, 0x01, 0x00,
 0xec, 0x02, 0x06, 0x43, 0x40, 0x00, 0x00, 0x00,
 0xc5, 0x38, 0x45, 0x00, 0x00, 0x00, 0x43, 0x52,
 0x01, 0x00, 0x00, 0xc5, 0x41, 0x52, 0x01, 0x00,
 0x00, 0xf2, 0xea, 0x14, 0x38, 0x92, 0x00, 0x00,
 0x00, 0x42, 0x65, 0x00, 0x00, 0x00, 0xd1, 0xd2,
 0xc5, 0x24, 0x03, 0x00, 0x0e, 0x07, 0xc9, 0xc5,
 0x28, 0xbc, 0x03, 0x01, 0x10, 0x03, 0x0d, 0x63,
 0x21, 0x49, 0x4a, 0x62, 0x28, 0x72, 0x27, 0x4e,
 0xad, 0x3c, 0x30, 0x58, 0x0f, 0x0e, 0x43, 0x06,
 0x01, 0x00, 0x01, 0x00, 0x01, 0x04, 0x02, 0x00,
 0x08, 0x01, 0xac, 0x05, 0x00, 0x01, 0x00, 0x9e,
 0x05, 0x00, 0x01, 0x9a, 0x05, 0x03, 0x03, 0xdd,
 0xd1, 0x71, 0xde, 0xd1, 0x47, 0x49, 0x29, 0xbc,
 0x03, 0x03, 0x02, 0x03, 0x26, 0x0e, 0x43, 0x06,
 0x01, 0x00, 0x02, 0x00, 0x02, 0x04, 0x02, 0x00,
 0x0b, 0x02, 0x9e, 0x05, 0x00, 0x01, 0x00, 0xae,
 0x05, 0x00, 0x01, 0x00, 0xac, 0x01, 0x00, 0x03,
 0x96, 0x05, 0x01, 0x03, 0xd2, 0xdd, 0xde, 0xd1,
 0xf1, 0x11, 0xeb, 0x03, 0x0e, 0xd1, 0x28, 0xbc,
 0x03, 0x0d, 0x01, 0x03, 0x0e, 0x43, 0x06, 0x01,
 0xfa, 0x03, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00,
 0x01, 0x03, 0xac, 0x01, 0x00, 0x01, 0x00, 0xac,
 0x05, 0x00, 0x01, 0x00, 0x9a, 0x05, 0x00, 0x01,
 0x00, 0x29, 0xbc, 0x03, 0x1e, 0x00, 0x0e, 0x43,
 0x06, 0x01, 0xfc, 0x03, 0x03, 0x00, 0x03, 0x00,
 0x00, 0x00, 0x01, 0x03, 0xac, 0x01, 0x00, 0x01,
 0x00, 0xac, 0x05, 0x00, 0x01, 0x00, 0x9a, 0x05,
 0x00, 0x01, 0x00, 0x29, 0xbc, 0x03, 0x1f, 0x00,
 0x0e, 0x43, 0x06, 0x01, 0xfe, 0x03, 0x01, 0x01,
 0x01, 0x03, 0x00, 0x03, 0x27, 0x02, 0xac, 0x01,
 0x00, 0x01, 0x40, 0xec, 0x01, 0x03, 0x00, 0x70,
 0xd1, 0x61, 0x00, 0x00, 0xbf, 0x02, 0x56, 0x2f,
 0x00, 0x00, 0x00, 0x01, 0x1b, 0xc0, 0x00, 0x54,
 0x58, 0x01, 0x00, 0x00, 0x00, 0x1b, 0x1b, 0xc0,
 0x01, 0x54, 0x59, 0x01, 0x00, 0x00, 0x00, 0x1b,
 0x06, 0xc9, 0x0e, 0x68, 0x00, 0x00, 0x28, 0xbc,
 0x03, 0x20, 0x08, 0x03, 0x3f, 0x00, 0x01, 0x12,
 0x31, 0x0a, 0x31, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x00, 0x02, 0x00, 0x03, 0x01, 0x00, 0x35, 0x02,
 0xb4, 0x05, 0x01, 0x00, 0x20, 0xb6, 0x05, 0x01,
 0x01, 0x20, 0xac, 0x01, 0x00, 0x03, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xdd, 0x42, 0x34, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0xc9, 0xdd, 0x11,
 0x62, 0x00, 0x00, 0x21, 0x01, 0x00, 0xca, 0x62,
 0x01, 0x00, 0x42, 0xea, 0x00, 0x00, 0x00, 0x24,
 0x00, 0x00, 0x0e, 0x62, 0x01, 0x00, 0x42, 0x33,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62,
 0x01, 0x00, 0x28, 0xbc, 0x03, 0x22, 0x05, 0x22,
 0x35, 0x31, 0x40, 0x3f, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x00, 0x1b,
 0x01, 0xb6, 0x05, 0x01, 0x00, 0x20, 0xac, 0x01,
 0x00, 0x03, 0x61, 0x00, 0x00, 0x38, 0x92, 0x00,
 0x00, 0x00, 0x42, 0x5c, 0x01, 0x00, 0x00, 0xdd,
 0x41, 0x3b, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00,
 0xc9, 0x62, 0x00, 0x00, 0x28, 0xbc, 0x03, 0x2d,
 0x02, 0x12, 0x67, 0x0e, 0xc6, 0x07, 0x01, 0x00,
 0x00, 0x04, 0x00, 0x05, 0x01, 0x00, 0x31, 0x04,
 0xe4, 0x01, 0x00, 0x01, 0x00, 0xe2, 0x01, 0x00,
 0x01, 0x00, 0x9a, 0x01, 0x00, 0x01, 0x00, 0x10,
 0x00, 0x01, 0x20, 0xec, 0x01, 0x00, 0x0d, 0x0c,
 0x02, 0xc9, 0x0c, 0x03, 0xca, 0x61, 0x03, 0x00,
 0x0c, 0x00, 0xcb, 0x2b, 0xc5, 0x34, 0xc6, 0x26,
 0x00, 0x00, 0xb5, 0xc7, 0x52, 0x0e, 0x27, 0x01,
 0x00, 0x11, 0x64, 0x03, 0x00, 0x65, 0x00, 0x00,
 0x11, 0xea, 0x08, 0x62, 0x03, 0x00, 0x1b, 0x24,
 0x00, 0x00, 0x0e, 0x0e, 0x62, 0x03, 0x00, 0x28,
 0xbc, 0x03, 0x32, 0x00, 0x0a, 0x14, 0x01, 0x80,
 0x0a, 0x28, 0x01, 0x80, 0x0a, 0x10, 0x01, 0x80,
 0x0a, 0x10, 0x01, 0x80, 0x0e, 0x41, 0x06, 0x01,
 0x84, 0x04, 0x01, 0x00, 0x00, 0x07, 0x00, 0x02,
 0x3d, 0x01, 0xba, 0x05, 0x00, 0x01, 0x00, 0x0d,
 0x00, 0x00, 0xd5, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x02, 0x01, 0x00, 0x00, 0xc1, 0x42, 0x5c,
 0x00, 0x00, 0x00, 0xd1, 0x42, 0x5f, 0x01, 0x00,
 0x00, 0xc0, 0x00, 0x24, 0x01, 0x00, 0x42, 0x5f,
 0x01, 0x00, 0x00, 0xc0, 0x01, 0x24, 0x01, 0x00,
 0x42, 0x5b, 0x00, 0x00, 0x00, 0x04, 0x60, 0x01,
 0x00, 0x00, 0x24, 0x01, 0x00, 0x24, 0x01, 0x00,
 0x24, 0x01, 0x00, 0x29, 0xbc, 0x03, 0x37, 0x05,
 0x17, 0x8a, 0x35, 0x53, 0x12, 0x0e, 0x42, 0x06,
 0x01, 0x00, 0x01, 0x00, 0x01, 0x02, 0x00, 0x00,
 0x11, 0x01, 0xc2, 0x05, 0x00, 0x01, 0x00, 0xd1,
 0x38, 0x45, 0x00, 0x00, 0x00, 0xab, 0xea, 0x07,
 0x04, 0x45, 0x00, 0x00, 0x00, 0x28, 0xd1, 0x28,
 0xbc, 0x03, 0x38, 0x00, 0x0e, 0x42, 0x06, 0x01,
 0x00, 0x01, 0x00, 0x01, 0x03, 0x00, 0x00, 0x1b,
 0x01, 0xc2, 0x05, 0x00, 0x01, 0x00, 0xd1, 0x97,
 0x04, 0x49, 0x00, 0x00, 0x00, 0xab, 0xea, 0x10,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01,
 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00, 0x28, 0xd1,
 0x28, 0xbc, 0x03, 0x39, 0x00, 0x0e, 0x43, 0x06,
 0x01, 0x86, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00,
 0x00, 0x1d, 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x63, 0x01, 0x00, 0x00, 0xb5, 0x24, 0x01,
 0x00, 0x0e, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x64, 0x01, 0x00, 0x00, 0xb5, 0x25, 0x01, 0x00,
 0xbc, 0x03, 0x3d, 0x02, 0x03, 0x4e, 0x0e, 0x43,
 0x06, 0x01, 0x88, 0x04, 0x00, 0x00, 0x00, 0x03,
 0x00, 0x00, 0x1d, 0x00, 0x38, 0x5e, 0x01, 0x00,
 0x00, 0x42, 0x65, 0x01, 0x00, 0x00, 0xb5, 0x24,
 0x01, 0x00, 0x0e, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x64, 0x01, 0x00, 0x00, 0xb5, 0x25, 0x01,
 0x00, 0xbc, 0x03, 0x41, 0x02, 0x03, 0x4e, 0x0e,
 0x43, 0x06, 0x01, 0x8a, 0x04, 0x00, 0x00, 0x00,
 0x02, 0x00, 0x00, 0x0d, 0x00, 0x38, 0x5e, 0x01,
 0x00, 0x00, 0x42, 0x66, 0x01, 0x00, 0x00, 0x25,
 0x00, 0x00, 0xbc, 0x03, 0x45, 0x01, 0x03, 0x0e,
 0x43, 0x06, 0x01, 0x8c, 0x04, 0x01, 0x00, 0x01,
 0x03, 0x00, 0x00, 0x28, 0x01, 0xce, 0x05, 0x00,
 0x01, 0x00, 0xd1, 0x38, 0x45, 0x00, 0x00, 0x00,
 0xac, 0xea, 0x11, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x06, 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01,
 0x00, 0x0e, 0x29, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x06, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0x0e, 0x29, 0xbc, 0x03, 0x48, 0x05, 0x03, 0x30,
 0x4e, 0x08, 0x4a, 0x0e, 0x43, 0x06, 0x01, 0x8e,
 0x04, 0x01, 0x01, 0x01, 0x04, 0x00, 0x01, 0x2b,
 0x02, 0xac, 0x05, 0x00, 0x01, 0x00, 0xb6, 0x05,
 0x01, 0x00, 0x20, 0x61, 0x00, 0x00, 0x38, 0x5e,
 0x01, 0x00, 0x00, 0x42, 0x68, 0x01, 0x00, 0x00,
 0xd1, 0xb5, 0x24, 0x02, 0x00, 0xc9, 0x62, 0x00,
 0x00, 0xbf, 0x00, 0xab, 0xea, 0x0f, 0x38, 0x5e,
 0x01, 0x00, 0x00, 0x42, 0x64, 0x01, 0x00, 0x00,
 0xb5, 0x25, 0x01, 0x00, 0x07, 0x28, 0xbc, 0x03,
 0x4f, 0x04, 0x12, 0x54, 0x2b, 0x4a, 0x0a, 0x10,
 0x01, 0x80, 0x0e, 0x43, 0x06, 0x01, 0x90, 0x04,
 0x01, 0x01, 0x01, 0x03, 0x00, 0x01, 0x1e, 0x02,
 0xac, 0x05, 0x00, 0x01, 0x00, 0xb6, 0x05, 0x01,
 0x00, 0x20, 0x61, 0x00, 0x00, 0x38, 0x5e, 0x01,
 0x00, 0x00, 0x42, 0x69, 0x01, 0x00, 0x00, 0xd1,
 0x24, 0x01, 0x00, 0xc9, 0x62, 0x00, 0x00, 0xbf,
 0x00, 0xab, 0xea, 0x03, 0x0a, 0x28, 0x09, 0x28,
 0xbc, 0x03, 0x58, 0x05, 0x12, 0x4f, 0x2b, 0x08,
 0x08, 0x0a, 0x10, 0x01, 0x80, 0x0e, 0x43, 0x06,
 0x01, 0x92, 0x04, 0x00, 0x00, 0x00, 0x03, 0x01,
 0x00, 0x10, 0x00, 0x82, 0x04, 0x05, 0x0c, 0x38,
 0x5e, 0x01, 0x00, 0x00, 0x42, 0x64, 0x01, 0x00,
 0x00, 0x65, 0x00, 0x00, 0x25, 0x01, 0x00, 0xbc,
 0x03, 0x61, 0x01, 0x03, 0x0e, 0x43, 0x06, 0x01,
 0x94, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00,
 0x1d, 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x6a, 0x01, 0x00, 0x00, 0xb5, 0x24, 0x01, 0x00,
 0x0e, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x64,
 0x01, 0x00, 0x00, 0xb5, 0x25, 0x01, 0x00, 0xbc,
 0x03, 0x65, 0x02, 0x03, 0x4e, 0x0e, 0x43, 0x06,
 0x01, 0xb0, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00,
 0x00, 0x1d, 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x58, 0x00, 0x00, 0x00, 0xb5, 0x24, 0x01,
 0x00, 0x0e, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x64, 0x01, 0x00, 0x00, 0xb5, 0x25, 0x01, 0x00,
 0xbc, 0x03, 0x69, 0x02, 0x03, 0x4e, 0x0e, 0x43,
 0x06, 0x01, 0x96, 0x04, 0x06, 0x00, 0x06, 0x08,
 0x00, 0x00, 0x17, 0x06, 0xd6, 0x05, 0x00, 0x01,
 0x00, 0xd8, 0x05, 0x00, 0x01, 0x00, 0xda, 0x05,
 0x00, 0x01, 0x00, 0xb4, 0x05, 0x00, 0x01, 0x00,
 0xdc, 0x05, 0x00, 0x01, 0x00, 0xde, 0x05, 0x00,
 0x01, 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x70, 0x01, 0x00, 0x00, 0xd1, 0xd2, 0xd3, 0xd4,
 0x5b, 0x04, 0x00, 0x5b, 0x05, 0x00, 0x25, 0x06,
 0x00, 0xbc, 0x03, 0x6d, 0x01, 0x03, 0x0e, 0x43,
 0x06, 0x01, 0x98, 0x04, 0x01, 0x00, 0x01, 0x03,
 0x00, 0x00, 0x0e, 0x01, 0xd8, 0x05, 0x00, 0x01,
 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x71,
 0x01, 0x00, 0x00, 0xd1, 0x25, 0x01, 0x00, 0xbc,
 0x03, 0x70, 0x01, 0x03, 0x0e, 0x43, 0x06, 0x01,
 0x9a, 0x04, 0x05, 0x00, 0x05, 0x07, 0x00, 0x00,
 0x15, 0x05, 0xd6, 0x05, 0x00, 0x01, 0x00, 0xda,
 0x05, 0x00, 0x01, 0x00, 0xb4, 0x05, 0x00, 0x01,
 0x00, 0xdc, 0x05, 0x00, 0x01, 0x00, 0xde, 0x05,
 0x00, 0x01, 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x72, 0x01, 0x00, 0x00, 0xd1, 0xd2, 0xd3,
 0xd4, 0x5b, 0x04, 0x00, 0x24, 0x05, 0x00, 0x29,
 0xbc, 0x03, 0x73, 0x02, 0x03, 0x67, 0x0e, 0x43,
 0x06, 0x01, 0x9c, 0x04, 0x02, 0x00, 0x02, 0x04,
 0x00, 0x00, 0x10, 0x02, 0xd6, 0x05, 0x00, 0x01,
 0x00, 0xdc, 0x05, 0x00, 0x01, 0x00, 0x38, 0x5e,
 0x01, 0x00, 0x00, 0x42, 0x73, 0x01, 0x00, 0x00,
 0xd1, 0xd2, 0x24, 0x02, 0x00, 0x29, 0xbc, 0x03,
 0x76, 0x02, 0x03, 0x4e, 0x0e, 0x43, 0x06, 0x01,
 0x00, 0x01, 0x00, 0x01, 0x05, 0x00, 0x00, 0x34,
 0x01, 0x9e, 0x04, 0x00, 0x01, 0x00, 0xd1, 0xd1,
 0x04, 0x74, 0x01, 0x00, 0x00, 0x71, 0xb5, 0x16,
 0x49, 0x04, 0x74, 0x01, 0x00, 0x00, 0x49, 0xd1,
 0xd1, 0x04, 0x75, 0x01, 0x00, 0x00, 0x71, 0xb6,
 0x16, 0x49, 0x04, 0x75, 0x01, 0x00, 0x00, 0x49,
 0xd1, 0xd1, 0x04, 0x76, 0x01, 0x00, 0x00, 0x71,
 0xb7, 0x16, 0x49, 0x04, 0x76, 0x01, 0x00, 0x00,
 0x49, 0x29, 0xbc, 0x03, 0x7b, 0x04, 0x03, 0x58,
 0x58, 0x58, 0x0e, 0x43, 0x06, 0x01, 0xa0, 0x04,
 0x01, 0x01, 0x01, 0x04, 0x02, 0x00, 0x5f, 0x02,
 0xee, 0x05, 0x00, 0x01, 0x00, 0x90, 0x02, 0x01,
 0x00, 0x20, 0x9e, 0x04, 0x14, 0x00, 0x8c, 0x04,
 0x0a, 0x00, 0x61, 0x00, 0x00, 0x38, 0x5e, 0x01,
 0x00, 0x00, 0x42, 0x78, 0x01, 0x00, 0x00, 0xd1,
 0xb5, 0x24, 0x02, 0x00, 0xc9, 0x62, 0x00, 0x00,
 0xdd, 0x41, 0x75, 0x01, 0x00, 0x00, 0xa9, 0xea,
 0x0f, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x64,
 0x01, 0x00, 0x00, 0xb5, 0x25, 0x01, 0x00, 0x62,
 0x00, 0x00, 0xdd, 0x41, 0x76, 0x01, 0x00, 0x00,
 0xa9, 0x11, 0xeb, 0x0c, 0x0e, 0x62, 0x00, 0x00,
 0xdd, 0x41, 0x74, 0x01, 0x00, 0x00, 0xa9, 0xea,
 0x05, 0x62, 0x00, 0x00, 0x28, 0xde, 0x04, 0x79,
 0x01, 0x00, 0x00, 0x42, 0x5c, 0x00, 0x00, 0x00,
 0x62, 0x00, 0x00, 0x24, 0x01, 0x00, 0xef, 0x0e,
 0x29, 0xbc, 0x03, 0x81, 0x01, 0x08, 0x12, 0x54,
 0x3f, 0x49, 0x85, 0x12, 0x08, 0x63, 0x0e, 0x43,
 0x06, 0x01, 0xa2, 0x04, 0x01, 0x00, 0x01, 0x03,
 0x00, 0x00, 0x0f, 0x01, 0xf4, 0x05, 0x00, 0x01,
 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x7b,
 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00, 0x29,
 0xbc, 0x03, 0x8c, 0x01, 0x02, 0x03, 0x49, 0x0e,
 0x43, 0x06, 0x01, 0xa4, 0x04, 0x02, 0x01, 0x02,
 0x05, 0x01, 0x01, 0x22, 0x03, 0xac, 0x05, 0x00,
 0x01, 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0xf8,
 0x05, 0x01, 0x00, 0x20, 0x82, 0x04, 0x05, 0x0c,
 0x61, 0x00, 0x00, 0x38, 0x5e, 0x01, 0x00, 0x00,
 0x42, 0x7d, 0x01, 0x00, 0x00, 0xd1, 0xd2, 0x65,
 0x00, 0x00, 0x24, 0x03, 0x00, 0xc9, 0x62, 0x00,
 0x00, 0xbf, 0x00, 0xab, 0xea, 0x03, 0x0a, 0x28,
 0x09, 0x28, 0xbc, 0x03, 0x8f, 0x01, 0x05, 0x12,
 0x63, 0x2b, 0x08, 0x09, 0x0a, 0x10, 0x01, 0x80,
 0x0e, 0x43, 0x06, 0x01, 0xa6, 0x04, 0x01, 0x01,
 0x01, 0x04, 0x01, 0x01, 0x21, 0x02, 0xac, 0x05,
 0x00, 0x01, 0x00, 0xf8, 0x05, 0x01, 0x00, 0x20,
 0x82, 0x04, 0x05, 0x0c, 0x61, 0x00, 0x00, 0x38,
 0x5e, 0x01, 0x00, 0x00, 0x42, 0x7e, 0x01, 0x00,
 0x00, 0xd1, 0x65, 0x00, 0x00, 0x24, 0x02, 0x00,
 0xc9, 0x62, 0x00, 0x00, 0xbf, 0x00, 0xab, 0xea,
 0x03, 0x0a, 0x28, 0x09, 0x28, 0xbc, 0x03, 0x98,
 0x01, 0x05, 0x12, 0x5e, 0x2b, 0x08, 0x09, 0x0a,
 0x10, 0x01, 0x80, 0x0e, 0x43, 0x06, 0x01, 0xa8,
 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x03,
 0x00, 0xbf, 0x00, 0x28, 0xbc, 0x03, 0xa1, 0x01,
 0x01, 0x03, 0x0a, 0x8c, 0x02, 0x06, 0xe8, 0x89,
 0x04, 0x23, 0xc7, 0x8a, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x05, 0x00, 0x07, 0x01, 0x00, 0xac,
 0x01, 0x05, 0xfe, 0x05, 0x01, 0x00, 0x30, 0x80,
 0x06, 0x03, 0x01, 0x30, 0x82, 0x06, 0x03, 0x02,
 0x20, 0x84, 0x06, 0x04, 0x03, 0x30, 0x10, 0x00,
 0x01, 0x00, 0x8e, 0x04, 0x0b, 0x00, 0x08, 0xc3,
 0x04, 0x61, 0x00, 0x00, 0xdd, 0x04, 0x83, 0x01,
 0x00, 0x00, 0xef, 0xc9, 0x62, 0x00, 0x00, 0x69,
 0x8b, 0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x61,
 0x01, 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42,
 0x84, 0x01, 0x00, 0x00, 0x62, 0x00, 0x00, 0x24,
 0x01, 0x00, 0xca, 0xc2, 0x04, 0x42, 0x16, 0x00,
 0x00, 0x00, 0x24, 0x00, 0x00, 0xcb, 0x38, 0x92,
 0x00, 0x00, 0x00, 0x42, 0x85, 0x01, 0x00, 0x00,
 0xc2, 0x04, 0x62, 0x01, 0x00, 0x24, 0x02, 0x00,
 0x0e, 0x61, 0x03, 0x00, 0x62, 0x02, 0x00, 0x7c,
 0xec, 0x44, 0xcc, 0x62, 0x02, 0x00, 0x62, 0x03,
 0x00, 0x47, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x11,
 0xb0, 0xea, 0x05, 0x0e, 0x06, 0xec, 0x06, 0x41,
 0x32, 0x01, 0x00, 0x00, 0x38, 0x45, 0x00, 0x00,
 0x00, 0xac, 0xea, 0x22, 0xc2, 0x04, 0x62, 0x03,
 0x00, 0x71, 0x62, 0x02, 0x00, 0x62, 0x03, 0x00,
 0x47, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42, 0x32,
 0x01, 0x00, 0x00, 0xc2, 0x04, 0x62, 0x03, 0x00,
 0x47, 0x24, 0x01, 0x00, 0x49, 0x7f, 0xea, 0xbb,
 0x0e, 0x0e, 0x29, 0x38, 0x94, 0x00, 0x00, 0x00,
 0x11, 0x04, 0x86, 0x01, 0x00, 0x00, 0x21, 0x01,
 0x00, 0x2f, 0xbc, 0x03, 0xa6, 0x01, 0x0c, 0x21,
 0x2c, 0x49, 0x59, 0x3a, 0x63, 0x35, 0xa8, 0xa9,
 0x1c, 0x08, 0x4a, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x00, 0x01, 0x00, 0x05, 0x01, 0x00, 0x18, 0x01,
 0x10, 0x00, 0x01, 0x00, 0xa4, 0x04, 0x17, 0x00,
 0x08, 0xc9, 0xdd, 0x04, 0x83, 0x01, 0x00, 0x00,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01,
 0x00, 0x00, 0xc5, 0x24, 0x01, 0x00, 0xf0, 0x29,
 0xbc, 0x03, 0xb9, 0x01, 0x02, 0x0d, 0x6c, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x00, 0x01, 0x00, 0x04,
 0x01, 0x00, 0x1f, 0x01, 0xb4, 0x05, 0x01, 0x00,
 0x20, 0xb0, 0x01, 0x0f, 0x00, 0x61, 0x00, 0x00,
 0xdd, 0xee, 0xc9, 0x38, 0x9b, 0x00, 0x00, 0x00,
 0x42, 0x84, 0x01, 0x00, 0x00, 0x62, 0x00, 0x00,
 0x11, 0xeb, 0x07, 0x0e, 0x04, 0x87, 0x01, 0x00,
 0x00, 0x25, 0x01, 0x00, 0xbc, 0x03, 0xbd, 0x01,
 0x02, 0x12, 0x12, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x01, 0x00, 0x01, 0x03, 0x00, 0x00, 0x0e, 0x01,
 0xb6, 0x05, 0x00, 0x01, 0x00, 0x38, 0x9b, 0x00,
 0x00, 0x00, 0x42, 0x62, 0x01, 0x00, 0x00, 0xd1,
 0x25, 0x01, 0x00, 0xbc, 0x03, 0xc2, 0x01, 0x01,
 0x03, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x00,
 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x29, 0xbc,
 0x03, 0xc6, 0x01, 0x00, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x00, 0x0f,
 0x01, 0x10, 0x00, 0x01, 0x00, 0xec, 0x01, 0x01,
 0x0d, 0x08, 0xc9, 0x2b, 0x65, 0x00, 0x00, 0x11,
 0xea, 0x06, 0xc5, 0x1b, 0x24, 0x00, 0x00, 0x29,
 0xbc, 0x03, 0xc8, 0x01, 0x00, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00,
 0x17, 0x02, 0x90, 0x06, 0x00, 0x01, 0x00, 0x10,
 0x00, 0x01, 0x00, 0xec, 0x01, 0x03, 0x0d, 0x08,
 0xc9, 0x2b, 0x65, 0x00, 0x00, 0x11, 0xea, 0x06,
 0xc5, 0x1b, 0x24, 0x00, 0x00, 0x0e, 0xc5, 0xd1,
 0x43, 0x88, 0x01, 0x00, 0x00, 0x29, 0xbc, 0x03,
 0xcb, 0x01, 0x02, 0x4e, 0x26, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x01, 0x02, 0x01, 0x04, 0x01, 0x00,
 0x22, 0x03, 0xac, 0x05, 0x00, 0x01, 0x00, 0x92,
 0x06, 0x01, 0x00, 0x20, 0x10, 0x00, 0x01, 0x00,
 0x90, 0x04, 0x0c, 0x00, 0x08, 0xca, 0x61, 0x00,
 0x00, 0xc6, 0x41, 0x88, 0x01, 0x00, 0x00, 0x38,
 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00,
 0x00, 0xd1, 0x24, 0x01, 0x00, 0x9d, 0xc9, 0xdd,
 0x62, 0x00, 0x00, 0x23, 0x01, 0x00, 0xbc, 0x03,
 0xcf, 0x01, 0x02, 0x1c, 0x71, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x01, 0x03, 0x01, 0x04, 0x01, 0x00,
 0x3c, 0x04, 0xac, 0x05, 0x00, 0x01, 0x00, 0x92,
 0x06, 0x01, 0x00, 0x20, 0xe0, 0x01, 0x01, 0x01,
 0x20, 0x10, 0x00, 0x01, 0x00, 0x8e, 0x04, 0x0b,
 0x00, 0x08, 0xcb, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0xc7, 0x41, 0x88, 0x01, 0x00, 0x00, 0x38,
 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00,
 0x00, 0xd1, 0x24, 0x01, 0x00, 0x9d, 0xc9, 0xdd,
 0x62, 0x00, 0x00, 0xef, 0xca, 0x62, 0x01, 0x00,
 0xf3, 0xeb, 0x11, 0x38, 0x9b, 0x00, 0x00, 0x00,
 0x42, 0x84, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00,
 0x25, 0x01, 0x00, 0x07, 0x28, 0xbc, 0x03, 0xd4,
 0x01, 0x05, 0x2b, 0x71, 0x22, 0x21, 0x55, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x04,
 0x02, 0x00, 0x33, 0x03, 0xac, 0x05, 0x00, 0x01,
 0x00, 0x92, 0x06, 0x01, 0x00, 0x20, 0x10, 0x00,
 0x01, 0x00, 0xa6, 0x04, 0x18, 0x00, 0x92, 0x04,
 0x0d, 0x00, 0x08, 0xca, 0x61, 0x00, 0x00, 0xc6,
 0x41, 0x88, 0x01, 0x00, 0x00, 0x38, 0x9b, 0x00,
 0x00, 0x00, 0x42, 0x62, 0x01, 0x00, 0x00, 0xd1,
 0x24, 0x01, 0x00, 0x9d, 0xc9, 0xdd, 0x62, 0x00,
 0x00, 0xef, 0xea, 0x10, 0x38, 0x9b, 0x00, 0x00,
 0x00, 0x42, 0x84, 0x01, 0x00, 0x00, 0xde, 0xee,
 0x25, 0x01, 0x00, 0x07, 0x28, 0xbc, 0x03, 0xdf,
 0x01, 0x04, 0x1c, 0x72, 0x26, 0x50, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x02, 0x03, 0x02, 0x04, 0x02,
 0x00, 0x48, 0x05, 0xac, 0x05, 0x00, 0x01, 0x00,
 0x80, 0x01, 0x00, 0x01, 0x00, 0x92, 0x06, 0x01,
 0x00, 0x20, 0x94, 0x06, 0x01, 0x01, 0x20, 0x10,
 0x00, 0x01, 0x00, 0xa4, 0x04, 0x17, 0x00, 0x92,
 0x04, 0x0d, 0x00, 0x08, 0xcb, 0x61, 0x01, 0x00,
 0x61, 0x00, 0x00, 0xc7, 0x41, 0x88, 0x01, 0x00,
 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62,
 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00, 0x9d,
 0xc9, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62,
 0x01, 0x00, 0x00, 0xd2, 0x24, 0x01, 0x00, 0xca,
 0xdd, 0x62, 0x00, 0x00, 0x62, 0x01, 0x00, 0xf0,
 0xea, 0x10, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42,
 0x84, 0x01, 0x00, 0x00, 0xde, 0xee, 0x25, 0x01,
 0x00, 0x07, 0x28, 0xbc, 0x03, 0xe9, 0x01, 0x05,
 0x2b, 0x71, 0x4f, 0x35, 0x50, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x01, 0x02, 0x01, 0x08, 0x00, 0x00,
 0x25, 0x03, 0x96, 0x06, 0x00, 0x01, 0x00, 0x98,
 0x06, 0x02, 0x00, 0x20, 0x10, 0x00, 0x01, 0x00,
 0x08, 0xca, 0x61, 0x00, 0x00, 0xd1, 0x7d, 0xec,
 0x16, 0xc9, 0xc6, 0x42, 0x42, 0x00, 0x00, 0x00,
 0x62, 0x00, 0x00, 0xb5, 0x47, 0x62, 0x00, 0x00,
 0xb6, 0x47, 0x24, 0x02, 0x00, 0x0e, 0x80, 0x00,
 0xea, 0xe8, 0x0e, 0x83, 0x29, 0xbc, 0x03, 0xf4,
 0x01, 0x04, 0x0d, 0x2b, 0x67, 0x21, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00,
 0x00, 0x10, 0x01, 0x10, 0x00, 0x01, 0x00, 0x08,
 0xc9, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62,
 0x01, 0x00, 0x00, 0xc5, 0x25, 0x01, 0x00, 0xbc,
 0x03, 0xfa, 0x01, 0x01, 0x0d, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x01, 0x00, 0x01, 0x03, 0x01, 0x00,
 0x0e, 0x01, 0x9a, 0x06, 0x00, 0x01, 0x00, 0xea,
 0x03, 0x02, 0x0d, 0x65, 0x00, 0x00, 0x11, 0xd1,
 0x41, 0x88, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00,
 0x28, 0xbc, 0x03, 0xff, 0x01, 0x01, 0x03, 0x0e,
 0x43, 0x06, 0x01, 0xaa, 0x04, 0x01, 0x02, 0x01,
 0x07, 0x00, 0x00, 0x30, 0x03, 0x9c, 0x06, 0x00,
 0x01, 0x00, 0xb6, 0x05, 0x01, 0x00, 0x20, 0x9e,
 0x06, 0x02, 0x01, 0x20, 0x61, 0x00, 0x00, 0xc1,
 0xc9, 0x61, 0x01, 0x00, 0xd1, 0x7d, 0xec, 0x1b,
 0xca, 0x62, 0x00, 0x00, 0x38, 0x96, 0x00, 0x00,
 0x00, 0x42, 0x90, 0x01, 0x00, 0x00, 0x62, 0x01,
 0x00, 0x24, 0x01, 0x00, 0x9d, 0x11, 0x63, 0x00,
 0x00, 0x0e, 0x80, 0x00, 0xea, 0xe3, 0x0e, 0x83,
 0x62, 0x00, 0x00, 0x28, 0xbc, 0x03, 0x85, 0x02,
 0x05, 0x12, 0x0e, 0x2b, 0x80, 0x22, 0x0e, 0x43,
 0x06, 0x01, 0xac, 0x04, 0x01, 0x02, 0x01, 0x05,
 0x00, 0x00, 0x3e, 0x03, 0xae, 0x04, 0x00, 0x01,
 0x00, 0xb6, 0x05, 0x01, 0x00, 0x20, 0xa2, 0x06,
 0x02, 0x01, 0x20, 0x61, 0x00, 0x00, 0x38, 0xa5,
 0x00, 0x00, 0x00, 0x11, 0xd1, 0xe9, 0x21, 0x01,
 0x00, 0xc9, 0x61, 0x01, 0x00, 0xb5, 0xca, 0x62,
 0x01, 0x00, 0xd1, 0xe9, 0xa3, 0xea, 0x1f, 0x62,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x71, 0xd1, 0x42,
 0x92, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24,
 0x01, 0x00, 0x49, 0x62, 0x01, 0x00, 0x91, 0x63,
 0x01, 0x00, 0x0e, 0xec, 0xdb, 0x62, 0x00, 0x00,
 0x28, 0xbc, 0x03, 0x90, 0x02, 0x05, 0x12, 0x40,
 0x44, 0x67, 0x36, 0x0e, 0x43, 0x06, 0x01, 0xae,
 0x04, 0x01, 0x00, 0x01, 0x03, 0x02, 0x00, 0x2c,
 0x01, 0xa6, 0x06, 0x00, 0x01, 0x00, 0xb0, 0x04,
 0x1f, 0x00, 0xaa, 0x04, 0x1c, 0x00, 0xd1, 0x97,
 0x04, 0x48, 0x00, 0x00, 0x00, 0xa9, 0xea, 0x06,
 0xdd, 0xd1, 0x23, 0x01, 0x00, 0xd1, 0x38, 0xa5,
 0x00, 0x00, 0x00, 0xa7, 0xea, 0x06, 0xde, 0xd1,
 0x23, 0x01, 0x00, 0x38, 0x94, 0x00, 0x00, 0x00,
 0x11, 0x04, 0x94, 0x01, 0x00, 0x00, 0x21, 0x01,
 0x00, 0x2f, 0xbc, 0x03, 0x99, 0x02, 0x05, 0x03,
 0x35, 0x1c, 0x30, 0x1e, 0x0e, 0x43, 0x06, 0x01,
 0xb0, 0x04, 0x01, 0x01, 0x01, 0x0a, 0x00, 0x00,
 0x5a, 0x02, 0xaa, 0x06, 0x00, 0x01, 0x00, 0xa2,
 0x06, 0x02, 0x00, 0x20, 0x61, 0x00, 0x00, 0xb5,
 0xc9, 0x62, 0x00, 0x00, 0xd1, 0xe9, 0xa3, 0xea,
 0x4c, 0xd1, 0x42, 0x92, 0x01, 0x00, 0x00, 0x62,
 0x00, 0x00, 0x24, 0x01, 0x00, 0xbe, 0xff, 0x00,
 0xa5, 0xea, 0x30, 0x38, 0x94, 0x00, 0x00, 0x00,
 0x11, 0x04, 0x96, 0x01, 0x00, 0x00, 0x42, 0x5c,
 0x00, 0x00, 0x00, 0xd1, 0x04, 0x97, 0x01, 0x00,
 0x00, 0x62, 0x00, 0x00, 0x04, 0x98, 0x01, 0x00,
 0x00, 0xd1, 0x62, 0x00, 0x00, 0x47, 0x04, 0x99,
 0x01, 0x00, 0x00, 0x24, 0x06, 0x00, 0x21, 0x01,
 0x00, 0x2f, 0x62, 0x00, 0x00, 0x91, 0x63, 0x00,
 0x00, 0x0e, 0xec, 0xae, 0xd1, 0x28, 0xbc, 0x03,
 0xa3, 0x02, 0x06, 0x03, 0x44, 0x5d, 0xe9, 0x08,
 0x36, 0x0e, 0x43, 0x06, 0x01, 0xb2, 0x04, 0x02,
 0x00, 0x02, 0x03, 0x00, 0x00, 0x12, 0x02, 0xb4,
 0x06, 0x00, 0x01, 0x00, 0xaa, 0x06, 0x00, 0x01,
 0x00, 0xd1, 0xea, 0x02, 0x29, 0x38, 0x94, 0x00,
 0x00, 0x00, 0x04, 0x9b, 0x01, 0x00, 0x00, 0xd2,
 0x9d, 0xef, 0x2f, 0xbc, 0x03, 0xad, 0x02, 0x03,
 0x03, 0x13, 0x08, 0x0e, 0x43, 0x06, 0x01, 0xb8,
 0x04, 0x02, 0x03, 0x02, 0x03, 0x01, 0x00, 0x35,
 0x05, 0xb8, 0x06, 0x00, 0x01, 0x00, 0xae, 0x01,
 0x00, 0x01, 0x00, 0x9a, 0x06, 0x01, 0x00, 0x20,
 0x9c, 0x06, 0x01, 0x01, 0x20, 0xac, 0x05, 0x01,
 0x02, 0x20, 0xaa, 0x04, 0x1c, 0x00, 0x61, 0x02,
 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0x38,
 0xa9, 0x00, 0x00, 0x00, 0x11, 0xd2, 0x26, 0x01,
 0x00, 0x21, 0x01, 0x00, 0xc9, 0x38, 0xa5, 0x00,
 0x00, 0x00, 0x11, 0x62, 0x00, 0x00, 0x41, 0x9d,
 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0xca, 0xdd,
 0x62, 0x01, 0x00, 0xef, 0xcb, 0xd1, 0x62, 0x02,
 0x00, 0x9d, 0x28, 0xbc, 0x03, 0xb8, 0x02, 0x04,
 0x30, 0x49, 0x5d, 0x21, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00, 0x1e,
 0x02, 0xb8, 0x06, 0x00, 0x01, 0x00, 0x10, 0x00,
 0x01, 0x00, 0xec, 0x01, 0x05, 0x0d, 0x08, 0xc9,
 0x2b, 0x65, 0x00, 0x00, 0x11, 0xea, 0x06, 0xc5,
 0x1b, 0x24, 0x00, 0x00, 0x0e, 0xc5, 0xb5, 0x43,
 0x30, 0x00, 0x00, 0x00, 0xc5, 0xd1, 0x43, 0x9c,
 0x01, 0x00, 0x00, 0x29, 0xbc, 0x03, 0xc2, 0x02,
 0x03, 0x4e, 0x26, 0x26, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x05,
 0x01, 0x10, 0x00, 0x01, 0x00, 0x08, 0xc9, 0xc5,
 0xe9, 0x28, 0xbc, 0x03, 0xc7, 0x02, 0x01, 0x0d,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x01, 0x00,
 0x02, 0x00, 0x00, 0x07, 0x01, 0x10, 0x00, 0x01,
 0x00, 0x08, 0xc9, 0xc5, 0xe9, 0xb5, 0xa9, 0x28,
 0xbc, 0x03, 0xcb, 0x02, 0x01, 0x0d, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x04, 0x02,
 0x00, 0x29, 0x03, 0xae, 0x01, 0x00, 0x01, 0x00,
 0x92, 0x06, 0x01, 0x00, 0x20, 0x10, 0x00, 0x01,
 0x00, 0xb8, 0x04, 0x23, 0x00, 0x8e, 0x04, 0x0b,
 0x00, 0x08, 0xca, 0x61, 0x00, 0x00, 0xd1, 0xc6,
 0xe9, 0xa6, 0xea, 0x03, 0x07, 0x28, 0xdd, 0xc6,
 0x41, 0x9c, 0x01, 0x00, 0x00, 0xd1, 0xf0, 0xc9,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x84, 0x01,
 0x00, 0x00, 0xde, 0x62, 0x00, 0x00, 0xef, 0x25,
 0x01, 0x00, 0xbc, 0x03, 0xcf, 0x02, 0x05, 0x1c,
 0x21, 0x08, 0x09, 0x35, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x01, 0x03, 0x01, 0x05, 0x05, 0x00, 0x73,
 0x04, 0xae, 0x01, 0x00, 0x01, 0x00, 0xac, 0x05,
 0x06, 0x00, 0x20, 0xbc, 0x06, 0x06, 0x01, 0x20,
 0x10, 0x00, 0x01, 0x00, 0xb4, 0x04, 0x21, 0x0c,
 0xb8, 0x04, 0x23, 0x00, 0xa4, 0x04, 0x17, 0x00,
 0x92, 0x04, 0x0d, 0x00, 0xb6, 0x04, 0x22, 0x0c,
 0x08, 0xcb, 0xd1, 0xc7, 0xe9, 0xa6, 0xea, 0x0e,
 0x38, 0x94, 0x00, 0x00, 0x00, 0x11, 0x65, 0x00,
 0x00, 0x21, 0x01, 0x00, 0x2f, 0xd1, 0xb6, 0x9d,
 0xc7, 0xe9, 0xa9, 0xea, 0x0a, 0xc7, 0x42, 0x3f,
 0x01, 0x00, 0x00, 0x25, 0x00, 0x00, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xde, 0xc7, 0x41, 0x9c,
 0x01, 0x00, 0x00, 0xd1, 0xf0, 0xc9, 0xc7, 0x42,
 0x3f, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xca,
 0xdf, 0x62, 0x00, 0x00, 0x38, 0x9b, 0x00, 0x00,
 0x00, 0x42, 0x62, 0x01, 0x00, 0x00, 0x62, 0x01,
 0x00, 0x24, 0x01, 0x00, 0xf0, 0xea, 0x10, 0x38,
 0x9b, 0x00, 0x00, 0x00, 0x42, 0x84, 0x01, 0x00,
 0x00, 0xe0, 0xee, 0x25, 0x01, 0x00, 0x38, 0x94,
 0x00, 0x00, 0x00, 0x11, 0x65, 0x04, 0x00, 0x21,
 0x01, 0x00, 0x2f, 0xbc, 0x03, 0xdb, 0x02, 0x0a,
 0x0d, 0x21, 0x3f, 0x30, 0x30, 0x21, 0x35, 0x36,
 0x76, 0x4f, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01,
 0x02, 0x01, 0x05, 0x02, 0x00, 0x31, 0x03, 0xbe,
 0x06, 0x00, 0x01, 0x00, 0xac, 0x05, 0x01, 0x00,
 0x20, 0x10, 0x00, 0x01, 0x00, 0xb8, 0x04, 0x23,
 0x00, 0xa4, 0x04, 0x17, 0x00, 0x08, 0xca, 0x61,
 0x00, 0x00, 0xdd, 0xc6, 0x41, 0x9c, 0x01, 0x00,
 0x00, 0xc6, 0xe9, 0xf0, 0xc9, 0xc6, 0x42, 0x30,
 0x00, 0x00, 0x00, 0xb6, 0x9d, 0x43, 0x30, 0x00,
 0x00, 0x00, 0xde, 0x62, 0x00, 0x00, 0x38, 0x9b,
 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00, 0x00,
 0xd1, 0x24, 0x01, 0x00, 0xf0, 0x29, 0xbc, 0x03,
 0xec, 0x02, 0x04, 0x1c, 0x3a, 0x44, 0x62, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x00, 0x03, 0x00, 0x03,
 0x04, 0x00, 0x56, 0x03, 0xaa, 0x01, 0x04, 0x00,
 0x20, 0xc0, 0x06, 0x04, 0x01, 0x20, 0x10, 0x00,
 0x01, 0x00, 0xb8, 0x04, 0x23, 0x00, 0xa6, 0x04,
 0x18, 0x00, 0x92, 0x04, 0x0d, 0x00, 0xb6, 0x04,
 0x22, 0x0c, 0x08, 0xcb, 0xc7, 0x42, 0x3c, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0xea, 0x03, 0x07,
 0x28, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xc7,
 0xe9, 0xb6, 0x9e, 0xc9, 0xdd, 0xc7, 0x41, 0x9c,
 0x01, 0x00, 0x00, 0x62, 0x00, 0x00, 0xf0, 0xca,
 0xc7, 0x42, 0x30, 0x00, 0x00, 0x00, 0xb6, 0x9e,
 0x43, 0x30, 0x00, 0x00, 0x00, 0xde, 0x62, 0x01,
 0x00, 0xef, 0xea, 0x10, 0x38, 0x9b, 0x00, 0x00,
 0x00, 0x42, 0x84, 0x01, 0x00, 0x00, 0xdf, 0xee,
 0x25, 0x01, 0x00, 0x38, 0x94, 0x00, 0x00, 0x00,
 0x11, 0x65, 0x03, 0x00, 0x21, 0x01, 0x00, 0x2f,
 0xbc, 0x03, 0xf2, 0x02, 0x09, 0x0d, 0x3a, 0x08,
 0x26, 0x1c, 0x3f, 0x45, 0x26, 0x4f, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x02, 0x02, 0x02, 0x05, 0x05,
 0x00, 0x53, 0x04, 0xae, 0x01, 0x00, 0x01, 0x00,
 0xbe, 0x06, 0x00, 0x01, 0x00, 0xac, 0x05, 0x04,
 0x00, 0x20, 0x10, 0x00, 0x01, 0x00, 0xb4, 0x04,
 0x21, 0x0c, 0xb8, 0x04, 0x23, 0x00, 0xa4, 0x04,
 0x17, 0x00, 0x92, 0x04, 0x0d, 0x00, 0xb6, 0x04,
 0x22, 0x0c, 0x08, 0xca, 0xd1, 0xc6, 0xe9, 0xa6,
 0xea, 0x0e, 0x38, 0x94, 0x00, 0x00, 0x00, 0x11,
 0x65, 0x00, 0x00, 0x21, 0x01, 0x00, 0x2f, 0x61,
 0x00, 0x00, 0xde, 0xc6, 0x41, 0x9c, 0x01, 0x00,
 0x00, 0xd1, 0xf0, 0xc9, 0xdf, 0x62, 0x00, 0x00,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01,
 0x00, 0x00, 0xd2, 0x24, 0x01, 0x00, 0xf0, 0xea,
 0x10, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x84,
 0x01, 0x00, 0x00, 0xe0, 0xee, 0x25, 0x01, 0x00,
 0x38, 0x94, 0x00, 0x00, 0x00, 0x11, 0x65, 0x04,
 0x00, 0x21, 0x01, 0x00, 0x2f, 0xbc, 0x03, 0x82,
 0x03, 0x07, 0x0d, 0x21, 0x3f, 0x17, 0x36, 0x6c,
 0x4f, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x02,
 0x01, 0x06, 0x00, 0x00, 0x1e, 0x03, 0xc2, 0x06,
 0x00, 0x01, 0x00, 0xbe, 0x06, 0x02, 0x00, 0x20,
 0x10, 0x00, 0x01, 0x00, 0x08, 0xca, 0x61, 0x00,
 0x00, 0xd1, 0x7d, 0xec, 0x0f, 0xc9, 0xc6, 0x42,
 0x3e, 0x01, 0x00, 0x00, 0x62, 0x00, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x80, 0x00, 0xea, 0xef, 0x0e,
 0x83, 0x29, 0xbc, 0x03, 0x90, 0x03, 0x04, 0x0d,
 0x2b, 0x44, 0x21, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x00, 0x01, 0x00, 0x03, 0x01, 0x00, 0x0b, 0x01,
 0x10, 0x00, 0x01, 0x00, 0xee, 0x03, 0x25, 0x08,
 0x08, 0xc9, 0x65, 0x00, 0x00, 0x11, 0xc5, 0x21,
 0x01, 0x00, 0x28, 0xbc, 0x03, 0x96, 0x03, 0x01,
 0x0d, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x03,
 0x00, 0x03, 0x02, 0x00, 0x36, 0x03, 0xa2, 0x06,
 0x02, 0x00, 0x20, 0xac, 0x05, 0x03, 0x01, 0x20,
 0x10, 0x00, 0x01, 0x00, 0xb8, 0x04, 0x23, 0x00,
 0xa6, 0x04, 0x18, 0x00, 0x08, 0xcb, 0x61, 0x00,
 0x00, 0xb5, 0xc9, 0x62, 0x00, 0x00, 0xc7, 0xe9,
 0xa3, 0xea, 0x20, 0x61, 0x01, 0x00, 0xdd, 0xc7,
 0x41, 0x9c, 0x01, 0x00, 0x00, 0x62, 0x00, 0x00,
 0xf0, 0xca, 0xde, 0x62, 0x01, 0x00, 0xef, 0x0e,
 0x62, 0x00, 0x00, 0x91, 0x63, 0x00, 0x00, 0x0e,
 0xec, 0xda, 0xc7, 0xb5, 0x43, 0x30, 0x00, 0x00,
 0x00, 0x29, 0xbc, 0x03, 0x9a, 0x03, 0x06, 0x0d,
 0x53, 0x3f, 0x21, 0x36, 0x26, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00,
 0x2a, 0x03, 0xb6, 0x05, 0x01, 0x00, 0x20, 0xc4,
 0x06, 0x02, 0x01, 0x20, 0x10, 0x00, 0x01, 0x00,
 0x08, 0xcb, 0x61, 0x00, 0x00, 0x26, 0x00, 0x00,
 0xc9, 0x61, 0x01, 0x00, 0xc7, 0x7d, 0xec, 0x11,
 0xca, 0x62, 0x00, 0x00, 0x42, 0x3e, 0x01, 0x00,
 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0x0e,
 0x80, 0x00, 0xea, 0xed, 0x0e, 0x83, 0x62, 0x00,
 0x00, 0x28, 0xbc, 0x03, 0xa3, 0x03, 0x05, 0x1c,
 0x18, 0x2b, 0x4e, 0x22, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x10,
 0x01, 0x10, 0x00, 0x01, 0x00, 0x08, 0xc9, 0x38,
 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00,
 0x00, 0xc5, 0x25, 0x01, 0x00, 0xbc, 0x03, 0xad,
 0x03, 0x01, 0x0d, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x01, 0x01, 0x01, 0x03, 0x01, 0x00, 0x1f, 0x02,
 0x9a, 0x06, 0x00, 0x01, 0x00, 0xc6, 0x06, 0x01,
 0x00, 0x20, 0xec, 0x03, 0x04, 0x0d, 0x61, 0x00,
 0x00, 0x65, 0x00, 0x00, 0x11, 0xd1, 0x41, 0x9c,
 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0xc9, 0x62,
 0x00, 0x00, 0xd1, 0xe9, 0x43, 0x30, 0x00, 0x00,
 0x00, 0x62, 0x00, 0x00, 0x28, 0xbc, 0x03, 0xb2,
 0x03, 0x03, 0x12, 0x49, 0x35, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x01, 0x01, 0x01, 0x02, 0x01, 0x00,
 0x1e, 0x02, 0xc6, 0x06, 0x00, 0x01, 0x00, 0x10,
 0x00, 0x01, 0x00, 0xec, 0x01, 0x07, 0x0d, 0x08,
 0xc9, 0x2b, 0x65, 0x00, 0x00, 0x11, 0xea, 0x06,
 0xc5, 0x1b, 0x24, 0x00, 0x00, 0x0e, 0xc5, 0xb5,
 0x43, 0xa4, 0x01, 0x00, 0x00, 0xc5, 0xd1, 0x43,
 0xa3, 0x01, 0x00, 0x00, 0x29, 0xbc, 0x03, 0xba,
 0x03, 0x03, 0x4e, 0x26, 0x26, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x00, 0x02, 0x00, 0x03, 0x00, 0x00,
 0x5c, 0x02, 0x80, 0x01, 0x03, 0x00, 0x20, 0x10,
 0x00, 0x01, 0x00, 0x08, 0xca, 0xc6, 0x41, 0xa4,
 0x01, 0x00, 0x00, 0xc6, 0x41, 0xa3, 0x01, 0x00,
 0x00, 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xa3, 0xea, 0x36, 0x61, 0x00, 0x00, 0xc6,
 0x41, 0xa3, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00,
 0x00, 0x00, 0xc6, 0x41, 0xa4, 0x01, 0x00, 0x00,
 0x24, 0x01, 0x00, 0xc9, 0xc6, 0x42, 0xa4, 0x01,
 0x00, 0x00, 0xb6, 0x9d, 0x43, 0xa4, 0x01, 0x00,
 0x00, 0x0b, 0x62, 0x00, 0x00, 0x4c, 0x40, 0x00,
 0x00, 0x00, 0x09, 0x4c, 0x69, 0x00, 0x00, 0x00,
 0x28, 0x0b, 0x07, 0x4c, 0x40, 0x00, 0x00, 0x00,
 0x0a, 0x4c, 0x69, 0x00, 0x00, 0x00, 0x28, 0xbc,
 0x03, 0xbf, 0x03, 0x0b, 0x0d, 0x85, 0x6c, 0x44,
 0x08, 0x2b, 0x22, 0x09, 0x08, 0x21, 0x21, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x01, 0x03, 0x01, 0x04,
 0x02, 0x00, 0x61, 0x04, 0xb8, 0x06, 0x00, 0x01,
 0x00, 0xca, 0x06, 0x01, 0x00, 0x20, 0xcc, 0x06,
 0x01, 0x01, 0x20, 0x10, 0x00, 0x01, 0x00, 0xec,
 0x01, 0x09, 0x0d, 0xec, 0x03, 0x24, 0x08, 0x08,
 0xcb, 0x2b, 0x65, 0x00, 0x00, 0x11, 0xea, 0x06,
 0xc7, 0x1b, 0x24, 0x00, 0x00, 0x0e, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xc7, 0xb5, 0x43, 0x30,
 0x00, 0x00, 0x00, 0xc7, 0xd1, 0x43, 0x9c, 0x01,
 0x00, 0x00, 0xc7, 0xd1, 0x04, 0x91, 0x01, 0x00,
 0x00, 0x9d, 0x43, 0xa7, 0x01, 0x00, 0x00, 0xd1,
 0x04, 0xa8, 0x01, 0x00, 0x00, 0x9d, 0xc9, 0xd1,
 0x04, 0xa2, 0x01, 0x00, 0x00, 0x9d, 0xca, 0xc7,
 0x65, 0x01, 0x00, 0x11, 0x62, 0x00, 0x00, 0x21,
 0x01, 0x00, 0x43, 0x50, 0x01, 0x00, 0x00, 0xc7,
 0x65, 0x01, 0x00, 0x11, 0x62, 0x01, 0x00, 0x21,
 0x01, 0x00, 0x43, 0x6b, 0x00, 0x00, 0x00, 0x29,
 0xbc, 0x03, 0xd3, 0x03, 0x08, 0x6c, 0x26, 0x26,
 0x44, 0x2b, 0x2b, 0x53, 0x53, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x00, 0x03, 0x00, 0x03, 0x01, 0x00,
 0x40, 0x03, 0xd2, 0x06, 0x01, 0x00, 0x20, 0xd4,
 0x06, 0x01, 0x01, 0x20, 0x10, 0x00, 0x01, 0x00,
 0xba, 0x04, 0x26, 0x0c, 0x08, 0xcb, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xc7, 0x41, 0x50, 0x01,
 0x00, 0x00, 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xc9, 0xc7, 0x41, 0x6b, 0x00, 0x00,
 0x00, 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xca, 0x62, 0x00, 0x00, 0x62, 0x01, 0x00,
 0xaa, 0xea, 0x0e, 0x38, 0x94, 0x00, 0x00, 0x00,
 0x11, 0x65, 0x00, 0x00, 0x21, 0x01, 0x00, 0x2f,
 0x62, 0x00, 0x00, 0x28, 0xbc, 0x03, 0xdd, 0x03,
 0x06, 0x2b, 0x4e, 0x4f, 0x30, 0x3f, 0x09, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x00, 0x03, 0x00, 0x03,
 0x01, 0x00, 0x40, 0x03, 0xd6, 0x06, 0x01, 0x00,
 0x20, 0xd8, 0x06, 0x01, 0x01, 0x20, 0x10, 0x00,
 0x01, 0x00, 0xba, 0x04, 0x26, 0x0c, 0x08, 0xcb,
 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xc7, 0x41,
 0x50, 0x01, 0x00, 0x00, 0x42, 0x3c, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xc9, 0xc7, 0x41, 0x6b,
 0x00, 0x00, 0x00, 0x42, 0x3c, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x62,
 0x01, 0x00, 0xaa, 0xea, 0x0e, 0x38, 0x94, 0x00,
 0x00, 0x00, 0x11, 0x65, 0x00, 0x00, 0x21, 0x01,
 0x00, 0x2f, 0x62, 0x00, 0x00, 0x28, 0xbc, 0x03,
 0xe8, 0x03, 0x06, 0x2b, 0x4e, 0x4f, 0x30, 0x3f,
 0x09, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x02,
 0x01, 0x03, 0x01, 0x00, 0x2d, 0x03, 0xae, 0x01,
 0x00, 0x01, 0x00, 0x9a, 0x06, 0x01, 0x00, 0x20,
 0x9c, 0x06, 0x01, 0x01, 0x20, 0xaa, 0x04, 0x1c,
 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0x38,
 0xa9, 0x00, 0x00, 0x00, 0x11, 0xd1, 0x26, 0x01,
 0x00, 0x21, 0x01, 0x00, 0xc9, 0x38, 0xa5, 0x00,
 0x00, 0x00, 0x11, 0x62, 0x00, 0x00, 0x41, 0x9d,
 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0xca, 0xdd,
 0x62, 0x01, 0x00, 0x23, 0x01, 0x00, 0xbc, 0x03,
 0xf3, 0x03, 0x03, 0x21, 0x49, 0x5d, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x03, 0x01,
 0x00, 0x22, 0x03, 0xda, 0x06, 0x00, 0x01, 0x00,
 0x9c, 0x06, 0x01, 0x00, 0x20, 0x9a, 0x06, 0x01,
 0x01, 0x20, 0xac, 0x04, 0x1d, 0x00, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xdd, 0xd1, 0xef, 0xc9,
 0x38, 0xa9, 0x00, 0x00, 0x00, 0x11, 0x62, 0x00,
 0x00, 0x41, 0x9d, 0x01, 0x00, 0x00, 0x21, 0x01,
 0x00, 0xca, 0x62, 0x01, 0x00, 0xb5, 0x47, 0x28,
 0xbc, 0x03, 0xf9, 0x03, 0x03, 0x21, 0x17, 0x5d,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x03, 0x01,
 0x04, 0x01, 0x00, 0x28, 0x04, 0xac, 0x05, 0x00,
 0x01, 0x00, 0xdc, 0x06, 0x01, 0x00, 0x20, 0xde,
 0x06, 0x01, 0x01, 0x20, 0x10, 0x00, 0x01, 0x00,
 0x8e, 0x04, 0x0b, 0x00, 0x08, 0xcb, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xc7, 0x41, 0xa7, 0x01,
 0x00, 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42,
 0x62, 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00,
 0x9d, 0xc9, 0xdd, 0x62, 0x00, 0x00, 0xef, 0xca,
 0x62, 0x01, 0x00, 0x28, 0xbc, 0x03, 0xff, 0x03,
 0x03, 0x2b, 0x71, 0x21, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x01, 0x04, 0x01, 0x03, 0x01, 0x00, 0x52,
 0x05, 0xac, 0x05, 0x00, 0x01, 0x00, 0xde, 0x06,
 0x01, 0x00, 0x20, 0xae, 0x01, 0x03, 0x01, 0x20,
 0x80, 0x01, 0x03, 0x02, 0x20, 0x10, 0x00, 0x01,
 0x00, 0xba, 0x04, 0x26, 0x0c, 0x08, 0xcc, 0x61,
 0x00, 0x00, 0xc8, 0x42, 0x46, 0x01, 0x00, 0x00,
 0xd1, 0x24, 0x01, 0x00, 0xc9, 0x62, 0x00, 0x00,
 0xea, 0x3c, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00,
 0xc8, 0x42, 0x45, 0x01, 0x00, 0x00, 0x62, 0x00,
 0x00, 0x24, 0x01, 0x00, 0xca, 0xc8, 0x41, 0x6b,
 0x00, 0x00, 0x00, 0x42, 0x41, 0x00, 0x00, 0x00,
 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb, 0x62,
 0x02, 0x00, 0xea, 0x05, 0x62, 0x02, 0x00, 0x28,
 0x38, 0x94, 0x00, 0x00, 0x00, 0x11, 0x65, 0x00,
 0x00, 0x21, 0x01, 0x00, 0x2f, 0x07, 0x28, 0xbc,
 0x03, 0x85, 0x04, 0x0a, 0x1c, 0x3b, 0x3a, 0x44,
 0x5e, 0x1c, 0x12, 0x08, 0x40, 0x09, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x02, 0x06, 0x02, 0x04, 0x02,
 0x00, 0x9c, 0x01, 0x08, 0xac, 0x05, 0x00, 0x01,
 0x00, 0x80, 0x01, 0x00, 0x01, 0x00, 0xdc, 0x06,
 0x01, 0x00, 0x20, 0xde, 0x06, 0x01, 0x01, 0x20,
 0xae, 0x01, 0x03, 0x02, 0x20, 0xe0, 0x06, 0x04,
 0x02, 0x20, 0xe2, 0x06, 0x04, 0x04, 0x20, 0x10,
 0x00, 0x01, 0x00, 0x8e, 0x04, 0x0b, 0x00, 0xa4,
 0x04, 0x17, 0x00, 0x08, 0xc3, 0x05, 0x61, 0x01,
 0x00, 0x61, 0x00, 0x00, 0xc2, 0x05, 0x41, 0xa7,
 0x01, 0x00, 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00,
 0x42, 0x62, 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01,
 0x00, 0x9d, 0xc9, 0xdd, 0x62, 0x00, 0x00, 0xef,
 0xca, 0x62, 0x01, 0x00, 0xea, 0x25, 0x61, 0x02,
 0x00, 0xc2, 0x05, 0x42, 0x45, 0x01, 0x00, 0x00,
 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb, 0xc2,
 0x05, 0x41, 0x6b, 0x00, 0x00, 0x00, 0x42, 0x40,
 0x01, 0x00, 0x00, 0x62, 0x02, 0x00, 0xd2, 0x25,
 0x02, 0x00, 0x61, 0x04, 0x00, 0x61, 0x03, 0x00,
 0xc2, 0x05, 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xcc, 0xc2, 0x05, 0x42, 0x44, 0x01,
 0x00, 0x00, 0x62, 0x03, 0x00, 0x24, 0x01, 0x00,
 0xc3, 0x04, 0xde, 0x62, 0x00, 0x00, 0x62, 0x04,
 0x00, 0xf0, 0x0e, 0xc2, 0x05, 0x41, 0x50, 0x01,
 0x00, 0x00, 0x42, 0x3e, 0x01, 0x00, 0x00, 0xd1,
 0x24, 0x01, 0x00, 0x0e, 0xc2, 0x05, 0x41, 0x6b,
 0x00, 0x00, 0x00, 0x42, 0x3e, 0x01, 0x00, 0x00,
 0xd2, 0x24, 0x01, 0x00, 0x0e, 0x07, 0x28, 0xbc,
 0x03, 0x96, 0x04, 0x0c, 0x30, 0x76, 0x22, 0x2b,
 0x49, 0x62, 0x21, 0x3a, 0x4e, 0x30, 0x58, 0x58,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x06, 0x01,
 0x04, 0x04, 0x00, 0xe1, 0x01, 0x07, 0xac, 0x05,
 0x00, 0x01, 0x00, 0xdc, 0x06, 0x01, 0x00, 0x20,
 0xde, 0x06, 0x01, 0x01, 0x20, 0xc0, 0x06, 0x06,
 0x05, 0x20, 0xe4, 0x06, 0x0a, 0x03, 0x20, 0xae,
 0x01, 0x03, 0x02, 0x20, 0x10, 0x00, 0x01, 0x00,
 0x8e, 0x04, 0x0b, 0x00, 0xa6, 0x04, 0x18, 0x00,
 0xba, 0x04, 0x26, 0x0c, 0xa4, 0x04, 0x17, 0x00,
 0x08, 0xc3, 0x05, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0xc2, 0x05, 0x41, 0xa7, 0x01, 0x00, 0x00,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01,
 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00, 0x9d, 0xc9,
 0xdd, 0x62, 0x00, 0x00, 0xef, 0xca, 0x62, 0x01,
 0x00, 0x69, 0xb5, 0x00, 0x00, 0x00, 0x61, 0x04,
 0x00, 0xc2, 0x05, 0x42, 0x3b, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xb6, 0xa9, 0xea, 0x09, 0xde,
 0x62, 0x00, 0x00, 0xef, 0x0e, 0xec, 0x65, 0x61,
 0x02, 0x00, 0xc2, 0x05, 0x41, 0x50, 0x01, 0x00,
 0x00, 0x42, 0x41, 0x00, 0x00, 0x00, 0xc2, 0x05,
 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0xb6, 0x9e, 0x24, 0x01, 0x00, 0xcb, 0x62, 0x02,
 0x00, 0x96, 0xea, 0x0e, 0x38, 0x94, 0x00, 0x00,
 0x00, 0x11, 0x65, 0x02, 0x00, 0x21, 0x01, 0x00,
 0x2f, 0xde, 0x62, 0x00, 0x00, 0xef, 0x0e, 0x62,
 0x02, 0x00, 0xd1, 0xaa, 0xea, 0x26, 0x61, 0x03,
 0x00, 0xc2, 0x05, 0x41, 0xa7, 0x01, 0x00, 0x00,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01,
 0x00, 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00,
 0x9d, 0xcc, 0xe0, 0x62, 0x03, 0x00, 0x62, 0x01,
 0x00, 0xf0, 0x0e, 0xc2, 0x05, 0x42, 0x45, 0x01,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00,
 0xc3, 0x04, 0xc2, 0x05, 0x41, 0x50, 0x01, 0x00,
 0x00, 0x42, 0x3d, 0x01, 0x00, 0x00, 0x62, 0x04,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0xc2, 0x05, 0x41,
 0x6b, 0x00, 0x00, 0x00, 0x42, 0x3d, 0x01, 0x00,
 0x00, 0x62, 0x04, 0x00, 0x25, 0x01, 0x00, 0x07,
 0x28, 0xbc, 0x03, 0xa7, 0x04, 0x14, 0x30, 0x76,
 0x22, 0x3a, 0x4b, 0x21, 0x1e, 0x90, 0x21, 0x3f,
 0x09, 0x23, 0x35, 0x80, 0x00, 0x09, 0x08, 0x4e,
 0x62, 0x5f, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00,
 0x03, 0x00, 0x07, 0x01, 0x00, 0x54, 0x03, 0xac,
 0x05, 0x02, 0x00, 0x20, 0xdc, 0x06, 0x03, 0x01,
 0x20, 0x10, 0x00, 0x01, 0x00, 0xa6, 0x04, 0x18,
 0x00, 0x08, 0xcb, 0x61, 0x00, 0x00, 0xc7, 0x41,
 0x50, 0x01, 0x00, 0x00, 0x7d, 0xec, 0x23, 0xc9,
 0x61, 0x01, 0x00, 0xc7, 0x41, 0xa7, 0x01, 0x00,
 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62,
 0x01, 0x00, 0x00, 0x62, 0x00, 0x00, 0x24, 0x01,
 0x00, 0x9d, 0xca, 0xdd, 0x62, 0x01, 0x00, 0xef,
 0x0e, 0x80, 0x00, 0xea, 0xdb, 0x0e, 0x83, 0xc7,
 0x41, 0x50, 0x01, 0x00, 0x00, 0x42, 0x42, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0xc7, 0x41,
 0x6b, 0x00, 0x00, 0x00, 0x42, 0x42, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0x29, 0xbc, 0x03, 0xca,
 0x04, 0x07, 0x0d, 0x53, 0x7b, 0x21, 0x22, 0x4e,
 0x49, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x03,
 0x00, 0x06, 0x00, 0x00, 0x2a, 0x03, 0xb6, 0x05,
 0x01, 0x00, 0x20, 0xc4, 0x06, 0x02, 0x01, 0x20,
 0x10, 0x00, 0x01, 0x00, 0x08, 0xcb, 0x61, 0x00,
 0x00, 0x26, 0x00, 0x00, 0xc9, 0x61, 0x01, 0x00,
 0xc7, 0x7d, 0xec, 0x11, 0xca, 0x62, 0x00, 0x00,
 0x42, 0x3e, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00,
 0x24, 0x01, 0x00, 0x0e, 0x80, 0x00, 0xea, 0xed,
 0x0e, 0x83, 0x62, 0x00, 0x00, 0x28, 0xbc, 0x03,
 0xd4, 0x04, 0x05, 0x1c, 0x18, 0x2b, 0x4e, 0x22,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x01, 0x00,
 0x03, 0x01, 0x00, 0x0b, 0x01, 0x10, 0x00, 0x01,
 0x00, 0xf2, 0x03, 0x28, 0x08, 0x08, 0xc9, 0x65,
 0x00, 0x00, 0x11, 0xc5, 0x21, 0x01, 0x00, 0x28,
 0xbc, 0x03, 0xde, 0x04, 0x01, 0x0d, 0x0e, 0x42,
 0x07, 0x01, 0x00, 0x01, 0x03, 0x01, 0x08, 0x00,
 0x00, 0x2d, 0x04, 0xe6, 0x06, 0x00, 0x01, 0x00,
 0xd0, 0x06, 0x02, 0x00, 0x20, 0xc4, 0x06, 0x02,
 0x01, 0x20, 0x10, 0x00, 0x01, 0x00, 0x08, 0xcb,
 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xd1, 0x7d,
 0xec, 0x1b, 0x7d, 0x80, 0x00, 0x0e, 0xc9, 0x80,
 0x00, 0x0e, 0xca, 0x83, 0xc7, 0x42, 0x42, 0x00,
 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x01, 0x00,
 0x24, 0x02, 0x00, 0x0e, 0x80, 0x00, 0xea, 0xe3,
 0x0e, 0x83, 0x29, 0xbc, 0x03, 0xe2, 0x04, 0x04,
 0x0d, 0x67, 0x53, 0x21, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x00, 0x10,
 0x01, 0x10, 0x00, 0x01, 0x00, 0x08, 0xc9, 0x38,
 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00,
 0x00, 0xc5, 0x25, 0x01, 0x00, 0xbc, 0x03, 0xe8,
 0x04, 0x01, 0x0d, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x01, 0x01, 0x01, 0x05, 0x02, 0x00, 0x7d, 0x02,
 0x9a, 0x06, 0x00, 0x01, 0x00, 0xbe, 0x05, 0x01,
 0x00, 0x20, 0xf0, 0x03, 0x08, 0x0d, 0xec, 0x03,
 0x24, 0x08, 0x61, 0x00, 0x00, 0x65, 0x00, 0x00,
 0x11, 0xd1, 0x41, 0x9c, 0x01, 0x00, 0x00, 0x21,
 0x01, 0x00, 0xc9, 0x62, 0x00, 0x00, 0xd1, 0xe9,
 0x43, 0x30, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00,
 0x65, 0x01, 0x00, 0x11, 0xd1, 0x41, 0x9c, 0x01,
 0x00, 0x00, 0x04, 0xa8, 0x01, 0x00, 0x00, 0x9d,
 0x21, 0x01, 0x00, 0x43, 0x50, 0x01, 0x00, 0x00,
 0x62, 0x00, 0x00, 0x41, 0x50, 0x01, 0x00, 0x00,
 0xd1, 0x41, 0x50, 0x01, 0x00, 0x00, 0xe9, 0x43,
 0x30, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x65,
 0x01, 0x00, 0x11, 0xd1, 0x41, 0x9c, 0x01, 0x00,
 0x00, 0x04, 0xa2, 0x01, 0x00, 0x00, 0x9d, 0x21,
 0x01, 0x00, 0x43, 0x6b, 0x00, 0x00, 0x00, 0x62,
 0x00, 0x00, 0x41, 0x6b, 0x00, 0x00, 0x00, 0xd1,
 0x41, 0x6b, 0x00, 0x00, 0x00, 0xe9, 0x43, 0x30,
 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x28, 0xbc,
 0x03, 0xed, 0x04, 0x07, 0x12, 0x4a, 0x36, 0x8a,
 0x68, 0x8a, 0x67, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x01, 0x01, 0x01, 0x04, 0x02, 0x00, 0x36, 0x02,
 0xe8, 0x06, 0x00, 0x01, 0x00, 0x10, 0x00, 0x01,
 0x00, 0xec, 0x01, 0x0b, 0x0d, 0xee, 0x03, 0x25,
 0x08, 0x08, 0xc9, 0x2b, 0x65, 0x00, 0x00, 0x11,
 0xea, 0x06, 0xc5, 0x1b, 0x24, 0x00, 0x00, 0x0e,
 0xc5, 0x65, 0x01, 0x00, 0x11, 0xd1, 0x41, 0x50,
 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x43, 0x50,
 0x01, 0x00, 0x00, 0xc5, 0x65, 0x01, 0x00, 0x11,
 0xd1, 0x41, 0x6b, 0x00, 0x00, 0x00, 0x21, 0x01,
 0x00, 0x43, 0x6b, 0x00, 0x00, 0x00, 0x29, 0xbc,
 0x03, 0xfd, 0x04, 0x03, 0x4e, 0x62, 0x62, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x00, 0x03, 0x00, 0x03,
 0x01, 0x00, 0x6d, 0x03, 0xac, 0x05, 0x01, 0x00,
 0x20, 0x80, 0x01, 0x01, 0x01, 0x20, 0x10, 0x00,
 0x01, 0x00, 0xba, 0x04, 0x26, 0x0c, 0x08, 0xcb,
 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xc7, 0x41,
 0x50, 0x01, 0x00, 0x00, 0x42, 0x6a, 0x00, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xc9, 0xc7, 0x41, 0x6b,
 0x00, 0x00, 0x00, 0x42, 0x6a, 0x00, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x41,
 0x69, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x41,
 0x69, 0x00, 0x00, 0x00, 0xaa, 0xea, 0x0e, 0x38,
 0x94, 0x00, 0x00, 0x00, 0x11, 0x65, 0x00, 0x00,
 0x21, 0x01, 0x00, 0x2f, 0x0b, 0x62, 0x00, 0x00,
 0x41, 0x40, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00,
 0x41, 0x40, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00,
 0x4c, 0x40, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00,
 0x41, 0x69, 0x00, 0x00, 0x00, 0x4c, 0x69, 0x00,
 0x00, 0x00, 0x28, 0xbc, 0x03, 0x82, 0x05, 0x09,
 0x2b, 0x4e, 0x4f, 0x62, 0x3f, 0x09, 0x08, 0x7b,
 0x44, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x02,
 0x01, 0x04, 0x02, 0x00, 0x46, 0x03, 0xb8, 0x06,
 0x00, 0x01, 0x00, 0xea, 0x06, 0x01, 0x00, 0x20,
 0x10, 0x00, 0x01, 0x00, 0xec, 0x01, 0x0d, 0x0d,
 0xec, 0x03, 0x24, 0x08, 0x08, 0xca, 0x2b, 0x65,
 0x00, 0x00, 0x11, 0xea, 0x06, 0xc6, 0x1b, 0x24,
 0x00, 0x00, 0x0e, 0x61, 0x00, 0x00, 0xc6, 0xb5,
 0x43, 0x30, 0x00, 0x00, 0x00, 0xc6, 0xd1, 0x43,
 0x9c, 0x01, 0x00, 0x00, 0xc6, 0xd1, 0x04, 0x91,
 0x01, 0x00, 0x00, 0x9d, 0x43, 0xb6, 0x01, 0x00,
 0x00, 0xd1, 0x04, 0x8f, 0x01, 0x00, 0x00, 0x9d,
 0xc9, 0xc6, 0x65, 0x01, 0x00, 0x11, 0x62, 0x00,
 0x00, 0x21, 0x01, 0x00, 0x43, 0xa1, 0x01, 0x00,
 0x00, 0x29, 0xbc, 0x03, 0x94, 0x05, 0x06, 0x5d,
 0x26, 0x26, 0x44, 0x2b, 0x53, 0x0e, 0x42, 0x07,
 0x01, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00,
 0x10, 0x01, 0x10, 0x00, 0x01, 0x00, 0x08, 0xc9,
 0xc5, 0x41, 0xa1, 0x01, 0x00, 0x00, 0x42, 0x3b,
 0x01, 0x00, 0x00, 0x25, 0x00, 0x00, 0xbc, 0x03,
 0x9c, 0x05, 0x01, 0x0d, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x00, 0x10,
 0x01, 0x10, 0x00, 0x01, 0x00, 0x08, 0xc9, 0xc5,
 0x41, 0xa1, 0x01, 0x00, 0x00, 0x42, 0x3c, 0x01,
 0x00, 0x00, 0x25, 0x00, 0x00, 0xbc, 0x03, 0xa0,
 0x05, 0x01, 0x0d, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x01, 0x02, 0x01, 0x03, 0x01, 0x00, 0x2d, 0x03,
 0xae, 0x01, 0x00, 0x01, 0x00, 0x9a, 0x06, 0x01,
 0x00, 0x20, 0x9c, 0x06, 0x01, 0x01, 0x20, 0xaa,
 0x04, 0x1c, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0x38, 0xa9, 0x00, 0x00, 0x00, 0x11, 0xd1,
 0x26, 0x01, 0x00, 0x21, 0x01, 0x00, 0xc9, 0x38,
 0xa5, 0x00, 0x00, 0x00, 0x11, 0x62, 0x00, 0x00,
 0x41, 0x9d, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00,
 0xca, 0xdd, 0x62, 0x01, 0x00, 0x23, 0x01, 0x00,
 0xbc, 0x03, 0xa4, 0x05, 0x03, 0x21, 0x49, 0x5d,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01,
 0x03, 0x01, 0x00, 0x22, 0x03, 0xda, 0x06, 0x00,
 0x01, 0x00, 0x9c, 0x06, 0x01, 0x00, 0x20, 0x9a,
 0x06, 0x01, 0x01, 0x20, 0xac, 0x04, 0x1d, 0x00,
 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xdd, 0xd1,
 0xef, 0xc9, 0x38, 0xa9, 0x00, 0x00, 0x00, 0x11,
 0x62, 0x00, 0x00, 0x41, 0x9d, 0x01, 0x00, 0x00,
 0x21, 0x01, 0x00, 0xca, 0x62, 0x01, 0x00, 0xb5,
 0x47, 0x28, 0xbc, 0x03, 0xaa, 0x05, 0x03, 0x21,
 0x17, 0x5d, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01,
 0x02, 0x01, 0x04, 0x01, 0x00, 0x22, 0x03, 0xbe,
 0x06, 0x00, 0x01, 0x00, 0xdc, 0x06, 0x01, 0x00,
 0x20, 0x10, 0x00, 0x01, 0x00, 0x90, 0x04, 0x0c,
 0x00, 0x08, 0xca, 0x61, 0x00, 0x00, 0xc6, 0x41,
 0xb6, 0x01, 0x00, 0x00, 0x38, 0x9b, 0x00, 0x00,
 0x00, 0x42, 0x62, 0x01, 0x00, 0x00, 0xd1, 0x24,
 0x01, 0x00, 0x9d, 0xc9, 0xdd, 0x62, 0x00, 0x00,
 0x23, 0x01, 0x00, 0xbc, 0x03, 0xb0, 0x05, 0x02,
 0x1c, 0x71, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01,
 0x04, 0x01, 0x04, 0x02, 0x00, 0x5c, 0x05, 0xbe,
 0x06, 0x00, 0x01, 0x00, 0xdc, 0x06, 0x01, 0x00,
 0x20, 0xe0, 0x06, 0x04, 0x01, 0x20, 0xe2, 0x06,
 0x04, 0x02, 0x20, 0x10, 0x00, 0x01, 0x00, 0x8e,
 0x04, 0x0b, 0x00, 0xa4, 0x04, 0x17, 0x00, 0x08,
 0xcc, 0x61, 0x00, 0x00, 0xc8, 0x41, 0xb6, 0x01,
 0x00, 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42,
 0x62, 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00,
 0x9d, 0xc9, 0xdd, 0x62, 0x00, 0x00, 0xef, 0xea,
 0x03, 0x09, 0x28, 0x61, 0x02, 0x00, 0x61, 0x01,
 0x00, 0xc8, 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xca, 0xc8, 0x42, 0x44, 0x01, 0x00,
 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb,
 0xde, 0x62, 0x00, 0x00, 0x62, 0x02, 0x00, 0xf0,
 0x0e, 0xc8, 0x41, 0xa1, 0x01, 0x00, 0x00, 0x42,
 0x3e, 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00,
 0x0e, 0x0a, 0x28, 0xbc, 0x03, 0xb5, 0x05, 0x09,
 0x1c, 0x72, 0x26, 0x08, 0x26, 0x35, 0x44, 0x30,
 0x53, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x06,
 0x01, 0x04, 0x04, 0x00, 0xd1, 0x01, 0x07, 0xbe,
 0x06, 0x00, 0x01, 0x00, 0xdc, 0x06, 0x01, 0x00,
 0x20, 0xde, 0x06, 0x01, 0x01, 0x20, 0xee, 0x06,
 0x06, 0x05, 0x20, 0xf0, 0x06, 0x0a, 0x03, 0x20,
 0xae, 0x01, 0x03, 0x02, 0x20, 0x10, 0x00, 0x01,
 0x00, 0x8e, 0x04, 0x0b, 0x00, 0xa6, 0x04, 0x18,
 0x00, 0xbc, 0x04, 0x29, 0x0c, 0xa4, 0x04, 0x17,
 0x00, 0x08, 0xc3, 0x05, 0x61, 0x01, 0x00, 0x61,
 0x00, 0x00, 0xc2, 0x05, 0x41, 0xb6, 0x01, 0x00,
 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62,
 0x01, 0x00, 0x00, 0xd1, 0x24, 0x01, 0x00, 0x9d,
 0xc9, 0xdd, 0x62, 0x00, 0x00, 0xef, 0xca, 0x62,
 0x01, 0x00, 0x69, 0xa5, 0x00, 0x00, 0x00, 0x61,
 0x04, 0x00, 0xc2, 0x05, 0x42, 0x3b, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xb6, 0xa9, 0xea, 0x09,
 0xde, 0x62, 0x00, 0x00, 0xef, 0x0e, 0xec, 0x65,
 0x61, 0x02, 0x00, 0xc2, 0x05, 0x41, 0xa1, 0x01,
 0x00, 0x00, 0x42, 0x41, 0x00, 0x00, 0x00, 0xc2,
 0x05, 0x42, 0x3b, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xb6, 0x9e, 0x24, 0x01, 0x00, 0xcb, 0x62,
 0x02, 0x00, 0x96, 0xea, 0x0e, 0x38, 0x94, 0x00,
 0x00, 0x00, 0x11, 0x65, 0x02, 0x00, 0x21, 0x01,
 0x00, 0x2f, 0xde, 0x62, 0x00, 0x00, 0xef, 0x0e,
 0x62, 0x02, 0x00, 0xd1, 0xaa, 0xea, 0x26, 0x61,
 0x03, 0x00, 0xc2, 0x05, 0x41, 0xb6, 0x01, 0x00,
 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x62,
 0x01, 0x00, 0x00, 0x62, 0x02, 0x00, 0x24, 0x01,
 0x00, 0x9d, 0xcc, 0xe0, 0x62, 0x03, 0x00, 0x62,
 0x01, 0x00, 0xf0, 0x0e, 0xc2, 0x05, 0x42, 0x45,
 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01,
 0x00, 0xc3, 0x04, 0xc2, 0x05, 0x41, 0xa1, 0x01,
 0x00, 0x00, 0x42, 0x3d, 0x01, 0x00, 0x00, 0x62,
 0x04, 0x00, 0x24, 0x01, 0x00, 0x0e, 0x0a, 0x28,
 0x09, 0x28, 0xbc, 0x03, 0xc3, 0x05, 0x15, 0x30,
 0x76, 0x22, 0x3a, 0x4b, 0x21, 0x1e, 0x90, 0x21,
 0x3f, 0x09, 0x23, 0x35, 0x80, 0x00, 0x09, 0x08,
 0x4e, 0x62, 0x08, 0x09, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x03, 0x00, 0x07, 0x01, 0x00, 0x45,
 0x03, 0xbe, 0x06, 0x02, 0x00, 0x20, 0xdc, 0x06,
 0x03, 0x01, 0x20, 0x10, 0x00, 0x01, 0x00, 0xa6,
 0x04, 0x18, 0x00, 0x08, 0xcb, 0x61, 0x00, 0x00,
 0xc7, 0x41, 0xa1, 0x01, 0x00, 0x00, 0x7d, 0xec,
 0x23, 0xc9, 0x61, 0x01, 0x00, 0xc7, 0x41, 0xb6,
 0x01, 0x00, 0x00, 0x38, 0x9b, 0x00, 0x00, 0x00,
 0x42, 0x62, 0x01, 0x00, 0x00, 0x62, 0x00, 0x00,
 0x24, 0x01, 0x00, 0x9d, 0xca, 0xdd, 0x62, 0x01,
 0x00, 0xef, 0x0e, 0x80, 0x00, 0xea, 0xdb, 0x0e,
 0x83, 0xc7, 0x41, 0xa1, 0x01, 0x00, 0x00, 0x42,
 0x42, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x29,
 0xbc, 0x03, 0xe6, 0x05, 0x06, 0x0d, 0x53, 0x7b,
 0x21, 0x22, 0x49, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x2a, 0x03,
 0xb6, 0x05, 0x01, 0x00, 0x20, 0xc4, 0x06, 0x02,
 0x01, 0x20, 0x10, 0x00, 0x01, 0x00, 0x08, 0xcb,
 0x61, 0x00, 0x00, 0x26, 0x00, 0x00, 0xc9, 0x61,
 0x01, 0x00, 0xc7, 0x7d, 0xec, 0x11, 0xca, 0x62,
 0x00, 0x00, 0x42, 0x3e, 0x01, 0x00, 0x00, 0x62,
 0x01, 0x00, 0x24, 0x01, 0x00, 0x0e, 0x80, 0x00,
 0xea, 0xed, 0x0e, 0x83, 0x62, 0x00, 0x00, 0x28,
 0xbc, 0x03, 0xef, 0x05, 0x05, 0x1c, 0x18, 0x2b,
 0x4e, 0x22, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00,
 0x01, 0x00, 0x02, 0x00, 0x00, 0x16, 0x01, 0x10,
 0x00, 0x01, 0x00, 0x08, 0xc9, 0xc5, 0x41, 0xa1,
 0x01, 0x00, 0x00, 0x38, 0x98, 0x00, 0x00, 0x00,
 0x41, 0x41, 0x01, 0x00, 0x00, 0x48, 0x25, 0x00,
 0x00, 0xbc, 0x03, 0xf9, 0x05, 0x01, 0x0d, 0x0e,
 0x42, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x06,
 0x00, 0x00, 0x1e, 0x03, 0xc2, 0x06, 0x00, 0x01,
 0x00, 0xbe, 0x06, 0x02, 0x00, 0x20, 0x10, 0x00,
 0x01, 0x00, 0x08, 0xca, 0x61, 0x00, 0x00, 0xd1,
 0x7d, 0xec, 0x0f, 0xc9, 0xc6, 0x42, 0x42, 0x00,
 0x00, 0x00, 0x62, 0x00, 0x00, 0x24, 0x01, 0x00,
 0x0e, 0x80, 0x00, 0xea, 0xef, 0x0e, 0x83, 0x29,
 0xbc, 0x03, 0xfd, 0x05, 0x04, 0x0d, 0x2b, 0x44,
 0x21, 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x01,
 0x00, 0x03, 0x00, 0x00, 0x10, 0x01, 0x10, 0x00,
 0x01, 0x00, 0x08, 0xc9, 0x38, 0x9b, 0x00, 0x00,
 0x00, 0x42, 0x62, 0x01, 0x00, 0x00, 0xc5, 0x25,
 0x01, 0x00, 0xbc, 0x03, 0x83, 0x06, 0x01, 0x0d,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01,
 0x04, 0x02, 0x00, 0x55, 0x03, 0x9a, 0x06, 0x00,
 0x01, 0x00, 0x84, 0x01, 0x01, 0x00, 0x20, 0xea,
 0x06, 0x01, 0x01, 0x20, 0xf4, 0x03, 0x0c, 0x0d,
 0xec, 0x03, 0x24, 0x08, 0x61, 0x01, 0x00, 0x61,
 0x00, 0x00, 0x65, 0x00, 0x00, 0x11, 0xd1, 0x41,
 0x9c, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0xc9,
 0x62, 0x00, 0x00, 0xd1, 0xe9, 0x43, 0x30, 0x00,
 0x00, 0x00, 0xd1, 0x41, 0x9c, 0x01, 0x00, 0x00,
 0x04, 0x8f, 0x01, 0x00, 0x00, 0x9d, 0xca, 0x62,
 0x00, 0x00, 0x65, 0x01, 0x00, 0x11, 0x62, 0x01,
 0x00, 0x21, 0x01, 0x00, 0x43, 0xa1, 0x01, 0x00,
 0x00, 0x62, 0x00, 0x00, 0x41, 0xa1, 0x01, 0x00,
 0x00, 0xd1, 0x41, 0xa1, 0x01, 0x00, 0x00, 0xe9,
 0x43, 0x30, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00,
 0x28, 0xbc, 0x03, 0x88, 0x06, 0x06, 0x21, 0x4a,
 0x36, 0x44, 0x5d, 0x67, 0x0e, 0x43, 0x06, 0x01,
 0xbe, 0x04, 0x01, 0x00, 0x01, 0x03, 0x01, 0x00,
 0x13, 0x01, 0xf2, 0x06, 0x00, 0x01, 0x00, 0xf4,
 0x03, 0x2a, 0x08, 0xd1, 0x07, 0xa9, 0xea, 0x03,
 0x07, 0x28, 0x65, 0x00, 0x00, 0x42, 0x32, 0x01,
 0x00, 0x00, 0xd1, 0x25, 0x01, 0x00, 0xbc, 0x03,
 0x95, 0x06, 0x04, 0x03, 0x1c, 0x08, 0x09, 0x0e,
 0x43, 0x06, 0x01, 0xc0, 0x04, 0x00, 0x00, 0x00,
 0x03, 0x02, 0x01, 0x15, 0x00, 0xb2, 0x04, 0x20,
 0x00, 0x8a, 0x04, 0x09, 0x00, 0xdd, 0xde, 0xee,
 0x42, 0x37, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
 0xbf, 0x00, 0xab, 0x04, 0xba, 0x01, 0x00, 0x00,
 0xf0, 0x29, 0xbc, 0x03, 0x9d, 0x06, 0x02, 0x03,
 0x67, 0x07, 0x02, 0x31, 0x0e, 0x43, 0x06, 0x01,
 0xc2, 0x04, 0x03, 0x04, 0x03, 0x05, 0x03, 0x00,
 0x97, 0x02, 0x07, 0xf6, 0x06, 0x00, 0x01, 0x00,
 0xf8, 0x06, 0x00, 0x01, 0x00, 0xfa, 0x06, 0x00,
 0x01, 0x00, 0xfc, 0x06, 0x01, 0x00, 0x20, 0xfe,
 0x06, 0x01, 0x01, 0x20, 0x80, 0x07, 0x01, 0x02,
 0x20, 0x82, 0x07, 0x01, 0x03, 0x20, 0xc0, 0x03,
 0x42, 0x0c, 0x8c, 0x04, 0x0a, 0x00, 0xbe, 0x04,
 0x2b, 0x00, 0x61, 0x03, 0x00, 0x61, 0x02, 0x00,
 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xc1, 0x42,
 0x5c, 0x00, 0x00, 0x00, 0xd2, 0x65, 0x00, 0x00,
 0xd3, 0x24, 0x03, 0x00, 0xc9, 0xd1, 0x41, 0xc2,
 0x01, 0x00, 0x00, 0x42, 0x37, 0x01, 0x00, 0x00,
 0x62, 0x00, 0x00, 0x24, 0x01, 0x00, 0xca, 0x62,
 0x01, 0x00, 0x07, 0xa9, 0xea, 0x09, 0xde, 0x04,
 0xc3, 0x01, 0x00, 0x00, 0xef, 0x0e, 0xdf, 0xd1,
 0x41, 0xc0, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x41, 0xc4, 0x01,
 0x00, 0x00, 0x24, 0x01, 0x00, 0xef, 0xcb, 0x62,
 0x02, 0x00, 0x07, 0xa9, 0xea, 0x09, 0xde, 0x04,
 0xc5, 0x01, 0x00, 0x00, 0xef, 0x0e, 0x62, 0x02,
 0x00, 0x42, 0x37, 0x01, 0x00, 0x00, 0x62, 0x00,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0x62, 0x02, 0x00,
 0x42, 0x3c, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0xea, 0x1a, 0xd1, 0x41, 0xc0, 0x01, 0x00, 0x00,
 0x42, 0x37, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00,
 0x41, 0xc4, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00,
 0x0e, 0xec, 0x1b, 0xd1, 0x41, 0xc0, 0x01, 0x00,
 0x00, 0x42, 0x42, 0x00, 0x00, 0x00, 0x62, 0x01,
 0x00, 0x41, 0xc4, 0x01, 0x00, 0x00, 0x62, 0x02,
 0x00, 0x24, 0x02, 0x00, 0x0e, 0xdf, 0xd1, 0x41,
 0xc1, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00, 0x00,
 0x00, 0xd2, 0x24, 0x01, 0x00, 0xef, 0xcc, 0x62,
 0x03, 0x00, 0x07, 0xa9, 0xea, 0x09, 0xde, 0x04,
 0xc6, 0x01, 0x00, 0x00, 0xef, 0x0e, 0x62, 0x03,
 0x00, 0x42, 0x37, 0x01, 0x00, 0x00, 0xd3, 0x24,
 0x01, 0x00, 0x0e, 0x62, 0x03, 0x00, 0x42, 0x3c,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xea, 0x13,
 0xd1, 0x41, 0xc1, 0x01, 0x00, 0x00, 0x42, 0x37,
 0x01, 0x00, 0x00, 0xd2, 0x24, 0x01, 0x00, 0x0e,
 0xec, 0x14, 0xd1, 0x41, 0xc1, 0x01, 0x00, 0x00,
 0x42, 0x42, 0x00, 0x00, 0x00, 0xd2, 0x62, 0x03,
 0x00, 0x24, 0x02, 0x00, 0x0e, 0x62, 0x01, 0x00,
 0x28, 0xbc, 0x03, 0xa1, 0x06, 0x1f, 0x40, 0x4f,
 0x5e, 0x26, 0x00, 0x08, 0x08, 0x81, 0x26, 0x00,
 0x08, 0x08, 0x4f, 0x44, 0x76, 0x0d, 0x00, 0x1a,
 0x08, 0x5e, 0x26, 0x00, 0x08, 0x08, 0x45, 0x44,
 0x53, 0x0d, 0x00, 0x13, 0x08, 0x06, 0x00, 0x00,
 0x8c, 0x89, 0xe1, 0x25, 0xda, 0x42, 0x06, 0x00,
 0x00, 0xe0, 0x57, 0xeb, 0x48, 0xab, 0x42, 0x0e,
 0x40, 0x07, 0x01, 0x00, 0x01, 0x06, 0x01, 0x04,
 0x01, 0x00, 0x89, 0x01, 0x07, 0x00, 0x00, 0x01,
 0x00, 0x8e, 0x07, 0x00, 0x00, 0x00, 0x90, 0x07,
 0x00, 0x01, 0x00, 0xf8, 0x06, 0x00, 0x02, 0x00,
 0xfa, 0x06, 0x00, 0x03, 0x00, 0x92, 0x07, 0x00,
 0x04, 0x00, 0x10, 0x00, 0x01, 0x00, 0xec, 0x01,
 0x0f, 0x0d, 0x08, 0xc3, 0x05, 0x2b, 0x65, 0x00,
 0x00, 0x11, 0xea, 0x07, 0xc2, 0x05, 0x1b, 0x24,
 0x00, 0x00, 0x0e, 0xd1, 0x6f, 0x11, 0x78, 0xc7,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xc7,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xc8, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xc8, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbc, 0x01, 0x00,
 0x00, 0x02, 0x00, 0x1d, 0x41, 0xbc, 0x01, 0x00,
 0x00, 0x3d, 0x11, 0x78, 0xbd, 0x01, 0x00, 0x00,
 0x03, 0x00, 0x1d, 0x41, 0xbd, 0x01, 0x00, 0x00,
 0x3d, 0x11, 0x78, 0xc9, 0x01, 0x00, 0x00, 0x04,
 0x00, 0x1d, 0x41, 0xc9, 0x01, 0x00, 0x00, 0x3d,
 0x0e, 0xc2, 0x05, 0xc5, 0x43, 0xc4, 0x01, 0x00,
 0x00, 0xc2, 0x05, 0xc6, 0x43, 0xca, 0x01, 0x00,
 0x00, 0xc2, 0x05, 0xc7, 0x43, 0xcb, 0x01, 0x00,
 0x00, 0xc2, 0x05, 0xc8, 0x43, 0xcc, 0x01, 0x00,
 0x00, 0xc2, 0x05, 0xc2, 0x04, 0x43, 0xcd, 0x01,
 0x00, 0x00, 0x29, 0xbc, 0x03, 0xd8, 0x06, 0x0b,
 0x62, 0x4e, 0x4e, 0x4e, 0x4e, 0x54, 0x2b, 0x2b,
 0x2b, 0x2b, 0x30, 0x0e, 0x41, 0x06, 0x01, 0xc8,
 0x04, 0x01, 0x05, 0x01, 0x04, 0x04, 0x00, 0x57,
 0x06, 0x00, 0x00, 0x01, 0x00, 0xf6, 0x06, 0x00,
 0x00, 0x00, 0xf8, 0x06, 0x00, 0x01, 0x00, 0xfa,
 0x06, 0x00, 0x02, 0x00, 0xfe, 0x06, 0x01, 0x00,
 0x20, 0x8e, 0x07, 0x01, 0x04, 0x20, 0xc0, 0x04,
 0x2c, 0x00, 0xc2, 0x04, 0x2d, 0x00, 0x88, 0x04,
 0x08, 0x00, 0xb2, 0x04, 0x20, 0x00, 0xd1, 0x6f,
 0x11, 0x78, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x1d, 0x41, 0xbb, 0x01, 0x00, 0x00, 0x3d, 0x11,
 0x78, 0xbc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d,
 0x41, 0xbc, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78,
 0xbd, 0x01, 0x00, 0x00, 0x02, 0x00, 0x1d, 0x41,
 0xbd, 0x01, 0x00, 0x00, 0x3d, 0x0e, 0x61, 0x04,
 0x00, 0x61, 0x03, 0x00, 0xdd, 0xee, 0x0e, 0xde,
 0xc5, 0xc6, 0xc7, 0xf1, 0xcc, 0xdf, 0xee, 0xc3,
 0x04, 0xe0, 0x62, 0x04, 0x00, 0x62, 0x03, 0x00,
 0x41, 0xc4, 0x01, 0x00, 0x00, 0xa9, 0x04, 0xce,
 0x01, 0x00, 0x00, 0xf0, 0x29, 0xbc, 0x03, 0xe8,
 0x06, 0x09, 0x0d, 0x4e, 0x4e, 0x53, 0x22, 0x13,
 0x22, 0x18, 0x62, 0x0e, 0x41, 0x06, 0x01, 0xca,
 0x04, 0x01, 0x06, 0x01, 0x05, 0x05, 0x00, 0xad,
 0x01, 0x07, 0x00, 0x00, 0x01, 0x00, 0xf6, 0x06,
 0x00, 0x00, 0x00, 0xf8, 0x06, 0x00, 0x01, 0x00,
 0xfa, 0x06, 0x00, 0x02, 0x00, 0x9e, 0x07, 0x00,
 0x03, 0x00, 0xfc, 0x06, 0x01, 0x00, 0x20, 0xfe,
 0x06, 0x01, 0x05, 0x20, 0xc0, 0x04, 0x2c, 0x00,
 0xc0, 0x03, 0x42, 0x0c, 0x8c, 0x04, 0x0a, 0x00,
 0xb2, 0x04, 0x20, 0x00, 0x88, 0x04, 0x08, 0x00,
 0xd1, 0x6f, 0x11, 0x78, 0xbb, 0x01, 0x00, 0x00,
 0x00, 0x00, 0x1d, 0x41, 0xbb, 0x01, 0x00, 0x00,
 0x3d, 0x11, 0x78, 0xbc, 0x01, 0x00, 0x00, 0x01,
 0x00, 0x1d, 0x41, 0xbc, 0x01, 0x00, 0x00, 0x3d,
 0x11, 0x78, 0xbd, 0x01, 0x00, 0x00, 0x02, 0x00,
 0x1d, 0x41, 0xbd, 0x01, 0x00, 0x00, 0x3d, 0x11,
 0x78, 0xcf, 0x01, 0x00, 0x00, 0x03, 0x00, 0x1d,
 0x41, 0xcf, 0x01, 0x00, 0x00, 0x3d, 0x0e, 0x61,
 0x05, 0x00, 0x61, 0x04, 0x00, 0xdd, 0xee, 0x0e,
 0xc1, 0x42, 0x5c, 0x00, 0x00, 0x00, 0xc6, 0x65,
 0x01, 0x00, 0xc7, 0x24, 0x03, 0x00, 0xc3, 0x04,
 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00, 0x42, 0x41,
 0x00, 0x00, 0x00, 0x62, 0x04, 0x00, 0x24, 0x01,
 0x00, 0xc3, 0x05, 0x62, 0x05, 0x00, 0x07, 0xa9,
 0xea, 0x09, 0xdf, 0x04, 0xc3, 0x01, 0x00, 0x00,
 0xef, 0x0e, 0xe0, 0x5e, 0x04, 0x00, 0xee, 0x62,
 0x05, 0x00, 0x41, 0xc4, 0x01, 0x00, 0x00, 0xa9,
 0x04, 0xd0, 0x01, 0x00, 0x00, 0xf0, 0x0e, 0x62,
 0x05, 0x00, 0xc8, 0x43, 0xcd, 0x01, 0x00, 0x00,
 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00, 0x42, 0x42,
 0x00, 0x00, 0x00, 0x62, 0x04, 0x00, 0x62, 0x05,
 0x00, 0x24, 0x02, 0x00, 0x29, 0xbc, 0x03, 0xf7,
 0x06, 0x0e, 0x0d, 0x4e, 0x4e, 0x4e, 0x53, 0x22,
 0x13, 0x54, 0x63, 0x26, 0x2d, 0x6d, 0x31, 0x67,
 0x0e, 0x41, 0x06, 0x01, 0xcc, 0x04, 0x01, 0x08,
 0x01, 0x05, 0x06, 0x00, 0xf2, 0x01, 0x09, 0x00,
 0x00, 0x01, 0x00, 0xf6, 0x06, 0x00, 0x00, 0x00,
 0xf8, 0x06, 0x00, 0x01, 0x00, 0xfa, 0x06, 0x00,
 0x02, 0x00, 0xa2, 0x07, 0x01, 0x00, 0x20, 0xfc,
 0x06, 0x01, 0x04, 0x20, 0xfe, 0x06, 0x01, 0x05,
 0x20, 0xa4, 0x07, 0x01, 0x06, 0x20, 0x9e, 0x07,
 0x01, 0x07, 0x20, 0x8a, 0x04, 0x09, 0x00, 0xb2,
 0x04, 0x20, 0x00, 0xc0, 0x03, 0x42, 0x0c, 0x8c,
 0x04, 0x0a, 0x00, 0x88, 0x04, 0x08, 0x00, 0xce,
 0x04, 0x34, 0x00, 0xd1, 0x6f, 0x11, 0x78, 0xbb,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xbb,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbc, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xbc, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbd, 0x01, 0x00,
 0x00, 0x02, 0x00, 0x1d, 0x41, 0xbd, 0x01, 0x00,
 0x00, 0x3d, 0x0e, 0x61, 0x07, 0x00, 0x61, 0x06,
 0x00, 0x61, 0x05, 0x00, 0x61, 0x04, 0x00, 0x61,
 0x03, 0x00, 0xdd, 0xee, 0x42, 0x39, 0x00, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xcc, 0xde, 0x62, 0x03,
 0x00, 0xb5, 0xa5, 0x04, 0xd3, 0x01, 0x00, 0x00,
 0xf0, 0x0e, 0xc1, 0x42, 0x5c, 0x00, 0x00, 0x00,
 0xc6, 0x65, 0x02, 0x00, 0xc7, 0x24, 0x03, 0x00,
 0xc3, 0x04, 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00,
 0x42, 0x41, 0x00, 0x00, 0x00, 0x62, 0x04, 0x00,
 0x24, 0x01, 0x00, 0xc3, 0x05, 0x62, 0x05, 0x00,
 0x07, 0xa9, 0xea, 0x09, 0xe0, 0x04, 0xc3, 0x01,
 0x00, 0x00, 0xef, 0x0e, 0x5e, 0x04, 0x00, 0xee,
 0xc3, 0x06, 0xde, 0x62, 0x06, 0x00, 0x62, 0x05,
 0x00, 0x41, 0xc4, 0x01, 0x00, 0x00, 0xaa, 0x04,
 0xd4, 0x01, 0x00, 0x00, 0xf0, 0x0e, 0x38, 0xaf,
 0x00, 0x00, 0x00, 0x62, 0x05, 0x00, 0x41, 0xcd,
 0x01, 0x00, 0x00, 0xef, 0xc3, 0x07, 0xde, 0x62,
 0x03, 0x00, 0x62, 0x07, 0x00, 0xa6, 0x04, 0xd5,
 0x01, 0x00, 0x00, 0xf0, 0x0e, 0x5e, 0x05, 0x00,
 0x0b, 0xc5, 0x4c, 0xbb, 0x01, 0x00, 0x00, 0xc6,
 0x4c, 0xbc, 0x01, 0x00, 0x00, 0xc7, 0x4c, 0xbd,
 0x01, 0x00, 0x00, 0x62, 0x03, 0x00, 0x42, 0x37,
 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x4c, 0xcf,
 0x01, 0x00, 0x00, 0x62, 0x06, 0x00, 0x4c, 0xd2,
 0x01, 0x00, 0x00, 0xef, 0x29, 0xbc, 0x03, 0x8f,
 0x07, 0x18, 0x0d, 0x4e, 0x4e, 0x53, 0x4f, 0x3a,
 0x45, 0x54, 0x63, 0x26, 0x00, 0x08, 0x08, 0x21,
 0x68, 0x54, 0x4f, 0x17, 0x21, 0x21, 0x21, 0x53,
 0x2b, 0x08, 0x0e, 0x41, 0x06, 0x01, 0xce, 0x04,
 0x01, 0x07, 0x01, 0x09, 0x09, 0x00, 0xef, 0x01,
 0x08, 0x00, 0x00, 0x01, 0x00, 0xf6, 0x06, 0x00,
 0x00, 0x00, 0xf8, 0x06, 0x00, 0x01, 0x00, 0xfa,
 0x06, 0x00, 0x02, 0x00, 0x9e, 0x07, 0x00, 0x03,
 0x00, 0xa4, 0x07, 0x00, 0x04, 0x00, 0xfe, 0x06,
 0x01, 0x00, 0x20, 0x84, 0x02, 0x01, 0x06, 0x30,
 0xc2, 0x04, 0x2d, 0x00, 0x98, 0x04, 0x11, 0x00,
 0x9a, 0x04, 0x12, 0x00, 0xae, 0x04, 0x1e, 0x00,
 0xc6, 0x04, 0x2f, 0x0c, 0x96, 0x04, 0x10, 0x00,
 0x94, 0x04, 0x0e, 0x00, 0xc4, 0x04, 0x2e, 0x0c,
 0xa2, 0x04, 0x16, 0x00, 0xd1, 0x6f, 0x11, 0x78,
 0xbb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41,
 0xbb, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbc,
 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xbc,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbd, 0x01,
 0x00, 0x00, 0x02, 0x00, 0x1d, 0x41, 0xbd, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xcf, 0x01, 0x00,
 0x00, 0x03, 0x00, 0x1d, 0x41, 0xcf, 0x01, 0x00,
 0x00, 0x3d, 0x11, 0x78, 0xd2, 0x01, 0x00, 0x00,
 0x04, 0x00, 0x1d, 0x41, 0xd2, 0x01, 0x00, 0x00,
 0x3d, 0x0e, 0x61, 0x06, 0x00, 0x61, 0x05, 0x00,
 0xdd, 0xc5, 0xc6, 0xc7, 0xf1, 0xc3, 0x05, 0xde,
 0xc6, 0xef, 0xc3, 0x06, 0xdf, 0x62, 0x06, 0x00,
 0x04, 0xd6, 0x01, 0x00, 0x00, 0xe0, 0x38, 0x9b,
 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00, 0x00,
 0x0b, 0xc2, 0x04, 0x4c, 0xd7, 0x01, 0x00, 0x00,
 0xc7, 0x4c, 0xcc, 0x01, 0x00, 0x00, 0x62, 0x05,
 0x00, 0x41, 0xca, 0x01, 0x00, 0x00, 0x4c, 0xca,
 0x01, 0x00, 0x00, 0x04, 0xd8, 0x01, 0x00, 0x00,
 0x4c, 0xd9, 0x01, 0x00, 0x00, 0xc8, 0x4c, 0xda,
 0x01, 0x00, 0x00, 0xbd, 0x0a, 0x4c, 0xdb, 0x01,
 0x00, 0x00, 0x24, 0x01, 0x00, 0xef, 0xb6, 0x65,
 0x04, 0x00, 0x22, 0x05, 0x00, 0x0e, 0x5e, 0x05,
 0x00, 0x62, 0x06, 0x00, 0x5e, 0x06, 0x00, 0xee,
 0x04, 0xee, 0x00, 0x00, 0x00, 0xe0, 0x38, 0x9b,
 0x00, 0x00, 0x00, 0x42, 0x62, 0x01, 0x00, 0x00,
 0x0b, 0xc2, 0x04, 0x4c, 0xdc, 0x01, 0x00, 0x00,
 0xc8, 0x4c, 0xcf, 0x01, 0x00, 0x00, 0x24, 0x01,
 0x00, 0xef, 0xb5, 0x65, 0x07, 0x00, 0x22, 0x06,
 0x00, 0x0e, 0x5e, 0x08, 0x00, 0x62, 0x06, 0x00,
 0x23, 0x01, 0x00, 0xbc, 0x03, 0xb2, 0x07, 0x19,
 0x0d, 0x4e, 0x4e, 0x4e, 0x4e, 0x53, 0x22, 0x28,
 0x1c, 0x6c, 0x27, 0x22, 0x45, 0x00, 0x0a, 0x0e,
 0x21, 0x27, 0x1c, 0x28, 0x8a, 0x27, 0x21, 0x1c,
 0x26, 0x0e, 0x41, 0x06, 0x01, 0xd0, 0x04, 0x01,
 0x0b, 0x01, 0x08, 0x07, 0x01, 0x95, 0x03, 0x0c,
 0x00, 0x00, 0x01, 0x00, 0xa4, 0x07, 0x00, 0x00,
 0x00, 0x9e, 0x07, 0x00, 0x01, 0x00, 0xba, 0x07,
 0x01, 0x00, 0x20, 0xbc, 0x07, 0x01, 0x03, 0x20,
 0xbe, 0x07, 0x04, 0x04, 0x20, 0xc0, 0x07, 0x07,
 0x05, 0x60, 0x9e, 0x06, 0x0b, 0x04, 0x03, 0x84,
 0x02, 0x0f, 0x04, 0x30, 0xac, 0x05, 0x10, 0x04,
 0x20, 0x80, 0x01, 0x10, 0x09, 0x20, 0x84, 0x02,
 0x11, 0x0a, 0x30, 0xb2, 0x04, 0x20, 0x00, 0x94,
 0x04, 0x0e, 0x00, 0x88, 0x04, 0x08, 0x00, 0xa0,
 0x04, 0x15, 0x00, 0x84, 0x04, 0x06, 0x00, 0x98,
 0x04, 0x11, 0x00, 0x9c, 0x04, 0x13, 0x00, 0xd1,
 0x6f, 0x11, 0x78, 0xd2, 0x01, 0x00, 0x00, 0x00,
 0x00, 0x1d, 0x41, 0xd2, 0x01, 0x00, 0x00, 0x3d,
 0x11, 0x78, 0xcf, 0x01, 0x00, 0x00, 0x01, 0x00,
 0x1d, 0x41, 0xcf, 0x01, 0x00, 0x00, 0x3d, 0x0e,
 0x61, 0x03, 0x00, 0x61, 0x02, 0x00, 0xdd, 0xde,
 0xee, 0xdf, 0xee, 0xab, 0x04, 0xe1, 0x01, 0x00,
 0x00, 0xf0, 0x0e, 0xe0, 0xb5, 0xef, 0xcb, 0x07,
 0xcc, 0x62, 0x02, 0x00, 0x97, 0x04, 0x48, 0x00,
 0x00, 0x00, 0xab, 0x69, 0xe4, 0x00, 0x00, 0x00,
 0x6c, 0xb9, 0x00, 0x00, 0x00, 0x61, 0x04, 0x00,
 0x38, 0x9b, 0x00, 0x00, 0x00, 0x42, 0x84, 0x01,
 0x00, 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00,
 0xc3, 0x04, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x50, 0x01, 0x00, 0x00, 0x62, 0x04, 0x00, 0x41,
 0xde, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0xe9,
 0xbd, 0x0a, 0xa5, 0x11, 0xeb, 0x1a, 0x0e, 0x38,
 0x92, 0x00, 0x00, 0x00, 0x42, 0x50, 0x01, 0x00,
 0x00, 0x62, 0x04, 0x00, 0x41, 0xde, 0x01, 0x00,
 0x00, 0x24, 0x01, 0x00, 0xe9, 0xb6, 0xa3, 0xea,
 0x07, 0x04, 0xe2, 0x01, 0x00, 0x00, 0x2f, 0x61,
 0x05, 0x00, 0x38, 0xaf, 0x00, 0x00, 0x00, 0xc6,
 0xef, 0xc3, 0x05, 0x38, 0x92, 0x00, 0x00, 0x00,
 0x42, 0xe3, 0x01, 0x00, 0x00, 0x62, 0x04, 0x00,
 0x41, 0xde, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00,
 0x42, 0x51, 0x01, 0x00, 0x00, 0xc0, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x62, 0x05, 0x00, 0x38, 0xaf,
 0x00, 0x00, 0x00, 0xb5, 0xef, 0xa9, 0x11, 0xeb,
 0x0d, 0x0e, 0x62, 0x05, 0x00, 0x38, 0xaf, 0x00,
 0x00, 0x00, 0xb6, 0xef, 0xa9, 0xea, 0x10, 0x62,
 0x04, 0x00, 0x41, 0xde, 0x01, 0x00, 0x00, 0x11,
 0x63, 0x03, 0x00, 0x0e, 0xec, 0x07, 0x04, 0xe4,
 0x01, 0x00, 0x00, 0x2f, 0x68, 0x05, 0x00, 0x0e,
 0xec, 0x27, 0xc3, 0x06, 0x6c, 0x22, 0x00, 0x00,
 0x00, 0x5e, 0x04, 0x00, 0x04, 0xe5, 0x01, 0x00,
 0x00, 0x42, 0x5c, 0x00, 0x00, 0x00, 0x62, 0x02,
 0x00, 0x24, 0x01, 0x00, 0xef, 0x0e, 0x07, 0x11,
 0x63, 0x03, 0x00, 0x0e, 0x0e, 0xec, 0x02, 0x2f,
 0x62, 0x03, 0x00, 0x07, 0xa9, 0xea, 0x1c, 0x61,
 0x07, 0x00, 0x5e, 0x05, 0x00, 0xc5, 0xef, 0xc3,
 0x07, 0x5e, 0x06, 0x00, 0x62, 0x07, 0x00, 0x38,
 0xaf, 0x00, 0x00, 0x00, 0xc6, 0xef, 0xf0, 0x0e,
 0xc6, 0x28, 0x61, 0x09, 0x00, 0x61, 0x08, 0x00,
 0x38, 0x92, 0x00, 0x00, 0x00, 0x42, 0xe3, 0x01,
 0x00, 0x00, 0x62, 0x03, 0x00, 0x24, 0x01, 0x00,
 0x7d, 0xec, 0x2a, 0x7d, 0x80, 0x00, 0x0e, 0xc3,
 0x08, 0x80, 0x00, 0x0e, 0xc3, 0x09, 0x83, 0x61,
 0x0a, 0x00, 0x5e, 0x05, 0x00, 0x62, 0x08, 0x00,
 0xef, 0xc3, 0x0a, 0x5e, 0x06, 0x00, 0x62, 0x0a,
 0x00, 0x38, 0xaf, 0x00, 0x00, 0x00, 0x62, 0x09,
 0x00, 0xef, 0xf0, 0x0e, 0x80, 0x00, 0xea, 0xd4,
 0x0e, 0x83, 0xc6, 0x28, 0xbc, 0x03, 0xe1, 0x07,
 0x28, 0x0d, 0x4e, 0x53, 0x21, 0x45, 0x17, 0x0e,
 0x4f, 0x2b, 0x5e, 0x00, 0x37, 0x04, 0x1c, 0x18,
 0x31, 0x86, 0x00, 0x06, 0x08, 0x90, 0x44, 0x0e,
 0x1c, 0x18, 0x35, 0x6c, 0x21, 0x00, 0x04, 0x08,
 0x35, 0x26, 0x4e, 0x08, 0x0a, 0xcb, 0x30, 0x58,
 0x23, 0x0e, 0x40, 0x06, 0x01, 0x00, 0x02, 0x02,
 0x02, 0x05, 0x01, 0x00, 0x1b, 0x04, 0x00, 0x00,
 0x01, 0x00, 0xae, 0x01, 0x00, 0x01, 0x00, 0xac,
 0x05, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x01,
 0x00, 0xc0, 0x07, 0x05, 0x09, 0xd1, 0x7d, 0x80,
 0x00, 0x0e, 0xc9, 0x80, 0x00, 0x0e, 0xca, 0x83,
 0x65, 0x00, 0x00, 0x38, 0xaf, 0x00, 0x00, 0x00,
 0xc6, 0xef, 0x9e, 0x11, 0x66, 0x00, 0x00, 0x29,
 0xbc, 0x03, 0xf6, 0x07, 0x02, 0x3a, 0x4e, 0x0e,
 0x41, 0x06, 0x01, 0xd2, 0x04, 0x01, 0x01, 0x01,
 0x04, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x01,
 0x00, 0xf6, 0x06, 0x00, 0x00, 0x00, 0xd1, 0x6f,
 0x11, 0x78, 0xbb, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x1d, 0x41, 0xbb, 0x01, 0x00, 0x00, 0x3d, 0x0e,
 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00, 0x42, 0x3b,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x42, 0x37,
 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0xbc, 0x03,
 0x9c, 0x08, 0x02, 0x0d, 0x55, 0x0e, 0x41, 0x06,
 0x01, 0xd4, 0x04, 0x01, 0x03, 0x01, 0x04, 0x01,
 0x01, 0x53, 0x04, 0x00, 0x00, 0x01, 0x00, 0xf6,
 0x06, 0x00, 0x00, 0x00, 0xd8, 0x05, 0x00, 0x01,
 0x00, 0x80, 0x07, 0x01, 0x00, 0x20, 0xbe, 0x04,
 0x2b, 0x00, 0xd1, 0x6f, 0x11, 0x78, 0xbb, 0x01,
 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xbb, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0x6c, 0x01, 0x00,
 0x00, 0x01, 0x00, 0x1d, 0x41, 0x6c, 0x01, 0x00,
 0x00, 0x3d, 0x0e, 0x61, 0x02, 0x00, 0xdd, 0xc5,
 0x41, 0xc0, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00,
 0x00, 0x00, 0xc6, 0x24, 0x01, 0x00, 0xef, 0xcb,
 0x62, 0x02, 0x00, 0x07, 0xa9, 0xea, 0x04, 0xbf,
 0x00, 0x28, 0x62, 0x02, 0x00, 0x42, 0x3b, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x42, 0x37, 0x00,
 0x00, 0x00, 0x25, 0x00, 0x00, 0xbc, 0x03, 0xa3,
 0x08, 0x08, 0x0d, 0x4e, 0x53, 0x13, 0x5e, 0x26,
 0x0d, 0x09, 0x07, 0x02, 0x30, 0x0e, 0x41, 0x06,
 0x01, 0xd6, 0x04, 0x01, 0x0b, 0x01, 0x04, 0x01,
 0x00, 0xf0, 0x01, 0x0c, 0x00, 0x00, 0x01, 0x00,
 0xf6, 0x06, 0x00, 0x00, 0x00, 0xd8, 0x05, 0x00,
 0x01, 0x00, 0xcc, 0x07, 0x00, 0x02, 0x00, 0xce,
 0x07, 0x00, 0x03, 0x00, 0xd0, 0x07, 0x01, 0x00,
 0x20, 0xd2, 0x07, 0x01, 0x05, 0x20, 0xd4, 0x07,
 0x01, 0x06, 0x20, 0xa0, 0x05, 0x01, 0x07, 0x20,
 0x84, 0x07, 0x01, 0x08, 0x20, 0xa2, 0x06, 0x04,
 0x09, 0x20, 0xfe, 0x06, 0x05, 0x0a, 0x20, 0xbe,
 0x04, 0x2b, 0x00, 0xd1, 0x6f, 0x11, 0x78, 0xbb,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xbb,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0x6c, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0x6c, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xe6, 0x01, 0x00,
 0x00, 0x02, 0x00, 0x1d, 0x41, 0xe6, 0x01, 0x00,
 0x00, 0x3d, 0x11, 0x78, 0xe7, 0x01, 0x00, 0x00,
 0x03, 0x00, 0x1d, 0x41, 0xe7, 0x01, 0x00, 0x00,
 0x3d, 0x0e, 0x61, 0x08, 0x00, 0x61, 0x07, 0x00,
 0x61, 0x06, 0x00, 0x61, 0x05, 0x00, 0x61, 0x04,
 0x00, 0xdd, 0xc5, 0x41, 0xc0, 0x01, 0x00, 0x00,
 0x42, 0x41, 0x00, 0x00, 0x00, 0xc6, 0x24, 0x01,
 0x00, 0xef, 0xc3, 0x04, 0x62, 0x04, 0x00, 0x07,
 0xa9, 0xea, 0x05, 0x26, 0x00, 0x00, 0x28, 0xc7,
 0xea, 0x0a, 0x38, 0xeb, 0x01, 0x00, 0x00, 0xc7,
 0xef, 0xec, 0x02, 0xb5, 0xc3, 0x05, 0xc8, 0xea,
 0x04, 0xc8, 0xec, 0x03, 0xbd, 0x32, 0xc3, 0x06,
 0x62, 0x04, 0x00, 0x42, 0x43, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xc3, 0x07, 0x26, 0x00, 0x00,
 0xc3, 0x08, 0x61, 0x09, 0x00, 0x62, 0x05, 0x00,
 0xc3, 0x09, 0x62, 0x09, 0x00, 0x62, 0x06, 0x00,
 0xa3, 0xea, 0x45, 0x61, 0x0a, 0x00, 0x62, 0x09,
 0x00, 0x62, 0x07, 0x00, 0xe9, 0xa6, 0xeb, 0x38,
 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00, 0x42, 0x41,
 0x00, 0x00, 0x00, 0x62, 0x07, 0x00, 0x62, 0x09,
 0x00, 0x47, 0x24, 0x01, 0x00, 0xc3, 0x0a, 0x62,
 0x0a, 0x00, 0x07, 0xaa, 0xea, 0x10, 0x62, 0x08,
 0x00, 0x42, 0x3e, 0x01, 0x00, 0x00, 0x62, 0x0a,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0x62, 0x09, 0x00,
 0x91, 0x63, 0x09, 0x00, 0x0e, 0xec, 0xb4, 0x62,
 0x08, 0x00, 0x28, 0xbc, 0x03, 0xb1, 0x08, 0x15,
 0x0d, 0x4e, 0x4e, 0x4e, 0x53, 0x4f, 0x63, 0x26,
 0x12, 0x0a, 0x4f, 0x35, 0x44, 0x1d, 0x67, 0x2b,
 0x0f, 0x77, 0x26, 0x4f, 0x36, 0x0e, 0x41, 0x06,
 0x01, 0xd8, 0x04, 0x01, 0x03, 0x01, 0x04, 0x01,
 0x01, 0x53, 0x04, 0x00, 0x00, 0x01, 0x00, 0xf6,
 0x06, 0x00, 0x00, 0x00, 0xf8, 0x06, 0x00, 0x01,
 0x00, 0x82, 0x07, 0x01, 0x00, 0x20, 0xbe, 0x04,
 0x2b, 0x00, 0xd1, 0x6f, 0x11, 0x78, 0xbb, 0x01,
 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xbb, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbc, 0x01, 0x00,
 0x00, 0x01, 0x00, 0x1d, 0x41, 0xbc, 0x01, 0x00,
 0x00, 0x3d, 0x0e, 0x61, 0x02, 0x00, 0xdd, 0xc5,
 0x41, 0xc1, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00,
 0x00, 0x00, 0xc6, 0x24, 0x01, 0x00, 0xef, 0xcb,
 0x62, 0x02, 0x00, 0x07, 0xa9, 0xea, 0x04, 0xbf,
 0x00, 0x28, 0x62, 0x02, 0x00, 0x42, 0x3b, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x42, 0x37, 0x00,
 0x00, 0x00, 0x25, 0x00, 0x00, 0xbc, 0x03, 0xd4,
 0x08, 0x08, 0x0d, 0x4e, 0x53, 0x13, 0x5e, 0x26,
 0x0d, 0x09, 0x07, 0x02, 0x30, 0x0e, 0x41, 0x06,
 0x01, 0xda, 0x04, 0x01, 0x0b, 0x01, 0x04, 0x01,
 0x00, 0xf0, 0x01, 0x0c, 0x00, 0x00, 0x01, 0x00,
 0xf6, 0x06, 0x00, 0x00, 0x00, 0xd8, 0x05, 0x00,
 0x01, 0x00, 0xcc, 0x07, 0x00, 0x02, 0x00, 0xce,
 0x07, 0x00, 0x03, 0x00, 0xd0, 0x07, 0x01, 0x00,
 0x20, 0xd2, 0x07, 0x01, 0x05, 0x20, 0xd4, 0x07,
 0x01, 0x06, 0x20, 0xa0, 0x05, 0x01, 0x07, 0x20,
 0x84, 0x07, 0x01, 0x08, 0x20, 0xa2, 0x06, 0x04,
 0x09, 0x20, 0xfe, 0x06, 0x05, 0x0a, 0x20, 0xbe,
 0x04, 0x2b, 0x00, 0xd1, 0x6f, 0x11, 0x78, 0xbb,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xbb,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0x6c, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0x6c, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xe6, 0x01, 0x00,
 0x00, 0x02, 0x00, 0x1d, 0x41, 0xe6, 0x01, 0x00,
 0x00, 0x3d, 0x11, 0x78, 0xe7, 0x01, 0x00, 0x00,
 0x03, 0x00, 0x1d, 0x41, 0xe7, 0x01, 0x00, 0x00,
 0x3d, 0x0e, 0x61, 0x08, 0x00, 0x61, 0x07, 0x00,
 0x61, 0x06, 0x00, 0x61, 0x05, 0x00, 0x61, 0x04,
 0x00, 0xdd, 0xc5, 0x41, 0xc1, 0x01, 0x00, 0x00,
 0x42, 0x41, 0x00, 0x00, 0x00, 0xc6, 0x24, 0x01,
 0x00, 0xef, 0xc3, 0x04, 0x62, 0x04, 0x00, 0x07,
 0xa9, 0xea, 0x05, 0x26, 0x00, 0x00, 0x28, 0xc7,
 0xea, 0x0a, 0x38, 0xeb, 0x01, 0x00, 0x00, 0xc7,
 0xef, 0xec, 0x02, 0xb5, 0xc3, 0x05, 0xc8, 0xea,
 0x04, 0xc8, 0xec, 0x03, 0xbd, 0x32, 0xc3, 0x06,
 0x62, 0x04, 0x00, 0x42, 0x43, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xc3, 0x07, 0x26, 0x00, 0x00,
 0xc3, 0x08, 0x61, 0x09, 0x00, 0x62, 0x05, 0x00,
 0xc3, 0x09, 0x62, 0x09, 0x00, 0x62, 0x06, 0x00,
 0xa3, 0xea, 0x45, 0x61, 0x0a, 0x00, 0x62, 0x09,
 0x00, 0x62, 0x07, 0x00, 0xe9, 0xa6, 0xeb, 0x38,
 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00, 0x42, 0x41,
 0x00, 0x00, 0x00, 0x62, 0x07, 0x00, 0x62, 0x09,
 0x00, 0x47, 0x24, 0x01, 0x00, 0xc3, 0x0a, 0x62,
 0x0a, 0x00, 0x07, 0xaa, 0xea, 0x10, 0x62, 0x08,
 0x00, 0x42, 0x3e, 0x01, 0x00, 0x00, 0x62, 0x0a,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0x62, 0x09, 0x00,
 0x91, 0x63, 0x09, 0x00, 0x0e, 0xec, 0xb4, 0x62,
 0x08, 0x00, 0x28, 0xbc, 0x03, 0xe2, 0x08, 0x15,
 0x0d, 0x4e, 0x4e, 0x4e, 0x53, 0x4f, 0x63, 0x26,
 0x12, 0x0a, 0x4f, 0x35, 0x44, 0x1d, 0x67, 0x2b,
 0x0f, 0x77, 0x26, 0x4f, 0x36, 0x0e, 0x41, 0x06,
 0x01, 0xdc, 0x04, 0x01, 0x02, 0x01, 0x04, 0x00,
 0x00, 0x30, 0x03, 0x00, 0x00, 0x01, 0x00, 0xf6,
 0x06, 0x00, 0x00, 0x00, 0xd8, 0x07, 0x00, 0x01,
 0x00, 0xd1, 0x6f, 0x11, 0x78, 0xbb, 0x01, 0x00,
 0x00, 0x00, 0x00, 0x1d, 0x41, 0xbb, 0x01, 0x00,
 0x00, 0x3d, 0x11, 0x78, 0xec, 0x01, 0x00, 0x00,
 0x01, 0x00, 0x1d, 0x41, 0xec, 0x01, 0x00, 0x00,
 0x3d, 0x0e, 0xc5, 0x41, 0xc2, 0x01, 0x00, 0x00,
 0x42, 0x41, 0x00, 0x00, 0x00, 0xc6, 0x25, 0x01,
 0x00, 0xbc, 0x03, 0x85, 0x09, 0x05, 0x0d, 0x4e,
 0x00, 0x10, 0x08, 0x0e, 0x41, 0x06, 0x01, 0xde,
 0x04, 0x01, 0x0e, 0x01, 0x07, 0x08, 0x00, 0x8a,
 0x04, 0x0f, 0x00, 0x00, 0x01, 0x00, 0xf6, 0x06,
 0x00, 0x00, 0x00, 0xfa, 0x06, 0x00, 0x01, 0x00,
 0x8e, 0x07, 0x00, 0x02, 0x00, 0x90, 0x07, 0x00,
 0x03, 0x00, 0xce, 0x05, 0x00, 0x04, 0x00, 0xda,
 0x07, 0x01, 0x00, 0x20, 0xdc, 0x07, 0x01, 0x06,
 0x20, 0xde, 0x07, 0x01, 0x07, 0x20, 0xe0, 0x07,
 0x01, 0x08, 0x20, 0xe2, 0x07, 0x01, 0x09, 0x20,
 0x92, 0x07, 0x01, 0x0a, 0x20, 0xfc, 0x06, 0x01,
 0x0b, 0x20, 0x80, 0x07, 0x01, 0x0c, 0x20, 0x82,
 0x07, 0x01, 0x0d, 0x20, 0x88, 0x04, 0x08, 0x00,
 0x86, 0x04, 0x07, 0x00, 0xb2, 0x04, 0x20, 0x00,
 0xd4, 0x04, 0x37, 0x00, 0x8c, 0x04, 0x0a, 0x00,
 0xc0, 0x03, 0x42, 0x0c, 0xf6, 0x03, 0x30, 0x08,
 0xf4, 0x03, 0x2a, 0x08, 0xd1, 0x6f, 0x11, 0x78,
 0xbb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41,
 0xbb, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xbd,
 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xbd,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xc7, 0x01,
 0x00, 0x00, 0x02, 0x00, 0x1d, 0x41, 0xc7, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xc8, 0x01, 0x00,
 0x00, 0x03, 0x00, 0x1d, 0x41, 0xc8, 0x01, 0x00,
 0x00, 0x3d, 0x11, 0x78, 0x67, 0x01, 0x00, 0x00,
 0x04, 0x00, 0x1d, 0x41, 0x67, 0x01, 0x00, 0x00,
 0x3d, 0x0e, 0x61, 0x0d, 0x00, 0x61, 0x0c, 0x00,
 0x61, 0x0b, 0x00, 0x61, 0x0a, 0x00, 0x61, 0x09,
 0x00, 0x61, 0x08, 0x00, 0x61, 0x07, 0x00, 0x61,
 0x06, 0x00, 0x61, 0x05, 0x00, 0xdd, 0xee, 0xc3,
 0x05, 0xde, 0xee, 0xc3, 0x06, 0xdf, 0x62, 0x06,
 0x00, 0x62, 0x05, 0x00, 0xaa, 0x04, 0xf2, 0x01,
 0x00, 0x00, 0xf0, 0x0e, 0xdf, 0xc7, 0x62, 0x06,
 0x00, 0xa9, 0x04, 0xf3, 0x01, 0x00, 0x00, 0xf0,
 0x0e, 0xc5, 0x42, 0xf1, 0x00, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xc3, 0x07, 0xc5, 0x41, 0xf4, 0x01,
 0x00, 0x00, 0x42, 0x41, 0x00, 0x00, 0x00, 0x62,
 0x06, 0x00, 0x24, 0x01, 0x00, 0x11, 0xeb, 0x09,
 0x0e, 0x38, 0xaf, 0x00, 0x00, 0x00, 0xb5, 0xef,
 0xc3, 0x08, 0x38, 0xaf, 0x00, 0x00, 0x00, 0xe0,
 0x0b, 0xc5, 0x4c, 0xbb, 0x01, 0x00, 0x00, 0x62,
 0x06, 0x00, 0x4c, 0x6c, 0x01, 0x00, 0x00, 0xef,
 0xef, 0x38, 0xaf, 0x00, 0x00, 0x00, 0xb6, 0xef,
 0x9d, 0x38, 0xaf, 0x00, 0x00, 0x00, 0x62, 0x07,
 0x00, 0xef, 0x9a, 0xc3, 0x09, 0xdf, 0x62, 0x08,
 0x00, 0x62, 0x09, 0x00, 0xa6, 0x04, 0xf5, 0x01,
 0x00, 0x00, 0xf0, 0x0e, 0x38, 0x9b, 0x00, 0x00,
 0x00, 0x42, 0x84, 0x01, 0x00, 0x00, 0xc2, 0x04,
 0x24, 0x01, 0x00, 0xc3, 0x0a, 0x62, 0x0a, 0x00,
 0x42, 0xf6, 0x01, 0x00, 0x00, 0x04, 0xcd, 0x01,
 0x00, 0x00, 0x24, 0x01, 0x00, 0x96, 0x11, 0xeb,
 0x15, 0x0e, 0x38, 0x92, 0x00, 0x00, 0x00, 0x42,
 0x50, 0x01, 0x00, 0x00, 0x62, 0x0a, 0x00, 0x24,
 0x01, 0x00, 0xe9, 0xb6, 0xaa, 0xea, 0x0b, 0x5e,
 0x04, 0x00, 0x04, 0xf7, 0x01, 0x00, 0x00, 0xef,
 0x0e, 0xc1, 0x42, 0x5c, 0x00, 0x00, 0x00, 0x62,
 0x05, 0x00, 0x65, 0x05, 0x00, 0xc6, 0x24, 0x03,
 0x00, 0xc3, 0x0b, 0xc5, 0x41, 0xc2, 0x01, 0x00,
 0x00, 0x42, 0x42, 0x00, 0x00, 0x00, 0x62, 0x0b,
 0x00, 0x65, 0x06, 0x00, 0x11, 0x0b, 0xc7, 0x4c,
 0xc7, 0x01, 0x00, 0x00, 0xc8, 0x4c, 0xc8, 0x01,
 0x00, 0x00, 0x62, 0x05, 0x00, 0x4c, 0xbc, 0x01,
 0x00, 0x00, 0xc6, 0x4c, 0xbd, 0x01, 0x00, 0x00,
 0x62, 0x0a, 0x00, 0x41, 0xcd, 0x01, 0x00, 0x00,
 0x4c, 0xc9, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00,
 0x24, 0x02, 0x00, 0x0e, 0xc5, 0x41, 0xc0, 0x01,
 0x00, 0x00, 0x42, 0x41, 0x00, 0x00, 0x00, 0xc7,
 0x24, 0x01, 0x00, 0x11, 0xeb, 0x0a, 0x0e, 0x65,
 0x07, 0x00, 0x11, 0xc7, 0x21, 0x01, 0x00, 0xc3,
 0x0c, 0x62, 0x0c, 0x00, 0x42, 0x42, 0x00, 0x00,
 0x00, 0x62, 0x0b, 0x00, 0x24, 0x01, 0x00, 0x0e,
 0xc5, 0x41, 0xc0, 0x01, 0x00, 0x00, 0x42, 0x42,
 0x00, 0x00, 0x00, 0xc7, 0x62, 0x0c, 0x00, 0x24,
 0x02, 0x00, 0x0e, 0xc5, 0x41, 0xc1, 0x01, 0x00,
 0x00, 0x42, 0x41, 0x00, 0x00, 0x00, 0x62, 0x05,
 0x00, 0x24, 0x01, 0x00, 0x11, 0xeb, 0x0c, 0x0e,
 0x65, 0x07, 0x00, 0x11, 0x62, 0x05, 0x00, 0x21,
 0x01, 0x00, 0xc3, 0x0d, 0x62, 0x0d, 0x00, 0x42,
 0x42, 0x00, 0x00, 0x00, 0xc6, 0x24, 0x01, 0x00,
 0x0e, 0xc5, 0x41, 0xc1, 0x01, 0x00, 0x00, 0x42,
 0x42, 0x00, 0x00, 0x00, 0x62, 0x05, 0x00, 0x62,
 0x0d, 0x00, 0x24, 0x02, 0x00, 0x29, 0xbc, 0x03,
 0x8e, 0x09, 0x25, 0x0d, 0x4e, 0x4e, 0x4e, 0x4e,
 0x53, 0x8b, 0x18, 0x19, 0x4f, 0x45, 0x3b, 0x9a,
 0x26, 0x21, 0x2b, 0x72, 0x4f, 0x59, 0xd5, 0x00,
 0x0a, 0x08, 0x5e, 0x62, 0x22, 0x22, 0x2c, 0x22,
 0x45, 0x28, 0x95, 0x4f, 0x63, 0xa9, 0x45, 0x67,
 0x0e, 0xc4, 0x07, 0x01, 0x00, 0x01, 0x04, 0x01,
 0x04, 0x03, 0x00, 0x92, 0x01, 0x05, 0x00, 0x00,
 0x01, 0x00, 0x88, 0x07, 0x00, 0x00, 0x00, 0xe4,
 0x01, 0x00, 0x01, 0x00, 0xe2, 0x01, 0x00, 0x01,
 0x00, 0x10, 0x00, 0x01, 0x20, 0xec, 0x01, 0x11,
 0x0d, 0xf0, 0x03, 0x27, 0x08, 0xea, 0x03, 0x1b,
 0x08, 0x0c, 0x02, 0xca, 0x0c, 0x03, 0xcb, 0x61,
 0x03, 0x00, 0x2b, 0xd1, 0x6f, 0x11, 0x78, 0xc4,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xc4,
 0x01, 0x00, 0x00, 0x3d, 0x0e, 0xc6, 0x34, 0xc7,
 0x21, 0x00, 0x00, 0x11, 0x64, 0x03, 0x00, 0x65,
 0x00, 0x00, 0x11, 0xea, 0x08, 0x62, 0x03, 0x00,
 0x1b, 0x24, 0x00, 0x00, 0x0e, 0x0e, 0x62, 0x03,
 0x00, 0xc5, 0x43, 0xc7, 0x01, 0x00, 0x00, 0x62,
 0x03, 0x00, 0x65, 0x01, 0x00, 0x11, 0x04, 0xc2,
 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x43, 0xc2,
 0x01, 0x00, 0x00, 0x62, 0x03, 0x00, 0x65, 0x02,
 0x00, 0x11, 0x04, 0xc0, 0x01, 0x00, 0x00, 0x21,
 0x01, 0x00, 0x43, 0xc0, 0x01, 0x00, 0x00, 0x62,
 0x03, 0x00, 0x65, 0x02, 0x00, 0x11, 0x04, 0xc1,
 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x43, 0xc1,
 0x01, 0x00, 0x00, 0x62, 0x03, 0x00, 0x65, 0x02,
 0x00, 0x11, 0x04, 0xf4, 0x01, 0x00, 0x00, 0x21,
 0x01, 0x00, 0x43, 0xf4, 0x01, 0x00, 0x00, 0x62,
 0x03, 0x00, 0x28, 0xbc, 0x03, 0xe8, 0x09, 0x08,
 0x3f, 0x54, 0x80, 0x30, 0x67, 0x67, 0x67, 0x67,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x04, 0x01, 0x00, 0x0f, 0x00, 0xbe, 0x03, 0x10,
 0x0d, 0x65, 0x00, 0x00, 0x11, 0x0b, 0xc1, 0x4c,
 0xc4, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x28,
 0xbc, 0x03, 0xf3, 0x09, 0x03, 0x03, 0x1c, 0x21,
 0x0e, 0x40, 0x07, 0x01, 0x00, 0x01, 0x06, 0x01,
 0x05, 0x04, 0x01, 0x94, 0x01, 0x07, 0x00, 0x00,
 0x01, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00, 0xf2,
 0x07, 0x01, 0x00, 0x20, 0xa2, 0x07, 0x01, 0x02,
 0x20, 0xb4, 0x07, 0x01, 0x03, 0x20, 0xf4, 0x07,
 0x01, 0x04, 0x20, 0x10, 0x00, 0x01, 0x00, 0x88,
 0x04, 0x08, 0x00, 0x8a, 0x04, 0x09, 0x00, 0xb2,
 0x04, 0x20, 0x00, 0xc6, 0x03, 0x41, 0x0c, 0x08,
 0xc3, 0x05, 0xd1, 0x6f, 0x11, 0x78, 0xf8, 0x01,
 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xf8, 0x01,
 0x00, 0x00, 0x3d, 0x0e, 0x61, 0x04, 0x00, 0x61,
 0x03, 0x00, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00,
 0xc5, 0x11, 0xeb, 0x04, 0x0e, 0xdd, 0xee, 0xca,
 0xde, 0xee, 0x42, 0x39, 0x00, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xcb, 0xdf, 0x62, 0x02, 0x00, 0x65,
 0x03, 0x00, 0xa6, 0x04, 0xfb, 0x01, 0x00, 0x00,
 0x42, 0x5c, 0x00, 0x00, 0x00, 0x65, 0x03, 0x00,
 0x24, 0x01, 0x00, 0xf0, 0x0e, 0xc2, 0x05, 0x41,
 0xf4, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00, 0x00,
 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0x11,
 0xeb, 0x04, 0x0e, 0xbf, 0x00, 0xcc, 0x38, 0xaf,
 0x00, 0x00, 0x00, 0x62, 0x03, 0x00, 0xef, 0x62,
 0x02, 0x00, 0x9d, 0xc3, 0x04, 0xc2, 0x05, 0x41,
 0xf4, 0x01, 0x00, 0x00, 0x42, 0x42, 0x00, 0x00,
 0x00, 0x62, 0x01, 0x00, 0x62, 0x04, 0x00, 0x42,
 0x37, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x24,
 0x02, 0x00, 0x29, 0xbc, 0x03, 0xff, 0x09, 0x09,
 0x1c, 0x53, 0x40, 0x2c, 0x3b, 0x86, 0x81, 0x4f,
 0x94, 0x07, 0x02, 0x30, 0x0e, 0x42, 0x07, 0x01,
 0x00, 0x00, 0x08, 0x00, 0x05, 0x06, 0x01, 0xc4,
 0x01, 0x08, 0x8e, 0x07, 0x01, 0x00, 0x20, 0xdc,
 0x05, 0x01, 0x01, 0x20, 0x84, 0x07, 0x01, 0x02,
 0x20, 0xf6, 0x04, 0x01, 0x03, 0x20, 0xf8, 0x07,
 0x01, 0x04, 0x20, 0xfa, 0x07, 0x01, 0x05, 0x20,
 0x84, 0x02, 0x05, 0x06, 0x30, 0x10, 0x00, 0x01,
 0x00, 0xc0, 0x04, 0x2c, 0x00, 0x88, 0x04, 0x08,
 0x00, 0xbe, 0x04, 0x2b, 0x00, 0xc6, 0x03, 0x41,
 0x0c, 0x98, 0x04, 0x11, 0x00, 0x9c, 0x04, 0x13,
 0x00, 0x08, 0xc3, 0x07, 0x61, 0x05, 0x00, 0x61,
 0x04, 0x00, 0x61, 0x03, 0x00, 0x61, 0x02, 0x00,
 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0xdd, 0xee,
 0x0e, 0xde, 0xee, 0xc9, 0xc2, 0x07, 0x41, 0xf4,
 0x01, 0x00, 0x00, 0x42, 0x37, 0x01, 0x00, 0x00,
 0x62, 0x00, 0x00, 0x24, 0x01, 0x00, 0x11, 0xeb,
 0x04, 0x0e, 0xbf, 0x00, 0xca, 0xdf, 0xc2, 0x07,
 0x41, 0xc0, 0x01, 0x00, 0x00, 0x42, 0x41, 0x00,
 0x00, 0x00, 0x62, 0x00, 0x00, 0x24, 0x01, 0x00,
 0xef, 0xcb, 0xb5, 0xcc, 0x62, 0x02, 0x00, 0x07,
 0xaa, 0xea, 0x11, 0x62, 0x02, 0x00, 0x42, 0x3b,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x11, 0x63,
 0x03, 0x00, 0x0e, 0x38, 0xaf, 0x00, 0x00, 0x00,
 0x62, 0x03, 0x00, 0xef, 0x65, 0x03, 0x00, 0x9a,
 0xc3, 0x04, 0x38, 0xaf, 0x00, 0x00, 0x00, 0x62,
 0x01, 0x00, 0xef, 0x62, 0x04, 0x00, 0x9e, 0xc3,
 0x05, 0x62, 0x05, 0x00, 0xb5, 0xa5, 0xea, 0x18,
 0x61, 0x06, 0x00, 0x5e, 0x04, 0x00, 0x62, 0x00,
 0x00, 0xef, 0xc3, 0x06, 0x5e, 0x05, 0x00, 0x62,
 0x06, 0x00, 0x62, 0x05, 0x00, 0xf0, 0x0e, 0x62,
 0x04, 0x00, 0xb5, 0xa5, 0xea, 0x1f, 0xc2, 0x07,
 0x41, 0xf4, 0x01, 0x00, 0x00, 0x42, 0x42, 0x00,
 0x00, 0x00, 0x62, 0x00, 0x00, 0x62, 0x04, 0x00,
 0x42, 0x37, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00,
 0x24, 0x02, 0x00, 0x0e, 0x29, 0xbc, 0x03, 0x93,
 0x0a, 0x13, 0x6e, 0x13, 0x13, 0x81, 0x6d, 0x0e,
 0x26, 0x00, 0x10, 0x08, 0x4f, 0x4f, 0x35, 0x30,
 0x00, 0x0b, 0x0c, 0x26, 0x9a, 0x07, 0x02, 0x30,
 0x0e, 0x42, 0x07, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x02, 0x01, 0x00, 0x0b, 0x00, 0xc6, 0x03, 0x41,
 0x0c, 0x65, 0x00, 0x00, 0x42, 0x37, 0x00, 0x00,
 0x00, 0x25, 0x00, 0x00, 0xbc, 0x03, 0xb7, 0x0a,
 0x01, 0x03, 0x0e, 0x40, 0x07, 0x01, 0x00, 0x01,
 0x02, 0x01, 0x04, 0x00, 0x01, 0x2a, 0x03, 0x00,
 0x00, 0x01, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00,
 0x10, 0x00, 0x01, 0x00, 0x08, 0xca, 0xd1, 0x6f,
 0x11, 0x78, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x1d, 0x41, 0xf8, 0x01, 0x00, 0x00, 0x3d, 0x0e,
 0xc6, 0x41, 0xf4, 0x01, 0x00, 0x00, 0x42, 0x41,
 0x00, 0x00, 0x00, 0xc5, 0x24, 0x01, 0x00, 0x11,
 0xeb, 0x04, 0x0e, 0xbf, 0x00, 0x28, 0xbc, 0x03,
 0xbc, 0x0a, 0x02, 0x17, 0x54, 0x07, 0x02, 0x30,
 0x0e, 0x40, 0x07, 0x01, 0x00, 0x01, 0x03, 0x01,
 0x04, 0x01, 0x00, 0x3a, 0x04, 0x00, 0x00, 0x01,
 0x00, 0x96, 0x07, 0x00, 0x00, 0x00, 0x98, 0x07,
 0x00, 0x01, 0x00, 0x10, 0x00, 0x01, 0x00, 0xc8,
 0x04, 0x31, 0x00, 0x08, 0xcb, 0xd1, 0x6f, 0x11,
 0x78, 0xcb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d,
 0x41, 0xcb, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78,
 0xcc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41,
 0xcc, 0x01, 0x00, 0x00, 0x3d, 0x0e, 0xdd, 0x0b,
 0xc7, 0x4c, 0xbb, 0x01, 0x00, 0x00, 0xc5, 0x4c,
 0xbc, 0x01, 0x00, 0x00, 0xc6, 0x4c, 0xbd, 0x01,
 0x00, 0x00, 0x23, 0x01, 0x00, 0xbc, 0x03, 0xc7,
 0x0a, 0x07, 0x17, 0x4e, 0x54, 0x0d, 0x21, 0x21,
 0x21, 0x0e, 0x40, 0x07, 0x01, 0x00, 0x01, 0x04,
 0x01, 0x04, 0x01, 0x00, 0x4f, 0x05, 0x00, 0x00,
 0x01, 0x00, 0x96, 0x07, 0x00, 0x00, 0x00, 0x98,
 0x07, 0x00, 0x01, 0x00, 0x9e, 0x07, 0x00, 0x02,
 0x00, 0x10, 0x00, 0x01, 0x00, 0xca, 0x04, 0x32,
 0x00, 0x08, 0xcc, 0xd1, 0x6f, 0x11, 0x78, 0xcb,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xcb,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xcc, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xcc, 0x01,
 0x00, 0x00, 0x3d, 0x11, 0x78, 0xcf, 0x01, 0x00,
 0x00, 0x02, 0x00, 0x1d, 0x41, 0xcf, 0x01, 0x00,
 0x00, 0x3d, 0x0e, 0xdd, 0x0b, 0xc8, 0x4c, 0xbb,
 0x01, 0x00, 0x00, 0xc5, 0x4c, 0xbc, 0x01, 0x00,
 0x00, 0xc6, 0x4c, 0xbd, 0x01, 0x00, 0x00, 0xc7,
 0x4c, 0xcf, 0x01, 0x00, 0x00, 0x23, 0x01, 0x00,
 0xbc, 0x03, 0xd3, 0x0a, 0x09, 0x17, 0x4e, 0x4e,
 0x54, 0x0d, 0x21, 0x21, 0x21, 0x21, 0x0e, 0x40,
 0x07, 0x01, 0x00, 0x01, 0x03, 0x01, 0x04, 0x01,
 0x00, 0x3a, 0x04, 0x00, 0x00, 0x01, 0x00, 0x96,
 0x07, 0x00, 0x00, 0x00, 0x98, 0x07, 0x00, 0x01,
 0x00, 0x10, 0x00, 0x01, 0x00, 0xcc, 0x04, 0x33,
 0x00, 0x08, 0xcb, 0xd1, 0x6f, 0x11, 0x78, 0xcb,
 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41, 0xcb,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xcc, 0x01,
 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xcc, 0x01,
 0x00, 0x00, 0x3d, 0x0e, 0xdd, 0x0b, 0xc7, 0x4c,
 0xbb, 0x01, 0x00, 0x00, 0xc5, 0x4c, 0xbc, 0x01,
 0x00, 0x00, 0xc6, 0x4c, 0xbd, 0x01, 0x00, 0x00,
 0x23, 0x01, 0x00, 0xbc, 0x03, 0xe1, 0x0a, 0x07,
 0x17, 0x4e, 0x54, 0x0d, 0x21, 0x21, 0x21, 0x0e,
 0x40, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x04,
 0x01, 0x00, 0x32, 0x03, 0x00, 0x00, 0x01, 0x00,
 0xb8, 0x07, 0x00, 0x00, 0x00, 0x9e, 0x07, 0x00,
 0x01, 0x00, 0xd0, 0x04, 0x35, 0x00, 0xd1, 0x6f,
 0x11, 0x78, 0xdc, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x1d, 0x41, 0xdc, 0x01, 0x00, 0x00, 0x3d, 0x11,
 0x78, 0xcf, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d,
 0x41, 0xcf, 0x01, 0x00, 0x00, 0x3d, 0x0e, 0xdd,
 0x0b, 0xc5, 0x4c, 0xd2, 0x01, 0x00, 0x00, 0xc6,
 0x4c, 0xcf, 0x01, 0x00, 0x00, 0x23, 0x01, 0x00,
 0xbc, 0x03, 0xed, 0x0a, 0x06, 0x0d, 0x4e, 0x54,
 0x0d, 0x21, 0x21, 0x0e, 0x42, 0x07, 0x01, 0x00,
 0x00, 0x01, 0x00, 0x03, 0x01, 0x00, 0x0d, 0x01,
 0x10, 0x00, 0x01, 0x00, 0xd2, 0x04, 0x36, 0x00,
 0x08, 0xc9, 0xdd, 0x0b, 0xc5, 0x4c, 0xbb, 0x01,
 0x00, 0x00, 0x23, 0x01, 0x00, 0xbc, 0x03, 0xfc,
 0x0a, 0x03, 0x0d, 0x0d, 0x21, 0x0e, 0x40, 0x07,
 0x01, 0x00, 0x01, 0x02, 0x01, 0x04, 0x01, 0x00,
 0x25, 0x03, 0x00, 0x00, 0x01, 0x00, 0xf0, 0x07,
 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0xd4,
 0x04, 0x37, 0x00, 0x08, 0xca, 0xd1, 0x6f, 0x11,
 0x78, 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d,
 0x41, 0xf8, 0x01, 0x00, 0x00, 0x3d, 0x0e, 0xdd,
 0x0b, 0xc6, 0x4c, 0xbb, 0x01, 0x00, 0x00, 0xc5,
 0x4c, 0x6c, 0x01, 0x00, 0x00, 0x23, 0x01, 0x00,
 0xbc, 0x03, 0x83, 0x0b, 0x05, 0x17, 0x54, 0x0d,
 0x21, 0x21, 0x0e, 0x40, 0x07, 0x01, 0x00, 0x01,
 0x04, 0x01, 0x04, 0x01, 0x00, 0x4f, 0x05, 0x00,
 0x00, 0x01, 0x00, 0xf0, 0x07, 0x00, 0x00, 0x00,
 0xfc, 0x07, 0x00, 0x01, 0x00, 0xce, 0x07, 0x00,
 0x02, 0x00, 0x10, 0x00, 0x01, 0x00, 0xd6, 0x04,
 0x38, 0x00, 0x08, 0xcc, 0xd1, 0x6f, 0x11, 0x78,
 0xf8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x41,
 0xf8, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xfe,
 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d, 0x41, 0xfe,
 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0xe7, 0x01,
 0x00, 0x00, 0x02, 0x00, 0x1d, 0x41, 0xe7, 0x01,
 0x00, 0x00, 0x3d, 0x0e, 0xdd, 0x0b, 0xc8, 0x4c,
 0xbb, 0x01, 0x00, 0x00, 0xc5, 0x4c, 0x6c, 0x01,
 0x00, 0x00, 0xc6, 0x4c, 0xe6, 0x01, 0x00, 0x00,
 0xc7, 0x4c, 0xe7, 0x01, 0x00, 0x00, 0x23, 0x01,
 0x00, 0xbc, 0x03, 0x8d, 0x0b, 0x09, 0x17, 0x4e,
 0x4e, 0x54, 0x0d, 0x21, 0x21, 0x21, 0x21, 0x0e,
 0x40, 0x07, 0x01, 0x00, 0x01, 0x02, 0x01, 0x04,
 0x01, 0x00, 0x25, 0x03, 0x00, 0x00, 0x01, 0x00,
 0x96, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01,
 0x00, 0xd8, 0x04, 0x39, 0x00, 0x08, 0xca, 0xd1,
 0x6f, 0x11, 0x78, 0xcb, 0x01, 0x00, 0x00, 0x00,
 0x00, 0x1d, 0x41, 0xcb, 0x01, 0x00, 0x00, 0x3d,
 0x0e, 0xdd, 0x0b, 0xc6, 0x4c, 0xbb, 0x01, 0x00,
 0x00, 0xc5, 0x4c, 0xbc, 0x01, 0x00, 0x00, 0x23,
 0x01, 0x00, 0xbc, 0x03, 0x9b, 0x0b, 0x05, 0x17,
 0x54, 0x0d, 0x21, 0x21, 0x0e, 0x40, 0x07, 0x01,
 0x00, 0x01, 0x04, 0x01, 0x04, 0x01, 0x00, 0x4f,
 0x05, 0x00, 0x00, 0x01, 0x00, 0x96, 0x07, 0x00,
 0x00, 0x00, 0xfc, 0x07, 0x00, 0x01, 0x00, 0xce,
 0x07, 0x00, 0x02, 0x00, 0x10, 0x00, 0x01, 0x00,
 0xda, 0x04, 0x3a, 0x00, 0x08, 0xcc, 0xd1, 0x6f,
 0x11, 0x78, 0xcb, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x1d, 0x41, 0xcb, 0x01, 0x00, 0x00, 0x3d, 0x11,
 0x78, 0xfe, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d,
 0x41, 0xfe, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78,
 0xe7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x1d, 0x41,
 0xe7, 0x01, 0x00, 0x00, 0x3d, 0x0e, 0xdd, 0x0b,
 0xc8, 0x4c, 0xbb, 0x01, 0x00, 0x00, 0xc5, 0x4c,
 0x6c, 0x01, 0x00, 0x00, 0xc6, 0x4c, 0xe6, 0x01,
 0x00, 0x00, 0xc7, 0x4c, 0xe7, 0x01, 0x00, 0x00,
 0x23, 0x01, 0x00, 0xbc, 0x03, 0xa5, 0x0b, 0x09,
 0x17, 0x4e, 0x4e, 0x54, 0x0d, 0x21, 0x21, 0x21,
 0x21, 0x0e, 0x40, 0x07, 0x01, 0x00, 0x01, 0x02,
 0x01, 0x04, 0x01, 0x00, 0x25, 0x03, 0x00, 0x00,
 0x01, 0x00, 0xfe, 0x07, 0x00, 0x00, 0x00, 0x10,
 0x00, 0x01, 0x00, 0xdc, 0x04, 0x3b, 0x00, 0x08,
 0xca, 0xd1, 0x6f, 0x11, 0x78, 0xff, 0x01, 0x00,
 0x00, 0x00, 0x00, 0x1d, 0x41, 0xff, 0x01, 0x00,
 0x00, 0x3d, 0x0e, 0xdd, 0x0b, 0xc6, 0x4c, 0xbb,
 0x01, 0x00, 0x00, 0xc5, 0x4c, 0xec, 0x01, 0x00,
 0x00, 0x23, 0x01, 0x00, 0xbc, 0x03, 0xb3, 0x0b,
 0x05, 0x17, 0x54, 0x0d, 0x21, 0x21, 0x0e, 0x40,
 0x07, 0x01, 0x00, 0x01, 0x05, 0x01, 0x04, 0x01,
 0x00, 0x66, 0x06, 0x00, 0x00, 0x01, 0x00, 0x98,
 0x07, 0x00, 0x00, 0x00, 0x88, 0x07, 0x00, 0x01,
 0x00, 0x94, 0x07, 0x00, 0x02, 0x00, 0xce, 0x05,
 0x00, 0x03, 0x00, 0x10, 0x00, 0x01, 0x00, 0xde,
 0x04, 0x3c, 0x00, 0x08, 0xc3, 0x04, 0xd1, 0x6f,
 0x11, 0x78, 0xcc, 0x01, 0x00, 0x00, 0x00, 0x00,
 0x1d, 0x41, 0xcc, 0x01, 0x00, 0x00, 0x3d, 0x11,
 0x78, 0xc4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x1d,
 0x41, 0xc4, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78,
 0xca, 0x01, 0x00, 0x00, 0x02, 0x00, 0x1d, 0x41,
 0xca, 0x01, 0x00, 0x00, 0x3d, 0x11, 0x78, 0x67,
 0x01, 0x00, 0x00, 0x03, 0x00, 0x1d, 0x41, 0x67,
 0x01, 0x00, 0x00, 0x3d, 0x0e, 0xdd, 0x0b, 0xc2,
 0x04, 0x4c, 0xbb, 0x01, 0x00, 0x00, 0xc5, 0x4c,
 0xbd, 0x01, 0x00, 0x00, 0xc6, 0x4c, 0xc7, 0x01,
 0x00, 0x00, 0xc7, 0x4c, 0xc8, 0x01, 0x00, 0x00,
 0xc8, 0x4c, 0x67, 0x01, 0x00, 0x00, 0x23, 0x01,
 0x00, 0xbc, 0x03, 0xc1, 0x0b, 0x0b, 0x1c, 0x4e,
 0x4e, 0x4e, 0x54, 0x0d, 0x26, 0x21, 0x21, 0x21,
 0x21, 0x0e, 0x43, 0x06, 0x01, 0xd4, 0x03, 0x00,
 0x00, 0x00, 0x02, 0x01, 0x00, 0x0c, 0x00, 0xbe,
 0x03, 0x43, 0x08, 0x65, 0x00, 0x00, 0x42, 0x58,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x29, 0xbc,
 0x03, 0xd1, 0x0b, 0x02, 0x03, 0x3a, 0x0e, 0x43,
 0x06, 0x01, 0xd6, 0x03, 0x00, 0x03, 0x00, 0x05,
 0x01, 0x00, 0x7a, 0x03, 0x80, 0x08, 0x01, 0x00,
 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6, 0x05,
 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08, 0x61,
 0x02, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00,
 0x65, 0x00, 0x00, 0x42, 0x59, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00, 0x42,
 0x32, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e,
 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00,
 0x42, 0x34, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0xca, 0x62, 0x00, 0x00, 0x42, 0xeb, 0x00, 0x00,
 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb,
 0x62, 0x00, 0x00, 0x42, 0x33, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0x0e, 0x62, 0x02, 0x00, 0x38,
 0x45, 0x00, 0x00, 0x00, 0xac, 0xea, 0x22, 0x38,
 0x5e, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x00,
 0x00, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00,
 0x00, 0x42, 0x35, 0x01, 0x00, 0x00, 0x62, 0x02,
 0x00, 0x24, 0x01, 0x00, 0x24, 0x01, 0x00, 0x0e,
 0x29, 0xbc, 0x03, 0xd4, 0x0b, 0x07, 0x30, 0x40,
 0x40, 0x59, 0x4f, 0x40, 0xdf, 0x0e, 0x43, 0x06,
 0x01, 0xc8, 0x03, 0x00, 0x03, 0x00, 0x05, 0x01,
 0x00, 0x6e, 0x03, 0x80, 0x08, 0x01, 0x00, 0x20,
 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6, 0x05, 0x01,
 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08, 0x61, 0x02,
 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0x65,
 0x00, 0x00, 0x42, 0x59, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00, 0x42, 0x32,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62,
 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42,
 0x34, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xca,
 0x62, 0x00, 0x00, 0x42, 0xe4, 0x00, 0x00, 0x00,
 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb, 0x62,
 0x02, 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac,
 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x01, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41,
 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00,
 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03, 0xe1, 0x0b,
 0x06, 0x30, 0x40, 0x40, 0x59, 0x4e, 0xdf, 0x0e,
 0x43, 0x06, 0x01, 0xca, 0x03, 0x00, 0x03, 0x00,
 0x05, 0x01, 0x00, 0x6e, 0x03, 0x80, 0x08, 0x01,
 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6,
 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08,
 0x61, 0x02, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0x65, 0x00, 0x00, 0x42, 0x59, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00,
 0x42, 0x32, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00,
 0x00, 0x42, 0x34, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xca, 0x62, 0x00, 0x00, 0x42, 0xe5, 0x00,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00,
 0xcb, 0x62, 0x02, 0x00, 0x38, 0x45, 0x00, 0x00,
 0x00, 0xac, 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00,
 0x00, 0x42, 0x01, 0x02, 0x00, 0x00, 0x62, 0x00,
 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35,
 0x01, 0x00, 0x00, 0x62, 0x02, 0x00, 0x24, 0x01,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03,
 0xeb, 0x0b, 0x06, 0x30, 0x40, 0x40, 0x59, 0x4e,
 0xdf, 0x0e, 0x43, 0x06, 0x01, 0xce, 0x03, 0x00,
 0x03, 0x00, 0x05, 0x01, 0x00, 0x6e, 0x03, 0x80,
 0x08, 0x01, 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01,
 0x20, 0xb6, 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03,
 0x43, 0x08, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00,
 0x61, 0x00, 0x00, 0x65, 0x00, 0x00, 0x42, 0x59,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62,
 0x00, 0x00, 0x42, 0x32, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c,
 0x00, 0x00, 0x00, 0x42, 0x34, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x42,
 0xe7, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24,
 0x01, 0x00, 0xcb, 0x62, 0x02, 0x00, 0x38, 0x45,
 0x00, 0x00, 0x00, 0xac, 0xea, 0x22, 0x38, 0x5e,
 0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x00, 0x00,
 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00,
 0x42, 0x35, 0x01, 0x00, 0x00, 0x62, 0x02, 0x00,
 0x24, 0x01, 0x00, 0x24, 0x01, 0x00, 0x0e, 0x29,
 0xbc, 0x03, 0xf5, 0x0b, 0x06, 0x30, 0x40, 0x40,
 0x59, 0x4e, 0xdf, 0x0e, 0x43, 0x06, 0x01, 0xcc,
 0x03, 0x00, 0x03, 0x00, 0x05, 0x01, 0x00, 0x6e,
 0x03, 0x80, 0x08, 0x01, 0x00, 0x20, 0xb4, 0x05,
 0x01, 0x01, 0x20, 0xb6, 0x05, 0x01, 0x02, 0x20,
 0xbe, 0x03, 0x43, 0x08, 0x61, 0x02, 0x00, 0x61,
 0x01, 0x00, 0x61, 0x00, 0x00, 0x65, 0x00, 0x00,
 0x42, 0x59, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0xc9, 0x62, 0x00, 0x00, 0x42, 0x32, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62, 0x00, 0x00,
 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42, 0x34, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0xca, 0x62, 0x00,
 0x00, 0x42, 0xe6, 0x00, 0x00, 0x00, 0x62, 0x01,
 0x00, 0x24, 0x01, 0x00, 0xcb, 0x62, 0x02, 0x00,
 0x38, 0x45, 0x00, 0x00, 0x00, 0xac, 0xea, 0x22,
 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02,
 0x00, 0x00, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00,
 0x00, 0x00, 0x42, 0x35, 0x01, 0x00, 0x00, 0x62,
 0x02, 0x00, 0x24, 0x01, 0x00, 0x24, 0x01, 0x00,
 0x0e, 0x29, 0xbc, 0x03, 0xff, 0x0b, 0x06, 0x30,
 0x40, 0x40, 0x59, 0x4e, 0xdf, 0x0e, 0x43, 0x06,
 0x01, 0xd0, 0x03, 0x00, 0x03, 0x00, 0x05, 0x01,
 0x00, 0x6e, 0x03, 0x80, 0x08, 0x01, 0x00, 0x20,
 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6, 0x05, 0x01,
 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08, 0x61, 0x02,
 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0x65,
 0x00, 0x00, 0x42, 0x59, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00, 0x42, 0x32,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62,
 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42,
 0x34, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xca,
 0x62, 0x00, 0x00, 0x42, 0xe8, 0x00, 0x00, 0x00,
 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb, 0x62,
 0x02, 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac,
 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x01, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41,
 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00,
 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03, 0x89, 0x0c,
 0x06, 0x30, 0x40, 0x40, 0x59, 0x4e, 0xdf, 0x0e,
 0x43, 0x06, 0x01, 0xd2, 0x03, 0x00, 0x03, 0x00,
 0x05, 0x01, 0x00, 0x6e, 0x03, 0x80, 0x08, 0x01,
 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6,
 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08,
 0x61, 0x02, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0x65, 0x00, 0x00, 0x42, 0x59, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00,
 0x42, 0x32, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00,
 0x00, 0x42, 0x34, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xca, 0x62, 0x00, 0x00, 0x42, 0xe9, 0x00,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00,
 0xcb, 0x62, 0x02, 0x00, 0x38, 0x45, 0x00, 0x00,
 0x00, 0xac, 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00,
 0x00, 0x42, 0x01, 0x02, 0x00, 0x00, 0x62, 0x00,
 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35,
 0x01, 0x00, 0x00, 0x62, 0x02, 0x00, 0x24, 0x01,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03,
 0x93, 0x0c, 0x06, 0x30, 0x40, 0x40, 0x59, 0x4e,
 0xdf, 0x0e, 0x43, 0x06, 0x01, 0xdc, 0x03, 0x00,
 0x03, 0x00, 0x05, 0x01, 0x00, 0x7a, 0x03, 0x80,
 0x08, 0x01, 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01,
 0x20, 0xb6, 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03,
 0x43, 0x08, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00,
 0x61, 0x00, 0x00, 0x65, 0x00, 0x00, 0x42, 0x59,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62,
 0x00, 0x00, 0x42, 0x32, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c,
 0x00, 0x00, 0x00, 0x42, 0x34, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x42,
 0xee, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24,
 0x01, 0x00, 0xcb, 0x62, 0x00, 0x00, 0x42, 0x33,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62,
 0x02, 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac,
 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x01, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41,
 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00,
 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03, 0x9d, 0x0c,
 0x07, 0x30, 0x40, 0x40, 0x59, 0x4f, 0x40, 0xdf,
 0x0e, 0x43, 0x06, 0x01, 0xd8, 0x03, 0x00, 0x03,
 0x00, 0x05, 0x01, 0x00, 0x7a, 0x03, 0x80, 0x08,
 0x01, 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20,
 0xb6, 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43,
 0x08, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00, 0x61,
 0x00, 0x00, 0x65, 0x00, 0x00, 0x42, 0x59, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00,
 0x00, 0x42, 0x32, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00,
 0x00, 0x00, 0x42, 0x34, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x42, 0xec,
 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01,
 0x00, 0xcb, 0x62, 0x00, 0x00, 0x42, 0x33, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62, 0x02,
 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac, 0xea,
 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x01,
 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41, 0x3c,
 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00, 0x00,
 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24, 0x01,
 0x00, 0x0e, 0x29, 0xbc, 0x03, 0xaa, 0x0c, 0x07,
 0x30, 0x40, 0x40, 0x59, 0x4f, 0x40, 0xdf, 0x0e,
 0x43, 0x06, 0x01, 0xe6, 0x03, 0x00, 0x03, 0x00,
 0x05, 0x01, 0x00, 0x7a, 0x03, 0x80, 0x08, 0x01,
 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6,
 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08,
 0x61, 0x02, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0x65, 0x00, 0x00, 0x42, 0x59, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00,
 0x42, 0x32, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00,
 0x00, 0x42, 0x34, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xca, 0x62, 0x00, 0x00, 0x42, 0xf3, 0x00,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00,
 0xcb, 0x62, 0x00, 0x00, 0x42, 0x33, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62, 0x02, 0x00,
 0x38, 0x45, 0x00, 0x00, 0x00, 0xac, 0xea, 0x22,
 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02,
 0x00, 0x00, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00,
 0x00, 0x00, 0x42, 0x35, 0x01, 0x00, 0x00, 0x62,
 0x02, 0x00, 0x24, 0x01, 0x00, 0x24, 0x01, 0x00,
 0x0e, 0x29, 0xbc, 0x03, 0xb7, 0x0c, 0x07, 0x30,
 0x40, 0x40, 0x59, 0x4f, 0x40, 0xdf, 0x0e, 0x43,
 0x06, 0x01, 0xda, 0x03, 0x00, 0x03, 0x00, 0x05,
 0x01, 0x00, 0x7a, 0x03, 0x80, 0x08, 0x01, 0x00,
 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6, 0x05,
 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08, 0x61,
 0x02, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00,
 0x65, 0x00, 0x00, 0x42, 0x59, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00, 0x42,
 0x32, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e,
 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00,
 0x42, 0x34, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0xca, 0x62, 0x00, 0x00, 0x42, 0xed, 0x00, 0x00,
 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb,
 0x62, 0x00, 0x00, 0x42, 0x33, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0x0e, 0x62, 0x02, 0x00, 0x38,
 0x45, 0x00, 0x00, 0x00, 0xac, 0xea, 0x22, 0x38,
 0x5e, 0x01, 0x00, 0x00, 0x42, 0x01, 0x02, 0x00,
 0x00, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00,
 0x00, 0x42, 0x35, 0x01, 0x00, 0x00, 0x62, 0x02,
 0x00, 0x24, 0x01, 0x00, 0x24, 0x01, 0x00, 0x0e,
 0x29, 0xbc, 0x03, 0xc4, 0x0c, 0x07, 0x30, 0x40,
 0x40, 0x59, 0x4f, 0x40, 0xdf, 0x0e, 0x43, 0x06,
 0x01, 0xde, 0x03, 0x00, 0x03, 0x00, 0x05, 0x01,
 0x00, 0x6e, 0x03, 0x80, 0x08, 0x01, 0x00, 0x20,
 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6, 0x05, 0x01,
 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08, 0x61, 0x02,
 0x00, 0x61, 0x01, 0x00, 0x61, 0x00, 0x00, 0x65,
 0x00, 0x00, 0x42, 0x59, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00, 0x42, 0x32,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62,
 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42,
 0x34, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xca,
 0x62, 0x00, 0x00, 0x42, 0xef, 0x00, 0x00, 0x00,
 0x62, 0x01, 0x00, 0x24, 0x01, 0x00, 0xcb, 0x62,
 0x02, 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac,
 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x01, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41,
 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00,
 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03, 0xd1, 0x0c,
 0x06, 0x30, 0x40, 0x40, 0x59, 0x4e, 0xdf, 0x0e,
 0x43, 0x06, 0x01, 0xe2, 0x03, 0x00, 0x03, 0x00,
 0x05, 0x01, 0x00, 0x6e, 0x03, 0x80, 0x08, 0x01,
 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20, 0xb6,
 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43, 0x08,
 0x61, 0x02, 0x00, 0x61, 0x01, 0x00, 0x61, 0x00,
 0x00, 0x65, 0x00, 0x00, 0x42, 0x59, 0x01, 0x00,
 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00, 0x00,
 0x42, 0x32, 0x01, 0x00, 0x00, 0x24, 0x00, 0x00,
 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00, 0x00,
 0x00, 0x42, 0x34, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0xca, 0x62, 0x00, 0x00, 0x42, 0xf1, 0x00,
 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01, 0x00,
 0xcb, 0x62, 0x02, 0x00, 0x38, 0x45, 0x00, 0x00,
 0x00, 0xac, 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00,
 0x00, 0x42, 0x01, 0x02, 0x00, 0x00, 0x62, 0x00,
 0x00, 0x41, 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35,
 0x01, 0x00, 0x00, 0x62, 0x02, 0x00, 0x24, 0x01,
 0x00, 0x24, 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03,
 0xdb, 0x0c, 0x06, 0x30, 0x40, 0x40, 0x59, 0x4e,
 0xdf, 0x0e, 0x43, 0x06, 0x01, 0xe4, 0x03, 0x00,
 0x03, 0x00, 0x05, 0x01, 0x00, 0x7a, 0x03, 0x80,
 0x08, 0x01, 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01,
 0x20, 0xb6, 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03,
 0x43, 0x08, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00,
 0x61, 0x00, 0x00, 0x65, 0x00, 0x00, 0x42, 0x59,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62,
 0x00, 0x00, 0x42, 0x32, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c,
 0x00, 0x00, 0x00, 0x42, 0x34, 0x01, 0x00, 0x00,
 0x24, 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x42,
 0xf2, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24,
 0x01, 0x00, 0xcb, 0x62, 0x00, 0x00, 0x42, 0x33,
 0x01, 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62,
 0x02, 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac,
 0xea, 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42,
 0x01, 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41,
 0x3c, 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00,
 0x00, 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24,
 0x01, 0x00, 0x0e, 0x29, 0xbc, 0x03, 0xe5, 0x0c,
 0x07, 0x30, 0x40, 0x40, 0x59, 0x4f, 0x40, 0xdf,
 0x0e, 0x43, 0x06, 0x01, 0xe0, 0x03, 0x00, 0x03,
 0x00, 0x05, 0x01, 0x00, 0x7a, 0x03, 0x80, 0x08,
 0x01, 0x00, 0x20, 0xb4, 0x05, 0x01, 0x01, 0x20,
 0xb6, 0x05, 0x01, 0x02, 0x20, 0xbe, 0x03, 0x43,
 0x08, 0x61, 0x02, 0x00, 0x61, 0x01, 0x00, 0x61,
 0x00, 0x00, 0x65, 0x00, 0x00, 0x42, 0x59, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0xc9, 0x62, 0x00,
 0x00, 0x42, 0x32, 0x01, 0x00, 0x00, 0x24, 0x00,
 0x00, 0x0e, 0x62, 0x00, 0x00, 0x41, 0x3c, 0x00,
 0x00, 0x00, 0x42, 0x34, 0x01, 0x00, 0x00, 0x24,
 0x00, 0x00, 0xca, 0x62, 0x00, 0x00, 0x42, 0xf0,
 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x24, 0x01,
 0x00, 0xcb, 0x62, 0x00, 0x00, 0x42, 0x33, 0x01,
 0x00, 0x00, 0x24, 0x00, 0x00, 0x0e, 0x62, 0x02,
 0x00, 0x38, 0x45, 0x00, 0x00, 0x00, 0xac, 0xea,
 0x22, 0x38, 0x5e, 0x01, 0x00, 0x00, 0x42, 0x01,
 0x02, 0x00, 0x00, 0x62, 0x00, 0x00, 0x41, 0x3c,
 0x00, 0x00, 0x00, 0x42, 0x35, 0x01, 0x00, 0x00,
 0x62, 0x02, 0x00, 0x24, 0x01, 0x00, 0x24, 0x01,
 0x00, 0x0e, 0x29, 0xbc, 0x03, 0xf2, 0x0c, 0x07,
 0x30, 0x40, 0x40, 0x59, 0x4f, 0x40, 0xdf,
};

'''
'''--- build/market.js ---
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

function call(target, key, descriptor) {}
function view(target, key, descriptor) {}
function NearBindgen(target) {
  return class extends target {
    static _init() {
      // @ts-ignore
      let args = target.deserializeArgs();
      let ret = new target(args); // @ts-ignore

      ret.init(); // @ts-ignore

      ret.serialize();
      return ret;
    }

    static _get() {
      let ret = Object.create(target.prototype);
      return ret;
    }

  };
}

const U64_MAX = 2n ** 64n - 1n;
const EVICTED_REGISTER = U64_MAX - 1n;
function log(...params) {
  env.log(`${params.map(x => x === undefined ? 'undefined' : x) // Stringify undefined
  .map(x => typeof x === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings
  .join(' ')}` // Convert to string
  );
}
function signerAccountId() {
  env.signer_account_id(0);
  return env.read_register(0);
}
function predecessorAccountId() {
  env.predecessor_account_id(0);
  return env.read_register(0);
}
function attachedDeposit() {
  return env.attached_deposit();
}
function panic(msg) {
  if (msg !== undefined) {
    env.panic(msg);
  } else {
    env.panic();
  }
}
function storageRead(key) {
  let ret = env.storage_read(key, 0);

  if (ret === 1n) {
    return env.read_register(0);
  } else {
    return null;
  }
}
function storageHasKey(key) {
  let ret = env.storage_has_key(key);

  if (ret === 1n) {
    return true;
  } else {
    return false;
  }
}
function storageGetEvicted() {
  return env.read_register(EVICTED_REGISTER);
}

function currentAccountId() {
  env.current_account_id(0);
  return env.read_register(0);
}
function input() {
  env.input(0);
  return env.read_register(0);
}
function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {
  return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);
}
function promiseBatchCreate(accountId) {
  return env.promise_batch_create(accountId);
}
function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {
  env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);
}
function promiseBatchActionTransfer(promiseIndex, amount) {
  env.promise_batch_action_transfer(promiseIndex, amount);
}
var PromiseResult;

(function (PromiseResult) {
  PromiseResult[PromiseResult["NotReady"] = 0] = "NotReady";
  PromiseResult[PromiseResult["Successful"] = 1] = "Successful";
  PromiseResult[PromiseResult["Failed"] = 2] = "Failed";
})(PromiseResult || (PromiseResult = {}));

function promiseResult(resultIdx) {
  let status = env.promise_result(resultIdx, 0);

  if (status == PromiseResult.Successful) {
    return env.read_register(0);
  } else if (status == PromiseResult.Failed || status == PromiseResult.NotReady) {
    return status;
  } else {
    panic(`Unexpected return code: ${status}`);
  }
}
function promiseReturn(promiseIdx) {
  env.promise_return(promiseIdx);
}
function storageWrite(key, value) {
  let exist = env.storage_write(key, value, EVICTED_REGISTER);

  if (exist === 1n) {
    return true;
  }

  return false;
}
function storageRemove(key) {
  let exist = env.storage_remove(key, EVICTED_REGISTER);

  if (exist === 1n) {
    return true;
  }

  return false;
}
function storageByteCost() {
  return 10000000000000000000n;
}

class NearContract {
  deserialize() {
    const rawState = storageRead("STATE");

    if (rawState) {
      const state = JSON.parse(rawState); // reconstruction of the contract class object from plain object

      let c = this.default();
      Object.assign(this, state);

      for (const item in c) {
        if (c[item].constructor?.deserialize !== undefined) {
          this[item] = c[item].constructor.deserialize(this[item]);
        }
      }
    } else {
      throw new Error("Contract state is empty");
    }
  }

  serialize() {
    storageWrite("STATE", JSON.stringify(this));
  }

  static deserializeArgs() {
    let args = input();
    return JSON.parse(args || "{}");
  }

  static serializeReturn(ret) {
    return JSON.stringify(ret);
  }

  init() {}

}

class LookupMap {
  constructor(keyPrefix) {
    this.keyPrefix = keyPrefix;
  }

  containsKey(key) {
    let storageKey = this.keyPrefix + JSON.stringify(key);
    return storageHasKey(storageKey);
  }

  get(key) {
    let storageKey = this.keyPrefix + JSON.stringify(key);
    let raw = storageRead(storageKey);

    if (raw !== null) {
      return JSON.parse(raw);
    }

    return null;
  }

  remove(key) {
    let storageKey = this.keyPrefix + JSON.stringify(key);

    if (storageRemove(storageKey)) {
      return JSON.parse(storageGetEvicted());
    }

    return null;
  }

  set(key, value) {
    let storageKey = this.keyPrefix + JSON.stringify(key);
    let storageValue = JSON.stringify(value);

    if (storageWrite(storageKey, storageValue)) {
      return JSON.parse(storageGetEvicted());
    }

    return null;
  }

  extend(objects) {
    for (let kv of objects) {
      this.set(kv[0], kv[1]);
    }
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    return new LookupMap(data.keyPrefix);
  }

}

function u8ArrayToBytes(array) {
  let ret = "";

  for (let e of array) {
    ret += String.fromCharCode(e);
  }

  return ret;
} // TODO this function is a bit broken and the type can't be string
// TODO for more info: https://github.com/near/near-sdk-js/issues/78

function bytesToU8Array(bytes) {
  let ret = new Uint8Array(bytes.length);

  for (let i = 0; i < bytes.length; i++) {
    ret[i] = bytes.charCodeAt(i);
  }

  return ret;
}
function bytes(strOrU8Array) {
  if (typeof strOrU8Array == "string") {
    return checkStringIsBytes(strOrU8Array);
  } else if (strOrU8Array instanceof Uint8Array) {
    return u8ArrayToBytes(strOrU8Array);
  }

  throw new Error("bytes: expected string or Uint8Array");
}

function checkStringIsBytes(str) {
  for (let i = 0; i < str.length; i++) {
    if (str.charCodeAt(i) > 255) {
      throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);
    }
  }

  return str;
}

function assert(b, str) {
  if (b) {
    return;
  } else {
    throw Error("assertion failed: " + str);
  }
}

const ERR_INDEX_OUT_OF_BOUNDS = "Index out of bounds";
const ERR_INCONSISTENT_STATE$2 = "The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?";

function indexToKey(prefix, index) {
  let data = new Uint32Array([index]);
  let array = new Uint8Array(data.buffer);
  let key = u8ArrayToBytes(array);
  return prefix + key;
} /// An iterable implementation of vector that stores its content on the trie.
/// Uses the following map: index -> element

class Vector {
  constructor(prefix) {
    this.length = 0;
    this.prefix = prefix;
  }

  len() {
    return this.length;
  }

  isEmpty() {
    return this.length == 0;
  }

  get(index) {
    if (index >= this.length) {
      return null;
    }

    let storageKey = indexToKey(this.prefix, index);
    return JSON.parse(storageRead(storageKey));
  } /// Removes an element from the vector and returns it in serialized form.
  /// The removed element is replaced by the last element of the vector.
  /// Does not preserve ordering, but is `O(1)`.

  swapRemove(index) {
    if (index >= this.length) {
      throw new Error(ERR_INDEX_OUT_OF_BOUNDS);
    } else if (index + 1 == this.length) {
      return this.pop();
    } else {
      let key = indexToKey(this.prefix, index);
      let last = this.pop();

      if (storageWrite(key, JSON.stringify(last))) {
        return JSON.parse(storageGetEvicted());
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$2);
      }
    }
  }

  push(element) {
    let key = indexToKey(this.prefix, this.length);
    this.length += 1;
    storageWrite(key, JSON.stringify(element));
  }

  pop() {
    if (this.isEmpty()) {
      return null;
    } else {
      let lastIndex = this.length - 1;
      let lastKey = indexToKey(this.prefix, lastIndex);
      this.length -= 1;

      if (storageRemove(lastKey)) {
        return JSON.parse(storageGetEvicted());
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$2);
      }
    }
  }

  replace(index, element) {
    if (index >= this.length) {
      throw new Error(ERR_INDEX_OUT_OF_BOUNDS);
    } else {
      let key = indexToKey(this.prefix, index);

      if (storageWrite(key, JSON.stringify(element))) {
        return JSON.parse(storageGetEvicted());
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$2);
      }
    }
  }

  extend(elements) {
    for (let element of elements) {
      this.push(element);
    }
  }

  [Symbol.iterator]() {
    return new VectorIterator(this);
  }

  clear() {
    for (let i = 0; i < this.length; i++) {
      let key = indexToKey(this.prefix, i);
      storageRemove(key);
    }

    this.length = 0;
  }

  toArray() {
    let ret = [];

    for (let v of this) {
      ret.push(v);
    }

    return ret;
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    let vector = new Vector(data.prefix);
    vector.length = data.length;
    return vector;
  }

}
class VectorIterator {
  constructor(vector) {
    this.current = 0;
    this.vector = vector;
  }

  next() {
    if (this.current < this.vector.len()) {
      let value = this.vector.get(this.current);
      this.current += 1;
      return {
        value,
        done: false
      };
    }

    return {
      value: null,
      done: true
    };
  }

}

const ERR_INCONSISTENT_STATE$1 = "The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?";
class UnorderedMap {
  constructor(prefix) {
    this.length = 0;
    this.prefix = prefix;
    this.keyIndexPrefix = prefix + "i";
    let indexKey = prefix + "k";
    let indexValue = prefix + "v";
    this.keys = new Vector(indexKey);
    this.values = new Vector(indexValue);
  }

  len() {
    let keysLen = this.keys.len();
    let valuesLen = this.values.len();

    if (keysLen != valuesLen) {
      throw new Error(ERR_INCONSISTENT_STATE$1);
    }

    return keysLen;
  }

  isEmpty() {
    let keysIsEmpty = this.keys.isEmpty();
    let valuesIsEmpty = this.values.isEmpty();

    if (keysIsEmpty != valuesIsEmpty) {
      throw new Error(ERR_INCONSISTENT_STATE$1);
    }

    return keysIsEmpty;
  }

  serializeIndex(index) {
    let data = new Uint32Array([index]);
    let array = new Uint8Array(data.buffer);
    return u8ArrayToBytes(array);
  }

  deserializeIndex(rawIndex) {
    let array = bytesToU8Array(rawIndex);
    let data = new Uint32Array(array.buffer);
    return data[0];
  }

  getIndexRaw(key) {
    let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
    let indexRaw = storageRead(indexLookup);
    return indexRaw;
  }

  get(key) {
    let indexRaw = this.getIndexRaw(key);

    if (indexRaw) {
      let index = this.deserializeIndex(indexRaw);
      let value = this.values.get(index);

      if (value) {
        return value;
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$1);
      }
    }

    return null;
  }

  set(key, value) {
    let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
    let indexRaw = storageRead(indexLookup);

    if (indexRaw) {
      let index = this.deserializeIndex(indexRaw);
      return this.values.replace(index, value);
    } else {
      let nextIndex = this.len();
      let nextIndexRaw = this.serializeIndex(nextIndex);
      storageWrite(indexLookup, nextIndexRaw);
      this.keys.push(key);
      this.values.push(value);
      return null;
    }
  }

  remove(key) {
    let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
    let indexRaw = storageRead(indexLookup);

    if (indexRaw) {
      if (this.len() == 1) {
        // If there is only one element then swap remove simply removes it without
        // swapping with the last element.
        storageRemove(indexLookup);
      } else {
        // If there is more than one element then swap remove swaps it with the last
        // element.
        let lastKey = this.keys.get(this.len() - 1);

        if (!lastKey) {
          throw new Error(ERR_INCONSISTENT_STATE$1);
        }

        storageRemove(indexLookup); // If the removed element was the last element from keys, then we don't need to
        // reinsert the lookup back.

        if (lastKey != key) {
          let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);
          storageWrite(lastLookupKey, indexRaw);
        }
      }

      let index = this.deserializeIndex(indexRaw);
      this.keys.swapRemove(index);
      return this.values.swapRemove(index);
    }

    return null;
  }

  clear() {
    for (let key of this.keys) {
      let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
      storageRemove(indexLookup);
    }

    this.keys.clear();
    this.values.clear();
  }

  toArray() {
    let ret = [];

    for (let v of this) {
      ret.push(v);
    }

    return ret;
  }

  [Symbol.iterator]() {
    return new UnorderedMapIterator(this);
  }

  extend(kvs) {
    for (let [k, v] of kvs) {
      this.set(k, v);
    }
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    let map = new UnorderedMap(data.prefix); // reconstruct UnorderedMap

    map.length = data.length; // reconstruct keys Vector

    map.keys = new Vector(data.prefix + "k");
    map.keys.length = data.keys.length; // reconstruct values Vector

    map.values = new Vector(data.prefix + "v");
    map.values.length = data.values.length;
    return map;
  }

}

class UnorderedMapIterator {
  constructor(unorderedMap) {
    this.keys = new VectorIterator(unorderedMap.keys);
    this.values = new VectorIterator(unorderedMap.values);
  }

  next() {
    let key = this.keys.next();
    let value = this.values.next();

    if (key.done != value.done) {
      throw new Error(ERR_INCONSISTENT_STATE$1);
    }

    return {
      value: [key.value, value.value],
      done: key.done
    };
  }

}

const ERR_INCONSISTENT_STATE = "The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?";
class UnorderedSet {
  constructor(prefix) {
    this.length = 0;
    this.prefix = prefix;
    this.elementIndexPrefix = prefix + "i";
    let elementsPrefix = prefix + "e";
    this.elements = new Vector(elementsPrefix);
  }

  len() {
    return this.elements.len();
  }

  isEmpty() {
    return this.elements.isEmpty();
  }

  serializeIndex(index) {
    let data = new Uint32Array([index]);
    let array = new Uint8Array(data.buffer);
    return u8ArrayToBytes(array);
  }

  deserializeIndex(rawIndex) {
    let array = bytesToU8Array(rawIndex);
    let data = new Uint32Array(array.buffer);
    return data[0];
  }

  contains(element) {
    let indexLookup = this.elementIndexPrefix + JSON.stringify(element);
    return storageHasKey(indexLookup);
  }

  set(element) {
    let indexLookup = this.elementIndexPrefix + JSON.stringify(element);

    if (storageRead(indexLookup)) {
      return false;
    } else {
      let nextIndex = this.len();
      let nextIndexRaw = this.serializeIndex(nextIndex);
      storageWrite(indexLookup, nextIndexRaw);
      this.elements.push(element);
      return true;
    }
  }

  remove(element) {
    let indexLookup = this.elementIndexPrefix + JSON.stringify(element);
    let indexRaw = storageRead(indexLookup);

    if (indexRaw) {
      if (this.len() == 1) {
        // If there is only one element then swap remove simply removes it without
        // swapping with the last element.
        storageRemove(indexLookup);
      } else {
        // If there is more than one element then swap remove swaps it with the last
        // element.
        let lastElement = this.elements.get(this.len() - 1);

        if (!lastElement) {
          throw new Error(ERR_INCONSISTENT_STATE);
        }

        storageRemove(indexLookup); // If the removed element was the last element from keys, then we don't need to
        // reinsert the lookup back.

        if (lastElement != element) {
          let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);
          storageWrite(lastLookupElement, indexRaw);
        }
      }

      let index = this.deserializeIndex(indexRaw);
      this.elements.swapRemove(index);
      return true;
    }

    return false;
  }

  clear() {
    for (let element of this.elements) {
      let indexLookup = this.elementIndexPrefix + JSON.stringify(element);
      storageRemove(indexLookup);
    }

    this.elements.clear();
  }

  toArray() {
    let ret = [];

    for (let v of this) {
      ret.push(v);
    }

    return ret;
  }

  [Symbol.iterator]() {
    return this.elements[Symbol.iterator]();
  }

  extend(elements) {
    for (let element of elements) {
      this.set(element);
    }
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    let set = new UnorderedSet(data.prefix); // reconstruct UnorderedSet

    set.length = data.length; // reconstruct Vector

    let elementsPrefix = data.prefix + "e";
    set.elements = new Vector(elementsPrefix);
    set.elements.length = data.elements.length;
    return set;
  }

}

function restoreOwners(collection) {
  if (collection == null) {
    return null;
  }

  return UnorderedSet.deserialize(collection);
} //used to make sure the user attached exactly 1 yoctoNEAR

function assertOneYocto() {
  assert(attachedDeposit().toString() === "1", "Requires attached deposit of exactly 1 yoctoNEAR");
} //internal method for removing a sale from the market. This returns the previously removed sale object

function internallyRemoveSale(contract, nftContractId, tokenId) {
  //get the unique sale ID (contract + DELIMITER + token ID)
  let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`; //get the sale object by removing the unique sale ID. If there was no sale, panic

  let sale = contract.sales.remove(contractAndTokenId);

  if (sale == null) {
    panic("no sale");
  } //get the set of sales for the sale's owner. If there's no sale, panic. 

  let byOwnerId = restoreOwners(contract.byOwnerId.get(sale.owner_id));

  if (byOwnerId == null) {
    panic("no sales by owner");
  } //remove the unique sale ID from the set of sales

  byOwnerId.remove(contractAndTokenId); //if the set of sales is now empty after removing the unique sale ID, we simply remove that owner from the map

  if (byOwnerId.isEmpty()) {
    contract.byOwnerId.remove(sale.owner_id); //if the set of sales is not empty after removing, we insert the set back into the map for the owner
  } else {
    contract.byOwnerId.set(sale.owner_id, byOwnerId);
  } //get the set of token IDs for sale for the nft contract ID. If there's no sale, panic. 

  let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));

  if (byNftContractId == null) {
    panic("no sales by nft contract");
  } //remove the token ID from the set 

  byNftContractId.remove(tokenId); //if the set is now empty after removing the token ID, we remove that nft contract ID from the map

  if (byNftContractId.isEmpty()) {
    contract.byNftContractId.remove(nftContractId); //if the set is not empty after removing, we insert the set back into the map for the nft contract ID
  } else {
    contract.byNftContractId.set(nftContractId, byNftContractId);
  } //return the sale object

  return sale;
}

const GAS_FOR_ROYALTIES = 115_000_000_000_000;
const GAS_FOR_NFT_TRANSFER = 15_000_000_000_000; //struct that holds important information about each sale on the market

class Sale {
  //owner of the sale
  //market contract's approval ID to transfer the token on behalf of the owner
  //nft contract where the token was minted
  //actual token ID for sale
  //sale price in yoctoNEAR that the token is listed for
  constructor({
    ownerId,
    approvalId,
    nftContractId,
    tokenId,
    saleConditions
  }) {
    this.owner_id = ownerId;
    this.approval_id = approvalId;
    this.nft_contract_id = nftContractId;
    this.token_id = tokenId;
    this.sale_conditions = saleConditions;
  }

} //removes a sale from the market. 

function internalRemoveSale({
  contract,
  nftContractId,
  tokenId
}) {
  //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
  assertOneYocto(); //get the sale object as the return value from removing the sale internally

  let sale = internallyRemoveSale(contract, nftContractId, tokenId); //get the predecessor of the call and make sure they're the owner of the sale

  let ownerId = predecessorAccountId(); //assert that the owner of the sale is the same as the caller of the function

  assert(ownerId == sale.owner_id, "only the owner of the sale can remove it");
} //updates the price for a sale on the market

function internalUpdatePrice({
  contract,
  nftContractId,
  tokenId,
  price
}) {
  //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
  assertOneYocto(); //create the unique sale ID from the nft contract and token

  let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`; //get the sale object from the unique sale ID. If there is no token, panic. 

  let sale = contract.sales.get(contractAndTokenId);

  if (sale == null) {
    panic("no sale");
  }

  assert(predecessorAccountId() == sale.owner_id, "only the owner of the sale can update it"); //set the sale conditions equal to the passed in price

  sale.sale_conditions = price; //insert the sale back into the map for the unique sale ID

  contract.sales.set(contractAndTokenId, sale);
} //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price

function internalOffer({
  contract,
  nftContractId,
  tokenId
}) {
  //get the attached deposit and make sure it's greater than 0
  let deposit = attachedDeposit().valueOf();
  assert(deposit > 0, "deposit must be greater than 0"); //get the unique sale ID (contract + DELIMITER + token ID)

  let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`; //get the sale object from the unique sale ID. If the sale doesn't exist, panic.

  let sale = contract.sales.get(contractAndTokenId);

  if (sale == null) {
    panic("no sale");
  } //get the buyer ID which is the person who called the function and make sure they're not the owner of the sale

  let buyerId = predecessorAccountId();
  assert(buyerId != sale.owner_id, "you can't offer on your own sale"); //get the u128 price of the token (dot 0 converts from U128 to u128)

  let price = BigInt(sale.sale_conditions); //make sure the deposit is greater than the price

  assert(deposit >= price, "deposit must be greater than or equal to price"); //process the purchase (which will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties) 

  processPurchase({
    contract,
    nftContractId,
    tokenId,
    price: deposit.toString(),
    buyerId
  });
} //private function used when a sale is purchased. 
//this will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties

function processPurchase({
  contract,
  nftContractId,
  tokenId,
  price,
  buyerId
}) {
  //get the sale object by removing the sale
  let sale = internallyRemoveSale(contract, nftContractId, tokenId); //initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
  //a payout object used for the market to distribute funds to the appropriate accounts.

  const promise = promiseBatchCreate(nftContractId);
  promiseBatchActionFunctionCall(promise, "nft_transfer_payout", bytes(JSON.stringify({
    receiver_id: buyerId,
    //purchaser (person to transfer the NFT to)
    token_id: tokenId,
    //token ID to transfer
    approval_id: sale.approval_id,
    //market contract's approval ID in order to transfer the token on behalf of the owner
    memo: "payout from market",
    //memo (to include some context)

    /*
        the price that the token was purchased for. This will be used in conjunction with the royalty percentages
        for the token in order to determine how much money should go to which account. 
    */
    balance: price,
    max_len_payout: 10 //the maximum amount of accounts the market can payout at once (this is limited by GAS)

  })), 1, // 1 yoctoNEAR
  GAS_FOR_NFT_TRANSFER); //after the transfer payout has been initiated, we resolve the promise by calling our own resolve_purchase function. 
  //resolve purchase will take the payout object returned from the nft_transfer_payout and actually pay the accounts

  promiseThen(promise, currentAccountId(), "resolve_purchase", bytes(JSON.stringify({
    buyer_id: buyerId,
    //the buyer and price are passed in incase something goes wrong and we need to refund the buyer
    price: price
  })), 0, // no deposit 
  GAS_FOR_ROYALTIES);
  return promiseReturn(promise);
}
/*
    private method used to resolve the promise when calling nft_transfer_payout. This will take the payout object and 
    check to see if it's authentic and there's no problems. If everything is fine, it will pay the accounts. If there's a problem,
    it will refund the buyer for the price. 
*/

function internalResolvePurchase({
  buyerId,
  price
}) {
  assert(currentAccountId() === predecessorAccountId(), "Only the contract itself can call this method"); // checking for payout information returned from the nft_transfer_payout method

  let result = promiseResult(0);
  let payout = null;

  if (typeof result === 'string') {
    //if we set the payout_option to None, that means something went wrong and we should refund the buyer
    try {
      let payoutOption = JSON.parse(result);

      if (Object.keys(payoutOption.payout).length > 10 || Object.keys(payoutOption.payout).length < 1) {
        //we'll check if length of the payout object is > 10 or it's empty. In either case, we return None
        throw "Cannot have more than 10 royalties"; //if the payout object is the correct length, we move forward
      } else {
        //we'll keep track of how much the nft contract wants us to payout. Starting at the full price payed by the buyer
        let remainder = BigInt(price); //loop through the payout and subtract the values from the remainder. 

        Object.entries(payoutOption.payout).forEach(([key, value], index) => {
          remainder = remainder - BigInt(value);
        }); //Check to see if the NFT contract sent back a faulty payout that requires us to pay more or too little. 
        //The remainder will be 0 if the payout summed to the total price. The remainder will be 1 if the royalties
        //we something like 3333 + 3333 + 3333.

        if (remainder == BigInt(0) || remainder == BigInt(1)) {
          //set the payout because nothing went wrong
          payout = payoutOption.payout;
        } else {
          //if the remainder was anything but 1 or 0, we return None
          throw "Payout is not correct";
        }
      }
    } catch (e) {
      log(`error parsing payout object ${result}`);
      payout = null;
    }
  } //if the payout was null, we refund the buyer for the price they payed and return

  if (payout == null) {
    const promise = promiseBatchCreate(buyerId);
    promiseBatchActionTransfer(promise, BigInt(price));
    return price;
  } // NEAR payouts

  for (let [key, value] of Object.entries(payout)) {
    const promise = promiseBatchCreate(key);
    promiseBatchActionTransfer(promise, BigInt(value));
  } //return the price payout out

  return price;
}

//returns the number of sales the marketplace has up (as a string)
function internalSupplySales({
  contract
}) {
  //returns the sales object length wrapped as a string
  return contract.sales.len().toString();
} //returns the number of sales for a given account (result is a string)

function internalSupplyByOwnerId({
  contract,
  accountId
}) {
  //get the set of sales for the given owner Id
  let byOwnerId = restoreOwners(contract.byOwnerId.get(accountId)); //if there as some set, we return the length but if there wasn't a set, we return 0

  if (byOwnerId == null) {
    return "0";
  }

  return byOwnerId.len().toString();
} //returns paginated sale objects for a given account. (result is a vector of sales)

function internalSalesByOwnerId({
  contract,
  accountId,
  fromIndex,
  limit
}) {
  //get the set of token IDs for sale for the given account ID
  let tokenSet = restoreOwners(contract.byOwnerId.get(accountId)); //if there was no set, we return an empty array

  if (tokenSet == null) {
    return [];
  } //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index

  let start = fromIndex ? parseInt(fromIndex) : 0; //take the first "limit" elements in the array. If we didn't specify a limit, use 50

  let max = limit ? limit : 50;
  let keys = tokenSet.toArray();
  let sales = [];

  for (let i = start; i < max; i++) {
    if (i >= keys.length) {
      break;
    }

    let sale = contract.sales.get(keys[i]);

    if (sale != null) {
      sales.push(sale);
    }
  }

  return sales;
} //get the number of sales for an nft contract. (returns a string)

function internalSupplyByNftContractId({
  contract,
  nftContractId
}) {
  //get the set of tokens for associated with the given nft contract
  let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId)); //if there as some set, we return the length but if there wasn't a set, we return 0

  if (byNftContractId == null) {
    return "0";
  }

  return byNftContractId.len().toString();
} //returns paginated sale objects associated with a given nft contract. (result is a vector of sales)

function internalSalesByNftContractId({
  contract,
  accountId,
  fromIndex,
  limit
}) {
  //get the set of token IDs for sale for the given contract ID
  let tokenSet = restoreOwners(contract.byNftContractId.get(accountId)); //if there was no set, we return an empty array

  if (tokenSet == null) {
    return [];
  } //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index

  let start = fromIndex ? parseInt(fromIndex) : 0; //take the first "limit" elements in the array. If we didn't specify a limit, use 50

  let max = limit ? limit : 50;
  let keys = tokenSet.toArray();
  let sales = [];

  for (let i = start; i < max; i++) {
    if (i >= keys.length) {
      break;
    }

    let sale = contract.sales.get(keys[i]);

    if (sale != null) {
      sales.push(sale);
    }
  }

  return sales;
} //get a sale information for a given unique sale ID (contract + DELIMITER + token ID)

function internalGetSale({
  contract,
  nftContractToken
}) {
  //try and get the sale object for the given unique sale ID. Will return an option since
  //we're not guaranteed that the unique sale ID passed in will be valid.n);
  return contract.sales.get(nftContractToken);
}

function internalNftOnApprove({
  contract,
  tokenId,
  ownerId,
  approvalId,
  msg
}) {
  // get the contract ID which is the predecessor
  let contractId = predecessorAccountId(); //get the signer which is the person who initiated the transaction

  let signerId = signerAccountId(); //make sure that the signer isn't the predecessor. This is so that we're sure
  //this was called via a cross-contract call

  assert(signerId != contractId, "this function can only be called via a cross-contract call"); //make sure the owner ID is the signer. 

  assert(ownerId == signerId, "only the owner of the token can approve it"); //we need to enforce that the user has enough storage for 1 EXTRA sale.  

  let storageAmount = contract.storage_minimum_balance(); //get the total storage paid by the owner

  let ownerPaidStorage = contract.storageDeposits.get(signerId) || BigInt(0); //get the storage required which is simply the storage for the number of sales they have + 1 

  let signerStorageRequired = (BigInt(internalSupplyByOwnerId({
    contract,
    accountId: signerId
  })) + BigInt(1)) * BigInt(storageAmount); //make sure that the total paid is >= the required storage

  assert(ownerPaidStorage >= signerStorageRequired, "the owner does not have enough storage to approve this token"); //if all these checks pass we can create the sale conditions object.

  let saleConditions = JSON.parse(msg);

  if (!saleConditions.hasOwnProperty('sale_conditions') || Object.keys(saleConditions).length != 1) {
    panic("invalid sale conditions");
  } //create the unique sale ID which is the contract + DELIMITER + token ID

  let contractAndTokenId = `${contractId}${DELIMETER}${tokenId}`; //insert the key value pair into the sales map. Key is the unique ID. value is the sale object

  contract.sales.set(contractAndTokenId, new Sale({
    ownerId: ownerId,
    //owner of the sale / token
    approvalId: approvalId,
    //approval ID for that token that was given to the market
    nftContractId: contractId,
    //NFT contract the token was minted on
    tokenId: tokenId,
    //the actual token ID
    saleConditions: saleConditions.sale_conditions //the sale conditions 

  })); //Extra functionality that populates collections necessary for the view calls 
  //get the sales by owner ID for the given owner. If there are none, we create a new empty set

  let byOwnerId = contract.byOwnerId.get(ownerId) || new UnorderedSet(ownerId); //insert the unique sale ID into the set

  byOwnerId.set(contractAndTokenId); //insert that set back into the collection for the owner

  contract.byOwnerId.set(ownerId, byOwnerId); //get the token IDs for the given nft contract ID. If there are none, we create a new empty set

  let byNftContractId = contract.byNftContractId.get(contractId) || new UnorderedSet(contractId); //insert the token ID into the set

  byNftContractId.set(tokenId); //insert the set back into the collection for the given nft contract ID

  contract.byNftContractId.set(contractId, byNftContractId);
}

var _class, _class2;

const NFT_METADATA_SPEC = "nft-1.0.0"; /// This is the name of the NFT standard we're using

const NFT_STANDARD_NAME = "nep171"; //the minimum storage to have a sale on the contract.

const STORAGE_PER_SALE = BigInt(1000) * storageByteCost().valueOf(); //every sale will have a unique ID which is `CONTRACT + DELIMITER + TOKEN_ID`

const DELIMETER = ".";
let Contract = NearBindgen(_class = (_class2 = class Contract extends NearContract {
  //keep track of the owner of the contract

  /*
      to keep track of the sales, we map the ContractAndTokenId to a Sale. 
      the ContractAndTokenId is the unique identifier for every sale. It is made
      up of the `contract ID + DELIMITER + token ID`
  */
  //keep track of all the Sale IDs for every account ID
  //keep track of all the token IDs for sale for a given contract
  //keep track of the storage that accounts have payed

  /*
      initialization function (can only be called once).
      this initializes the contract with metadata that was passed in and
      the owner_id. 
  */
  constructor({
    owner_id
  }) {
    super();
    this.ownerId = owner_id;
    this.sales = new UnorderedMap("sales");
    this.byOwnerId = new LookupMap("byOwnerId");
    this.byNftContractId = new LookupMap("byNftContractId");
    this.storageDeposits = new LookupMap("storageDeposits");
  }

  default() {
    return new Contract({
      owner_id: ''
    });
  }
  /*
      STORAGE
  */

  //Allows users to deposit storage. This is to cover the cost of storing sale objects on the contract
  //Optional account ID is to users can pay for storage for other people.
  storage_deposit({
    account_id
  }) {
    //get the account ID to pay for storage for
    let storageAccountId = account_id || predecessorAccountId(); //get the deposit value which is how much the user wants to add to their storage

    let deposit = attachedDeposit().valueOf(); //make sure the deposit is greater than or equal to the minimum storage for a sale

    assert(deposit >= STORAGE_PER_SALE, `Requires minimum deposit of ${STORAGE_PER_SALE}`); //get the balance of the account (if the account isn't in the map we default to a balance of 0)

    let balance = this.storageDeposits.get(storageAccountId) || "0"; //add the deposit to their balance

    let newBalance = BigInt(balance) + deposit; //insert the balance back into the map for that account ID

    this.storageDeposits.set(storageAccountId, newBalance.toString());
  }

  //Allows users to withdraw any excess storage that they're not using. Say Bob pays 0.01N for 1 sale
  //Alice then buys Bob's token. This means bob has paid 0.01N for a sale that's no longer on the marketplace
  //Bob could then withdraw this 0.01N back into his account. 
  storage_withdraw() {
    //make sure the user attaches exactly 1 yoctoNEAR for security purposes.
    //this will redirect them to the NEAR wallet (or requires a full access key). 
    assertOneYocto(); //the account to withdraw storage to is always the function caller

    let ownerId = predecessorAccountId(); //get the amount that the user has by removing them from the map. If they're not in the map, default to 0

    let amount = this.storageDeposits.remove(ownerId) || "0"; //how many sales is that user taking up currently. This returns a set

    let sales = restoreOwners(this.byOwnerId.get(ownerId)); //get the length of that set. 

    let len = 0;

    if (sales != null) {
      len = sales.len();
    } //how much NEAR is being used up for all the current sales on the account 

    let diff = BigInt(len) * STORAGE_PER_SALE; //the excess to withdraw is the total storage paid - storage being used up.

    let amountLeft = BigInt(amount) - diff; //if that excess to withdraw is > 0, we transfer the amount to the user.

    if (amountLeft > 0) {
      const promise = promiseBatchCreate(ownerId);
      promiseBatchActionTransfer(promise, amountLeft);
    } //we need to add back the storage being used up into the map if it's greater than 0.
    //this is so that if the user had 500 sales on the market, we insert that value here so
    //if those sales get taken down, the user can then go and withdraw 500 sales worth of storage.

    if (diff > 0) {
      this.storageDeposits.set(ownerId, diff.toString());
    }
  }

  //return the minimum storage for 1 sale
  storage_minimum_balance() {
    return STORAGE_PER_SALE.toString();
  }

  //return how much storage an account has paid for
  storage_balance_of({
    account_id
  }) {
    return this.storageDeposits.get(account_id) || "0";
  }
  /*
      SALES
  */

  //removes a sale from the market. 
  remove_sale({
    nft_contract_id,
    token_id
  }) {
    return internalRemoveSale({
      contract: this,
      nftContractId: nft_contract_id,
      tokenId: token_id
    });
  }

  //updates the price for a sale on the market
  update_price({
    nft_contract_id,
    token_id,
    price
  }) {
    return internalUpdatePrice({
      contract: this,
      nftContractId: nft_contract_id,
      tokenId: token_id,
      price: price
    });
  }

  //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
  offer({
    nft_contract_id,
    token_id
  }) {
    return internalOffer({
      contract: this,
      nftContractId: nft_contract_id,
      tokenId: token_id
    });
  }

  //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
  resolve_purchase({
    buyer_id,
    price
  }) {
    return internalResolvePurchase({
      buyerId: buyer_id,
      price: price
    });
  }
  /*
      SALE VIEWS
  */

  //returns the number of sales the marketplace has up (as a string)
  get_supply_sales() {
    return internalSupplySales({
      contract: this
    });
  }

  //returns the number of sales for a given account (result is a string)
  get_supply_by_owner_id({
    account_id
  }) {
    return internalSupplyByOwnerId({
      contract: this,
      accountId: account_id
    });
  }

  //returns paginated sale objects for a given account. (result is a vector of sales)
  get_sales_by_owner_id({
    account_id,
    from_index,
    limit
  }) {
    return internalSalesByOwnerId({
      contract: this,
      accountId: account_id,
      fromIndex: from_index,
      limit: limit
    });
  }

  //returns paginated sale objects for a given account. (result is a vector of sales)
  get_supply_by_nft_contract_id({
    nft_contract_id
  }) {
    return internalSupplyByNftContractId({
      contract: this,
      nftContractId: nft_contract_id
    });
  }

  //returns paginated sale objects associated with a given nft contract. (result is a vector of sales)
  get_sales_by_nft_contract_id({
    nft_contract_id,
    from_index,
    limit
  }) {
    return internalSalesByNftContractId({
      contract: this,
      accountId: nft_contract_id,
      fromIndex: from_index,
      limit: limit
    });
  }

  //get a sale information for a given unique sale ID (contract + DELIMITER + token ID)
  get_sale({
    nft_contract_token
  }) {
    return internalGetSale({
      contract: this,
      nftContractToken: nft_contract_token
    });
  }
  /*
      APPROVALS
  */

  /// where we add the sale because we know nft owner can only call nft_approve
  nft_on_approve({
    token_id,
    owner_id,
    approval_id,
    msg
  }) {
    return internalNftOnApprove({
      contract: this,
      tokenId: token_id,
      ownerId: owner_id,
      approvalId: approval_id,
      msg: msg
    });
  }

}, (_applyDecoratedDescriptor(_class2.prototype, "storage_deposit", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "storage_deposit"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "storage_withdraw", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "storage_withdraw"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "storage_minimum_balance", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "storage_minimum_balance"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "storage_balance_of", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "storage_balance_of"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "remove_sale", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "remove_sale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "update_price", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "update_price"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "offer", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "offer"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "resolve_purchase", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "resolve_purchase"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get_supply_sales", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "get_supply_sales"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get_supply_by_owner_id", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "get_supply_by_owner_id"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get_sales_by_owner_id", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "get_sales_by_owner_id"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get_supply_by_nft_contract_id", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "get_supply_by_nft_contract_id"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get_sales_by_nft_contract_id", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "get_sales_by_nft_contract_id"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "get_sale", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "get_sale"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_on_approve", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_on_approve"), _class2.prototype)), _class2)) || _class;
function init() {
  Contract._init();
}
function nft_on_approve() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_on_approve(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function get_sale() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.get_sale(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function get_sales_by_nft_contract_id() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.get_sales_by_nft_contract_id(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function get_supply_by_nft_contract_id() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.get_supply_by_nft_contract_id(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function get_sales_by_owner_id() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.get_sales_by_owner_id(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function get_supply_by_owner_id() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.get_supply_by_owner_id(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function get_supply_sales() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.get_supply_sales(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function resolve_purchase() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.resolve_purchase(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function offer() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.offer(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function update_price() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.update_price(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function remove_sale() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.remove_sale(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function storage_balance_of() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.storage_balance_of(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function storage_minimum_balance() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.storage_minimum_balance(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function storage_withdraw() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.storage_withdraw(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function storage_deposit() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.storage_deposit(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}

export { Contract, DELIMETER, NFT_METADATA_SPEC, NFT_STANDARD_NAME, STORAGE_PER_SALE, get_sale, get_sales_by_nft_contract_id, get_sales_by_owner_id, get_supply_by_nft_contract_id, get_supply_by_owner_id, get_supply_sales, init, nft_on_approve, offer, remove_sale, resolve_purchase, storage_balance_of, storage_deposit, storage_minimum_balance, storage_withdraw, update_price };
//# sourceMappingURL=market.js.map

'''
'''--- build/methods.h ---
DEFINE_NEAR_METHOD(Contract)
DEFINE_NEAR_METHOD(DELIMETER)
DEFINE_NEAR_METHOD(NFT_METADATA_SPEC)
DEFINE_NEAR_METHOD(NFT_STANDARD_NAME)
DEFINE_NEAR_METHOD(STORAGE_PER_SALE)
DEFINE_NEAR_METHOD(get_sale)
DEFINE_NEAR_METHOD(get_sales_by_nft_contract_id)
DEFINE_NEAR_METHOD(get_sales_by_owner_id)
DEFINE_NEAR_METHOD(get_supply_by_nft_contract_id)
DEFINE_NEAR_METHOD(get_supply_by_owner_id)
DEFINE_NEAR_METHOD(get_supply_sales)
DEFINE_NEAR_METHOD(init)
DEFINE_NEAR_METHOD(nft_on_approve)
DEFINE_NEAR_METHOD(offer)
DEFINE_NEAR_METHOD(remove_sale)
DEFINE_NEAR_METHOD(resolve_purchase)
DEFINE_NEAR_METHOD(storage_balance_of)
DEFINE_NEAR_METHOD(storage_deposit)
DEFINE_NEAR_METHOD(storage_minimum_balance)
DEFINE_NEAR_METHOD(storage_withdraw)
DEFINE_NEAR_METHOD(update_price)

'''
'''--- build/nft.js ---
function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
  var desc = {};
  Object.keys(descriptor).forEach(function (key) {
    desc[key] = descriptor[key];
  });
  desc.enumerable = !!desc.enumerable;
  desc.configurable = !!desc.configurable;

  if ('value' in desc || desc.initializer) {
    desc.writable = true;
  }

  desc = decorators.slice().reverse().reduce(function (desc, decorator) {
    return decorator(target, property, desc) || desc;
  }, desc);

  if (context && desc.initializer !== void 0) {
    desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
    desc.initializer = undefined;
  }

  if (desc.initializer === void 0) {
    Object.defineProperty(target, property, desc);
    desc = null;
  }

  return desc;
}

function call(target, key, descriptor) {}
function view(target, key, descriptor) {}
function NearBindgen(target) {
  return class extends target {
    static _init() {
      // @ts-ignore
      let args = target.deserializeArgs();
      let ret = new target(args); // @ts-ignore

      ret.init(); // @ts-ignore

      ret.serialize();
      return ret;
    }

    static _get() {
      let ret = Object.create(target.prototype);
      return ret;
    }

  };
}

const U64_MAX = 2n ** 64n - 1n;
const EVICTED_REGISTER = U64_MAX - 1n;
function log(...params) {
  env.log(`${params.map(x => x === undefined ? 'undefined' : x) // Stringify undefined
  .map(x => typeof x === 'object' ? JSON.stringify(x) : x) // Convert Objects to strings
  .join(' ')}` // Convert to string
  );
}
function predecessorAccountId() {
  env.predecessor_account_id(0);
  return env.read_register(0);
}
function attachedDeposit() {
  return env.attached_deposit();
}
function panic(msg) {
  if (msg !== undefined) {
    env.panic(msg);
  } else {
    env.panic();
  }
}
function storageRead(key) {
  let ret = env.storage_read(key, 0);

  if (ret === 1n) {
    return env.read_register(0);
  } else {
    return null;
  }
}
function storageHasKey(key) {
  let ret = env.storage_has_key(key);

  if (ret === 1n) {
    return true;
  } else {
    return false;
  }
}
function storageGetEvicted() {
  return env.read_register(EVICTED_REGISTER);
}

function currentAccountId() {
  env.current_account_id(0);
  return env.read_register(0);
}
function input() {
  env.input(0);
  return env.read_register(0);
}
function storageUsage() {
  return env.storage_usage();
}
function promiseThen(promiseIndex, accountId, methodName, args, amount, gas) {
  return env.promise_then(promiseIndex, accountId, methodName, args, amount, gas);
}
function promiseBatchCreate(accountId) {
  return env.promise_batch_create(accountId);
}
function promiseBatchActionFunctionCall(promiseIndex, methodName, args, amount, gas) {
  env.promise_batch_action_function_call(promiseIndex, methodName, args, amount, gas);
}
function promiseBatchActionTransfer(promiseIndex, amount) {
  env.promise_batch_action_transfer(promiseIndex, amount);
}
var PromiseResult;

(function (PromiseResult) {
  PromiseResult[PromiseResult["NotReady"] = 0] = "NotReady";
  PromiseResult[PromiseResult["Successful"] = 1] = "Successful";
  PromiseResult[PromiseResult["Failed"] = 2] = "Failed";
})(PromiseResult || (PromiseResult = {}));

function promiseResult(resultIdx) {
  let status = env.promise_result(resultIdx, 0);

  if (status == PromiseResult.Successful) {
    return env.read_register(0);
  } else if (status == PromiseResult.Failed || status == PromiseResult.NotReady) {
    return status;
  } else {
    panic(`Unexpected return code: ${status}`);
  }
}
function promiseReturn(promiseIdx) {
  env.promise_return(promiseIdx);
}
function storageWrite(key, value) {
  let exist = env.storage_write(key, value, EVICTED_REGISTER);

  if (exist === 1n) {
    return true;
  }

  return false;
}
function storageRemove(key) {
  let exist = env.storage_remove(key, EVICTED_REGISTER);

  if (exist === 1n) {
    return true;
  }

  return false;
}
function storageByteCost() {
  return 10000000000000000000n;
}

class NearContract {
  deserialize() {
    const rawState = storageRead("STATE");

    if (rawState) {
      const state = JSON.parse(rawState); // reconstruction of the contract class object from plain object

      let c = this.default();
      Object.assign(this, state);

      for (const item in c) {
        if (c[item].constructor?.deserialize !== undefined) {
          this[item] = c[item].constructor.deserialize(this[item]);
        }
      }
    } else {
      throw new Error("Contract state is empty");
    }
  }

  serialize() {
    storageWrite("STATE", JSON.stringify(this));
  }

  static deserializeArgs() {
    let args = input();
    return JSON.parse(args || "{}");
  }

  static serializeReturn(ret) {
    return JSON.stringify(ret);
  }

  init() {}

}

class LookupMap {
  constructor(keyPrefix) {
    this.keyPrefix = keyPrefix;
  }

  containsKey(key) {
    let storageKey = this.keyPrefix + JSON.stringify(key);
    return storageHasKey(storageKey);
  }

  get(key) {
    let storageKey = this.keyPrefix + JSON.stringify(key);
    let raw = storageRead(storageKey);

    if (raw !== null) {
      return JSON.parse(raw);
    }

    return null;
  }

  remove(key) {
    let storageKey = this.keyPrefix + JSON.stringify(key);

    if (storageRemove(storageKey)) {
      return JSON.parse(storageGetEvicted());
    }

    return null;
  }

  set(key, value) {
    let storageKey = this.keyPrefix + JSON.stringify(key);
    let storageValue = JSON.stringify(value);

    if (storageWrite(storageKey, storageValue)) {
      return JSON.parse(storageGetEvicted());
    }

    return null;
  }

  extend(objects) {
    for (let kv of objects) {
      this.set(kv[0], kv[1]);
    }
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    return new LookupMap(data.keyPrefix);
  }

}

function u8ArrayToBytes(array) {
  let ret = "";

  for (let e of array) {
    ret += String.fromCharCode(e);
  }

  return ret;
} // TODO this function is a bit broken and the type can't be string
// TODO for more info: https://github.com/near/near-sdk-js/issues/78

function bytesToU8Array(bytes) {
  let ret = new Uint8Array(bytes.length);

  for (let i = 0; i < bytes.length; i++) {
    ret[i] = bytes.charCodeAt(i);
  }

  return ret;
}
function bytes(strOrU8Array) {
  if (typeof strOrU8Array == "string") {
    return checkStringIsBytes(strOrU8Array);
  } else if (strOrU8Array instanceof Uint8Array) {
    return u8ArrayToBytes(strOrU8Array);
  }

  throw new Error("bytes: expected string or Uint8Array");
}

function checkStringIsBytes(str) {
  for (let i = 0; i < str.length; i++) {
    if (str.charCodeAt(i) > 255) {
      throw new Error(`string ${str} at index ${i}: ${str[i]} is not a valid byte`);
    }
  }

  return str;
}

function assert(b, str) {
  if (b) {
    return;
  } else {
    throw Error("assertion failed: " + str);
  }
}

const ERR_INDEX_OUT_OF_BOUNDS = "Index out of bounds";
const ERR_INCONSISTENT_STATE$2 = "The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?";

function indexToKey(prefix, index) {
  let data = new Uint32Array([index]);
  let array = new Uint8Array(data.buffer);
  let key = u8ArrayToBytes(array);
  return prefix + key;
} /// An iterable implementation of vector that stores its content on the trie.
/// Uses the following map: index -> element

class Vector {
  constructor(prefix) {
    this.length = 0;
    this.prefix = prefix;
  }

  len() {
    return this.length;
  }

  isEmpty() {
    return this.length == 0;
  }

  get(index) {
    if (index >= this.length) {
      return null;
    }

    let storageKey = indexToKey(this.prefix, index);
    return JSON.parse(storageRead(storageKey));
  } /// Removes an element from the vector and returns it in serialized form.
  /// The removed element is replaced by the last element of the vector.
  /// Does not preserve ordering, but is `O(1)`.

  swapRemove(index) {
    if (index >= this.length) {
      throw new Error(ERR_INDEX_OUT_OF_BOUNDS);
    } else if (index + 1 == this.length) {
      return this.pop();
    } else {
      let key = indexToKey(this.prefix, index);
      let last = this.pop();

      if (storageWrite(key, JSON.stringify(last))) {
        return JSON.parse(storageGetEvicted());
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$2);
      }
    }
  }

  push(element) {
    let key = indexToKey(this.prefix, this.length);
    this.length += 1;
    storageWrite(key, JSON.stringify(element));
  }

  pop() {
    if (this.isEmpty()) {
      return null;
    } else {
      let lastIndex = this.length - 1;
      let lastKey = indexToKey(this.prefix, lastIndex);
      this.length -= 1;

      if (storageRemove(lastKey)) {
        return JSON.parse(storageGetEvicted());
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$2);
      }
    }
  }

  replace(index, element) {
    if (index >= this.length) {
      throw new Error(ERR_INDEX_OUT_OF_BOUNDS);
    } else {
      let key = indexToKey(this.prefix, index);

      if (storageWrite(key, JSON.stringify(element))) {
        return JSON.parse(storageGetEvicted());
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$2);
      }
    }
  }

  extend(elements) {
    for (let element of elements) {
      this.push(element);
    }
  }

  [Symbol.iterator]() {
    return new VectorIterator(this);
  }

  clear() {
    for (let i = 0; i < this.length; i++) {
      let key = indexToKey(this.prefix, i);
      storageRemove(key);
    }

    this.length = 0;
  }

  toArray() {
    let ret = [];

    for (let v of this) {
      ret.push(v);
    }

    return ret;
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    let vector = new Vector(data.prefix);
    vector.length = data.length;
    return vector;
  }

}
class VectorIterator {
  constructor(vector) {
    this.current = 0;
    this.vector = vector;
  }

  next() {
    if (this.current < this.vector.len()) {
      let value = this.vector.get(this.current);
      this.current += 1;
      return {
        value,
        done: false
      };
    }

    return {
      value: null,
      done: true
    };
  }

}

const ERR_INCONSISTENT_STATE$1 = "The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?";
class UnorderedMap {
  constructor(prefix) {
    this.length = 0;
    this.prefix = prefix;
    this.keyIndexPrefix = prefix + "i";
    let indexKey = prefix + "k";
    let indexValue = prefix + "v";
    this.keys = new Vector(indexKey);
    this.values = new Vector(indexValue);
  }

  len() {
    let keysLen = this.keys.len();
    let valuesLen = this.values.len();

    if (keysLen != valuesLen) {
      throw new Error(ERR_INCONSISTENT_STATE$1);
    }

    return keysLen;
  }

  isEmpty() {
    let keysIsEmpty = this.keys.isEmpty();
    let valuesIsEmpty = this.values.isEmpty();

    if (keysIsEmpty != valuesIsEmpty) {
      throw new Error(ERR_INCONSISTENT_STATE$1);
    }

    return keysIsEmpty;
  }

  serializeIndex(index) {
    let data = new Uint32Array([index]);
    let array = new Uint8Array(data.buffer);
    return u8ArrayToBytes(array);
  }

  deserializeIndex(rawIndex) {
    let array = bytesToU8Array(rawIndex);
    let data = new Uint32Array(array.buffer);
    return data[0];
  }

  getIndexRaw(key) {
    let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
    let indexRaw = storageRead(indexLookup);
    return indexRaw;
  }

  get(key) {
    let indexRaw = this.getIndexRaw(key);

    if (indexRaw) {
      let index = this.deserializeIndex(indexRaw);
      let value = this.values.get(index);

      if (value) {
        return value;
      } else {
        throw new Error(ERR_INCONSISTENT_STATE$1);
      }
    }

    return null;
  }

  set(key, value) {
    let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
    let indexRaw = storageRead(indexLookup);

    if (indexRaw) {
      let index = this.deserializeIndex(indexRaw);
      return this.values.replace(index, value);
    } else {
      let nextIndex = this.len();
      let nextIndexRaw = this.serializeIndex(nextIndex);
      storageWrite(indexLookup, nextIndexRaw);
      this.keys.push(key);
      this.values.push(value);
      return null;
    }
  }

  remove(key) {
    let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
    let indexRaw = storageRead(indexLookup);

    if (indexRaw) {
      if (this.len() == 1) {
        // If there is only one element then swap remove simply removes it without
        // swapping with the last element.
        storageRemove(indexLookup);
      } else {
        // If there is more than one element then swap remove swaps it with the last
        // element.
        let lastKey = this.keys.get(this.len() - 1);

        if (!lastKey) {
          throw new Error(ERR_INCONSISTENT_STATE$1);
        }

        storageRemove(indexLookup); // If the removed element was the last element from keys, then we don't need to
        // reinsert the lookup back.

        if (lastKey != key) {
          let lastLookupKey = this.keyIndexPrefix + JSON.stringify(lastKey);
          storageWrite(lastLookupKey, indexRaw);
        }
      }

      let index = this.deserializeIndex(indexRaw);
      this.keys.swapRemove(index);
      return this.values.swapRemove(index);
    }

    return null;
  }

  clear() {
    for (let key of this.keys) {
      let indexLookup = this.keyIndexPrefix + JSON.stringify(key);
      storageRemove(indexLookup);
    }

    this.keys.clear();
    this.values.clear();
  }

  toArray() {
    let ret = [];

    for (let v of this) {
      ret.push(v);
    }

    return ret;
  }

  [Symbol.iterator]() {
    return new UnorderedMapIterator(this);
  }

  extend(kvs) {
    for (let [k, v] of kvs) {
      this.set(k, v);
    }
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    let map = new UnorderedMap(data.prefix); // reconstruct UnorderedMap

    map.length = data.length; // reconstruct keys Vector

    map.keys = new Vector(data.prefix + "k");
    map.keys.length = data.keys.length; // reconstruct values Vector

    map.values = new Vector(data.prefix + "v");
    map.values.length = data.values.length;
    return map;
  }

}

class UnorderedMapIterator {
  constructor(unorderedMap) {
    this.keys = new VectorIterator(unorderedMap.keys);
    this.values = new VectorIterator(unorderedMap.values);
  }

  next() {
    let key = this.keys.next();
    let value = this.values.next();

    if (key.done != value.done) {
      throw new Error(ERR_INCONSISTENT_STATE$1);
    }

    return {
      value: [key.value, value.value],
      done: key.done
    };
  }

}

const ERR_INCONSISTENT_STATE = "The collection is an inconsistent state. Did previous smart contract execution terminate unexpectedly?";
class UnorderedSet {
  constructor(prefix) {
    this.length = 0;
    this.prefix = prefix;
    this.elementIndexPrefix = prefix + "i";
    let elementsPrefix = prefix + "e";
    this.elements = new Vector(elementsPrefix);
  }

  len() {
    return this.elements.len();
  }

  isEmpty() {
    return this.elements.isEmpty();
  }

  serializeIndex(index) {
    let data = new Uint32Array([index]);
    let array = new Uint8Array(data.buffer);
    return u8ArrayToBytes(array);
  }

  deserializeIndex(rawIndex) {
    let array = bytesToU8Array(rawIndex);
    let data = new Uint32Array(array.buffer);
    return data[0];
  }

  contains(element) {
    let indexLookup = this.elementIndexPrefix + JSON.stringify(element);
    return storageHasKey(indexLookup);
  }

  set(element) {
    let indexLookup = this.elementIndexPrefix + JSON.stringify(element);

    if (storageRead(indexLookup)) {
      return false;
    } else {
      let nextIndex = this.len();
      let nextIndexRaw = this.serializeIndex(nextIndex);
      storageWrite(indexLookup, nextIndexRaw);
      this.elements.push(element);
      return true;
    }
  }

  remove(element) {
    let indexLookup = this.elementIndexPrefix + JSON.stringify(element);
    let indexRaw = storageRead(indexLookup);

    if (indexRaw) {
      if (this.len() == 1) {
        // If there is only one element then swap remove simply removes it without
        // swapping with the last element.
        storageRemove(indexLookup);
      } else {
        // If there is more than one element then swap remove swaps it with the last
        // element.
        let lastElement = this.elements.get(this.len() - 1);

        if (!lastElement) {
          throw new Error(ERR_INCONSISTENT_STATE);
        }

        storageRemove(indexLookup); // If the removed element was the last element from keys, then we don't need to
        // reinsert the lookup back.

        if (lastElement != element) {
          let lastLookupElement = this.elementIndexPrefix + JSON.stringify(lastElement);
          storageWrite(lastLookupElement, indexRaw);
        }
      }

      let index = this.deserializeIndex(indexRaw);
      this.elements.swapRemove(index);
      return true;
    }

    return false;
  }

  clear() {
    for (let element of this.elements) {
      let indexLookup = this.elementIndexPrefix + JSON.stringify(element);
      storageRemove(indexLookup);
    }

    this.elements.clear();
  }

  toArray() {
    let ret = [];

    for (let v of this) {
      ret.push(v);
    }

    return ret;
  }

  [Symbol.iterator]() {
    return this.elements[Symbol.iterator]();
  }

  extend(elements) {
    for (let element of elements) {
      this.set(element);
    }
  }

  serialize() {
    return JSON.stringify(this);
  } // converting plain object to class object

  static deserialize(data) {
    let set = new UnorderedSet(data.prefix); // reconstruct UnorderedSet

    set.length = data.length; // reconstruct Vector

    let elementsPrefix = data.prefix + "e";
    set.elements = new Vector(elementsPrefix);
    set.elements.length = data.elements.length;
    return set;
  }

}

//defines the payout type we'll be returning as a part of the royalty standards.
class Token {
  constructor({
    ownerId,
    approvedAccountIds,
    nextApprovalId,
    royalty
  }) {
    //owner of the token
    this.owner_id = ownerId, //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    this.approved_account_ids = approvedAccountIds, //the next approval ID to give out. 
    this.next_approval_id = nextApprovalId, //keep track of the royalty percentages for the token in a hash map
    this.royalty = royalty;
  }

} //The Json token is what will be returned from view calls. 

class JsonToken {
  constructor({
    tokenId,
    ownerId,
    metadata,
    approvedAccountIds,
    royalty
  }) {
    //token ID
    this.token_id = tokenId, //owner of the token
    this.owner_id = ownerId, //token metadata
    this.metadata = metadata, //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    this.approved_account_ids = approvedAccountIds, //keep track of the royalty percentages for the token in a hash map
    this.royalty = royalty;
  }

} //get the information for a specific token ID

function internalNftMetadata({
  contract
}) {
  return contract.metadata;
}

function restoreOwners(collection) {
  if (collection == null) {
    return null;
  }

  return UnorderedSet.deserialize(collection);
} //convert the royalty percentage and amount to pay into a payout (U128)

function royaltyToPayout(royaltyPercentage, amountToPay) {
  return (BigInt(royaltyPercentage) * BigInt(amountToPay) / BigInt(10000)).toString();
} //refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 

function refundApprovedAccountIdsIter(accountId, approvedAccountIds) {
  //get the storage total by going through and summing all the bytes for each approved account IDs
  let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);
  let amountToTransfer = BigInt(storageReleased) * storageByteCost().valueOf(); // Send the money to the beneficiary (TODO: don't use batch actions)

  const promise = promiseBatchCreate(accountId);
  promiseBatchActionTransfer(promise, amountToTransfer);
} //refund a map of approved account IDs and send the funds to the passed in account ID

function refundApprovedAccountIds(accountId, approvedAccountIds) {
  //call the refundApprovedAccountIdsIter with the approved account IDs as keys
  refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));
} //refund the initial deposit based on the amount of storage that was used up

function refundDeposit(storageUsed) {
  //get how much it would cost to store the information
  let requiredCost = storageUsed * storageByteCost().valueOf(); //get the attached deposit

  let attachedDeposit$1 = attachedDeposit().valueOf(); //make sure that the attached deposit is greater than or equal to the required cost

  assert(requiredCost <= attachedDeposit$1, `Must attach ${requiredCost} yoctoNEAR to cover storage`); //get the refund amount from the attached deposit - required cost

  let refund = attachedDeposit$1 - requiredCost;
  log(`Refunding ${refund} yoctoNEAR`); //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount

  if (refund > 1) {
    // Send the money to the beneficiary (TODO: don't use batch actions)
    const promise = promiseBatchCreate(predecessorAccountId());
    promiseBatchActionTransfer(promise, refund);
  }
} //calculate how many bytes the account ID is taking up

function bytesForApprovedAccountId(accountId) {
  // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
  return accountId.length + 4 + 8;
} //Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)

function assertAtLeastOneYocto() {
  assert(attachedDeposit().valueOf() >= BigInt(1), "Requires attached deposit of at least 1 yoctoNEAR");
} //used to make sure the user attached exactly 1 yoctoNEAR

function assertOneYocto() {
  assert(attachedDeposit().toString() === "1", "Requires attached deposit of exactly 1 yoctoNEAR");
} //add a token to the set of tokens an owner has

function internalAddTokenToOwner(contract, accountId, tokenId) {
  //get the set of tokens for the given account
  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));

  if (tokenSet == null) {
    //if the account doesn't have any tokens, we create a new unordered set
    tokenSet = new UnorderedSet("tokensPerOwner" + accountId.toString());
  } //we insert the token ID into the set

  tokenSet.set(tokenId); //we insert that set for the given account ID. 

  contract.tokensPerOwner.set(accountId, tokenSet);
} //remove a token from an owner (internal method and can't be called directly via CLI).

function internalRemoveTokenFromOwner(contract, accountId, tokenId) {
  //we get the set of tokens that the owner has
  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId)); //if there is no set of tokens for the owner, we panic with the following message:

  if (tokenSet == null) {
    panic("Token should be owned by the sender");
  } //we remove the the token_id from the set of tokens

  tokenSet.remove(tokenId); //if the token set is now empty, we remove the owner from the tokens_per_owner collection

  if (tokenSet.isEmpty()) {
    contract.tokensPerOwner.remove(accountId);
  } else {
    //if the token set is not empty, we simply insert it back for the account ID. 
    contract.tokensPerOwner.set(accountId, tokenSet);
  }
} //transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).

function internalTransfer(contract, senderId, receiverId, tokenId, approvalId, memo) {
  //get the token object by passing in the token_id
  let token = contract.tokensById.get(tokenId);

  if (token == null) {
    panic("no token found");
  } //if the sender doesn't equal the owner, we check if the sender is in the approval list

  if (senderId != token.owner_id) {
    //if the token's approved account IDs doesn't contain the sender, we panic
    if (!token.approved_account_ids.hasOwnProperty(senderId)) {
      panic("Unauthorized");
    } // If they included an approval_id, check if the sender's actual approval_id is the same as the one included

    if (approvalId != null) {
      //get the actual approval ID
      let actualApprovalId = token.approved_account_ids[senderId]; //if the sender isn't in the map, we panic

      if (actualApprovalId == null) {
        panic("Sender is not approved account");
      } //make sure that the actual approval ID is the same as the one provided

      assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);
    }
  } //we make sure that the sender isn't sending the token to themselves

  assert(token.owner_id != receiverId, "The token owner and the receiver should be different"); //we remove the token from it's current owner's set

  internalRemoveTokenFromOwner(contract, token.owner_id, tokenId); //we then add the token to the receiver_id's set

  internalAddTokenToOwner(contract, receiverId, tokenId); //we create a new token struct 

  let newToken = new Token({
    ownerId: receiverId,
    //reset the approval account IDs
    approvedAccountIds: {},
    nextApprovalId: token.next_approval_id,
    //we copy over the royalties from the previous token
    royalty: token.royalty
  }); //insert that new token into the tokens_by_id, replacing the old entry 

  contract.tokensById.set(tokenId, newToken); //if there was some memo attached, we log it. 

  if (memo != null) {
    log(`Memo: ${memo}`);
  } // Default the authorized ID to be None for the logs.

  let authorizedId; //if the approval ID was provided, set the authorized ID equal to the sender

  if (approvalId != null) {
    authorizedId = senderId;
  } // Construct the transfer log as per the events standard.

  let nftTransferLog = {
    // Standard name ("nep171").
    standard: NFT_STANDARD_NAME,
    // Version of the standard ("nft-1.0.0").
    version: NFT_METADATA_SPEC,
    // The data related with the event stored in a vector.
    event: "nft_transfer",
    data: [{
      // The optional authorized account ID to transfer the token on behalf of the old owner.
      authorized_id: authorizedId,
      // The old owner's account ID.
      old_owner_id: token.owner_id,
      // The account ID of the new owner of the token.
      new_owner_id: receiverId,
      // A vector containing the token IDs as strings.
      token_ids: [tokenId],
      // An optional memo to include.
      memo
    }]
  }; // Log the serialized json.

  log(JSON.stringify(nftTransferLog)); //return the previous token object that was transferred.

  return token;
}

// @ts-nocheck
function internalMint({
  contract,
  tokenId,
  metadata,
  receiverId,
  perpetualRoyalties
}) {
  //measure the initial storage being used on the contract TODO
  let initialStorageUsage = storageUsage(); // create a royalty map to store in the token

  let royalty = {}; // if perpetual royalties were passed into the function: TODO: add isUndefined fn

  if (perpetualRoyalties != null) {
    //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
    assert(Object.keys(perpetualRoyalties).length < 7, "Cannot add more than 6 perpetual royalty amounts"); //iterate through the perpetual royalties and insert the account and amount in the royalty map

    Object.entries(perpetualRoyalties).forEach(([account, amount], index) => {
      royalty[account] = amount;
    });
  } //specify the token struct that contains the owner ID 

  let token = new Token({
    //set the owner ID equal to the receiver ID passed into the function
    ownerId: receiverId,
    //we set the approved account IDs to the default value (an empty map)
    approvedAccountIds: {},
    //the next approval ID is set to 0
    nextApprovalId: 0,
    //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
    royalty
  }); //insert the token ID and token struct and make sure that the token doesn't exist

  assert(!contract.tokensById.containsKey(tokenId), "Token already exists");
  contract.tokensById.set(tokenId, token); //insert the token ID and metadata

  contract.tokenMetadataById.set(tokenId, metadata); //call the internal method for adding the token to the owner

  internalAddTokenToOwner(contract, token.owner_id, tokenId); // Construct the mint log as per the events standard.

  let nftMintLog = {
    // Standard name ("nep171").
    standard: NFT_STANDARD_NAME,
    // Version of the standard ("nft-1.0.0").
    version: NFT_METADATA_SPEC,
    // The data related with the event stored in a vector.
    event: "nft_mint",
    data: [{
      // Owner of the token.
      owner_id: token.owner_id,
      // Vector of token IDs that were minted.
      token_ids: [tokenId]
    }]
  }; // Log the json.

  log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`); //calculate the required storage which was the used - initial TODO

  let requiredStorageInBytes = storageUsage().valueOf() - initialStorageUsage.valueOf(); //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.

  refundDeposit(requiredStorageInBytes);
}

// @ts-nocheck
const GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;
const GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000; //get the information for a specific token ID

function internalNftToken({
  contract,
  tokenId
}) {
  let token = contract.tokensById.get(tokenId); //if there wasn't a token ID in the tokens_by_id collection, we return None

  if (token == null) {
    return null;
  } //if there is some token ID in the tokens_by_id collection
  //we'll get the metadata for that token

  let metadata = contract.tokenMetadataById.get(tokenId); //we return the JsonToken

  let jsonToken = new JsonToken({
    tokenId: tokenId,
    ownerId: token.owner_id,
    metadata,
    approvedAccountIds: token.approved_account_ids,
    royalty: token.royalty
  });
  return jsonToken;
} //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 

function internalNftTransfer({
  contract,
  receiverId,
  tokenId,
  approvalId,
  memo
}) {
  //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. 
  assertOneYocto(); //get the sender to transfer the token from the sender to the receiver

  let senderId = predecessorAccountId(); //call the internal transfer method and get back the previous token so we can refund the approved account IDs

  let previousToken = internalTransfer(contract, senderId, receiverId, tokenId, approvalId, memo); //we refund the owner for releasing the storage used up by the approved account IDs

  refundApprovedAccountIds(previousToken.owner_id, previousToken.approved_account_ids);
} //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract

function internalNftTransferCall({
  contract,
  receiverId,
  tokenId,
  approvalId,
  memo,
  msg
}) {
  //assert that the user attached exactly 1 yocto for security reasons. 
  assertOneYocto(); //get the sender to transfer the token from the sender to the receiver

  let senderId = predecessorAccountId(); //call the internal transfer method and get back the previous token so we can refund the approved account IDs

  let previousToken = internalTransfer(contract, senderId, receiverId, tokenId, approvalId, memo); // Initiating receiver's call and the callback

  const promise = promiseBatchCreate(receiverId);
  promiseBatchActionFunctionCall(promise, "nft_on_transfer", bytes(JSON.stringify({
    sender_id: senderId,
    previous_owner_id: previousToken.owner_id,
    token_id: tokenId,
    msg
  })), 0, // no deposit 
  GAS_FOR_NFT_ON_TRANSFER); // We then resolve the promise and call nft_resolve_transfer on our own contract

  promiseThen(promise, currentAccountId(), "nft_resolve_transfer", bytes(JSON.stringify({
    owner_id: previousToken.owner_id,
    receiver_id: receiverId,
    token_id: tokenId,
    approved_account_ids: previousToken.approved_account_ids
  })), 0, // no deposit 
  GAS_FOR_RESOLVE_TRANSFER);
  return promiseReturn(promise);
} //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
//returns true if the token was successfully transferred to the receiver_id

function internalResolveTransfer({
  contract,
  authorizedId,
  ownerId,
  receiverId,
  tokenId,
  approvedAccountIds,
  memo
}) {
  assert(currentAccountId() === predecessorAccountId(), "Only the contract itself can call this method"); // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
  // call result.

  let result = promiseResult(0);

  if (typeof result === 'string') {
    //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
    //if we need don't need to return the token, we simply return true meaning everything went fine
    if (result === 'false') {
      /* 
          since we've already transferred the token and nft_on_transfer returned false, we don't have to 
          revert the original transfer and thus we can just return true since nothing went wrong.
      */
      //we refund the owner for releasing the storage used up by the approved account IDs
      refundApprovedAccountIds(ownerId, approvedAccountIds);
      return true;
    }
  } //get the token object if there is some token object

  let token = contract.tokensById.get(tokenId);

  if (token != null) {
    if (token.owner_id != receiverId) {
      //we refund the owner for releasing the storage used up by the approved account IDs
      refundApprovedAccountIds(ownerId, approvedAccountIds); // The token is not owner by the receiver anymore. Can't return it.

      return true;
    } //if there isn't a token object, it was burned and so we return true

  } else {
    //we refund the owner for releasing the storage used up by the approved account IDs
    refundApprovedAccountIds(ownerId, approvedAccountIds);
    return true;
  } //we remove the token from the receiver

  internalRemoveTokenFromOwner(contract, receiverId, tokenId); //we add the token to the original owner

  internalAddTokenToOwner(contract, ownerId, tokenId); //we change the token struct's owner to be the original owner 

  token.owner_id = ownerId; //we refund the receiver any approved account IDs that they may have set on the token

  refundApprovedAccountIds(receiverId, token.approved_account_ids); //reset the approved account IDs to what they were before the transfer

  token.approved_account_ids = approvedAccountIds; //we inset the token b  ack into the tokens_by_id collection

  contract.tokensById.set(tokenId, token);
  /*
      We need to log that the NFT was reverted back to the original owner.
      The old_owner_id will be the receiver and the new_owner_id will be the
      original owner of the token since we're reverting the transfer.
  */
  // Construct the transfer log as per the events standard.

  let nftTransferLog = {
    // Standard name ("nep171").
    standard: NFT_STANDARD_NAME,
    // Version of the standard ("nft-1.0.0").
    version: NFT_METADATA_SPEC,
    // The data related with the event stored in a vector.
    event: "nft_transfer",
    data: [{
      // The optional authorized account ID to transfer the token on behalf of the old owner.
      authorized_id: authorizedId,
      // The old owner's account ID.
      old_owner_id: receiverId,
      // The account ID of the new owner of the token.
      new_owner_id: ownerId,
      // A vector containing the token IDs as strings.
      token_ids: [tokenId],
      // An optional memo to include.
      memo
    }]
  }; // Log the serialized json.

  log(JSON.stringify(nftTransferLog)); //return false

  return false;
}

// @ts-nocheck

function internalTotalSupply({
  contract
}) {
  //return the length of the token metadata by ID
  return contract.tokenMetadataById.len();
} //Query for nft tokens on the contract regardless of the owner using pagination

function internalNftTokens({
  contract,
  fromIndex,
  limit
}) {
  let tokens = []; //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index

  let start = fromIndex ? parseInt(fromIndex) : 0; //take the first "limit" elements in the array. If we didn't specify a limit, use 50

  let max = limit ? limit : 50;
  let keys = contract.tokenMetadataById.toArray(); // Paginate through the keys using the fromIndex and limit

  for (let i = start; i < keys.length && i < start + max; i++) {
    // get the token object from the keys
    let jsonToken = internalNftToken({
      contract,
      tokenId: keys[i][0]
    });
    tokens.push(jsonToken);
  }

  return tokens;
} //get the total supply of NFTs for a given owner

function internalSupplyForOwner({
  contract,
  accountId
}) {
  //get the set of tokens for the passed in owner
  let tokens = restoreOwners(contract.tokensPerOwner.get(accountId)); //if there isn't a set of tokens for the passed in account ID, we'll return 0

  if (tokens == null) {
    return 0;
  } //if there is some set of tokens, we'll return the length 

  return tokens.len();
} //Query for all the tokens for an owner

function internalTokensForOwner({
  contract,
  accountId,
  fromIndex,
  limit
}) {
  //get the set of tokens for the passed in owner
  let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId)); //if there isn't a set of tokens for the passed in account ID, we'll return 0

  if (tokenSet == null) {
    return [];
  } //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index

  let start = fromIndex ? parseInt(fromIndex) : 0; //take the first "limit" elements in the array. If we didn't specify a limit, use 50

  let max = limit ? limit : 50;
  let keys = tokenSet.toArray();
  let tokens = [];

  for (let i = start; i < max; i++) {
    if (i >= keys.length) {
      break;
    }

    let token = internalNftToken({
      contract,
      tokenId: keys[i]
    });
    tokens.push(token);
  }

  return tokens;
}

// @ts-nocheck
const GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000; //approve an account ID to transfer a token on your behalf

function internalNftApprove({
  contract,
  tokenId,
  accountId,
  msg
}) {
  /*
      assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
      The user needs to attach enough to pay for storage on the contract
  */
  assertAtLeastOneYocto(); //get the token object from the token ID

  let token = contract.tokensById.get(tokenId);

  if (token == null) {
    panic("no token");
  } //make sure that the person calling the function is the owner of the token

  assert(predecessorAccountId() === token.owner_id, "Predecessor must be the token owner"); //get the next approval ID if we need a new approval

  let approvalId = token.next_approval_id; //check if the account has been approved already for this token

  let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);
  token.approved_account_ids[accountId] = approvalId; //if it was a new approval, we need to calculate how much storage is being used to add the account.

  let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0; //increment the token's next approval ID by 1

  token.next_approval_id += 1; //insert the token back into the tokens_by_id collection

  contract.tokensById.set(tokenId, token); //refund any excess storage attached by the user. If the user didn't attach enough, panic. 

  refundDeposit(BigInt(storageUsed)); //if some message was passed into the function, we initiate a cross contract call on the
  //account we're giving access to. 

  if (msg != null) {
    // Initiating receiver's call and the callback
    const promise = promiseBatchCreate(accountId);
    promiseBatchActionFunctionCall(promise, "nft_on_approve", bytes(JSON.stringify({
      token_id: tokenId,
      owner_id: token.owner_id,
      approval_id: approvalId,
      msg
    })), 0, // no deposit 
    GAS_FOR_NFT_ON_APPROVE);
    promiseReturn(promise);
  }
} //check if the passed in account has access to approve the token ID

function internalNftIsApproved({
  contract,
  tokenId,
  approvedAccountId,
  approvalId
}) {
  //get the token object from the token_id
  let token = contract.tokensById.get(tokenId);

  if (token == null) {
    panic("no token");
  } //get the approval number for the passed in account ID

  let approval = token.approved_account_ids[approvedAccountId]; //if there was no approval ID found for the account ID, we simply return false

  if (approval == null) {
    return false;
  } //if there was some approval ID found for the account ID
  //if there was no approval_id passed into the function, we simply return true

  if (approvalId == null) {
    return true;
  } //if a specific approval_id was passed into the function
  //return if the approval ID passed in matches the actual approval ID for the account

  return approvalId == approval;
} //revoke a specific account from transferring the token on your behalf

function internalNftRevoke({
  contract,
  tokenId,
  accountId
}) {
  //assert that the user attached exactly 1 yoctoNEAR for security reasons
  assertOneYocto(); //get the token object using the passed in token_id

  let token = contract.tokensById.get(tokenId);

  if (token == null) {
    panic("no token");
  } //get the caller of the function and assert that they are the owner of the token

  let predecessorAccountId$1 = predecessorAccountId();
  assert(predecessorAccountId$1 == token.owner_id, "only token owner can revoke"); //if the account ID was in the token's approval, we remove it

  if (token.approved_account_ids.hasOwnProperty(accountId)) {
    delete token.approved_account_ids[accountId]; //refund the funds released by removing the approved_account_id to the caller of the function

    refundApprovedAccountIdsIter(predecessorAccountId$1, [accountId]); //insert the token back into the tokens_by_id collection with the account_id removed from the approval list

    contract.tokensById.set(tokenId, token);
  }
} //revoke all accounts from transferring the token on your behalf

function internalNftRevokeAll({
  contract,
  tokenId
}) {
  //assert that the caller attached exactly 1 yoctoNEAR for security
  assertOneYocto(); //get the token object from the passed in token ID

  let token = contract.tokensById.get(tokenId);

  if (token == null) {
    panic("no token");
  } //get the caller and make sure they are the owner of the tokens

  let predecessorAccountId$1 = predecessorAccountId();
  assert(predecessorAccountId$1 == token.owner_id, "only token owner can revoke"); //only revoke if the approved account IDs for the token is not empty

  if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {
    //refund the approved account IDs to the caller of the function
    refundApprovedAccountIds(predecessorAccountId$1, token.approved_account_ids); //clear the approved account IDs

    token.approved_account_ids = {}; //insert the token back into the tokens_by_id collection with the approved account IDs cleared

    contract.tokensById.set(tokenId, token);
  }
}

// @ts-nocheck
//calculates the payout for a token given the passed in balance. This is a view method
function internalNftPayout({
  contract,
  tokenId,
  balance,
  maxLenPayout
}) {
  //get the token object
  let token = contract.tokensById.get(tokenId);

  if (token == null) {
    panic("no token");
  } //get the owner of the token

  let ownerId = token.owner_id; //keep track of the total perpetual royalties

  let totalPerpetual = 0; //keep track of the payout object to send back

  let payoutObj = {}; //get the royalty object from token

  let royalty = token.royalty; //make sure we're not paying out to too many people (GAS limits this)

  assert(Object.keys(royalty).length <= maxLenPayout, "Market cannot payout to that many receivers"); //go through each key and value in the royalty object

  Object.entries(royalty).forEach(([key, value], index) => {
    //only insert into the payout if the key isn't the token owner (we add their payout at the end)
    if (key != ownerId) {
      payoutObj[key] = royaltyToPayout(value, balance);
      totalPerpetual += value;
    }
  }); // payout to previous owner who gets 100% - total perpetual royalties

  payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance); //return the payout object

  return {
    payout: payoutObj
  };
} //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 

function internalNftTransferPayout({
  contract,
  receiverId,
  tokenId,
  approvalId,
  memo,
  balance,
  maxLenPayout
}) {
  //assert that the user attached 1 yocto NEAR for security reasons
  assertOneYocto(); //get the sender ID

  let senderId = predecessorAccountId(); //transfer the token to the passed in receiver and get the previous token object back

  let previousToken = internalTransfer(contract, senderId, receiverId, tokenId, approvalId, memo); //refund the previous token owner for the storage used up by the previous approved account IDs

  refundApprovedAccountIds(previousToken.owner_id, previousToken.approved_account_ids); //get the owner of the token

  let ownerId = previousToken.owner_id; //keep track of the total perpetual royalties

  let totalPerpetual = 0; //keep track of the payout object to send back

  let payoutObj = {}; //get the royalty object from token

  let royalty = previousToken.royalty; //make sure we're not paying out to too many people (GAS limits this)

  assert(Object.keys(royalty).length <= maxLenPayout, "Market cannot payout to that many receivers"); //go through each key and value in the royalty object

  Object.entries(royalty).forEach(([key, value], index) => {
    //only insert into the payout if the key isn't the token owner (we add their payout at the end)
    if (key != ownerId) {
      payoutObj[key] = royaltyToPayout(value, balance);
      totalPerpetual += value;
    }
  }); // payout to previous owner who gets 100% - total perpetual royalties

  payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance); //return the payout object

  return {
    payout: payoutObj
  };
}

var _class, _class2;

const NFT_METADATA_SPEC = "nft-1.0.0"; /// This is the name of the NFT standard we're using

const NFT_STANDARD_NAME = "nep171";
let Contract = NearBindgen(_class = (_class2 = class Contract extends NearContract {
  /*
      initialization function (can only be called once).
      this initializes the contract with metadata that was passed in and
      the owner_id. 
  */
  constructor({
    owner_id,
    metadata = {
      spec: "nft-1.0.0",
      name: "NFT Tutorial Contract",
      symbol: "GOTEAM"
    }
  }) {
    super();
    this.owner_id = owner_id;
    this.tokensPerOwner = new LookupMap("tokensPerOwner");
    this.tokensById = new LookupMap("tokensById");
    this.tokenMetadataById = new UnorderedMap("tokenMetadataById");
    this.metadata = metadata;
  }

  default() {
    return new Contract({
      owner_id: ''
    });
  }
  /*
      MINT
  */

  nft_mint({
    token_id,
    metadata,
    receiver_id,
    perpetual_royalties
  }) {
    return internalMint({
      contract: this,
      tokenId: token_id,
      metadata: metadata,
      receiverId: receiver_id,
      perpetualRoyalties: perpetual_royalties
    });
  }
  /*
      CORE
  */

  //get the information for a specific token ID
  nft_token({
    token_id
  }) {
    return internalNftToken({
      contract: this,
      tokenId: token_id
    });
  }

  //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
  nft_transfer({
    receiver_id,
    token_id,
    approval_id,
    memo
  }) {
    return internalNftTransfer({
      contract: this,
      receiverId: receiver_id,
      tokenId: token_id,
      approvalId: approval_id,
      memo: memo
    });
  }

  //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
  nft_transfer_call({
    receiver_id,
    token_id,
    approval_id,
    memo,
    msg
  }) {
    return internalNftTransferCall({
      contract: this,
      receiverId: receiver_id,
      tokenId: token_id,
      approvalId: approval_id,
      memo: memo,
      msg: msg
    });
  }

  //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
  //returns true if the token was successfully transferred to the receiver_id
  nft_resolve_transfer({
    authorized_id,
    owner_id,
    receiver_id,
    token_id,
    approved_account_ids,
    memo
  }) {
    return internalResolveTransfer({
      contract: this,
      authorizedId: authorized_id,
      ownerId: owner_id,
      receiverId: receiver_id,
      tokenId: token_id,
      approvedAccountIds: approved_account_ids,
      memo: memo
    });
  }
  /*
      APPROVALS
  */

  //check if the passed in account has access to approve the token ID
  nft_is_approved({
    token_id,
    approved_account_id,
    approval_id
  }) {
    return internalNftIsApproved({
      contract: this,
      tokenId: token_id,
      approvedAccountId: approved_account_id,
      approvalId: approval_id
    });
  }

  //approve an account ID to transfer a token on your behalf
  nft_approve({
    token_id,
    account_id,
    msg
  }) {
    return internalNftApprove({
      contract: this,
      tokenId: token_id,
      accountId: account_id,
      msg: msg
    });
  }
  /*
      ROYALTY
  */

  //calculates the payout for a token given the passed in balance. This is a view method
  nft_payout({
    token_id,
    balance,
    max_len_payout
  }) {
    return internalNftPayout({
      contract: this,
      tokenId: token_id,
      balance: balance,
      maxLenPayout: max_len_payout
    });
  }

  //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
  nft_transfer_payout({
    receiver_id,
    token_id,
    approval_id,
    memo,
    balance,
    max_len_payout
  }) {
    return internalNftTransferPayout({
      contract: this,
      receiverId: receiver_id,
      tokenId: token_id,
      approvalId: approval_id,
      memo: memo,
      balance: balance,
      maxLenPayout: max_len_payout
    });
  }

  //approve an account ID to transfer a token on your behalf
  nft_revoke({
    token_id,
    account_id
  }) {
    return internalNftRevoke({
      contract: this,
      tokenId: token_id,
      accountId: account_id
    });
  }

  //approve an account ID to transfer a token on your behalf
  nft_revoke_all({
    token_id
  }) {
    return internalNftRevokeAll({
      contract: this,
      tokenId: token_id
    });
  }
  /*
      ENUMERATION
  */

  //Query for the total supply of NFTs on the contract
  nft_total_supply() {
    return internalTotalSupply({
      contract: this
    });
  }

  //Query for nft tokens on the contract regardless of the owner using pagination
  nft_tokens({
    from_index,
    limit
  }) {
    return internalNftTokens({
      contract: this,
      fromIndex: from_index,
      limit: limit
    });
  }

  //get the total supply of NFTs for a given owner
  nft_tokens_for_owner({
    account_id,
    from_index,
    limit
  }) {
    return internalTokensForOwner({
      contract: this,
      accountId: account_id,
      fromIndex: from_index,
      limit: limit
    });
  }

  //Query for all the tokens for an owner
  nft_supply_for_owner({
    account_id
  }) {
    return internalSupplyForOwner({
      contract: this,
      accountId: account_id
    });
  }
  /*
      METADATA
  */

  //Query for all the tokens for an owner
  nft_metadata() {
    return internalNftMetadata({
      contract: this
    });
  }

}, (_applyDecoratedDescriptor(_class2.prototype, "nft_mint", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_mint"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_token", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_token"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_transfer", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_transfer"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_transfer_call", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_transfer_call"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_resolve_transfer", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_resolve_transfer"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_is_approved", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_is_approved"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_approve", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_approve"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_payout", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_payout"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_transfer_payout", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_transfer_payout"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_revoke", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_revoke"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_revoke_all", [call], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_revoke_all"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_total_supply", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_total_supply"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_tokens", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_tokens"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_tokens_for_owner", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_tokens_for_owner"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_supply_for_owner", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_supply_for_owner"), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, "nft_metadata", [view], Object.getOwnPropertyDescriptor(_class2.prototype, "nft_metadata"), _class2.prototype)), _class2)) || _class;
function init() {
  Contract._init();
}
function nft_metadata() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_metadata(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_supply_for_owner() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_supply_for_owner(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_tokens_for_owner() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_tokens_for_owner(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_tokens() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_tokens(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_total_supply() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_total_supply(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_revoke_all() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_revoke_all(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_revoke() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_revoke(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_transfer_payout() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_transfer_payout(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_payout() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_payout(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_approve() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_approve(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_is_approved() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_is_approved(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_resolve_transfer() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_resolve_transfer(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_transfer_call() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_transfer_call(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_transfer() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_transfer(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_token() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_token(args);
  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}
function nft_mint() {
  let _contract = Contract._get();

  _contract.deserialize();

  let args = _contract.constructor.deserializeArgs();

  let ret = _contract.nft_mint(args);

  _contract.serialize();

  if (ret !== undefined) env.value_return(_contract.constructor.serializeReturn(ret));
}

export { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME, init, nft_approve, nft_is_approved, nft_metadata, nft_mint, nft_payout, nft_resolve_transfer, nft_revoke, nft_revoke_all, nft_supply_for_owner, nft_token, nft_tokens, nft_tokens_for_owner, nft_total_supply, nft_transfer, nft_transfer_call, nft_transfer_payout };
//# sourceMappingURL=nft.js.map

'''
'''--- commands.txt ---
near dev-deploy build/contract.wasm -f && source ./neardev/dev-account.env && near call $CONTRACT_NAME init '{"owner_id": "'$CONTRACT_NAME'"}' --accountId $CONTRACT_NAME && near call $CONTRACT_NAME nft_mint '{"token_id": "token-1", "metadata": {"title": "My Non Fungible Team Token", "description": "The Team Most Certainly Goes :)", "media": "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif"}, "receiver_id": "'$CONTRACT_NAME'"}' --accountId $CONTRACT_NAME --amount 0.1 

near call $CONTRACT_NAME nft_transfer '{"receiver_id": "benji.fayyr.testnet", "token_id": "token-1"}' --accountId $CONTRACT_NAME --depositYocto 1
'''
'''--- jsconfig.json ---
{
    "compilerOptions": {
        "experimentalDecorators": true,
    },
    "exclude": [
        "node_modules"
    ],
}
'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1659879671058-26952029212531
'''
'''--- package-lock.json ---
{
  "name": "template",
  "version": "1.0.0",
  "lockfileVersion": 2,
  "requires": true,
  "packages": {
    "": {
      "name": "template",
      "version": "1.0.0",
      "license": "Apache-2.0",
      "dependencies": {
        "ava": "^5.1.0",
        "ava-init": "^0.3.0",
        "lodash-es": "^4.17.21",
        "near-sdk-js": "0.4.0-5",
        "near-workspaces": "^3.2.2",
        "near-workspaces-init": "^1.0.0"
      },
      "devDependencies": {
        "typescript": "^4.7.4"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.0.tgz",
      "integrity": "sha512-qRmjj8nj9qmLTQXXmaR1cck3UXSRMPrbsLJAasZpF+t3riI71BXed5ebIOYwQntykeZuhjsdweEc9BxH5Jc26w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.1.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@ampproject/remapping/node_modules/@jridgewell/gen-mapping": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.1.1.tgz",
      "integrity": "sha512-sQXCasFk+U8lWYEe66WxRDOE9PjVz4vSM51fTu3Hw+ClTpUSQb718772vH3pyS5pShp6lvQM7SxgIDXXXmOX7w==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.0",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
      "license": "MIT",
      "dependencies": {
        "@babel/highlight": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.17.10",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.17.10.tgz",
      "integrity": "sha512-GZt/TCsG70Ms19gfZO1tM4CVnXsPgEPBCpJu+Qz3L0LUDsY5nZqFZglIoPC1kIYOtNBZlrnFT+klg12vFGZXrw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.18.2.tgz",
      "integrity": "sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.1.0",
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-compilation-targets": "^7.18.2",
        "@babel/helper-module-transforms": "^7.18.0",
        "@babel/helpers": "^7.18.2",
        "@babel/parser": "^7.18.0",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.1",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.18.2.tgz",
      "integrity": "sha512-W1lG5vUwFvfMd8HVXqdfbuG7RuaSrTCCD8cl8fP8wOivdbtbIg2Db3IWUcgvfxKbbn6ZBGYRW/Zk1MIwK49mgw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.2",
        "@jridgewell/gen-mapping": "^0.3.0",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.16.7.tgz",
      "integrity": "sha512-s6t2w/IPQVTAET1HitoowRGXooX8mCgtuP5195wD/QJPV6wYjpujCGF7JuMODVX2ZAJOf1GT6DT9MHEZvLOFSw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.18.2.tgz",
      "integrity": "sha512-s1jnPotJS9uQnzFtiZVBUxe67CuBa679oWFHpxYYnTpRL/1ffhyX44R9uYiXoa/pLXcY9H2moJta0iaanlk/rQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.17.10",
        "@babel/helper-validator-option": "^7.16.7",
        "browserslist": "^4.20.2",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/@babel/helper-validator-option": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.16.7.tgz",
      "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.0.tgz",
      "integrity": "sha512-Kh8zTGR9de3J63e5nS0rQUdRs/kbtwoeQQ0sriS0lItjC96u8XXZN6lKpuyWd2coKSU13py/y+LTmThLuVX0Pg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.16.7",
        "@babel/helper-environment-visitor": "^7.16.7",
        "@babel/helper-function-name": "^7.17.9",
        "@babel/helper-member-expression-to-functions": "^7.17.7",
        "@babel/helper-optimise-call-expression": "^7.16.7",
        "@babel/helper-replace-supers": "^7.16.7",
        "@babel/helper-split-export-declaration": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-environment-visitor": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.2.tgz",
      "integrity": "sha512-14GQKWkX9oJzPiQQ7/J36FTXcD4kSp8egKjO9nINlSKiHITRA9q/R74qu8S9xlc/b/yjsJItQUeeh3xnGN0voQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-function-name": {
      "version": "7.17.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.17.9.tgz",
      "integrity": "sha512-7cRisGlVtiVqZ0MW0/yFB4atgpGLWEHUVYnb448hZK4x+vih0YO5UoS11XIYtZYqHd0dIPMdUSv8q5K4LdMnIg==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.16.7",
        "@babel/types": "^7.17.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-hoist-variables": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.16.7.tgz",
      "integrity": "sha512-m04d/0Op34H5v7pbZw6pSKP7weA6lsMvfiIAMeIvkY/R4xQtBSMFEigu9QTZ2qB/9l22vsxtM8a+Q8CzD255fg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.17.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.17.7.tgz",
      "integrity": "sha512-thxXgnQ8qQ11W2wVUObIqDL4p148VMxkt5T/qpN5k2fboRyzFGFmKsTGViquyM5QHKUy48OZoca8kw4ajaDPyw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.17.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.16.7.tgz",
      "integrity": "sha512-LVtS6TqjJHFc+nYeITRo6VLXve70xmq7wPhWTqDJusJEgGmkAACWwMiTNrvfoQo6hEhFwAIixNkvB0jPXDL8Wg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.18.0.tgz",
      "integrity": "sha512-kclUYSUBIjlvnzN2++K9f2qzYKFgjmnmjwL4zlmU5f8ZtzgWe8s0rUPSTGy2HmK4P8T52MQsS+HTQAgZd3dMEA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.16.7",
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/helper-simple-access": "^7.17.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/helper-validator-identifier": "^7.16.7",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.0",
        "@babel/types": "^7.18.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.16.7.tgz",
      "integrity": "sha512-EtgBhg7rd/JcnpZFXpBy0ze1YRfdm7BnBX4uKMBd3ixa3RGAE002JZB66FJyNH7g0F38U05pXmA5P8cBh7z+1w==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-replace-supers": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.18.2.tgz",
      "integrity": "sha512-XzAIyxx+vFnrOxiQrToSUOzUOn0e1J2Li40ntddek1Y69AXUTXoDJ40/D5RdjFu7s7qHiaeoTiempZcbuVXh2Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.18.2",
        "@babel/helper-member-expression-to-functions": "^7.17.7",
        "@babel/helper-optimise-call-expression": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-simple-access": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.18.2.tgz",
      "integrity": "sha512-7LIrjYzndorDY88MycupkpQLKS1AFfsVRm2k/9PtKScSy5tZq0McZTj+DiMRynboZfIqOKvo03pmhTaUgiD6fQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-split-export-declaration": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.16.7.tgz",
      "integrity": "sha512-xbWoy/PFoxSWazIToT9Sif+jJTlrMcndIsaOKvTA6u7QEo7ilkRZpjew18/W3c7nm8fXdUDXh02VXTbZ0pGDNw==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.18.6.tgz",
      "integrity": "sha512-XO7gESt5ouv/LRJdrVjkShckw6STTaB7l9BrpBaAHDeF5YZT+01PCwmR0SJHnkW6i8OwW/EVWRShfi4j2x+KQw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.18.2.tgz",
      "integrity": "sha512-j+d+u5xT5utcQSzrh9p+PaJX94h++KN+ng9b9WEJq7pkUPAd61FGqhjuUEdfknb3E/uDBb7ruwEeKkIxNJPIrg==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/highlight": {
      "version": "7.17.12",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.17.12.tgz",
      "integrity": "sha512-7yykMVF3hfZY2jsHZEEgLc+3x4o1O+fYyULu11GynEUQNwB6lua+IIQn1FiJxNucd5UlyJryrwsOh8PL9Sn8Qg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.3.tgz",
      "integrity": "sha512-rL50YcEuHbbauAFAysNsJA4/f89fGTOBRNs9P81sniKnKAr4xULe5AecolcsKbi88xu0ByWYDj/S1AJ3FSFuSQ==",
      "license": "MIT",
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-proposal-decorators": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.18.2.tgz",
      "integrity": "sha512-kbDISufFOxeczi0v4NQP3p5kIeW6izn/6klfWBrIIdGZZe4UpHR+QU03FAoWjGGd9SUXAwbw2pup1kaL4OQsJQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.0",
        "@babel/helper-plugin-utils": "^7.17.12",
        "@babel/helper-replace-supers": "^7.18.2",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/plugin-syntax-decorators": "^7.17.12",
        "charcodes": "^0.2.0"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-proposal-decorators/node_modules/@babel/helper-plugin-utils": {
      "version": "7.17.12",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-syntax-decorators": {
      "version": "7.17.12",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.17.12.tgz",
      "integrity": "sha512-D1Hz0qtGTza8K2xGyEdVNCYLdVHukAcbQr4K3/s6r/esadyEriZovpJimQOpu8ju4/jV8dW/1xdaE0UpDroidw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.17.12"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-decorators/node_modules/@babel/helper-plugin-utils": {
      "version": "7.17.12",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
      "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.18.6.tgz",
      "integrity": "sha512-mAWAuq4rvOepWCBid55JuRNvpTNf2UGVgoz4JV0fXEKolsVZDzsa4NqCef758WZJj/GDu0gVGItjKFiClTAmZA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript": {
      "version": "7.18.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.18.8.tgz",
      "integrity": "sha512-p2xM8HI83UObjsZGofMV/EdYjamsDm6MoN3hXPYIT0+gxIoopE+B7rPYKAxfrz9K9PK7JafTTjqYC6qipLExYA==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-typescript": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/code-frame": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.18.6.tgz",
      "integrity": "sha512-TDCmlK5eOvH+eH7cdAFlNXeVJqWIQ7gW9tY1GJIpUtFb6CmjVyq2VM3u71bOyR8CRihcCgMUYoDNyLXao3+70Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/highlight": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/generator": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.18.9.tgz",
      "integrity": "sha512-wt5Naw6lJrL1/SGkipMiFxJjtyczUWTP38deiP1PO60HsBjDeKk08CGC3S8iVuvf0FmTdgKwU1KIXzSKL1G0Ug==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.9",
        "@jridgewell/gen-mapping": "^0.3.2",
        "jsesc": "^2.5.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-annotate-as-pure": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.18.6.tgz",
      "integrity": "sha512-duORpUiYrEpzKIop6iNbjnwKLAKnJ47csTyRACyEmWj0QdUrm5aqNJGHSSEQSUAvNW0ojX0dOmK9dZduvkfeXA==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-create-class-features-plugin": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.9.tgz",
      "integrity": "sha512-WvypNAYaVh23QcjpMR24CwZY2Nz6hqdOcFdPbNpV56hL5H6KiFheO7Xm1aPdlLQ7d5emYZX7VZwPp9x3z+2opw==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-annotate-as-pure": "^7.18.6",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-function-name": "^7.18.9",
        "@babel/helper-member-expression-to-functions": "^7.18.9",
        "@babel/helper-optimise-call-expression": "^7.18.6",
        "@babel/helper-replace-supers": "^7.18.9",
        "@babel/helper-split-export-declaration": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-environment-visitor": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.9.tgz",
      "integrity": "sha512-3r/aACDJ3fhQ/EVgFy0hpj8oHyHpQc+LPtJoY9SzTThAsStm4Ptegq92vqKoE3vD706ZVFWITnMnxucw+S9Ipg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-function-name": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.18.9.tgz",
      "integrity": "sha512-fJgWlZt7nxGksJS9a0XdSaI4XvpExnNIgRP+rVefWh5U7BL8pPuir6SJUmFKRfjWQ51OtWSzwOxhaH/EBWWc0A==",
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.18.6",
        "@babel/types": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-hoist-variables": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.18.6.tgz",
      "integrity": "sha512-UlJQPkFqFULIcyW5sbzgbkxn2FKRgwWiRexcuaR8RNJRy8+LLveqPjwZV/bwrLZCN0eUHD/x8D0heK1ozuoo6Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-member-expression-to-functions": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.18.9.tgz",
      "integrity": "sha512-RxifAh2ZoVU67PyKIO4AMi1wTenGfMR/O/ae0CCRqwgBAt5v7xjdtRw7UoSbsreKrQn5t7r89eruK/9JjYHuDg==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-optimise-call-expression": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.18.6.tgz",
      "integrity": "sha512-HP59oD9/fEHQkdcbgFCnbmgH5vIQTJbxh2yf+CdM89/glUNnuzr87Q8GIjGEnOktTROemO0Pe0iPAYbqZuOUiA==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-replace-supers": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.18.9.tgz",
      "integrity": "sha512-dNsWibVI4lNT6HiuOIBr1oyxo40HvIVmbwPUm3XZ7wMh4k2WxrxTqZwSqw/eEmXDS9np0ey5M2bz9tBmO9c+YQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-member-expression-to-functions": "^7.18.9",
        "@babel/helper-optimise-call-expression": "^7.18.6",
        "@babel/traverse": "^7.18.9",
        "@babel/types": "^7.18.9"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-split-export-declaration": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.18.6.tgz",
      "integrity": "sha512-bde1etTx6ZyTmobl9LLMMQsaizFVZrquTEHOqKeQESMKo4PlObf+8+JA25ZsIpZhT/WEd39+vOdLXAFG/nELpA==",
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/helper-validator-identifier": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.18.6.tgz",
      "integrity": "sha512-MmetCkz9ej86nJQV+sFCxoGGrUbU3q02kgLciwkrt9QqEB7cP39oKEY0PakknEO0Gu20SskMRi+AYZ3b1TpN9g==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/highlight": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.18.6.tgz",
      "integrity": "sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.18.6",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/parser": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.9.tgz",
      "integrity": "sha512-9uJveS9eY9DJ0t64YbIBZICtJy8a5QrDEVdiLCG97fVLpDTpGX7t8mMSb6OWw6Lrnjqj4O8zwjELX3dhoMgiBg==",
      "license": "MIT",
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/template": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.18.6.tgz",
      "integrity": "sha512-JoDWzPe+wgBsTTgdnIma3iHNFC7YVJoPssVBDjiHfNlyt4YcunDtcDOUmfVDfCK5MfdsaIoX9PkijPhjH3nYUw==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.18.6",
        "@babel/parser": "^7.18.6",
        "@babel/types": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/traverse": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.18.9.tgz",
      "integrity": "sha512-LcPAnujXGwBgv3/WHv01pHtb2tihcyW1XuL9wd7jqh1Z8AQkTd+QVjMrMijrln0T7ED3UXLIy36P9Ao7W75rYg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.18.6",
        "@babel/generator": "^7.18.9",
        "@babel/helper-environment-visitor": "^7.18.9",
        "@babel/helper-function-name": "^7.18.9",
        "@babel/helper-hoist-variables": "^7.18.6",
        "@babel/helper-split-export-declaration": "^7.18.6",
        "@babel/parser": "^7.18.9",
        "@babel/types": "^7.18.9",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@babel/types": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.9.tgz",
      "integrity": "sha512-WwMLAg2MvJmt/rKEVQBBhIVffMmnilX4oe0sRe7iPOHIGsqpruFHHdrfj4O1CMMtgMtCU4oPafZjDPCRgO57Wg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.18.6",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.2.tgz",
      "integrity": "sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.1",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-transform-typescript/node_modules/@jridgewell/set-array": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
      "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/preset-typescript": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.18.6.tgz",
      "integrity": "sha512-s9ik86kXBAnD760aybBucdpnLsAt0jK1xqJn2juOn9lkOvSHV60os5hxoVJsPzMQxvnUJFAlkont2DvvaYEBtQ==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/helper-validator-option": "^7.18.6",
        "@babel/plugin-transform-typescript": "^7.18.6"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.16.7.tgz",
      "integrity": "sha512-I8j/x8kHUrbYRTUxXrrMbfCa7jxkE7tZre39x3kjr9hvI82cK1FfqLygotcWN5kdPGWcLdWMHpSBavse5tWw3w==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.7",
        "@babel/parser": "^7.16.7",
        "@babel/types": "^7.16.7"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.18.2.tgz",
      "integrity": "sha512-9eNwoeovJ6KH9zcCNnENY7DMFwTU9JdGCFtqNLfUAqtUHRCOsTOqWoffosP8vKmNYeSBUv3yVJXjfd8ucwOjUA==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-environment-visitor": "^7.18.2",
        "@babel/helper-function-name": "^7.17.9",
        "@babel/helper-hoist-variables": "^7.16.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/parser": "^7.18.0",
        "@babel/types": "^7.18.2",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/types": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.2.tgz",
      "integrity": "sha512-0On6B8A4/+mFUto5WERt3EEuG1NznDirvwca1O8UwXQHVY8g3R7OzYgxXdOfMwLO08UrpUD/2+3Bclyq+/C94Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "to-fast-properties": "^2.0.0"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.1.tgz",
      "integrity": "sha512-GcHwniMlA2z+WFPWuY8lp3fsza0I8xPFMWL5+n8LYyP6PSvPrXf4+n8stDHZY2DM0zy9sVkRDy1jDI4XGzYVqg==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/set-array": "^1.0.0",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.0.7.tgz",
      "integrity": "sha512-8cXDaBBHOr2pQ7j77Y6Vp5VDT2sIqWyWQ56TjEq4ih/a4iST3dItRe8Q9fp0rrIl9DoKhWQtUQz/YpOxLkXbNA==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/set-array": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.1.tgz",
      "integrity": "sha512-Ct5MqZkLGEXTVmQYbGtx9SVqD2fqwvdubdps5D3djjAkgkKwT918VNOz65pEHFaYTeWcukmJmH5SwsA9Tn2ObQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.4.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.13.tgz",
      "integrity": "sha512-GryiOJmNcWbovBxTfZSF71V/mXbgcV3MewDe3kIMCLyIh5e7SKAeUZs+rMnJ8jkMolZ/4/VsdBmMrw3l+VdZ3w==",
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.13.tgz",
      "integrity": "sha512-o1xbKhp9qnIAoHJSWd6KlCZfqslL4valSF81H8ImioOAxluWYWOpWkpyktY2vnt4tbrX9XYaxovq6cgowaJp2w==",
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "node_modules/@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0",
        "@types/babel__core": "^7.1.9",
        "rollup": "^1.20.0||^2.0.0"
      },
      "peerDependenciesMeta": {
        "@types/babel__core": {
          "optional": true
        }
      }
    },
    "node_modules/@rollup/plugin-commonjs": {
      "version": "21.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-21.1.0.tgz",
      "integrity": "sha512-6ZtHx3VHIp2ReNNDxHjuUml6ur+WcQ28N1yHgCQwsbNkQg2suhxGMDQGJOn/KuDxKtd1xuZP5xSTwBA4GQ8hbA==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "commondir": "^1.0.1",
        "estree-walker": "^2.0.1",
        "glob": "^7.1.6",
        "is-reference": "^1.2.1",
        "magic-string": "^0.25.7",
        "resolve": "^1.17.0"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.38.3"
      }
    },
    "node_modules/@rollup/plugin-node-resolve": {
      "version": "13.3.0",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-13.3.0.tgz",
      "integrity": "sha512-Lus8rbUo1eEcnS4yTFKLZrVumLPY+YayBdWXgFSHYhTT2iJbMhoaaBL3xl5NCdeRytErGr8tZ0L71BMRmnlwSw==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.1.0",
        "@types/resolve": "1.17.1",
        "deepmerge": "^4.2.2",
        "is-builtin-module": "^3.1.0",
        "is-module": "^1.0.0",
        "resolve": "^1.19.0"
      },
      "engines": {
        "node": ">= 10.0.0"
      },
      "peerDependencies": {
        "rollup": "^2.42.0"
      }
    },
    "node_modules/@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "engines": {
        "node": ">= 8.0.0"
      },
      "peerDependencies": {
        "rollup": "^1.20.0||^2.0.0"
      }
    },
    "node_modules/@rollup/pluginutils/node_modules/@types/estree": {
      "version": "0.0.39",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
      "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw==",
      "license": "MIT"
    },
    "node_modules/@rollup/pluginutils/node_modules/estree-walker": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
      "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg==",
      "license": "MIT"
    },
    "node_modules/@sindresorhus/is": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
      "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/is?sponsor=1"
      }
    },
    "node_modules/@szmarczak/http-timer": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
      "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
      "dependencies": {
        "defer-to-connect": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@types/cacheable-request": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
      "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
      "dependencies": {
        "@types/http-cache-semantics": "*",
        "@types/keyv": "^3.1.4",
        "@types/node": "*",
        "@types/responselike": "^1.0.0"
      }
    },
    "node_modules/@types/estree": {
      "version": "0.0.51",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.51.tgz",
      "integrity": "sha512-CuPgU6f3eT/XgKKPqKd/gLZV1Xmvf1a2R5POBOGQa6uv82xpls89HU5zKeVoyR8XzHd1RGNOlQlvUe3CFkjWNQ==",
      "license": "MIT"
    },
    "node_modules/@types/http-cache-semantics": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz",
      "integrity": "sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ=="
    },
    "node_modules/@types/keyv": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
      "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/node": {
      "version": "17.0.35",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-17.0.35.tgz",
      "integrity": "sha512-vu1SrqBjbbZ3J6vwY17jBs8Sr/BKA+/a/WtjRG+whKg1iuLFOosq872EXS0eXWILdO36DHQQeku/ZcL6hz2fpg==",
      "license": "MIT"
    },
    "node_modules/@types/resolve": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
      "integrity": "sha512-yy7HuzQhj0dhGpD8RLXSZWEkLsV9ibvxvi6EiJ3bkqLAO1RGo0WbkWQiwpRlSFymTJRz0d3k5LM3kkx8ArDbLw==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/responselike": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.0.tgz",
      "integrity": "sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/acorn": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.1.tgz",
      "integrity": "sha512-7zFpHzhnqYKrkYdUjF1HI1bzd0VygEGX8lFk4k5zVMqHEoES+P+7TKI+EvLO9WVMJ8eekdO0aDEK044xTXwPPA==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/aggregate-error": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-4.0.1.tgz",
      "integrity": "sha512-0poP0T7el6Vq3rstR8Mn4V/IQrpBLO6POkUSrN7RhyY+GF/InCFShQzsQ39T25gkHhLgSLByyAz+Kjb+c2L98w==",
      "license": "MIT",
      "dependencies": {
        "clean-stack": "^4.0.0",
        "indent-string": "^5.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/arr-exclude": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/arr-exclude/-/arr-exclude-1.0.0.tgz",
      "integrity": "sha512-TiXbMMkPQNfoHcVi6jeU6IejGAFlcn0hYgVVe7tCiqL/ZtxbNkhDSMarUQjg/PAe9NQNvRd6YCVNutzo3Fxdug==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/array-find-index": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
      "integrity": "sha512-M1HQyIXcBGtVywBt8WVdim+lrNaK7VHp99Qt5pSNziXznKHViIBbXWtfRTpEFpF/c4FdfxNAsCCwPp5phBYJtw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/arrgv": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/arrgv/-/arrgv-1.0.2.tgz",
      "integrity": "sha512-a4eg4yhp7mmruZDQFqVMlxNRFGi/i1r87pt8SDHy0/I8PqSXoUTlWZRdAZo0VXgvEARcujbtTk8kiZRi1uDGRw==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/arrify": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-3.0.0.tgz",
      "integrity": "sha512-tLkvA81vQG/XqE2mjDkGQHoOINtMHtysSnemrmoGe6PydDPMRbVugqyk4A6V/WDWEfm3l+0d8anA9r8cv/5Jaw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/atob": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/atob/-/atob-2.1.2.tgz",
      "integrity": "sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg==",
      "license": "(MIT OR Apache-2.0)",
      "bin": {
        "atob": "bin/atob.js"
      },
      "engines": {
        "node": ">= 4.5.0"
      }
    },
    "node_modules/ava": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ava/-/ava-5.1.0.tgz",
      "integrity": "sha512-e5VFrSQ0WBPyZJWRXVrO7RFOizFeNM0t2PORwrPvWtApgkORI6cvGnY3GX1G+lzpd0HjqNx5Jus22AhxVnUMNA==",
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.8.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.1.2",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.6.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.2",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.0",
        "yargs": "^17.6.2"
      },
      "bin": {
        "ava": "entrypoints/cli.mjs"
      },
      "engines": {
        "node": ">=14.19 <15 || >=16.15 <17 || >=18"
      },
      "peerDependencies": {
        "@ava/typescript": "*"
      },
      "peerDependenciesMeta": {
        "@ava/typescript": {
          "optional": true
        }
      }
    },
    "node_modules/ava-init": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/ava-init/-/ava-init-0.3.0.tgz",
      "integrity": "sha512-NiDhxQtLaLy7AjrT4kkHUl/suLnuPR0nZNgisf9SkNGR3qSIFNCCNZcr87K7LWbt2hfHwjFwh+WU9zJTI+c4HQ==",
      "license": "MIT",
      "dependencies": {
        "arr-exclude": "^1.0.0",
        "execa": "^0.7.0",
        "has-yarn": "^1.0.0",
        "read-pkg-up": "^2.0.0",
        "write-pkg": "^3.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/ava/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/ava/node_modules/chalk": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.2.0.tgz",
      "integrity": "sha512-ree3Gqw/nazQAPuJJEy+avdl7QfZMcUvmHIKgEZkGL+xOBzRvup5Hxo6LHuMceSxOabuJLJm5Yp/92R9eMmMvA==",
      "license": "MIT",
      "engines": {
        "node": "^12.17.0 || ^14.13 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/ava/node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ava/node_modules/cliui/node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ava/node_modules/cliui/node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ava/node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ava/node_modules/strip-ansi": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
      "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/ava/node_modules/yargs": {
      "version": "17.6.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.6.2.tgz",
      "integrity": "sha512-1/9UrdHjDZc0eOU0HxOHoS78C69UD3JRMvzlJ7S79S2nTaWRA/whGCTV8o9e/N/1Va9YIV7Q4sOxD8VV4pCWOw==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/ava/node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/base64url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
      "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A==",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/blueimp-md5": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
      "integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w==",
      "license": "MIT"
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "node_modules/borsh": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.5.0.tgz",
      "integrity": "sha512-p9w/qGBeeFdUf2GPBPHdX5JQyez8K5VtoFN7PqSfmR+cVUMSmcwAKhP9n2aXoDSKbtS7xZlZt3MVnrJL7GdYhg==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.20.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.20.3.tgz",
      "integrity": "sha512-NBhymBQl1zM0Y5dQT/O+xiLP9/rzOIQdKM/eMJBAq7yBgaB6krIYLGejrwVYnSHZdqjscB1SPuAjHwxjvN6Wdg==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001332",
        "electron-to-chromium": "^1.4.118",
        "escalade": "^3.1.1",
        "node-releases": "^2.0.3",
        "picocolors": "^1.0.0"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cacheable-lookup": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
      "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA==",
      "engines": {
        "node": ">=10.6.0"
      }
    },
    "node_modules/cacheable-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.2.tgz",
      "integrity": "sha512-pouW8/FmiPQbuGpkXQ9BAPv/Mo5xDGANgSNXzTzJ8DrKGuXOssM4wIQRjfanNRh3Yu5cfYPvcorqbhg2KIJtew==",
      "dependencies": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^4.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^6.0.1",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cacheable-request/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/callsites": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-4.0.0.tgz",
      "integrity": "sha512-y3jRROutgpKdz5vzEhWM34TidDU8vkJppF8dszITeb1PQmSqV3DTxyV8G/lyO/DNvtE1YTedehmw9MPZsCBHxQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001343",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001343.tgz",
      "integrity": "sha512-8KeCrAtPMabo/XW14B+R9sZYoClx1n0b+WYgwDKZPtWR3TcdvWzdSy7mPyFEmR5WU1St9v1PW6sdO5dkFOEzfA==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "node_modules/cbor": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/cbor/-/cbor-8.1.0.tgz",
      "integrity": "sha512-DwGjNW9omn6EwP70aXsn7FQJx5kO12tX0bZkaTjzdVFM6/7nhA4t0EENocKGx6D2Bch9PE2KzCUf5SceBdeijg==",
      "license": "MIT",
      "dependencies": {
        "nofilter": "^3.1.0"
      },
      "engines": {
        "node": ">=12.19"
      }
    },
    "node_modules/chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chalk/node_modules/ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^1.9.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/chalk/node_modules/escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ=",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/charcodes": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/charcodes/-/charcodes-0.2.0.tgz",
      "integrity": "sha512-Y4kiDb+AM4Ecy58YkuZrrSRJBDQdQ2L+NyS1vHHFtNtUjgutcZfx3yp1dAONI/oPaPmyGfCLx5CxL+zauIMyKQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "funding": [
        {
          "type": "individual",
          "url": "https://paulmillr.com/funding/"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chunkd": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/chunkd/-/chunkd-2.0.1.tgz",
      "integrity": "sha512-7d58XsFmOq0j6el67Ug9mHf9ELUXsQXYJBkyxhH/k+6Ke0qXRnv0kbemx+Twc6fRJ07C49lcbdgm9FL1Ei/6SQ==",
      "license": "MIT"
    },
    "node_modules/ci-info": {
      "version": "3.7.1",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.7.1.tgz",
      "integrity": "sha512-4jYS4MOAaCIStSRwiuxc4B8MYhIe676yO1sYGzARnjXkWpmzZMMYxY6zu8WYWDhSuth5zhrQ1rhNSibyyvv4/w==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ci-parallel-vars": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ci-parallel-vars/-/ci-parallel-vars-1.0.1.tgz",
      "integrity": "sha512-uvzpYrpmidaoxvIQHM+rKSrigjOe9feHYbw4uOI2gdfe1C3xIlxO+kVXq83WQWNniTf8bAxVpy+cQeFQsMERKg==",
      "license": "MIT"
    },
    "node_modules/clean-stack": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-4.2.0.tgz",
      "integrity": "sha512-LYv6XPxoyODi36Dp976riBtSY27VmFo+MKqEU9QCCWyTrdEPDog+RWA7xQWHi6Vbp61j5c4cdzzX1NidnwtUWg==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "5.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/clean-yaml-object": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/clean-yaml-object/-/clean-yaml-object-0.1.0.tgz",
      "integrity": "sha512-3yONmlN9CSAkzNwnRCiJQ7Q2xK5mWuEfL3PuTZcAUzhObbXsfsnMptJzXwz93nc5zn9V9TwCVMmV7w4xsm43dw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/cli-truncate": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-3.1.0.tgz",
      "integrity": "sha512-wfOBkjXteqSnI59oPcJkcPl/ZmwvMMOj340qUIY1SKZCv0B9Cf4D4fAucRkIKQmsIuYK3x1rrgU7MeGRruiuiA==",
      "license": "MIT",
      "dependencies": {
        "slice-ansi": "^5.0.0",
        "string-width": "^5.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-truncate/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/cli-truncate/node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "license": "MIT"
    },
    "node_modules/cli-truncate/node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/cli-truncate/node_modules/strip-ansi": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
      "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "node_modules/clone-response": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
      "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
      "dependencies": {
        "mimic-response": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/code-excerpt": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-4.0.0.tgz",
      "integrity": "sha512-xxodCmBen3iy2i0WtAK8FlFNrRzjUqjRsMfho58xT/wvZU1YTM3fCnRjcy1gJPMepaRlgm/0e6w8SpWHpn3/cA==",
      "license": "MIT",
      "dependencies": {
        "convert-to-spaces": "^2.0.1"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      }
    },
    "node_modules/color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "license": "MIT",
      "dependencies": {
        "color-name": "1.1.3"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
      "license": "MIT"
    },
    "node_modules/common-path-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/common-path-prefix/-/common-path-prefix-3.0.0.tgz",
      "integrity": "sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w==",
      "license": "ISC"
    },
    "node_modules/commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha1-3dgA2gxmEnOTzKWVDqloo6rxJTs=",
      "license": "MIT"
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
      "license": "MIT"
    },
    "node_modules/concordance": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
      "integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
      "license": "ISC",
      "dependencies": {
        "date-time": "^3.1.0",
        "esutils": "^2.0.3",
        "fast-diff": "^1.2.0",
        "js-string-escape": "^1.0.1",
        "lodash": "^4.17.15",
        "md5-hex": "^3.0.1",
        "semver": "^7.3.2",
        "well-known-symbols": "^2.0.0"
      },
      "engines": {
        "node": ">=10.18.0 <11 || >=12.14.0 <13 || >=14"
      }
    },
    "node_modules/concordance/node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/concordance/node_modules/semver": {
      "version": "7.3.8",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
      "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/concordance/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/convert-source-map": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.8.0.tgz",
      "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.1"
      }
    },
    "node_modules/convert-to-spaces": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-2.0.1.tgz",
      "integrity": "sha512-rcQ1bsQO9799wq24uE5AM2tAILy4gXGIK/njFWcVQkGNZ96edlpY+A7bjwvzjYvLDyzmG1MmMLZhpcsb+klNMQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-5.1.0.tgz",
      "integrity": "sha512-pTgQJ5KC0d2hcY8eyL1IzlBPYjTkyH72XRZPnLyKus2mBfNjQs3klqbJU2VILqZryAZUt9JOb3h/mWMy23/f5A==",
      "license": "MIT",
      "dependencies": {
        "lru-cache": "^4.0.1",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      }
    },
    "node_modules/currently-unhandled": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz",
      "integrity": "sha512-/fITjgjGU50vjQ4FH6eUoYu+iUoUKIXws2hL15JJpIR+BbTxaXQsMuuyjtNh2WqsSBS5nsaZHFsFecyw5CCAng==",
      "license": "MIT",
      "dependencies": {
        "array-find-index": "^1.0.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/date-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
      "integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
      "license": "MIT",
      "dependencies": {
        "time-zone": "^1.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/debug/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/decode-uri-component": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz",
      "integrity": "sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU=",
      "license": "MIT",
      "engines": {
        "node": ">=0.10"
      }
    },
    "node_modules/decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "dependencies": {
        "mimic-response": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/decompress-response/node_modules/mimic-response": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
      "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/deepmerge": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.2.2.tgz",
      "integrity": "sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/defer-to-connect": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
      "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg==",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/del": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/del/-/del-7.0.0.tgz",
      "integrity": "sha512-tQbV/4u5WVB8HMJr08pgw0b6nG4RGt/tj+7Numvq+zqcvUFeMaIWWOUFltiU+6go8BSO2/ogsB4EasDaj0y68Q==",
      "license": "MIT",
      "dependencies": {
        "globby": "^13.1.2",
        "graceful-fs": "^4.2.10",
        "is-glob": "^4.0.3",
        "is-path-cwd": "^3.0.0",
        "is-path-inside": "^4.0.0",
        "p-map": "^5.5.0",
        "rimraf": "^3.0.2",
        "slash": "^4.0.0"
      },
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/detect-indent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-5.0.0.tgz",
      "integrity": "sha512-rlpvsxUtM0PQvy9iZe640/IWwWYyBsTApREbA1pHOpmOUIl9MkP/U4z7vTtg4Oaojvqhxt7sdufnT0EzGaR31g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "license": "MIT",
      "dependencies": {
        "path-type": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/dir-glob/node_modules/path-type": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
      "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.4.139",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.139.tgz",
      "integrity": "sha512-lYxzcUCjWxxVug+A7UxBCUiVr13TCjfZFYJS9Lq1VpU/ErwV4a6zUQo9dfojuGpw/L/x9REGuBl6ICQPGgbs3g==",
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-1.0.1.tgz",
      "integrity": "sha512-2ID6FdrMD9KDLldGesP6317G78K7km/kMcwItRtVFva7I/cSEOIaLpewaUb+YLXVwdAp3Ctfxh/V5zIl1sj7dQ==",
      "license": "MIT",
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w==",
      "license": "MIT"
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/execa": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/execa/-/execa-0.7.0.tgz",
      "integrity": "sha512-RztN09XglpYI7aBBrJCPW95jEH7YF1UEPOoX9yDhUTPdp7mK+CQvnLTuD10BNXZ3byLTu2uehZ8EcKT/4CGiFw==",
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^5.0.1",
        "get-stream": "^3.0.0",
        "is-stream": "^1.1.0",
        "npm-run-path": "^2.0.0",
        "p-finally": "^1.0.0",
        "signal-exit": "^3.0.0",
        "strip-eof": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/fast-diff": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
      "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
      "license": "Apache-2.0"
    },
    "node_modules/fast-glob": {
      "version": "3.2.12",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
      "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
      "license": "MIT",
      "dependencies": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      },
      "engines": {
        "node": ">=8.6.0"
      }
    },
    "node_modules/fastq": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.15.0.tgz",
      "integrity": "sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==",
      "license": "ISC",
      "dependencies": {
        "reusify": "^1.0.4"
      }
    },
    "node_modules/figures": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-5.0.0.tgz",
      "integrity": "sha512-ej8ksPF4x6e5wvK9yevct0UCXh8TTFlWGVLlgjZuoBH1HwjIfKE/IdL5mq89sFA7zELi1VhKpmtDnrs7zWyeyg==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^5.0.0",
        "is-unicode-supported": "^1.2.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/find-up": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz",
      "integrity": "sha512-NWzkk0jSJtTt08+FBFMvXoeZnOJD+jTtsRmBYbAIzJdX6l7dLgR7CTubCM5/eDdPUBvLCeVasP1brfVR/9/EZQ==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "dependencies": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs-minipass/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/fs-minipass/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "license": "ISC"
    },
    "node_modules/function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A==",
      "license": "MIT"
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-stream": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz",
      "integrity": "sha512-GlhdIUuVakc8SJ6kK0zAFbiGzRFzNnY4jUuEbV9UROo4Y+0Ny4fjvcZFVTeDA4odpFyOQzaw6hXukJSq/f28sQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/globby": {
      "version": "13.1.3",
      "resolved": "https://registry.npmjs.org/globby/-/globby-13.1.3.tgz",
      "integrity": "sha512-8krCNHXvlCgHDpegPzleMq07yMYTO2sXKASmZmquEYWEmCx6J5UTRbp5RwMJkTJGtcQ44YpiUYUiN0b9mzy8Bw==",
      "license": "MIT",
      "dependencies": {
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.11",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/got": {
      "version": "11.8.6",
      "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
      "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
      "dependencies": {
        "@sindresorhus/is": "^4.0.0",
        "@szmarczak/http-timer": "^4.0.5",
        "@types/cacheable-request": "^6.0.1",
        "@types/responselike": "^1.0.0",
        "cacheable-lookup": "^5.0.3",
        "cacheable-request": "^7.0.2",
        "decompress-response": "^6.0.0",
        "http2-wrapper": "^1.0.0-beta.5.2",
        "lowercase-keys": "^2.0.0",
        "p-cancelable": "^2.0.0",
        "responselike": "^2.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/got?sponsor=1"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.10",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
      "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA==",
      "license": "ISC"
    },
    "node_modules/has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.1"
      },
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-yarn": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-1.0.0.tgz",
      "integrity": "sha512-UAI4b48aqrdez88CwMfC9s+gcJ25O1qg0/hS5eKOsIF5tOw2EYcgGsryYF6TEI5G8SeCYzFBt5Z04D/BDABYSQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw==",
      "license": "ISC"
    },
    "node_modules/http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http2-wrapper": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
      "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
      "dependencies": {
        "quick-lru": "^5.1.1",
        "resolve-alpn": "^1.0.0"
      },
      "engines": {
        "node": ">=10.19.0"
      }
    },
    "node_modules/ignore": {
      "version": "5.2.4",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
      "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/ignore-by-default": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-2.1.0.tgz",
      "integrity": "sha512-yiWd4GVmJp0Q6ghmM2B/V3oZGRmjrKLXvHR3TE1nfoXsmoggllfZUQe74EN0fJdPFZu2NIvNdrMMLm3OsV7Ohw==",
      "license": "ISC",
      "engines": {
        "node": ">=10 <11 || >=12 <13 || >=14"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-5.0.0.tgz",
      "integrity": "sha512-m6FAo/spmsW2Ab2fU35JTYwtOKa2yAwXSwgjSv1TJzh4Mh7mC3lzAOVLBprb72XsTrgkEIsl7YrFNAiDiRhIGg==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/irregular-plurals": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/irregular-plurals/-/irregular-plurals-3.3.0.tgz",
      "integrity": "sha512-MVBLKUTangM3EfRPFROhmWQQKRDsrgI83J8GS3jXy+OwYqiR2/aoWndYQ5416jLE3uaGgLH7ncme3X9y09gZ3g==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-builtin-module": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-3.1.0.tgz",
      "integrity": "sha512-OV7JjAgOTfAFJmHZLvpSTb4qi0nIILDV1gWPYDnDJUTNFM5aGlRAhk4QcT8i7TuAleeEV5Fdkqn3t4mS+Q11fg==",
      "license": "MIT",
      "dependencies": {
        "builtin-modules": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
      "license": "MIT",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-error": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/is-error/-/is-error-2.2.2.tgz",
      "integrity": "sha512-IOQqts/aHWbiisY5DuPJQ0gcbvaLFCa7fBa9xoLfxBZvQ+ZI/Zh9xoI7Gk+G64N0FdK4AbibytHht2tWgpJWLg==",
      "license": "MIT"
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha1-Mlj7afeMFNW4FdZkM2tM/7ZEFZE=",
      "license": "MIT"
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-path-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-3.0.0.tgz",
      "integrity": "sha512-kyiNFFLU0Ampr6SDZitD/DwUo4Zs1nSdnygUBqsu3LooL00Qvb5j+UnvApUn/TTj1J3OuE6BTdQ5rudKmU2ZaA==",
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-path-inside": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-4.0.0.tgz",
      "integrity": "sha512-lJJV/5dYS+RcL8uQdBDW9c9uWFLLBNRyFhnAKXw5tVqLlKZ4RMGZKv+YQ/IA3OhD+RpbJa1LLFM1FQPGyIXvOA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-plain-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz",
      "integrity": "sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-plain-object": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
      "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ==",
      "license": "MIT"
    },
    "node_modules/is-reference": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-reference/-/is-reference-1.2.1.tgz",
      "integrity": "sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==",
      "license": "MIT",
      "dependencies": {
        "@types/estree": "*"
      }
    },
    "node_modules/is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha512-uQPm8kcs47jx38atAcWTVxyltQYoPT68y9aWYdV6yWXSyW8mzSat0TL6CiWdZeCdF3KrAvpVtnHbTv4RN+rqdQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-unicode-supported": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC"
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "node_modules/js-string-escape": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
      "integrity": "sha512-Smw4xcfIQ5LVjAOuJCvN/zIodzA/BBSsluuoSykP+lUvScIi4U6RJLfwHet5cxFnCswUjISV8oAXaqaJDY3chg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA==",
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ=="
    },
    "node_modules/json5": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.1.tgz",
      "integrity": "sha512-1hqLFMSrGHRHxav9q9gNjJ5EXznIxGVO09xQRrwplcS8qs28pZ8s8hupZAmqDwZUmVZ2Qb2jnyPOWcDH8m8dlA==",
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "dependencies": {
        "universalify": "^2.0.0"
      },
      "optionalDependencies": {
        "graceful-fs": "^4.1.6"
      }
    },
    "node_modules/keyv": {
      "version": "4.5.2",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.2.tgz",
      "integrity": "sha512-5MHbFaKn8cNSmVW7BYnijeAVlE4cYA/SVkifVgrh7yotnfhKmjuXpDKjrABLnT0SfHWV21P8ow07OGfRrNDg8g==",
      "dependencies": {
        "json-buffer": "3.0.1"
      }
    },
    "node_modules/load-json-file": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-7.0.1.tgz",
      "integrity": "sha512-Gnxj3ev3mB5TkVBGad0JM6dmLiQL+o0t23JPBZ9sd+yvSLk05mFoqKBw5N8gbbkU4TNXyqCgIrl/VM17OgUIgQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/locate-path": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz",
      "integrity": "sha512-NCI2kiDkyR7VeEKm27Kda/iQHyKJe1Bu0FlTbYp3CqJu+9IFe9bLyAjMxf5ZDDbEg+iMPzB5zYyUTSm8wVTKmA==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^2.0.0",
        "path-exists": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/locate-path/node_modules/path-exists": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
      "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash-es": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash-es/-/lodash-es-4.17.21.tgz",
      "integrity": "sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw==",
      "license": "MIT"
    },
    "node_modules/lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lru-cache": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
      "license": "ISC",
      "dependencies": {
        "pseudomap": "^1.0.2",
        "yallist": "^2.1.2"
      }
    },
    "node_modules/magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "license": "MIT",
      "dependencies": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "node_modules/make-dir": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-1.3.0.tgz",
      "integrity": "sha512-2w31R7SJtieJJnQtGc7RVL2StM2vGYVfqUOvUDxH6bC6aJTxPxTF0GnIgCyu7tjockiUWAYQRbxa7vKn34s5sQ==",
      "license": "MIT",
      "dependencies": {
        "pify": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/make-dir/node_modules/pify": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
      "integrity": "sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/map-age-cleaner": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
      "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
      "license": "MIT",
      "dependencies": {
        "p-defer": "^1.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/matcher": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/matcher/-/matcher-5.0.0.tgz",
      "integrity": "sha512-s2EMBOWtXFc8dgqvoAzKJXxNHibcdJMV0gwqKUaw9E2JBJuGUK7DrNKrA6g/i+v72TT16+6sVm5mS3thaMLQUw==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^5.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/md5-hex": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
      "integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
      "license": "MIT",
      "dependencies": {
        "blueimp-md5": "^2.10.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/mem": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/mem/-/mem-9.0.2.tgz",
      "integrity": "sha512-F2t4YIv9XQUBHt6AOJ0y7lSmP1+cY7Fm1DRh9GClTGzKST7UWLMx6ly9WZdLH/G/ppM5RL4MlQfRT71ri9t19A==",
      "license": "MIT",
      "dependencies": {
        "map-age-cleaner": "^0.1.3",
        "mimic-fn": "^4.0.0"
      },
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/mem?sponsor=1"
      }
    },
    "node_modules/merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg==",
      "license": "MIT",
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ==",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minipass": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-4.0.0.tgz",
      "integrity": "sha512-g2Uuh2jEKoht+zvO6vJqXmYpflPqzRBT+Th2h01DKh5z7wbY/AZ2gCQ78cP70YoHPyFdY30YBV5WxgLOEwOykw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minizlib/node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "dependencies": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/bn.js": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
      "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
    },
    "node_modules/near-api-js/node_modules/borsh": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
      "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/near-sandbox": {
      "version": "0.0.14",
      "resolved": "https://registry.npmjs.org/near-sandbox/-/near-sandbox-0.0.14.tgz",
      "integrity": "sha512-wQ1jcD6W6U4V83D0Zxgi2qedMkmTh5iiqm2t/oriKR4rrTql/j8QR/Ip/NfoIH/plFT+vGungKL+B4HxfNyyNg==",
      "hasInstallScript": true,
      "dependencies": {
        "got": "^11.8.2",
        "tar": "^6.1.0"
      },
      "bin": {
        "near-sandbox": "run.js",
        "sandbox": "run.js"
      }
    },
    "node_modules/near-sdk-js": {
      "version": "0.4.0-5",
      "resolved": "https://registry.npmjs.org/near-sdk-js/-/near-sdk-js-0.4.0-5.tgz",
      "integrity": "sha512-lOQDc61vf4QvM2BJkaVJcRY21l4K46xKJXJbdKanqi/WCYnKLV5i0UUbJ4sjOcScS1BHZyitLWaAdLGCCzYniQ==",
      "hasInstallScript": true,
      "license": "(MIT AND Apache-2.0)",
      "dependencies": {
        "@babel/core": "^7.17.5",
        "@babel/plugin-proposal-decorators": "^7.17.2",
        "@babel/preset-typescript": "^7.18.6",
        "@rollup/plugin-babel": "^5.3.1",
        "@rollup/plugin-commonjs": "^21.0.1",
        "@rollup/plugin-node-resolve": "^13.1.1",
        "rollup": "^2.61.1",
        "rollup-plugin-sourcemaps": "^0.6.3",
        "yargs": "^17.5.1"
      },
      "bin": {
        "near-sdk-js": "cli/cli.js"
      }
    },
    "node_modules/near-units": {
      "version": "0.1.9",
      "resolved": "https://registry.npmjs.org/near-units/-/near-units-0.1.9.tgz",
      "integrity": "sha512-xiuBjpNsi+ywiu7P6iWRZdgFm7iCr/cfWlVO6+e5uaAqH4mE1rrurElyrL91llNDSnMwogd9XmlZOw5KbbHNsA==",
      "dependencies": {
        "bn.js": "^5.2.0"
      },
      "bin": {
        "near-units": "dist/cli.js"
      }
    },
    "node_modules/near-workspaces": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/near-workspaces/-/near-workspaces-3.2.2.tgz",
      "integrity": "sha512-Y26FyPccs3lTKFpOzeWQy5urtSe0hcdME4ePbidzHNQPOXCub06htnvsoVEUNGVejc50f5nVHcdCiYO8mtEdTA==",
      "hasInstallScript": true,
      "dependencies": {
        "base64url": "^3.0.1",
        "bn.js": "^5.2.0",
        "borsh": "^0.5.0",
        "bs58": "^4.0.1",
        "callsites": "^4.0.0",
        "fs-extra": "^10.0.0",
        "js-sha256": "^0.9.0",
        "near-api-js": "^0.44.1",
        "near-sandbox": "^0.0.14",
        "near-units": "^0.1.9",
        "node-port-check": "^2.0.1",
        "promisify-child-process": "^4.1.1",
        "pure-uuid": "^1.6.2",
        "rimraf": "^3.0.2",
        "temp-dir": "^2.0.0"
      },
      "engines": {
        "node": ">= 14.0.0",
        "npm": ">= 6.0.0"
      }
    },
    "node_modules/near-workspaces-init": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/near-workspaces-init/-/near-workspaces-init-1.0.0.tgz",
      "integrity": "sha512-ADM95br/OCsYvfptzBK4pmEnCFa8Jj//KRImxz5ZgTWJJa+omQbVnYRwKXH6n08gMCbSIHWrbB09nglH+VB0Ew==",
      "dependencies": {
        "fs-extra": "^10.0.0"
      },
      "bin": {
        "near-workspaces-init": "scripts/cli.js"
      },
      "engines": {
        "node": ">= 14.0.0",
        "npm": ">= 6.0.0"
      }
    },
    "node_modules/near-workspaces/node_modules/temp-dir": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
      "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-port-check": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/node-port-check/-/node-port-check-2.0.1.tgz",
      "integrity": "sha512-PV1tj5OPbWwxvhPcChXxwCIKl/IfVEdPP4u/gQz2lao/VGoeIUXb/4U72KSHLZpTVBmgTnMm0me7yR0wUsIuPg=="
    },
    "node_modules/node-releases": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.5.tgz",
      "integrity": "sha512-U9h1NLROZTq9uE1SNffn6WuPDg8icmi3ns4rEl/oTfIle4iLjTliCzgTsbaIFMq/Xn078/lfY/BL0GWZ+psK4Q==",
      "license": "MIT"
    },
    "node_modules/nofilter": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/nofilter/-/nofilter-3.1.0.tgz",
      "integrity": "sha512-l2NNj07e9afPnhAhvgVrCD/oy2Ai1yfLpuo3EpiO1jFTsB4sFz6oIfAfSZyQzVpkZQ9xS8ZS5g1jCBgq4Hwo0g==",
      "license": "MIT",
      "engines": {
        "node": ">=12.19"
      }
    },
    "node_modules/normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      }
    },
    "node_modules/normalize-package-data/node_modules/is-core-module": {
      "version": "2.11.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.11.0.tgz",
      "integrity": "sha512-RRjxlvLDkD1YJwDbroBHMb+cukurkDWNyHx7D3oNB5x9rb5ogcksMC5wHCadcXoo67gVr/+3GFySh3134zi6rw==",
      "license": "MIT",
      "dependencies": {
        "has": "^1.0.3"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/normalize-package-data/node_modules/resolve": {
      "version": "1.22.1",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
      "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.9.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/normalize-package-data/node_modules/semver": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
      "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/npm-run-path": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
      "integrity": "sha512-lJxZYlT4DW/bRUtFh1MQIWqmLwQfAxnqWG4HhEdjMlkrJYnJn0Jrr2u3mgxqaWsdiBc76TYkTG/mhrnYTuzfHw==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/p-cancelable": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
      "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-defer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
      "integrity": "sha512-wB3wfAxZpk2AzOfUMJNL+d36xothRSyj8EXOa4f6GMqYDN9BJaaSISbsk+wS9abmnebVw95C2Kb5t85UmpCxuw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-event": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/p-event/-/p-event-5.0.1.tgz",
      "integrity": "sha512-dd589iCQ7m1L0bmC5NLlVYfy3TbBEsMUfWx9PyAgPeIcFZ/E2yaTZ4Rz4MiBmmJShviiftHVXOqfnfzJ6kyMrQ==",
      "license": "MIT",
      "dependencies": {
        "p-timeout": "^5.0.2"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-1.3.0.tgz",
      "integrity": "sha512-vvcXsLAJ9Dr5rQOPk7toZQZJApBl2K4J6dANSsEuh6QI41JYcsS/qhTGa9ErIUUgK3WNQoJYvylxvjqmiqEA9Q==",
      "license": "MIT",
      "dependencies": {
        "p-try": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-locate": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz",
      "integrity": "sha512-nQja7m7gSKuewoVRen45CtVfODR3crN3goVQ0DDZ9N3yHxgpkuBhZqsaiotSQRrADUrne346peY7kT3TSACykg==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^1.1.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-map": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-5.5.0.tgz",
      "integrity": "sha512-VFqfGDHlx87K66yZrNdI4YGtD70IRyd+zSvgks6mzHPRNkoKy+9EKP4SFC77/vTTQYmRmti7dvqC+m5jBrBAcg==",
      "license": "MIT",
      "dependencies": {
        "aggregate-error": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-timeout": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-5.1.0.tgz",
      "integrity": "sha512-auFDyzzzGZZZdHz3BtET9VEz0SE/uMEAx7uWfGPucfzEwwe/xH0iVeZibQmANYE/hp9T2+UUZT5m+BKyrDp3Ew==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-try": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-1.0.0.tgz",
      "integrity": "sha512-U1etNYuMJoIz3ZXSrrySFjsXQTWOx2/jdi86L+2pRvph/qMKL6sbcCYdH23fqsbm8TH2Gn0OybpT4eSFlCVHww==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/parse-json": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
      "integrity": "sha512-QR/GGaKCkhwk1ePQNYDRKYZ3mwU9ypsKhB0XyFnLQdomyEqk3e8wpW3V5Jp88zbxK4n5ST1nqo+g9juTpownhQ==",
      "license": "MIT",
      "dependencies": {
        "error-ex": "^1.2.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/parse-ms": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-3.0.0.tgz",
      "integrity": "sha512-Tpb8Z7r7XbbtBTrM9UhpkzzaMrqA2VXMT3YChzYltwV3P3pM6t8wl7TvpMnSTosz1aQAdVib7kdoys7vYOPerw==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-exists": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-5.0.0.tgz",
      "integrity": "sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ==",
      "license": "MIT",
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "license": "MIT"
    },
    "node_modules/path-type": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-2.0.0.tgz",
      "integrity": "sha512-dUnb5dXUf+kzhC/W/F4e5/SkluXIFf5VUHolW1Eg1irn1hGWjPGdsRcvYJ1nD6lhk8Ir7VM0bHJKsYTx8Jx9OQ==",
      "license": "MIT",
      "dependencies": {
        "pify": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pkg-conf": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-4.0.0.tgz",
      "integrity": "sha512-7dmgi4UY4qk+4mj5Cd8v/GExPo0K+SlY+hulOSdfZ/T6jVH6//y7NtzZo5WrfhDBxuQ0jCa7fLZmNaNh7EWL/w==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^6.0.0",
        "load-json-file": "^7.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-conf/node_modules/find-up": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-6.3.0.tgz",
      "integrity": "sha512-v2ZsoEuVHYy8ZIlYqwPe/39Cy+cFDzp4dXPaxNvkEuouymu+2Jbz0PxpKarJHYJTmv2HWT3O382qY8l4jMWthw==",
      "license": "MIT",
      "dependencies": {
        "locate-path": "^7.1.0",
        "path-exists": "^5.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-conf/node_modules/locate-path": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-7.1.1.tgz",
      "integrity": "sha512-vJXaRMJgRVD3+cUZs3Mncj2mxpt5mP0EmNOsxRSZRMlbqjvxzDEOIUWXGmavo0ZC9+tNZCBLQ66reA11nbpHZg==",
      "license": "MIT",
      "dependencies": {
        "p-locate": "^6.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-conf/node_modules/p-limit": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
      "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^1.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pkg-conf/node_modules/p-locate": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-6.0.0.tgz",
      "integrity": "sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==",
      "license": "MIT",
      "dependencies": {
        "p-limit": "^4.0.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/plur": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/plur/-/plur-5.1.0.tgz",
      "integrity": "sha512-VP/72JeXqak2KiOzjgKtQen5y3IZHn+9GOuLDafPv0eXa47xq0At93XahYBs26MsifCQ4enGKwbjBTKgb9QJXg==",
      "license": "MIT",
      "dependencies": {
        "irregular-plurals": "^3.3.0"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/pretty-ms": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-8.0.0.tgz",
      "integrity": "sha512-ASJqOugUF1bbzI35STMBUpZqdfYKlJugy6JBziGi2EE+AL5JPJGSzvpeVXojxrr0ViUYoToUjb5kjSEGf7Y83Q==",
      "license": "MIT",
      "dependencies": {
        "parse-ms": "^3.0.0"
      },
      "engines": {
        "node": ">=14.16"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/promisify-child-process": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/promisify-child-process/-/promisify-child-process-4.1.1.tgz",
      "integrity": "sha512-/sRjHZwoXf1rJ+8s4oWjYjGRVKNK1DUnqfRC1Zek18pl0cN6k3yJ1cCbqd0tWNe4h0Gr+SY4vR42N33+T82WkA==",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha512-b/YwNhb8lk1Zz2+bXXpS/LK9OisiZZ1SNsSLxN1x2OXVEhW2Ckr/7mWE5vrC1ZTiJlD9g19jWszTmJsB+oEpFQ==",
      "license": "ISC"
    },
    "node_modules/pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/pure-uuid": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/pure-uuid/-/pure-uuid-1.6.2.tgz",
      "integrity": "sha512-WQ4xz74ApW6s0BToRuuyuMo9g0VHx1HljY0H2gPng+mqqz/K1yLj7sHZonZZQ2++WfHl/ZzruilWvuz+WtmxjQ==",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA==",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/read-pkg": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-2.0.0.tgz",
      "integrity": "sha512-eFIBOPW7FGjzBuk3hdXEuNSiTZS/xEMlH49HxMyzb0hyPfu4EhVjT2DH32K1hSSmVq4sebAWnZuuY5auISUTGA==",
      "license": "MIT",
      "dependencies": {
        "load-json-file": "^2.0.0",
        "normalize-package-data": "^2.3.2",
        "path-type": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg-up": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-2.0.0.tgz",
      "integrity": "sha512-1orxQfbWGUiTn9XsPlChs6rLie/AV9jwZTGmu2NZw/CUDJQchXJFYE0Fq5j7+n558T1JhDWLdhyd1Zj+wLY//w==",
      "license": "MIT",
      "dependencies": {
        "find-up": "^2.0.0",
        "read-pkg": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/read-pkg/node_modules/load-json-file": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-2.0.0.tgz",
      "integrity": "sha512-3p6ZOGNbiX4CdvEd1VcE6yi78UrGNpjHO33noGwHCnT/o2fyllJDepsm8+mFFv/DvtwFHht5HIHSyOy5a+ChVQ==",
      "license": "MIT",
      "dependencies": {
        "graceful-fs": "^4.1.2",
        "parse-json": "^2.2.0",
        "pify": "^2.0.0",
        "strip-bom": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I=",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-alpn": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
      "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g=="
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/responselike": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
      "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
      "dependencies": {
        "lowercase-keys": "^2.0.0"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw==",
      "license": "MIT",
      "engines": {
        "iojs": ">=1.0.0",
        "node": ">=0.10.0"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "license": "ISC",
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rollup": {
      "version": "2.74.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.74.1.tgz",
      "integrity": "sha512-K2zW7kV8Voua5eGkbnBtWYfMIhYhT9Pel2uhBk2WO5eMee161nPze/XRfvEQPFYz7KgrCCnmh2Wy0AMFLGGmMA==",
      "license": "MIT",
      "bin": {
        "rollup": "dist/bin/rollup"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/rollup-plugin-sourcemaps": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/rollup-plugin-sourcemaps/-/rollup-plugin-sourcemaps-0.6.3.tgz",
      "integrity": "sha512-paFu+nT1xvuO1tPFYXGe+XnQvg4Hjqv/eIhG8i5EspfYYPBKL57X7iVbfv55aNVASg3dzWvES9dmWsL2KhfByw==",
      "license": "MIT",
      "dependencies": {
        "@rollup/pluginutils": "^3.0.9",
        "source-map-resolve": "^0.6.0"
      },
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "@types/node": ">=10.0.0",
        "rollup": ">=0.31.2"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        }
      }
    },
    "node_modules/run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "queue-microtask": "^1.2.2"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/serialize-error": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.13.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "node_modules/shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^1.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "license": "ISC"
    },
    "node_modules/slash": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/slice-ansi": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
      "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.0.0",
        "is-fullwidth-code-point": "^4.0.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/slice-ansi?sponsor=1"
      }
    },
    "node_modules/slice-ansi/node_modules/is-fullwidth-code-point": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
      "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/sort-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/sort-keys/-/sort-keys-2.0.0.tgz",
      "integrity": "sha512-/dPCrG1s3ePpWm6yBbxZq5Be1dXGLyLn9Z791chDC3NFrpkVbWGzkBwPN1knaciexFXgRJ7hzdnwZ4stHSDmjg==",
      "license": "MIT",
      "dependencies": {
        "is-plain-obj": "^1.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/source-map-resolve": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.6.0.tgz",
      "integrity": "sha512-KXBr9d/fO/bWo97NXsPIAW1bFSBOuCnjbNTBMO7N59hsv5i9yzRDfcYwwt0l04+VqnKC+EwzvJZIP/qkuMgR/w==",
      "license": "MIT",
      "dependencies": {
        "atob": "^2.1.2",
        "decode-uri-component": "^0.2.0"
      }
    },
    "node_modules/sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA==",
      "license": "MIT"
    },
    "node_modules/spdx-correct": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
      "license": "Apache-2.0",
      "dependencies": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-exceptions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A==",
      "license": "CC-BY-3.0"
    },
    "node_modules/spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "license": "MIT",
      "dependencies": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "node_modules/spdx-license-ids": {
      "version": "3.0.12",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.12.tgz",
      "integrity": "sha512-rr+VVSXtRhO4OHbXUiAF7xW3Bo9DuuF6C5jH+q/x15j2jniycgKbxU09Hr0WqlSLUs4i4ltHGXqTe7VHclYWyA==",
      "license": "CC0-1.0"
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/stack-utils/node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/strip-eof": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz",
      "integrity": "sha512-7FCwGGmx8mD5xQd3RPUvnSpUXHM3BWuzjtpD4TXsfcZ9EL4azvVVUscFYwD9nx8Kh+uCBC00XBtAykoMHwTh8Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/supertap": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/supertap/-/supertap-3.0.1.tgz",
      "integrity": "sha512-u1ZpIBCawJnO+0QePsEiOknOfCRq0yERxiAchT0i4li0WHNUJbf0evXXSXOcCAR4M8iMDoajXYmstm/qO81Isw==",
      "license": "MIT",
      "dependencies": {
        "indent-string": "^5.0.0",
        "js-yaml": "^3.14.1",
        "serialize-error": "^7.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": "^12.20.0 || ^14.13.1 || >=16.0.0"
      }
    },
    "node_modules/supertap/node_modules/ansi-regex": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
      "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/supertap/node_modules/strip-ansi": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
      "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.1.13",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.13.tgz",
      "integrity": "sha512-jdIBIN6LTIe2jqzay/2vtYLlBHa3JF42ot3h1dW8Q0PaAG4v8rm0cvpVePtau5C6OKXGGcgO9q2AMNSWxiLqKw==",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^4.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar/node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
    },
    "node_modules/temp-dir": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-3.0.0.tgz",
      "integrity": "sha512-nHc6S/bwIilKHNRgK/3jlhDoIHcp45YgyiwcAk46Tr0LfEqGBVpmiAyuiuxeVE44m3mXnEeVhaipLOEWmH+Njw==",
      "license": "MIT",
      "engines": {
        "node": ">=14.16"
      }
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/time-zone": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
      "integrity": "sha512-TIsDdtKo6+XrPtiTm1ssmMngN1sAhyKnTO2kunQWqNPWIVvCm15Wmw4SWInwTVgJ5u/Tr04+8Ei9TNcw4x4ONA==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4=",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "node_modules/type-fest": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
      "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg==",
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/typescript": {
      "version": "4.7.4",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.7.4.tgz",
      "integrity": "sha512-C0WQT0gezHuw6AdY1M2jxUO83Rjf0HP7Sk1DtXj6j1EwkQNZrHAg2XPWlq62oqEhYvONq5pkC2Y9oPljWToLmQ==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=4.2.0"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "node_modules/universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ==",
      "engines": {
        "node": ">= 10.0.0"
      }
    },
    "node_modules/validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "license": "Apache-2.0",
      "dependencies": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "node_modules/well-known-symbols": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
      "integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q==",
      "license": "ISC",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "which": "bin/which"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/wrap-ansi/node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-5.0.0.tgz",
      "integrity": "sha512-R7NYMnHSlV42K54lwY9lvW6MnSm1HSJqZL3xiSgi9E7//FYaI74r2G0rd+/X6VAMkHEdzxQaU5HUOXWUz5kA/w==",
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^14.17.0 || ^16.13.0 || >=18.0.0"
      }
    },
    "node_modules/write-json-file": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/write-json-file/-/write-json-file-2.3.0.tgz",
      "integrity": "sha512-84+F0igFp2dPD6UpAQjOUX3CdKUOqUzn6oE9sDBNzUXINR5VceJ1rauZltqQB/bcYsx3EpKys4C7/PivKUAiWQ==",
      "license": "MIT",
      "dependencies": {
        "detect-indent": "^5.0.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^1.0.0",
        "pify": "^3.0.0",
        "sort-keys": "^2.0.0",
        "write-file-atomic": "^2.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/write-json-file/node_modules/pify": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
      "integrity": "sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/write-json-file/node_modules/write-file-atomic": {
      "version": "2.4.3",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.4.3.tgz",
      "integrity": "sha512-GaETH5wwsX+GcnzhPgKcKjJ6M2Cq3/iZp1WyY/X1CSqrW+jVNM9Y7D8EC2sM4ZG/V8wZlSniJnCKWPmBYAucRQ==",
      "license": "ISC",
      "dependencies": {
        "graceful-fs": "^4.1.11",
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.2"
      }
    },
    "node_modules/write-pkg": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/write-pkg/-/write-pkg-3.2.0.tgz",
      "integrity": "sha512-tX2ifZ0YqEFOF1wjRW2Pk93NLsj02+n1UP5RvO6rCs0K6R2g1padvf006cY74PQJKMGS2r42NK7FD0dG6Y6paw==",
      "license": "MIT",
      "dependencies": {
        "sort-keys": "^2.0.0",
        "write-json-file": "^2.2.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha512-ncTzHV7NvsQZkYe1DW7cbDLm0YpzHmZF5r/iyP3ZnQtMiJ+pjzisCiMNI+Sj+xQF5pXhSHxSB3uDbsBTzY/c2A==",
      "license": "ISC"
    },
    "node_modules/yargs": {
      "version": "17.5.1",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.5.1.tgz",
      "integrity": "sha512-t6YAJcxDkNX7NFYiVtKvWUz8l+PaKTLiL63mJYWR2GnHq2gjEWISzsLp9wg3aY36dY1j+gfIEL3pIF+XlJJfbA==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.0.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.0.1.tgz",
      "integrity": "sha512-9BK1jFpLzJROCI5TzwZL/TU4gqjK5xiHV/RfWLOahrjAko/e4DJkRDZQXfvqAsiZzzYhgAzbgz6lg48jcm4GLg==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.0.0.tgz",
      "integrity": "sha512-9bnSc/HEW2uRy67wc+T8UwauLuPJVn28jb+GtJY16iiKWyvmYJRXVT4UamsAEGQfPohgr2q4Tq0sQbQlxTfi1g==",
      "license": "MIT",
      "engines": {
        "node": ">=12.20"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    }
  },
  "dependencies": {
    "@ampproject/remapping": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.2.0.tgz",
      "integrity": "sha512-qRmjj8nj9qmLTQXXmaR1cck3UXSRMPrbsLJAasZpF+t3riI71BXed5ebIOYwQntykeZuhjsdweEc9BxH5Jc26w==",
      "requires": {
        "@jridgewell/gen-mapping": "^0.1.0",
        "@jridgewell/trace-mapping": "^0.3.9"
      },
      "dependencies": {
        "@jridgewell/gen-mapping": {
          "version": "0.1.1",
          "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.1.1.tgz",
          "integrity": "sha512-sQXCasFk+U8lWYEe66WxRDOE9PjVz4vSM51fTu3Hw+ClTpUSQb718772vH3pyS5pShp6lvQM7SxgIDXXXmOX7w==",
          "requires": {
            "@jridgewell/set-array": "^1.0.0",
            "@jridgewell/sourcemap-codec": "^1.4.10"
          }
        }
      }
    },
    "@babel/code-frame": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.16.7.tgz",
      "integrity": "sha512-iAXqUn8IIeBTNd72xsFlgaXHkMBMt6y4HJp1tIaK465CWLT/fG1aqB7ykr95gHHmlBdGbFeWWfyB4NJJ0nmeIg==",
      "requires": {
        "@babel/highlight": "^7.16.7"
      }
    },
    "@babel/compat-data": {
      "version": "7.17.10",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.17.10.tgz",
      "integrity": "sha512-GZt/TCsG70Ms19gfZO1tM4CVnXsPgEPBCpJu+Qz3L0LUDsY5nZqFZglIoPC1kIYOtNBZlrnFT+klg12vFGZXrw=="
    },
    "@babel/core": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.18.2.tgz",
      "integrity": "sha512-A8pri1YJiC5UnkdrWcmfZTJTV85b4UXTAfImGmCfYmax4TR9Cw8sDS0MOk++Gp2mE/BefVJ5nwy5yzqNJbP/DQ==",
      "requires": {
        "@ampproject/remapping": "^2.1.0",
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-compilation-targets": "^7.18.2",
        "@babel/helper-module-transforms": "^7.18.0",
        "@babel/helpers": "^7.18.2",
        "@babel/parser": "^7.18.0",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2",
        "convert-source-map": "^1.7.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.1",
        "semver": "^6.3.0"
      }
    },
    "@babel/generator": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.18.2.tgz",
      "integrity": "sha512-W1lG5vUwFvfMd8HVXqdfbuG7RuaSrTCCD8cl8fP8wOivdbtbIg2Db3IWUcgvfxKbbn6ZBGYRW/Zk1MIwK49mgw==",
      "requires": {
        "@babel/types": "^7.18.2",
        "@jridgewell/gen-mapping": "^0.3.0",
        "jsesc": "^2.5.1"
      }
    },
    "@babel/helper-annotate-as-pure": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.16.7.tgz",
      "integrity": "sha512-s6t2w/IPQVTAET1HitoowRGXooX8mCgtuP5195wD/QJPV6wYjpujCGF7JuMODVX2ZAJOf1GT6DT9MHEZvLOFSw==",
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-compilation-targets": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.18.2.tgz",
      "integrity": "sha512-s1jnPotJS9uQnzFtiZVBUxe67CuBa679oWFHpxYYnTpRL/1ffhyX44R9uYiXoa/pLXcY9H2moJta0iaanlk/rQ==",
      "requires": {
        "@babel/compat-data": "^7.17.10",
        "@babel/helper-validator-option": "^7.16.7",
        "browserslist": "^4.20.2",
        "semver": "^6.3.0"
      },
      "dependencies": {
        "@babel/helper-validator-option": {
          "version": "7.16.7",
          "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.16.7.tgz",
          "integrity": "sha512-TRtenOuRUVo9oIQGPC5G9DgK4743cdxvtOw0weQNpZXaS16SCBi5MNjZF8vba3ETURjZpTbVn7Vvcf2eAwFozQ=="
        }
      }
    },
    "@babel/helper-create-class-features-plugin": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.0.tgz",
      "integrity": "sha512-Kh8zTGR9de3J63e5nS0rQUdRs/kbtwoeQQ0sriS0lItjC96u8XXZN6lKpuyWd2coKSU13py/y+LTmThLuVX0Pg==",
      "requires": {
        "@babel/helper-annotate-as-pure": "^7.16.7",
        "@babel/helper-environment-visitor": "^7.16.7",
        "@babel/helper-function-name": "^7.17.9",
        "@babel/helper-member-expression-to-functions": "^7.17.7",
        "@babel/helper-optimise-call-expression": "^7.16.7",
        "@babel/helper-replace-supers": "^7.16.7",
        "@babel/helper-split-export-declaration": "^7.16.7"
      }
    },
    "@babel/helper-environment-visitor": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.2.tgz",
      "integrity": "sha512-14GQKWkX9oJzPiQQ7/J36FTXcD4kSp8egKjO9nINlSKiHITRA9q/R74qu8S9xlc/b/yjsJItQUeeh3xnGN0voQ=="
    },
    "@babel/helper-function-name": {
      "version": "7.17.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.17.9.tgz",
      "integrity": "sha512-7cRisGlVtiVqZ0MW0/yFB4atgpGLWEHUVYnb448hZK4x+vih0YO5UoS11XIYtZYqHd0dIPMdUSv8q5K4LdMnIg==",
      "requires": {
        "@babel/template": "^7.16.7",
        "@babel/types": "^7.17.0"
      }
    },
    "@babel/helper-hoist-variables": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.16.7.tgz",
      "integrity": "sha512-m04d/0Op34H5v7pbZw6pSKP7weA6lsMvfiIAMeIvkY/R4xQtBSMFEigu9QTZ2qB/9l22vsxtM8a+Q8CzD255fg==",
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-member-expression-to-functions": {
      "version": "7.17.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.17.7.tgz",
      "integrity": "sha512-thxXgnQ8qQ11W2wVUObIqDL4p148VMxkt5T/qpN5k2fboRyzFGFmKsTGViquyM5QHKUy48OZoca8kw4ajaDPyw==",
      "requires": {
        "@babel/types": "^7.17.0"
      }
    },
    "@babel/helper-module-imports": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.16.7.tgz",
      "integrity": "sha512-LVtS6TqjJHFc+nYeITRo6VLXve70xmq7wPhWTqDJusJEgGmkAACWwMiTNrvfoQo6hEhFwAIixNkvB0jPXDL8Wg==",
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-module-transforms": {
      "version": "7.18.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.18.0.tgz",
      "integrity": "sha512-kclUYSUBIjlvnzN2++K9f2qzYKFgjmnmjwL4zlmU5f8ZtzgWe8s0rUPSTGy2HmK4P8T52MQsS+HTQAgZd3dMEA==",
      "requires": {
        "@babel/helper-environment-visitor": "^7.16.7",
        "@babel/helper-module-imports": "^7.16.7",
        "@babel/helper-simple-access": "^7.17.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/helper-validator-identifier": "^7.16.7",
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.0",
        "@babel/types": "^7.18.0"
      }
    },
    "@babel/helper-optimise-call-expression": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.16.7.tgz",
      "integrity": "sha512-EtgBhg7rd/JcnpZFXpBy0ze1YRfdm7BnBX4uKMBd3ixa3RGAE002JZB66FJyNH7g0F38U05pXmA5P8cBh7z+1w==",
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-plugin-utils": {
      "version": "7.18.9",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.18.9.tgz",
      "integrity": "sha512-aBXPT3bmtLryXaoJLyYPXPlSD4p1ld9aYeR+sJNOZjJJGiOpb+fKfh3NkcCu7J54nUJwCERPBExCCpyCOHnu/w=="
    },
    "@babel/helper-replace-supers": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.18.2.tgz",
      "integrity": "sha512-XzAIyxx+vFnrOxiQrToSUOzUOn0e1J2Li40ntddek1Y69AXUTXoDJ40/D5RdjFu7s7qHiaeoTiempZcbuVXh2Q==",
      "requires": {
        "@babel/helper-environment-visitor": "^7.18.2",
        "@babel/helper-member-expression-to-functions": "^7.17.7",
        "@babel/helper-optimise-call-expression": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2"
      }
    },
    "@babel/helper-simple-access": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-simple-access/-/helper-simple-access-7.18.2.tgz",
      "integrity": "sha512-7LIrjYzndorDY88MycupkpQLKS1AFfsVRm2k/9PtKScSy5tZq0McZTj+DiMRynboZfIqOKvo03pmhTaUgiD6fQ==",
      "requires": {
        "@babel/types": "^7.18.2"
      }
    },
    "@babel/helper-split-export-declaration": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.16.7.tgz",
      "integrity": "sha512-xbWoy/PFoxSWazIToT9Sif+jJTlrMcndIsaOKvTA6u7QEo7ilkRZpjew18/W3c7nm8fXdUDXh02VXTbZ0pGDNw==",
      "requires": {
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/helper-validator-identifier": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.16.7.tgz",
      "integrity": "sha512-hsEnFemeiW4D08A5gUAZxLBTXpZ39P+a+DGDsHw1yxqyQ/jzFEnxf5uTEGp+3bzAbNOxU1paTgYS4ECU/IgfDw=="
    },
    "@babel/helper-validator-option": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.18.6.tgz",
      "integrity": "sha512-XO7gESt5ouv/LRJdrVjkShckw6STTaB7l9BrpBaAHDeF5YZT+01PCwmR0SJHnkW6i8OwW/EVWRShfi4j2x+KQw=="
    },
    "@babel/helpers": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.18.2.tgz",
      "integrity": "sha512-j+d+u5xT5utcQSzrh9p+PaJX94h++KN+ng9b9WEJq7pkUPAd61FGqhjuUEdfknb3E/uDBb7ruwEeKkIxNJPIrg==",
      "requires": {
        "@babel/template": "^7.16.7",
        "@babel/traverse": "^7.18.2",
        "@babel/types": "^7.18.2"
      }
    },
    "@babel/highlight": {
      "version": "7.17.12",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.17.12.tgz",
      "integrity": "sha512-7yykMVF3hfZY2jsHZEEgLc+3x4o1O+fYyULu11GynEUQNwB6lua+IIQn1FiJxNucd5UlyJryrwsOh8PL9Sn8Qg==",
      "requires": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      }
    },
    "@babel/parser": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.3.tgz",
      "integrity": "sha512-rL50YcEuHbbauAFAysNsJA4/f89fGTOBRNs9P81sniKnKAr4xULe5AecolcsKbi88xu0ByWYDj/S1AJ3FSFuSQ=="
    },
    "@babel/plugin-proposal-decorators": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/plugin-proposal-decorators/-/plugin-proposal-decorators-7.18.2.tgz",
      "integrity": "sha512-kbDISufFOxeczi0v4NQP3p5kIeW6izn/6klfWBrIIdGZZe4UpHR+QU03FAoWjGGd9SUXAwbw2pup1kaL4OQsJQ==",
      "requires": {
        "@babel/helper-create-class-features-plugin": "^7.18.0",
        "@babel/helper-plugin-utils": "^7.17.12",
        "@babel/helper-replace-supers": "^7.18.2",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/plugin-syntax-decorators": "^7.17.12",
        "charcodes": "^0.2.0"
      },
      "dependencies": {
        "@babel/helper-plugin-utils": {
          "version": "7.17.12",
          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
        }
      }
    },
    "@babel/plugin-syntax-decorators": {
      "version": "7.17.12",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-decorators/-/plugin-syntax-decorators-7.17.12.tgz",
      "integrity": "sha512-D1Hz0qtGTza8K2xGyEdVNCYLdVHukAcbQr4K3/s6r/esadyEriZovpJimQOpu8ju4/jV8dW/1xdaE0UpDroidw==",
      "requires": {
        "@babel/helper-plugin-utils": "^7.17.12"
      },
      "dependencies": {
        "@babel/helper-plugin-utils": {
          "version": "7.17.12",
          "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.17.12.tgz",
          "integrity": "sha512-JDkf04mqtN3y4iAbO1hv9U2ARpPyPL1zqyWs/2WG1pgSq9llHFjStX5jdxb84himgJm+8Ng+x0oiWF/nw/XQKA=="
        }
      }
    },
    "@babel/plugin-syntax-typescript": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.18.6.tgz",
      "integrity": "sha512-mAWAuq4rvOepWCBid55JuRNvpTNf2UGVgoz4JV0fXEKolsVZDzsa4NqCef758WZJj/GDu0gVGItjKFiClTAmZA==",
      "requires": {
        "@babel/helper-plugin-utils": "^7.18.6"
      }
    },
    "@babel/plugin-transform-typescript": {
      "version": "7.18.8",
      "resolved": "https://registry.npmjs.org/@babel/plugin-transform-typescript/-/plugin-transform-typescript-7.18.8.tgz",
      "integrity": "sha512-p2xM8HI83UObjsZGofMV/EdYjamsDm6MoN3hXPYIT0+gxIoopE+B7rPYKAxfrz9K9PK7JafTTjqYC6qipLExYA==",
      "requires": {
        "@babel/helper-create-class-features-plugin": "^7.18.6",
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/plugin-syntax-typescript": "^7.18.6"
      },
      "dependencies": {
        "@babel/code-frame": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.18.6.tgz",
          "integrity": "sha512-TDCmlK5eOvH+eH7cdAFlNXeVJqWIQ7gW9tY1GJIpUtFb6CmjVyq2VM3u71bOyR8CRihcCgMUYoDNyLXao3+70Q==",
          "requires": {
            "@babel/highlight": "^7.18.6"
          }
        },
        "@babel/generator": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.18.9.tgz",
          "integrity": "sha512-wt5Naw6lJrL1/SGkipMiFxJjtyczUWTP38deiP1PO60HsBjDeKk08CGC3S8iVuvf0FmTdgKwU1KIXzSKL1G0Ug==",
          "requires": {
            "@babel/types": "^7.18.9",
            "@jridgewell/gen-mapping": "^0.3.2",
            "jsesc": "^2.5.1"
          }
        },
        "@babel/helper-annotate-as-pure": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/helper-annotate-as-pure/-/helper-annotate-as-pure-7.18.6.tgz",
          "integrity": "sha512-duORpUiYrEpzKIop6iNbjnwKLAKnJ47csTyRACyEmWj0QdUrm5aqNJGHSSEQSUAvNW0ojX0dOmK9dZduvkfeXA==",
          "requires": {
            "@babel/types": "^7.18.6"
          }
        },
        "@babel/helper-create-class-features-plugin": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/helper-create-class-features-plugin/-/helper-create-class-features-plugin-7.18.9.tgz",
          "integrity": "sha512-WvypNAYaVh23QcjpMR24CwZY2Nz6hqdOcFdPbNpV56hL5H6KiFheO7Xm1aPdlLQ7d5emYZX7VZwPp9x3z+2opw==",
          "requires": {
            "@babel/helper-annotate-as-pure": "^7.18.6",
            "@babel/helper-environment-visitor": "^7.18.9",
            "@babel/helper-function-name": "^7.18.9",
            "@babel/helper-member-expression-to-functions": "^7.18.9",
            "@babel/helper-optimise-call-expression": "^7.18.6",
            "@babel/helper-replace-supers": "^7.18.9",
            "@babel/helper-split-export-declaration": "^7.18.6"
          }
        },
        "@babel/helper-environment-visitor": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/helper-environment-visitor/-/helper-environment-visitor-7.18.9.tgz",
          "integrity": "sha512-3r/aACDJ3fhQ/EVgFy0hpj8oHyHpQc+LPtJoY9SzTThAsStm4Ptegq92vqKoE3vD706ZVFWITnMnxucw+S9Ipg=="
        },
        "@babel/helper-function-name": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/helper-function-name/-/helper-function-name-7.18.9.tgz",
          "integrity": "sha512-fJgWlZt7nxGksJS9a0XdSaI4XvpExnNIgRP+rVefWh5U7BL8pPuir6SJUmFKRfjWQ51OtWSzwOxhaH/EBWWc0A==",
          "requires": {
            "@babel/template": "^7.18.6",
            "@babel/types": "^7.18.9"
          }
        },
        "@babel/helper-hoist-variables": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/helper-hoist-variables/-/helper-hoist-variables-7.18.6.tgz",
          "integrity": "sha512-UlJQPkFqFULIcyW5sbzgbkxn2FKRgwWiRexcuaR8RNJRy8+LLveqPjwZV/bwrLZCN0eUHD/x8D0heK1ozuoo6Q==",
          "requires": {
            "@babel/types": "^7.18.6"
          }
        },
        "@babel/helper-member-expression-to-functions": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/helper-member-expression-to-functions/-/helper-member-expression-to-functions-7.18.9.tgz",
          "integrity": "sha512-RxifAh2ZoVU67PyKIO4AMi1wTenGfMR/O/ae0CCRqwgBAt5v7xjdtRw7UoSbsreKrQn5t7r89eruK/9JjYHuDg==",
          "requires": {
            "@babel/types": "^7.18.9"
          }
        },
        "@babel/helper-optimise-call-expression": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/helper-optimise-call-expression/-/helper-optimise-call-expression-7.18.6.tgz",
          "integrity": "sha512-HP59oD9/fEHQkdcbgFCnbmgH5vIQTJbxh2yf+CdM89/glUNnuzr87Q8GIjGEnOktTROemO0Pe0iPAYbqZuOUiA==",
          "requires": {
            "@babel/types": "^7.18.6"
          }
        },
        "@babel/helper-replace-supers": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/helper-replace-supers/-/helper-replace-supers-7.18.9.tgz",
          "integrity": "sha512-dNsWibVI4lNT6HiuOIBr1oyxo40HvIVmbwPUm3XZ7wMh4k2WxrxTqZwSqw/eEmXDS9np0ey5M2bz9tBmO9c+YQ==",
          "requires": {
            "@babel/helper-environment-visitor": "^7.18.9",
            "@babel/helper-member-expression-to-functions": "^7.18.9",
            "@babel/helper-optimise-call-expression": "^7.18.6",
            "@babel/traverse": "^7.18.9",
            "@babel/types": "^7.18.9"
          }
        },
        "@babel/helper-split-export-declaration": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/helper-split-export-declaration/-/helper-split-export-declaration-7.18.6.tgz",
          "integrity": "sha512-bde1etTx6ZyTmobl9LLMMQsaizFVZrquTEHOqKeQESMKo4PlObf+8+JA25ZsIpZhT/WEd39+vOdLXAFG/nELpA==",
          "requires": {
            "@babel/types": "^7.18.6"
          }
        },
        "@babel/helper-validator-identifier": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.18.6.tgz",
          "integrity": "sha512-MmetCkz9ej86nJQV+sFCxoGGrUbU3q02kgLciwkrt9QqEB7cP39oKEY0PakknEO0Gu20SskMRi+AYZ3b1TpN9g=="
        },
        "@babel/highlight": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.18.6.tgz",
          "integrity": "sha512-u7stbOuYjaPezCuLj29hNW1v64M2Md2qupEKP1fHc7WdOA3DgLh37suiSrZYY7haUB7iBeQZ9P1uiRF359do3g==",
          "requires": {
            "@babel/helper-validator-identifier": "^7.18.6",
            "chalk": "^2.0.0",
            "js-tokens": "^4.0.0"
          }
        },
        "@babel/parser": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.18.9.tgz",
          "integrity": "sha512-9uJveS9eY9DJ0t64YbIBZICtJy8a5QrDEVdiLCG97fVLpDTpGX7t8mMSb6OWw6Lrnjqj4O8zwjELX3dhoMgiBg=="
        },
        "@babel/template": {
          "version": "7.18.6",
          "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.18.6.tgz",
          "integrity": "sha512-JoDWzPe+wgBsTTgdnIma3iHNFC7YVJoPssVBDjiHfNlyt4YcunDtcDOUmfVDfCK5MfdsaIoX9PkijPhjH3nYUw==",
          "requires": {
            "@babel/code-frame": "^7.18.6",
            "@babel/parser": "^7.18.6",
            "@babel/types": "^7.18.6"
          }
        },
        "@babel/traverse": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.18.9.tgz",
          "integrity": "sha512-LcPAnujXGwBgv3/WHv01pHtb2tihcyW1XuL9wd7jqh1Z8AQkTd+QVjMrMijrln0T7ED3UXLIy36P9Ao7W75rYg==",
          "requires": {
            "@babel/code-frame": "^7.18.6",
            "@babel/generator": "^7.18.9",
            "@babel/helper-environment-visitor": "^7.18.9",
            "@babel/helper-function-name": "^7.18.9",
            "@babel/helper-hoist-variables": "^7.18.6",
            "@babel/helper-split-export-declaration": "^7.18.6",
            "@babel/parser": "^7.18.9",
            "@babel/types": "^7.18.9",
            "debug": "^4.1.0",
            "globals": "^11.1.0"
          }
        },
        "@babel/types": {
          "version": "7.18.9",
          "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.9.tgz",
          "integrity": "sha512-WwMLAg2MvJmt/rKEVQBBhIVffMmnilX4oe0sRe7iPOHIGsqpruFHHdrfj4O1CMMtgMtCU4oPafZjDPCRgO57Wg==",
          "requires": {
            "@babel/helper-validator-identifier": "^7.18.6",
            "to-fast-properties": "^2.0.0"
          }
        },
        "@jridgewell/gen-mapping": {
          "version": "0.3.2",
          "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.2.tgz",
          "integrity": "sha512-mh65xKQAzI6iBcFzwv28KVWSmCkdRBWoOh+bYQGW3+6OZvbbN3TqMGo5hqYxQniRcH9F2VZIoJCm4pa3BPDK/A==",
          "requires": {
            "@jridgewell/set-array": "^1.0.1",
            "@jridgewell/sourcemap-codec": "^1.4.10",
            "@jridgewell/trace-mapping": "^0.3.9"
          }
        },
        "@jridgewell/set-array": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.2.tgz",
          "integrity": "sha512-xnkseuNADM0gt2bs+BvhO0p78Mk762YnZdsuzFV018NoG1Sj1SCQvpSqa7XUaTam5vAGasABV9qXASMKnFMwMw=="
        }
      }
    },
    "@babel/preset-typescript": {
      "version": "7.18.6",
      "resolved": "https://registry.npmjs.org/@babel/preset-typescript/-/preset-typescript-7.18.6.tgz",
      "integrity": "sha512-s9ik86kXBAnD760aybBucdpnLsAt0jK1xqJn2juOn9lkOvSHV60os5hxoVJsPzMQxvnUJFAlkont2DvvaYEBtQ==",
      "requires": {
        "@babel/helper-plugin-utils": "^7.18.6",
        "@babel/helper-validator-option": "^7.18.6",
        "@babel/plugin-transform-typescript": "^7.18.6"
      }
    },
    "@babel/template": {
      "version": "7.16.7",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.16.7.tgz",
      "integrity": "sha512-I8j/x8kHUrbYRTUxXrrMbfCa7jxkE7tZre39x3kjr9hvI82cK1FfqLygotcWN5kdPGWcLdWMHpSBavse5tWw3w==",
      "requires": {
        "@babel/code-frame": "^7.16.7",
        "@babel/parser": "^7.16.7",
        "@babel/types": "^7.16.7"
      }
    },
    "@babel/traverse": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.18.2.tgz",
      "integrity": "sha512-9eNwoeovJ6KH9zcCNnENY7DMFwTU9JdGCFtqNLfUAqtUHRCOsTOqWoffosP8vKmNYeSBUv3yVJXjfd8ucwOjUA==",
      "requires": {
        "@babel/code-frame": "^7.16.7",
        "@babel/generator": "^7.18.2",
        "@babel/helper-environment-visitor": "^7.18.2",
        "@babel/helper-function-name": "^7.17.9",
        "@babel/helper-hoist-variables": "^7.16.7",
        "@babel/helper-split-export-declaration": "^7.16.7",
        "@babel/parser": "^7.18.0",
        "@babel/types": "^7.18.2",
        "debug": "^4.1.0",
        "globals": "^11.1.0"
      }
    },
    "@babel/types": {
      "version": "7.18.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.18.2.tgz",
      "integrity": "sha512-0On6B8A4/+mFUto5WERt3EEuG1NznDirvwca1O8UwXQHVY8g3R7OzYgxXdOfMwLO08UrpUD/2+3Bclyq+/C94Q==",
      "requires": {
        "@babel/helper-validator-identifier": "^7.16.7",
        "to-fast-properties": "^2.0.0"
      }
    },
    "@jridgewell/gen-mapping": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.1.tgz",
      "integrity": "sha512-GcHwniMlA2z+WFPWuY8lp3fsza0I8xPFMWL5+n8LYyP6PSvPrXf4+n8stDHZY2DM0zy9sVkRDy1jDI4XGzYVqg==",
      "requires": {
        "@jridgewell/set-array": "^1.0.0",
        "@jridgewell/sourcemap-codec": "^1.4.10",
        "@jridgewell/trace-mapping": "^0.3.9"
      }
    },
    "@jridgewell/resolve-uri": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.0.7.tgz",
      "integrity": "sha512-8cXDaBBHOr2pQ7j77Y6Vp5VDT2sIqWyWQ56TjEq4ih/a4iST3dItRe8Q9fp0rrIl9DoKhWQtUQz/YpOxLkXbNA=="
    },
    "@jridgewell/set-array": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@jridgewell/set-array/-/set-array-1.1.1.tgz",
      "integrity": "sha512-Ct5MqZkLGEXTVmQYbGtx9SVqD2fqwvdubdps5D3djjAkgkKwT918VNOz65pEHFaYTeWcukmJmH5SwsA9Tn2ObQ=="
    },
    "@jridgewell/sourcemap-codec": {
      "version": "1.4.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.4.13.tgz",
      "integrity": "sha512-GryiOJmNcWbovBxTfZSF71V/mXbgcV3MewDe3kIMCLyIh5e7SKAeUZs+rMnJ8jkMolZ/4/VsdBmMrw3l+VdZ3w=="
    },
    "@jridgewell/trace-mapping": {
      "version": "0.3.13",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.13.tgz",
      "integrity": "sha512-o1xbKhp9qnIAoHJSWd6KlCZfqslL4valSF81H8ImioOAxluWYWOpWkpyktY2vnt4tbrX9XYaxovq6cgowaJp2w==",
      "requires": {
        "@jridgewell/resolve-uri": "^3.0.3",
        "@jridgewell/sourcemap-codec": "^1.4.10"
      }
    },
    "@nodelib/fs.scandir": {
      "version": "2.1.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.scandir/-/fs.scandir-2.1.5.tgz",
      "integrity": "sha512-vq24Bq3ym5HEQm2NKCr3yXDwjc7vTsEThRDnkp2DK9p1uqLR+DHurm/NOTo0KG7HYHU7eppKZj3MyqYuMBf62g==",
      "requires": {
        "@nodelib/fs.stat": "2.0.5",
        "run-parallel": "^1.1.9"
      }
    },
    "@nodelib/fs.stat": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.stat/-/fs.stat-2.0.5.tgz",
      "integrity": "sha512-RkhPPp2zrqDAQA/2jNhnztcPAlv64XdhIp7a7454A5ovI7Bukxgt7MX7udwAu3zg1DcpPU0rz3VV1SeaqvY4+A=="
    },
    "@nodelib/fs.walk": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/@nodelib/fs.walk/-/fs.walk-1.2.8.tgz",
      "integrity": "sha512-oGB+UxlgWcgQkgwo8GcEGwemoTFt3FIO9ababBmaGwXIoBKZ+GTy0pP185beGg7Llih/NSHSV2XAs1lnznocSg==",
      "requires": {
        "@nodelib/fs.scandir": "2.1.5",
        "fastq": "^1.6.0"
      }
    },
    "@rollup/plugin-babel": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-babel/-/plugin-babel-5.3.1.tgz",
      "integrity": "sha512-WFfdLWU/xVWKeRQnKmIAQULUI7Il0gZnBIH/ZFO069wYIfPu+8zrfp/KMW0atmELoRDq8FbiP3VCss9MhCut7Q==",
      "requires": {
        "@babel/helper-module-imports": "^7.10.4",
        "@rollup/pluginutils": "^3.1.0"
      }
    },
    "@rollup/plugin-commonjs": {
      "version": "21.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-commonjs/-/plugin-commonjs-21.1.0.tgz",
      "integrity": "sha512-6ZtHx3VHIp2ReNNDxHjuUml6ur+WcQ28N1yHgCQwsbNkQg2suhxGMDQGJOn/KuDxKtd1xuZP5xSTwBA4GQ8hbA==",
      "requires": {
        "@rollup/pluginutils": "^3.1.0",
        "commondir": "^1.0.1",
        "estree-walker": "^2.0.1",
        "glob": "^7.1.6",
        "is-reference": "^1.2.1",
        "magic-string": "^0.25.7",
        "resolve": "^1.17.0"
      }
    },
    "@rollup/plugin-node-resolve": {
      "version": "13.3.0",
      "resolved": "https://registry.npmjs.org/@rollup/plugin-node-resolve/-/plugin-node-resolve-13.3.0.tgz",
      "integrity": "sha512-Lus8rbUo1eEcnS4yTFKLZrVumLPY+YayBdWXgFSHYhTT2iJbMhoaaBL3xl5NCdeRytErGr8tZ0L71BMRmnlwSw==",
      "requires": {
        "@rollup/pluginutils": "^3.1.0",
        "@types/resolve": "1.17.1",
        "deepmerge": "^4.2.2",
        "is-builtin-module": "^3.1.0",
        "is-module": "^1.0.0",
        "resolve": "^1.19.0"
      }
    },
    "@rollup/pluginutils": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/@rollup/pluginutils/-/pluginutils-3.1.0.tgz",
      "integrity": "sha512-GksZ6pr6TpIjHm8h9lSQ8pi8BE9VeubNT0OMJ3B5uZJ8pz73NPiqOtCog/x2/QzM1ENChPKxMDhiQuRHsqc+lg==",
      "requires": {
        "@types/estree": "0.0.39",
        "estree-walker": "^1.0.1",
        "picomatch": "^2.2.2"
      },
      "dependencies": {
        "@types/estree": {
          "version": "0.0.39",
          "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.39.tgz",
          "integrity": "sha512-EYNwp3bU+98cpU4lAWYYL7Zz+2gryWH1qbdDTidVd6hkiR6weksdbMadyXKXNPEkQFhXM+hVO9ZygomHXp+AIw=="
        },
        "estree-walker": {
          "version": "1.0.1",
          "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-1.0.1.tgz",
          "integrity": "sha512-1fMXF3YP4pZZVozF8j/ZLfvnR8NSIljt56UhbZ5PeeDmmGHpgpdwQt7ITlGvYaQukCvuBRMLEiKiYC+oeIg4cg=="
        }
      }
    },
    "@sindresorhus/is": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/@sindresorhus/is/-/is-4.6.0.tgz",
      "integrity": "sha512-t09vSN3MdfsyCHoFcTRCH/iUtG7OJ0CsjzB8cjAmKc/va/kIgeDI/TxsigdncE/4be734m0cvIYwNaV4i2XqAw=="
    },
    "@szmarczak/http-timer": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/@szmarczak/http-timer/-/http-timer-4.0.6.tgz",
      "integrity": "sha512-4BAffykYOgO+5nzBWYwE3W90sBgLJoUPRWWcL8wlyiM8IB8ipJz3UMJ9KXQd1RKQXpKp8Tutn80HZtWsu2u76w==",
      "requires": {
        "defer-to-connect": "^2.0.0"
      }
    },
    "@types/cacheable-request": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/@types/cacheable-request/-/cacheable-request-6.0.3.tgz",
      "integrity": "sha512-IQ3EbTzGxIigb1I3qPZc1rWJnH0BmSKv5QYTalEwweFvyBDLSAe24zP0le/hyi7ecGfZVlIVAg4BZqb8WBwKqw==",
      "requires": {
        "@types/http-cache-semantics": "*",
        "@types/keyv": "^3.1.4",
        "@types/node": "*",
        "@types/responselike": "^1.0.0"
      }
    },
    "@types/estree": {
      "version": "0.0.51",
      "resolved": "https://registry.npmjs.org/@types/estree/-/estree-0.0.51.tgz",
      "integrity": "sha512-CuPgU6f3eT/XgKKPqKd/gLZV1Xmvf1a2R5POBOGQa6uv82xpls89HU5zKeVoyR8XzHd1RGNOlQlvUe3CFkjWNQ=="
    },
    "@types/http-cache-semantics": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/@types/http-cache-semantics/-/http-cache-semantics-4.0.1.tgz",
      "integrity": "sha512-SZs7ekbP8CN0txVG2xVRH6EgKmEm31BOxA07vkFaETzZz1xh+cbt8BcI0slpymvwhx5dlFnQG2rTlPVQn+iRPQ=="
    },
    "@types/keyv": {
      "version": "3.1.4",
      "resolved": "https://registry.npmjs.org/@types/keyv/-/keyv-3.1.4.tgz",
      "integrity": "sha512-BQ5aZNSCpj7D6K2ksrRCTmKRLEpnPvWDiLPfoGyhZ++8YtiK9d/3DBKPJgry359X/P1PfruyYwvnvwFjuEiEIg==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/node": {
      "version": "17.0.35",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-17.0.35.tgz",
      "integrity": "sha512-vu1SrqBjbbZ3J6vwY17jBs8Sr/BKA+/a/WtjRG+whKg1iuLFOosq872EXS0eXWILdO36DHQQeku/ZcL6hz2fpg=="
    },
    "@types/resolve": {
      "version": "1.17.1",
      "resolved": "https://registry.npmjs.org/@types/resolve/-/resolve-1.17.1.tgz",
      "integrity": "sha512-yy7HuzQhj0dhGpD8RLXSZWEkLsV9ibvxvi6EiJ3bkqLAO1RGo0WbkWQiwpRlSFymTJRz0d3k5LM3kkx8ArDbLw==",
      "requires": {
        "@types/node": "*"
      }
    },
    "@types/responselike": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@types/responselike/-/responselike-1.0.0.tgz",
      "integrity": "sha512-85Y2BjiufFzaMIlvJDvTTB8Fxl2xfLo4HgmHzVBz08w4wDePCTjYw66PdrolO0kzli3yam/YCgRufyo1DdQVTA==",
      "requires": {
        "@types/node": "*"
      }
    },
    "acorn": {
      "version": "8.8.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.8.1.tgz",
      "integrity": "sha512-7zFpHzhnqYKrkYdUjF1HI1bzd0VygEGX8lFk4k5zVMqHEoES+P+7TKI+EvLO9WVMJ8eekdO0aDEK044xTXwPPA=="
    },
    "acorn-walk": {
      "version": "8.2.0",
      "resolved": "https://registry.npmjs.org/acorn-walk/-/acorn-walk-8.2.0.tgz",
      "integrity": "sha512-k+iyHEuPgSw6SbuDpGQM+06HQUa04DZ3o+F6CSzXMvvI5KMvnaEqXe+YVe555R9nn6GPt404fos4wcgpw12SDA=="
    },
    "aggregate-error": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-4.0.1.tgz",
      "integrity": "sha512-0poP0T7el6Vq3rstR8Mn4V/IQrpBLO6POkUSrN7RhyY+GF/InCFShQzsQ39T25gkHhLgSLByyAz+Kjb+c2L98w==",
      "requires": {
        "clean-stack": "^4.0.0",
        "indent-string": "^5.0.0"
      }
    },
    "ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
    },
    "ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug=="
    },
    "anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "requires": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      }
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "arr-exclude": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/arr-exclude/-/arr-exclude-1.0.0.tgz",
      "integrity": "sha512-TiXbMMkPQNfoHcVi6jeU6IejGAFlcn0hYgVVe7tCiqL/ZtxbNkhDSMarUQjg/PAe9NQNvRd6YCVNutzo3Fxdug=="
    },
    "array-find-index": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/array-find-index/-/array-find-index-1.0.2.tgz",
      "integrity": "sha512-M1HQyIXcBGtVywBt8WVdim+lrNaK7VHp99Qt5pSNziXznKHViIBbXWtfRTpEFpF/c4FdfxNAsCCwPp5phBYJtw=="
    },
    "arrgv": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/arrgv/-/arrgv-1.0.2.tgz",
      "integrity": "sha512-a4eg4yhp7mmruZDQFqVMlxNRFGi/i1r87pt8SDHy0/I8PqSXoUTlWZRdAZo0VXgvEARcujbtTk8kiZRi1uDGRw=="
    },
    "arrify": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-3.0.0.tgz",
      "integrity": "sha512-tLkvA81vQG/XqE2mjDkGQHoOINtMHtysSnemrmoGe6PydDPMRbVugqyk4A6V/WDWEfm3l+0d8anA9r8cv/5Jaw=="
    },
    "atob": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/atob/-/atob-2.1.2.tgz",
      "integrity": "sha512-Wm6ukoaOGJi/73p/cl2GvLjTI5JM1k/O14isD73YML8StrH/7/lRFgmg8nICZgD3bZZvjwCGxtMOD3wWNAu8cg=="
    },
    "ava": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/ava/-/ava-5.1.0.tgz",
      "integrity": "sha512-e5VFrSQ0WBPyZJWRXVrO7RFOizFeNM0t2PORwrPvWtApgkORI6cvGnY3GX1G+lzpd0HjqNx5Jus22AhxVnUMNA==",
      "requires": {
        "acorn": "^8.8.1",
        "acorn-walk": "^8.2.0",
        "ansi-styles": "^6.2.1",
        "arrgv": "^1.0.2",
        "arrify": "^3.0.0",
        "callsites": "^4.0.0",
        "cbor": "^8.1.0",
        "chalk": "^5.1.2",
        "chokidar": "^3.5.3",
        "chunkd": "^2.0.1",
        "ci-info": "^3.6.1",
        "ci-parallel-vars": "^1.0.1",
        "clean-yaml-object": "^0.1.0",
        "cli-truncate": "^3.1.0",
        "code-excerpt": "^4.0.0",
        "common-path-prefix": "^3.0.0",
        "concordance": "^5.0.4",
        "currently-unhandled": "^0.4.1",
        "debug": "^4.3.4",
        "del": "^7.0.0",
        "emittery": "^1.0.1",
        "figures": "^5.0.0",
        "globby": "^13.1.2",
        "ignore-by-default": "^2.1.0",
        "indent-string": "^5.0.0",
        "is-error": "^2.2.2",
        "is-plain-object": "^5.0.0",
        "is-promise": "^4.0.0",
        "matcher": "^5.0.0",
        "mem": "^9.0.2",
        "ms": "^2.1.3",
        "p-event": "^5.0.1",
        "p-map": "^5.5.0",
        "picomatch": "^2.3.1",
        "pkg-conf": "^4.0.0",
        "plur": "^5.1.0",
        "pretty-ms": "^8.0.0",
        "resolve-cwd": "^3.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.6",
        "strip-ansi": "^7.0.1",
        "supertap": "^3.0.1",
        "temp-dir": "^3.0.0",
        "write-file-atomic": "^5.0.0",
        "yargs": "^17.6.2"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
          "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA=="
        },
        "chalk": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-5.2.0.tgz",
          "integrity": "sha512-ree3Gqw/nazQAPuJJEy+avdl7QfZMcUvmHIKgEZkGL+xOBzRvup5Hxo6LHuMceSxOabuJLJm5Yp/92R9eMmMvA=="
        },
        "cliui": {
          "version": "8.0.1",
          "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
          "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
          "requires": {
            "string-width": "^4.2.0",
            "strip-ansi": "^6.0.1",
            "wrap-ansi": "^7.0.0"
          },
          "dependencies": {
            "ansi-regex": {
              "version": "5.0.1",
              "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
              "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ=="
            },
            "strip-ansi": {
              "version": "6.0.1",
              "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
              "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
              "requires": {
                "ansi-regex": "^5.0.1"
              }
            }
          }
        },
        "slash": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
          "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q=="
        },
        "strip-ansi": {
          "version": "7.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
          "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
          "requires": {
            "ansi-regex": "^6.0.1"
          }
        },
        "yargs": {
          "version": "17.6.2",
          "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.6.2.tgz",
          "integrity": "sha512-1/9UrdHjDZc0eOU0HxOHoS78C69UD3JRMvzlJ7S79S2nTaWRA/whGCTV8o9e/N/1Va9YIV7Q4sOxD8VV4pCWOw==",
          "requires": {
            "cliui": "^8.0.1",
            "escalade": "^3.1.1",
            "get-caller-file": "^2.0.5",
            "require-directory": "^2.1.1",
            "string-width": "^4.2.3",
            "y18n": "^5.0.5",
            "yargs-parser": "^21.1.1"
          }
        },
        "yargs-parser": {
          "version": "21.1.1",
          "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
          "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw=="
        }
      }
    },
    "ava-init": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/ava-init/-/ava-init-0.3.0.tgz",
      "integrity": "sha512-NiDhxQtLaLy7AjrT4kkHUl/suLnuPR0nZNgisf9SkNGR3qSIFNCCNZcr87K7LWbt2hfHwjFwh+WU9zJTI+c4HQ==",
      "requires": {
        "arr-exclude": "^1.0.0",
        "execa": "^0.7.0",
        "has-yarn": "^1.0.0",
        "read-pkg-up": "^2.0.0",
        "write-pkg": "^3.1.0"
      }
    },
    "balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw=="
    },
    "base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "requires": {
        "safe-buffer": "^5.0.1"
      }
    },
    "base64url": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/base64url/-/base64url-3.0.1.tgz",
      "integrity": "sha512-ir1UPr3dkwexU7FdV8qBBbNDRUhMmIekYMFZfi+C/sLNnRESKPl23nB9b2pltqfOQNnGzsDdId90AEtG5tCx4A=="
    },
    "binary-extensions": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.2.0.tgz",
      "integrity": "sha512-jDctJ/IVQbZoJykoeHbhXpOlNBqGNcwXJKJog42E5HDPUwQTSdjCHdihjj0DlnheQ7blbT6dHOafNAiS8ooQKA=="
    },
    "blueimp-md5": {
      "version": "2.19.0",
      "resolved": "https://registry.npmjs.org/blueimp-md5/-/blueimp-md5-2.19.0.tgz",
      "integrity": "sha512-DRQrD6gJyy8FbiE4s+bDoXS9hiW3Vbx5uCdwvcCf3zLHL+Iv7LtGHLpr+GZV8rHG8tK766FGYBwRbu8pELTt+w=="
    },
    "bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ=="
    },
    "borsh": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.5.0.tgz",
      "integrity": "sha512-p9w/qGBeeFdUf2GPBPHdX5JQyez8K5VtoFN7PqSfmR+cVUMSmcwAKhP9n2aXoDSKbtS7xZlZt3MVnrJL7GdYhg==",
      "requires": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "braces": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.2.tgz",
      "integrity": "sha512-b8um+L1RzM3WDSzvhm6gIz1yfTbBt6YTlcEKAvsmqCZZFw46z626lVj9j1yEPW33H5H+lBQpZMP1k8l+78Ha0A==",
      "requires": {
        "fill-range": "^7.0.1"
      }
    },
    "browserslist": {
      "version": "4.20.3",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.20.3.tgz",
      "integrity": "sha512-NBhymBQl1zM0Y5dQT/O+xiLP9/rzOIQdKM/eMJBAq7yBgaB6krIYLGejrwVYnSHZdqjscB1SPuAjHwxjvN6Wdg==",
      "requires": {
        "caniuse-lite": "^1.0.30001332",
        "electron-to-chromium": "^1.4.118",
        "escalade": "^3.1.1",
        "node-releases": "^2.0.3",
        "picocolors": "^1.0.0"
      }
    },
    "bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "requires": {
        "base-x": "^3.0.2"
      }
    },
    "builtin-modules": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/builtin-modules/-/builtin-modules-3.3.0.tgz",
      "integrity": "sha512-zhaCDicdLuWN5UbN5IMnFqNMhNfo919sH85y2/ea+5Yg9TsTkeZxpL+JLbp6cgYFS4sRLp3YV4S6yDuqVWHYOw=="
    },
    "cacheable-lookup": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/cacheable-lookup/-/cacheable-lookup-5.0.4.tgz",
      "integrity": "sha512-2/kNscPhpcxrOigMZzbiWF7dz8ilhb/nIHU3EyZiXWXpeq/au8qJ8VhdftMkty3n7Gj6HIGalQG8oiBNB3AJgA=="
    },
    "cacheable-request": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/cacheable-request/-/cacheable-request-7.0.2.tgz",
      "integrity": "sha512-pouW8/FmiPQbuGpkXQ9BAPv/Mo5xDGANgSNXzTzJ8DrKGuXOssM4wIQRjfanNRh3Yu5cfYPvcorqbhg2KIJtew==",
      "requires": {
        "clone-response": "^1.0.2",
        "get-stream": "^5.1.0",
        "http-cache-semantics": "^4.0.0",
        "keyv": "^4.0.0",
        "lowercase-keys": "^2.0.0",
        "normalize-url": "^6.0.1",
        "responselike": "^2.0.0"
      },
      "dependencies": {
        "get-stream": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
          "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
          "requires": {
            "pump": "^3.0.0"
          }
        }
      }
    },
    "callsites": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-4.0.0.tgz",
      "integrity": "sha512-y3jRROutgpKdz5vzEhWM34TidDU8vkJppF8dszITeb1PQmSqV3DTxyV8G/lyO/DNvtE1YTedehmw9MPZsCBHxQ=="
    },
    "caniuse-lite": {
      "version": "1.0.30001343",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001343.tgz",
      "integrity": "sha512-8KeCrAtPMabo/XW14B+R9sZYoClx1n0b+WYgwDKZPtWR3TcdvWzdSy7mPyFEmR5WU1St9v1PW6sdO5dkFOEzfA=="
    },
    "capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg=="
    },
    "cbor": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/cbor/-/cbor-8.1.0.tgz",
      "integrity": "sha512-DwGjNW9omn6EwP70aXsn7FQJx5kO12tX0bZkaTjzdVFM6/7nhA4t0EENocKGx6D2Bch9PE2KzCUf5SceBdeijg==",
      "requires": {
        "nofilter": "^3.1.0"
      }
    },
    "chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "requires": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "3.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
          "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
          "requires": {
            "color-convert": "^1.9.0"
          }
        },
        "escape-string-regexp": {
          "version": "1.0.5",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
          "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
        }
      }
    },
    "charcodes": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/charcodes/-/charcodes-0.2.0.tgz",
      "integrity": "sha512-Y4kiDb+AM4Ecy58YkuZrrSRJBDQdQ2L+NyS1vHHFtNtUjgutcZfx3yp1dAONI/oPaPmyGfCLx5CxL+zauIMyKQ=="
    },
    "chokidar": {
      "version": "3.5.3",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.5.3.tgz",
      "integrity": "sha512-Dr3sfKRP6oTcjf2JmUmFJfeVMvXBdegxB0iVQ5eb2V10uFJUCAS8OByZdVAyVb8xXNz3GjjTgj9kLWsZTqE6kw==",
      "requires": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "fsevents": "~2.3.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      }
    },
    "chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ=="
    },
    "chunkd": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/chunkd/-/chunkd-2.0.1.tgz",
      "integrity": "sha512-7d58XsFmOq0j6el67Ug9mHf9ELUXsQXYJBkyxhH/k+6Ke0qXRnv0kbemx+Twc6fRJ07C49lcbdgm9FL1Ei/6SQ=="
    },
    "ci-info": {
      "version": "3.7.1",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.7.1.tgz",
      "integrity": "sha512-4jYS4MOAaCIStSRwiuxc4B8MYhIe676yO1sYGzARnjXkWpmzZMMYxY6zu8WYWDhSuth5zhrQ1rhNSibyyvv4/w=="
    },
    "ci-parallel-vars": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ci-parallel-vars/-/ci-parallel-vars-1.0.1.tgz",
      "integrity": "sha512-uvzpYrpmidaoxvIQHM+rKSrigjOe9feHYbw4uOI2gdfe1C3xIlxO+kVXq83WQWNniTf8bAxVpy+cQeFQsMERKg=="
    },
    "clean-stack": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-4.2.0.tgz",
      "integrity": "sha512-LYv6XPxoyODi36Dp976riBtSY27VmFo+MKqEU9QCCWyTrdEPDog+RWA7xQWHi6Vbp61j5c4cdzzX1NidnwtUWg==",
      "requires": {
        "escape-string-regexp": "5.0.0"
      }
    },
    "clean-yaml-object": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/clean-yaml-object/-/clean-yaml-object-0.1.0.tgz",
      "integrity": "sha512-3yONmlN9CSAkzNwnRCiJQ7Q2xK5mWuEfL3PuTZcAUzhObbXsfsnMptJzXwz93nc5zn9V9TwCVMmV7w4xsm43dw=="
    },
    "cli-truncate": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-truncate/-/cli-truncate-3.1.0.tgz",
      "integrity": "sha512-wfOBkjXteqSnI59oPcJkcPl/ZmwvMMOj340qUIY1SKZCv0B9Cf4D4fAucRkIKQmsIuYK3x1rrgU7MeGRruiuiA==",
      "requires": {
        "slice-ansi": "^5.0.0",
        "string-width": "^5.0.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
          "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA=="
        },
        "emoji-regex": {
          "version": "9.2.2",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
          "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg=="
        },
        "string-width": {
          "version": "5.1.2",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
          "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
          "requires": {
            "eastasianwidth": "^0.2.0",
            "emoji-regex": "^9.2.2",
            "strip-ansi": "^7.0.1"
          }
        },
        "strip-ansi": {
          "version": "7.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
          "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
          "requires": {
            "ansi-regex": "^6.0.1"
          }
        }
      }
    },
    "cliui": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-7.0.4.tgz",
      "integrity": "sha512-OcRE68cOsVMXp1Yvonl/fzkQOyjLSu/8bhPDfQt0e0/Eb283TKP20Fs2MqoPsr9SwA595rRCA+QMzYc9nBP+JQ==",
      "requires": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.0",
        "wrap-ansi": "^7.0.0"
      }
    },
    "clone-response": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/clone-response/-/clone-response-1.0.3.tgz",
      "integrity": "sha512-ROoL94jJH2dUVML2Y/5PEDNaSHgeOdSDicUyS7izcF63G6sTc/FTjLub4b8Il9S8S0beOfYt0TaA5qvFK+w0wA==",
      "requires": {
        "mimic-response": "^1.0.0"
      }
    },
    "code-excerpt": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/code-excerpt/-/code-excerpt-4.0.0.tgz",
      "integrity": "sha512-xxodCmBen3iy2i0WtAK8FlFNrRzjUqjRsMfho58xT/wvZU1YTM3fCnRjcy1gJPMepaRlgm/0e6w8SpWHpn3/cA==",
      "requires": {
        "convert-to-spaces": "^2.0.1"
      }
    },
    "color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "requires": {
        "color-name": "1.1.3"
      }
    },
    "color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU="
    },
    "common-path-prefix": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/common-path-prefix/-/common-path-prefix-3.0.0.tgz",
      "integrity": "sha512-QE33hToZseCH3jS0qN96O/bSh3kaw/h+Tq7ngyY9eWDUnTlTNUyqfqvCXioLe5Na5jFsL78ra/wuBU4iuEgd4w=="
    },
    "commondir": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/commondir/-/commondir-1.0.1.tgz",
      "integrity": "sha1-3dgA2gxmEnOTzKWVDqloo6rxJTs="
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s="
    },
    "concordance": {
      "version": "5.0.4",
      "resolved": "https://registry.npmjs.org/concordance/-/concordance-5.0.4.tgz",
      "integrity": "sha512-OAcsnTEYu1ARJqWVGwf4zh4JDfHZEaSNlNccFmt8YjB2l/n19/PF2viLINHc57vO4FKIAFl2FWASIGZZWZ2Kxw==",
      "requires": {
        "date-time": "^3.1.0",
        "esutils": "^2.0.3",
        "fast-diff": "^1.2.0",
        "js-string-escape": "^1.0.1",
        "lodash": "^4.17.15",
        "md5-hex": "^3.0.1",
        "semver": "^7.3.2",
        "well-known-symbols": "^2.0.0"
      },
      "dependencies": {
        "lru-cache": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
          "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
          "requires": {
            "yallist": "^4.0.0"
          }
        },
        "semver": {
          "version": "7.3.8",
          "resolved": "https://registry.npmjs.org/semver/-/semver-7.3.8.tgz",
          "integrity": "sha512-NB1ctGL5rlHrPJtFDVIVzTyQylMLu9N9VICA6HSFJo8MCGVTMW6gfpicwKmmK/dAjTOrqu5l63JJOpDSrAis3A==",
          "requires": {
            "lru-cache": "^6.0.0"
          }
        },
        "yallist": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
      }
    },
    "convert-source-map": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-1.8.0.tgz",
      "integrity": "sha512-+OQdjP49zViI/6i7nIJpA8rAl4sV/JdPfU9nZs3VqOwGIgizICvuN2ru6fMd+4llL0tar18UYJXfZ/TWtmhUjA==",
      "requires": {
        "safe-buffer": "~5.1.1"
      }
    },
    "convert-to-spaces": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/convert-to-spaces/-/convert-to-spaces-2.0.1.tgz",
      "integrity": "sha512-rcQ1bsQO9799wq24uE5AM2tAILy4gXGIK/njFWcVQkGNZ96edlpY+A7bjwvzjYvLDyzmG1MmMLZhpcsb+klNMQ=="
    },
    "cross-spawn": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-5.1.0.tgz",
      "integrity": "sha512-pTgQJ5KC0d2hcY8eyL1IzlBPYjTkyH72XRZPnLyKus2mBfNjQs3klqbJU2VILqZryAZUt9JOb3h/mWMy23/f5A==",
      "requires": {
        "lru-cache": "^4.0.1",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      }
    },
    "currently-unhandled": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/currently-unhandled/-/currently-unhandled-0.4.1.tgz",
      "integrity": "sha512-/fITjgjGU50vjQ4FH6eUoYu+iUoUKIXws2hL15JJpIR+BbTxaXQsMuuyjtNh2WqsSBS5nsaZHFsFecyw5CCAng==",
      "requires": {
        "array-find-index": "^1.0.1"
      }
    },
    "date-time": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/date-time/-/date-time-3.1.0.tgz",
      "integrity": "sha512-uqCUKXE5q1PNBXjPqvwhwJf9SwMoAHBgWJ6DcrnS5o+W2JOiIILl0JEdVD8SGujrNS02GGxgwAg2PN2zONgtjg==",
      "requires": {
        "time-zone": "^1.0.0"
      }
    },
    "debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "requires": {
        "ms": "2.1.2"
      },
      "dependencies": {
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "decode-uri-component": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/decode-uri-component/-/decode-uri-component-0.2.0.tgz",
      "integrity": "sha1-6zkTMzRYd1y4TNGh+uBiEGu4dUU="
    },
    "decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "requires": {
        "mimic-response": "^3.1.0"
      },
      "dependencies": {
        "mimic-response": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
          "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ=="
        }
      }
    },
    "deepmerge": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.2.2.tgz",
      "integrity": "sha512-FJ3UgI4gIl+PHZm53knsuSFpE+nESMr7M4v9QcgB7S63Kj/6WqMiFQJpBBYz1Pt+66bZpP3Q7Lye0Oo9MPKEdg=="
    },
    "defer-to-connect": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/defer-to-connect/-/defer-to-connect-2.0.1.tgz",
      "integrity": "sha512-4tvttepXG1VaYGrRibk5EwJd1t4udunSOVMdLSAL6mId1ix438oPwPZMALY41FCijukO1L0twNcGsdzS7dHgDg=="
    },
    "del": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/del/-/del-7.0.0.tgz",
      "integrity": "sha512-tQbV/4u5WVB8HMJr08pgw0b6nG4RGt/tj+7Numvq+zqcvUFeMaIWWOUFltiU+6go8BSO2/ogsB4EasDaj0y68Q==",
      "requires": {
        "globby": "^13.1.2",
        "graceful-fs": "^4.2.10",
        "is-glob": "^4.0.3",
        "is-path-cwd": "^3.0.0",
        "is-path-inside": "^4.0.0",
        "p-map": "^5.5.0",
        "rimraf": "^3.0.2",
        "slash": "^4.0.0"
      }
    },
    "depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw=="
    },
    "detect-indent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/detect-indent/-/detect-indent-5.0.0.tgz",
      "integrity": "sha512-rlpvsxUtM0PQvy9iZe640/IWwWYyBsTApREbA1pHOpmOUIl9MkP/U4z7vTtg4Oaojvqhxt7sdufnT0EzGaR31g=="
    },
    "dir-glob": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/dir-glob/-/dir-glob-3.0.1.tgz",
      "integrity": "sha512-WkrWp9GR4KXfKGYzOLmTuGVi1UWFfws377n9cc55/tb6DuqyF6pcQ5AbiHEshaDpY9v6oaSr2XCDidGmMwdzIA==",
      "requires": {
        "path-type": "^4.0.0"
      },
      "dependencies": {
        "path-type": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/path-type/-/path-type-4.0.0.tgz",
          "integrity": "sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw=="
        }
      }
    },
    "eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA=="
    },
    "electron-to-chromium": {
      "version": "1.4.139",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.4.139.tgz",
      "integrity": "sha512-lYxzcUCjWxxVug+A7UxBCUiVr13TCjfZFYJS9Lq1VpU/ErwV4a6zUQo9dfojuGpw/L/x9REGuBl6ICQPGgbs3g=="
    },
    "emittery": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-1.0.1.tgz",
      "integrity": "sha512-2ID6FdrMD9KDLldGesP6317G78K7km/kMcwItRtVFva7I/cSEOIaLpewaUb+YLXVwdAp3Ctfxh/V5zIl1sj7dQ=="
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A=="
    },
    "end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "requires": {
        "once": "^1.4.0"
      }
    },
    "error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "requires": {
        "is-arrayish": "^0.2.1"
      }
    },
    "error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "requires": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw=="
    },
    "escape-string-regexp": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-5.0.0.tgz",
      "integrity": "sha512-/veY75JbMK4j1yjvuUxuVsiS/hr/4iHs9FTT6cgTexxdE0Ly/glccBAkloH/DofkjRbZU3bnoj38mOmhkZ0lHw=="
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A=="
    },
    "estree-walker": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/estree-walker/-/estree-walker-2.0.2.tgz",
      "integrity": "sha512-Rfkk/Mp/DL7JVje3u18FxFujQlTNR2q6QfMSMB7AvCBx91NGj/ba3kCfza0f6dVDbw7YlRf/nDrn7pQrCCyQ/w=="
    },
    "esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g=="
    },
    "execa": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/execa/-/execa-0.7.0.tgz",
      "integrity": "sha512-RztN09XglpYI7aBBrJCPW95jEH7YF1UEPOoX9yDhUTPdp7mK+CQvnLTuD10BNXZ3byLTu2uehZ8EcKT/4CGiFw==",
      "requires": {
        "cross-spawn": "^5.0.1",
        "get-stream": "^3.0.0",
        "is-stream": "^1.1.0",
        "npm-run-path": "^2.0.0",
        "p-finally": "^1.0.0",
        "signal-exit": "^3.0.0",
        "strip-eof": "^1.0.0"
      }
    },
    "fast-diff": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
      "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w=="
    },
    "fast-glob": {
      "version": "3.2.12",
      "resolved": "https://registry.npmjs.org/fast-glob/-/fast-glob-3.2.12.tgz",
      "integrity": "sha512-DVj4CQIYYow0BlaelwK1pHl5n5cRSJfM60UA0zK891sVInoPri2Ekj7+e1CT3/3qxXenpI+nBBmQAcJPJgaj4w==",
      "requires": {
        "@nodelib/fs.stat": "^2.0.2",
        "@nodelib/fs.walk": "^1.2.3",
        "glob-parent": "^5.1.2",
        "merge2": "^1.3.0",
        "micromatch": "^4.0.4"
      }
    },
    "fastq": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/fastq/-/fastq-1.15.0.tgz",
      "integrity": "sha512-wBrocU2LCXXa+lWBt8RoIRD89Fi8OdABODa/kEnyeyjS5aZO5/GNvI5sEINADqP/h8M29UHTHUb53sUu5Ihqdw==",
      "requires": {
        "reusify": "^1.0.4"
      }
    },
    "figures": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-5.0.0.tgz",
      "integrity": "sha512-ej8ksPF4x6e5wvK9yevct0UCXh8TTFlWGVLlgjZuoBH1HwjIfKE/IdL5mq89sFA7zELi1VhKpmtDnrs7zWyeyg==",
      "requires": {
        "escape-string-regexp": "^5.0.0",
        "is-unicode-supported": "^1.2.0"
      }
    },
    "fill-range": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.0.1.tgz",
      "integrity": "sha512-qOo9F+dMUmC2Lcb4BbVvnKJxTPjCm+RRpe4gDuGrzkL7mEVl/djYSu2OdQ2Pa302N4oqkSg9ir6jaLWJ2USVpQ==",
      "requires": {
        "to-regex-range": "^5.0.1"
      }
    },
    "find-up": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-2.1.0.tgz",
      "integrity": "sha512-NWzkk0jSJtTt08+FBFMvXoeZnOJD+jTtsRmBYbAIzJdX6l7dLgR7CTubCM5/eDdPUBvLCeVasP1brfVR/9/EZQ==",
      "requires": {
        "locate-path": "^2.0.0"
      }
    },
    "fs-extra": {
      "version": "10.1.0",
      "resolved": "https://registry.npmjs.org/fs-extra/-/fs-extra-10.1.0.tgz",
      "integrity": "sha512-oRXApq54ETRj4eMiFzGnHWGy+zo5raudjuxN0b8H7s/RU2oW0Wvsx9O0ACRN/kRq9E8Vu/ReskGB5o3ji+FzHQ==",
      "requires": {
        "graceful-fs": "^4.2.0",
        "jsonfile": "^6.0.1",
        "universalify": "^2.0.0"
      }
    },
    "fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "requires": {
        "minipass": "^3.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        },
        "yallist": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8="
    },
    "function-bind": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.1.tgz",
      "integrity": "sha512-yIovAzMX49sF8Yl58fSCWJ5svSLuaibPxXQJFLmBObTuCr0Mf1KiPopGM9NiFjiYBCbfaa2Fh6breQ6ANVTI0A=="
    },
    "gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg=="
    },
    "get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg=="
    },
    "get-stream": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-3.0.0.tgz",
      "integrity": "sha512-GlhdIUuVakc8SJ6kK0zAFbiGzRFzNnY4jUuEbV9UROo4Y+0Ny4fjvcZFVTeDA4odpFyOQzaw6hXukJSq/f28sQ=="
    },
    "glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "11.12.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-11.12.0.tgz",
      "integrity": "sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA=="
    },
    "globby": {
      "version": "13.1.3",
      "resolved": "https://registry.npmjs.org/globby/-/globby-13.1.3.tgz",
      "integrity": "sha512-8krCNHXvlCgHDpegPzleMq07yMYTO2sXKASmZmquEYWEmCx6J5UTRbp5RwMJkTJGtcQ44YpiUYUiN0b9mzy8Bw==",
      "requires": {
        "dir-glob": "^3.0.1",
        "fast-glob": "^3.2.11",
        "ignore": "^5.2.0",
        "merge2": "^1.4.1",
        "slash": "^4.0.0"
      }
    },
    "got": {
      "version": "11.8.6",
      "resolved": "https://registry.npmjs.org/got/-/got-11.8.6.tgz",
      "integrity": "sha512-6tfZ91bOr7bOXnK7PRDCGBLa1H4U080YHNaAQ2KsMGlLEzRbk44nsZF2E1IeRc3vtJHPVbKCYgdFbaGO2ljd8g==",
      "requires": {
        "@sindresorhus/is": "^4.0.0",
        "@szmarczak/http-timer": "^4.0.5",
        "@types/cacheable-request": "^6.0.1",
        "@types/responselike": "^1.0.0",
        "cacheable-lookup": "^5.0.3",
        "cacheable-request": "^7.0.2",
        "decompress-response": "^6.0.0",
        "http2-wrapper": "^1.0.0-beta.5.2",
        "lowercase-keys": "^2.0.0",
        "p-cancelable": "^2.0.0",
        "responselike": "^2.0.0"
      }
    },
    "graceful-fs": {
      "version": "4.2.10",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.10.tgz",
      "integrity": "sha512-9ByhssR2fPVsNZj478qUUbKfmL0+t5BDVyjShtyZZLiK7ZDAArFFfopyOTj0M05wE2tJPisA4iTnnXl2YoPvOA=="
    },
    "has": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/has/-/has-1.0.3.tgz",
      "integrity": "sha512-f2dvO0VU6Oej7RkWJGrehjbzMAjFp5/VKPp5tTpWIV4JHHZK1/BxbFRtf/siA2SWTe09caDmVtYYzWEIbBS4zw==",
      "requires": {
        "function-bind": "^1.1.1"
      }
    },
    "has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0="
    },
    "has-yarn": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/has-yarn/-/has-yarn-1.0.0.tgz",
      "integrity": "sha512-UAI4b48aqrdez88CwMfC9s+gcJ25O1qg0/hS5eKOsIF5tOw2EYcgGsryYF6TEI5G8SeCYzFBt5Z04D/BDABYSQ=="
    },
    "hosted-git-info": {
      "version": "2.8.9",
      "resolved": "https://registry.npmjs.org/hosted-git-info/-/hosted-git-info-2.8.9.tgz",
      "integrity": "sha512-mxIDAb9Lsm6DoOJ7xH+5+X4y1LU/4Hi50L9C5sIswK3JzULS4bwk1FvjdBgvYR4bzT4tuUQiC15FE2f5HbLvYw=="
    },
    "http-cache-semantics": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.1.0.tgz",
      "integrity": "sha512-carPklcUh7ROWRK7Cv27RPtdhYhUsela/ue5/jKzjegVvXDqM2ILE9Q2BGn9JZJh1g87cp56su/FgQSzcWS8cQ=="
    },
    "http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "requires": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "dependencies": {
        "depd": {
          "version": "1.1.2",
          "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
          "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ=="
        }
      }
    },
    "http2-wrapper": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/http2-wrapper/-/http2-wrapper-1.0.3.tgz",
      "integrity": "sha512-V+23sDMr12Wnz7iTcDeJr3O6AIxlnvT/bmaAAAP/Xda35C90p9599p0F1eHR/N1KILWSoWVAiOMFjBBXaXSMxg==",
      "requires": {
        "quick-lru": "^5.1.1",
        "resolve-alpn": "^1.0.0"
      }
    },
    "ignore": {
      "version": "5.2.4",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-5.2.4.tgz",
      "integrity": "sha512-MAb38BcSbH0eHNBxn7ql2NH/kX33OkB3lZ1BNdh7ENeRChHTYsTvWrMubiIAMNS2llXEEgZ1MUOBtXChP3kaFQ=="
    },
    "ignore-by-default": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-2.1.0.tgz",
      "integrity": "sha512-yiWd4GVmJp0Q6ghmM2B/V3oZGRmjrKLXvHR3TE1nfoXsmoggllfZUQe74EN0fJdPFZu2NIvNdrMMLm3OsV7Ohw=="
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA=="
    },
    "indent-string": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-5.0.0.tgz",
      "integrity": "sha512-m6FAo/spmsW2Ab2fU35JTYwtOKa2yAwXSwgjSv1TJzh4Mh7mC3lzAOVLBprb72XsTrgkEIsl7YrFNAiDiRhIGg=="
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ=="
    },
    "irregular-plurals": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/irregular-plurals/-/irregular-plurals-3.3.0.tgz",
      "integrity": "sha512-MVBLKUTangM3EfRPFROhmWQQKRDsrgI83J8GS3jXy+OwYqiR2/aoWndYQ5416jLE3uaGgLH7ncme3X9y09gZ3g=="
    },
    "is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg=="
    },
    "is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "requires": {
        "binary-extensions": "^2.0.0"
      }
    },
    "is-builtin-module": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/is-builtin-module/-/is-builtin-module-3.1.0.tgz",
      "integrity": "sha512-OV7JjAgOTfAFJmHZLvpSTb4qi0nIILDV1gWPYDnDJUTNFM5aGlRAhk4QcT8i7TuAleeEV5Fdkqn3t4mS+Q11fg==",
      "requires": {
        "builtin-modules": "^3.0.0"
      }
    },
    "is-core-module": {
      "version": "2.9.0",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.9.0.tgz",
      "integrity": "sha512-+5FPy5PnwmO3lvfMb0AsoPaBG+5KHUI0wYFXOtYPnVVVspTFUuMZNfNaNVRt3FZadstu2c8x23vykRW/NBoU6A==",
      "requires": {
        "has": "^1.0.3"
      }
    },
    "is-error": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/is-error/-/is-error-2.2.2.tgz",
      "integrity": "sha512-IOQqts/aHWbiisY5DuPJQ0gcbvaLFCa7fBa9xoLfxBZvQ+ZI/Zh9xoI7Gk+G64N0FdK4AbibytHht2tWgpJWLg=="
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ=="
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg=="
    },
    "is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "is-module": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/is-module/-/is-module-1.0.0.tgz",
      "integrity": "sha1-Mlj7afeMFNW4FdZkM2tM/7ZEFZE="
    },
    "is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng=="
    },
    "is-path-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-path-cwd/-/is-path-cwd-3.0.0.tgz",
      "integrity": "sha512-kyiNFFLU0Ampr6SDZitD/DwUo4Zs1nSdnygUBqsu3LooL00Qvb5j+UnvApUn/TTj1J3OuE6BTdQ5rudKmU2ZaA=="
    },
    "is-path-inside": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-path-inside/-/is-path-inside-4.0.0.tgz",
      "integrity": "sha512-lJJV/5dYS+RcL8uQdBDW9c9uWFLLBNRyFhnAKXw5tVqLlKZ4RMGZKv+YQ/IA3OhD+RpbJa1LLFM1FQPGyIXvOA=="
    },
    "is-plain-obj": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-plain-obj/-/is-plain-obj-1.1.0.tgz",
      "integrity": "sha512-yvkRyxmFKEOQ4pNXCmJG5AEQNlXJS5LaONXo5/cLdTZdWvsZ1ioJEonLGAosKlMWE8lwUy/bJzMjcw8az73+Fg=="
    },
    "is-plain-object": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz",
      "integrity": "sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q=="
    },
    "is-promise": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/is-promise/-/is-promise-4.0.0.tgz",
      "integrity": "sha512-hvpoI6korhJMnej285dSg6nu1+e6uxs7zG3BYAm5byqDsgJNWwxzM6z6iZiAgQR4TJ30JmBTOwqZUw3WlyH3AQ=="
    },
    "is-reference": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/is-reference/-/is-reference-1.2.1.tgz",
      "integrity": "sha512-U82MsXXiFIrjCK4otLT+o2NA2Cd2g5MLoOVXUZjIOhLurrRxpEXzI8O0KZHr3IjLvlAH1kTPYSuqer5T9ZVBKQ==",
      "requires": {
        "@types/estree": "*"
      }
    },
    "is-stream": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-1.1.0.tgz",
      "integrity": "sha512-uQPm8kcs47jx38atAcWTVxyltQYoPT68y9aWYdV6yWXSyW8mzSat0TL6CiWdZeCdF3KrAvpVtnHbTv4RN+rqdQ=="
    },
    "is-unicode-supported": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/is-unicode-supported/-/is-unicode-supported-1.3.0.tgz",
      "integrity": "sha512-43r2mRvz+8JRIKnWJ+3j8JtjRKZ6GmjzfaE/qiBJnikNnYv/6bagRJ1kUhNk8R5EX/GkobD+r+sfxCPJsiKBLQ=="
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw=="
    },
    "js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA=="
    },
    "js-string-escape": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/js-string-escape/-/js-string-escape-1.0.1.tgz",
      "integrity": "sha512-Smw4xcfIQ5LVjAOuJCvN/zIodzA/BBSsluuoSykP+lUvScIi4U6RJLfwHet5cxFnCswUjISV8oAXaqaJDY3chg=="
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ=="
    },
    "js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "jsesc": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-2.5.2.tgz",
      "integrity": "sha512-OYu7XEzjkCQ3C5Ps3QIZsQfNpqoJyZZA99wd9aWd05NCtC5pWOkShK2mkL6HXQR6/Cy2lbNdPlZBpuQHXE63gA=="
    },
    "json-buffer": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/json-buffer/-/json-buffer-3.0.1.tgz",
      "integrity": "sha512-4bV5BfR2mqfQTJm+V5tPPdf+ZpuhiIvTuAB5g8kcrXOZpTT/QwwVRWBywX1ozr6lEuPdbHxwaJlm9G6mI2sfSQ=="
    },
    "json5": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.1.tgz",
      "integrity": "sha512-1hqLFMSrGHRHxav9q9gNjJ5EXznIxGVO09xQRrwplcS8qs28pZ8s8hupZAmqDwZUmVZ2Qb2jnyPOWcDH8m8dlA=="
    },
    "jsonfile": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/jsonfile/-/jsonfile-6.1.0.tgz",
      "integrity": "sha512-5dgndWOriYSm5cnYaJNhalLNDKOqFwyDB/rr1E9ZsGciGvKPs8R2xYGCacuf3z6K1YKDz182fd+fY3cn3pMqXQ==",
      "requires": {
        "graceful-fs": "^4.1.6",
        "universalify": "^2.0.0"
      }
    },
    "keyv": {
      "version": "4.5.2",
      "resolved": "https://registry.npmjs.org/keyv/-/keyv-4.5.2.tgz",
      "integrity": "sha512-5MHbFaKn8cNSmVW7BYnijeAVlE4cYA/SVkifVgrh7yotnfhKmjuXpDKjrABLnT0SfHWV21P8ow07OGfRrNDg8g==",
      "requires": {
        "json-buffer": "3.0.1"
      }
    },
    "load-json-file": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-7.0.1.tgz",
      "integrity": "sha512-Gnxj3ev3mB5TkVBGad0JM6dmLiQL+o0t23JPBZ9sd+yvSLk05mFoqKBw5N8gbbkU4TNXyqCgIrl/VM17OgUIgQ=="
    },
    "locate-path": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-2.0.0.tgz",
      "integrity": "sha512-NCI2kiDkyR7VeEKm27Kda/iQHyKJe1Bu0FlTbYp3CqJu+9IFe9bLyAjMxf5ZDDbEg+iMPzB5zYyUTSm8wVTKmA==",
      "requires": {
        "p-locate": "^2.0.0",
        "path-exists": "^3.0.0"
      },
      "dependencies": {
        "path-exists": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-3.0.0.tgz",
          "integrity": "sha512-bpC7GYwiDYQ4wYLe+FA8lhRjhQCMcQGuSgGGqDkg/QerRWw9CmGRT0iSOVRSZJ29NMLZgIzqaljJ63oaL4NIJQ=="
        }
      }
    },
    "lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg=="
    },
    "lodash-es": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash-es/-/lodash-es-4.17.21.tgz",
      "integrity": "sha512-mKnC+QJ9pWVzv+C4/U3rRsHapFfHvQFoFB92e52xeyGMcX6/OlIl78je1u8vePzYZSkkogMPJ2yjxxsb89cxyw=="
    },
    "lowercase-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/lowercase-keys/-/lowercase-keys-2.0.0.tgz",
      "integrity": "sha512-tqNXrS78oMOE73NMxK4EMLQsQowWf8jKooH9g7xPavRT706R6bkQJ6DY2Te7QukaZsulxa30wQ7bk0pm4XiHmA=="
    },
    "lru-cache": {
      "version": "4.1.5",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.1.5.tgz",
      "integrity": "sha512-sWZlbEP2OsHNkXrMl5GYk/jKk70MBng6UU4YI/qGDYbgf6YbP4EvmqISbXCoJiRKs+1bSpFHVgQxvJ17F2li5g==",
      "requires": {
        "pseudomap": "^1.0.2",
        "yallist": "^2.1.2"
      }
    },
    "magic-string": {
      "version": "0.25.9",
      "resolved": "https://registry.npmjs.org/magic-string/-/magic-string-0.25.9.tgz",
      "integrity": "sha512-RmF0AsMzgt25qzqqLc1+MbHmhdx0ojF2Fvs4XnOqz2ZOBXzzkEwc/dJQZCYHAn7v1jbVOjAZfK8msRn4BxO4VQ==",
      "requires": {
        "sourcemap-codec": "^1.4.8"
      }
    },
    "make-dir": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-1.3.0.tgz",
      "integrity": "sha512-2w31R7SJtieJJnQtGc7RVL2StM2vGYVfqUOvUDxH6bC6aJTxPxTF0GnIgCyu7tjockiUWAYQRbxa7vKn34s5sQ==",
      "requires": {
        "pify": "^3.0.0"
      },
      "dependencies": {
        "pify": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
          "integrity": "sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg=="
        }
      }
    },
    "map-age-cleaner": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/map-age-cleaner/-/map-age-cleaner-0.1.3.tgz",
      "integrity": "sha512-bJzx6nMoP6PDLPBFmg7+xRKeFZvFboMrGlxmNj9ClvX53KrmvM5bXFXEWjbz4cz1AFn+jWJ9z/DJSz7hrs0w3w==",
      "requires": {
        "p-defer": "^1.0.0"
      }
    },
    "matcher": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/matcher/-/matcher-5.0.0.tgz",
      "integrity": "sha512-s2EMBOWtXFc8dgqvoAzKJXxNHibcdJMV0gwqKUaw9E2JBJuGUK7DrNKrA6g/i+v72TT16+6sVm5mS3thaMLQUw==",
      "requires": {
        "escape-string-regexp": "^5.0.0"
      }
    },
    "md5-hex": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/md5-hex/-/md5-hex-3.0.1.tgz",
      "integrity": "sha512-BUiRtTtV39LIJwinWBjqVsU9xhdnz7/i889V859IBFpuqGAj6LuOvHv5XLbgZ2R7ptJoJaEcxkv88/h25T7Ciw==",
      "requires": {
        "blueimp-md5": "^2.10.0"
      }
    },
    "mem": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/mem/-/mem-9.0.2.tgz",
      "integrity": "sha512-F2t4YIv9XQUBHt6AOJ0y7lSmP1+cY7Fm1DRh9GClTGzKST7UWLMx6ly9WZdLH/G/ppM5RL4MlQfRT71ri9t19A==",
      "requires": {
        "map-age-cleaner": "^0.1.3",
        "mimic-fn": "^4.0.0"
      }
    },
    "merge2": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/merge2/-/merge2-1.4.1.tgz",
      "integrity": "sha512-8q7VEgMJW4J8tcfVPy8g09NcQwZdbwFEqhe/WZkoIzjn/3TGDwtOCYtXGxA3O8tPzpczCCDgv+P2P5y00ZJOOg=="
    },
    "micromatch": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.5.tgz",
      "integrity": "sha512-DMy+ERcEW2q8Z2Po+WNXuw3c5YaUSFjAO5GsJqfEl7UjvtIuFKO6ZrKvcItdy98dwFI2N1tg3zNIdKaQT+aNdA==",
      "requires": {
        "braces": "^3.0.2",
        "picomatch": "^2.3.1"
      }
    },
    "mimic-fn": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-4.0.0.tgz",
      "integrity": "sha512-vqiC06CuhBTUdZH+RYl8sFrL096vA45Ok5ISO6sE/Mr1jRbGH4Csnhi8f3wKVl7x8mO4Au7Ir9D3Oyv1VYMFJw=="
    },
    "mimic-response": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-1.0.1.tgz",
      "integrity": "sha512-j5EctnkH7amfV/q5Hgmoal1g2QHFJRraOtmx0JpIqkxhBhI/lJSl1nMpQ45hVarwNETOoWEimndZ4QK0RHxuxQ=="
    },
    "minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minipass": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-4.0.0.tgz",
      "integrity": "sha512-g2Uuh2jEKoht+zvO6vJqXmYpflPqzRBT+Th2h01DKh5z7wbY/AZ2gCQ78cP70YoHPyFdY30YBV5WxgLOEwOykw==",
      "requires": {
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "yallist": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
      }
    },
    "minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "requires": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "minipass": {
          "version": "3.3.6",
          "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
          "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
          "requires": {
            "yallist": "^4.0.0"
          }
        },
        "yallist": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
      }
    },
    "mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw=="
    },
    "ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA=="
    },
    "mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ=="
    },
    "near-api-js": {
      "version": "0.44.2",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-0.44.2.tgz",
      "integrity": "sha512-eMnc4V+geggapEUa3nU2p8HSHn/njtloI4P2mceHQWO8vDE1NGpnAw8FuTBrLmXSgIv9m6oocgFc9t3VNf5zwg==",
      "requires": {
        "bn.js": "5.2.0",
        "borsh": "^0.6.0",
        "bs58": "^4.0.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "js-sha256": "^0.9.0",
        "mustache": "^4.0.0",
        "node-fetch": "^2.6.1",
        "text-encoding-utf-8": "^1.0.2",
        "tweetnacl": "^1.0.1"
      },
      "dependencies": {
        "bn.js": {
          "version": "5.2.0",
          "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.0.tgz",
          "integrity": "sha512-D7iWRBvnZE8ecXiLj/9wbxH7Tk79fAh8IHaTNq1RWRixsS02W+5qS+iE9yq6RYl0asXx5tw0bLhmT5pIfbSquw=="
        },
        "borsh": {
          "version": "0.6.0",
          "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.6.0.tgz",
          "integrity": "sha512-sl5k89ViqsThXQpYa9XDtz1sBl3l1lI313cFUY1HKr+wvMILnb+58xpkqTNrYbelh99dY7K8usxoCusQmqix9Q==",
          "requires": {
            "bn.js": "^5.2.0",
            "bs58": "^4.0.0",
            "text-encoding-utf-8": "^1.0.2"
          }
        }
      }
    },
    "near-sandbox": {
      "version": "0.0.14",
      "resolved": "https://registry.npmjs.org/near-sandbox/-/near-sandbox-0.0.14.tgz",
      "integrity": "sha512-wQ1jcD6W6U4V83D0Zxgi2qedMkmTh5iiqm2t/oriKR4rrTql/j8QR/Ip/NfoIH/plFT+vGungKL+B4HxfNyyNg==",
      "requires": {
        "got": "^11.8.2",
        "tar": "^6.1.0"
      }
    },
    "near-sdk-js": {
      "version": "0.4.0-5",
      "resolved": "https://registry.npmjs.org/near-sdk-js/-/near-sdk-js-0.4.0-5.tgz",
      "integrity": "sha512-lOQDc61vf4QvM2BJkaVJcRY21l4K46xKJXJbdKanqi/WCYnKLV5i0UUbJ4sjOcScS1BHZyitLWaAdLGCCzYniQ==",
      "requires": {
        "@babel/core": "^7.17.5",
        "@babel/plugin-proposal-decorators": "^7.17.2",
        "@babel/preset-typescript": "^7.18.6",
        "@rollup/plugin-babel": "^5.3.1",
        "@rollup/plugin-commonjs": "^21.0.1",
        "@rollup/plugin-node-resolve": "^13.1.1",
        "rollup": "^2.61.1",
        "rollup-plugin-sourcemaps": "^0.6.3",
        "yargs": "^17.5.1"
      }
    },
    "near-units": {
      "version": "0.1.9",
      "resolved": "https://registry.npmjs.org/near-units/-/near-units-0.1.9.tgz",
      "integrity": "sha512-xiuBjpNsi+ywiu7P6iWRZdgFm7iCr/cfWlVO6+e5uaAqH4mE1rrurElyrL91llNDSnMwogd9XmlZOw5KbbHNsA==",
      "requires": {
        "bn.js": "^5.2.0"
      }
    },
    "near-workspaces": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/near-workspaces/-/near-workspaces-3.2.2.tgz",
      "integrity": "sha512-Y26FyPccs3lTKFpOzeWQy5urtSe0hcdME4ePbidzHNQPOXCub06htnvsoVEUNGVejc50f5nVHcdCiYO8mtEdTA==",
      "requires": {
        "base64url": "^3.0.1",
        "bn.js": "^5.2.0",
        "borsh": "^0.5.0",
        "bs58": "^4.0.1",
        "callsites": "^4.0.0",
        "fs-extra": "^10.0.0",
        "js-sha256": "^0.9.0",
        "near-api-js": "^0.44.1",
        "near-sandbox": "^0.0.14",
        "near-units": "^0.1.9",
        "node-port-check": "^2.0.1",
        "promisify-child-process": "^4.1.1",
        "pure-uuid": "^1.6.2",
        "rimraf": "^3.0.2",
        "temp-dir": "^2.0.0"
      },
      "dependencies": {
        "temp-dir": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-2.0.0.tgz",
          "integrity": "sha512-aoBAniQmmwtcKp/7BzsH8Cxzv8OL736p7v1ihGb5e9DJ9kTwGWHrQrVB5+lfVDzfGrdRzXch+ig7LHaY1JTOrg=="
        }
      }
    },
    "near-workspaces-init": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/near-workspaces-init/-/near-workspaces-init-1.0.0.tgz",
      "integrity": "sha512-ADM95br/OCsYvfptzBK4pmEnCFa8Jj//KRImxz5ZgTWJJa+omQbVnYRwKXH6n08gMCbSIHWrbB09nglH+VB0Ew==",
      "requires": {
        "fs-extra": "^10.0.0"
      }
    },
    "node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "requires": {
        "whatwg-url": "^5.0.0"
      }
    },
    "node-port-check": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/node-port-check/-/node-port-check-2.0.1.tgz",
      "integrity": "sha512-PV1tj5OPbWwxvhPcChXxwCIKl/IfVEdPP4u/gQz2lao/VGoeIUXb/4U72KSHLZpTVBmgTnMm0me7yR0wUsIuPg=="
    },
    "node-releases": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.5.tgz",
      "integrity": "sha512-U9h1NLROZTq9uE1SNffn6WuPDg8icmi3ns4rEl/oTfIle4iLjTliCzgTsbaIFMq/Xn078/lfY/BL0GWZ+psK4Q=="
    },
    "nofilter": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/nofilter/-/nofilter-3.1.0.tgz",
      "integrity": "sha512-l2NNj07e9afPnhAhvgVrCD/oy2Ai1yfLpuo3EpiO1jFTsB4sFz6oIfAfSZyQzVpkZQ9xS8ZS5g1jCBgq4Hwo0g=="
    },
    "normalize-package-data": {
      "version": "2.5.0",
      "resolved": "https://registry.npmjs.org/normalize-package-data/-/normalize-package-data-2.5.0.tgz",
      "integrity": "sha512-/5CMN3T0R4XTj4DcGaexo+roZSdSFW/0AOOTROrjxzCG1wrWXEsGbRKevjlIL+ZDE4sZlJr5ED4YW0yqmkK+eA==",
      "requires": {
        "hosted-git-info": "^2.1.4",
        "resolve": "^1.10.0",
        "semver": "2 || 3 || 4 || 5",
        "validate-npm-package-license": "^3.0.1"
      },
      "dependencies": {
        "is-core-module": {
          "version": "2.11.0",
          "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.11.0.tgz",
          "integrity": "sha512-RRjxlvLDkD1YJwDbroBHMb+cukurkDWNyHx7D3oNB5x9rb5ogcksMC5wHCadcXoo67gVr/+3GFySh3134zi6rw==",
          "requires": {
            "has": "^1.0.3"
          }
        },
        "resolve": {
          "version": "1.22.1",
          "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.1.tgz",
          "integrity": "sha512-nBpuuYuY5jFsli/JIs1oldw6fOQCBioohqWZg/2hiaOybXOft4lonv85uDOKXdf8rhyK159cxU5cDcK/NKk8zw==",
          "requires": {
            "is-core-module": "^2.9.0",
            "path-parse": "^1.0.7",
            "supports-preserve-symlinks-flag": "^1.0.0"
          }
        },
        "semver": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ=="
        }
      }
    },
    "normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA=="
    },
    "normalize-url": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/normalize-url/-/normalize-url-6.1.0.tgz",
      "integrity": "sha512-DlL+XwOy3NxAQ8xuC0okPgK46iuVNAK01YN7RueYBqqFeGsBjV9XmCAzAdgt+667bCl5kPh9EqKKDwnaPG1I7A=="
    },
    "npm-run-path": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-2.0.2.tgz",
      "integrity": "sha512-lJxZYlT4DW/bRUtFh1MQIWqmLwQfAxnqWG4HhEdjMlkrJYnJn0Jrr2u3mgxqaWsdiBc76TYkTG/mhrnYTuzfHw==",
      "requires": {
        "path-key": "^2.0.0"
      }
    },
    "o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "requires": {
        "capability": "^0.2.5"
      }
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "requires": {
        "wrappy": "1"
      }
    },
    "p-cancelable": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/p-cancelable/-/p-cancelable-2.1.1.tgz",
      "integrity": "sha512-BZOr3nRQHOntUjTrH8+Lh54smKHoHyur8We1V8DSMVrl5A2malOOwuJRnKRDjSnkoeBh4at6BwEnb5I7Jl31wg=="
    },
    "p-defer": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-defer/-/p-defer-1.0.0.tgz",
      "integrity": "sha512-wB3wfAxZpk2AzOfUMJNL+d36xothRSyj8EXOa4f6GMqYDN9BJaaSISbsk+wS9abmnebVw95C2Kb5t85UmpCxuw=="
    },
    "p-event": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/p-event/-/p-event-5.0.1.tgz",
      "integrity": "sha512-dd589iCQ7m1L0bmC5NLlVYfy3TbBEsMUfWx9PyAgPeIcFZ/E2yaTZ4Rz4MiBmmJShviiftHVXOqfnfzJ6kyMrQ==",
      "requires": {
        "p-timeout": "^5.0.2"
      }
    },
    "p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow=="
    },
    "p-limit": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-1.3.0.tgz",
      "integrity": "sha512-vvcXsLAJ9Dr5rQOPk7toZQZJApBl2K4J6dANSsEuh6QI41JYcsS/qhTGa9ErIUUgK3WNQoJYvylxvjqmiqEA9Q==",
      "requires": {
        "p-try": "^1.0.0"
      }
    },
    "p-locate": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-2.0.0.tgz",
      "integrity": "sha512-nQja7m7gSKuewoVRen45CtVfODR3crN3goVQ0DDZ9N3yHxgpkuBhZqsaiotSQRrADUrne346peY7kT3TSACykg==",
      "requires": {
        "p-limit": "^1.1.0"
      }
    },
    "p-map": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-5.5.0.tgz",
      "integrity": "sha512-VFqfGDHlx87K66yZrNdI4YGtD70IRyd+zSvgks6mzHPRNkoKy+9EKP4SFC77/vTTQYmRmti7dvqC+m5jBrBAcg==",
      "requires": {
        "aggregate-error": "^4.0.0"
      }
    },
    "p-timeout": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-5.1.0.tgz",
      "integrity": "sha512-auFDyzzzGZZZdHz3BtET9VEz0SE/uMEAx7uWfGPucfzEwwe/xH0iVeZibQmANYE/hp9T2+UUZT5m+BKyrDp3Ew=="
    },
    "p-try": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-1.0.0.tgz",
      "integrity": "sha512-U1etNYuMJoIz3ZXSrrySFjsXQTWOx2/jdi86L+2pRvph/qMKL6sbcCYdH23fqsbm8TH2Gn0OybpT4eSFlCVHww=="
    },
    "parse-json": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-2.2.0.tgz",
      "integrity": "sha512-QR/GGaKCkhwk1ePQNYDRKYZ3mwU9ypsKhB0XyFnLQdomyEqk3e8wpW3V5Jp88zbxK4n5ST1nqo+g9juTpownhQ==",
      "requires": {
        "error-ex": "^1.2.0"
      }
    },
    "parse-ms": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/parse-ms/-/parse-ms-3.0.0.tgz",
      "integrity": "sha512-Tpb8Z7r7XbbtBTrM9UhpkzzaMrqA2VXMT3YChzYltwV3P3pM6t8wl7TvpMnSTosz1aQAdVib7kdoys7vYOPerw=="
    },
    "path-exists": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-5.0.0.tgz",
      "integrity": "sha512-RjhtfwJOxzcFmNOi6ltcbcu4Iu+FL3zEj83dk4kAS+fVpTxXLO1b38RvJgT/0QwvV/L3aY9TAnyv0EOqW4GoMQ=="
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18="
    },
    "path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha512-fEHGKCSmUSDPv4uoj8AlD+joPlq3peND+HRYyxFz4KPw4z926S/b8rIuFs2FYJg3BwsxJf6A9/3eIdLaYC+9Dw=="
    },
    "path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw=="
    },
    "path-type": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/path-type/-/path-type-2.0.0.tgz",
      "integrity": "sha512-dUnb5dXUf+kzhC/W/F4e5/SkluXIFf5VUHolW1Eg1irn1hGWjPGdsRcvYJ1nD6lhk8Ir7VM0bHJKsYTx8Jx9OQ==",
      "requires": {
        "pify": "^2.0.0"
      }
    },
    "picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ=="
    },
    "picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA=="
    },
    "pify": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/pify/-/pify-2.3.0.tgz",
      "integrity": "sha512-udgsAY+fTnvv7kI7aaxbqwWNb0AHiB0qBO89PZKPkoTmGOgdbrHDKD+0B2X4uTfJ/FT1R09r9gTsjUjNJotuog=="
    },
    "pkg-conf": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/pkg-conf/-/pkg-conf-4.0.0.tgz",
      "integrity": "sha512-7dmgi4UY4qk+4mj5Cd8v/GExPo0K+SlY+hulOSdfZ/T6jVH6//y7NtzZo5WrfhDBxuQ0jCa7fLZmNaNh7EWL/w==",
      "requires": {
        "find-up": "^6.0.0",
        "load-json-file": "^7.0.0"
      },
      "dependencies": {
        "find-up": {
          "version": "6.3.0",
          "resolved": "https://registry.npmjs.org/find-up/-/find-up-6.3.0.tgz",
          "integrity": "sha512-v2ZsoEuVHYy8ZIlYqwPe/39Cy+cFDzp4dXPaxNvkEuouymu+2Jbz0PxpKarJHYJTmv2HWT3O382qY8l4jMWthw==",
          "requires": {
            "locate-path": "^7.1.0",
            "path-exists": "^5.0.0"
          }
        },
        "locate-path": {
          "version": "7.1.1",
          "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-7.1.1.tgz",
          "integrity": "sha512-vJXaRMJgRVD3+cUZs3Mncj2mxpt5mP0EmNOsxRSZRMlbqjvxzDEOIUWXGmavo0ZC9+tNZCBLQ66reA11nbpHZg==",
          "requires": {
            "p-locate": "^6.0.0"
          }
        },
        "p-limit": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-4.0.0.tgz",
          "integrity": "sha512-5b0R4txpzjPWVw/cXXUResoD4hb6U/x9BH08L7nw+GN1sezDzPdxeRvpc9c433fZhBan/wusjbCsqwqm4EIBIQ==",
          "requires": {
            "yocto-queue": "^1.0.0"
          }
        },
        "p-locate": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-6.0.0.tgz",
          "integrity": "sha512-wPrq66Llhl7/4AGC6I+cqxT07LhXvWL08LNXz1fENOw0Ap4sRZZ/gZpTTJ5jpurzzzfS2W/Ge9BY3LgLjCShcw==",
          "requires": {
            "p-limit": "^4.0.0"
          }
        }
      }
    },
    "plur": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/plur/-/plur-5.1.0.tgz",
      "integrity": "sha512-VP/72JeXqak2KiOzjgKtQen5y3IZHn+9GOuLDafPv0eXa47xq0At93XahYBs26MsifCQ4enGKwbjBTKgb9QJXg==",
      "requires": {
        "irregular-plurals": "^3.3.0"
      }
    },
    "pretty-ms": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/pretty-ms/-/pretty-ms-8.0.0.tgz",
      "integrity": "sha512-ASJqOugUF1bbzI35STMBUpZqdfYKlJugy6JBziGi2EE+AL5JPJGSzvpeVXojxrr0ViUYoToUjb5kjSEGf7Y83Q==",
      "requires": {
        "parse-ms": "^3.0.0"
      }
    },
    "promisify-child-process": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/promisify-child-process/-/promisify-child-process-4.1.1.tgz",
      "integrity": "sha512-/sRjHZwoXf1rJ+8s4oWjYjGRVKNK1DUnqfRC1Zek18pl0cN6k3yJ1cCbqd0tWNe4h0Gr+SY4vR42N33+T82WkA=="
    },
    "pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha512-b/YwNhb8lk1Zz2+bXXpS/LK9OisiZZ1SNsSLxN1x2OXVEhW2Ckr/7mWE5vrC1ZTiJlD9g19jWszTmJsB+oEpFQ=="
    },
    "pump": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.0.tgz",
      "integrity": "sha512-LwZy+p3SFs1Pytd/jYct4wpv49HiYCqd9Rlc5ZVdk0V+8Yzv6jR5Blk3TRmPL1ft69TxP0IMZGJ+WPFU2BFhww==",
      "requires": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "pure-uuid": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/pure-uuid/-/pure-uuid-1.6.2.tgz",
      "integrity": "sha512-WQ4xz74ApW6s0BToRuuyuMo9g0VHx1HljY0H2gPng+mqqz/K1yLj7sHZonZZQ2++WfHl/ZzruilWvuz+WtmxjQ=="
    },
    "queue-microtask": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/queue-microtask/-/queue-microtask-1.2.3.tgz",
      "integrity": "sha512-NuaNSa6flKT5JaSYQzJok04JzTL1CA6aGhv5rfLW3PgqA+M2ChpZQnAC8h8i4ZFkBS8X5RqkDBHA7r4hej3K9A=="
    },
    "quick-lru": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/quick-lru/-/quick-lru-5.1.1.tgz",
      "integrity": "sha512-WuyALRjWPDGtt/wzJiadO5AXY+8hZ80hVpe6MyivgraREW751X3SbhRvG3eLKOYN+8VEvqLcf3wdnt44Z4S4SA=="
    },
    "read-pkg": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg/-/read-pkg-2.0.0.tgz",
      "integrity": "sha512-eFIBOPW7FGjzBuk3hdXEuNSiTZS/xEMlH49HxMyzb0hyPfu4EhVjT2DH32K1hSSmVq4sebAWnZuuY5auISUTGA==",
      "requires": {
        "load-json-file": "^2.0.0",
        "normalize-package-data": "^2.3.2",
        "path-type": "^2.0.0"
      },
      "dependencies": {
        "load-json-file": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/load-json-file/-/load-json-file-2.0.0.tgz",
          "integrity": "sha512-3p6ZOGNbiX4CdvEd1VcE6yi78UrGNpjHO33noGwHCnT/o2fyllJDepsm8+mFFv/DvtwFHht5HIHSyOy5a+ChVQ==",
          "requires": {
            "graceful-fs": "^4.1.2",
            "parse-json": "^2.2.0",
            "pify": "^2.0.0",
            "strip-bom": "^3.0.0"
          }
        }
      }
    },
    "read-pkg-up": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/read-pkg-up/-/read-pkg-up-2.0.0.tgz",
      "integrity": "sha512-1orxQfbWGUiTn9XsPlChs6rLie/AV9jwZTGmu2NZw/CUDJQchXJFYE0Fq5j7+n558T1JhDWLdhyd1Zj+wLY//w==",
      "requires": {
        "find-up": "^2.0.0",
        "read-pkg": "^2.0.0"
      }
    },
    "readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "requires": {
        "picomatch": "^2.2.1"
      }
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I="
    },
    "resolve": {
      "version": "1.22.0",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.0.tgz",
      "integrity": "sha512-Hhtrw0nLeSrFQ7phPp4OOcVjLPIeMnRlr5mcnVuMe7M/7eBn98A3hmFRLoFo3DLZkivSYwhRUJTyPyWAk56WLw==",
      "requires": {
        "is-core-module": "^2.8.1",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      }
    },
    "resolve-alpn": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/resolve-alpn/-/resolve-alpn-1.2.1.tgz",
      "integrity": "sha512-0a1F4l73/ZFZOakJnQ3FvkJ2+gSTQWz/r2KE5OdDY0TxPm5h4GkqkWWfM47T7HsbnOtcJVEF4epCVy6u7Q3K+g=="
    },
    "resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "requires": {
        "resolve-from": "^5.0.0"
      }
    },
    "resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw=="
    },
    "responselike": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/responselike/-/responselike-2.0.1.tgz",
      "integrity": "sha512-4gl03wn3hj1HP3yzgdI7d3lCkF95F21Pz4BPGvKHinyQzALR5CapwC8yIi0Rh58DEMQ/SguC03wFj2k0M/mHhw==",
      "requires": {
        "lowercase-keys": "^2.0.0"
      }
    },
    "reusify": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/reusify/-/reusify-1.0.4.tgz",
      "integrity": "sha512-U9nH88a3fc/ekCF1l0/UP1IosiuIjyTh7hBvXVMHYgVcfGvt897Xguj2UOLDeI5BG2m7/uwyaLVT6fbtCwTyzw=="
    },
    "rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "rollup": {
      "version": "2.74.1",
      "resolved": "https://registry.npmjs.org/rollup/-/rollup-2.74.1.tgz",
      "integrity": "sha512-K2zW7kV8Voua5eGkbnBtWYfMIhYhT9Pel2uhBk2WO5eMee161nPze/XRfvEQPFYz7KgrCCnmh2Wy0AMFLGGmMA==",
      "requires": {
        "fsevents": "~2.3.2"
      }
    },
    "rollup-plugin-sourcemaps": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/rollup-plugin-sourcemaps/-/rollup-plugin-sourcemaps-0.6.3.tgz",
      "integrity": "sha512-paFu+nT1xvuO1tPFYXGe+XnQvg4Hjqv/eIhG8i5EspfYYPBKL57X7iVbfv55aNVASg3dzWvES9dmWsL2KhfByw==",
      "requires": {
        "@rollup/pluginutils": "^3.0.9",
        "source-map-resolve": "^0.6.0"
      }
    },
    "run-parallel": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/run-parallel/-/run-parallel-1.2.0.tgz",
      "integrity": "sha512-5l4VyZR86LZ/lDxZTR6jqL8AFE2S0IFLMP26AbjsLVADxHdhB/c0GUsH+y39UfCi3dzz8OlQuPmnaJOMoDHQBA==",
      "requires": {
        "queue-microtask": "^1.2.2"
      }
    },
    "safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g=="
    },
    "semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw=="
    },
    "serialize-error": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/serialize-error/-/serialize-error-7.0.1.tgz",
      "integrity": "sha512-8I8TjW5KMOKsZQTvoxjuSIa7foAwPWGOts+6o7sgjz41/qMD9VQHEDxi6PBvK2l0MXUmqZyNpUK+T2tQaaElvw==",
      "requires": {
        "type-fest": "^0.13.1"
      }
    },
    "setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw=="
    },
    "shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha512-EV3L1+UQWGor21OmnvojK36mhg+TyIKDh3iFBKBohr5xeXIhNBcx8oWdgkTEEQ+BEFFYdLRuqMfd5L84N1V5Vg==",
      "requires": {
        "shebang-regex": "^1.0.0"
      }
    },
    "shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha512-wpoSFAxys6b2a2wHZ1XpDSgD7N9iVjg29Ph9uV/uaP9Ex/KXlkTZTeddxDPSYQpgvzKLGJke2UU0AzoGCjNIvQ=="
    },
    "signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ=="
    },
    "slash": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-4.0.0.tgz",
      "integrity": "sha512-3dOsAHXXUkQTpOYcoAxLIorMTp4gIQr5IW3iVb7A7lFIp0VHhnynm9izx6TssdrIcVIESAlVjtnO2K8bg+Coew=="
    },
    "slice-ansi": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-5.0.0.tgz",
      "integrity": "sha512-FC+lgizVPfie0kkhqUScwRu1O/lF6NOgJmlCgK+/LYxDCTk8sGelYaHDhFcDN+Sn3Cv+3VSa4Byeo+IMCzpMgQ==",
      "requires": {
        "ansi-styles": "^6.0.0",
        "is-fullwidth-code-point": "^4.0.0"
      },
      "dependencies": {
        "is-fullwidth-code-point": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-4.0.0.tgz",
          "integrity": "sha512-O4L094N2/dZ7xqVdrXhh9r1KODPJpFms8B5sGdJLPy664AgvXsreZUyCQQNItZRDlYug4xStLjNp/sz3HvBowQ=="
        }
      }
    },
    "sort-keys": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/sort-keys/-/sort-keys-2.0.0.tgz",
      "integrity": "sha512-/dPCrG1s3ePpWm6yBbxZq5Be1dXGLyLn9Z791chDC3NFrpkVbWGzkBwPN1knaciexFXgRJ7hzdnwZ4stHSDmjg==",
      "requires": {
        "is-plain-obj": "^1.0.0"
      }
    },
    "source-map-resolve": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/source-map-resolve/-/source-map-resolve-0.6.0.tgz",
      "integrity": "sha512-KXBr9d/fO/bWo97NXsPIAW1bFSBOuCnjbNTBMO7N59hsv5i9yzRDfcYwwt0l04+VqnKC+EwzvJZIP/qkuMgR/w==",
      "requires": {
        "atob": "^2.1.2",
        "decode-uri-component": "^0.2.0"
      }
    },
    "sourcemap-codec": {
      "version": "1.4.8",
      "resolved": "https://registry.npmjs.org/sourcemap-codec/-/sourcemap-codec-1.4.8.tgz",
      "integrity": "sha512-9NykojV5Uih4lgo5So5dtw+f0JgJX30KCNI8gwhz2J9A15wD0Ml6tjHKwf6fTSa6fAdVBdZeNOs9eJ71qCk8vA=="
    },
    "spdx-correct": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/spdx-correct/-/spdx-correct-3.1.1.tgz",
      "integrity": "sha512-cOYcUWwhCuHCXi49RhFRCyJEK3iPj1Ziz9DpViV3tbZOwXD49QzIN3MpOLJNxh2qwq2lJJZaKMVw9qNi4jTC0w==",
      "requires": {
        "spdx-expression-parse": "^3.0.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-exceptions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/spdx-exceptions/-/spdx-exceptions-2.3.0.tgz",
      "integrity": "sha512-/tTrYOC7PPI1nUAgx34hUpqXuyJG+DTHJTnIULG4rDygi4xu/tfgmq1e1cIRwRzwZgo4NLySi+ricLkZkw4i5A=="
    },
    "spdx-expression-parse": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/spdx-expression-parse/-/spdx-expression-parse-3.0.1.tgz",
      "integrity": "sha512-cbqHunsQWnJNE6KhVSMsMeH5H/L9EpymbzqTQ3uLwNCLZ1Q481oWaofqH7nO6V07xlXwY6PhQdQ2IedWx/ZK4Q==",
      "requires": {
        "spdx-exceptions": "^2.1.0",
        "spdx-license-ids": "^3.0.0"
      }
    },
    "spdx-license-ids": {
      "version": "3.0.12",
      "resolved": "https://registry.npmjs.org/spdx-license-ids/-/spdx-license-ids-3.0.12.tgz",
      "integrity": "sha512-rr+VVSXtRhO4OHbXUiAF7xW3Bo9DuuF6C5jH+q/x15j2jniycgKbxU09Hr0WqlSLUs4i4ltHGXqTe7VHclYWyA=="
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g=="
    },
    "stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "requires": {
        "escape-string-regexp": "^2.0.0"
      },
      "dependencies": {
        "escape-string-regexp": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
          "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w=="
        }
      }
    },
    "statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA=="
    },
    "string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      }
    },
    "strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "requires": {
        "ansi-regex": "^5.0.1"
      }
    },
    "strip-bom": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-3.0.0.tgz",
      "integrity": "sha512-vavAMRXOgBVNF6nyEEmL3DBK19iRpDcoIwW+swQ+CbGiu7lju6t+JklA1MHweoWtadgt4ISVUsXLyDq34ddcwA=="
    },
    "strip-eof": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/strip-eof/-/strip-eof-1.0.0.tgz",
      "integrity": "sha512-7FCwGGmx8mD5xQd3RPUvnSpUXHM3BWuzjtpD4TXsfcZ9EL4azvVVUscFYwD9nx8Kh+uCBC00XBtAykoMHwTh8Q=="
    },
    "supertap": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/supertap/-/supertap-3.0.1.tgz",
      "integrity": "sha512-u1ZpIBCawJnO+0QePsEiOknOfCRq0yERxiAchT0i4li0WHNUJbf0evXXSXOcCAR4M8iMDoajXYmstm/qO81Isw==",
      "requires": {
        "indent-string": "^5.0.0",
        "js-yaml": "^3.14.1",
        "serialize-error": "^7.0.1",
        "strip-ansi": "^7.0.1"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "6.0.1",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.0.1.tgz",
          "integrity": "sha512-n5M855fKb2SsfMIiFFoVrABHJC8QtHwVx+mHWP3QcEqBHYienj5dHSgjbxtC0WEZXYt4wcD6zrQElDPhFuZgfA=="
        },
        "strip-ansi": {
          "version": "7.0.1",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.0.1.tgz",
          "integrity": "sha512-cXNxvT8dFNRVfhVME3JAe98mkXDYN2O1l7jmcwMnOslDeESg1rF/OZMtK0nRAhiari1unG5cD4jG3rapUAkLbw==",
          "requires": {
            "ansi-regex": "^6.0.1"
          }
        }
      }
    },
    "supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "requires": {
        "has-flag": "^3.0.0"
      }
    },
    "supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w=="
    },
    "tar": {
      "version": "6.1.13",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.1.13.tgz",
      "integrity": "sha512-jdIBIN6LTIe2jqzay/2vtYLlBHa3JF42ot3h1dW8Q0PaAG4v8rm0cvpVePtau5C6OKXGGcgO9q2AMNSWxiLqKw==",
      "requires": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^4.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "dependencies": {
        "yallist": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
          "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A=="
        }
      }
    },
    "temp-dir": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/temp-dir/-/temp-dir-3.0.0.tgz",
      "integrity": "sha512-nHc6S/bwIilKHNRgK/3jlhDoIHcp45YgyiwcAk46Tr0LfEqGBVpmiAyuiuxeVE44m3mXnEeVhaipLOEWmH+Njw=="
    },
    "text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "time-zone": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/time-zone/-/time-zone-1.0.0.tgz",
      "integrity": "sha512-TIsDdtKo6+XrPtiTm1ssmMngN1sAhyKnTO2kunQWqNPWIVvCm15Wmw4SWInwTVgJ5u/Tr04+8Ei9TNcw4x4ONA=="
    },
    "to-fast-properties": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/to-fast-properties/-/to-fast-properties-2.0.0.tgz",
      "integrity": "sha1-3F5pjL0HkmW8c+A3doGk5Og/YW4="
    },
    "to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "requires": {
        "is-number": "^7.0.0"
      }
    },
    "toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA=="
    },
    "tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw=="
    },
    "tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw=="
    },
    "type-fest": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.13.1.tgz",
      "integrity": "sha512-34R7HTnG0XIJcBSn5XhDd7nNFPRcXYRZrBB2O2jdKqYODldSzBAqzsWoZYYvduky73toYS/ESqxPvkDf/F0XMg=="
    },
    "typescript": {
      "version": "4.7.4",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-4.7.4.tgz",
      "integrity": "sha512-C0WQT0gezHuw6AdY1M2jxUO83Rjf0HP7Sk1DtXj6j1EwkQNZrHAg2XPWlq62oqEhYvONq5pkC2Y9oPljWToLmQ==",
      "dev": true
    },
    "u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w=="
    },
    "universalify": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-2.0.0.tgz",
      "integrity": "sha512-hAZsKq7Yy11Zu1DE0OzWjw7nnLZmJZYTDZZyEFHZdUhV8FkH5MCfoU1XMaxXovpyW5nq5scPqq0ZDP9Zyl04oQ=="
    },
    "validate-npm-package-license": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/validate-npm-package-license/-/validate-npm-package-license-3.0.4.tgz",
      "integrity": "sha512-DpKm2Ui/xN7/HQKCtpZxoRWBhZ9Z0kqtygG8XCgNQ8ZlDnxuQmWhj566j8fN4Cu3/JmbhsDo7fcAJq4s9h27Ew==",
      "requires": {
        "spdx-correct": "^3.0.0",
        "spdx-expression-parse": "^3.0.0"
      }
    },
    "webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ=="
    },
    "well-known-symbols": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/well-known-symbols/-/well-known-symbols-2.0.0.tgz",
      "integrity": "sha512-ZMjC3ho+KXo0BfJb7JgtQ5IBuvnShdlACNkKkdsqBmYw3bPAaJfPeYUo6tLUaT5tG/Gkh7xkpBhKRQ9e7pyg9Q=="
    },
    "whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "requires": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "requires": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.3.0",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
          "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
          "requires": {
            "color-convert": "^2.0.1"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA=="
        }
      }
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8="
    },
    "write-file-atomic": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-5.0.0.tgz",
      "integrity": "sha512-R7NYMnHSlV42K54lwY9lvW6MnSm1HSJqZL3xiSgi9E7//FYaI74r2G0rd+/X6VAMkHEdzxQaU5HUOXWUz5kA/w==",
      "requires": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      }
    },
    "write-json-file": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/write-json-file/-/write-json-file-2.3.0.tgz",
      "integrity": "sha512-84+F0igFp2dPD6UpAQjOUX3CdKUOqUzn6oE9sDBNzUXINR5VceJ1rauZltqQB/bcYsx3EpKys4C7/PivKUAiWQ==",
      "requires": {
        "detect-indent": "^5.0.0",
        "graceful-fs": "^4.1.2",
        "make-dir": "^1.0.0",
        "pify": "^3.0.0",
        "sort-keys": "^2.0.0",
        "write-file-atomic": "^2.0.0"
      },
      "dependencies": {
        "pify": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/pify/-/pify-3.0.0.tgz",
          "integrity": "sha512-C3FsVNH1udSEX48gGX1xfvwTWfsYWj5U+8/uK15BGzIGrKoUpghX8hWZwa/OFnakBiiVNmBvemTJR5mcy7iPcg=="
        },
        "write-file-atomic": {
          "version": "2.4.3",
          "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-2.4.3.tgz",
          "integrity": "sha512-GaETH5wwsX+GcnzhPgKcKjJ6M2Cq3/iZp1WyY/X1CSqrW+jVNM9Y7D8EC2sM4ZG/V8wZlSniJnCKWPmBYAucRQ==",
          "requires": {
            "graceful-fs": "^4.1.11",
            "imurmurhash": "^0.1.4",
            "signal-exit": "^3.0.2"
          }
        }
      }
    },
    "write-pkg": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/write-pkg/-/write-pkg-3.2.0.tgz",
      "integrity": "sha512-tX2ifZ0YqEFOF1wjRW2Pk93NLsj02+n1UP5RvO6rCs0K6R2g1padvf006cY74PQJKMGS2r42NK7FD0dG6Y6paw==",
      "requires": {
        "sort-keys": "^2.0.0",
        "write-json-file": "^2.2.0"
      }
    },
    "y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA=="
    },
    "yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha512-ncTzHV7NvsQZkYe1DW7cbDLm0YpzHmZF5r/iyP3ZnQtMiJ+pjzisCiMNI+Sj+xQF5pXhSHxSB3uDbsBTzY/c2A=="
    },
    "yargs": {
      "version": "17.5.1",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.5.1.tgz",
      "integrity": "sha512-t6YAJcxDkNX7NFYiVtKvWUz8l+PaKTLiL63mJYWR2GnHq2gjEWISzsLp9wg3aY36dY1j+gfIEL3pIF+XlJJfbA==",
      "requires": {
        "cliui": "^7.0.2",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.0.0"
      }
    },
    "yargs-parser": {
      "version": "21.0.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.0.1.tgz",
      "integrity": "sha512-9BK1jFpLzJROCI5TzwZL/TU4gqjK5xiHV/RfWLOahrjAko/e4DJkRDZQXfvqAsiZzzYhgAzbgz6lg48jcm4GLg=="
    },
    "yocto-queue": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-1.0.0.tgz",
      "integrity": "sha512-9bnSc/HEW2uRy67wc+T8UwauLuPJVn28jb+GtJY16iiKWyvmYJRXVT4UamsAEGQfPohgr2q4Tq0sQbQlxTfi1g=="
    }
  }
}

'''
'''--- package.json ---
{
  "name": "template",
  "version": "1.0.0",
  "description": "Contract template with near-sdk-js",
  "main": "index.js",
  "type": "module",
  "scripts": {
    "build": "yarn build:nft && yarn build:market",
    "build:nft": "near-sdk-js build src/nft-contract/index.ts build/nft.wasm",
    "build:market": "near-sdk-js build src/market-contract/index.ts build/market.wasm",
    "test": "ava"
  },
  "author": "Near Inc <hello@nearprotocol.com>",
  "license": "Apache-2.0",
  "dependencies": {
    "ava": "^5.1.0",
    "ava-init": "^0.3.0",
    "lodash-es": "^4.17.21",
    "near-sdk-js": "0.4.0-5",
    "near-workspaces": "^3.2.2",
    "near-workspaces-init": "^1.0.0"
  },
  "devDependencies": {
    "typescript": "^4.7.4"
  }
}

'''
'''--- src/market-contract/index.ts ---
import { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet, assert } from 'near-sdk-js'
import { assertOneYocto, restoreOwners } from './internal';
import { internalNftOnApprove } from './nft_callbacks';
import { internalOffer, internalRemoveSale, internalResolvePurchase, internalUpdatePrice, Sale } from './sale';
import { internalGetSale, internalSalesByNftContractId, internalSalesByOwnerId, internalSupplyByNftContractId, internalSupplyByOwnerId, internalSupplySales } from './sale_views';

/// This spec can be treated like a version of the standard.
export const NFT_METADATA_SPEC = "nft-1.0.0";

/// This is the name of the NFT standard we're using
export const NFT_STANDARD_NAME = "nep171";

//the minimum storage to have a sale on the contract.
export const STORAGE_PER_SALE: bigint = BigInt(1000) * near.storageByteCost().valueOf();

//every sale will have a unique ID which is `CONTRACT + DELIMITER + TOKEN_ID`
export const DELIMETER = ".";

@NearBindgen
export class Contract extends NearContract {
    //keep track of the owner of the contract
    ownerId: string;
    
    /*
        to keep track of the sales, we map the ContractAndTokenId to a Sale. 
        the ContractAndTokenId is the unique identifier for every sale. It is made
        up of the `contract ID + DELIMITER + token ID`
    */
    sales: UnorderedMap;
    
    //keep track of all the Sale IDs for every account ID
    byOwnerId: LookupMap;

    //keep track of all the token IDs for sale for a given contract
    byNftContractId: LookupMap;

    //keep track of the storage that accounts have payed
    storageDeposits: LookupMap;

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    constructor({ owner_id }: { owner_id: string }) {
        super()
        this.ownerId = owner_id;
        this.sales = new UnorderedMap("sales");
        this.byOwnerId = new LookupMap("byOwnerId");
        this.byNftContractId = new LookupMap("byNftContractId");
        this.storageDeposits = new LookupMap("storageDeposits");
    }

    default() {
        return new Contract({owner_id: ''})
    }

    /*
        STORAGE
    */
    @call
    //Allows users to deposit storage. This is to cover the cost of storing sale objects on the contract
    //Optional account ID is to users can pay for storage for other people.
    storage_deposit({ account_id }: { account_id?: string }) {
        //get the account ID to pay for storage for
        let storageAccountId = account_id || near.predecessorAccountId();

        //get the deposit value which is how much the user wants to add to their storage
        let deposit = near.attachedDeposit().valueOf();

        //make sure the deposit is greater than or equal to the minimum storage for a sale
        assert(deposit >= STORAGE_PER_SALE, `Requires minimum deposit of ${STORAGE_PER_SALE}`);

        //get the balance of the account (if the account isn't in the map we default to a balance of 0)
        let balance: string = this.storageDeposits.get(storageAccountId) as string || "0";
        //add the deposit to their balance
        let newBalance = BigInt(balance) + deposit;
        //insert the balance back into the map for that account ID
        this.storageDeposits.set(storageAccountId, newBalance.toString());
    }

    @call
    //Allows users to withdraw any excess storage that they're not using. Say Bob pays 0.01N for 1 sale
    //Alice then buys Bob's token. This means bob has paid 0.01N for a sale that's no longer on the marketplace
    //Bob could then withdraw this 0.01N back into his account. 
    storage_withdraw() {
        //make sure the user attaches exactly 1 yoctoNEAR for security purposes.
        //this will redirect them to the NEAR wallet (or requires a full access key). 
        assertOneYocto();

        //the account to withdraw storage to is always the function caller
        let ownerId = near.predecessorAccountId();
        //get the amount that the user has by removing them from the map. If they're not in the map, default to 0
        let amount: string = this.storageDeposits.remove(ownerId) as string || "0";
        
        //how many sales is that user taking up currently. This returns a set
        let sales = restoreOwners(this.byOwnerId.get(ownerId));
        //get the length of that set. 
        let len = 0;
        if (sales != null) {
            len = sales.len();
        }   
        
        //how much NEAR is being used up for all the current sales on the account 
        let diff = BigInt(len) * STORAGE_PER_SALE;
        //the excess to withdraw is the total storage paid - storage being used up.
        let amountLeft = BigInt(amount) - diff;

        //if that excess to withdraw is > 0, we transfer the amount to the user.
        if (amountLeft > 0) {
            const promise = near.promiseBatchCreate(ownerId);
            near.promiseBatchActionTransfer(promise, amountLeft)
        }

        //we need to add back the storage being used up into the map if it's greater than 0.
        //this is so that if the user had 500 sales on the market, we insert that value here so
        //if those sales get taken down, the user can then go and withdraw 500 sales worth of storage.
        if (diff > 0) {
            this.storageDeposits.set(ownerId, diff.toString());
        }
    }

    @view
    //return the minimum storage for 1 sale
    storage_minimum_balance(): string {
        return STORAGE_PER_SALE.toString()
    }

    @view
    //return how much storage an account has paid for
    storage_balance_of({ account_id }: { account_id: string}): string {
        return this.storageDeposits.get(account_id) as string || "0";
    }

    /*
        SALES
    */
    @call
    //removes a sale from the market. 
    remove_sale({nft_contract_id, token_id}:{nft_contract_id: string, token_id: string}) {
        return internalRemoveSale({contract: this, nftContractId: nft_contract_id, tokenId: token_id});
    }

    @call
    //updates the price for a sale on the market
    update_price({nft_contract_id, token_id, price}:{nft_contract_id: string, token_id: string, price: string}) {
        return internalUpdatePrice({contract: this, nftContractId: nft_contract_id, tokenId: token_id, price: price});
    }

    @call
    //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
    offer({nft_contract_id, token_id}:{nft_contract_id: string, token_id: string}) {
        return internalOffer({contract: this, nftContractId: nft_contract_id, tokenId: token_id});
    }

    @call
    //place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
    resolve_purchase({buyer_id, price}:{buyer_id: string, price: string}) {
        return internalResolvePurchase({buyerId: buyer_id, price: price});
    }

    /*
        SALE VIEWS
    */
    @view
    //returns the number of sales the marketplace has up (as a string)
    get_supply_sales(): string {
        return internalSupplySales({contract: this});
    }

    @view
    //returns the number of sales for a given account (result is a string)
    get_supply_by_owner_id({account_id}:{account_id: string}): string {
        return internalSupplyByOwnerId({contract: this, accountId: account_id});
    }

    @view
    //returns paginated sale objects for a given account. (result is a vector of sales)
    get_sales_by_owner_id({account_id, from_index, limit}:{account_id: string, from_index?: string, limit?: number}): Sale[] {
        return internalSalesByOwnerId({contract: this, accountId: account_id, fromIndex: from_index, limit: limit});
    }

    @view
    //returns paginated sale objects for a given account. (result is a vector of sales)
    get_supply_by_nft_contract_id({nft_contract_id}:{nft_contract_id: string}): string {
        return internalSupplyByNftContractId({contract: this, nftContractId: nft_contract_id});        
    }

    @view
    //returns paginated sale objects associated with a given nft contract. (result is a vector of sales)
    get_sales_by_nft_contract_id({nft_contract_id, from_index, limit}:{nft_contract_id: string, from_index?: string, limit?: number}): Sale[] {
        return internalSalesByNftContractId({contract: this, accountId: nft_contract_id, fromIndex: from_index, limit: limit});
    }

    @view
    //get a sale information for a given unique sale ID (contract + DELIMITER + token ID)
    get_sale({nft_contract_token}:{nft_contract_token: string}): Sale {
        return internalGetSale({contract: this, nftContractToken: nft_contract_token});
    }

    /*
        APPROVALS
    */
    @call
        /// where we add the sale because we know nft owner can only call nft_approve
        nft_on_approve({token_id, owner_id, approval_id, msg}:{token_id: string, owner_id: string, approval_id: number, msg: string}) {
        return internalNftOnApprove({contract: this, tokenId: token_id, ownerId: owner_id, approvalId: approval_id, msg: msg});
    }  

}
'''
'''--- src/market-contract/internal.ts ---
import { assert, near, UnorderedSet } from "near-sdk-js";
import { Contract, DELIMETER } from ".";
import { Sale } from "./sale";

export function restoreOwners(collection) {
    if (collection == null) {
        return null;
    }
    return UnorderedSet.deserialize(collection as UnorderedSet);
}

//used to make sure the user attached exactly 1 yoctoNEAR
export function assertOneYocto() {
    assert(near.attachedDeposit().toString() === "1", "Requires attached deposit of exactly 1 yoctoNEAR");
}

//internal method for removing a sale from the market. This returns the previously removed sale object
export function internallyRemoveSale(contract: Contract, nftContractId: string, tokenId: string): Sale {
    //get the unique sale ID (contract + DELIMITER + token ID)
    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;
    //get the sale object by removing the unique sale ID. If there was no sale, panic
    let sale = contract.sales.remove(contractAndTokenId) as Sale;
    if (sale == null) {
        near.panic("no sale");
    }
    
    //get the set of sales for the sale's owner. If there's no sale, panic. 
    let byOwnerId = restoreOwners(contract.byOwnerId.get(sale.owner_id));
    if (byOwnerId == null) {
        near.panic("no sales by owner");
    }
    //remove the unique sale ID from the set of sales
    byOwnerId.remove(contractAndTokenId);

    //if the set of sales is now empty after removing the unique sale ID, we simply remove that owner from the map
    if (byOwnerId.isEmpty()) {
        contract.byOwnerId.remove(sale.owner_id);
    //if the set of sales is not empty after removing, we insert the set back into the map for the owner
    } else {
        contract.byOwnerId.set(sale.owner_id, byOwnerId);
    }

    //get the set of token IDs for sale for the nft contract ID. If there's no sale, panic. 
    let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));
    if (byNftContractId == null) {
        near.panic("no sales by nft contract");
    }
    
    //remove the token ID from the set 
    byNftContractId.remove(tokenId);
    //if the set is now empty after removing the token ID, we remove that nft contract ID from the map
    if (byNftContractId.isEmpty()) {
        contract.byNftContractId.remove(nftContractId);
    //if the set is not empty after removing, we insert the set back into the map for the nft contract ID
    } else {
        contract.byNftContractId.set(nftContractId, byNftContractId);
    }

    //return the sale object
    return sale;
}
'''
'''--- src/market-contract/nft_callbacks.ts ---
import { assert, near, UnorderedSet } from "near-sdk-js";
import { Contract, DELIMETER } from ".";
import { Sale } from "./sale";
import { internalSupplyByOwnerId } from "./sale_views";

/// where we add the sale because we know nft owner can only call nft_approve
export function internalNftOnApprove({
    contract,
    tokenId,
    ownerId,
    approvalId,
    msg
}:{ 
    contract: Contract, 
    tokenId: string, 
    ownerId: string, 
    approvalId: number, 
    msg: string 
}) {
    // get the contract ID which is the predecessor
    let contractId = near.predecessorAccountId();
    //get the signer which is the person who initiated the transaction
    let signerId = near.signerAccountId();
    
    //make sure that the signer isn't the predecessor. This is so that we're sure
    //this was called via a cross-contract call
    assert(signerId != contractId, "this function can only be called via a cross-contract call");
    //make sure the owner ID is the signer. 
    assert(ownerId == signerId, "only the owner of the token can approve it");
    
    //we need to enforce that the user has enough storage for 1 EXTRA sale.  
    let storageAmount = contract.storage_minimum_balance();
    //get the total storage paid by the owner
    let ownerPaidStorage = contract.storageDeposits.get(signerId) || BigInt(0);
    //get the storage required which is simply the storage for the number of sales they have + 1 
    let signerStorageRequired = (BigInt(internalSupplyByOwnerId({contract, accountId: signerId})) + BigInt(1)) * BigInt(storageAmount); 
    
    //make sure that the total paid is >= the required storage
    assert(ownerPaidStorage >= signerStorageRequired, "the owner does not have enough storage to approve this token");
    
    //if all these checks pass we can create the sale conditions object.
    let saleConditions = JSON.parse(msg);
    if (!saleConditions.hasOwnProperty('sale_conditions') || Object.keys(saleConditions).length != 1) {
        near.panic("invalid sale conditions");
    }
    //create the unique sale ID which is the contract + DELIMITER + token ID
    let contractAndTokenId = `${contractId}${DELIMETER}${tokenId}`;
    
    //insert the key value pair into the sales map. Key is the unique ID. value is the sale object
    contract.sales.set(contractAndTokenId, new Sale({
        ownerId: ownerId, //owner of the sale / token
        approvalId: approvalId, //approval ID for that token that was given to the market
        nftContractId: contractId, //NFT contract the token was minted on
        tokenId: tokenId, //the actual token ID
        saleConditions: saleConditions.sale_conditions //the sale conditions 
    }));

    //Extra functionality that populates collections necessary for the view calls 
    //get the sales by owner ID for the given owner. If there are none, we create a new empty set
    let byOwnerId = contract.byOwnerId.get(ownerId) as UnorderedSet || new UnorderedSet(ownerId);
    //insert the unique sale ID into the set
    byOwnerId.set(contractAndTokenId);
    //insert that set back into the collection for the owner
    contract.byOwnerId.set(ownerId, byOwnerId);
    
    //get the token IDs for the given nft contract ID. If there are none, we create a new empty set
    let byNftContractId = contract.byNftContractId.get(contractId) as UnorderedSet || new UnorderedSet(contractId);
    //insert the token ID into the set
    byNftContractId.set(tokenId);
    //insert the set back into the collection for the given nft contract ID
    contract.byNftContractId.set(contractId, byNftContractId);

}
'''
'''--- src/market-contract/sale.ts ---
import { assert, bytes, near } from "near-sdk-js";
import { Contract, DELIMETER } from ".";
import { assertOneYocto, internallyRemoveSale } from "./internal";

//GAS constants to attach to calls
const GAS_FOR_ROYALTIES = 115_000_000_000_000;
const GAS_FOR_NFT_TRANSFER = 15_000_000_000_000;

//struct that holds important information about each sale on the market
export class Sale {
    //owner of the sale
    owner_id: string;
    //market contract's approval ID to transfer the token on behalf of the owner
    approval_id: number;
    //nft contract where the token was minted
    nft_contract_id: string;
    //actual token ID for sale
    token_id: String;
    //sale price in yoctoNEAR that the token is listed for
    sale_conditions: string;
    
    constructor(
        {
            ownerId,
            approvalId,
            nftContractId,
            tokenId,
            saleConditions,
        }:{ 
            ownerId: string,
            approvalId: number,
            nftContractId: string,
            tokenId: String,
            saleConditions: string,
        }) {
        this.owner_id = ownerId;
        this.approval_id = approvalId;
        this.nft_contract_id = nftContractId;
        this.token_id = tokenId;
        this.sale_conditions = saleConditions;
    }
}

//removes a sale from the market. 
export function internalRemoveSale({
    contract,
    nftContractId,
    tokenId
}:{ 
    contract: Contract, 
    nftContractId: string, 
    tokenId: string 
}) {
    //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
    assertOneYocto();
    
    //get the sale object as the return value from removing the sale internally
    let sale = internallyRemoveSale(contract, nftContractId, tokenId);

    //get the predecessor of the call and make sure they're the owner of the sale
    let ownerId = near.predecessorAccountId();

    //assert that the owner of the sale is the same as the caller of the function
    assert(ownerId == sale.owner_id, "only the owner of the sale can remove it");
}

//updates the price for a sale on the market
export function internalUpdatePrice({
    contract,
    nftContractId,
    tokenId,
    price
}:{ 
    contract: Contract, 
    nftContractId: string, 
    tokenId: string, 
    price: string 
}) {
    //assert that the user has attached exactly 1 yoctoNEAR (for security reasons)
    assertOneYocto();

    //create the unique sale ID from the nft contract and token
    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;

    //get the sale object from the unique sale ID. If there is no token, panic. 
    let sale = contract.sales.get(contractAndTokenId) as Sale;
    if (sale == null) {
        near.panic("no sale");
    }

    assert(near.predecessorAccountId() == sale.owner_id, "only the owner of the sale can update it");
    //set the sale conditions equal to the passed in price
    sale.sale_conditions = price; 
    //insert the sale back into the map for the unique sale ID
    contract.sales.set(contractAndTokenId, sale);
}

//place an offer on a specific sale. The sale will go through as long as your deposit is greater than or equal to the list price
export function internalOffer({
    contract,
    nftContractId,
    tokenId
}:{
    contract: Contract, 
    nftContractId: string, 
    tokenId: string
}) {
    //get the attached deposit and make sure it's greater than 0
    let deposit = near.attachedDeposit().valueOf();
    assert(deposit > 0, "deposit must be greater than 0");
 
    //get the unique sale ID (contract + DELIMITER + token ID)
    let contractAndTokenId = `${nftContractId}${DELIMETER}${tokenId}`;
    //get the sale object from the unique sale ID. If the sale doesn't exist, panic.
    let sale = contract.sales.get(contractAndTokenId) as Sale;
    if (sale == null) {
        near.panic("no sale");
    }

    //get the buyer ID which is the person who called the function and make sure they're not the owner of the sale
    let buyerId = near.predecessorAccountId();
    assert(buyerId != sale.owner_id, "you can't offer on your own sale");

    //get the u128 price of the token (dot 0 converts from U128 to u128)
    let price = BigInt(sale.sale_conditions);
    //make sure the deposit is greater than the price
    assert(deposit >= price, "deposit must be greater than or equal to price");
    
    //process the purchase (which will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties) 
    processPurchase({contract, nftContractId, tokenId, price: deposit.toString(), buyerId});
}

//private function used when a sale is purchased. 
//this will remove the sale, transfer and get the payout from the nft contract, and then distribute royalties
export function processPurchase({
    contract,
    nftContractId,
    tokenId,
    price,
    buyerId
}:{
    contract: Contract, 
    nftContractId: string, 
    tokenId: string, 
    price: string, 
    buyerId: string
}) {
    //get the sale object by removing the sale
    let sale = internallyRemoveSale(contract, nftContractId, tokenId);

    //initiate a cross contract call to the nft contract. This will transfer the token to the buyer and return
    //a payout object used for the market to distribute funds to the appropriate accounts.
    const promise = near.promiseBatchCreate(nftContractId);
    near.promiseBatchActionFunctionCall(
        promise, 
        "nft_transfer_payout", 
        bytes(JSON.stringify({ 
                receiver_id: buyerId, //purchaser (person to transfer the NFT to)
                token_id: tokenId, //token ID to transfer
                approval_id: sale.approval_id, //market contract's approval ID in order to transfer the token on behalf of the owner
                memo: "payout from market", //memo (to include some context)
                /*
                    the price that the token was purchased for. This will be used in conjunction with the royalty percentages
                    for the token in order to determine how much money should go to which account. 
                */
                balance: price, 
                max_len_payout : 10 //the maximum amount of accounts the market can payout at once (this is limited by GAS)
        })), 
        1, // 1 yoctoNEAR
        GAS_FOR_NFT_TRANSFER
    );

    //after the transfer payout has been initiated, we resolve the promise by calling our own resolve_purchase function. 
    //resolve purchase will take the payout object returned from the nft_transfer_payout and actually pay the accounts
    near.promiseThen(
        promise, 
        near.currentAccountId(), 
        "resolve_purchase", 
        bytes(JSON.stringify({
            buyer_id: buyerId, //the buyer and price are passed in incase something goes wrong and we need to refund the buyer
            price: price
        })), 
        0, // no deposit 
        GAS_FOR_ROYALTIES
    );
    return near.promiseReturn(promise);
}

/*
    private method used to resolve the promise when calling nft_transfer_payout. This will take the payout object and 
    check to see if it's authentic and there's no problems. If everything is fine, it will pay the accounts. If there's a problem,
    it will refund the buyer for the price. 
*/
export function internalResolvePurchase({
    buyerId,
    price
}:{
    buyerId: string, 
    price: string
}) {
    assert(near.currentAccountId() === near.predecessorAccountId(), "Only the contract itself can call this method");

    // checking for payout information returned from the nft_transfer_payout method
    let result = near.promiseResult(0);
    let payout = null;
    if (typeof result === 'string') {
        //if we set the payout_option to None, that means something went wrong and we should refund the buyer
        
        try {
            let payoutOption = JSON.parse(result);
            if (Object.keys(payoutOption.payout).length > 10 || Object.keys(payoutOption.payout).length < 1) {
                //we'll check if length of the payout object is > 10 or it's empty. In either case, we return None
                throw "Cannot have more than 10 royalties";
            //if the payout object is the correct length, we move forward
            } else {
                //we'll keep track of how much the nft contract wants us to payout. Starting at the full price payed by the buyer
                let remainder = BigInt(price);
                //loop through the payout and subtract the values from the remainder. 
                Object.entries(payoutOption.payout).forEach(([key, value], index) => {
                    remainder = remainder - BigInt(value as string);
                });

                //Check to see if the NFT contract sent back a faulty payout that requires us to pay more or too little. 
                //The remainder will be 0 if the payout summed to the total price. The remainder will be 1 if the royalties
                //we something like 3333 + 3333 + 3333.
                if (remainder == BigInt(0) || remainder == BigInt(1)) {
                    //set the payout because nothing went wrong
                    payout = payoutOption.payout;
                } else {
                    //if the remainder was anything but 1 or 0, we return None
                    throw "Payout is not correct";
                }
            }
        } catch (e) {
            near.log(`error parsing payout object ${result}`);
            payout = null;
        }
    }
    
    //if the payout was null, we refund the buyer for the price they payed and return
    if (payout == null) {
        const promise = near.promiseBatchCreate(buyerId);
        near.promiseBatchActionTransfer(promise, BigInt(price))
        return price;
    } 
    // NEAR payouts
    for (let [key, value] of Object.entries(payout)) {
        const promise = near.promiseBatchCreate(key);
        near.promiseBatchActionTransfer(promise, BigInt(value as string))
    }

    //return the price payout out
    return price;
}
'''
'''--- src/market-contract/sale_views.ts ---
import { Contract } from ".";
import { restoreOwners } from "./internal";
import { Sale } from "./sale";
    
//returns the number of sales the marketplace has up (as a string)
export function internalSupplySales({
    contract
}:{
    contract: Contract
}): string {
    //returns the sales object length wrapped as a string
    return contract.sales.len().toString();
}

//returns the number of sales for a given account (result is a string)
export function internalSupplyByOwnerId({
    contract,
    accountId
}:{ 
    contract: Contract, 
    accountId: string
}): string {
    //get the set of sales for the given owner Id
    let byOwnerId = restoreOwners(contract.byOwnerId.get(accountId));
    //if there as some set, we return the length but if there wasn't a set, we return 0
    if (byOwnerId == null) {
        return "0"
    }

    return byOwnerId.len().toString();
}

//returns paginated sale objects for a given account. (result is a vector of sales)
export function internalSalesByOwnerId({
    contract,
    accountId,
    fromIndex,
    limit
}:{ 
    contract: Contract, 
    accountId: string, 
    fromIndex?: string, 
    limit?: number
}): Sale[] {
    //get the set of token IDs for sale for the given account ID
    let tokenSet = restoreOwners(contract.byOwnerId.get(accountId));

    //if there was no set, we return an empty array
    if (tokenSet == null) {
        return [];
    }
    
    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
    let start = fromIndex ? parseInt(fromIndex) : 0;
    //take the first "limit" elements in the array. If we didn't specify a limit, use 50
    let max = limit ? limit : 50;

    let keys = tokenSet.toArray();
    let sales: Sale[] = []
    for(let i = start; i < max; i++) {
        if(i >= keys.length) {
            break;
        }
        let sale = contract.sales.get(keys[i]) as Sale; 
        if (sale != null) {
            sales.push(sale);
        }
    }
    return sales;
}

//get the number of sales for an nft contract. (returns a string)
export function internalSupplyByNftContractId({
    contract,
    nftContractId
}:{ 
    contract: Contract, 
    nftContractId: string
}): string {
    //get the set of tokens for associated with the given nft contract
    let byNftContractId = restoreOwners(contract.byNftContractId.get(nftContractId));
    //if there as some set, we return the length but if there wasn't a set, we return 0
    if (byNftContractId == null) {
        return "0"
    }

    return byNftContractId.len().toString();
}

//returns paginated sale objects associated with a given nft contract. (result is a vector of sales)
export function internalSalesByNftContractId({
    contract,
    accountId,
    fromIndex,
    limit
}:{    
    contract: Contract, 
    accountId: string, 
    fromIndex?: string, 
    limit?: number
}): Sale[] {
    //get the set of token IDs for sale for the given contract ID
    let tokenSet = restoreOwners(contract.byNftContractId.get(accountId));

    //if there was no set, we return an empty array
    if (tokenSet == null) {
        return [];
    }
    
    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
    let start = fromIndex ? parseInt(fromIndex) : 0;
    //take the first "limit" elements in the array. If we didn't specify a limit, use 50
    let max = limit ? limit : 50;

    let keys = tokenSet.toArray();
    let sales: Sale[] = []
    for(let i = start; i < max; i++) {
        if(i >= keys.length) {
            break;
        }
        let sale = contract.sales.get(keys[i]) as Sale; 
        if (sale != null) {
            sales.push(sale);
        }
    }
    return sales;
}

//get a sale information for a given unique sale ID (contract + DELIMITER + token ID)
export function internalGetSale({
    contract,
    nftContractToken,
}:{
    contract: Contract, 
    nftContractToken: string
}): Sale {
    //try and get the sale object for the given unique sale ID. Will return an option since
    //we're not guaranteed that the unique sale ID passed in will be valid.n);
    return contract.sales.get(nftContractToken) as Sale;
}
'''
'''--- src/nft-contract/approval.ts ---
// @ts-nocheck
import { assert, bytes, near } from "near-sdk-js";
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from ".";
import { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter } from "./internal";
import { Token } from "./metadata";

const GAS_FOR_NFT_ON_APPROVE = 35_000_000_000_000;

//approve an account ID to transfer a token on your behalf
export function internalNftApprove({
    contract,
    tokenId,
    accountId,
    msg
}:{ 
    contract: Contract, 
    tokenId: string, 
    accountId: string, 
    msg: string 
}) {
    /*
        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
        The user needs to attach enough to pay for storage on the contract
    */
    assertAtLeastOneYocto();

    //get the token object from the token ID
    let token = contract.tokensById.get(tokenId) as Token;
    if (token == null) {
        near.panic("no token");
    }
    //make sure that the person calling the function is the owner of the token
    assert(near.predecessorAccountId() === token.owner_id, "Predecessor must be the token owner");

    //get the next approval ID if we need a new approval
    let approvalId = token.next_approval_id;

    //check if the account has been approved already for this token
    let isNewApproval = token.approved_account_ids.hasOwnProperty(accountId);
    token.approved_account_ids[accountId] = approvalId;

    //if it was a new approval, we need to calculate how much storage is being used to add the account.
    let storageUsed = isNewApproval ? bytesForApprovedAccountId(accountId) : 0;

    //increment the token's next approval ID by 1
    token.next_approval_id += 1;
    //insert the token back into the tokens_by_id collection
    contract.tokensById.set(tokenId, token);

    //refund any excess storage attached by the user. If the user didn't attach enough, panic. 
    refundDeposit(BigInt(storageUsed));
    
    //if some message was passed into the function, we initiate a cross contract call on the
    //account we're giving access to. 
    if (msg != null) {
        // Initiating receiver's call and the callback
        const promise = near.promiseBatchCreate(accountId);
        near.promiseBatchActionFunctionCall(
            promise, 
            "nft_on_approve", 
            bytes(JSON.stringify({ 
                token_id: tokenId,
                owner_id: token.owner_id,
                approval_id: approvalId,
                msg
            })), 
            0, // no deposit 
            GAS_FOR_NFT_ON_APPROVE
        );

        near.promiseReturn(promise);
    }
}

//check if the passed in account has access to approve the token ID
export function internalNftIsApproved({
    contract,
    tokenId,
    approvedAccountId,
    approvalId
}:{ 
    contract: Contract, 
    tokenId: string,
    approvedAccountId: string, 
    approvalId: number 
}) {
    //get the token object from the token_id
    let token = contract.tokensById.get(tokenId) as Token;
    if (token == null) {
        near.panic("no token");
    }

    //get the approval number for the passed in account ID
    let approval = token.approved_account_ids[approvedAccountId];

    //if there was no approval ID found for the account ID, we simply return false
    if (approval == null) {
        return false
    }

    //if there was some approval ID found for the account ID
    //if there was no approval_id passed into the function, we simply return true
    if (approvalId == null) {
        return true
    }

    //if a specific approval_id was passed into the function
    //return if the approval ID passed in matches the actual approval ID for the account
    return approvalId == approval;
}

//revoke a specific account from transferring the token on your behalf
export function internalNftRevoke({
    contract,
    tokenId,
    accountId
}:{ 
    contract: Contract, 
    tokenId: string, 
    accountId: string 
}) {
    //assert that the user attached exactly 1 yoctoNEAR for security reasons
    assertOneYocto();

    //get the token object using the passed in token_id
    let token = contract.tokensById.get(tokenId) as Token;
    if (token == null) {
        near.panic("no token");
    }

    //get the caller of the function and assert that they are the owner of the token
    let predecessorAccountId = near.predecessorAccountId();
    assert(predecessorAccountId == token.owner_id, "only token owner can revoke");
     
    //if the account ID was in the token's approval, we remove it
    if (token.approved_account_ids.hasOwnProperty(accountId)) {
        delete token.approved_account_ids[accountId];
        
        //refund the funds released by removing the approved_account_id to the caller of the function
        refundApprovedAccountIdsIter(predecessorAccountId, [accountId]);
        
        //insert the token back into the tokens_by_id collection with the account_id removed from the approval list
        contract.tokensById.set(tokenId, token);
    }
}

//revoke all accounts from transferring the token on your behalf
export function internalNftRevokeAll({
    contract,
    tokenId
}:{ 
    contract: Contract, 
    tokenId: string 
}) {
    //assert that the caller attached exactly 1 yoctoNEAR for security
    assertOneYocto();

    //get the token object from the passed in token ID
    let token = contract.tokensById.get(tokenId) as Token;
    if (token == null) {
        near.panic("no token");
    }

    //get the caller and make sure they are the owner of the tokens
    let predecessorAccountId = near.predecessorAccountId();
    assert(predecessorAccountId == token.owner_id, "only token owner can revoke");

    //only revoke if the approved account IDs for the token is not empty
    if (token.approved_account_ids && Object.keys(token.approved_account_ids).length === 0 && Object.getPrototypeOf(token.approved_account_ids) === Object.prototype) {
        //refund the approved account IDs to the caller of the function
        refundApprovedAccountIds(predecessorAccountId, token.approved_account_ids);
        //clear the approved account IDs
        token.approved_account_ids = {};
        //insert the token back into the tokens_by_id collection with the approved account IDs cleared
        contract.tokensById.set(tokenId, token);
    }
}
'''
'''--- src/nft-contract/enumeration.ts ---
// @ts-nocheck
import { near, UnorderedSet } from "near-sdk-js";
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from ".";
import { restoreOwners } from "./internal";
import { JsonToken } from "./metadata";
import { internalNftToken } from "./nft_core";

//Query for the total supply of NFTs on the contract
export function internalTotalSupply({
    contract
}:{
    contract: Contract
}): number {
    //return the length of the token metadata by ID
    return contract.tokenMetadataById.len();
}

//Query for nft tokens on the contract regardless of the owner using pagination
export function internalNftTokens({
    contract,
    fromIndex,
    limit
}:{ 
    contract: Contract, 
    fromIndex?: string, 
    limit?: number
}): JsonToken[] {
    let tokens = [];

    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
    let start = fromIndex ? parseInt(fromIndex) : 0;
    //take the first "limit" elements in the array. If we didn't specify a limit, use 50
    let max = limit ? limit : 50;

    let keys = contract.tokenMetadataById.toArray();
    // Paginate through the keys using the fromIndex and limit
    for (let i = start; i < keys.length && i < start + max; i++) {
        // get the token object from the keys
        let jsonToken = internalNftToken({contract, tokenId: keys[i][0]});
        tokens.push(jsonToken);
    }
    return tokens;
}

//get the total supply of NFTs for a given owner
export function internalSupplyForOwner({
    contract,
    accountId
}:{
    contract: Contract, 
    accountId: string
}): number {
    //get the set of tokens for the passed in owner
    let tokens = restoreOwners(contract.tokensPerOwner.get(accountId));
    //if there isn't a set of tokens for the passed in account ID, we'll return 0
    if (tokens == null) {
        return 0
    }

    //if there is some set of tokens, we'll return the length 
    return tokens.len();
}

//Query for all the tokens for an owner
export function internalTokensForOwner({
    contract,
    accountId,
    fromIndex,
    limit
}:{
    contract: Contract, 
    accountId: string, 
    fromIndex?: string, 
    limit?: number
}): JsonToken[] {
    //get the set of tokens for the passed in owner
    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));

    //if there isn't a set of tokens for the passed in account ID, we'll return 0
    if (tokenSet == null) {
        return [];
    }
    
    //where to start pagination - if we have a fromIndex, we'll use that - otherwise start from 0 index
    let start = fromIndex ? parseInt(fromIndex) : 0;
    //take the first "limit" elements in the array. If we didn't specify a limit, use 50
    let max = limit ? limit : 50;

    let keys = tokenSet.toArray();
    let tokens: JsonToken[] = []
    for(let i = start; i < max; i++) {
        if(i >= keys.length) {
            break;
        }
        let token = internalNftToken({contract, tokenId: keys[i]});
        tokens.push(token);
    }
    return tokens;
}
'''
'''--- src/nft-contract/index.ts ---

import { NearContract, NearBindgen, near, call, view, LookupMap, UnorderedMap, Vector, UnorderedSet } from 'near-sdk-js'
import { NFTContractMetadata, Token, TokenMetadata, internalNftMetadata } from './metadata';
import { internalMint } from './mint';
import { internalNftTokens, internalSupplyForOwner, internalTokensForOwner, internalTotalSupply } from './enumeration';
import { internalNftToken, internalNftTransfer, internalNftTransferCall, internalResolveTransfer } from './nft_core';
import { internalNftApprove, internalNftIsApproved, internalNftRevoke, internalNftRevokeAll } from './approval';
import { internalNftPayout, internalNftTransferPayout } from './royalty';

/// This spec can be treated like a version of the standard.
export const NFT_METADATA_SPEC = "nft-1.0.0";

/// This is the name of the NFT standard we're using
export const NFT_STANDARD_NAME = "nep171";

@NearBindgen
export class Contract extends NearContract {
    owner_id: string;
    tokensPerOwner: LookupMap;
    tokensById: LookupMap;
    tokenMetadataById: UnorderedMap;
    metadata: NFTContractMetadata;

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    constructor({
        owner_id, 
        metadata = {
            spec: "nft-1.0.0",
            name: "NFT Tutorial Contract",
            symbol: "GOTEAM"
        } 
    }) {
        super()
        this.owner_id = owner_id;
        this.tokensPerOwner = new LookupMap("tokensPerOwner");
        this.tokensById = new LookupMap("tokensById");
        this.tokenMetadataById = new UnorderedMap("tokenMetadataById");
        this.metadata = metadata;
    }

    default() {
        return new Contract({owner_id: ''})
    }

    /*
        MINT
    */
    @call
    nft_mint({ token_id, metadata, receiver_id, perpetual_royalties }) {
        return internalMint({ contract: this, tokenId: token_id, metadata: metadata, receiverId: receiver_id, perpetualRoyalties: perpetual_royalties });
    }

    /*
        CORE
    */
    @view
    //get the information for a specific token ID
    nft_token({ token_id }) {
        return internalNftToken({ contract: this, tokenId: token_id });
    }

    @call
    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    nft_transfer({ receiver_id, token_id, approval_id, memo }) {
        return internalNftTransfer({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo });
    }

    @call
    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
    nft_transfer_call({ receiver_id, token_id, approval_id, memo, msg }) {
        return internalNftTransferCall({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, msg: msg });
    }

    @call
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    nft_resolve_transfer({ authorized_id, owner_id, receiver_id, token_id, approved_account_ids, memo }) {
        return internalResolveTransfer({ contract: this, authorizedId: authorized_id, ownerId: owner_id, receiverId: receiver_id, tokenId: token_id, approvedAccountIds: approved_account_ids, memo: memo });
    }

    /*
        APPROVALS
    */
    @view
    //check if the passed in account has access to approve the token ID
    nft_is_approved({ token_id, approved_account_id, approval_id }) {
        return internalNftIsApproved({ contract: this, tokenId: token_id, approvedAccountId: approved_account_id, approvalId: approval_id });
    }

    @call
    //approve an account ID to transfer a token on your behalf
    nft_approve({ token_id, account_id, msg }) {
        return internalNftApprove({ contract: this, tokenId: token_id, accountId: account_id, msg: msg });
    }

    /*
        ROYALTY
    */
    @view
    //calculates the payout for a token given the passed in balance. This is a view method
    nft_payout({ token_id, balance, max_len_payout }) {
        return internalNftPayout({ contract: this, tokenId: token_id, balance: balance, maxLenPayout: max_len_payout });
    }

    @call
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    nft_transfer_payout({ receiver_id, token_id, approval_id, memo, balance, max_len_payout }) {
        return internalNftTransferPayout({ contract: this, receiverId: receiver_id, tokenId: token_id, approvalId: approval_id, memo: memo, balance: balance, maxLenPayout: max_len_payout });
    }

    @call
    //approve an account ID to transfer a token on your behalf
    nft_revoke({ token_id, account_id }) {
        return internalNftRevoke({ contract: this, tokenId: token_id, accountId: account_id });
    }

    @call
    //approve an account ID to transfer a token on your behalf
    nft_revoke_all({ token_id }) {
        return internalNftRevokeAll({ contract: this, tokenId: token_id });
    }

    /*
        ENUMERATION
    */
    @view
    //Query for the total supply of NFTs on the contract
    nft_total_supply() {
        return internalTotalSupply({ contract: this });
    }

    @view
    //Query for nft tokens on the contract regardless of the owner using pagination
    nft_tokens({ from_index, limit }) {
        return internalNftTokens({ contract: this, fromIndex: from_index, limit: limit });
    }

    @view
    //get the total supply of NFTs for a given owner
    nft_tokens_for_owner({ account_id, from_index, limit }) {
        return internalTokensForOwner({ contract: this, accountId: account_id, fromIndex: from_index, limit: limit });
    }

    @view
    //Query for all the tokens for an owner
    nft_supply_for_owner({ account_id }) {
        return internalSupplyForOwner({ contract: this, accountId: account_id });
    }

    /*
        METADATA
    */
    @view
    //Query for all the tokens for an owner
    nft_metadata() {
        return internalNftMetadata({ contract: this });
    }
}
'''
'''--- src/nft-contract/internal.ts ---
import { assert, near, UnorderedSet, Vector } from "near-sdk-js";
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from ".";
import { Token } from "./metadata";

// Gets a collection and deserializes it into a set that can be used.
export function restoreOwners(collection) {
    if (collection == null) {
        return null;
    }
    return UnorderedSet.deserialize(collection as UnorderedSet);
}

//convert the royalty percentage and amount to pay into a payout (U128)
export function royaltyToPayout(royaltyPercentage: number, amountToPay: bigint): string {
    return (BigInt(royaltyPercentage) * BigInt(amountToPay) / BigInt(10000)).toString();
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 
export function refundApprovedAccountIdsIter(accountId: string, approvedAccountIds: string[]) {
    //get the storage total by going through and summing all the bytes for each approved account IDs
    let storageReleased = approvedAccountIds.map(e => bytesForApprovedAccountId(e)).reduce((partialSum, a) => partialSum + a, 0);
    let amountToTransfer = BigInt(storageReleased) * near.storageByteCost().valueOf();
    
    // Send the money to the beneficiary (TODO: don't use batch actions)
    const promise = near.promiseBatchCreate(accountId);
    near.promiseBatchActionTransfer(promise, amountToTransfer)
}

//refund a map of approved account IDs and send the funds to the passed in account ID
export function refundApprovedAccountIds(accountId: string, approvedAccountIds: { [key: string]: number }) {
    //call the refundApprovedAccountIdsIter with the approved account IDs as keys
    refundApprovedAccountIdsIter(accountId, Object.keys(approvedAccountIds));
}

//refund the initial deposit based on the amount of storage that was used up
export function refundDeposit(storageUsed: bigint) {
    //get how much it would cost to store the information
    let requiredCost = storageUsed * near.storageByteCost().valueOf()
    //get the attached deposit
    let attachedDeposit = near.attachedDeposit().valueOf();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert(
        requiredCost <= attachedDeposit,
        `Must attach ${requiredCost} yoctoNEAR to cover storage`
    )

    //get the refund amount from the attached deposit - required cost
    let refund = attachedDeposit - requiredCost;
    near.log(`Refunding ${refund} yoctoNEAR`);

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if (refund > 1) {
        // Send the money to the beneficiary (TODO: don't use batch actions)
        const promise = near.promiseBatchCreate(near.predecessorAccountId());
        near.promiseBatchActionTransfer(promise, refund)
    }
}

//calculate how many bytes the account ID is taking up
export function bytesForApprovedAccountId(accountId: string): number {
    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
    return accountId.length + 4 + 8;
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
export function assertAtLeastOneYocto() {
    assert(near.attachedDeposit().valueOf() >= BigInt(1), "Requires attached deposit of at least 1 yoctoNEAR");
}

//used to make sure the user attached exactly 1 yoctoNEAR
export function assertOneYocto() {
    assert(near.attachedDeposit().toString() === "1", "Requires attached deposit of exactly 1 yoctoNEAR");
}

//add a token to the set of tokens an owner has
export function internalAddTokenToOwner(contract: Contract, accountId: string, tokenId: string) {
    //get the set of tokens for the given account
    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));

    if(tokenSet == null) {
        //if the account doesn't have any tokens, we create a new unordered set
        tokenSet = new UnorderedSet("tokensPerOwner" + accountId.toString());
    }

    //we insert the token ID into the set
    tokenSet.set(tokenId);

    //we insert that set for the given account ID. 
    contract.tokensPerOwner.set(accountId, tokenSet);
}

//remove a token from an owner (internal method and can't be called directly via CLI).
export function internalRemoveTokenFromOwner(contract: Contract, accountId: string, tokenId: string) {
    //we get the set of tokens that the owner has
    let tokenSet = restoreOwners(contract.tokensPerOwner.get(accountId));
    //if there is no set of tokens for the owner, we panic with the following message:
    if (tokenSet == null) {
        near.panic("Token should be owned by the sender");
    }

    //we remove the the token_id from the set of tokens
    tokenSet.remove(tokenId)

    //if the token set is now empty, we remove the owner from the tokens_per_owner collection
    if (tokenSet.isEmpty()) {
        contract.tokensPerOwner.remove(accountId);
    } else { //if the token set is not empty, we simply insert it back for the account ID. 
        contract.tokensPerOwner.set(accountId, tokenSet);
    }
}

//transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).
export function internalTransfer(contract: Contract, senderId: string, receiverId: string, tokenId: string, approvalId: number, memo: string): Token {
    //get the token object by passing in the token_id
    let token = contract.tokensById.get(tokenId) as Token;
    if (token == null) {
        near.panic("no token found");
    }

    //if the sender doesn't equal the owner, we check if the sender is in the approval list
    if (senderId != token.owner_id) {
        //if the token's approved account IDs doesn't contain the sender, we panic
        if (!token.approved_account_ids.hasOwnProperty(senderId)) {
            near.panic("Unauthorized");
        }

        // If they included an approval_id, check if the sender's actual approval_id is the same as the one included
        if (approvalId != null) {
            //get the actual approval ID
            let actualApprovalId = token.approved_account_ids[senderId];
            //if the sender isn't in the map, we panic
            if (actualApprovalId == null) {
                near.panic("Sender is not approved account");
            }

            //make sure that the actual approval ID is the same as the one provided
            assert(actualApprovalId == approvalId, `The actual approval_id ${actualApprovalId} is different from the given approval_id ${approvalId}`);
        }
    }

    //we make sure that the sender isn't sending the token to themselves
    assert(token.owner_id != receiverId, "The token owner and the receiver should be different")

    //we remove the token from it's current owner's set
    internalRemoveTokenFromOwner(contract, token.owner_id, tokenId);
    //we then add the token to the receiver_id's set
    internalAddTokenToOwner(contract, receiverId, tokenId);

    //we create a new token struct 
    let newToken = new Token ({
        ownerId: receiverId,
        //reset the approval account IDs
        approvedAccountIds: {},
        nextApprovalId: token.next_approval_id,
        //we copy over the royalties from the previous token
        royalty: token.royalty,
    });

    //insert that new token into the tokens_by_id, replacing the old entry 
    contract.tokensById.set(tokenId, newToken);

    //if there was some memo attached, we log it. 
    if (memo != null) {
        near.log(`Memo: ${memo}`);
    }

    // Default the authorized ID to be None for the logs.
    let authorizedId;

    //if the approval ID was provided, set the authorized ID equal to the sender
    if (approvalId != null) {
        authorizedId = senderId
    }

    // Construct the transfer log as per the events standard.
    let nftTransferLog = {
        // Standard name ("nep171").
        standard: NFT_STANDARD_NAME,
        // Version of the standard ("nft-1.0.0").
        version: NFT_METADATA_SPEC,
        // The data related with the event stored in a vector.
        event: "nft_transfer",
        data: [
            {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id: authorizedId,
                // The old owner's account ID.
                old_owner_id: token.owner_id,
                // The account ID of the new owner of the token.
                new_owner_id: receiverId,
                // A vector containing the token IDs as strings.
                token_ids: [tokenId],
                // An optional memo to include.
                memo,
            }
        ]
    }

    // Log the serialized json.
    near.log(JSON.stringify(nftTransferLog));

    //return the previous token object that was transferred.
    return token
}
'''
'''--- src/nft-contract/metadata.ts ---
import { Contract } from ".";

//defines the payout type we'll be returning as a part of the royalty standards.
export class Payout {
    payout: { [accountId: string]: bigint };
    constructor({ payout }: { payout: { [accountId: string]: bigint } }) {
        this.payout = payout;
    }
}

export class NFTContractMetadata {
    spec: string;
    name: string;
    symbol: string;
    icon?: string;
    base_uri?: string;
    reference?: string;
    reference_hash?: string;
    
    constructor(
        {
            spec, 
            name, 
            symbol, 
            icon, 
            baseUri, 
            reference, 
            referenceHash
        }:{ 
            spec: string, 
            name: string, 
            symbol: string, 
            icon?: string, 
            baseUri?: string, 
            reference?: string, 
            referenceHash?: string
        }) {
        this.spec = spec  // required, essentially a version like "nft-1.0.0"
        this.name = name  // required, ex. "Mosaics"
        this.symbol = symbol // required, ex. "MOSAIC"
        this.icon = icon // Data URL
        this.base_uri = baseUri // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
        this.reference = reference // URL to a JSON file with more info
        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
    }
}

export class TokenMetadata {
    title?: string;
    description?: string;
    media?: string;
    media_hash?: string;
    copies?: number;
    issued_at?: string;
    expires_at?: string;
    starts_at?: string;
    updated_at?: string;
    extra?: string;
    reference?: string;
    reference_hash?: string;

    constructor(
        {
            title, 
            description, 
            media, 
            mediaHash, 
            copies, 
            issuedAt, 
            expiresAt, 
            startsAt, 
            updatedAt, 
            extra, 
            reference, 
            referenceHash
        }:{
            title?: string, 
            description?: string, 
            media?: string, 
            mediaHash?: string, 
            copies?: number, 
            issuedAt?: string, 
            expiresAt?: string, 
            startsAt?: string, 
            updatedAt?: string, 
            extra?: string, 
            reference?: string, 
            referenceHash?: string}
        ) {
        this.title = title // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
        this.description = description // free-form description
        this.media = media // URL to associated media, preferably to decentralized, content-addressed storage
        this.media_hash = mediaHash // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
        this.copies = copies // number of copies of this set of metadata in existence when token was minted.
        this.issued_at = issuedAt // ISO 8601 datetime when token was issued or minted
        this.expires_at = expiresAt // ISO 8601 datetime when token expires
        this.starts_at = startsAt // ISO 8601 datetime when token starts being valid
        this.updated_at = updatedAt // ISO 8601 datetime when token was last updated
        this.extra = extra // anything extra the NFT wants to store on-chain. Can be stringified JSON.
        this.reference = reference // URL to an off-chain JSON file with more info.
        this.reference_hash = referenceHash // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
    }
}

export class Token {
    owner_id: string;
    approved_account_ids: { [accountId: string]: number };
    next_approval_id: number;
    royalty: { [accountId: string]: number };

    constructor({ 
        ownerId, 
        approvedAccountIds, 
        nextApprovalId, 
        royalty 
    }:{ 
        ownerId: string, 
        approvedAccountIds: { [accountId: string]: number }, 
        nextApprovalId: number, 
        royalty: { [accountId: string]: number } 
    }) {
        //owner of the token
        this.owner_id = ownerId,
        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
        this.approved_account_ids = approvedAccountIds,
        //the next approval ID to give out. 
        this.next_approval_id = nextApprovalId,
        //keep track of the royalty percentages for the token in a hash map
        this.royalty = royalty
    }
}

//The Json token is what will be returned from view calls. 
export class JsonToken {
    token_id: string;
    owner_id: string;
    metadata: TokenMetadata;
    approved_account_ids: { [accountId: string]: number };
    royalty: { [accountId: string]: number };

    constructor({ 
        tokenId, 
        ownerId, 
        metadata, 
        approvedAccountIds, 
        royalty 
    }:{
        tokenId: string,
        ownerId: string,
        metadata: TokenMetadata,
        approvedAccountIds: { [accountId: string]: number },
        royalty: { [accountId: string]: number }
    }) {
        //token ID
        this.token_id = tokenId,
        //owner of the token
        this.owner_id = ownerId,
        //token metadata
        this.metadata = metadata,
        //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
        this.approved_account_ids = approvedAccountIds,
        //keep track of the royalty percentages for the token in a hash map
        this.royalty = royalty
    }
}

//get the information for a specific token ID
export function internalNftMetadata({
    contract
}:{
    contract: Contract
}): NFTContractMetadata {
    return contract.metadata;
}
'''
'''--- src/nft-contract/mint.ts ---
// @ts-nocheck
import { assert, near } from "near-sdk-js";
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from ".";
import { internalAddTokenToOwner, refundDeposit } from "./internal";
import { Token, TokenMetadata } from "./metadata";

export function internalMint({
    contract,
    tokenId,
    metadata,
    receiverId,
    perpetualRoyalties
}:{ 
    contract: Contract, 
    tokenId: string, 
    metadata: TokenMetadata, 
    receiverId: string 
    perpetualRoyalties: {[key: string]: number}
}): void {
    //measure the initial storage being used on the contract TODO
    let initialStorageUsage = near.storageUsage();

    // create a royalty map to store in the token
    let royalty: { [accountId: string]: number } = {}

    // if perpetual royalties were passed into the function: TODO: add isUndefined fn
    if (perpetualRoyalties != null) {
        //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
        assert(Object.keys(perpetualRoyalties).length < 7, "Cannot add more than 6 perpetual royalty amounts");
        
        //iterate through the perpetual royalties and insert the account and amount in the royalty map
        Object.entries(perpetualRoyalties).forEach(([account, amount], index) => {
            royalty[account] = amount;
        });
    }

    //specify the token struct that contains the owner ID 
    let token = new Token ({
        //set the owner ID equal to the receiver ID passed into the function
        ownerId: receiverId,
        //we set the approved account IDs to the default value (an empty map)
        approvedAccountIds: {},
        //the next approval ID is set to 0
        nextApprovalId: 0,
        //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
        royalty,
    });

    //insert the token ID and token struct and make sure that the token doesn't exist
    assert(!contract.tokensById.containsKey(tokenId), "Token already exists");
    contract.tokensById.set(tokenId, token)

    //insert the token ID and metadata
    contract.tokenMetadataById.set(tokenId, metadata);

    //call the internal method for adding the token to the owner
    internalAddTokenToOwner(contract, token.owner_id, tokenId)

    // Construct the mint log as per the events standard.
    let nftMintLog = {
        // Standard name ("nep171").
        standard: NFT_STANDARD_NAME,
        // Version of the standard ("nft-1.0.0").
        version: NFT_METADATA_SPEC,
        // The data related with the event stored in a vector.
        event: "nft_mint",
        data: [
            {
                // Owner of the token.
                owner_id: token.owner_id,
                // Vector of token IDs that were minted.
                token_ids: [tokenId],
            }
        ]
    }
    
    // Log the json.
    near.log(`EVENT_JSON:${JSON.stringify(nftMintLog)}`);

    //calculate the required storage which was the used - initial TODO
    let requiredStorageInBytes = near.storageUsage().valueOf() - initialStorageUsage.valueOf();

    //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.
    refundDeposit(requiredStorageInBytes);
}
'''
'''--- src/nft-contract/nft_core.ts ---
// @ts-nocheck
import { assert, bytes, near } from "near-sdk-js";
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from ".";
import { assertOneYocto, internalAddTokenToOwner, internalRemoveTokenFromOwner, internalTransfer, refundDeposit, refundApprovedAccountIds } from "./internal";
import { JsonToken, Token, TokenMetadata } from "./metadata";

const GAS_FOR_RESOLVE_TRANSFER = 40_000_000_000_000;
const GAS_FOR_NFT_ON_TRANSFER = 35_000_000_000_000;

//get the information for a specific token ID
export function internalNftToken({
    contract,
    tokenId
}:{ 
    contract: Contract, 
    tokenId: string 
}) {
    let token = contract.tokensById.get(tokenId) as Token;
    //if there wasn't a token ID in the tokens_by_id collection, we return None
    if (token == null) {
        return null;
    }

    //if there is some token ID in the tokens_by_id collection
    //we'll get the metadata for that token
    let metadata = contract.tokenMetadataById.get(tokenId) as TokenMetadata;
    
    //we return the JsonToken
    let jsonToken = new JsonToken({
        tokenId: tokenId,
        ownerId: token.owner_id,
        metadata,
        approvedAccountIds: token.approved_account_ids,
        royalty: token.royalty
    });
    return jsonToken;
}

//implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
export function internalNftTransfer({
    contract,
    receiverId,
    tokenId,
    approvalId,
    memo,
}:{
    contract: Contract, 
    receiverId: string, 
    tokenId: string, 
    approvalId: number
    memo: string
}) {
    //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. 
    assertOneYocto();
    //get the sender to transfer the token from the sender to the receiver
    let senderId = near.predecessorAccountId();

    //call the internal transfer method and get back the previous token so we can refund the approved account IDs
    let previousToken = internalTransfer(
        contract,
        senderId,
        receiverId,
        tokenId,
        approvalId,
        memo,
    );

    //we refund the owner for releasing the storage used up by the approved account IDs
    refundApprovedAccountIds(
        previousToken.owner_id,
        previousToken.approved_account_ids
    );
}

//implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
export function internalNftTransferCall({
    contract,
    receiverId,
    tokenId,
    approvalId,
    memo,
    msg
}:{
    contract: Contract,
    receiverId: string, 
    tokenId: string, 
    approvalId: number,
    memo: string,
    msg: string  
}) {
    //assert that the user attached exactly 1 yocto for security reasons. 
    assertOneYocto();
    //get the sender to transfer the token from the sender to the receiver
    let senderId = near.predecessorAccountId();

    //call the internal transfer method and get back the previous token so we can refund the approved account IDs
    let previousToken = internalTransfer(
        contract,
        senderId,
        receiverId,
        tokenId,
        approvalId,
        memo,
    );

    // Initiating receiver's call and the callback
    const promise = near.promiseBatchCreate(receiverId);
    near.promiseBatchActionFunctionCall(
        promise, 
        "nft_on_transfer", 
        bytes(JSON.stringify({ 
            sender_id: senderId,
            previous_owner_id: previousToken.owner_id,
            token_id: tokenId,
            msg
        })), 
        0, // no deposit 
        GAS_FOR_NFT_ON_TRANSFER
    );

    // We then resolve the promise and call nft_resolve_transfer on our own contract
    near.promiseThen(
        promise, 
        near.currentAccountId(), 
        "nft_resolve_transfer", 
        bytes(JSON.stringify({
            owner_id: previousToken.owner_id,
            receiver_id: receiverId,
            token_id: tokenId,
            approved_account_ids: previousToken.approved_account_ids
        })), 
        0, // no deposit 
        GAS_FOR_RESOLVE_TRANSFER
    );
    return near.promiseReturn(promise);
}

//resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
//returns true if the token was successfully transferred to the receiver_id
export function internalResolveTransfer({
    contract,
    authorizedId,
    ownerId,
    receiverId,
    tokenId,
    approvedAccountIds,
    memo
}:{
    contract: Contract,
    authorizedId: string,
    ownerId: string,
    receiverId: string,
    tokenId: string,
    approvedAccountIds: { [key: string]: number },
    memo: string    
}) {
    assert(near.currentAccountId() === near.predecessorAccountId(), "Only the contract itself can call this method");
    // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
    // call result.
    let result = near.promiseResult(0);
    if (typeof result === 'string') {
        //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
        //if we need don't need to return the token, we simply return true meaning everything went fine
        if (result === 'false') {
            /* 
                since we've already transferred the token and nft_on_transfer returned false, we don't have to 
                revert the original transfer and thus we can just return true since nothing went wrong.
            */
            //we refund the owner for releasing the storage used up by the approved account IDs
            refundApprovedAccountIds(ownerId, approvedAccountIds);
            return true;
        }
    }

    //get the token object if there is some token object
    let token = contract.tokensById.get(tokenId) as Token;
    if (token != null) {
        if (token.owner_id != receiverId) {
            //we refund the owner for releasing the storage used up by the approved account IDs
            refundApprovedAccountIds(ownerId, approvedAccountIds);
            // The token is not owner by the receiver anymore. Can't return it.
            return true;
        }
    //if there isn't a token object, it was burned and so we return true
    } else {
        //we refund the owner for releasing the storage used up by the approved account IDs
        refundApprovedAccountIds(ownerId, approvedAccountIds);
        return true;
    }

    //we remove the token from the receiver
    internalRemoveTokenFromOwner(contract, receiverId, tokenId);
    //we add the token to the original owner
    internalAddTokenToOwner(contract, ownerId, tokenId);

    //we change the token struct's owner to be the original owner 
    token.owner_id = ownerId

    //we refund the receiver any approved account IDs that they may have set on the token
    refundApprovedAccountIds(receiverId, token.approved_account_ids);
    //reset the approved account IDs to what they were before the transfer
    token.approved_account_ids = approvedAccountIds;

    //we inset the token b  ack into the tokens_by_id collection
    contract.tokensById.set(tokenId, token);

    /*
        We need to log that the NFT was reverted back to the original owner.
        The old_owner_id will be the receiver and the new_owner_id will be the
        original owner of the token since we're reverting the transfer.
    */

    // Construct the transfer log as per the events standard.
    let nftTransferLog = {
        // Standard name ("nep171").
        standard: NFT_STANDARD_NAME,
        // Version of the standard ("nft-1.0.0").
        version: NFT_METADATA_SPEC,
        // The data related with the event stored in a vector.
        event: "nft_transfer",
        data: [
            {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id: authorizedId,
                // The old owner's account ID.
                old_owner_id: receiverId,
                // The account ID of the new owner of the token.
                new_owner_id: ownerId,
                // A vector containing the token IDs as strings.
                token_ids: [tokenId],
                // An optional memo to include.
                memo,
            }
        ]
    }

    // Log the serialized json.
    near.log(JSON.stringify(nftTransferLog));

    //return false
    return false
}
'''
'''--- src/nft-contract/royalty.ts ---
// @ts-nocheck
import { assert, near } from "near-sdk-js";
import { Contract, NFT_METADATA_SPEC, NFT_STANDARD_NAME } from ".";
import { assertAtLeastOneYocto, assertOneYocto, bytesForApprovedAccountId, internalAddTokenToOwner, internalTransfer, refundDeposit, refundApprovedAccountIds, refundApprovedAccountIdsIter, royaltyToPayout } from "./internal";
import { Token } from "./metadata";

//calculates the payout for a token given the passed in balance. This is a view method
export function internalNftPayout({
    contract,
    tokenId,
    balance,
    maxLenPayout
}:{
    contract: Contract, 
    tokenId: string,
    balance: bigint, 
    maxLenPayout: number,
}): { payout: {[key: string]: string }} {
    //get the token object
    let token = contract.tokensById.get(tokenId) as Token;
    if (token == null) {
        near.panic("no token");
    }

    //get the owner of the token
    let ownerId = token.owner_id;
    //keep track of the total perpetual royalties
    let totalPerpetual = 0;
    //keep track of the payout object to send back
    let payoutObj: { [key: string]: string } = {};
    //get the royalty object from token
    let royalty = token.royalty;

    //make sure we're not paying out to too many people (GAS limits this)
    assert(Object.keys(royalty).length <= maxLenPayout, "Market cannot payout to that many receivers");
    
    //go through each key and value in the royalty object
    Object.entries(royalty).forEach(([key, value], index) => {
        //only insert into the payout if the key isn't the token owner (we add their payout at the end)
        if (key != ownerId) {
            payoutObj[key] = royaltyToPayout(value, balance);
            totalPerpetual += value;
        }
    });

    // payout to previous owner who gets 100% - total perpetual royalties
    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);

    //return the payout object
    return {
        payout: payoutObj
    }
}

//transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
export function internalNftTransferPayout({
    contract,
    receiverId,
    tokenId,
    approvalId,
    memo,
    balance,
    maxLenPayout
}:{
    contract: Contract, 
    receiverId: string, 
    tokenId: string,
    approvalId: number,
    memo: string,
    balance: bigint,
    maxLenPayout: number,
}): { payout: {[key: string]: string }} {
    //assert that the user attached 1 yocto NEAR for security reasons
    assertOneYocto();
    //get the sender ID
    let senderId = near.predecessorAccountId();
    //transfer the token to the passed in receiver and get the previous token object back
    let previousToken: Token = internalTransfer(
        contract,
        senderId,
        receiverId,
        tokenId,
        approvalId,
        memo,
    );

    //refund the previous token owner for the storage used up by the previous approved account IDs
    refundApprovedAccountIds(
        previousToken.owner_id,
        previousToken.approved_account_ids,
    );

    //get the owner of the token
    let ownerId = previousToken.owner_id;
    //keep track of the total perpetual royalties
    let totalPerpetual = 0;
    //keep track of the payout object to send back
    let payoutObj: { [key: string]: string } = {};
    //get the royalty object from token
    let royalty = previousToken.royalty;

    //make sure we're not paying out to too many people (GAS limits this)
    assert(Object.keys(royalty).length <= maxLenPayout, "Market cannot payout to that many receivers");
    
    //go through each key and value in the royalty object
    Object.entries(royalty).forEach(([key, value], index) => {
        //only insert into the payout if the key isn't the token owner (we add their payout at the end)
        if (key != ownerId) {
            payoutObj[key] = royaltyToPayout(value, balance);
            totalPerpetual += value;
        }
    });

    // payout to previous owner who gets 100% - total perpetual royalties
    payoutObj[ownerId] = royaltyToPayout(10000 - totalPerpetual, balance);

    //return the payout object
    return {
        payout: payoutObj
    }
}
'''
'''--- tsconfig.json ---
{
    "compilerOptions": {
        "experimentalDecorators": true,
        "target": "es5",
        "noEmit": true
    },
    "exclude": [
        "node_modules"
    ],
}
'''