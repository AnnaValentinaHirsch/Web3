*GitHub Repository "nearlog/nearlog-indexer"*

'''--- README.md ---
# nearlog-indexer

Stored nearlog logs into the indexer

## Getting started

```
cd existing_repo
git remote add origin https://github.com/nearlog/nearlog-indexer.git
git branch -M main
git push -uf origin main
```

```
graph auth --product hosted-service xxxxx
graph deploy --product hosted-service nhtera/nearlog

yarn start
yarn deploy
```

'''
'''--- networks.json ---
{
  "near-testnet": {
    "Contract": {}
  }
}
'''
'''--- package.json ---
{
  "name": "nearlog",
  "license": "UNLICENSED",
  "scripts": {
    "codegen": "graph codegen",
    "build": "graph build",
    "deploy": "graph deploy --node https://api.thegraph.com/deploy/ nhtera/nearlog",
    "create-local": "graph create --node http://localhost:8020/ nhtera/nearlog",
    "remove-local": "graph remove --node http://localhost:8020/ nhtera/nearlog",
    "deploy-local": "graph deploy --node http://localhost:8020/ --ipfs http://localhost:5001 nhtera/nearlog",
    "test": "graph test"
  },
  "dependencies": {
    "@graphprotocol/graph-cli": "0.33.1",
    "@graphprotocol/graph-ts": "0.27.0"
  }
}

'''
'''--- src/contract.ts ---
import { near, BigInt, json } from "@graphprotocol/graph-ts";
import { OptionEntity } from "../generated/schema";
import { log } from "@graphprotocol/graph-ts";

export function handleReceipt(receipt: near.ReceiptWithOutcome): void {
  const actions = receipt.receipt.actions;
  log.info("receipt id: {}", [receipt.receipt.id.toBase58()]);
  for (let i = 0; i < actions.length; i++) {
    handleAction(actions[i], receipt);
  }
}

function handleAction(
  action: near.ActionValue,
  receiptWithOutcome: near.ReceiptWithOutcome
): void {
  if (action.kind != near.ActionKind.FUNCTION_CALL) {
    return;
  }
  const outcome = receiptWithOutcome.outcome;
  const functionCall = action.toFunctionCall();
  const methodName = functionCall.methodName;
  let timeStamp = receiptWithOutcome.block.header.timestampNanosec.toString();
  let receiptId = receiptWithOutcome.receipt.id.toBase58();

  if (methodName == "create") {
    for (let logIndex = 0; logIndex < outcome.logs.length; logIndex++) {
      let outcomeLog = outcome.logs[logIndex].toString();

      const jsonData = json.try_fromString(outcomeLog);
      if (jsonData._error) return;

      const jsonObject = jsonData.value.toObject();
      let params = jsonObject.get("params");

      if (params) {
        let paramsObject = params.toObject();
        let option_id = paramsObject.get("option_id");
        let option_type = paramsObject.get("option_type");
        let amount = paramsObject.get("amount");
        let strike = paramsObject.get("strike");
        let expiration = paramsObject.get("expiration");
        let premium = paramsObject.get("premium");

        if (option_id) {
          let optionId = `${option_id.toString()}`;
          let optionInfo = OptionEntity.load(optionId);
          if (!optionInfo) {
            optionInfo = new OptionEntity(optionId);
          }

          if (option_type) optionInfo.option_type = option_type.toString();
          if (amount) optionInfo.amount = amount.toString();
          if (strike) optionInfo.strike = strike.toString();
          if (expiration) optionInfo.expiration = expiration.toString();
          if (premium) optionInfo.premium = premium.toString();
        }
      }
    }
  }
}

'''
'''--- tsconfig.json ---
{
  "extends": "@graphprotocol/graph-ts/types/tsconfig.base.json",
  "include": ["src"]
}

'''