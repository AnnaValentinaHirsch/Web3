*GitHub Repository "near/near-ledger-js"*

'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .travis.yml ---
language: node_js
node_js:
  - 12

before_script:
  - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash"

script:
  - fossa init
  - fossa analyze --server-scan
  - fossa test

'''
'''--- README.md ---
# near-ledger-js 

A JavaScript library for communication with [Ledger](https://www.ledger.com/) Hardware Wallet.

# Example usage
```javascript
  import { createClient, getSupportedTransport } from "near-ledger-js";
  
  const transport = await getSupportedTransport();
  transport.setScrambleKey("NEAR");
  
  transport.on('disconnect', () => {...});
```

In an onClick handler:
```javascript
  const client = await createClient(transport);
  // If no error thrown, ledger is available. NOTE: U2F transport will still get here even if device is not present 
```

To see debug logging for `getSupportedTransport()`, import `setDebugLogging()` and call `setDebugLogging(true)` before using the package.

# How to run demo project
1. `yarn` to install dependencies
2. `yarn start` to start local server with Parcel
3. Open https://localhost:1234 in your browser
4. Open browser console
5. Try examples shown on the page

# License

This repository is distributed under the terms of both the MIT license and the Apache License (Version 2.0).
See [LICENSE](LICENSE) and [LICENSE-APACHE](LICENSE-APACHE) for details.

'''
'''--- demo/demo.js ---
import "regenerator-runtime/runtime";

import { listen } from "@ledgerhq/logs";
import bs58 from "bs58";

import { createClient, getSupportedTransport, setDebugLogging } from "../";

setDebugLogging(true);
listen(console.log);

window.Buffer = Buffer; // Exists due to `bs58` import

class LedgerManager {
    constructor() {
        this.bs58 = bs58;
        this.available = false;
        this.disconnectHandler = (...args) => this.handleDisconnect(...args)
    }

    handleDisconnect(reason) {
        console.log('ledger disconnected', reason);
        this.setLedgerAvailableStatus(false);
    }

    setLedgerAvailableStatus(status) {
        this.available = status;

        const statusMessage = this.available ? "Ledger client available" : "Ledger client not available";
        document.getElementById('ledgerStatus').innerHTML = statusMessage;
        console.log(statusMessage);
    }

    async initialize() {
        if (this.transport) {
            if (this.transport.close) {
                console.log('Closing transport');
                try {
                    this.transport.close && this.transport.close();
                } catch (e) {
                    console.warn('Failed to close existing transport', e);
                } finally {
                    this.transport.off('disconnect', this.disconnectHandler);
                }
            }

            delete this.transport;
            delete this.client;
            this.setLedgerAvailableStatus(false);
        }

        this.transport = await this.createTransport();
        this.transport.on('disconnect', this.disconnectHandler);

        this.client = await this.createClient(this.transport);

        this.setLedgerAvailableStatus(true);
    }

    createClient(...args) {
        return createClient(...args);
    }

    async createTransport() {
        const transport = await getSupportedTransport();
        transport.setScrambleKey("NEAR");
        return transport;
    }
}

window.NEAR = { LedgerManager };
'''
'''--- demo/index.html ---
<html>
<body>
<script src="./demo.js"></script>
<script>
    window.nearLedger = new window.NEAR.LedgerManager();
    window.onload = () => window.nearLedger.setLedgerAvailableStatus(false);
</script>
<h1>Examples</h1>
<div><h2 id="ledgerStatus"></h2></div>
<button onClick="window.nearLedger.initialize()">Initialize Ledger Client</button>
<p>Click "Initialize Ledger Client" before using the following commands:</p>
<pre>
    await nearLedger.client.getVersion()
    await nearLedger.client.getPublicKey("44'/397'/0'/0'/1'")
    let txData = Buffer.from("18000000746573742d636f6e6e6563742d6c65646765722e746573740072068e029a9809c7f2da79c8a274743ff5f7edce24d648bd13e97f7093a03132040000000000000002000000766750dc6e47ddccb2421f27dec206d5ea4694422a1c2fc35ca8c2e3638a02aacf4b0100000003000040bd8b5b936b6c00000000000000", "hex");
    await nearLedger.client.sign(txData, "44'/397'/0'/0'/1'")
    let txData = Buffer.from("17000000746573742d70722d3531372d6c65646765722e746573740072068e029a9809c7f2da79c8a274743ff5f7edce24d648bd13e97f7093a0313201000000000000000200000076674241eecd753a851429e4b415eb139dda037f705960200aa7a946bf24469b646e0100000003000000a1edccce1bc2d3000000000000", "hex");
    await nearLedger.client.sign(txData, "44'/397'/0'/0'/1'")
</pre>
</body>
</html>

'''
'''--- index.js ---
const { getSupportedTransport, setDebugLogging } = require('./supportedTransports');

module.exports.getSupportedTransport = getSupportedTransport;
module.exports.setDebugLogging = setDebugLogging;

function bip32PathToBytes(path) {
    const parts = path.split('/');
    return Buffer.concat(
        parts
            .map(part => part.endsWith(`'`)
                ? Math.abs(parseInt(part.slice(0, -1))) | 0x80000000
                : Math.abs(parseInt(part)))
            .map(i32 => Buffer.from([
                (i32 >> 24) & 0xFF,
                (i32 >> 16) & 0xFF,
                (i32 >> 8) & 0xFF,
                i32 & 0xFF,
            ])));
}

const networkId = 'W'.charCodeAt(0);

const DEFAULT_PATH = "44'/397'/0'/0'/1'";
module.exports.createClient = async function createClient(transport) {
    return {
        transport,
        async getVersion() {
            const response = await this.transport.send(0x80, 6, 0, 0);
            const [major, minor, patch] = Array.from(response);
            return `${major}.${minor}.${patch}`;
        },
        async getPublicKey(path) {
            path = path || DEFAULT_PATH;
            const response = await this.transport.send(0x80, 4, 0, networkId, bip32PathToBytes(path));
            return Buffer.from(response.subarray(0, -2));
        },
        async sign(transactionData, path) {
            // NOTE: getVersion call allows to reset state to avoid starting from partially filled buffer
            const version = await this.getVersion();
            console.info('Ledger app version:', version);
            // TODO: Assert compatible versions

            path = path || DEFAULT_PATH;
            transactionData = Buffer.from(transactionData);
            // 128 - 5 service bytes
            const CHUNK_SIZE = 123
            const allData = Buffer.concat([bip32PathToBytes(path), transactionData]);
            for (let offset = 0; offset < allData.length; offset += CHUNK_SIZE) {
                const chunk = Buffer.from(allData.subarray(offset, offset + CHUNK_SIZE));
                const isLastChunk = offset + CHUNK_SIZE >= allData.length;
                const response = await this.transport.send(0x80, 2, isLastChunk ? 0x80 : 0, networkId, chunk);
                if (isLastChunk) {
                    return Buffer.from(response.subarray(0, -2));
                }
            }
        }
    }
}

'''
'''--- package.json ---
{
  "name": "near-ledger-js",
  "version": "0.2.1",
  "description": "Connect to NEAR Ledger app from browser",
  "main": "index.js",
  "license": "MIT",
  "scripts": {
    "start": "parcel --https demo/index.html",
    "test": "parcel build demo/index.html"
  },
  "devDependencies": {
    "@ledgerhq/logs": "^5.15.0",
    "parcel": "^1.12.3",
    "regenerator-runtime": "^0.13.5"
  },
  "dependencies": {
    "@ledgerhq/hw-transport-u2f": "^5.36.0-deprecated",
    "@ledgerhq/hw-transport-webhid": "^5.51.1",
    "@ledgerhq/hw-transport-webusb": "^5.53.1",
    "bs58": "^4.0.1",
    "platform": "^1.3.6"
  },
  "browserslist": [
    "last 1 Chrome versions"
  ]
}

'''
'''--- supportedTransports.js ---
const { default: LedgerTransportU2F } = require('@ledgerhq/hw-transport-u2f');
const { default: LedgerTransportWebUsb } = require('@ledgerhq/hw-transport-webusb');
const { default: LedgerTransportWebHid } = require('@ledgerhq/hw-transport-webhid');
const platform = require('platform');

let ENABLE_DEBUG_LOGGING = false;
const debugLog = (...args) => {
    ENABLE_DEBUG_LOGGING && console.log(...args)
};

// Fallback order inspired by https://github.com/vacuumlabs/adalite
async function isWebUsbSupported() {
    try {
        const isSupported = await LedgerTransportWebUsb.isSupported();
        return isSupported && platform.os.family !== 'Windows' && platform.name !== 'Opera';
    } catch (e) {
        return false;
    }
}

async function isWebHidSupported() {
    return LedgerTransportWebHid.isSupported()
        .catch(() => false);
}

async function isU2fSupported() {
    return LedgerTransportU2F.isSupported()
        .catch(() => false);
}

async function createSupportedTransport() {
    const [
        supportWebHid,
        supportWebUsb,
        supportU2f
    ] = await Promise.all([
        isWebHidSupported(),
        isWebUsbSupported(),
        isU2fSupported()
    ]);

    debugLog("Transports supported:", { supportWebHid, supportWebUsb, supportU2f });

    if (!supportWebHid && !supportWebUsb && !supportU2f) {
        const err = new Error('No transports appear to be supported.');
        err.name = 'NoTransportSupported';
        throw err;
    }

    // Sometimes transports return true for `isSupported()`, but are proven broken when attempting to `create()` them.
    // We will try each transport we think is supported in the current environment, in order of this array
    const supportedTransports = [
        // WebHID is still supported by latest Chrome, so try that first
        ...(supportWebHid ? [{ name: 'WebHID', createTransport: () => LedgerTransportWebHid.create() }] : []),

        ...(supportWebUsb ? [{ name: 'WebUSB', createTransport: () => LedgerTransportWebUsb.create() }] : []),

        // Firefox/Mozilla intend to not support WebHID or WebUSB
        ...(supportU2f ? [{ name: 'U2F', createTransport: () => LedgerTransportU2F.create() }] : []),
    ]

    let transport = null;
    let errors = [];

    for (let i = 0; i < supportedTransports.length && !transport; i += 1) {
        const { name, createTransport } = supportedTransports[i];
        debugLog(`Creating ${name} transport`)
        try {
            transport = await createTransport();
        } catch (err) {
            // If the user clicked the `cancel` button, stop attempting fallbacks
            if (err.name === 'TransportOpenUserCancelled') {
                throw err;
            }

            console.warn(`Failed to create ${name} transport.`, err);
            errors.push({ name: err.name, message: err.message });
        }
    }

    return [errors, transport];
}

module.exports.setDebugLogging = (value) => ENABLE_DEBUG_LOGGING = value;
module.exports.getSupportedTransport = async function getSupportedTransports() {
    const [errors, transport] = await createSupportedTransport();

    if (errors && !transport) {
        console.error('Failed to initialize ledger transport', { errors });
        throw errors[errors.length - 1];
    }

    if (transport) { debugLog('Ledger transport created!', transport); }

    return transport;
}

'''