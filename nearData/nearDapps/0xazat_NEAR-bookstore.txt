*GitHub Repository "0xazat/NEAR-bookstore"*

'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/as-pect.config.js ---
module.exports = require('near-sdk-as/imports')
'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the AssemblyScript contract using the scripts in package.json
//    (see buildCmd below). This will create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// AssemblyScript project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// Use the correct build command based on the `--debug` flag
const buildCmd = debug
  ? 'npm run build:debug'
  : 'npm run build'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require(`${__dirname}/package.json`).name
  const outFile = `./build/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- src/App.js ---
import "regenerator-runtime/runtime";
import React, { useEffect, useCallback, useState } from "react";
import { login, logout, accountBalance } from "./utils";
import "./global.css";
import "bootstrap/dist/css/bootstrap.min.css";
import { Container, Navbar, Nav } from "react-bootstrap";

import { BrowserRouter as Router, Route, Routes } from "react-router-dom";

import Home from "./components/Home";
import AddBook from "./components/AddBook";
import Landing from "./components/Landing";

export default function App() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");

  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  return (
    <Router>
      {account.accountId ? (
        <Navbar collapseOnSelect expand="lg" bg="dark" variant="dark">
          <Container>
            <Navbar.Brand href="/" className="justify-content-end pt-3 pb-5">
              NEAR Book Store
            </Navbar.Brand>
            <Navbar.Toggle aria-controls="responsive-navbar-nav" />
            <Navbar.Collapse id="responsive-navbar-nav">
              <Nav>
                <Nav.Link href="/AddBook">Add a Book</Nav.Link>
              </Nav>
              <Nav className="me-auto"> </Nav>
              <Nav>
                <Nav.Link>{window.accountId} </Nav.Link>
              </Nav>
              <Nav className="me-auto"> </Nav>
              <Nav>
                <Nav.Link>{balance} NEAR</Nav.Link>
                <Nav.Link onClick={window.accountId === "" ? login : logout}>
                  {window.accountId === "" ? "Login" : "Logout"}
                </Nav.Link>
              </Nav>
            </Navbar.Collapse>
          </Container>
        </Navbar>
      ) : (
        <Landing name="Near Store" login={login} />
      )}
      <Routes>
        <Route
          path="/"
          element={
            <Container>
              {" "}
              <Home />{" "}
            </Container>
          }
        />
        <Route path="/AddBook" element={<AddBook />} />
      </Routes>
    </Router>
  );
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/components/AddBook.js ---
import React, { useState } from "react";
import { Container, Form, Button } from "react-bootstrap";
import { addBook } from "../utils";
import { useNavigate } from "react-router-dom";

export default function AddBook() {
  const navigate = useNavigate();

  const [name, setName] = useState("");
  const [author, setAuthor] = useState("");
  const [description, setDescription] = useState("");
  const [image, setImage] = useState("");
  const [price, setPrice] = useState(0);
  const isFormFilled = () => name && author && description && image && price;

  // to add book to near protocol
  const saveBook = async () => {
    try {
      addBook(name, author, description, image, price).then((resp) => {});
    } catch (error) {
      console.log(error);
    } finally {
    }
  };

  return (
    <Container style={{ marginTop: "10px" }}>
      <Form>
        <Form.Group className="mb-3">
          <Form.Label>Book Name</Form.Label>
          <Form.Control
            onChange={(e) => {
              setName(e.target.value);
            }}
            placeholder="Enter the book name"
          ></Form.Control>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Author</Form.Label>
          <Form.Control
            onChange={(e) => {
              setAuthor(e.target.value);
            }}
            placeholder="Enter the author name"
          ></Form.Control>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Description</Form.Label>
          <Form.Control
            onChange={(e) => {
              setDescription(e.target.value);
            }}
            placeholder="Enter the description"
          ></Form.Control>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Book Url</Form.Label>
          <Form.Control
            onChange={(e) => {
              setImage(e.target.value);
            }}
            placeholder="Enter the book image url"
          ></Form.Control>
        </Form.Group>

        <Form.Group className="mb-3">
          <Form.Label>Price</Form.Label>
          <Form.Control
            onChange={(e) => {
              setPrice(e.target.value);
            }}
            placeholder="Enter the price"
          ></Form.Control>
        </Form.Group>
      </Form>

      <Button
        variant="primary"
        disabled={!isFormFilled()}
        onClick={() => {
          saveBook();
          navigate("/");
        }}
      >
        Save book
      </Button>
    </Container>
  );
}

'''
'''--- src/components/Book.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack, Container } from "react-bootstrap";
import { buyBook } from "../utils";

const Book = ({ book }) => {
  const { id, price, name, description, sold, author, image, owner } = book;

  // to buy a book
  const buy = async () => {
    try {
      await buyBook({
        id,
        price,
      }).then((resp) => console.log(resp));
    } catch (error) {
      console.log(error);
    } finally {
    }
  };

  return (
    <Col key={id}>
      <Container>
        <Card>
          <Card.Header>
            <Stack direction="horizontal" gap={2}>
              <span className="font-monospace text-secondary">{owner}</span>
              <Badge bg="secondary" className="ms-auto">
                {sold} Sold
              </Badge>
            </Stack>
          </Card.Header>
          <div className=" ratio ratio-4x3">
            <img src={image} alt={name} style={{ objectFit: "cover" }} />
          </div>
          <Card.Body className="d-flex  flex-column text-center">
            <Card.Title>{name}</Card.Title>
            <Card.Text className="flex-grow-1 ">{description}</Card.Text>
            <Card.Text className="text-secondary">
              <span>{author}</span>
            </Card.Text>
            <Button variant="outline-dark" onClick={buy} className="w-100 py-3">
              Buy for {utils.format.formatNearAmount(price)} NEAR
            </Button>
          </Card.Body>
        </Card>
      </Container>
    </Col>
  );
};

Book.propTypes = {
  book: PropTypes.instanceOf(Object).isRequired,
};

export default Book;

'''
'''--- src/components/Home.js ---
import React, { useState, useEffect } from "react";
import { getBooks, buyBook } from "../utils";
import { Row } from "react-bootstrap";
import Loader from "./Loader";
import Book from "./Book";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [allBooks, setAllBooks] = useState([]);

  // to get all books
  const getAllBooks = async () => {
    try {
      setLoading(true);
      getBooks().then((resp) => {
        setAllBooks(resp);
      });
    } catch (error) {
      console.log(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getAllBooks();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {allBooks.map((_book) => (
              <Book key={_book.id} book={_book} />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
}

'''
'''--- src/components/Landing.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Landing = ({ name, login }) => {
  if ((name, login)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          ></div>
          <h1>{name}</h1>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">NEAR Protocol</p>
      </div>
    );
  }
  return null;
};

Landing.propTypes = {
  name: PropTypes.string,
};

Landing.defaultProps = {
  name: "",
};

export default Landing;

'''
'''--- src/components/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "theazat.testnet";

function getConfig(env) {
  switch (env) {
    case "production":
    case "mainnet":
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "development":
    case "testnet":
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    case "betanet":
      return {
        networkId: "betanet",
        nodeUrl: "https://rpc.betanet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.betanet.near.org",
        helperUrl: "https://helper.betanet.near.org",
        explorerUrl: "https://explorer.betanet.near.org",
      };
    case "local":
      return {
        networkId: "local",
        nodeUrl: "http://localhost:3030",
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: "http://localhost:4000/wallet",
        contractName: CONTRACT_NAME,
      };
    case "test":
    case "ci":
      return {
        networkId: "shared-test",
        nodeUrl: "https://rpc.ci-testnet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    case "ci-betanet":
      return {
        networkId: "shared-test-staging",
        nodeUrl: "https://rpc.ci-betanet.near.org",
        contractName: CONTRACT_NAME,
        masterAccount: "test.near",
      };
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      );
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['getGreeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('getGreeting', async () => {
  const message = await window.contract.getGreeting({ accountId: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import getConfig from "./config";
import { v4 as uuid4 } from "uuid";
import {
  formatNearAmount,
  parseNearAmount,
} from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

const nearConfig = getConfig(process.env.NODE_ENV || "development");

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearConfig
    )
  );

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near);

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId();

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(
    window.walletConnection.account(),
    nearConfig.contractName,
    {
      // View methods are read only. They don't modify the state, but usually return some value.
      viewMethods: ["getBooks", "getBook"],
      // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: ["setBook", "buyBook"],
    }
  );
}

// To logout for bookstore
export function logout() {
  window.walletConnection.signOut();
  window.location.replace(window.location.origin + window.location.pathname);
}

// To login for bookstore
export function login() {
  window.walletConnection.requestSignIn(nearConfig.contractName);
}

// To get account balance
export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

// to add book
export function addBook(name, author, description, image, price) {
  price = parseNearAmount(price + "");
  return window.contract.setBook({
    name: name,
    author: author,
    description: description,
    image: image,
    price: price,
  });
}

// to get all books that saved previously.
export function getBooks() {
  return window.contract.getBooks();
}

// to get book by id
export function getBook({ id }) {
  return window.contract.getBook({ id });
}

// to buy book.
export async function buyBook({ id, price }) {
  await window.contract.buyBook({ bookId: id }, GAS, price);
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''