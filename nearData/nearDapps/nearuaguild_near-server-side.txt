*GitHub Repository "nearuaguild/near-server-side"*

'''--- CONTRIBUTING.md ---
<!-- CONTRIBUTING -->

## Contributing

Contributions are what make the open source community such an amazing place to learn, inspire, and create. Any contributions you make are **greatly appreciated**.

If you have a suggestion that would make this better, please fork the repo and create a pull request. You can also simply open an issue with the tag "enhancement".
Don't forget to give the project a star! Thanks again!

1. Fork the Project
2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)
3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)
4. Push to the Branch (`git push origin feature/AmazingFeature`)
5. Open a Pull Request

'''
'''--- LICENSE.txt ---
MIT License

Copyright (c) 2023 Near Ukrainians Guild

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'''
'''--- Readme.md ---
<!-- PROJECT LOGO -->
<br />
<div align="center">
  <h2 align="center">Near Protocol | Server-Side</h2>

  <p align="center">
    A working example of NodeJS server-side integration with Near Protocol smart-contract
    <br />
    <br />
    <a href="https://github.com/nearuaguild"> Explore other examples</a>
    Â·
    <a href="https://github.com/nearuaguild/near-server-side/issues">Report Bug</a>
  </p>
</div>

## Developed by

![Near Ukrainians Guild cover](./images/cover.png)

**Near Ukrainians Guild** is a fast-growing guild aimed at providing high-quality educational content and assistance to grow a strong community of Ukrainian developers/entrepreneurs in the Near Protocol ecosystem

[![Twitter][twitter]][twitter-url]
[![Youtube][youtube]][youtube-url]
[![Telegram Chat][telegram-chat]][telegram-chat-url]
[![Telegram Channel][telegram-channel]][telegram-channel-url]
[![Medium][medium]][medium-url]
[![Github][github]][github-url]

---

<!-- ABOUT THE PROJECT -->

## About The Project

This example is basically a Fungible Token faucet API which provides a possibility to distribute tokens among users by their request

Implementing server-side integration for communication with Near Protocol smart-contract has its own pros & cons - you must consider them when planning the use cases of your application

### Pros

- Additional features can be implemented (Authorization, Notifications, Delayed execution, etc)
- End users don't need to have deep knowledge about smart contracts, because they have a way to communicate through well-known REST API

### Cons

- Transactions that change state aren't free and must be paid - you'll pay for them
- Your application has to implement rate limits, so your Near funds wouldn't fire covering millions of unnecessary transactions
- Your smart contract's change methods must be closed from calling directly by the end-user otherwise someone would definitely call it directly avoiding your authorization

### Built With

- [![NodeJS][node.js]][node-url]
- [![Express][express.js]][express-url]
- [near-api-js (v1.1.0)](https://github.com/near/near-api-js)
- [Near Protocol TypeScript interface generator](https://github.com/nearuaguild/near-rust-contract-types-generator)

---

<!-- GETTING STARTED -->

## Getting Started

ðŸ’¡ _Before you begin, make sure you have the following installed_

- [Node.js v16 or above](https://nodejs.org/en/download/)
- [Git](https://git-scm.com/book/en/v2/Getting-Started-Installing-Git/)

### Installation

Follow these simple instructions to set up a local development environment

1. Clone the repo
   ```sh
   git clone https://github.com/nearuaguild/near-server-side.git
   ```
2. Install NPM packages
   ```sh
   yarn install
   ```
3. Copy the example env file to `.env`
   ```sh
   cp .env.dist .env
   ```
4. Enter your Fungible Token contract address & private key in `.env` (variables below are just examples, you must fill them with your own values)

   ```env
    CONTRACT_ID=test_ft_token.denbite.testnet

    PRIVATE_KEY=ed25519:14sZJ64JFLxuocU7xu2DkV2yE7mAGCnfFhjbH10vQePR32JzpcMVK63jSSHgzb29mBzEMv27Sqs87SHsR3PMxhp6
   ```

5. Build server
   ```sh
   yarn build
   ```
6. Launch application
   ```sh
   yarn start
   ```

---

<!-- USAGE EXAMPLES -->

## Usage

We've prepared Postman collection for you to easily communicate with API once it's started

- [Collection Link](https://api.postman.com/collections/6953403-91d24e13-4954-4c7a-9b5d-019178e330f7?access_key=PMAT-01GQ794JVQDC55MG96Y4BNGNY7)
- [How to import Postman collection via link](https://apitransform.com/how-to-import-a-collection-into-postman/)

![](./images/postman_vars.png)

### Demo

1. Retrieve initial balance for account
   ![](./images/postman_balance_before.png)
2. Then request allocation in 100 tokens for this account
   ![](./images/postman_allocate.png)
3. Retrieve balance one more time, and confirm that balance has changed
   ![](./images/postman_balance_after.png)

<!-- LICENSE -->

## License

Distributed under the MIT License. See `LICENSE.txt` for more information.

<!-- MARKDOWN LINKS & IMAGES -->
<!-- https://www.markdownguide.org/basic-syntax/#reference-style-links -->

<!-- Built with -->

[node.js]: https://img.shields.io/badge/nodejs-000000?style=for-the-badge&logo=nodedotjs&logoColor=white
[express.js]: https://img.shields.io/badge/express-000000?style=for-the-badge&logo=express&logoColor=white
[node-url]: https://nodejs.org/en/
[express-url]: https://expressjs.com/ru/

<!-- Socials -->

[twitter]: https://img.shields.io/badge/news-1DA1F2?style=for-the-badge&logo=twitter&logoColor=white
[youtube]: https://img.shields.io/badge/broadcasting-282828?style=for-the-badge&logo=youtube&logoColor=ff0000
[medium]: https://img.shields.io/badge/articles-202020?style=for-the-badge&logo=medium&logoColor=ffffff
[telegram-chat]: https://img.shields.io/badge/chat-229ED9?style=for-the-badge&logo=telegram&logoColor=white
[telegram-channel]: https://img.shields.io/badge/channel-229ED9?style=for-the-badge&logo=telegram&logoColor=white
[github]: https://img.shields.io/badge/code-000000?style=for-the-badge&logo=github&logoColor=ffffff
[twitter-url]: https://twitter.com/nearuaguild
[youtube-url]: https://www.youtube.com/@nearprotocolukraineguild4064
[medium-url]: https://medium.com/near-protocol-ua
[telegram-chat-url]: https://t.me/nearprotocolua
[telegram-channel-url]: https://t.me/nearprotocoluachannel
[github-url]: https://github.com/nearuaguild

'''
'''--- config/index.ts ---
import dotenv from "dotenv";
dotenv.config();

export default {
  PORT: 8080,
  PRIVATE_KEY: process.env.PRIVATE_KEY as string,
  CONTRACT_ID: process.env.CONTRACT_ID as string,
  NETWORK: process.env.NETWORK || "development",
};

'''
'''--- config/verify.ts ---
import config from "../config";

const verifyConfig = (): void => {
  if (!config.CONTRACT_ID)
    throw new Error(`'CONTRACT_ID' must be provided in your .env`);
  if (!config.PRIVATE_KEY)
    throw new Error(`'PRIVATE_KEY' must be provided in your .env`);
};

export default verifyConfig;

'''
'''--- contracts/fungible_token.ts ---
import BN from "bn.js";
import { Account, Contract, providers } from "near-api-js";

export interface ChangeMethodOptions {
  gas?: BN;
  attachedDeposit?: BN;
  walletMeta?: string;
  walletCallbackUrl?: string;
}

export class FungibleTokenContract extends Contract {
  constructor(account: Account, contractId: string) {
    super(account, contractId, {
      changeMethods: ["ft_transfer"],
      viewMethods: ["get_claiming_key"],
    });
  }

  public ftTransfer = async (
    args: {
      receiver_id: string;
      amount: string;
      memo?: string;
    },
    options?: ChangeMethodOptions
  ): Promise<void> => {
    return providers.getTransactionLastResult(
      await this.ftTransferRaw(args, options)
    );
  };

  public ftTransferRaw = async (
    args: {
      receiver_id: string;
      amount: string;
      memo?: string;
    },
    options?: ChangeMethodOptions
  ): Promise<providers.FinalExecutionOutcome> => {
    return this.account.functionCall({
      contractId: this.contractId,
      methodName: "ft_transfer",
      args,
      ...options,
    });
  };

  public ftBalanceOf = (
    args: {
      account_id: string;
    },
    options?: ChangeMethodOptions
  ): Promise<string> => {
    return this.account.viewFunctionV2({
      contractId: this.contractId,
      methodName: "ft_balance_of",
      args,
      ...options,
    });
  };
}

'''
'''--- index.ts ---
import config from "./config";
import verifyConfig from "./config/verify";
verifyConfig();

import cors from "cors";
import express from "express";
import { param, body } from "express-validator";
import * as naj from "near-api-js";
import { getNearConfig } from "./utils";
import { FungibleTokenContract } from "./contracts/fungible_token";
import checkValidationResult from "./middlewares/check_validation_result";
import { BN } from "bn.js";

let contract: FungibleTokenContract;

const app = express();

app.use(cors());
app.use(express.json());

app.get(
  "/balance/:address",
  param("address").notEmpty(),
  param("address").isString(),
  checkValidationResult,
  async (req, res) => {
    const address = req.params.address as string;

    try {
      const balance = await contract.ftBalanceOf({ account_id: address });

      console.log("balance", balance);

      return res.status(200).send(balance);
    } catch {
      return res.status(200).send("0");
    }
  }
);

app.post(
  "/allocate/:address",
  param("address")
    .notEmpty()
    .withMessage(`'address' is missing`)
    .isString()
    .withMessage(`'address' must be a string`),
  body("amount")
    .notEmpty()
    .withMessage(`'amount' is missing`)
    .isInt({ min: 1 })
    .withMessage(`'amount' must be a positive integer`)
    .isInt({ max: 1_000 })
    .withMessage(
      `Allocations for more than 1.000 tokens per time aren't allowed`
    ),
  checkValidationResult,
  async (req, res) => {
    const address = req.params.address as string;
    const amount = req.body.amount as string;

    console.log("address", address);
    console.log("amount", amount);

    try {
      await contract.ftTransfer(
        {
          receiver_id: address,
          amount: amount,
        },
        { attachedDeposit: new BN(1) }
      );

      return res.sendStatus(200);
    } catch {
      return res.sendStatus(500);
    }
  }
);

(async () => {
  const nearConfig = getNearConfig(config.NETWORK);

  console.debug(`[near.network]`, nearConfig.networkId);

  const near = await naj.connect(nearConfig);

  const account = new naj.Account(near.connection, config.CONTRACT_ID);

  contract = new FungibleTokenContract(account, config.CONTRACT_ID);

  app.listen(config.PORT, () => {
    console.log(`App listening on port ${config.PORT}`);
  });
})();

'''
'''--- middlewares/check_validation_result.ts ---
import type { NextFunction, Request, Response } from "express";
import { validationResult } from "express-validator";

const checkValidationResult = async (
  req: Request,
  res: Response,
  next: NextFunction
) => {
  const errors = validationResult(req);

  if (!errors.isEmpty()) {
    const firstError = errors.array({ onlyFirstError: true })[0];

    return res.status(400).end(firstError.msg);
  }

  next();
};

export default checkValidationResult;

'''
'''--- package.json ---
{
  "name": "near-server-side",
  "version": "1.0.0",
  "main": "dist/index.js",
  "license": "MIT",
  "private": true,
  "scripts": {
    "build": "npx tsc",
    "start": "node dist/index.js",
    "dev": "concurrently \"npx tsc --watch\" \"nodemon -q dist/index.js\""
  },
  "dependencies": {
    "bn.js": "^5.2.1",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "express-validator": "^6.14.2",
    "near-api-js": "^1.1.0",
    "typescript": "^4.9.4"
  },
  "devDependencies": {
    "@types/bn.js": "^5.1.1",
    "@types/cors": "^2.8.13",
    "@types/express": "^4.17.15",
    "@types/express-validator": "^3.0.0",
    "@types/node": "^18.11.18",
    "concurrently": "^7.6.0",
    "ts-node": "^10.9.1"
  }
}
'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig to read more about this file */

    /* Projects */
    // "incremental": true,                              /* Save .tsbuildinfo files to allow for incremental compilation of projects. */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./.tsbuildinfo",              /* Specify the path to .tsbuildinfo incremental compilation file. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects. */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */

    /* Language and Environment */
    "target": "es2016" /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */,
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'. */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using 'jsx: react-jsx*'. */
    // "reactNamespace": "",                             /* Specify the object invoked for 'createElement'. This only applies when targeting 'react' JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    // "moduleDetection": "auto",                        /* Control what method is used to detect module-format JS files. */

    /* Modules */
    "module": "commonjs" /* Specify what module code is generated. */,
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    // "typeRoots": [],                                  /* Specify multiple folders that act like './node_modules/@types'. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "moduleSuffixes": [],                             /* List of file name suffixes to search when resolving a module. */
    // "resolveJsonModule": true,                        /* Enable importing .json files. */
    // "noResolve": true,                                /* Disallow 'import's, 'require's or '<reference>'s from expanding the number of files TypeScript should add to a project. */

    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the 'checkJS' option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from 'node_modules'. Only applicable with 'allowJs'. */

    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If 'declaration' is true, also designates a file that bundles all .d.ts output. */
    "outDir": "./dist" /* Specify an output folder for all emitted files. */,
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types. */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have '@internal' in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like '__extends' in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing 'const enum' declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */

    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables 'allowSyntheticDefaultImports' for type compatibility. */,
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true /* Ensure that casing is correct in imports. */,

    /* Type Checking */
    "strict": true /* Enable all strict type-checking options. */,
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied 'any' type. */
    // "strictNullChecks": true,                         /* When type checking, take into account 'null' and 'undefined'. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for 'bind', 'call', and 'apply' methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when 'this' is given the type 'any'. */
    // "useUnknownInCatchVariables": true,               /* Default catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read. */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Add 'undefined' to a type when accessed using an index. */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type. */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */

    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  }
}

'''
'''--- utils/index.ts ---
import * as naj from "near-api-js";
import config from "../config";

export const getNearConfig = (env: string): naj.ConnectConfig => {
  const keyStore = new naj.keyStores.InMemoryKeyStore();

  const keyPair = naj.KeyPair.fromString(config.PRIVATE_KEY);

  switch (env) {
    case "development":
      keyStore.setKey("testnet", config.CONTRACT_ID, keyPair);

      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        keyStore,
        headers: {},
      };
    case "production":
      keyStore.setKey("mainnet", config.CONTRACT_ID, keyPair);

      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        keyStore,
        headers: {},
      };
    default:
      throw new Error(`Invalid env provided for getNearConfig()`);
  }
};

'''