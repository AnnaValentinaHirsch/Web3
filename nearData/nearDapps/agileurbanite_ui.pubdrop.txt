*GitHub Repository "agileurbanite/ui.pubdrop"*

'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>%REACT_APP_TITLE%</title>
    <meta name="description" content="%REACT_APP_DESCRIPTION%" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Manrope:wght@500&display=swap"
      rel="stylesheet"
    />
    <style>
      html,
      body {
        width: 100vw;
        height: 100vh;
        margin: 0;
        padding: 0;
        font-family: Manrope, sans-serif;
        font-weight: 500;
        color: white;
        overflow-x: hidden;
      }
    </style>
    <!-- Global site tag (gtag.js) - Google Analytics -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=%REACT_APP_GOOGLE_ANALYTICS%"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag('js', new Date());
      gtag('config', '%REACT_APP_GOOGLE_ANALYTICS%');
    </script>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/config/api.js ---
const API = process.env.REACT_APP_API;

export const api = {
  signup: `${API}/signup`,
  confirmEmail: `${API}/confirm-email`,
  confirmPhoneNumber: `${API}/confirm-phone-number`,
  keyStatus: `${API}/key-status`,
  campaignStatus: `${API}/campaign-status`,
};

'''
'''--- src/config/event.js ---
import miami from '../ui/images/miami/miami.svg';
import nyc from '../ui/images/newYork/nyc.svg';
import sanFrancisco from '../ui/images/sf/san-francisco.svg';
import hongbao from '../ui/images/hongbao/hongbao.svg';
import brand from "../ui/images/brand/brand-copy.svg";
import bermuda from "../ui/images/bermuda/bermuda.png";

const events = {
  miami: {
    name: 'miami',
    logoText: miami,
    mainUrl: 'miami.near.org',
  },
  newYork: {
    name: 'newYork',
    logoText: nyc,
    mainUrl: 'nyc.near.org',
  },
  sf: {
    name: 'sf',
    logoText: sanFrancisco,
    mainUrl: 'sf.near.org',
  },
  hongbao: {
    name: 'hongbao',
    logoText: hongbao,
    mainUrl: 'hongbao.near.org',
  },
  ethdenver: {
    name: 'ethdenver',
    logoText: '',
    mainUrl: 'ethdenver.near.org',
  },
  brand: {
    name: 'brand',
    logoText: brand,
    mainUrl: 'brand.near.org',
  },
  bermuda: {
    name: 'bermuda',
    logoText: bermuda,
    mainUrl: 'bermuda.near.org',
  }
};

export const event = events[process.env.REACT_APP_EVENT];

'''
'''--- src/config/pages.js ---
export const pages = {
  signup: 'signup',
  alreadyClaimed: 'already-claimed',
  campaignOver: 'campaign-over',
  confirmEmail: 'confirm-email',
  confirmPhoneNumber: 'confirm-phone-number',
};

'''
'''--- src/config/recaptcha.js ---
export const loadRecaptcha = (id, key, callback) => {
  const isScriptExist = document.getElementById(id);

  if (!isScriptExist) {
    const script = document.createElement('script');
    script.type = 'text/javascript';
    script.src = `https://www.google.com/recaptcha/enterprise.js?render=${key}`;
    script.id = id;
    script.onload = function () {
      if (callback) callback();
    };
    document.body.appendChild(script);
  }
  if (isScriptExist && callback) callback();
};

'''
'''--- src/config/redirects.js ---
const { REACT_APP_REDIRECT_TO: redirectTo } = process.env;
export const redirects = {
  learnMore: redirectTo,
};

'''
'''--- src/store/actions/disableLoading.js ---
import { action } from 'easy-peasy';

export const disableLoading = action((state, payload) => {
  const { target } = payload;
  state.loading[target] = null;
});

'''
'''--- src/store/actions/enableLoading.js ---
import { action } from 'easy-peasy';

export const enableLoading = action((state, payload) => {
  const { target, params = {} } = payload;
  state.loading[target] = params;
});

'''
'''--- src/store/actions/hideError.js ---
import { action } from 'easy-peasy';

export const hideError = action((state, payload) => {
  const { target } = payload;
  state.errors[target] = null;
});

'''
'''--- src/store/actions/hideMessage.js ---
import { action } from 'easy-peasy';

export const hideMessage = action((state) => {
  state.messages = null;
});

'''
'''--- src/store/actions/index.js ---
import { toPage } from './toPage';
import { enableLoading } from './enableLoading';
import { disableLoading } from './disableLoading';
import { showError } from './showError';
import { hideError } from './hideError';
import { setEmail } from './setEmail';
import { setClaimKey } from './setClaimKey';
import { showMessage } from './showMessage';
import { hideMessage } from './hideMessage';
import { setPhoneNumber } from './setPhoneNumber';

export const actions = {
  toPage,
  enableLoading,
  disableLoading,
  showError,
  showMessage,
  hideError,
  hideMessage,
  setEmail,
  setClaimKey,
  setPhoneNumber,
};

'''
'''--- src/store/actions/setClaimKey.js ---
import { action } from 'easy-peasy';

export const setClaimKey = action((state, payload) => {
  state.claimPublicKey = payload.publicKey;
  state.claimSecretKey = payload.secretKey;
});

'''
'''--- src/store/actions/setEmail.js ---
import { action } from 'easy-peasy';

export const setEmail = action((state, payload) => {
  state.email = payload.email;
});

'''
'''--- src/store/actions/setPhoneNumber.js ---
import { action } from 'easy-peasy';

export const setPhoneNumber = action((state, payload) => {
  state.phone = payload.phone;
});

'''
'''--- src/store/actions/showError.js ---
import { action } from 'easy-peasy';

export const showError = action((state, payload) => {
  const {
    target,
    message = 'Unknown error. Please reload the page and try again in a few minutes',
  } = payload;

  state.errors[target] = message;
});

'''
'''--- src/store/actions/showMessage.js ---
import { action } from 'easy-peasy';

export const showMessage= action((state, payload) => {
  const {
    message = '',
  } = payload;

  state.messages = message;
});

'''
'''--- src/store/actions/toPage.js ---
import { action } from 'easy-peasy';

export const toPage = action((state, payload) => {
  const { page, params = null } = payload;
  state.navigation.page = page;
  state.navigation.params = params;
});

'''
'''--- src/store/helpers/goToWalletClaimPage.js ---
const {
  REACT_APP_NEAR_WALLET: nearWallet,
  REACT_APP_CAMPAIGN_ID: campaignId,
  REACT_APP_REDIRECT_TO: redirectTo,
} = process.env;

export const goToWalletClaimPage = (secretKey) => {
  window.location.replace(
    `${nearWallet}/linkdrop/${campaignId}/${secretKey}?redirectUrl=${redirectTo}`,
  );
};

'''
'''--- src/store/index.js ---
import { createStore } from 'easy-peasy';
import { persistInitState } from './initState';
import { actions } from './actions';
import { thunks } from './thunks';

export const store = createStore(
  {
    ...persistInitState,
    ...actions,
    ...thunks,
  },
  {
    name: 'PubDrop',
  },
);

'''
'''--- src/store/initState.js ---
import { persist } from 'easy-peasy';
import { pages } from '../config/pages';

const initState = {
  email: null,
  phone: null,
  claimPublicKey: null,
  claimSecretKey: null,
  loading: {
    app: true,
    sendEmail: false,
    confirmEmail: false,
    sendPhoneNumber: false,
    confirmPhoneNumber: false,
  },
  errors: {
    app: null,
    sendEmail: null,
    confirmEmail: null,
    sendPhoneNumber: null,
    confirmPhoneNumber: null,
  },
  messages: '',
  navigation: {
    page: pages.signup,
  },
};

export const persistInitState = persist(initState, {
  storage: 'localStorage',
  allow: ['claimPublicKey', 'claimSecretKey'],
});

'''
'''--- src/store/thunks/confirmEmail.js ---
import { thunk } from 'easy-peasy';
import ky from 'ky';
import { api } from '../../config/api';
import { goToWalletClaimPage } from '../helpers/goToWalletClaimPage';

const target = 'confirmEmail';

export const confirmEmail = thunk(async (actions, payload, helpers) => {
  try {
    const { confirmationCode } = payload;
    const { email } = helpers.getStoreState();

    actions.enableLoading({ target });

    const { publicKey, secretKey } = await ky
      .post(api.confirmEmail, {
        json: { email, confirmationCode: Number(confirmationCode) },
        searchParams: { event: process.env.REACT_APP_EVENT },
        timeout: 30000,
      })
      .json();

    actions.setClaimKey({ publicKey, secretKey });
    goToWalletClaimPage(secretKey);
  } catch (err) {
    const error = await err.response?.json();
    actions.showError({ target, message: error?.error });
    actions.disableLoading({ target });
  } finally {
    actions.disableLoading({ target });
  }
});

'''
'''--- src/store/thunks/confirmPhoneNumber.js ---
import { thunk } from 'easy-peasy';
import ky from 'ky';
import { api } from '../../config/api';
import { goToWalletClaimPage } from '../helpers/goToWalletClaimPage';

const target = 'confirmPhoneNumber';

export const confirmPhoneNumber = thunk(async (actions, payload, helpers) => {
  try {
    const { confirmationCode } = payload;
    const { phone } = helpers.getStoreState();

    actions.enableLoading({ target });

    const { publicKey, secretKey } = await ky
      .post(api.confirmPhoneNumber, {
        json: { phone, confirmationCode: Number(confirmationCode) },
        searchParams: { event: process.env.REACT_APP_EVENT },
        timeout: 30000,
      })
      .json();

    actions.setClaimKey({ publicKey, secretKey });
    goToWalletClaimPage(secretKey);
  } catch (err) {
    const error = await err.response?.json();
    actions.showError({ target, message: error?.error });
    actions.disableLoading({ target });
  } finally {
    actions.disableLoading({ target });
  }
});

'''
'''--- src/store/thunks/index.js ---
import { initApp } from './initApp';
import { signup } from './signup';
import { confirmEmail } from './confirmEmail';
import { confirmPhoneNumber } from './confirmPhoneNumber';

export const thunks = {
  initApp,
  signup,
  confirmEmail,
  confirmPhoneNumber,
};

'''
'''--- src/store/thunks/initApp.js ---
import { thunk } from 'easy-peasy';
import ky from 'ky';
import { api } from '../../config/api';
import { pages } from '../../config/pages';
import { store } from '../index';
import { goToWalletClaimPage } from '../helpers/goToWalletClaimPage';

export const initApp = thunk(async (actions) => {
  await store.persist.resolveRehydration();
  const { claimPublicKey, claimSecretKey } = store.getState();

  try {
    const campaignStatus = await ky
      .get(api.campaignStatus, { searchParams: { event: process.env.REACT_APP_EVENT } })
      .json();
    if (!campaignStatus.isActive) return actions.toPage({ page: pages.campaignOver });
    // If there is no key in Local Storage that's means it is a first launch or email wasn't confirmed
    if (!claimPublicKey) return;

    const keyStatus = await ky
      .get(api.keyStatus, {
        searchParams: { publicKey: claimPublicKey, event: process.env.REACT_APP_EVENT },
      })
      .json();

    if (keyStatus.isActive) {
      goToWalletClaimPage(claimSecretKey);
    } else {
      actions.toPage({ page: pages.alreadyClaimed });
    }
  } catch (e) {
    actions.showError({ target: 'app', message: 'Fail to load application. Please try later' });
  } finally {
    actions.disableLoading({ target: 'app' });
  }
});

'''
'''--- src/store/thunks/signup.js ---
import { thunk } from 'easy-peasy';
import ky from 'ky';
import { pages } from '../../config/pages';
import { api } from '../../config/api';
import { goToWalletClaimPage } from '../helpers/goToWalletClaimPage';

let target = 'sendEmail';

export const signup = thunk(async (actions, payload) => {
  try {
    const { email, phone, gToken } = payload;
    if (email) {
      actions.enableLoading({ target });

      const response = await ky
        .post(api.signup, {
          json: { email, 'g-recaptcha-response': gToken },
          searchParams: { event: process.env.REACT_APP_EVENT },
        })
        .json();

      actions.setEmail({ email });

      // If user confirmed email on another device but hasn't claimed it - redirect to wallet
      if (response.secretKey) {
        actions.setClaimKey(response);
        return goToWalletClaimPage(response.secretKey);
      }
      actions.toPage({ page: pages.confirmEmail });
      actions.hideError({ target });
    }
    if (phone) {
      target = 'sendPhoneNumber';
      actions.enableLoading({ target });

      const response = await ky
        .post(api.signup, {
          json: { phone, 'g-recaptcha-response': gToken },
          searchParams: { event: process.env.REACT_APP_EVENT },
        })
        .json();

      actions.setPhoneNumber({ phone });

      // If user confirmed email on another device but hasn't claimed it - redirect to wallet
      if (response.secretKey) {
        actions.setClaimKey(response);
        return goToWalletClaimPage(response.secretKey);
      }
      actions.toPage({ page: pages.confirmPhoneNumber });
      actions.hideError({ target });
    }
  } catch (err) {
    const error = await err.response?.json();
    actions.showError({ target, message: error?.error });
  } finally {
    actions.disableLoading({ target });
  }
});

'''
'''--- src/ui/components/SignUp/SignUpMail/validations.js ---
import { object, string } from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';

const errors = {
  required: 'Email is required',
  invalidEmail: 'Invalid email format',
  max: 'Email should be less than 100 symbols',
};

const schema = object().shape({
  email: string()
    .required(errors.required)
    .email(errors.invalidEmail)
    .trim()
    .lowercase()
    .max(100, errors.max),
});

export const resolver = yupResolver(schema);

'''
'''--- src/ui/components/SignUp/SignUpPhone/validations.js ---
import * as Yup from 'yup';
import { isPossiblePhoneNumber } from 'react-phone-number-input';
import { yupResolver } from '@hookform/resolvers/yup';

Yup.addMethod(Yup.string, 'isValidPhoneNumber', function (errorMessage) {
  return this.test(`test-valid-phone`, errorMessage, function (value) {
    const { path, createError } = this;
    return (value && isPossiblePhoneNumber(value)) || createError({ path, message: errorMessage });
  });
});

const errors = {
  required: 'Phone number is required',
  invalidPhoneNumber: 'Invalid phone number format',
};

const schema = Yup.object().shape({
  phone: Yup.string().required(errors.required).isValidPhoneNumber(errors.invalidPhoneNumber),
});

export const resolver = yupResolver(schema);

'''
'''--- src/ui/components/validations/validations.js ---
import { object, string } from 'yup';
import { yupResolver } from '@hookform/resolvers/yup';

const errors = {
  required: 'Code is required',
  invalidFormat: 'Please enter a 4-digit code',
};

const regexp = {
  only4digits: /^\d{4}$/g,
};

const schema = object().shape({
  confirmationCode: string()
    .required(errors.required)
    .matches(regexp.only4digits, errors.invalidFormat),
});

export const resolver = yupResolver(schema);

'''