*GitHub Repository "aabdullah29/near-fullstack-nft-marketplace"*

'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/server/server.js ---

'''
'''--- frontend/src/App.js ---
import React, { useEffect, useState } from "react";
import "./App.css";
import useModal from "./useModal";
import Modal from "./Modal";
import nearLogo from "./assets/near-logo.svg";
import * as nearAPI from "near-api-js";

const initialValues = {
  assetTitle: "",
  assetDescription: "",
  assetUrl: "",
  assetPrice: "",
  assetBuy: "",
};

const App = ({ currentUser, nearConfig, walletConnection }) => {

  const {
    utils: {
      format: { parseNearAmount },
    },
  } = nearAPI;
  const [showLoader, setShowLoader] = useState(false);
  const [values, setValues] = useState(initialValues);

  const {
    isVisible,
    isVisibleSale,
    isVisibleBuy,
    toggleModal,
    toggleSaleModal,
    toggleBuyModal,
  } = useModal();

  const [nftResults, setNftResults] = useState([]);
  const [nftMarketResults, setNftMarketResults] = useState([]);
  const [getMinimum, setMinimum] = useState("");

  const signIn = () => {
    walletConnection.requestSignIn(
      nearConfig.contractName,
      "", // title. Optional, by the way
      "", // successUrl. Optional, by the way
      "" // failureUrl. Optional, by the way
    );
    sendMeta();
  };

  useEffect(() => {
    if (!showLoader) {

      const local_token_id = localStorage.getItem("token_id");
      if (local_token_id != null) {
        approveNFTForSale(local_token_id);
      }

      displayAllNFT();
      loadSaleItems();
    }
  }, [showLoader]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setValues({
      ...values,
      [name]: value,
    });
  };

  const loadSaleItems = async () => {
    let nftTokens = await walletConnection
      .account()
      .viewFunction(nearConfig.contractName, "nft_tokens", {
        from_index: "0",
        limit: 64,
      });

    let saleTokens = await walletConnection
      .account()
      .viewFunction(
        nearConfig.marketContractName,
        "get_sales_by_nft_contract_id",
        {
          nft_contract_id: nearConfig.contractName,
          from_index: "0",
          limit: 64,
        }
      );

    let sales = [];

    for (let i = 0; i < nftTokens.length; i++) {
      const { token_id } = nftTokens[i];
      let saleToken = saleTokens.find(({ token_id: t }) => t === token_id);
      if (saleToken !== undefined) {
        sales[i] = Object.assign(nftTokens[i], saleToken);

      }
    }
    setNftMarketResults(sales);
  };
  const getMinimumStorage = async () => {
    let minimum_balance = await walletConnection.account()
      .viewFunction(nearConfig.marketContractName, "storage_minimum_balance");
    setMinimum(minimum_balance);
    return minimum_balance

  };

  const sendStorageDeposit = async () => {
    const minimum_balance = await getMinimumStorage();
    await console.log('============= sendStorageDeposit ==============> getMinimum: ', getMinimum);
    await console.log('============== sendStorageDeposit =============> minimum_balance: ', minimum_balance);
    localStorage.setItem("minimum_balance", minimum_balance);

    const result = await walletConnection.account().functionCall({
      contractId: nearConfig.marketContractName,
      methodName: "storage_deposit",
      args: {},

      attachedDeposit: minimum_balance,
    })
    console.dir('===========================> result: ', result)
  };

  const sendMeta = async () => {
    let functionCallResult = await walletConnection.account().functionCall({
      contractId: nearConfig.contractName,
      methodName: "new_default_meta",
      args: {
        owner_id: nearConfig.contractName,
      },
      attachedDeposit: 0,
      walletMeta: "",
      wallerCallbackUrl: "",
    });

    if (functionCallResult) {
      console.log("new meta data created: ");
    } else {
      console.log("meta data not created");
    }
  };

  const mintAssetToNft = async () => {
    toggleModal();
    let functionCallResult = await walletConnection.account().functionCall({
      contractId: nearConfig.contractName,
      methodName: "nft_mint",
      args: {
        token_id: `${values.assetTitle}`,
        metadata: {
          title: `${values.assetTitle}`,
          description: `${values.assetDescription}`,
          media: `${values.assetUrl}`,
        },
        gas: nearConfig.GAS,
        receiver_id: currentUser,
      },
      attachedDeposit: parseNearAmount("1"),
    });

    if (functionCallResult) {
      console.log("nft created: ");
    } else {
      console.log("nft not created");
    }
  };

  const approveNFTForSale = async (token_id) => {
    localStorage.setItem("token_id", token_id)
    const min_balance = await localStorage.getItem("minimum_balance")
    const sale_value = await localStorage.getItem("sale_value")

    console.log('====> input sell price: ', typeof (1))
    console.log('====> input sell price: ', typeof (values.assetPrice))

    if (min_balance == null) {
      // await sendStorageDeposit()
      localStorage.setItem("token_id", token_id)
      localStorage.setItem("sale_value", values.assetPrice)
      await sendStorageDeposit()
    } else if (min_balance != null || typeof (sale_value) === typeof (1) && sale_value > 0) {
      await localStorage.removeItem("token_id");
      await localStorage.removeItem("minimum_balance");
      await localStorage.removeItem("sale_value");

      let sale_conditions = {
        // sale_conditions: values.assetPrice,
        sale_conditions: sale_value,
      };
      console.log('====== approveNFTForSale =====================> min_balance: ', min_balance, '\n==> input value: ', sale_conditions, '\n==> token_id: ', token_id)

      const tx = await walletConnection.account().functionCall({
        contractId: nearConfig.contractName,
        methodName: "nft_approve",
        args: {
          token_id: token_id,
          account_id: nearConfig.marketContractName,
          msg: JSON.stringify(sale_conditions),
        },
        attachedDeposit: parseNearAmount("0.01"),
      });
      console.log('===========================> Tx: ', tx)
    }
  };

  const OfferPrice = async (token_id) => {
    await walletConnection.account().functionCall({
      contractId: nearConfig.marketContractName,
      methodName: "offer",
      args: {
        nft_contract_id: nearConfig.contractName,
        token_id,
      },
      attachedDeposit: parseNearAmount(values.assetBuy),
      gas: nearConfig.GAS,
    })
  }

  const displayAllNFT = async () => {
    let userNFTs = await walletConnection
      .account()
      .viewFunction(nearConfig.contractName, "nft_tokens_for_owner", {
        account_id: currentUser,
        from_index: "0",
        limit: 64,
      });
    setNftResults(userNFTs);
    setShowLoader(true);
  };

  const signOut = () => {
    walletConnection.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <div>
      <header className="top-header">
        <div className="menu">
          <div className="navbar-left">
            <div className="logo-img">
              <a href="https://www.optimusfox.com/"> <img src="https://www.optimusfox.com/wp-content/uploads/2021/12/logo-520x94-d-bg@2x.png"></img> </a> 
            </div>
          </div>
          <nav className="navbar">
            <ul className="navbar-ul">
              <li className="navbar-li pt-3 pr-2">
                {currentUser ? (
                  <button href="#" className="log-link" onClick={signOut}>
                    Log out
                  </button>
                ) : (
                  <button href="#" className="log-link" onClick={signIn}>
                    Log In
                  </button>
                )}
              </li>
              <li className="navbar-li">
                {currentUser ? (
                  <button className="btn" onClick={toggleModal}>
                    Create NFT
                  </button>
                ) : (
                  ""
                )}
              </li>
            </ul>
          </nav>
        </div>
      </header>
      <main className="main-wrapper">
        <div className="login-wrapper">
          {currentUser ? (
            <div className="welcome-wrapper">
              <span className="welcome-text">Welcome! </span>
              {currentUser}
            </div>
          ) : (
            "user not logged in"
          )}
        </div>
      </main>

      <div className="gallery-wrapper">
        {nftResults
          ? nftResults.map((nft, index) => (
            <div className="outter-wrapper" key={index}>
              <Modal
                isVisibleSale={isVisibleSale}
                hideModal={toggleSaleModal}
              >
                <div className="outform-wrapper">
                  <div className="form-wrapper">
                    <form
                      onSubmit={(e) => {
                        e.preventDefault();
                        approveNFTForSale(nft.metadata.title);
                      }}
                    >
                      <div className="form-in-wrapper">
                        <h3 className="text-center pb-1">SELL NFT</h3>

                        <div className="box-wrapper">
                          <div className="box-in-wrapper">
                            <div className="input-wrapper">
                              <input
                                className="input-box"
                                placeholder="Add sale price"
                                name="assetPrice"
                                type="text"
                                value={values.assetPrice}
                                onChange={handleInputChange}
                              />
                            </div>
                          </div>
                        </div>

                        <div className="form-btn-wrapper">
                          <button className="form-btn">Sell now</button>
                        </div>
                      </div>
                    </form>
                  </div>
                </div>
              </Modal>
              <article className="card-wrapper">
                <a className="asset-anchor" href="#">
                  <div className="asset-anchor-wrapper">
                    <div className="asset-anchor-wrapper-inner">
                      <div className="asset-anchor-wrapper-inner-2">
                        <img
                          src={nft.metadata.media}
                          className="img-wrapper"
                          alt="NFT Token"
                        />
                      </div>
                    </div>
                  </div>
                  <div className="details-wrapper">
                    <div className="details-title-wrapper">
                      <div className="details-title-left-wrapper">
                        <div className="details-title-left-wrapper-inner-1">
                          {nft.metadata.title}
                        </div>
                        <div className="details-title-left-wrapper-inner-2">
                          {nft.owner_id}
                        </div>
                      </div>
                      <div className="details-title-right-wrapper">
                        <div className="details-assets-right-wrapper-inner-1">
                          <span className="span-price">Price</span>
                          <div className="price-wrapper">
                            <div className="near-symbol">
                              <img
                                className="near-logo"
                                src={nearLogo}
                                alt="near logo"
                              />
                            </div>
                            <div className="price">-</div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                  <div className="sell-wrapper">
                    <button className="form-btn" onClick={toggleSaleModal}>
                      Sell now
                    </button>
                  </div>
                </a>
              </article>
            </div>
          ))
          : "NFTs not found"}
      </div>

      <div className="market-wrapper">
        <div className="market-inner-wrapper">
          {nftMarketResults.length !== 0 ? (
            <div className="market-header">
              <h3>Market Place</h3>
            </div>
          ) : null}

{/* 
          <div className="card" style={{ width: '250px', height: 'auto', background: `radialGradient(circle, rgba(255, 255, 255, 0.05) 0%, rgb(233, 166, 9) 0%, rgba(255, 255, 255, 0.05) 70%)` }}>
            <img className="nft-image" src="https://images.unsplash.com/photo-1541661538396-53ba2d051eed?ixlib=rb-1.2.1&amp;ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&amp;auto=format&amp;fit=crop&amp;w=627&amp;q=80" />
            <div className="wrapper">
              <div className="info-container">
                <p className="owner"> LEJOURN.DARK.NFT</p>
                <p className="name">Alien Cry</p></div>
              <div className="price-container">
                <p className="price-label">Price</p>
                <p className="price">
                  <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 320 512" height="1em" width="1em" xmlns="http://www.w3.org/2000/svg">
                    {/* <path d="M311.9 260.8L160 353.6 8 260.8 160 0l151.9 260.8zM160 383.4L8 290.6 160 512l152-221.4-152 92.8z"></path> */}
                  {/* </svg> 4.555</p>
              </div>
            </div>
            <div className="buttons">
              <button className="default-button" style={{ width: '80px', height: '30px', color: 'rgb(255, 255, 255)', border: '1px solid rgb(255, 255, 255)', backgroundColor: 'transparent' }}>Buy Now</button>
              <div className="like-container">
                <button className="like">
                  <svg stroke="currentColor" fill="currentColor" stroke-width="0" viewBox="0 0 1024 1024" color="white" height="30" width="30" xmlns="http://www.w3.org/2000/svg" style={{ color: 'white' }}>
                    <path d="M923 283.6a260.04 260.04 0 0 0-56.9-82.8 264.4 264.4 0 0 0-84-55.5A265.34 265.34 0 0 0 679.7 125c-49.3 0-97.4 13.5-139.2 39-10 6.1-19.5 12.8-28.5 20.1-9-7.3-18.5-14-28.5-20.1-41.8-25.5-89.9-39-139.2-39-35.5 0-69.9 6.8-102.4 20.3-31.4 13-59.7 31.7-84 55.5a258.44 258.44 0 0 0-56.9 82.8c-13.9 32.3-21 66.6-21 101.9 0 33.3 6.8 68 20.3 103.3 11.3 29.5 27.5 60.1 48.2 91 32.8 48.9 77.9 99.9 133.9 151.6 92.8 85.7 184.7 144.9 188.6 147.3l23.7 15.2c10.5 6.7 24 6.7 34.5 0l23.7-15.2c3.9-2.5 95.7-61.6 188.6-147.3 56-51.7 101.1-102.7 133.9-151.6 20.7-30.9 37-61.5 48.2-91 13.5-35.3 20.3-70 20.3-103.3.1-35.3-7-69.6-20.9-101.9zM512 814.8S156 586.7 156 385.5C156 283.6 240.3 201 344.3 201c73.1 0 136.5 40.8 167.7 100.4C543.2 241.8 606.6 201 679.7 201c104 0 188.3 82.6 188.3 184.5 0 201.2-356 429.3-356 429.3z">
                    </path>
                  </svg>
                </button>
                <p className="like-count">123</p>
              </div>
            </div>
          </div> */} 

          <div className="market-result-wrapper">
            {nftMarketResults
              ? nftMarketResults.map((nft, index) => (
                <div className="outter-wrapper" key={index}>
                  <Modal
                    isVisibleBuy={isVisibleBuy}
                    hideModal={toggleBuyModal}
                  >
                    <div className="outform-wrapper">
                      <div className="form-wrapper">
                        <form
                          onSubmit={(e) => {
                            e.preventDefault();
                            OfferPrice(nft.token_id);
                          }}
                        >
                          <div className="form-in-wrapper">
                            <h3 className="text-center pb-1">BUY</h3>

                            <div className="box-wrapper">
                              <div className="box-in-wrapper">
                                <div className="input-wrapper">
                                  <input
                                    className="input-box"
                                    placeholder="Add price"
                                    name="assetBuy"
                                    type="text"
                                    value={values.assetBuy}
                                    onChange={handleInputChange}
                                  />
                                </div>
                              </div>
                            </div>

                            <div className="form-btn-wrapper">
                              <button className="form-btn">Enter Buy</button>
                            </div>
                          </div>
                        </form>
                      </div>
                    </div>
                  </Modal>

                  {/* <div className="card" style={{ width: '250px', height: 'auto', background: `radialGradient(circle, rgba(255, 255, 255, 0.05) 0%, rgb(233, 166, 9) 0%, rgba(255, 255, 255, 0.05) 70%)` }}>
                    <img className="nft-image" src={nft.metadata.media} />
                    <div className="wrapper">
                      <div className="info-container">
                        <p className="name">Title: 	&#160; {nft.token_id}</p>
                        <p className="owner">Owner: 	&#160; {nft.owner_id}</p>
                        </div>
                    </div>
                    <div className="buttons">
                      <button className="default-button" style={{ width: '80px', height: '30px', color: 'rgb(255, 255, 255)', border: '1px solid rgb(255, 255, 255)', backgroundColor: 'transparent' }}>Buy Now</button>
                      <div className="like-container">

                      <p className="">
                      <img
                            className="near-logo"
                            src={nearLogo}
                            alt="near logo"
                        />
                        &#160;
                        {nft.sale_conditions} 	

                        </p>
                      </div>
                    </div>
                  </div> */}

                  <article className="card-wrapper">
                    <a className="asset-anchor" href="#">
                      <div className="asset-anchor-wrapper">
                        <div className="asset-anchor-wrapper-inner">
                          <div className="asset-anchor-wrapper-inner-2">
                            <img
                              src={nft.metadata.media}
                              className="img-wrapper"
                              alt="NFT Token"
                            />
                          </div>
                        </div>
                      </div>
                      <div className="details-wrapper">
                        <div className="details-title-wrapper">
                          <div className="details-title-left-wrapper">
                            <div className="details-title-left-wrapper-inner-1">
                              {nft.token_id}
                            </div>
                            <div className="details-title-left-wrapper-inner-2">
                              {nft.owner_id}
                            </div>
                          </div>
                          <div className="details-title-right-wrapper">
                            <div className="details-assets-right-wrapper-inner-1">
                              <span className="span-price">Price</span>
                              <div className="price-wrapper">
                                <div className="near-symbol">
                                  <img
                                    className="near-logo"
                                    src={nearLogo}
                                    alt="near logo"
                                  />
                                </div>
                                <div className="price">
                                  {nft.sale_conditions}
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </a>

                    <div className="sell-wrapper">
                      {currentUser !== nft.owner_id ? (
                        <button className="form-btn" onClick={toggleBuyModal}>
                          Buy
                        </button>
                      ) : null}
                    </div>
                  </article>
                </div>
              ))
              : "Market NFTs not found"}
          </div>
        </div>
      </div>

      <Modal isVisible={isVisible} hideModal={toggleModal}>
        <div className="outform-wrapper">
          <div className="form-wrapper">
            <form
              onSubmit={(e) => {
                e.preventDefault();
                mintAssetToNft();
              }}
            >
              <div className="form-in-wrapper">
                <h3 className="text-center pb-1">MINT NFT</h3>

                <div className="box-wrapper">
                  <div className="box-in-wrapper">
                    <div className="input-wrapper">
                      <input
                        className="input-box"
                        placeholder="Asset Title"
                        name="assetTitle"
                        type="text"
                        value={values.assetTitle}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>
                </div>
                <div className="box-wrapper">
                  <div className="box-in-wrapper">
                    <div className="input-wrapper">
                      <input
                        className="input-box"
                        placeholder="Asset Description"
                        name="assetDescription"
                        type="text"
                        value={values.assetDescription}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>
                </div>
                <div className="box-wrapper">
                  <div className="box-in-wrapper">
                    <div className="input-wrapper">
                      <input
                        className="input-box"
                        placeholder="Asset Url"
                        name="assetUrl"
                        type="text"
                        value={values.assetUrl}
                        onChange={handleInputChange}
                      />
                    </div>
                  </div>
                </div>

                <div className="form-btn-wrapper">
                  <button className="form-btn">Mint NFT</button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </Modal>
    </div>
  );
};

export default App;
'''
'''--- frontend/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- frontend/src/Close.js ---
import React from 'react'

export const CloseIcon = () => (
    <svg
      viewBox="0 0 24 24"
      width="28"
      height="28"
      stroke="currentColor"
      strokeWidth="1.5"
      strokeLinecap="round"
      strokeLinejoin="round"
      fill="none"
      shapeRendering="geometricPrecision"
    >
      <path d="M18 6L6 18" />
      <path d="M6 6l12 12" />
    </svg>
  )
'''
'''--- frontend/src/Modal.js ---
import * as React from "react";
import { createPortal } from "react-dom";
import { CloseIcon } from "./Close";

const Modal = ({ isVisible, isVisibleSale, isVisibleBuy, hideModal, children }) => {
  return isVisible || isVisibleSale || isVisibleBuy 
    ? createPortal(
        <React.Fragment>
          <div className="modal-overlay">
            <div className="close-wrapper">
              <button className="sbutton" aria-label="Close dialog" onClick={hideModal}><CloseIcon/></button>
            </div>
            {children}
          </div>
          ,
        </React.Fragment>,

        document.body
      )
    : null;
};

export default Modal
'''
'''--- frontend/src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'sub.mynftcontract.testnet';
const MARKET_CONTRACT_NAME = process.env.MARKET_CONTRACT_NAME || 'sub.mynftmarket.testnet';

function getConfig(env) {
  switch(env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        marketContractName: MARKET_CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        marketContractName: MARKET_CONTRACT_NAME,
        GAS: "200000000000000",
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        marketContactName: MARKET_CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
        marketContactName: MARKET_CONTRACT_NAME,
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        marketContactName: MARKET_CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        marketContactName: MARKET_CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;
'''
'''--- frontend/src/fonts/OFL.txt ---
Copyright (c) 2016-2019 The Inter Project Authors (me@rsms.me)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

'''
'''--- frontend/src/fonts/README.txt ---
Inter Variable Font
===================

This download contains Inter as both a variable font and static fonts.

Inter is a variable font with these axes:
  slnt
  wght

This means all the styles are contained in a single file:
  Inter-VariableFont_slnt,wght.ttf

If your app fully supports variable fonts, you can now pick intermediate styles
that aren’t available as static fonts. Not all apps support variable fonts, and
in those cases you can use the static font files for Inter:
  static/Inter-Thin.ttf
  static/Inter-ExtraLight.ttf
  static/Inter-Light.ttf
  static/Inter-Regular.ttf
  static/Inter-Medium.ttf
  static/Inter-SemiBold.ttf
  static/Inter-Bold.ttf
  static/Inter-ExtraBold.ttf
  static/Inter-Black.ttf

Get started
-----------

1. Install the font files you want to use

2. Use your app's font picker to view the font family and all the
available styles

Learn more about variable fonts
-------------------------------

  https://developers.google.com/web/fundamentals/design-and-ux/typography/variable-fonts
  https://variablefonts.typenetwork.com
  https://medium.com/variable-fonts

In desktop apps

  https://theblog.adobe.com/can-variable-fonts-illustrator-cc
  https://helpx.adobe.com/nz/photoshop/using/fonts.html#variable_fonts

Online

  https://developers.google.com/fonts/docs/getting_started
  https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fonts/Variable_Fonts_Guide
  https://developer.microsoft.com/en-us/microsoft-edge/testdrive/demos/variable-fonts

Installing fonts

  MacOS: https://support.apple.com/en-us/HT201749
  Linux: https://www.google.com/search?q=how+to+install+a+font+on+gnu%2Blinux
  Windows: https://support.microsoft.com/en-us/help/314960/how-to-install-or-remove-a-font-in-windows

Android Apps

  https://developers.google.com/fonts/docs/android
  https://developer.android.com/guide/topics/ui/look-and-feel/downloadable-fonts

License
-------
Please read the full license text (OFL.txt) to understand the permissions,
restrictions and requirements for usage, redistribution, and modification.

You can use them freely in your products & projects - print or digital,
commercial or otherwise.

This isn't legal advice, please consider consulting a lawyer and see the full
license for all details.

'''
'''--- frontend/src/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <body>
        <div id="root"></div>
        <script src="./index.js"></script>
    </body>
</body>
</html>
'''
'''--- frontend/src/index.js ---
// import React from 'react';
// import ReactDOM from 'react-dom';
// // import ReactDOM from 'react-dom/client';
// import './index.css';
// import App from './App';
// import reportWebVitals from './reportWebVitals';

// // const root = ReactDOM.createRoot(document.getElementById('root'));
// // root.render(
// //   <React.StrictMode>
// //     <App />
// //   </React.StrictMode>
// // );

// ReactDOM.render(<h1>Hello world!</h1>, document.getElementById("root"))

// // If you want to start measuring performance in your app, pass a function
// // to log results (for example: reportWebVitals(console.log))
// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
// reportWebVitals();

// update
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js'
import 'regenerator-runtime'

async function initContract() {
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore()
  const near =  await nearAPI.connect({keyStore, ...nearConfig})
  const walletConnection = new nearAPI.WalletConnection(near)
  
  let currentUser;

  if (walletConnection.getAccountId()) {
      currentUser = walletConnection.getAccountId()
  }

  return { currentUser, nearConfig, walletConnection}
}

initContract().then(({ currentUser, nearConfig, walletConnection})=> {
  ReactDOM.render(<App currentUser={currentUser} nearConfig={nearConfig} walletConnection={walletConnection}/>,
       document.getElementById('root'));
})

'''
'''--- frontend/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- frontend/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- frontend/src/useModal.js ---
import { useState } from "react";

const useModal = () => {
  const [isVisible, setIsVisible] = useState(false);
  const [isVisibleSale, setIsVisibleSale] = useState(false);
  const [isVisibleBuy, setIsVisibleBuy] = useState(false);
  function toggleModal() {
    setIsVisible(!isVisible);
  }
  function toggleSaleModal() {
    setIsVisibleSale(!isVisibleSale);
  }
  function toggleBuyModal() {
    setIsVisibleBuy(!isVisibleBuy);
  }
  return {
    isVisible,
    toggleModal,
    isVisibleSale,
    toggleSaleModal,
    isVisibleBuy,
    toggleBuyModal,
  };
};
export default useModal;
'''
'''--- help.txt ---
complete project repo:
https://github.com/kels-orien/nft-marketplace-part-1

tatorial:
https://dev.to/kels_orien/building-a-full-stack-nft-market-place-with-near-protocol-and-reactjs-ak9

https://docs.near.org/docs/tutorials/contracts/nfts/introduction

git clone https://github.com/near-examples/rust-template.git

copy contract from this link:
https://github.com/near-examples/nft-tutorial

fronend help:
https://www.freecodecamp.org/news/how-to-up-a-react-app-with-parcel

build.sh

create sub account:
near create-account sub.mynftcontract.testnet --masterAccount mynftcontract.testnet
near state sub.mynftcontract.testnet 

deploy:
near deploy --accountId sub.mynftcontract.testnet --wasmFile /home/abdullah/near/nft-marketplace-repos/nft_contract/res/nft_contract.wasm
near call sub.mynftcontract.testnet new_default_meta '{"owner_id": "sub.mynftcontract.testnet"}' --accountId sub.mynftcontract.testnet
near view sub.mynftcontract.testnet nft_metadata

Minting Token:
near call sub.mynftcontract.testnet nft_mint '{"token_id": "token-1", "metadata": {"title": "My NFT 1", "description": "The Team Most Certainly Goes :)", "media": "https://bafybeiftczwrtyr3k7a2k4vutd3amkwsmaqyhrdzlhvpt33dyjivufqusq.ipfs.dweb.link/goteam-gif.gif"}, "receiver_id": "mynftcontract.testnet"}' --accountId mynftcontract.testnet --amount 0.1
near view sub.mynftcontract.testnet nft_token '{"token_id": "token-1"}'

Transfer:
near call sub.mynftcontract.testnet nft_transfer '{"receiver_id": "mynftmarket.testnet", "token_id": "token-1", "memo": "Go Team :)"}' --accountId mynftcontract.testnet --depositYocto 1
near view sub.mynftcontract.testnet nft_token '{"token_id": "token-1"}'

part 2
https://dev.to/kels_orien/building-a-full-stack-nft-market-place-with-near-protocol-and-reactjs-part-2-5136

copy "market-contract" folder from this repo "https://github.com/kels-orien/nft-marketplace-part-2"

create sub account:
near create-account sub.mynftmarket.testnet --masterAccount mynftcontract.testnet
near state sub.mynftmarket.testnet 

build:
./build.sh

deploy:
near deploy sub.mynftmarket.testnet --wasmFile /home/abdullah/near/nft-marketplace-repos/market_contract/res/market_contract.wasm
near call sub.mynftmarket.testnet new '{"owner_id": "sub.mynftmarket.testnet"}' --accountId mynftmarket.testnet

storage_minimum_balance:
near view sub.mynftmarket.testnet storage_minimum_balance
storage_deposit:
near call nft-marketplace.testnet storage_deposit --accountId mynftmarket.testnet --depositYocto 10000000000000000000000
nft_approve:

ear call nft-marketplace.testnet nft_approve '{"token_id":"Nft 1"}' --accountId marketplace.testnet --depositYocto 10000000000000000000000

token_id: token_id,
        account_id: nearConfig.marketContractName,
        msg: JSON.stringify(sale_conditions),
      },
      attachedDeposit: parseNearAmount("0.01"),

'''
'''--- market_contract/target/rls/debug/build/wee_alloc-97a4eaa49c6e99bc/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- market_contract/target/wasm32-unknown-unknown/release/build/wee_alloc-ad344306902c0435/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- nft_contract/target/rls/debug/build/wee_alloc-97a4eaa49c6e99bc/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- nft_contract/target/rls/debug/build/wee_alloc-b92e0cbd43fbe331/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- nft_contract/target/wasm32-unknown-unknown/release/build/wee_alloc-ad344306902c0435/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''
'''--- nft_contract/target/wasm32-unknown-unknown/release/build/wee_alloc-c76c2a1ca0de8351/out/wee_alloc_static_array_backend_size_bytes.txt ---
33554432
'''