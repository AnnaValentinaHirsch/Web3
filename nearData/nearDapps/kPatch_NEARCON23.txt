*GitHub Repository "kPatch/NEARCON23"*

'''--- App/App/AppApp.swift ---
//
//  RizAppApp.swift
//  RizApp
//
//  Created by Marcus Arnett on 9/22/23.
//

import SwiftUI
import Firebase

@main
struct RizzAppApp: App {
    @State private var isOnSplashscreen = true
    
    @StateObject var authViewModel = AuthViewModel.instance
    @StateObject var appearenceViewModel = AppearenceViewModel.instance
    
    init() {
        FirebaseApp.configure()
    }
    
    var body: some Scene {
        WindowGroup {
            if self.isOnSplashscreen {
                SplashScreenView()
                    .onAppear {
                        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
                            withAnimation {
                                self.isOnSplashscreen = false
                            }
                        }
                    }
            } else {
                if authViewModel.privateKey != nil, authViewModel.owner != nil {
                    NavigationStack {
                        AppTabView()
                            .environmentObject(self.authViewModel)
                            .environmentObject(self.appearenceViewModel)
                    }
                } else {
                    PreviewFeaturesView()
                        .environmentObject(self.authViewModel)
                }
            }
        }
    }
}

'''
'''--- App/App/Assets.xcassets/AccentColor.colorset/Contents.json ---
{
  "colors" : [
    {
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/AppIcon.appiconset/Contents.json ---
{
  "images" : [
    {
      "idiom" : "universal",
      "platform" : "ios",
      "size" : "1024x1024"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/ARButton.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "ARButton.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/AddButton.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Group 1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Background.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Waves 1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/BigCard.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "BigCard.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/DefaultOrg.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "defaultOrg.jpeg",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/EmailLoginBackground.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "LoginBackground.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/EthLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "EthLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/EventButton.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "EventButton.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/BAYC1.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "BAYC1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/BAYCLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "BAYCLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/CoolCat1.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "CoolCat1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/CoolCat2.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "CoolCat2.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/CoolCatLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "CoolCatLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/PizzaBox1.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "PizzaBox1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/PizzaBox2.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "PizzaBox2.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/PizzaBox3.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "PizzaBox3.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/PizzaBox4.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "PizzaBox4.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/PizzaBox5.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "PizzaBox5.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/PizzaBoxLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "PizzaBoxLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/RealPunk1.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "RealPunk1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/RealPunk2.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "RealPunk2.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/RealPunk3.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "RealPunk3.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/RealPunkLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "RealPunkLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/Robotos1.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Robotos1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Explore/NFTs/RobotosLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "RobotosLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Feature Icons/Connected.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Index3.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Feature Icons/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Feature Icons/Tech.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Index2.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Feature Icons/Wallet.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Index1.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Masonry.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Masonry.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/NFTMintButton.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "NFTMintButton.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/NearIcon.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "NearIcon.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/OffCollab.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "OffCollab.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/OnCollab.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "OnCollab.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Playlist.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Playlist.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/Properties.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Properties.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/RIZZLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "RIZZLogo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/WalletConnectLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "Logo.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Assets/pickaxe.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "pickaxe.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzBlack.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x00",
          "green" : "0x00",
          "red" : "0x00"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzBlue.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0xFF",
          "green" : "0x66",
          "red" : "0x00"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzGray.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x2B",
          "green" : "0x2B",
          "red" : "0x2B"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzGreen.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x95",
          "green" : "0xF1",
          "red" : "0x14"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzLightGray.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x42",
          "green" : "0x42",
          "red" : "0x42"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzMatteBlack.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x1B",
          "green" : "0x1B",
          "red" : "0x1B"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzNeonBlue.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0xF9",
          "green" : "0xFE",
          "red" : "0x37"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzPink.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0xF8",
          "green" : "0x52",
          "red" : "0xEA"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzPurple.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0xFF",
          "green" : "0x45",
          "red" : "0x99"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzRed.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0x61",
          "green" : "0x6E",
          "red" : "0xDF"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Colors/RizzWhite.colorset/Contents.json ---
{
  "colors" : [
    {
      "color" : {
        "color-space" : "srgb",
        "components" : {
          "alpha" : "1.000",
          "blue" : "0xFF",
          "green" : "0xFF",
          "red" : "0xFF"
        }
      },
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/LoginLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "IMG_5604.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Assets.xcassets/NearLogo.imageset/Contents.json ---
{
  "images" : [
    {
      "filename" : "near-protocol-logo-w.png.png",
      "idiom" : "universal"
    }
  ],
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Models/ModelHelper.swift ---
//
//  ArtPiece.swift
//  SuiKit
//
//  Copyright (c) 2023 OpenDive
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import UIKit
import RealityKit
import SceneKit
import Kingfisher

struct ModelHelper {
    static func modelEntity(imageUrl: String, completionHandler: @escaping (_ entity: ModelEntity?) -> Void) {
        let dimensions: SIMD3<Float> = [0.3075, 0.046, 0.3075]

        // Create Frame Housing
        let housingMesh = MeshResource.generateBox(size: dimensions)
        let housingMat = SimpleMaterial(color: .black, roughness: 0.4, isMetallic: false)
        let housingEntity = ModelEntity(mesh: housingMesh, materials: [housingMat])

        // Create Contents of Frame
        let screenMesh = MeshResource.generatePlane(width: dimensions.x, depth: dimensions.z)
        let screenMaterial = SimpleMaterial(color: .white, roughness: 0.2, isMetallic: false)
        let screenEntity = ModelEntity(mesh: screenMesh, materials: [screenMaterial])
        screenEntity.name = UUID().uuidString

        // Add Contents of Frame to Frame Housing
        housingEntity.addChild(screenEntity)
        screenEntity.setPosition([0, dimensions.y / 2 + 0.001, 0], relativeTo: housingEntity)
        
        // Implement Texture Material onto Contents
        NonFungibleTokens.fetchImageWithEscaping(imageURL: imageUrl) { url in
            do {
                guard let url = url else { throw NSError(domain: "Unable to unwrap URL", code: -1) }
                let texture = try TextureResource.load(contentsOf: url)
                
                var material = SimpleMaterial()
                material.color.texture = SimpleMaterial.Texture(texture)
                screenEntity.model?.materials = [material]
                
                completionHandler(housingEntity)
            } catch {
                print(error)
                completionHandler(nil)
            }
        }
    }
}

'''
'''--- App/App/Models/MultipeerNFT.swift ---
//
//  MultipeerNFT.swift
//  RizzApp
//
//  Created by Marcus Arnett on 11/9/23.
//

import Foundation

@objc(MultipeerNFT)
class MultipeerNFT: NSObject, NSSecureCoding {
    let transform: SIMD_float4x4_Wrapper
    let model: Data

    init(transform: SIMD_float4x4_Wrapper, model: Data) {
        self.transform = transform
        self.model = model
    }

    static var supportsSecureCoding: Bool {
        return true
    }

    func encode(with coder: NSCoder) {
        coder.encode(self.transform, forKey: "transform")
        coder.encode(self.model, forKey: "model")
    }

    required init?(coder: NSCoder) {
        if
            let transform: SIMD_float4x4_Wrapper = coder.decodeObject(of: SIMD_float4x4_Wrapper.self, forKey: "transform"),
            let model: Data = coder.decodeObject(of: NSData.self, forKey: "model") as? Data
        {
            self.transform = transform
            self.model = model
        } else {
            return nil
        }
    }
}

@objc(MultipeerRegularNFT)
class MultipeerRegularNFT: NSObject, NSSecureCoding {
    let transform: SIMD_float4x4_Wrapper
    let image: String

    init(transform: SIMD_float4x4_Wrapper, image: String) {
        self.transform = transform
        self.image = image
    }

    static var supportsSecureCoding: Bool {
        return true
    }

    func encode(with coder: NSCoder) {
        coder.encode(self.transform, forKey: "transform")
        coder.encode(self.image, forKey: "image")
    }

    required init?(coder: NSCoder) {
        if
            let transform: SIMD_float4x4_Wrapper = coder.decodeObject(of: SIMD_float4x4_Wrapper.self, forKey: "transform"),
            let image: String = coder.decodeObject(of: NSString.self, forKey: "image") as? String
        {
            self.transform = transform
            self.image = image
        } else {
            return nil
        }
    }
}

'''
'''--- App/App/Models/NFTType.swift ---
//
//  NFTType.swift
//  App
//
//  Created by Marcus Arnett on 11/9/23.
//

import Foundation

enum NFTType: String {
    case regular
    case music
    case video
    case model
}

'''
'''--- App/App/Models/NonFungibleTokens.swift ---
//
//  NonFungibleTokens.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/24/23.
//

import Foundation
import UIKit
import SwiftUI
import Kingfisher

struct NonFungibleTokens: Identifiable {
    let name: String
    let collectionName: String
    let description: String
    let properties: [String: String]
    let image: String
    let asset: String
    let tokenId: String
    let type: NFTType
    let organization: String?
    let id = UUID().uuidString

    var imageURL: String {
        var inputURL = self.image
        if inputURL.contains("ipfs://") {
            let urlGuard = URL(string: inputURL)!
            inputURL = urlGuard.host() != nil ? "http://ipfs.io/ipfs/\(urlGuard.host()!)" : inputURL
        }
        return inputURL
    }
    
    func getAsset() async throws -> Data? {
        guard let url = URL(string: self.asset) else { return nil }
        return try await withCheckedThrowingContinuation { con in
            URLSession.shared.dataTask(with: URL(string: imageURL)!) { data, response, error in
                guard let data else {
                    con.resume(returning: nil)
                    return
                }
                con.resume(returning: data)
            }.resume()
        }
    }
    
    func getImage() async -> Image? {
        return await withCheckedContinuation { con in
            Self.fetchImageWithEscaping(imageURL: self.imageURL) { url in
                guard let url = url else {
                    con.resume(returning: nil)
                    return
                }
                guard let uiImage = UIImage(data: url.dataRepresentation) else {
                    con.resume(returning: nil)
                    return
                }

                con.resume(returning: Image(uiImage: uiImage))
            }
        }
    }

    static func fetchImageWithEscaping(imageURL: String, completionHandler: @escaping (_ url: URL?) -> Void) {
        var inputURL = imageURL
        if inputURL.contains("ipfs://") {
            let urlGuard = URL(string: inputURL)!
            inputURL = urlGuard.host() != nil ? "http://ipfs.io/ipfs/\(urlGuard.host()!)" : inputURL
        }

        URLSession.shared.dataTask(with: URL(string: imageURL)!) { data, response, error in
            guard let data else {
                completionHandler(nil)
                return
            }

            do {
                let id = UUID().uuidString
                try KingfisherManager.shared.cache.diskStorage.store(value: data, forKey: id)
                let kfData = KingfisherManager.shared.cache.diskStorage.cacheFileURL(forKey: id)
                completionHandler(kfData)
            } catch {
                completionHandler(nil)
            }
        }.resume()
    }
}

'''
'''--- App/App/Models/SIMD_float4x4Wrapper.swift ---
//
//  SIMD_float4x4Wrapper.swift
//  App
//
//  Created by Marcus Arnett on 11/9/23.
//

import Foundation
import simd

@objc(SIMD_float4x4_Wrapper) // This makes the class name visible to the Objective-C runtime
class SIMD_float4x4_Wrapper: NSObject, NSSecureCoding {
    
    var matrix: simd_float4x4

    init(matrix: simd_float4x4) {
        self.matrix = matrix
    }
    
    // Required for NSSecureCoding
    static var supportsSecureCoding: Bool {
        return true
    }
    
    // Used to encode the instance with an NSCoder
    func encode(with coder: NSCoder) {
        for i in 0..<4 {
            coder.encode(matrix[i].x, forKey: "matrix_\(i)_x")
            coder.encode(matrix[i].y, forKey: "matrix_\(i)_y")
            coder.encode(matrix[i].z, forKey: "matrix_\(i)_z")
            coder.encode(matrix[i].w, forKey: "matrix_\(i)_w")
        }
    }
    
    // Used to decode an instance from an NSCoder
    required init?(coder: NSCoder) {
        matrix = simd_float4x4()
        for i in 0..<4 {
            matrix[i].x = coder.decodeFloat(forKey: "matrix_\(i)_x")
            matrix[i].y = coder.decodeFloat(forKey: "matrix_\(i)_y")
            matrix[i].z = coder.decodeFloat(forKey: "matrix_\(i)_z")
            matrix[i].w = coder.decodeFloat(forKey: "matrix_\(i)_w")
        }
    }
}

extension Float {
    var degreesToRadians: Float {
        return self * .pi / 180
    }
}

'''
'''--- App/App/Preview Content/Preview Assets.xcassets/Contents.json ---
{
  "info" : {
    "author" : "xcode",
    "version" : 1
  }
}

'''
'''--- App/App/Utils/Constants.swift ---
//
//  Constants.swift
//  RizApp
//
//  Created by Marcus Arnett on 9/22/23.
//

import Foundation
import SwiftUI

struct RizzColors {
    static let rizzPink = Color("RizzPink")
    static let rizzBlue = Color("RizzBlue")
    static let rizzBlack = Color("RizzBlack")
    static let rizzWhite = Color("RizzWhite")
    static let rizzGray = Color("RizzGray")
    static let rizzLightGray = Color("RizzLightGray")
    static let rizzMatteBlack = Color("RizzMatteBlack")
    static let rizzNeonBlue = Color("RizzNeonBlue")
    static let rizzRed = Color("RizzRed")
    static let rizzGreen = Color("RizzGreen")
    static let rizzPurple = Color("RizzPurple")
}

struct RizzOnboarding {
    static let features: [FeatureItem] = [
        FeatureItem(
            icon: "Wallet",
            title: "Lorum ipsum",
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        ),
        FeatureItem(
            icon: "Tech",
            title: "Lorum ipsum",
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        ),
        FeatureItem(
            icon: "Connected",
            title: "Lorum ipsum",
            description: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
        ),
        FeatureItem(
            icon: "Logo",
            title: "See the Unseen – Where Your World Meets the Future",
            description: "Sign in below."
        )
    ]
}

struct Collection: Identifiable {
    let title: String
    let logo: String
    let NFTs: [String]
    let id = UUID().uuidString
}

struct FeatureItem: Hashable, Identifiable {
    let icon: String
    let title: String
    let description: String
    
    var id: String {
        return "\(self.icon)-\(self.title)-\(self.description)"
    }
}

let mockNFTs: [NonFungibleTokens] = [
    NonFungibleTokens(name: "Welcome To NEARCON 2023", collectionName: "OpenDive", description: "NEARCON 2023 for the win!", properties: [:], image: "https://ipfs.io/ipfs/QmWBgjVcKnRKbxJVE4X5UESy6BNzp9uyKTGRB4vPkYRLgY", asset: "https://ipfs.io/ipfs/QmYW6WL7Pcq2jHVn8UNBAMk2CtFexb8mBaxqcmZsV3CBMZ", tokenId: "", type: .model, organization: nil)
]

'''
'''--- App/App/Utils/Extensions/UIColor+extension.swift ---
//
//  UIColor+extension.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import Foundation
import UIKit

extension UIColor {
    var contrastingColor: UIColor {
        var red: CGFloat = 0
        var green: CGFloat = 0
        var blue: CGFloat = 0
        var alpha: CGFloat = 0
        
        guard self.getRed(&red, green: &green, blue: &blue, alpha: &alpha) else {
            // Return black as a default if the color components can't be retrieved
            return UIColor.black
        }
        
        // Calculate luminance using the YIQ equation
        let luminance = 0.299 * red + 0.587 * green + 0.114 * blue
        
        // Return black or white UIColor depending on the luminance of the original color
        return luminance > 0.5 ? UIColor.black : UIColor.white
    }
}

'''
'''--- App/App/Utils/Extensions/UIImage+extension.swift ---
//
//  UIImage+extension.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import Foundation
import UIKit

extension UIImage {
    /// Average color of the image, nil if it cannot be found
    var averageColor: UIColor? {
        // convert our image to a Core Image Image
        guard let inputImage = CIImage(image: self) else { return nil }

        // Create an extent vector (a frame with width and height of our current input image)
        let extentVector = CIVector(x: inputImage.extent.origin.x,
                                    y: inputImage.extent.origin.y,
                                    z: inputImage.extent.size.width,
                                    w: inputImage.extent.size.height)

        // create a CIAreaAverage filter, this will allow us to pull the average color from the image later on
        guard let filter = CIFilter(name: "CIAreaAverage",
                                  parameters: [kCIInputImageKey: inputImage, kCIInputExtentKey: extentVector]) else { return nil }
        guard let outputImage = filter.outputImage else { return nil }

        // A bitmap consisting of (r, g, b, a) value
        var bitmap = [UInt8](repeating: 0, count: 4)
        let context = CIContext(options: [.workingColorSpace: kCFNull!])

        // Render our output image into a 1 by 1 image supplying it our bitmap to update the values of (i.e the rgba of the 1 by 1 image will fill out bitmap array
        context.render(outputImage,
                       toBitmap: &bitmap,
                       rowBytes: 4,
                       bounds: CGRect(x: 0, y: 0, width: 1, height: 1),
                       format: .RGBA8,
                       colorSpace: nil)

        // Convert our bitmap images of r, g, b, a to a UIColor
        return UIColor(red: CGFloat(bitmap[0]) / 255,
                       green: CGFloat(bitmap[1]) / 255,
                       blue: CGFloat(bitmap[2]) / 255,
                       alpha: CGFloat(bitmap[3]) / 255)
    }
    
    var averageColorDarker: UIColor? {
        // convert our image to a Core Image Image
        guard let inputImage = CIImage(image: self) else { return nil }

        // Create an extent vector (a frame with width and height of our current input image)
        let extentVector = CIVector(x: inputImage.extent.origin.x,
                                    y: inputImage.extent.origin.y,
                                    z: inputImage.extent.size.width,
                                    w: inputImage.extent.size.height)

        // create a CIAreaAverage filter, this will allow us to pull the average color from the image later on
        guard let filter = CIFilter(name: "CIAreaAverage",
                                  parameters: [kCIInputImageKey: inputImage, kCIInputExtentKey: extentVector]) else { return nil }
        guard let outputImage = filter.outputImage else { return nil }

        // A bitmap consisting of (r, g, b, a) value
        var bitmap = [UInt8](repeating: 0, count: 4)
        let context = CIContext(options: [.workingColorSpace: kCFNull!])

        // Render our output image into a 1 by 1 image supplying it our bitmap to update the values of (i.e the rgba of the 1 by 1 image will fill out bitmap array
        context.render(outputImage,
                       toBitmap: &bitmap,
                       rowBytes: 4,
                       bounds: CGRect(x: 0, y: 0, width: 1, height: 1),
                       format: .RGBA8,
                       colorSpace: nil)

        // Convert our bitmap images of r, g, b, a to a UIColor
        return UIColor(red: CGFloat(bitmap[0] - 40) / 255,
                       green: CGFloat(bitmap[1] - 40) / 255,
                       blue: CGFloat(bitmap[2] - 40) / 255,
                       alpha: CGFloat(bitmap[3]) / 255)
    }
}

'''
'''--- App/App/Utils/HomeGridViewMode.swift ---
//
//  HomeGridViewMode.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import Foundation

enum HomeGridViewMode {
    case collectorCluster
    case bigCards
    case playlist
    case masonry
}

'''
'''--- App/App/Utils/ImagePicker.swift ---
//
//  ImagePicker.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/24/23.
//

import Foundation
import SwiftUI

struct ImagePicker: UIViewControllerRepresentable {
    @Environment(\.presentationMode) private var presentationMode
    var sourceType: UIImagePickerController.SourceType = .photoLibrary
    @Binding var selectedImage: UIImage?

    func makeUIViewController(context: UIViewControllerRepresentableContext<ImagePicker>) -> UIImagePickerController {

        let imagePicker = UIImagePickerController()
        imagePicker.allowsEditing = false
        imagePicker.sourceType = sourceType
        imagePicker.delegate = context.coordinator

        return imagePicker
    }

    func updateUIViewController(_ uiViewController: UIImagePickerController, context: UIViewControllerRepresentableContext<ImagePicker>) {

    }

    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }

    final class Coordinator: NSObject, UIImagePickerControllerDelegate, UINavigationControllerDelegate {

        var parent: ImagePicker

        init(_ parent: ImagePicker) {
            self.parent = parent
        }

        func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey : Any]) {

            if let image = info[UIImagePickerController.InfoKey.originalImage] as? UIImage {
                parent.selectedImage = image
            }

            parent.presentationMode.wrappedValue.dismiss()
        }

    }
}

'''
'''--- App/App/Utils/MultipeerSession.swift ---
import MultipeerConnectivity
import Combine
import simd
import ARKit

/// - Tag: MultipeerSession
class MultipeerSession: NSObject, ObservableObject {
    static let serviceType = "ar-multi-sample"
    
    private let myPeerID = MCPeerID(displayName: UIDevice.current.name)
    
    // Use @Published for properties that should update the UI when changed
    @Published var connectedPeers: [MCPeerID] = []

    @Published var session: MCSession!
    @Published var serviceAdvertiser: MCNearbyServiceAdvertiser!
    @Published var serviceBrowser: MCNearbyServiceBrowser!
    @Published var receivedData: Data? = nil
    @Published var dataSenderPeerID: MCPeerID? = nil
    @Published var mapProvider: MCPeerID?

    /// - Tag: MultipeerSetup
    override init() {
        super.init()
        
        session = MCSession(peer: myPeerID, securityIdentity: nil, encryptionPreference: .required)
        session.delegate = self
        self.connectedPeers = session.connectedPeers
        
        serviceAdvertiser = MCNearbyServiceAdvertiser(peer: myPeerID, discoveryInfo: nil, serviceType: MultipeerSession.serviceType)
        serviceAdvertiser.delegate = self
        serviceAdvertiser.startAdvertisingPeer()
        
        serviceBrowser = MCNearbyServiceBrowser(peer: myPeerID, serviceType: MultipeerSession.serviceType)
        serviceBrowser.delegate = self
        serviceBrowser.startBrowsingForPeers()
    }
    
    func sendToAllPeers(_ data: Data) {
        do {
            try session.send(data, toPeers: self.connectedPeers, with: .reliable)
        } catch {
            print("error sending data to peers: \(error)")
        }
    }
}

extension MultipeerSession: MCSessionDelegate {
    func session(_ session: MCSession, peer peerID: MCPeerID, didChange state: MCSessionState) {
        DispatchQueue.main.async {
            self.connectedPeers = session.connectedPeers
        }
    }

    func session(_ session: MCSession, didReceive data: Data, fromPeer peerID: MCPeerID) {
        DispatchQueue.main.async {
            self.receivedData = data
            self.dataSenderPeerID = peerID
        }
    }

    func session(_ session: MCSession, didReceive stream: InputStream, withName streamName: String, fromPeer peerID: MCPeerID) {
        fatalError("This service does not send/receive streams.")
    }
    
    func session(_ session: MCSession, didStartReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, with progress: Progress) {
        fatalError("This service does not send/receive resources.")
    }
    
    func session(_ session: MCSession, didFinishReceivingResourceWithName resourceName: String, fromPeer peerID: MCPeerID, at localURL: URL?, withError error: Error?) {
        fatalError("This service does not send/receive resources.")
    }
    
}

extension MultipeerSession: MCNearbyServiceBrowserDelegate {
    
    /// - Tag: FoundPeer
    public func browser(_ browser: MCNearbyServiceBrowser, foundPeer peerID: MCPeerID, withDiscoveryInfo info: [String: String]?) {
        // Invite the new peer to the session.
        browser.invitePeer(peerID, to: session, withContext: nil, timeout: 10)
    }

    public func browser(_ browser: MCNearbyServiceBrowser, lostPeer peerID: MCPeerID) {
        // This app doesn't do anything with non-invited peers, so there's nothing to do here.
    }
    
}

extension MultipeerSession: MCNearbyServiceAdvertiserDelegate {
    
    /// - Tag: AcceptInvite
    func advertiser(_ advertiser: MCNearbyServiceAdvertiser, didReceiveInvitationFromPeer peerID: MCPeerID, withContext context: Data?, invitationHandler: @escaping (Bool, MCSession?) -> Void) {
        // Call handler to accept invitation and join the session.
        invitationHandler(true, self.session)
    }

}

extension ARFrame.WorldMappingStatus: CustomStringConvertible {
    public var description: String {
        switch self {
        case .notAvailable:
            return "Not Available"
        case .limited:
            return "Limited"
        case .extending:
            return "Extending"
        case .mapped:
            return "Mapped"
        @unknown default:
            return "Unknown"
        }
    }
}

'''
'''--- App/App/Utils/PinataFormData.swift ---
//
//  PiantaFormData.swift
//  SuiKit
//
//  Copyright (c) 2023 OpenDive
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import Foundation

struct PiantaFormData {
    private let boundary: String = UUID().uuidString
    private let formBody = NSMutableData()

    let formUrl: URL

    init(formUrl: URL) {
        self.formUrl = formUrl
    }

    func addTextField(named name: String, value: String) {
        self.formBody.append(textFormField(named: name, value: value))
    }

    func addDataField(named name: String, formData: PiantaFormDataValue) {
        self.formBody.append(dataFormField(named: name, formData: formData))
    }

    func asURLRequest(apiKey: String) -> URLRequest {
        var request = URLRequest(url: formUrl)

        request.httpMethod = "POST"
        request.setValue("multipart/form-data; boundary=\(boundary)", forHTTPHeaderField: "Content-Type")

        self.formBody.append("--\(boundary)--")
        request.httpBody = self.formBody as Data
        request.allHTTPHeaderFields = ["Authorization": "Bearer \(apiKey)"]

        return request
    }

    private func textFormField(named name: String, value: String) -> String {
        var fieldString = "--\(boundary)\r\n"
        fieldString += "Content-Disposition: form-data; name=\"\(name)\"\r\n"
        fieldString += "\r\n"
        fieldString += "\(value)\r\n"

        return fieldString
    }

    private func dataFormField(named name: String, formData: PiantaFormDataValue) -> Data {
        let fieldData = NSMutableData()

        fieldData.append("--\(boundary)\r\n")
        fieldData.append("Content-Disposition: form-data; name=\"\(name)\"; filename=\"\(formData.fileName)\"\r\n")
        fieldData.append("Content-Type: \(formData.mimeType)\r\n")
        fieldData.append("\r\n")
        fieldData.append(formData.data)
        fieldData.append("\r\n")

        return fieldData as Data
    }
}

extension NSMutableData {
  func append(_ string: String) {
    if let data = string.data(using: .utf8) {
      self.append(data)
    }
  }
}

'''
'''--- App/App/Utils/PinataFormDataValue.swift ---
//
//  PiantaFormDataValue.swift
//  SuiKit
//
//  Copyright (c) 2023 OpenDive
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import Foundation

struct PiantaFormDataValue {
    public var data: Data
    public var mimeType: String
    public var fileName: String
}

'''
'''--- App/App/Utils/PinataIPFSResponse.swift ---
//
//  PinataIPFSResponse.swift
//  SuiKit
//
//  Copyright (c) 2023 OpenDive
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import Foundation

struct PinataIPFSResponse: Codable {
    private enum CodingKeys: String, CodingKey {
        case ipfsHash = "IpfsHash"
    }

    let ipfsHash: String
}

'''
'''--- App/App/Utils/RPC.swift ---
//
//  RPC.swift
//  App
//
//  Created by Marcus Arnett on 11/10/23.
//

import Foundation
import AnyCodable
import SwiftyJSON

public struct Request: Codable {
    var id: Int = Int(arc4random())

    var method: String = ""

    var jsonrpc: String = "2.0"

    var params: [String: AnyCodable]

    public init(_ method: String, _ params: [String: AnyCodable]) {
        self.method = method
        self.params = params
    }
}

public struct Response: Codable {
    let jsonrpc: String
    let result: JSON
}

public typealias HttpHeaders = [String: String]
public typealias RequestParamsLike = [AnyCodable]

public struct JsonRpcClient {
    private let url: URL
    private let httpHeaders: HttpHeaders
    private let session: URLSession

    public init(url: URL, httpHeaders: HttpHeaders? = nil) {
        self.url = url
        self.httpHeaders = [
            "Content-Type": "application/json"
        ].merging(httpHeaders ?? [:]) { (_, new) in new }

        self.session = URLSession(configuration: .default)
    }

    public static func processJsonRpc(_ url: URL, _ request: Request) async throws -> Response {
        let data = try await Self.sendJsonRpc(url, request)

        do {
            return try JSONDecoder().decode(Response.self, from: data)
        } catch {
            let error = try JSONDecoder().decode(ClientError.self, from: data)
            throw error
        }
    }

    public static func sendJsonRpc(_ url: URL, _ request: Request) async throws -> Data {
        var requestUrl = URLRequest(url: url)
        requestUrl.allHTTPHeaderFields = [
            "Content-Type": "application/json"
        ]
        requestUrl.httpMethod = "POST"

        do {
            let requestData = try JSONEncoder().encode(request)
            requestUrl.httpBody = requestData
        } catch {
            throw NSError(domain: "Error while sending RPC", code: -1)
        }

        return try await withCheckedThrowingContinuation { (con: CheckedContinuation<Data, Error>) in
            let task = URLSession.shared.dataTask(with: requestUrl) { data, _, error in
                if let error = error {
                    con.resume(throwing: error)
                } else if let data = data {
                    con.resume(returning: data)
                } else {
                    con.resume(returning: Data())
                }
            }
            task.resume()
        }
    }

    public func call(request: Data?) async throws -> String {
        var urlRequest = URLRequest(url: self.url)
        urlRequest.httpMethod = "POST"
        urlRequest.httpBody = request
        urlRequest.allHTTPHeaderFields = self.httpHeaders

        let (data, response) = try await self.session.data(for: urlRequest)

        guard let httpResponse = response as? HTTPURLResponse else {
            throw NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Unknown Error"])
        }

        if httpResponse.statusCode == 200 {
            guard let result = String(data: data, encoding: .utf8) else {
                throw NSError(domain: "", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: "Failed to decode response data"])
            }
            return result
        } else {
            let isHtml = httpResponse.allHeaderFields["Content-Type"] as? String == "text/html"
            let errorMessage = "\(httpResponse.statusCode) \(httpResponse.description)\(isHtml ? "" : ": \(String(describing: data))")"
            throw NSError(domain: "", code: httpResponse.statusCode, userInfo: [NSLocalizedDescriptionKey: errorMessage])
        }
    }

    public func request<T: Decodable>(withType type: T.Type, method: String, args: RequestParamsLike) async throws -> JSON {
        let req = RpcParameters(method: method, args: args)
        let requestData = try JSONEncoder().encode(req)
        let responseString = try await call(request: requestData)

        guard let responseData = responseString.data(using: .utf8) else {
            throw NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "Failed to encode response string"])
        }

        do {
            let response = try JSONDecoder().decode(ValidResponse.self, from: responseData)
            return response.result
        } catch {
            do {
                let response = try JSONDecoder().decode(ErrorResponse.self, from: responseData)
                throw response
            } catch {
                throw RPCError(options: (req: RpcParameters(method: method, args: args), code: nil, data: responseData, cause: nil))
            }
        }
    }
}

public struct RpcParameters: Codable, RPCErrorRequest {
    public var method: String
    public var args: [AnyCodable]
}

public protocol RPCErrorRequest {
    var method: String { get set }
    var args: [AnyCodable] { get set }
}

public struct ValidResponse: Codable {
    public var jsonrpc: String = "2.0"
    public let id: String
    public let result: JSON
}

public struct ErrorResponse: Codable, Error {
    public var jsonrpc: String = "2.0"
    public let id: String
    public let error: ErrorObject
}

public struct ErrorObject: Codable {
    public let code: AnyCodable
    public let message: String
    public let data: AnyCodable?
}

class RPCError: Error {
    let req: RPCErrorRequest
    let code: Any?
    let data: Any?
    let cause: Error?

    init(options: (req: RPCErrorRequest, code: Any?, data: Any?, cause: Error?)) {
        self.req = options.req
        self.code = options.code
        self.data = options.data
        self.cause = options.cause
    }
}

public struct ClientError: Codable, Error {
    let jsonrpc: String
    let error: ClientMessage
    let id: Int
}

public struct ClientMessage: Codable, Error {
    let code: Int
    let message: String
}

'''
'''--- App/App/Utils/RestHandler.swift ---
import Foundation

final class RestHandler {
    /// Shared Singleton object for use within the OpenAIKit API Module
    internal static let shared = RestHandler()

    /// Conforming to the Singleton Design Pattern
    private init() {  }

    /// Uses URLRequest to set up a HTTPMethod, and implement default values for the method cases.
    public enum HTTPMethod: String {
        case get = "GET"
        case post = "POST"
        case delete = "DELETE"
    }

    /// Decode a data object using `JSONDecoder.decode()`.
    /// - Parameters:
    ///   - type: The type of `T` that the data will decode to.
    ///   - data: `Data` input object.
    ///   - keyDecodingStrategy: Default is `.useDefaultKeys`.
    ///   - dataDecodingStrategy: Default is `.deferredToData`.
    ///   - dateDecodingStrategy: Default is `.deferredToDate`.
    /// - Returns: Decoded data of `T` type, or throws an `OpenAIErrorRaesponse` object.
    public static func decodeData<T: Decodable>(
        _ type: T.Type = T.self,
        with data: Data,
        keyDecodingStrategy: JSONDecoder.KeyDecodingStrategy = .useDefaultKeys,
        dataDecodingStrategy: JSONDecoder.DataDecodingStrategy = .deferredToData,
        dateDecodingStrategy: JSONDecoder.DateDecodingStrategy = .deferredToDate
    ) async throws -> T {
        let decoder = JSONDecoder()

        decoder.keyDecodingStrategy = keyDecodingStrategy
        decoder.dataDecodingStrategy = dataDecodingStrategy
        decoder.dateDecodingStrategy = dateDecodingStrategy

        guard let decoded = try? decoder.decode(type, from: data) else {
            throw NSError(domain: "Unable to decode object", code: -1)
        }
        return decoded
    }

    /// Takes a `URL` input, along with header information, and converts it into a `URLRequest`;
    /// and fetches the data using an `Async` `Await` wrapper for the older `dataTask` handler.
    /// - Parameters:
    ///   - url: `URL` to convert to a `URLRequest`.
    ///   - method: Input can be either a `.get` or a `.post` method, with the default being `.post`.
    ///   - headers: Header data for the request that uses a `[string:string]` dictionary,
    ///   and the default is set to an empty dictionary.
    ///   - body: Body data that defaults to `nil`.
    /// - Returns: The data that was fetched typed as a `Data` object.
    public static func asyncData(
        with url: URL,
        method: HTTPMethod = .post,
        headers: [String: String] = [:],
        body: Data? = nil
    ) async throws -> Data {
        var request = URLRequest(url: url)

        request.httpMethod = method.rawValue
        request.allHTTPHeaderFields = [
            "accept": "application/json"
        ]
        request.httpBody = body

        headers.forEach { key, value in
            request.allHTTPHeaderFields?[key] = value
        }

        return try await self.asyncData(with: request)
    }

    /// An Async Await wrapper for the older `dataTask` handler.
    /// - Parameter request: `URLRequest` to be fetched from.
    /// - Returns: A Data object fetched from the` URLRequest`.
    public static func asyncData(with request: URLRequest) async throws -> Data {
        try await withCheckedThrowingContinuation { (con: CheckedContinuation<Data, Error>) in
            let task = URLSession.shared.dataTask(with: request) { data, _, error in
                if let error = error {
                    con.resume(throwing: error)
                } else if let data = data {
                    con.resume(returning: data)
                } else {
                    con.resume(returning: Data())
                }
            }

            task.resume()
        }
    }
    
    /// Decode a `URL` to the type `T` using either `asyncData()` for the Production Server;
    /// or using `decode()` for the Mock Server.
    /// - Parameters:
    ///   - type: The type of `T` that the data will decode to.
    ///   - with: The input url of type `URL` that will be fetched.
    ///   - apiKey: The API Key for use with the server.
    ///   - body: The POST body used to add parameters, defaults to `nil`.
    ///   - method: The method used for the function, defaults to `.post`.
    ///   - bodyRequired: Is the body required or not, used for `.get` and `.delete`, defaults to `false`.
    ///   - formSubmission: Is the body actually a form submission? Used for image submissionss, defaults to `false`.
    /// - Returns: The decoded object of type `T`.
    public func decodeUrl<T: Decodable>(
        _ type: T.Type = T.self,
        with url: URL,
        apiKey: String,
        method: HTTPMethod = .post
    ) async throws -> T {
        let data = try await Self.asyncData(
            with: url,
            method: method,
            headers: ["X-API-Key": apiKey]
        )

        return try await Self.decodeData(with: data)
    }
}

'''
'''--- App/App/Utils/SVGWebView.swift ---
//
//  SVGWebView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/24/23.
//

import Foundation
import SwiftUI
import WebKit

struct SVGWebView: UIViewRepresentable {
    let svgString: String
    
    func makeUIView(context: Context) -> WKWebView {
        let webView = WKWebView()
        webView.navigationDelegate = context.coordinator
        return webView
    }
    
    func updateUIView(_ uiView: WKWebView, context: Context) {
        uiView.loadHTMLString(svgString, baseURL: nil)
    }
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    class Coordinator: NSObject, WKNavigationDelegate {
        var parent: SVGWebView
        
        init(_ parent: SVGWebView) {
            self.parent = parent
        }
    }
}

'''
'''--- App/App/View Models/AppearenceViewModel.swift ---
//
//  AppearenceViewModel.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import Foundation
import SwiftUI

class AppearenceViewModel: ObservableObject {
    static let instance = AppearenceViewModel()
    
    private init() {  }
    
    @Published var gridMode: HomeGridViewMode = .collectorCluster
    @Published var isShowingActionMenu: Bool = false
}

'''
'''--- App/App/View Models/AuthViewModel.swift ---
//
//  AuthViewModel.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI
import SwiftyJSON
import AnyCodable
import Firebase
import FirebaseAuth
import GoogleSignIn
import OpenAIKit
import LocalAuthentication

class AuthViewModel: ObservableObject {
    static let instance: AuthViewModel = AuthViewModel()

    @Published var nfts: [NonFungibleTokens] = []
    @Published var playlist: [String: [NonFungibleTokens]] = [:]

    @Published var privateKey: String?
    @Published var owner: String?
    @Published var uid: String?

    @Published var isSigningUp: Bool = false
    @Published var selectedImage: UIImage? = nil
    @Published var amount: Double = 0.0

    let hostId: String = "https://nearcon-23.vercel.app"

    private init() {
        if let uuid = UIDevice.current.identifierForVendor?.uuidString {
            if let data = KeychainHelper.loadBioProtected(key: uuid, prompt: "Access logged in NEAR Session") {
                if let userInfo = try? JSONDecoder().decode(UserInfo.self, from: data) {
                    self.privateKey = userInfo.privateKey
                    self.owner = userInfo.owner
                    
                    DispatchQueue.main.async {
                        Task {
                            do {
                                self.amount = try await self.fetchAccountBalance()
                            } catch {
                                print(error)
                            }
                        }
                    }
                }
            }
        }
    }

    func fetchAccountBalance() async throws -> Double {
        let url = URL(string: "https://rpc.mainnet.near.org")!
        let data = try await JsonRpcClient.sendJsonRpc(
            url,
            Request(
                "query",
                [
                    "request_type": AnyCodable("view_account"),
                    "finality": AnyCodable("final"),
                    "account_id": AnyCodable(self.owner!)
                ]
            )
        )
        let value = JSON(data)["result"]
        return (value["amount"].doubleValue / Double(100000000000000000000000))
    }

    func mintNFT(name: String, description: String) -> Bool {
        guard let selectedImage = selectedImage else { return false }
        guard let id = self.owner, let privateKey = self.privateKey else { return false }
        guard let url = URL(string: "\(hostId)/api/nftMint") else { return false }

        DispatchQueue.main.async {
            Task {
                guard let image = try await self.uploadScreenshot(image: selectedImage) else { return false }

                let body: [String: AnyCodable] = [
                    "accountId" : AnyCodable(id),
                    "title" : AnyCodable(name),
                    "description": AnyCodable(description),
                    "image_uri": AnyCodable(image),
                    "privateKey": AnyCodable(privateKey),
                    "receiverNFT": AnyCodable(id)
                ]
                let jsonData = try? JSONEncoder().encode(body)

                let _ = try await RestHandler.asyncData(with: url, method: .post, body: jsonData)
                
                return true
            }
        }

        return true
    }
    
    @MainActor
    public func uploadScreenshot(image: UIImage) async throws -> String? {
        if let dataImage = image.jpegData(compressionQuality: 0.65) {
            let base64Image = dataImage.base64EncodedString()
            return try await self.uploadURL(base64: base64Image)
        }
        return nil
    }
    
    private func uploadURL(base64: String) async throws -> String {
        let formRequest = PiantaFormData(formUrl: URL(string: "https://api.pinata.cloud/pinning/pinFileToIPFS")!)
        let imageName = "\(self.owner!)_\(UUID().uuidString)"

        guard let image = try OpenAI(Configuration(organizationId: "", apiKey: "")).decodeBase64Image(base64).jpegData(compressionQuality: 1.0) else {
            throw NSError(domain: "Unable to convert image to data", code: -1)
        }

        formRequest.addDataField(
            named: "file",
            formData: PiantaFormDataValue(
                data: image,
                mimeType: "image/png",
                fileName: "\(imageName).jpg"
            )
        )

        formRequest.addTextField(named: "pinataMetadata", value: "{\"name\": \"\(imageName)\"}")

        let request = formRequest.asURLRequest(apiKey: pinataJWT)
        let encodedData = try await RestHandler.asyncData(with: request)
        let decodedResult: PinataIPFSResponse = try await RestHandler.decodeData(with: encodedData)

        return "https://ipfs.io/ipfs/\(decodedResult.ipfsHash)"
    }
    
    func signInWithGoogle() {
        guard let clientID = FirebaseApp.app()?.options.clientID else { return }

        // Configure Google Sign In
        let config = GIDConfiguration(clientID: clientID)
        GIDSignIn.sharedInstance.configuration = config

        GIDSignIn.sharedInstance.signIn(withPresenting: getRootViewController()) { user, error in
            guard let user, let idToken = user.user.idToken else {
                if let error = error {
                    // Handle error
                    print(error.localizedDescription)
                    return
                }
                print("Unknown error")
                return
            }

            let accessToken = user.user.accessToken
            let credential = GoogleAuthProvider.credential(withIDToken: idToken.tokenString, accessToken: accessToken.tokenString)

            Auth.auth().signIn(with: credential) { result, error in
                guard let user = result?.user else { return }
                self.lookupNearID(uid: user.uid)
            }
        }
    }
    
    func createNearID(id bareId: String) {
        let id = bareId.contains(".near") ? bareId : "\(bareId).near"
        guard let uid = self.uid else { print("NO UID"); return }
        guard let url = URL(string: "\(hostId)/api/accountCreate") else { print("NO URL"); return }
        
        let body: [String: AnyCodable] = [
            "accountId" : AnyCodable(id),
            "userID" : AnyCodable(uid)
        ]
        let jsonData = try? JSONEncoder().encode(body)
        
        DispatchQueue.main.async {
            Task {
                do {
                    let result = try await RestHandler.asyncData(with: url, method: .post, body: jsonData)
                    self.privateKey = JSON(result)["privateKey"].stringValue
                    self.owner = id
                    if let uuid = UIDevice.current.identifierForVendor?.uuidString {
                        if let jsonData = try? JSONEncoder().encode(UserInfo(privateKey: JSON(result)["privateKey"].stringValue, owner: id)) {
                            let _ = KeychainHelper.createBioProtectedEntry(key: uuid, data: jsonData)
                        }
                    }
                    self.amount = try await self.fetchAccountBalance()
                } catch {
                    print(error)
                }
            }
        }
    }

    // TODO: Implement Account Lookup once endpoint is deployed
    func lookupNearID(uid: String) {
        if true {  // TODO: Implement condition to either sign up or get the account
            self.uid = uid
            self.isSigningUp = true
        } else {
            
        }
    }

    func login(withEmail email: String, password: String, completion: @escaping(String) -> Void) {
        Auth.auth().signIn(withEmail: email, password: password) { result, error in
            if let error = error {
                let logResult = "\(error.localizedDescription)"
                if logResult == "There is no user record corresponding to this identifier. The user may have been deleted." {
                    completion("Incorrect email or password.")
                } else {
                    completion(logResult)
                }
            }

            guard let user = result?.user else { return }
            self.lookupNearID(uid: user.uid)
        }
    }
    
    func getRootViewController() -> UIViewController {
        // Get the scene with a connected window
        guard let windowScene = UIApplication.shared.connectedScenes.first as? UIWindowScene,
              let rootViewController = windowScene.windows.first?.rootViewController else {
            fatalError("No root view controller set!")
        }
        return rootViewController
    }

    func signout() {
        try? Auth.auth().signOut()
        self.nfts = []
        self.owner = nil
        self.privateKey = nil
        
        if let uuid = UIDevice.current.identifierForVendor?.uuidString {
            KeychainHelper.remove(key: uuid)
        }
    }

    func fetchNFTs() {
        self.nfts = []
        if let user = self.owner {
            let url = URL(string: "https://graph.mintbase.xyz/testnet")!
            let queryRequest = """
query MyQuery {  mb_views_nft_tokens(\n where: {owner: {_eq: \"\(user)\"}}\n limit: 100\n order_by: {last_transfer_timestamp: desc}\n  ) {\n base_uri\n extra\n nft_contract_id\n nft_contract_name\n title\n description\n media\n last_transfer_receipt_id\n token_id\n nft_contract_icon\n }\n}\n
"""
            let body: [String: AnyCodable] = [
                "query": AnyCodable(queryRequest),
                "variables": AnyCodable(nil),
                "operationName": AnyCodable("MyQuery")
            ]

            let jsonData = try? JSONEncoder().encode(body)

            DispatchQueue.main.async {
                Task {
                    self.amount = try await self.fetchAccountBalance()

                    let data = try await RestHandler.asyncData(
                        with: url,
                        method: .post,
                        headers: ["mb-api-key": "anon"],
                        body: jsonData
                    )

                    print(JSON(data))

                    for result in JSON(data)["data"]["mb_views_nft_tokens"].arrayValue {
                        let name: String? = result["title"].string
                        let collectionName: String? = result["nft_contract_name"].string
                        let description: String? = result["description"].string
                        let media: String? = result["media"].string
                        let tokenId: String? = result["token_id"].string
                        let assetUrl: String? = result["base_uri"].string
                        let organizationIcon: String? = result["nft_contract_icon"].string
                        let type: NFTType = NFTType(rawValue: result["extra"].string ?? "regular") ?? .regular

                        self.nfts.append(
                            NonFungibleTokens(
                                name: name ?? "Untitiled NFT",
                                collectionName: collectionName ?? "Unknown",
                                description: description ?? "No description available.",
                                properties: [:],
                                image: media ?? "",
                                asset: assetUrl ?? "",
                                tokenId: tokenId ?? "",
                                type: type,
                                organization: organizationIcon
                            )
                        )
                    }
                    for nft in self.nfts {
                        if
                            self.playlist[nft.collectionName]?.isEmpty != nil,
                            !self.playlist[nft.collectionName]!.isEmpty
                        {
                            self.playlist[nft.collectionName]!.append(nft)
                            continue
                        }
                        self.playlist[nft.collectionName] = [nft]
                    }
                    self.nfts.append(contentsOf: mockNFTs)
                }
            }
        }
    }
}

class UserInfo: Codable {
    init(privateKey: String, owner: String) {
        self.privateKey = privateKey
        self.owner = owner
    }
    
    let privateKey: String
    let owner: String
}

'''
'''--- App/App/View Models/KeychainHelper.swift ---
//
//  KeychainHelper.swift
//  keychain-sample
//
//  Created by Alexei Gridnev on 3/11/19.
//  Copyright © 2019 Alexei Gridnev. All rights reserved.
//

import LocalAuthentication

class KeychainHelper {
    
    private init() {}       // pure helper, disable instantiation
    
    static func getPwSecAccessControl() -> SecAccessControl {
        var access: SecAccessControl?
        var error: Unmanaged<CFError>?
        
        access = SecAccessControlCreateWithFlags(nil,  // Use the default allocator.
            kSecAttrAccessibleWhenUnlockedThisDeviceOnly,
            .applicationPassword,
            &error)
        precondition(access != nil, "SecAccessControlCreateWithFlags failed")
        return access!
    }
    
    static func getBioSecAccessControl() -> SecAccessControl {
        var access: SecAccessControl?
        var error: Unmanaged<CFError>?
        
        if #available(iOS 11.3, *) {
            access = SecAccessControlCreateWithFlags(nil,
                kSecAttrAccessibleWhenUnlockedThisDeviceOnly,
                .biometryCurrentSet,
                &error)
        } else {
            access = SecAccessControlCreateWithFlags(nil,
                kSecAttrAccessibleWhenUnlockedThisDeviceOnly,
                .touchIDCurrentSet,
                &error)
        }
        precondition(access != nil, "SecAccessControlCreateWithFlags failed")
        return access!
    }
    
    static func createEntry(key: String, data: Data, password: String) -> OSStatus {
        remove(key: key)
        
        let context = LAContext()
        context.setCredential(password.data(using: .utf8), type: .applicationPassword)
        
        let query = [
            kSecClass as String       : kSecClassGenericPassword as String,
            kSecAttrAccount as String : key,
            kSecAttrAccessControl as String: getPwSecAccessControl(),
            kSecValueData as String   : data as NSData,
            kSecUseAuthenticationContext: context] as CFDictionary
        
        return SecItemAdd(query, nil)
    }
    
    static func createBioProtectedEntry(key: String, data: Data) -> OSStatus {
        remove(key: key)
        
        let query = [
            kSecClass as String       : kSecClassGenericPassword as String,
            kSecAttrAccount as String : key,
            kSecAttrAccessControl as String: getBioSecAccessControl(),
            kSecValueData as String   : data ] as CFDictionary
        
        return SecItemAdd(query as CFDictionary, nil)
    }

    static func remove(key: String) {
        let query = [
            kSecClass as String       : kSecClassGenericPassword as String,
            kSecAttrAccount as String : key]
        
        SecItemDelete(query as CFDictionary)
    }
    
    static func loadPassProtected(key: String, context: LAContext? = nil) -> Data? {
        var query: [String: Any] = [
            kSecClass as String       : kSecClassGenericPassword,
            kSecAttrAccount as String : key,
            kSecReturnData as String  : kCFBooleanTrue,
            kSecAttrAccessControl as String: getPwSecAccessControl(),
            kSecMatchLimit as String  : kSecMatchLimitOne]
        
        if let context = context {
            query[kSecUseAuthenticationContext as String] = context
            
            // Prevent system UI from automatically requesting password
            // if the password inside supplied context is wrong
            query[kSecUseAuthenticationUI as String] = kSecUseAuthenticationUIFail
        }
        
        var dataTypeRef: AnyObject? = nil
        
        let status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)
        
        if status == noErr {
            return (dataTypeRef! as! Data)
        } else {
            return nil
        }
    }
    
    static func loadBioProtected(key: String, context: LAContext? = nil,
                                 prompt: String? = nil) -> Data? {
        var query: [String: Any] = [
            kSecClass as String       : kSecClassGenericPassword,
            kSecAttrAccount as String : key,
            kSecReturnData as String  : kCFBooleanTrue,
            kSecAttrAccessControl as String: getBioSecAccessControl(),
            kSecMatchLimit as String  : kSecMatchLimitOne ]
        
        if let context = context {
            query[kSecUseAuthenticationContext as String] = context
            
            // Prevent system UI from automatically requesting Touc ID/Face ID authentication
            // just in case someone passes here an LAContext instance without
            // a prior evaluateAccessControl call
            query[kSecUseAuthenticationUI as String] = kSecUseAuthenticationUISkip
        }
        
        if let prompt = prompt {
            query[kSecUseOperationPrompt as String] = prompt
        }

        var dataTypeRef: AnyObject? = nil
        
        let status = SecItemCopyMatching(query as CFDictionary, &dataTypeRef)
        
        if status == noErr {
            return (dataTypeRef! as! Data)
        } else {
            return nil
        }
    }

    static func available(key: String) -> Bool {
        let query = [
            kSecClass as String       : kSecClassGenericPassword,
            kSecAttrAccount as String : key,
            kSecReturnData as String  : kCFBooleanTrue,
            kSecMatchLimit as String  : kSecMatchLimitOne,
            kSecUseAuthenticationUI as String : kSecUseAuthenticationUIFail] as CFDictionary
        
        var dataTypeRef: AnyObject? = nil
        
        let status = SecItemCopyMatching(query, &dataTypeRef)
        
        // errSecInteractionNotAllowed - for a protected item
        // errSecAuthFailed - when touch Id is locked
        return status == noErr || status == errSecInteractionNotAllowed || status == errSecAuthFailed
    }

    // MARK: Storing keys in the keychain
    
    static func makeAndStoreKey(name: String,
                                requiresBiometry: Bool = false) throws -> SecKey {
        removeKey(name: name)

        let flags: SecAccessControlCreateFlags
        if #available(iOS 11.3, *) {
            flags = requiresBiometry ?
                [.privateKeyUsage, .biometryCurrentSet] : .privateKeyUsage
        } else {
            flags = requiresBiometry ?
                [.privateKeyUsage, .touchIDCurrentSet] : .privateKeyUsage
        }
        let access =
            SecAccessControlCreateWithFlags(kCFAllocatorDefault,
                                            kSecAttrAccessibleWhenUnlockedThisDeviceOnly,
                                            flags,
                                            nil)!
        let tag = name.data(using: .utf8)!
        let attributes: [String: Any] = [
            kSecAttrKeyType as String           : kSecAttrKeyTypeEC,
            kSecAttrKeySizeInBits as String     : 256,
            kSecAttrTokenID as String           : kSecAttrTokenIDSecureEnclave,
            kSecPrivateKeyAttrs as String : [
                kSecAttrIsPermanent as String       : true,
                kSecAttrApplicationTag as String    : tag,
                kSecAttrAccessControl as String     : access
            ]
        ]
        
        var error: Unmanaged<CFError>?
        guard let privateKey = SecKeyCreateRandomKey(attributes as CFDictionary, &error) else {
            throw error!.takeRetainedValue() as Error
        }
        
        return privateKey
    }
    
    static func loadKey(name: String) -> SecKey? {
        let tag = name.data(using: .utf8)!
        let query: [String: Any] = [
            kSecClass as String                 : kSecClassKey,
            kSecAttrApplicationTag as String    : tag,
            kSecAttrKeyType as String           : kSecAttrKeyTypeEC,
            kSecReturnRef as String             : true
        ]
        
        var item: CFTypeRef?
        let status = SecItemCopyMatching(query as CFDictionary, &item)
        guard status == errSecSuccess else {
            return nil
        }
        return (item as! SecKey)
    }
    
    static func removeKey(name: String) {
        let tag = name.data(using: .utf8)!
        let query: [String: Any] = [
            kSecClass as String                 : kSecClassKey,
            kSecAttrApplicationTag as String    : tag
        ]

        SecItemDelete(query as CFDictionary)
    }

    
}

'''
'''--- App/App/View Models/MainARViewModel.swift ---
//
//  MainARViewModel.swift
//  SuiKit
//
//  Copyright (c) 2023 OpenDive
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//

import SwiftUI
import RealityKit

class MainARViewModel: ObservableObject {
    @Published var displayedPieces: [ModelEntity]? = nil
    @Published var selectedPiece: ModelEntity? = nil
    @Published var modelConfirmedForPlacement: ModelEntity? = nil
    @Published var nftConfirmedForPlacement: NonFungibleTokens? = nil

    @Published var isShowingPicker = true
    @Published var isShowingAdder = false
    @Published var isPlacementEnabled = false
    @Published var isCollaborationEnabled = false
    @Published var currentCollabSetting = false
    @Published var imageForNFTPlacement: String? = nil

    @Published var isShowingUploadSnapshotOverlay = false

    func resetPlacementParameters() {
        self.isPlacementEnabled = false
        self.selectedPiece = nil
    }
}

'''
'''--- App/App/Views/AR/AR Features/ARView+Extension.swift ---
import ARKit
import RealityKit

extension ARView: ARCoachingOverlayViewDelegate {
    func addHorizontalCoaching() {
        let coachingOverlay = ARCoachingOverlayView()
        coachingOverlay.delegate = self
        #if !targetEnvironment(simulator)
        coachingOverlay.session = self.session
        #endif
        coachingOverlay.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        coachingOverlay.goal = .horizontalPlane
        self.addSubview(coachingOverlay)
    }

    func addVerticalCoaching() {
        let coachingOverlay = ARCoachingOverlayView()
        coachingOverlay.delegate = self
        #if !targetEnvironment(simulator)
        coachingOverlay.session = self.session
        #endif
        coachingOverlay.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        coachingOverlay.goal = .verticalPlane
        self.addSubview(coachingOverlay)
    }

    func addCoaching() {
        let coachingOverlay = ARCoachingOverlayView()
        coachingOverlay.delegate = self
        #if !targetEnvironment(simulator)
        coachingOverlay.session = self.session
        #endif
        coachingOverlay.autoresizingMask = [.flexibleWidth, .flexibleHeight]
        coachingOverlay.goal = .anyPlane
        self.addSubview(coachingOverlay)
    }

    public func coachingOverlayViewDidDeactivate(_ coachingOverlayView: ARCoachingOverlayView) {}
}

'''
'''--- App/App/Views/AR/AR Features/ARViewContainer.swift ---
import RealityKit
import ARKit
import SwiftUI
import Combine
import simd

struct ARViewContainer: UIViewRepresentable {
    @EnvironmentObject var arViewModel: MainARViewModel
    @EnvironmentObject var multipeerSession: MultipeerSession
    
    let modelName = "NEARCONLogo"

    func makeUIView(context: Context) -> ARView {
        let arView = FocusARView(frame: .zero)
        arView.addCoaching()
        return arView
    }

    func updateUIView(_ uiView: ARView, context: Context) {
        #if !targetEnvironment(simulator)
        if let receivedData = multipeerSession.receivedData {
            if let worldMap = try? NSKeyedUnarchiver.unarchivedObject(ofClass: ARWorldMap.self, from: receivedData) {
                (uiView as! FocusARView).changeARView(worldMap: worldMap)
            }

            if let nft = try? NSKeyedUnarchiver.unarchivedObject(ofClass: MultipeerNFT.self, from: receivedData) {
                self.placeModel(transform: nft.transform.matrix, uiView: uiView, model: nft.model)
            }

            if let regularNFT = try? NSKeyedUnarchiver.unarchivedObject(ofClass: MultipeerRegularNFT.self, from: receivedData) {
                ModelHelper.modelEntity(imageUrl: regularNFT.image) { entity in
                    guard let modelEntity = entity else { return }
                    self.placeModel(transform: regularNFT.transform.matrix, uiView: uiView, modelEntity: modelEntity)
                }
            }

            DispatchQueue.main.async {
                self.multipeerSession.receivedData = nil
                self.multipeerSession.dataSenderPeerID = nil
            }
        }

        if let modelEntity = arViewModel.modelConfirmedForPlacement, let image = arViewModel.imageForNFTPlacement {
            uiView.session.getCurrentWorldMap { worldMap, _ in
                guard let map = worldMap else { return }

                guard let data = try? NSKeyedArchiver.archivedData(withRootObject: map, requiringSecureCoding: true) else {
                    fatalError("can't encode anchor")
                }

                self.multipeerSession.sendToAllPeers(data)
            }
            
            let anchorEntity = AnchorEntity(plane: .any)
            anchorEntity.addChild(modelEntity)
            uiView.scene.addAnchor(anchorEntity)
            
            let matrix = anchorEntity.transformMatrix(relativeTo: modelEntity)
            
            guard let data = try? NSKeyedArchiver.archivedData(withRootObject: MultipeerRegularNFT(transform: SIMD_float4x4_Wrapper(matrix: matrix), image: image), requiringSecureCoding: true) else {
                fatalError("can't encode anchor")
            }
            self.multipeerSession.sendToAllPeers(data)
        }

        if let nft = arViewModel.nftConfirmedForPlacement {
            uiView.session.getCurrentWorldMap { worldMap, _ in
                guard let map = worldMap else { return }

                guard let data = try? NSKeyedArchiver.archivedData(withRootObject: map, requiringSecureCoding: true) else {
                    fatalError("can't encode anchor")
                }

                self.multipeerSession.sendToAllPeers(data)
            }
            
            let anchor = AnchorEntity(plane: .horizontal)
            
            DispatchQueue.main.async {
                Task {
//                    let urlLink = "https://ipfs.io/ipfs/QmYW6WL7Pcq2jHVn8UNBAMk2CtFexb8mBaxqcmZsV3CBMZ"
                    guard let model = await self.downloadModel(model: nft.asset) else { return }
                    self.placeModel(anchorEntity: anchor, uiView: uiView, data: model) { matrix in
                        guard let data = try? NSKeyedArchiver.archivedData(withRootObject: MultipeerNFT(transform: SIMD_float4x4_Wrapper(matrix: matrix), model: model), requiringSecureCoding: true) else {
                            fatalError("can't encode anchor")
                        }
                        self.multipeerSession.sendToAllPeers(data)
                    }
                }

                self.arViewModel.nftConfirmedForPlacement = nil
            }
        }
        #endif
    }

    func downloadModel(model: String) async -> Data? {
        if let url = URL(string: model) {
            return await withCheckedContinuation { con in
                URLSession.shared.dataTask(with: url) { data, response, error in
                    guard let data else {
                        con.resume(returning: nil)
                        return
                    }
                    con.resume(returning: data)
                }.resume()
            }
        }
        
        return nil
    }

    func placeModel(transform: simd_float4x4, uiView: ARView, model: Data) {
        let anchorEntity = AnchorEntity(world: transform)
        let tempDirectoryURL = FileManager.default.temporaryDirectory
        let usdzFileURL = tempDirectoryURL.appendingPathComponent(UUID().uuidString).appendingPathExtension("usdz")
        
        // Write the data to a temporary file
        do {
            try model.write(to: usdzFileURL)
            let modelEntity = try ModelEntity.loadModel(contentsOf: usdzFileURL)
            
            // Apply a scale transformation to make the logo 5 times smaller
            let scale: Float = 1.0 / 400.0 // Adjust this value as necessary
            modelEntity.scale = SIMD3<Float>(scale, scale, scale)
            
            anchorEntity.addChild(modelEntity)
            uiView.scene.addAnchor(anchorEntity)
        } catch {
            print(error)
        }
    }
    
    func placeModel(transform: simd_float4x4, uiView: ARView, modelEntity: ModelEntity) {
        let anchorEntity = AnchorEntity(world: transform)
        
        // Apply a scale transformation to make the logo 5 times smaller
        let scale: Float = 1.0 / 400.0 // Adjust this value as necessary
        modelEntity.scale = SIMD3<Float>(scale, scale, scale)
        
        anchorEntity.addChild(modelEntity)
        uiView.scene.addAnchor(anchorEntity)
    }

    func placeModel(anchorEntity: AnchorEntity, uiView: ARView, data: Data, closure: @escaping (simd_float4x4) -> Void) {
        DispatchQueue.main.async {
            Task {
                let tempDirectoryURL = FileManager.default.temporaryDirectory
                let usdzFileURL = tempDirectoryURL.appendingPathComponent(UUID().uuidString).appendingPathExtension("usdz")
                
                // Write the data to a temporary file
                do {
                    try data.write(to: usdzFileURL)
                    let modelEntity = try ModelEntity.loadModel(contentsOf: usdzFileURL)
                    
                    // Apply a scale transformation to make the logo 5 times smaller
                    let scale: Float = 1.0 / 400.0 // Adjust this value as necessary
                    modelEntity.scale = SIMD3<Float>(scale, scale, scale)
                    
                    anchorEntity.addChild(modelEntity)
                    uiView.scene.addAnchor(anchorEntity)
                    
                    closure(anchorEntity.transformMatrix(relativeTo: modelEntity))
                } catch {
                    print(error)
                }
            }
        }
    }
}

'''
'''--- App/App/Views/AR/AR Features/CustomDirectionLight.swift ---
import RealityKit

class CustomDirectionalLight: Entity, HasDirectionalLight {
    required init() {
        super.init()
        self.light = DirectionalLightComponent(
            color: .white,
            intensity: 20000,
            isRealWorldProxy: true)
        self.shadow = DirectionalLightComponent.Shadow(
            maximumDistance: 10,
            depthBias: 5.0)
        self.orientation = simd_quatf(
            angle: -.pi / 1.5,
            axis: [0, 1, 0])
    }
}

'''
'''--- App/App/Views/AR/AR Features/FocusARView.swift ---
import SwiftUI
import RealityKit
import ARKit
import FocusEntity

class FocusARView: ARView {
    enum FocusStyleChoices {
        case classic
        case material
        case color
    }

    var focusStyle: FocusStyleChoices = .classic
    var focusEntity: FocusEntity?

    required init(frame frameRect: CGRect) {
        super.init(frame: frameRect)

        switch self.focusStyle {
        case .color:
            self.focusEntity = FocusEntity(on: self, focus: .plane)
        case .material:
            do {
                let onColor: MaterialColorParameter = try .texture(.load(named: "Add"))
                let offColor: MaterialColorParameter = try .texture(.load(named: "Open"))
                self.focusEntity = FocusEntity(
                    on: self,
                    style: .colored(
                        onColor: onColor,
                        offColor: offColor,
                        nonTrackingColor: offColor
                    )
                )
            } catch {
                self.focusEntity = FocusEntity(on: self, focus: .classic)
            }
        default:
            self.focusEntity = FocusEntity(on: self, focus: .classic)
        }

        self.setupARView()
    }

    func setupARView(worldMap: ARWorldMap? = nil) {
        let config = ARWorldTrackingConfiguration()

        config.planeDetection = [.vertical]
        config.environmentTexturing = .automatic

        if ARWorldTrackingConfiguration.supportsSceneReconstruction(.mesh) {
            config.sceneReconstruction = .mesh
        }

        if ARWorldTrackingConfiguration.supportsFrameSemantics(.personSegmentationWithDepth) {
            config.frameSemantics.insert(.personSegmentationWithDepth)
        }

        config.initialWorldMap = worldMap

        self.session.run(config)

        let anchor = AnchorEntity(world: [0, 0, 0])
        anchor.addChild(CustomDirectionalLight())
        self.scene.addAnchor(anchor)
    }

    func changeARView(worldMap: ARWorldMap) {
        let config = ARWorldTrackingConfiguration()

        config.planeDetection = [.vertical]
        config.environmentTexturing = .automatic

        if ARWorldTrackingConfiguration.supportsSceneReconstruction(.mesh) {
            config.sceneReconstruction = .mesh
        }

        if ARWorldTrackingConfiguration.supportsFrameSemantics(.personSegmentationWithDepth) {
            config.frameSemantics.insert(.personSegmentationWithDepth)
        }

        config.isCollaborationEnabled = true

        config.initialWorldMap = worldMap

        self.session.run(config)
    }

    @objc required dynamic init?(coder decoder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

'''
'''--- App/App/Views/AR/ArtPiecePickerView.swift ---
import SwiftUI

struct ArtPiecePickerView: View {
    @EnvironmentObject var arViewModel: MainARViewModel
    @EnvironmentObject var authViewModel: AuthViewModel

    var body: some View {
        ZStack {
            VStack {
                Spacer()

                Capsule()
                    .frame(width: UIScreen.main.bounds.width - 40, height: 100)
                    .opacity(0.5)
            }

            VStack {
                Spacer()

                HStack {
                    Button {
                        self.arViewModel.isCollaborationEnabled.toggle()
                    } label: {
                        Image(self.arViewModel.isCollaborationEnabled ? "OnCollab" : "OffCollab")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 100, height: 100)
                    }

                    Spacer()
                }
                .padding(.leading, 30)

                ScrollView(.horizontal, showsIndicators: false) {
                    HStack {
                        ForEach(authViewModel.nfts) { nft in
                            Button {
                                if nft.asset != "" {
                                    self.arViewModel.nftConfirmedForPlacement = nft
                                    self.arViewModel.isShowingAdder = true
                                } else {
                                    ModelHelper.modelEntity(imageUrl: nft.imageURL) { entity in
                                        self.arViewModel.selectedPiece = entity
                                    }
                                    self.arViewModel.imageForNFTPlacement = nft.imageURL
                                    self.arViewModel.isShowingAdder = true
                                }
                            } label: {
                                ArtPiecePickerItemView(nft: nft.imageURL)
                            }
                        }
                    }
                    .padding(.horizontal, 30)
                }
                .frame(width: UIScreen.main.bounds.width - 40, height: 100)
                .clipShape(Capsule())
            }
        }
    }
}

#Preview {
    ArtPiecePickerView()
}

struct ArtPiecePickerItemView: View {
    let nft: String
    
    var body: some View {
        if nft.contains("<svg") {
            SVGWebView(svgString: nft)
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(width: 60, height: 60)
                .padding(.horizontal, 10)
        } else if let url = URL(string: nft) {
            AsyncImage(url: url) { image in
                image.image?.resizable().scaledToFit()
            }
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(width: 60, height: 60)
                .padding(.horizontal, 10)
        } else {
            RoundedRectangle(cornerRadius: 12.0)
                .foregroundStyle(RizzColors.rizzGray)
                .scaledToFit()
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(width: 60, height: 60)
                .padding(.horizontal, 10)
        }
    }
}

'''
'''--- App/App/Views/AR/ConfirmPlacementView.swift ---
import SwiftUI

struct ConfirmPlacementView: View {
    @EnvironmentObject var arViewModel: MainARViewModel

    var body: some View {
        HStack {
            Button {
                self.arViewModel.isShowingAdder = false
                self.arViewModel.resetPlacementParameters()
            } label: {
                Image(systemName: "xmark.circle.fill")
                    .resizable()
                    .frame(width: 60, height: 60)
                    .font(.title)
                    .foregroundColor(Color.red)
                    .background(Color.white.opacity(0.75))
                    .cornerRadius(30)
                    .padding(20)
            }

            Button {
                self.arViewModel.isShowingAdder = false
                self.arViewModel.modelConfirmedForPlacement = self.arViewModel.selectedPiece
                self.arViewModel.resetPlacementParameters()
            } label: {
                Image(systemName: "checkmark.circle.fill")
                    .resizable()
                    .frame(width: 60, height: 60)
                    .font(.title)
                    .foregroundColor(Color.green)
                    .background(Color.white.opacity(0.75))
                    .cornerRadius(30)
                    .padding(20)
            }
        }
    }
}

'''
'''--- App/App/Views/AR/MainARView.swift ---
import SwiftUI
import RealityKit
import ARKit

struct MainARView: View {
    @StateObject private var arViewModel: MainARViewModel = MainARViewModel()
    @StateObject private var multipeerSession: MultipeerSession = MultipeerSession()

    @State private var isPlacementEnabled = false
    @State private var errorMessage: String = ""
    @State private var isShowingPopup: Bool = false
    @State private var arViewContainer = ARViewContainer()

    var body: some View {
        ZStack {
            arViewContainer
                .environmentObject(self.arViewModel)
                .environmentObject(self.multipeerSession)
                .ignoresSafeArea()

            if self.arViewModel.isShowingAdder {
                VStack {
                    Spacer()

                    ConfirmPlacementView()
                        .environmentObject(self.arViewModel)
                        .padding(.bottom, 40)
                }
            } else {
                VStack {
                    ArtPiecePickerView()
                        .environmentObject(self.arViewModel)
                }
            }
        }
        .alert("\(self.errorMessage)", isPresented: $isShowingPopup) {
            Button("OK", role: .cancel) {
                self.arViewModel.isShowingUploadSnapshotOverlay = false
                self.isShowingPopup = false
                self.errorMessage = ""
            }
        }
    }
}

#Preview {
    MainARView()
}

'''
'''--- App/App/Views/AR/SecondaryPickerView.swift ---
import SwiftUI

struct SecondaryPickerView: View {
    @Environment(\.presentationMode) var mode
    
    let action: () -> Void
        
    init(action: @escaping () -> Void) {
        self.action = action
    }

    var body: some View {
        ZStack {
            VStack {
                HStack {
                    Button { mode.wrappedValue.dismiss() } label: {
                      Image(systemName: "arrowshape.turn.up.backward.circle")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 65, height: 65)
                        .foregroundColor(RizzColors.rizzWhite)
                        .padding(.leading, 10)
                    }

                    Spacer()

                    Button { action() } label: {
                        Circle()
                            .frame(width: 65, height: 65)
                            .opacity(0.0)
                            .overlay {
                                Circle()
                                    .stroke(RizzColors.rizzWhite, lineWidth: 3.0)
                                    .frame(width: 65, height: 65)
                            }
                            .overlay {
                                Circle()
                                    .foregroundStyle(RizzColors.rizzRed)
                                    .frame(width: 50, height: 50)
                            }
                    }

                    Spacer()

                    Circle()
                        .frame(width: 65, height: 65)
                        .padding(.trailing, 10)
                        .opacity(0.0)
                }
                .padding(.horizontal)
            }
        }
    }
}

#Preview {
    SecondaryPickerView() {
        print("Hello world")
    }
}

'''
'''--- App/App/Views/Event/Create Event/CreateEventView.swift ---
//
//  CreateEventView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI
import Camera_SwiftUI
import Combine
import AVFoundation
import OpenAIKit

struct CreateEventView: View {
    @State private var name: String = ""
    @State private var description: String = ""
    @State private var date = Date()
    
    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzMatteBlack)
                .ignoresSafeArea()
            
            ScrollView(showsIndicators: false) {
                UploadAssetView()
                
                InputFieldView(text: $name, name: "Event Name")
                
                ExtendedFieldView(text: $description, name: "Event Description")
                
                DatePicker(
                    "Start Date",
                    selection: $date,
                    displayedComponents: [.date]
                )
                .foregroundStyle(RizzColors.rizzWhite)
                .padding(.horizontal, 30)
                .padding(.top)
                
                ZStack {
                    VStack {
                        Spacer()
                        
                        Capsule()
                            .foregroundStyle(RizzColors.rizzMatteBlack)
                            .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                            .overlay {
                                Capsule()
                                    .stroke(RizzColors.rizzWhite, lineWidth: 5)
                            }
                    }
                    VStack {
                        Spacer()
                        
                        Text("Create Event")
                            .foregroundStyle(RizzColors.rizzWhite)
                            .font(.title)
                            .bold()
                            .padding(.bottom, 6)
                    }
                }
                .padding(.top)
                
                Text("Cancel")
                    .foregroundStyle(RizzColors.rizzWhite)
                    .font(.title3)
                    .bold()
                    .padding(.bottom, 6)
            }
        }
    }
}

#Preview {
    CreateEventView()
}

struct ExtendedFieldView: View {
    @Binding var text: String
    
    let name: String
    
    var body: some View {
        VStack {
            HStack {
                Text(name)
                    .foregroundStyle(RizzColors.rizzWhite)
                
                Spacer()
            }
            
            TextField(name, text: $text, axis: .vertical)
                .textFieldStyle(.roundedBorder)
        }
        .padding(.horizontal, 30)
        .padding(.top)
    }
}

struct InputFieldView: View {
    @Binding var text: String
    
    let name: String
    
    var body: some View {
        VStack {
            HStack {
                Text(name)
                    .foregroundStyle(RizzColors.rizzWhite)
                
                Spacer()
            }
            
            TextField(name, text: $text)
                .textFieldStyle(.roundedBorder)
        }
        .padding(.horizontal, 30)
        .padding(.top)
    }
}

class UploadAssetViewModel: ObservableObject {
    @Published var selectedImage: UIImage? = nil
    @Published var selectedAIImage: Image? = nil
}

struct UploadAssetView: View {
    @State private var isPresentingImagePicker: Bool = false
    @State private var isPresentingCameraView: Bool = false
    @State private var isPresentingAIGenerator: Bool = false
    
    @StateObject private var viewModel: UploadAssetViewModel = UploadAssetViewModel()
    
    @EnvironmentObject var authViewModel: AuthViewModel
    
    var body: some View {
        ZStack {
            if let selectedImage = viewModel.selectedImage {
                Image(uiImage: selectedImage)
                    .resizable()
                    .scaledToFit()
                    .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
                    .clipShape(RoundedRectangle(cornerRadius: 12.0))
            } else if let selectedImage = viewModel.selectedAIImage {
                selectedImage
                    .resizable()
                    .scaledToFit()
                    .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
                    .clipShape(RoundedRectangle(cornerRadius: 12.0))
            } else {
                RoundedRectangle(cornerRadius: 12.0)
                    .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
                    .foregroundStyle(RizzColors.rizzGray)
            }

            VStack(spacing: 10) {
                HStack {
                    Button {
                        isPresentingImagePicker.toggle()
                    } label: {
                        ZStack {
                            RoundedRectangle(cornerRadius: 18.0)
                                .frame(width: 60, height: 60)
                                .foregroundStyle(RizzColors.rizzLightGray)
                            
                            Image(systemName: "photo.fill")
                                .resizable()
                                .scaledToFit()
                                .frame(width: 40, height: 40)
                                .foregroundStyle(RizzColors.rizzWhite)
                        }
                    }
                    
                    Button {
                        isPresentingCameraView.toggle()
                    } label: {
                        ZStack {
                            RoundedRectangle(cornerRadius: 18.0)
                                .frame(width: 60, height: 60)
                                .foregroundStyle(RizzColors.rizzLightGray)
                            
                            Image(systemName: "camera.fill")
                                .resizable()
                                .scaledToFit()
                                .frame(width: 40, height: 40)
                                .foregroundStyle(RizzColors.rizzWhite)
                        }
                    }
                    
                    Button {
                        self.isPresentingAIGenerator = true
                    } label: {
                        ZStack {
                            RoundedRectangle(cornerRadius: 18.0)
                                .frame(width: 60, height: 60)
                                .foregroundStyle(RizzColors.rizzLightGray)
                            
                            Image(systemName: "cpu")
                                .resizable()
                                .scaledToFit()
                                .frame(width: 40, height: 40)
                                .foregroundStyle(RizzColors.rizzWhite)
                        }
                    }
                    
                    Spacer()
                }
                .padding(.top, 20)
                
                Spacer()
            }
            .padding(.leading, 100)
            .sheet(isPresented: $isPresentingImagePicker) {
                ImagePicker(sourceType: .photoLibrary, selectedImage: $viewModel.selectedImage).onDisappear { authViewModel.selectedImage = viewModel.selectedImage }
            }
            .sheet(isPresented: $isPresentingCameraView) {
                ImagePicker(sourceType: .camera, selectedImage: $viewModel.selectedImage).onDisappear { authViewModel.selectedImage = viewModel.selectedImage }
            }
            .sheet(isPresented: $isPresentingAIGenerator) {
                AIGeneratorView(returnedImage: $viewModel.selectedAIImage)
            }
        }
    }
}

struct AIGeneratorView: View {
    @State private var idea: String = ""
    @State private var image: Image? = nil
    
    @Binding var returnedImage: Image?
    
    @EnvironmentObject var authViewModel: AuthViewModel
    
    @Environment(\.presentationMode) var mode
    
    func generateImage() async throws {
        let openAI = OpenAI(Configuration(organizationId: "MarcoDotIO", apiKey: openAIKey))
        let imageParameters = ImageParameters(prompt: self.idea, numberofImages: 1, resolution: .large, responseFormat: .base64Json)
        let imageResponse = try await openAI.createImage(parameters: imageParameters)
        let uiImage = try openAI.decodeBase64Image(imageResponse.data[0].image)
        authViewModel.selectedImage = uiImage
        self.image = Image(uiImage: uiImage)
    }

    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzMatteBlack)
                .ignoresSafeArea()
            
            VStack {
                ExtendedFieldView(text: $idea, name: "Image Idea")
                
                Button {
                    Task {
                        do {
                            try await self.generateImage()
                        } catch {
                            print(error)
                        }
                    }
                } label: {
                    ZStack {
                        VStack {
                            Spacer()
                            
                            Capsule()
                                .foregroundStyle(RizzColors.rizzMatteBlack)
                                .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                                .overlay {
                                    Capsule()
                                        .stroke(RizzColors.rizzWhite, lineWidth: 5)
                                }
                        }
                        VStack {
                            Spacer()
                            
                            Text("Generate Image")
                                .foregroundStyle(RizzColors.rizzWhite)
                                .font(.title)
                                .bold()
                                .padding(.bottom, 6)
                        }
                    }
                    .padding(.top)
                }
                
                if let image {
                    image
                        .resizable()
                        .scaledToFit()
                        .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
                        .clipShape(RoundedRectangle(cornerRadius: 12.0))
                    
                    Button {
                        self.returnedImage = self.image
                        mode.wrappedValue.dismiss()
                    } label: {
                        ZStack {
                            VStack {
                                Spacer()
                                
                                Capsule()
                                    .foregroundStyle(RizzColors.rizzMatteBlack)
                                    .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                                    .overlay {
                                        Capsule()
                                            .stroke(RizzColors.rizzWhite, lineWidth: 5)
                                    }
                            }
                            VStack {
                                Spacer()
                                
                                Text("Submit Image")
                                    .foregroundStyle(RizzColors.rizzWhite)
                                    .font(.title)
                                    .bold()
                                    .padding(.bottom, 6)
                            }
                        }
                        .padding(.top)
                    }
                    
                    Button {
                        Task {
                            do {
                                try await self.generateImage()
                            } catch {
                                print(error)
                            }
                        }
                    } label: {
                        Text("Regenerate")
                            .foregroundStyle(RizzColors.rizzWhite)
                            .font(.title3)
                            .bold()
                            .padding(.bottom, 6)
                    }
                }
            }
        }
    }
}

final class CameraModel: ObservableObject {
    let service = CameraService()
    
    @Published var photo: Photo!
    
    @Published var showAlertError = false
    
    @Published var isFlashOn = false
    
    @Published var willCapturePhoto = false
    
    var alertError: AlertError!
    
    var session: AVCaptureSession
    
    private var subscriptions = Set<AnyCancellable>()
    
    init() {
        self.session = service.session
        
        service.$photo.sink { [weak self] (photo) in
            guard let pic = photo else { return }
            self?.photo = pic
        }
        .store(in: &self.subscriptions)
        
        service.$shouldShowAlertView.sink { [weak self] (val) in
            self?.alertError = self?.service.alertError
            self?.showAlertError = val
        }
        .store(in: &self.subscriptions)
        
        service.$flashMode.sink { [weak self] (mode) in
            self?.isFlashOn = mode == .on
        }
        .store(in: &self.subscriptions)
        
        service.$willCapturePhoto.sink { [weak self] (val) in
            self?.willCapturePhoto = val
        }
        .store(in: &self.subscriptions)
    }
    
    func configure() {
        service.checkForPermissions()
        service.configure()
    }
    
    func capturePhoto() {
        service.capturePhoto()
    }
    
    func flipCamera() {
        service.changeCamera()
    }
    
    func zoom(with factor: CGFloat) {
        service.set(zoom: factor)
    }
    
    func switchFlash() {
        service.flashMode = service.flashMode == .on ? .off : .on
    }
}

struct CameraView: View {
    @Environment(\.dismiss) var dismiss
    
    @StateObject var model = CameraModel()
    
    @State var currentZoomFactor: CGFloat = 1.0
    
    var captureButton: some View {
        Button(action: {
            model.capturePhoto()
            dismiss()
        }, label: {
            Circle()
                .foregroundColor(.white)
                .frame(width: 80, height: 80, alignment: .center)
                .overlay(
                    Circle()
                        .stroke(Color.black.opacity(0.8), lineWidth: 2)
                        .frame(width: 65, height: 65, alignment: .center)
                )
        })
    }
    
    var flipCameraButton: some View {
        Button(action: {
            model.flipCamera()
        }, label: {
            Circle()
                .foregroundColor(Color.gray.opacity(0.2))
                .frame(width: 45, height: 45, alignment: .center)
                .overlay(
                    Image(systemName: "camera.rotate.fill")
                        .foregroundColor(.white))
        })
    }
    
    var body: some View {
        NavigationView {
            GeometryReader { reader in
                ZStack {
                    Color.black.edgesIgnoringSafeArea(.all)
                    
                    VStack {
                        CameraPreview(session: model.session)
                            .gesture(
                                DragGesture().onChanged({ (val) in
                                    //  Only accept vertical drag
                                    if abs(val.translation.height) > abs(val.translation.width) {
                                        //  Get the percentage of vertical screen space covered by drag
                                        let percentage: CGFloat = -(val.translation.height / reader.size.height)
                                        //  Calculate new zoom factor
                                        let calc = currentZoomFactor + percentage
                                        //  Limit zoom factor to a maximum of 5x and a minimum of 1x
                                        let zoomFactor: CGFloat = min(max(calc, 1), 5)
                                        //  Store the newly calculated zoom factor
                                        currentZoomFactor = zoomFactor
                                        //  Sets the zoom factor to the capture device session
                                        model.zoom(with: zoomFactor)
                                    }
                                })
                            )
                            .onAppear {
                                model.configure()
                            }
                            .alert(isPresented: $model.showAlertError, content: {
                                Alert(title: Text(model.alertError.title), message: Text(model.alertError.message), dismissButton: .default(Text(model.alertError.primaryButtonTitle), action: {
                                    model.alertError.primaryAction?()
                                }))
                            })
                            .overlay(
                                Group {
                                    if model.willCapturePhoto {
                                        Color.black
                                    }
                                }
                            )
                            .animation(.easeInOut)
                        
                        
                        HStack {
                            Button(action: {
                                model.switchFlash()
                            }, label: {
                                Image(systemName: model.isFlashOn ? "bolt.fill" : "bolt.slash.fill")
                                    .font(.system(size: 20, weight: .medium, design: .default))
                            })
                            .accentColor(model.isFlashOn ? .yellow : .white)
                            
                            Spacer()
                            
                            captureButton
                            
                            Spacer()
                            
                            flipCameraButton
                            
                        }
                        .padding(.horizontal, 20)
                    }
                }
            }
        }
    }
}

'''
'''--- App/App/Views/Event/Event Details/EventDetailView.swift ---
//
//  EventDetailView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct EventDetailView: View {
    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzGray)
                .ignoresSafeArea()
            
            VStack {
                Rectangle()
                    .ignoresSafeArea()
                    .frame(width: UIScreen.main.bounds.width, height: UIScreen.main.bounds.width)
                
                Spacer()
            }

            ScrollView {
                VStack {
                    HStack {
                        Text("Lorum Ipsum")
                            .foregroundStyle(RizzColors.rizzWhite)
                            .font(.title)
                            .bold()
                            .padding([.top, .leading])
                            .padding(.leading, 10)
                        
                        Spacer()
                    }
                    
                    Text("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Pharetra et ultrices neque ornare aenean. Tortor pretium viverra suspendisse potenti nullam ac. Commodo quis imperdiet massa tincidunt nunc pulvinar sapien et ligula. Pellentesque eu tincidunt tortor aliquam nulla facilisi cras fermentum. Tincidunt tortor aliquam nulla facilisi cras fermentum odio. Vestibulum sed arcu non odio. Eget nulla facilisi etiam dignissim diam quis enim lobortis. Porttitor leo a diam sollicitudin tempor id eu. Dui vivamus arcu felis bibendum ut. Nisl nunc mi ipsum faucibus. Viverra maecenas accumsan lacus vel facilisis volutpat. Tellus cras adipiscing enim eu turpis egestas pretium. Tortor pretium viverra suspendisse potenti nullam ac.")
                        .foregroundStyle(RizzColors.rizzWhite)
                        .padding(.horizontal, 30)
                        .padding(.top, 1)
                        .padding(.bottom, 40)
                }
                .background {
                    RoundedRectangle(cornerRadius: 12.0)
                        .frame(width: UIScreen.main.bounds.width)
                        .foregroundStyle(RizzColors.rizzGray)
                }
                .padding(.top, 320)
            }
        }
    }
}

#Preview {
    EventDetailView()
}

'''
'''--- App/App/Views/Main/AppTabView.swift ---
//
//  AppTabView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct AppTabView: View {
    @State private var index: Int = 0
    
    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzMatteBlack)
                .ignoresSafeArea()
            
            if index == 0 {
                HomeView()
            } else if index == 1 {
                EventsView()
            }
            
            MenuDockView(index: $index)
        }
    }
}

#Preview {
    AppTabView()
        .environmentObject(AppearenceViewModel.instance)
}

'''
'''--- App/App/Views/Main/Events/EventsView.swift ---
//
//  EventsView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct EventsView: View {
    var body: some View {
        ZStack {
            VStack {
                MainNavBarView()
                
                EventsScrollView()
                
                Spacer()
            }
        }
    }
}

struct EventsScrollView: View {
    @State private var isShowingEventDetails: Bool = false
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            ForEach(0..<10, id:\.self) { _ in
                Button {
                    isShowingEventDetails.toggle()
                } label: {
                    EventItemView()
                }
            }
        }
        .sheet(isPresented: $isShowingEventDetails) {
            EventDetailView()
        }
    }
}

struct EventItemView: View {
    var body: some View {
        HStack {
            RoundedRectangle(cornerRadius: 12.0)
                .frame(width: 80, height: 80)
                .foregroundStyle(.white)
                .padding(.leading, 24)
                .padding(.vertical)
            
            Spacer()
            
            Text("Lorum Ipsum")
                .font(.system(size: 24))
                .foregroundStyle(RizzColors.rizzWhite)
                .bold()
            
            Spacer()
            
            Text("Sep. 24")
                .foregroundStyle(RizzColors.rizzWhite)
                .padding(.trailing, 30)
        }
        .padding(.horizontal)
        .padding(.vertical, 5)
        .background {
            RoundedRectangle(cornerRadius: 12.0)
                .frame(width: UIScreen.main.bounds.width - 40)
                .foregroundStyle(RizzColors.rizzMatteBlack)
        }
    }
}

#Preview {
    EventsView()
}

'''
'''--- App/App/Views/Main/Home/HomeView.swift ---
//
//  HomeView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct HomeView: View {
    @EnvironmentObject var viewModel: AuthViewModel
    
    var body: some View {
        ScrollView {
            ZStack {
                VStack {
                    // Nav Bar
                    HomeNavBarView()
                    
                    // My NFTs
                    MyNFTsView()
                }
            }
        }
        .refreshable {
            self.viewModel.fetchNFTs()
        }
        .onAppear {
            self.viewModel.fetchNFTs()
        }
    }
}

#Preview {
    HomeView()
        .environmentObject(AppearenceViewModel.instance)
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Big Card/BigCardGridView.swift ---
//
//  BigCardGridView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct BigCardGridView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @State private var currentDetailNFT: NonFungibleTokens?
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            ForEach(authViewModel.nfts) { nft in
                Button {
                    self.currentDetailNFT = nft
                } label: {
                    BigCardView(nft: nft)
                }
            }
            .padding(.bottom, 140)
            .sheet(item: $currentDetailNFT) { nftDetail in
                NFTDetailView(nft: nftDetail)
            }
        }
        .refreshable {
            self.authViewModel.fetchNFTs()
        }
    }
}
#Preview {
    BigCardGridView()
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Big Card/BigCardGridView~.swift ---
//
//  BigCardGridView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct BigCardGridView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    @State private var currentDetailNFT: NonFungibleTokens?
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            ForEach(authViewModel.nfts) { nft in
                Button {
                    self.currentDetailNFT = nft
                } label: {
                    BigCardView(nft: nft)
                }
            }
            .padding(.bottom, 140)
            .sheet(item: $currentDetailNFT) { nftDetail in
                NFTDetailView(nft: nftDetail)
            }
        }
    }
}
#Preview {
    BigCardGridView()
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Big Card/BigCardView.swift ---
//
//  BigCardView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct BigCardView: View {
    let nft: NonFungibleTokens
    
    var body: some View {
        if nft.imageURL.contains("<svg") {
            SVGWebView(svgString: nft.imageURL)
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
        } else if let url = URL(string: nft.imageURL) {
            AsyncImage(url: url) { image in
                image.image?.resizable().scaledToFit()
            }
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
        } else {
            RoundedRectangle(cornerRadius: 12.0)
                .foregroundStyle(RizzColors.rizzGray)
                .frame(width: UIScreen.main.bounds.width - 50, height: UIScreen.main.bounds.width - 50)
        }
    }
}
//
//#Preview {
//    BigCardView(image: "CoolCat1")
//}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/CollectorClusterGridView.swift ---
//
//  CollectorClusterGridView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct CollectorClusterGridView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    
    @State private var currentDetailNFT: NonFungibleTokens?
    
    private let items = [
        GridItem(.flexible()), GridItem(.flexible()), GridItem(.flexible())
    ]
    private let side = UIScreen.main.bounds.width / 4
    
    var body: some View {
        ScrollView(showsIndicators: false) {
            LazyVGrid(columns: items, spacing: 2) {
                ForEach(authViewModel.nfts) { nft in
                    if nft.imageURL.contains("<svg") {
                        Button {
                            self.currentDetailNFT = nft
                        } label: {
                            SVGWebView(svgString: nft.imageURL)
                                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                                .frame(width: side, height: side)
                        }
                    } else if let url = URL(string: nft.imageURL) {
                        Button {
                            self.currentDetailNFT = nft
                        } label: {
                            AsyncImage(url: url) { image in
                                image.image?.resizable().scaledToFit()
                            }
                                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                                .frame(width: side, height: side)
                        }
                    } else {
                        Button {
                            self.currentDetailNFT = nft
                        } label: {
                            RoundedRectangle(cornerRadius: 12.0)
                                .foregroundStyle(RizzColors.rizzGray)
                                .frame(width: side, height: side)
                        }
                    }
                }
            }
            .padding(.bottom, 140)
            .sheet(item: $currentDetailNFT) { nftDetail in
                NFTDetailView(nft: nftDetail)
            }
        }
        .refreshable {
            self.authViewModel.fetchNFTs()
        }
        .padding(.horizontal, 44)
    }
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/GridModeOptionsView.swift ---
//
//  GridModeOptionsView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/24/23.
//

import SwiftUI

struct GridModeOptionsView: View {
    @Environment(\.dismiss) var dismiss
    
    @EnvironmentObject var appearenceViewModel: AppearenceViewModel
    
    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzGray)
                .ignoresSafeArea()
            
            HStack {
                VStack(alignment: .leading) {
                    Text("VIEW NFT AS")
                        .bold()
                        .foregroundStyle(.gray)
                        .padding(.leading, 26)
                    
                    Button {
                        appearenceViewModel.gridMode = .collectorCluster
                        dismiss()
                    } label: {
                        ModeItemView(icon: "square.grid.2x2.fill", name: "Collectors Cluster", iconType: .sfSymbol)
                    }
                    
                    Button {
                        appearenceViewModel.gridMode = .playlist
                        dismiss()
                    } label: {
                        ModeItemView(icon: "Playlist", name: "Playlist", iconType: .asset)
                    }
                    
                    Button {
                        appearenceViewModel.gridMode = .bigCards
                        dismiss()
                    } label: {
                        ModeItemView(icon: "BigCard", name: "Big Cards", iconType: .asset)
                    }
                    
                    Button {
                        appearenceViewModel.gridMode = .masonry
                        dismiss()
                    } label: {
                        ModeItemView(icon: "Masonry", name: "Masonry", iconType: .asset)
                    }
                }
                
                Spacer()
            }
        }
    }
}

struct ModeItemView: View {
    let icon: String
    let name: String
    let iconType: IconType
    
    var body: some View {
        ZStack {
            Rectangle()
                .frame(width: UIScreen.main.bounds.width + 10, height: 50)
                .foregroundStyle(RizzColors.rizzBlack)
            
            HStack {
                switch iconType {
                case .sfSymbol:
                    Image(systemName: "square.grid.2x2.fill")
                        .resizable()
                        .scaledToFit()
                        .foregroundStyle(RizzColors.rizzLightGray)
                        .frame(width: 20, height: 20)
                        .padding(.leading, 24)
                case .asset:
                    Image(icon)
                        .resizable()
                        .scaledToFit()
                        .foregroundStyle(RizzColors.rizzLightGray)
                        .frame(width: 20, height: 20)
                        .padding(.leading, 24)
                }
                
                Text(name)
                    .foregroundStyle(RizzColors.rizzWhite)
                    .padding(.leading, 16)
                
                Spacer()
            }
        }
    }
}

#Preview {
    GridModeOptionsView()
        .environmentObject(AppearenceViewModel.instance)
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/MainHomeScrollView.swift ---
//
//  MainHomeScrollView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct MainHomeScrollView: View {
    @EnvironmentObject var appearenceViewModel: AppearenceViewModel
    
    var body: some View {
        switch appearenceViewModel.gridMode {
        case .collectorCluster:
            CollectorClusterGridView()
        case .bigCards:
            BigCardGridView()
        case .playlist:
            PlaylistGridView()
        case .masonry:
            MasonryGridView()
        }
    }
}

#Preview {
    MainHomeScrollView()
        .environmentObject(AppearenceViewModel.instance)
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Masonry/MasonryCardView.swift ---
//
//  MasonryCardView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct MasonryCardView: View {
    let nft: NonFungibleTokens
    
    var body: some View {
        if nft.imageURL.contains("<svg") {
            SVGWebView(svgString: nft.imageURL)
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(maxWidth: 185, maxHeight: 350)
        } else if let url = URL(string: nft.imageURL) {
            AsyncImage(url: url) { image in
                image.image?.resizable().scaledToFit()
            }
                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                .frame(maxWidth: 185, maxHeight: 350)
        } else {
            RoundedRectangle(cornerRadius: 12.0)
                .foregroundStyle(RizzColors.rizzGray)
                .frame(maxWidth: 185, maxHeight: 350)
        }
    }
}

//
//#Preview {
//    MasonryCardView(image: "CoolCat1")
//}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Masonry/MasonryGridView.swift ---
//
//  MasonryGridView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI
import SwiftUIMasonry

struct MasonryGridView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    
    @State private var currentNFT: NonFungibleTokens? = nil
    
    var body: some View {
        ScrollView(.vertical) {
            VMasonry(columns: 2) {
                ForEach(authViewModel.nfts) { nft in
                    Button {
                        self.currentNFT = nft
                    } label: {
                        MasonryCardView(nft: nft)
                    }
                }
            }
            .padding(.bottom, 140)
            .sheet(item: $currentNFT) { nftDetail in
                NFTDetailView(nft: nftDetail)
            }
        }
        .refreshable {
            self.authViewModel.fetchNFTs()
        }
        .padding(.horizontal, 8)
    }
}

#Preview {
    MasonryGridView()
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/MyNFTsView.swift ---
//
//  MyNFTsView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct MyNFTsView: View {
    var body: some View {
        VStack {
            // Top List View
            TopListView()
            
            // Main Scroll View
            MainHomeScrollView()
        }
    }
}

#Preview {
    MyNFTsView()
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Playlist/PlaylistCategoryHeaderView.swift ---
//
//  PlaylistCategoryHeaderView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct PlaylistCategoryHeaderView: View {
    let name: String
    let amount: Int
//    let icon: String
    
    var body: some View {
        VStack {
            HStack {
                ZStack {
                    Image("EthLogo")
                        .resizable()
                        .scaledToFit()
                        .clipShape(Circle())
                        .frame(width: 50, height: 50)
                    
//                    Image(icon)
//                        .resizable()
//                        .scaledToFit()
//                        .clipShape(Circle())
//                        .frame(width: 50, height: 50)
                    
//                    Image("EthLogo")
//                        .resizable()
//                        .scaledToFit()
//                        .foregroundStyle(.white)
//                        .frame(width: 16, height: 16)
//                        .padding(.top, 30)
//                        .padding(.leading, 30)
                }
                
                Text(name)
                    .font(.title2)
                    .bold()
                    .foregroundStyle(RizzColors.rizzWhite)
                    .padding(.leading, 15)
                
                Text(" (\(amount))")
                    .font(.subheadline)
                    .foregroundStyle(.gray)
                
                Spacer()
            }
            .padding(.leading, 25)
            
            Spacer()
        }
        .padding(.top, 20)
        .padding(.bottom, 2)
    }
}

//#Preview {
//    PlaylistCategoryHeaderView(name: "Cool Cats", amount: 99, icon: "CoolCatLogo")
//}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Playlist/PlaylistCategoryView.swift ---
//
//  PlaylistCategoryView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct PlaylistCategoryView: View {
    let name: String
    let nfts: [NonFungibleTokens]
    
    var body: some View {
        ZStack {
            RoundedRectangle(cornerRadius: 12.0)
                .frame(width: UIScreen.main.bounds.width - 20, height: 200)
                .foregroundStyle(RizzColors.rizzLightGray)
            
            VStack {
                PlaylistCategoryHeaderView(name: name, amount: nfts.count)
                PlaylistScrollView(nfts: nfts)
            }
        }
        .padding(.vertical, 0.25)
    }
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Playlist/PlaylistGridView.swift ---
//
//  PlaylistGridView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct PlaylistGridView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    
    var body: some View {
        VStack {
            ScrollView(.vertical) {
                ForEach(authViewModel.playlist.keys.map { String($0) }, id: \.self) { key in
                    PlaylistCategoryView(name: key, nfts: authViewModel.playlist[key]!)
                }
                .padding(.bottom, 140)
            }
            .refreshable {
                self.authViewModel.fetchNFTs()
            }
        }
    }
}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/Playlist/PlaylistScrollView.swift ---
//
//  PlaylistScrollView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct PlaylistScrollView: View {
    let nfts: [NonFungibleTokens]
    
    @State private var currentNFT: NonFungibleTokens? = nil
    
    var body: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack {
                ForEach(nfts) { nft in
                    if nft.imageURL.contains("<svg") {
                        Button {
                            self.currentNFT = nft
                        } label: {
                            SVGWebView(svgString: nft.imageURL)
                                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                                .frame(width: 110, height: 110)
                        }
                    } else if let url = URL(string: nft.imageURL) {
                        Button {
                            self.currentNFT = nft
                        } label: {
                            AsyncImage(url: url) { image in
                                image.image?.resizable().scaledToFit()
                            }
                                .clipShape(RoundedRectangle(cornerRadius: 12.0))
                                .frame(width: 110, height: 110)
                        }
                    } else {
                        Button {
                            self.currentNFT = nft
                        } label: {
                            RoundedRectangle(cornerRadius: 12.0)
                                .foregroundStyle(RizzColors.rizzGray)
                                .frame(width: 110, height: 110)
                        }
                    }
                }
            }
            .padding(.bottom)
            .padding(.horizontal, 22)
            .sheet(item: $currentNFT) { nftDetail in
                NFTDetailView(nft: nftDetail)
            }
        }
        .mask {
            RoundedRectangle(cornerRadius: 12.0)
                .frame(width: UIScreen.main.bounds.width - 20, height: 200)
        }
    }
}

//#Preview {
//    PlaylistScrollView(nfts: RizzOnboarding.discover[0].NFTs)
//}

'''
'''--- App/App/Views/Main/Home/Main Scroll Menu/TopListView.swift ---
//
//  TopListView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct TopListView: View {
    @EnvironmentObject var appearenceViewModel: AppearenceViewModel
    
    @State private var isChangingGridMode: Bool = false
    
    var body: some View {
        HStack {
            HStack {
                Image(systemName: "photo.fill")
                    .resizable()
                    .scaledToFit()
                    .foregroundStyle(RizzColors.rizzWhite)
                    .frame(width: 25, height: 25)
                
                Text("My NFTs")
                    .foregroundStyle(RizzColors.rizzWhite)
                    .bold()
                    .font(.system(size: 18))
            }
            .padding(.leading, 10)
            
            Spacer()
            
            switch appearenceViewModel.gridMode {
            case .collectorCluster:
                Button {
                    isChangingGridMode = true
                } label: {
                    ModalTagView(name: "Collectors Cluster", icon: "square.grid.2x2.fill", iconType: .sfSymbol)
                }
            case .playlist:
                Button {
                    isChangingGridMode = true
                } label: {
                    ModalTagView(name: "Playlist", icon: "Playlist", iconType: .asset)
                }
            case .bigCards:
                Button {
                    isChangingGridMode = true
                } label: {
                    ModalTagView(name: "Big Cards", icon: "BigCard", iconType: .asset)
                }
            case .masonry:
                Button {
                    isChangingGridMode = true
                } label: {
                    ModalTagView(name: "Masonry", icon: "Masonry", iconType: .asset)
                }
            }
        }
        .padding(.top, 24)
        .sheet(isPresented: $isChangingGridMode, content: {
            GridModeOptionsView()
                .presentationDetents([.fraction(0.4)])
        })
    }
}

struct ModalTagView: View {
    let name: String
    let icon: String
    let iconType: IconType
    
    var body: some View {
        HStack {
            Text(name)
                .bold()
                .font(.system(size: 18))
                .foregroundStyle(RizzColors.rizzWhite)
                .padding(.trailing, 16)
            
            switch iconType {
            case .sfSymbol:
                Image(systemName: icon)
                    .resizable()
                    .scaledToFit()
                    .foregroundStyle(RizzColors.rizzWhite)
                    .frame(width: 25, height: 25)
            case .asset:
                Image(icon)
                    .resizable()
                    .scaledToFit()
                    .foregroundStyle(RizzColors.rizzWhite)
                    .frame(width: 25, height: 25)
            }
        }
        .padding(.trailing, 10)
    }
}

#Preview {
    TopListView()
        .environmentObject(AppearenceViewModel.instance)
}

'''
'''--- App/App/Views/Main/Home/MintView.swift ---
//
//  MintView.swift
//  App
//
//  Created by Marcus Arnett on 11/9/23.
//

import SwiftUI

struct MintView: View {
    @Environment(\.presentationMode) private var mode
    
    @EnvironmentObject var viewModel: AuthViewModel

    @State private var name: String = ""
    @State private var description: String = ""
    @State private var hasCompleted: Bool? = nil

    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzMatteBlack)
                .ignoresSafeArea()
            
            ScrollView(showsIndicators: false) {
                UploadAssetView().environmentObject(viewModel)

                InputFieldView(text: $name, name: "NFT Name")

                ExtendedFieldView(text: $description, name: "NFT Description")

                Button {
                    self.hasCompleted = viewModel.mintNFT(name: self.name, description: self.description)
                } label: {
                    ZStack {
                        VStack {
                            Spacer()

                            Capsule()
                                .foregroundStyle(RizzColors.rizzMatteBlack)
                                .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                                .overlay {
                                    Capsule()
                                        .stroke(RizzColors.rizzWhite, lineWidth: 5)
                                }
                        }
                        VStack {
                            Spacer()
                            
                            Text("Mint NFT")
                                .foregroundStyle(RizzColors.rizzWhite)
                                .font(.title)
                                .bold()
                                .padding(.bottom, 6)
                        }
                    }
                    .padding(.top)
                }
                
                Button {
                    self.mode.wrappedValue.dismiss()
                } label: {
                    Text("Cancel")
                        .foregroundStyle(RizzColors.rizzWhite)
                        .font(.title3)
                        .bold()
                        .padding(.bottom, 6)
                }
            }
        }
        .onChange(of: self.hasCompleted) { _, newValue in
            if let newValue, newValue {
                self.mode.wrappedValue.dismiss()
            }
        }
    }
}

#Preview {
    MintView()
}

'''
'''--- App/App/Views/Main/Home/ProfileView.swift ---
//
//  ProfileView.swift
//  App
//
//  Created by Marcus Arnett on 11/9/23.
//

import SwiftUI

struct ProfileView: View {
    @EnvironmentObject var viewModel: AuthViewModel

    @State private var selectedTab: Int = 1
    
    var slice = UIScreen.main.bounds.width / 2
    
    var body: some View {
        ZStack {
            Rectangle()
                .ignoresSafeArea()
                .foregroundStyle(LinearGradient(
                    gradient: Gradient(colors: [Color.green, Color.black]),
                    startPoint: .top,
                    endPoint: .bottom
                ))
            
            Rectangle()
                .frame(width: UIScreen.main.bounds.width)
                .offset(y: 150)
                .foregroundStyle(.rizzMatteBlack)
            
            ZStack {
                Circle()
                    .frame(width: 150, height: 150)
                    .offset(y: -230)
                    .foregroundStyle(.rizzWhite)
                
                Circle()
                    .frame(width: 145, height: 145)
                    .offset(y: -230)
                    .foregroundStyle(.rizzGreen)
                
                Text(self.viewModel.owner ?? "placerholder.near")
                    .bold()
                    .font(.title2)
                    .foregroundStyle(.rizzWhite)
                    .offset(y: -130)
                
                Capsule()
                    .frame(width: UIScreen.main.bounds.width - 20, height: 70)
                    .offset(y: -60)
                    .foregroundStyle(.rizzLightGray)
                
                Capsule()
                    .frame(width: UIScreen.main.bounds.width - 30, height: 60)
                    .offset(y: -60)
                    .foregroundStyle(.rizzGray)
                    .mask {
                        Rectangle()
                            .frame(width: 400, height: 400)
                            .opacity(0.9)
                            .offset(x: self.selectedTab == 1 ? slice : -slice, y: -60)
                    }

                HStack {
                    Image(systemName: "person.fill")
                        .foregroundStyle(.rizzWhite)
                        .frame(width: 150, height: 50)
                        .offset(x: -55, y: -60)
                    
                    Text("Profile")
                        .foregroundStyle(.rizzWhite)
                        .frame(width: 150, height: 50)
                        .offset(x: -160, y: -60)
                }
                .onTapGesture {
                    withAnimation {
                        self.selectedTab = 1
                    }
                }
                
                HStack {
                    Image(systemName: "gear")
                        .foregroundStyle(.rizzWhite)
                        .frame(width: 150, height: 50)
                        .offset(x: 130, y: -60)
                    
                    Text("Settings")
                        .foregroundStyle(.rizzWhite)
                        .frame(width: 150, height: 50)
                        .offset(x: 30, y: -60)
                }
                .onTapGesture {
                    withAnimation {
                        self.selectedTab = 2
                    }
                }
            }
            
            RoundedRectangle(cornerRadius: 12.0)
                .frame(width: UIScreen.main.bounds.width, height: 300)
                .offset(y: 165)
                .foregroundStyle(.rizzLightGray)
            
            if selectedTab == 1 {
                AccountView()
            } else {
                SettingsView()
            }
        }
    }
}

struct AccountView: View {
    @EnvironmentObject var viewModel: AuthViewModel

    var body: some View {
        VStack {
            Text("About")
                .foregroundStyle(.rizzWhite)
                .bold()
                .font(.title2)
                .offset(x: -140, y: 35)
            
            HStack {
                ZStack {
                    RoundedRectangle(cornerRadius: 16.0)
                        .frame(width: 170, height: 170)
                        .offset(x: -85, y: 50)
                        .foregroundStyle(.rizzMatteBlack)
                    
                    Image("NearLogo")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 75, height: 75)
                        .offset(x: -85, y: 30)
                    
                    Text("\(viewModel.amount.rounded(toPlaces: 3)) NEAR")
                        .bold()
                        .font(.title3)
                        .foregroundStyle(.rizzWhite)
                        .offset(x: -85, y: 100)
                }

                ZStack {
                    RoundedRectangle(cornerRadius: 16.0)
                        .frame(width: 170, height: 170)
                        .offset(x: -75, y: 50)
                        .foregroundStyle(.rizzMatteBlack)
                    
                    Image(systemName: "wallet.pass")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 75, height: 75)
                        .offset(x: -75, y: 30)
                        .foregroundStyle(.rizzWhite)
                    
                    Text("\(viewModel.nfts.count) \(viewModel.nfts.count == 1 ? "NFT" : "NFTs")")
                        .bold()
                        .font(.title2)
                        .foregroundStyle(.rizzWhite)
                        .offset(x: -75, y: 100)
                }
            }
            .offset(x: 80)
        }
        .offset(y: 100)
    }
}

struct SettingsView: View {
    @EnvironmentObject var viewModel: AuthViewModel

    var body: some View {
        Button {
            self.viewModel.signout()
        } label: {
            Text("Logout")
                .foregroundStyle(RizzColors.rizzWhite)
                .font(.title2)
                .bold()
                .background {
                    Capsule()
                        .foregroundStyle(RizzColors.rizzMatteBlack)
                        .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                        .overlay {
                            Capsule()
                                .stroke(RizzColors.rizzGray, lineWidth: 5)
                        }
                }
        }
        .offset(y: 160)
    }
}

#Preview {
    ProfileView()
}

extension Double {
    func rounded(toPlaces places:Int) -> Double {
        let divisor = pow(10.0, Double(places))
        return (self * divisor).rounded() / divisor
    }
}

'''
'''--- App/App/Views/Main/MenuDockView.swift ---
//
//  FloatingActionButtonView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

enum IconType {
    case sfSymbol
    case asset
}

struct MenuDockView: View {
    @Binding var index: Int
    
    @State private var isShowingLabels: Bool = true
    @State private var isShowingActionMenu: Bool = false
    
    var body: some View {
        ZStack {
            if isShowingActionMenu {
                Rectangle()
                    .foregroundStyle(RizzColors.rizzMatteBlack.opacity(0.18))
                    .ignoresSafeArea()
            }
            
            VStack {
                HStack {
                    HStack {
                        Button {
                            index = 0
                        } label: {
                            VStack {
                                Image(systemName: "square.grid.3x3.fill")
                                    .resizable()
                                    .scaledToFit()
                                    .frame(width: 20, height: 20)
                                
                                if isShowingLabels {
                                    Text("Collections")
                                }
                            }
                        }
                        .padding(.leading, 12)
                        .foregroundStyle(self.index == 0 ? RizzColors.rizzGreen : RizzColors.rizzLightGray)
                        
                        Button {
                            index = 1
                        } label: {
                            VStack {
                                Image(systemName: "ticket.fill")
                                    .resizable()
                                    .scaledToFit()
                                    .frame(width: 20, height: 20)
                                
                                if isShowingLabels {
                                    Text("Events")
                                }
                            }
                            .padding(.leading, 40)
                        }
                        .foregroundStyle(self.index == 1 ? RizzColors.rizzGreen : RizzColors.rizzLightGray)
                    }
                    .padding(14)
                    .background {
                        Capsule()
                            .foregroundStyle(RizzColors.rizzGray)
                            .padding(.trailing, -10)
                    }
                    .padding(.leading, 28)
                    .padding(.top, 8)
                    
                    Spacer()
                    
                    ActionButtonView(isShowingLabels: $isShowingLabels, isShowingButton: $isShowingActionMenu)
                }
                .padding(.top, 700)
            }
        }
    }
}

struct FloatingActionPreview: View {
    @State private var index: Int = 0
    
    var body: some View {
        MenuDockView(index: $index)
    }
}

struct ActionButtonView: View {
    @Binding var isShowingLabels: Bool
    @Binding var isShowingButton: Bool
    
    @State private var hasDisplayedARButton: Bool = false
    @State private var hasCreateEventButton: Bool = false
    @State private var hasMintNFTButton: Bool = false
    
    @State private var mintNFTPressed: Bool = false
    @State private var createEventPressed: Bool = false
    @State private var displayARPressed: Bool = false
    
    let size: CGFloat = 75
    
    @EnvironmentObject var authVM: AuthViewModel
    
    var body: some View {
        ZStack {
            if hasMintNFTButton {
                Button {
                    mintNFTPressed.toggle()
                } label: {
                    Image("NFTMintButton")
                        .resizable()
                        .scaledToFit()
                        .frame(width: size, height: size)
                }
                    .offset(x: 0, y: -270)
                    .padding(.trailing)
                
                NavigationLink(
                    isActive: $mintNFTPressed,
                    destination: { MintView().environmentObject(authVM) },
                    label: { }
                )
            }

            if hasCreateEventButton {
                Button {
                    createEventPressed.toggle()
                } label: {
                    Image("EventButton")
                        .resizable()
                        .scaledToFit()
                        .frame(width: size, height: size)
                }
                    .offset(x: 0, y: -185)
                    .padding(.trailing)
                
                NavigationLink(
                    isActive: $createEventPressed,
                    destination: { CreateEventView().environmentObject(authVM) },
                    label: { }
                )
            }
            
            if hasDisplayedARButton {
                Button {
                    displayARPressed.toggle()
                } label: {
                    Image("ARButton")
                        .resizable()
                        .scaledToFit()
                        .frame(width: size, height: size)
                }
                    .offset(x: 0, y: -100)
                    .padding(.trailing)
                
                NavigationLink(
                    isActive: $displayARPressed,
                    destination: { MainARView().environmentObject(authVM) },
                    label: { }
                )
            }
            
            Button {
                withAnimation(.easeInOut) {
                    isShowingButton.toggle()
                }
                
                withAnimation(.easeInOut) {
                    isShowingLabels.toggle()
                }
                
                if !hasMintNFTButton {
                    withAnimation(.easeInOut) {
                        hasDisplayedARButton.toggle()
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                        withAnimation(.easeInOut) {
                            hasCreateEventButton.toggle()
                        }
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                        withAnimation(.easeInOut) {
                            hasMintNFTButton.toggle()
                        }
                    }
                } else {
                    withAnimation(.easeInOut) {
                        hasMintNFTButton.toggle()
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
                        withAnimation(.easeInOut) {
                            hasCreateEventButton.toggle()
                        }
                    }
                    
                    DispatchQueue.main.asyncAfter(deadline: .now() + 0.2) {
                        withAnimation(.easeInOut) {
                            hasDisplayedARButton.toggle()
                        }
                    }
                }
            } label: {
                Image("AddButton")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 110, height: 110)
                    .padding(.trailing, 20)
            }
        }
    }
}

struct SubActionButtonView: View {
    let icon: String
    let iconType: IconType
    
    var body: some View {
        HStack {
            ZStack {
                LinearGradient(gradient: Gradient(colors: [RizzColors.rizzPurple, RizzColors.rizzGreen]), startPoint: .leading, endPoint: .trailing)
                    .clipShape(Circle())
                    .frame(width: 60, height: 60)
                
                switch iconType {
                case .sfSymbol:
                    Image(systemName: icon)
                        .resizable()
                        .scaledToFit()
                        .frame(width: 19, height: 19)
                        .foregroundStyle(RizzColors.rizzWhite)
                case .asset:
                    Image(icon)
                        .resizable()
                        .scaledToFit()
                        .frame(width: 19, height: 19)
                        .foregroundStyle(RizzColors.rizzWhite)
                }
            }
        }
    }
}

#Preview {
    FloatingActionPreview()
}

struct HelloView: View {
    var body: some View {
        Text("Hi")
    }
}

'''
'''--- App/App/Views/Main/Navigation Bar/HomeNavBarView.swift ---
//
//  HomeNavBarView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct HomeNavBarView: View {
    var body: some View {
        VStack {
            // Main Nav Bar
            MainNavBarView()
            
            // NFT Category
            NFTCategoryView()
        }
    }
}

#Preview {
    HomeNavBarView()
}

'''
'''--- App/App/Views/Main/Navigation Bar/MainNavBarView.swift ---
//
//  MainNavBarView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct MainNavBarView: View {
    var body: some View {
        HStack {
            // Networks View
            NetworkView()
            
            Spacer()
            
            // Profile Sidebar View
            ProfileSidebarView()
        }
    }
}

#Preview {
    MainNavBarView()
}

'''
'''--- App/App/Views/Main/Navigation Bar/NFTCategoryView.swift ---
//
//  NFTCategoryView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct NFTCategoryView: View {
    let names: [String] = ["Regular NFTs", "Music NFTs", "Movie NFTs", "AR NFTs"]
    let icons: [String] = ["square.grid.2x2.fill", "music.mic", "popcorn.fill", "arkit"]
    
    var body: some View {
        ScrollView(.horizontal, showsIndicators: false) {
            HStack {
                ForEach(0..<4, id:\.self) { idx in
                    ZStack {
                        Capsule()
                            .foregroundStyle(RizzColors.rizzGreen)
                            .frame(height: 50)
                        
                        HStack {
                            Image(systemName: icons[idx])
                                .foregroundStyle(RizzColors.rizzMatteBlack)
                            
                            Text(names[idx])
                                .foregroundStyle(RizzColors.rizzMatteBlack)
                                .bold()
                        }
                        .padding(.horizontal)
                    }
                }
            }
            .padding(.horizontal, 14)
        }
        .padding(.top, 4)
    }
}

#Preview {
    NFTCategoryView()
}

'''
'''--- App/App/Views/Main/Navigation Bar/NetworkView.swift ---
//
//  NetworkView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct NetworkView: View {
    @EnvironmentObject var viewModel: AuthViewModel
    
    var body: some View {
        ZStack {
            Capsule()
                .frame(width: 155, height: 50)
                .foregroundStyle(RizzColors.rizzBlack)
            
            HStack {
                Image("NearIcon")
                    .resizable()
                    .scaledToFit()
                    .foregroundStyle(RizzColors.rizzWhite)
                    .frame(width: 30, height: 30)
                    .clipShape(Circle())
                
                Text("\(viewModel.nfts.count) ")
                    .foregroundStyle(RizzColors.rizzWhite)
                    .bold()
                
                Text("\(viewModel.nfts.count == 1 ? "NFT" : "NFTs")")
                    .foregroundStyle(RizzColors.rizzWhite)
            }
        }
        .padding(.leading)
    }
}

#Preview {
    NetworkView()
}

'''
'''--- App/App/Views/Main/Navigation Bar/ProfileSidebarView.swift ---
//
//  ProfileSidebarView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct ProfileSidebarView: View {
    @EnvironmentObject var viewModel: AuthViewModel
    
    @State private var isShowingProfile: Bool = false
    
    var body: some View {
        HStack {
            Button {
                self.isShowingProfile = true
            } label: {
                Text(viewModel.owner ?? "Unknown")
                    .bold()
                    .foregroundStyle(.rizzWhite)
                
                Circle()
                    .frame(width: 50, height: 50)
                    .padding(.trailing)
            }
        }.sheet(isPresented: $isShowingProfile) {
            ProfileView().environmentObject(viewModel)
        }
    }
}

#Preview {
    ProfileSidebarView()
}

'''
'''--- App/App/Views/NFT/NFT Detail/NFTDetailView.swift ---
//
//  NFTDetailView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct NFTDetailView: View {
    let nft: NonFungibleTokens
    
    let side = UIScreen.main.bounds.width - 100

    var body: some View {
        ZStack {
            Rectangle()
                .ignoresSafeArea()
                .foregroundStyle(LinearGradient(
                    gradient: Gradient(colors: [Color.green, Color.black]),
                    startPoint: .top,
                    endPoint: .bottom
                ))

            ScrollView(showsIndicators: false) {
                VStack {
                    if nft.imageURL.contains("<svg") {
                        SVGWebView(svgString: nft.imageURL)
                            .clipShape(RoundedRectangle(cornerRadius: 12.0))
                            .frame(minWidth: side, maxHeight: side)
                    } else if let url = URL(string: nft.imageURL) {
                        AsyncImage(url: url) { image in
                            image.image?.resizable().scaledToFit()
                        }
                            .clipShape(RoundedRectangle(cornerRadius: 12.0))
                            .frame(minWidth: side, maxHeight: side)
                    } else {
                        RoundedRectangle(cornerRadius: 12.0)
                            .foregroundStyle(RizzColors.rizzGray)
                            .frame(width: side, height: side)
                    }

                    NFTDetailFeaturesView(nft: self.nft)

                    ZStack {
                        NFTTopDetailView(nft: self.nft)
                    }
                    .background {
                        RoundedRectangle(cornerRadius: 12.0)
                            .padding(.horizontal, 8)
                            .frame(width: UIScreen.main.bounds.width)
                            .foregroundStyle(RizzColors.rizzGray)
                    }
                }
            }
        }
    }
}

struct NFTDetailFeaturesView: View {
    let nft: NonFungibleTokens
    
    var body: some View {
        HStack {
            HStack {
                Capsule()
                    .foregroundStyle(.white.opacity(0.5))
                    .frame(width: 110, height: 45)
                    .overlay {
                        HStack {
                            Image(systemName: "arrowshape.turn.up.right.fill")
                            
                            Text("Send")
                                .bold()
                        }
                    }
                
                Spacer()
                
                Capsule()
                    .foregroundStyle(RizzColors.rizzPink)
                    .frame(width: 110, height: 45)
                    .overlay {
                        HStack {
                            Image(systemName: "arkit")
                            
                            Text("AR it")
                                .bold()
                        }
                    }
            }
        }
        .padding(.horizontal)
        .padding(.top, 10)
        .padding(.bottom, 20)
    }
}

'''
'''--- App/App/Views/NFT/NFT Detail/NFTTopDetailView.swift ---
//
//  NFTTopDetailView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct NFTTopDetailView: View {
    let nft: NonFungibleTokens
    
    var body: some View {
        HStack {
            VStack {
                HStack {
                    ZStack {
                        if let organization = nft.organization, let url = URL(string: organization) {
                            AsyncImage(url: url) { image in
                                image.image?.resizable().scaledToFit()
                            }
                            .frame(width: 50, height: 50)
                            .clipShape(Circle())
                        } else {
                            Image("DefaultOrg")
                                .resizable()
                                .scaledToFit()
                                .frame(width: 50, height: 50)
                                .clipShape(Circle())
                        }

                        Image("NearIcon")
                            .resizable()
                            .scaledToFit()
                            .frame(width: 16, height: 16)
                            .padding(.top, 30)
                            .padding(.leading, 30)
                            .clipShape(Circle())
                    }

                    VStack(alignment: .leading) {
                        Text(nft.name)
                            .font(.title2)
                            .bold()
                            .foregroundStyle(RizzColors.rizzWhite)
                            .padding(.leading, 15)

                        HStack {
                            Text(nft.collectionName)
                                .font(.title3)
                                .bold()
                                .foregroundStyle(RizzColors.rizzWhite)
                                .padding(.leading, 15)

                            Image(systemName: "checkmark.seal.fill")
                        }
                    }

                    Spacer()
                }
                .padding(.leading, 25)
                
                Text(nft.description)
                    .foregroundStyle(RizzColors.rizzWhite)
                    .padding(.horizontal, 40)
                    .padding(.bottom, 40)
                    .padding(.top, 30)
                
                Spacer()
            }
            .padding(.top, 20)
            .padding(.bottom, 8)
        }
    }
}

'''
'''--- App/App/Views/Onboarding/Preview Features/FeatureItemCarouselView.swift ---
//
//  FeatureItemCarouselView.swift
//  RizApp
//
//  Created by Marcus Arnett on 9/22/23.
//

import SwiftUI

struct FeatureItemCarouselView: View {
    @State private var index = 0
    
    var body: some View {
        ZStack {
            VStack {
                Spacer()
                
                ZStack {
                    RoundedRectangle(cornerRadius: 12.0)
                        .ignoresSafeArea()
                        .padding(.top, 10)
                        .frame(width: UIScreen.main.bounds.width, height: ((UIScreen.main.bounds.height / 3) + 10) * (index < 3 ? 1 : 2))
                        .foregroundStyle(RizzColors.rizzGray)
                }
            }
            
            TabView(selection: $index.animation()) {
                ForEach(0..<4, id:\.self) { index in
                    if index < 3 {
                        FeatureItemView(feature: RizzOnboarding.features[index])
                    } else {
                        LoginView(feature: RizzOnboarding.features[index])
                    }
                }
            }
            .tabViewStyle(PageTabViewStyle(indexDisplayMode: .always))
        }
    }
}

#Preview {
    FeatureItemCarouselView()
}

'''
'''--- App/App/Views/Onboarding/Preview Features/FeatureItemView.swift ---
//
//  FeatureItemView.swift
//  RizApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI

struct FeatureItemView: View {
    let feature: FeatureItem
    
    var body: some View {
        ZStack {
            VStack {
                Image(feature.icon)
                    .frame(width: 128, height: 128)
                    .padding(.top, 200)
                
                Spacer()
            }
            
            VStack {
                Text(feature.title)
                    .foregroundStyle(RizzColors.rizzWhite)
                    .font(.title)
                    .bold()
                    .padding(.top, feature.title == "Web3 at its core" ? 408 : 380)
                
                Text(feature.description)
                    .foregroundStyle(RizzColors.rizzWhite)
                    .multilineTextAlignment(.center)
                    .padding(.top, 4)
                    .font(.headline)
                    .padding(.horizontal, 30)
            }
            .padding(.top, 20)
        }
    }
}

#Preview {
    FeatureItemView(feature: RizzOnboarding.features[0])
}

'''
'''--- App/App/Views/Onboarding/Preview Features/LoginView.swift ---
//
//  ConnectWalletFeatureView.swift
//  RizzApp
//
//  Created by Marcus Arnett on 9/23/23.
//

import SwiftUI
import Firebase
import GoogleSignIn

struct LoginView: View {
    @EnvironmentObject var authViewModel: AuthViewModel
    
    @State private var showEmailLogin: Bool = false
    @State private var isShowingLoginButtons: Bool = false
    @State private var isShownLoginButtons: Bool = false
    
    let feature: FeatureItem
    
    var body: some View {
        ZStack {
            VStack {
                Spacer()
                
                ZStack {
                    Image("LoginLogo")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 140, height: 120)
                        .offset(y: -40)
                    
                    Text("See the Unseen – Where Your World Meets the Future")
                        .foregroundStyle(.rizzWhite)
                        .font(.system(size: 24))
                        .bold()
                        .padding(.top, 190)
                    
                    Text("Sign in using one of the methods below")
                        .multilineTextAlignment(.center)
                        .foregroundStyle(.rizzWhite)
                        .font(.system(size: 16))
                        .padding(.top, 310)
                        .padding(.horizontal, 30)
                }
                .offset(y: isShowingLoginButtons ? -290 : -30)
                .animation(.easeInOut, value: isShowingLoginButtons)
                
                if isShownLoginButtons {
                    ZStack {
                        Button {
                            self.showEmailLogin = true
                        } label: {
                            Text("Login Using Email")
                                .foregroundStyle(RizzColors.rizzGreen)
                                .font(.title2)
                                .bold()
                                .background {
                                    Capsule()
                                        .foregroundStyle(RizzColors.rizzMatteBlack)
                                        .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                                        .overlay {
                                            Capsule()
                                                .stroke(RizzColors.rizzGreen, lineWidth: 5)
                                        }
                                }
                        }
                        
                        Button {
                            self.authViewModel.signInWithGoogle()
                        } label: {
                            Text("Login Using Google")
                                .foregroundStyle(RizzColors.rizzGreen)
                                .font(.title2)
                                .bold()
                                .background {
                                    Capsule()
                                        .foregroundStyle(RizzColors.rizzMatteBlack)
                                        .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                                        .overlay {
                                            Capsule()
                                                .stroke(RizzColors.rizzGreen, lineWidth: 5)
                                        }
                                }
                        }
                        .offset(y: -70)
                    }
                    .offset(y: -160)
                    .animation(.easeInOut, value: isShownLoginButtons)
                }
            }
        }
        .onAppear {
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.15) {
                withAnimation {
                    self.isShowingLoginButtons = true
                }
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.55) {
                withAnimation {
                    self.isShownLoginButtons = true
                }
            }
        }
        .onDisappear {
            withAnimation {
                self.isShownLoginButtons = false
            }
            
            DispatchQueue.main.asyncAfter(deadline: .now() + 0.15) {
                withAnimation {
                    self.isShowingLoginButtons = false
                }
            }
        }
        .sheet(isPresented: $showEmailLogin) {
            EmailLoginView()
        }
        .sheet(isPresented: $authViewModel.isSigningUp) {
            CreateNearIDView()
        }
    }
}

#Preview {
    LoginView(feature: RizzOnboarding.features[3])
}

struct CreateNearIDView: View {
    @EnvironmentObject var viewModel: AuthViewModel
    
    @State private var hasSubmitted: Bool = false
    
    @State private var nearId: String = ""
    
    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzMatteBlack)
                .ignoresSafeArea()
            
            VStack {
                Text("Welcome to PicAppear!")
                    .bold()
                    .font(.title)
                    .foregroundStyle(.green)
                
                InputFieldView(text: $nearId, name: "Enter your new NEAR ID")
                    .padding(.bottom, 30)
                
                Button {
                    self.hasSubmitted = true
                    viewModel.createNearID(id: self.nearId.lowercased())
                } label: {
                    Text("Create Account")
                        .foregroundStyle(RizzColors.rizzGreen)
                        .font(.title2)
                        .bold()
                        .background {
                            Capsule()
                                .foregroundStyle(RizzColors.rizzMatteBlack)
                                .frame(width: UIScreen.main.bounds.width - 60, height: 50)
                                .overlay {
                                    Capsule()
                                        .stroke(RizzColors.rizzGreen, lineWidth: 5)
                                }
                        }
                }
            }
        }
    }
}

struct EmailLoginView: View {
    @State private var email = ""
    @State private var password = ""
    @State private var logMessage: String?

    @EnvironmentObject var viewModel: AuthViewModel

    var body: some View {
        ZStack {
            RizzColors.rizzGray
                .ignoresSafeArea()

            VStack {
                Text("Welcome to Web3")
                    .font(.system(size: 24))
                    .bold()
                    .foregroundStyle(.white)
                    .padding(.bottom, 20)

                VStack(spacing: 20) {
                  // Email field
                  CustomField(text: $email, placeholder: Text("Email"), imageName: "envelope", isSecure: false)
                  
                  // Password field
                  CustomField(text: $password, placeholder: Text("Password"), imageName: nil, isSecure: true)
                }
                
                // Sign in
                Button {
                    viewModel.login(withEmail: email, password: password) { logResult in
                        self.logMessage = logResult
                    }
                } label: {
                    Text("Sign In")
                        .font(.headline)
                        .foregroundColor(.white)
                        .frame(width: 360, height: 50)
                        .background(.rizzMatteBlack)
                        .clipShape(Capsule())
                        .padding()
                }
                .offset(y: 50)

                Spacer()

                // Sign up button
                NavigationLink(destination: EmptyView()
                    .navigationBarBackButtonHidden(true)) {
                        HStack {
                            Text("Don't have an account?")
                                .font(.system(size: 16))
                                .foregroundStyle(.rizzWhite)
                            
                            Text("Sign Up")
                                .font(.system(size: 16, weight: .semibold))
                                .foregroundStyle(.rizzWhite)
                        }
                    }
                    .padding(.bottom, 16)
                    .background {
                        Capsule()
                            .foregroundStyle(.rizzGray)
                            .opacity(0.5)
                            .padding(-14)
                            .offset(y: -8)
                    }
            }
            .padding(.top, 48)
        }
    }
}

struct RegistrationView: View {
    @State private var email = ""
    @State private var password = ""
    @State private var username = ""
    
    @EnvironmentObject var viewModel: AuthViewModel
    
    var body: some View {
        ZStack {
            
        }
    }
}

struct CustomField: View {
    @Binding var text: String
    
    let placeholder: Text
    let imageName: String?
    let isSecure: Bool

    var body: some View {
        ZStack(alignment: .leading) {
            if text.isEmpty {
                placeholder
                    .padding(.leading, 30)
            }
            
            HStack {
                Image(systemName: imageName ?? "lock")
                    .resizable()
                    .scaledToFit()
                    .frame(width: 20, height: 20)
                
                if isSecure {
                    SecureField("", text: $text)
                } else {
                    TextField("", text: $text)
                }
            }
        }
        .padding()
        .background(.rizzWhite.opacity(0.15))
        .cornerRadius(10)
        .foregroundColor(.rizzWhite.opacity(0.15))
        .padding(.horizontal, 32)
    }
}

'''
'''--- App/App/Views/Onboarding/Preview Features/PreviewFeaturesView.swift ---
//
//  PreviewFeaturesView.swift
//  RizApp
//
//  Created by Marcus Arnett on 9/22/23.
//

import SwiftUI

struct PreviewFeaturesView: View {
    var body: some View {
        ZStack {
            Image("EmailLoginBackground")
                .resizable()
                .ignoresSafeArea()
            
            FeatureItemCarouselView()
        }
    }
}

#Preview {
    PreviewFeaturesView()
}

'''
'''--- App/App/Views/Onboarding/SplashScreenView.swift ---
//
//  SplashScreenView.swift
//  RizApp
//
//  Created by Marcus Arnett on 9/22/23.
//

import SwiftUI

struct SplashScreenView: View {
    var body: some View {
        ZStack {
            Rectangle()
                .foregroundStyle(RizzColors.rizzBlack)
                .ignoresSafeArea()
            
            VStack {
                VStack {
                    Image("RIZZLogo")
                        .resizable()
                        .scaledToFit()
                        .frame(width: 275, height: 200)
                }
                    .padding(.bottom, 320)
                
                Text("OpenDive Technologies Copyright 2023")
                    .foregroundStyle(RizzColors.rizzWhite)
            }
        }
    }
}

#Preview {
    SplashScreenView()
}

'''
'''--- INDEXER_QUERY.yml ---

curl --location --request POST  'https://graph.mintbase.xyz/testnet' \
--header 'mb-api-key: anon' \
--header 'Content-Type: application/json' \
--data-raw '{"query":"query MyQuery {\n  mb_views_nft_tokens(\n where: {owner: {_eq: \"irvin123.testnet\"}}\n limit: 30\n order_by: {last_transfer_timestamp: desc}\n  ) {\n nft_contract_id\n title\n description\n media\n last_transfer_receipt_id\n }\n}\n", "variables":null, "operationName":"MyQuery"}'
'''
'''--- README.md ---
# NEARCON23
Hack for NEARCON23

'''
'''--- custom-auth/.env ---
NEXT_PUBLIC_NETWORK_ID=mainnet
NEXT_TESTNET_NETWORK_ID=testnet
RPC_MAINNET=https://rpc.near.org
RPC_TESTNET=https://rpc.testnet.near.org
NEXT_PUBLIC_HOSTNAME=https://near.org
RELAYER_PRIVATE_KEY_NEAR_MAINNET=ed25519:39iCuBX48AJoF8EMtpkX3tm1YYi3iMhV2LkakSiggJKqjCJA6r6XJKLberBKozxJnNeQ1c73b69eVMg7Ew483tkK
RELAYER_PRIVATE_KEY_NEAR_TESTNET=ed25519:28cQnQo7usodvDDZqxqkZsuwFcNaQk1PMbQJc226rFKxxJAn9k4Qt5ewfE6iXgtqSzVA8YRW8RJaCkKBrodB1GfD
MARCODOTIO_PRIVATE_KEY_NEAR_MAINNET=ed25519:5DbY5UFLbZP6tNrydabaidJ1MkjaKsGkGbWQfgeq8ZxNbGwmxCG5TvBsncNxYJgoESYGKiLAAu4MFswtRdnJKLB8
NEXT_PUBLIC_RELAYER_ACCOUNT_ID_NEAR_MAINNET=ncon23bot.near
NEXT_PUBLIC_RELAYER_ACCOUNT_ID_NEAR_TESTNET=irvin1.testnet
JWT_PINATA_CLOUD=Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySW5mb3JtYXRpb24iOnsiaWQiOiI4NzJiNmE0YS0xNzBkLTQzNDYtODMwMS1lYzA4YTUxNTk0N2UiLCJlbWFpbCI6InBpbmF0YUBtaW5vcml0eXByb2dyYW1tZXJzLm9yZyIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJwaW5fcG9saWN5Ijp7InJlZ2lvbnMiOlt7ImlkIjoiTllDMSIsImRlc2lyZWRSZXBsaWNhdGlvbkNvdW50IjoxfV0sInZlcnNpb24iOjF9LCJtZmFfZW5hYmxlZCI6ZmFsc2UsInN0YXR1cyI6IkFDVElWRSJ9LCJhdXRoZW50aWNhdGlvblR5cGUiOiJzY29wZWRLZXkiLCJzY29wZWRLZXlLZXkiOiJlNjE3YjU1NDY1M2Y2NWZjY2RmYiIsInNjb3BlZEtleVNlY3JldCI6ImE3ZjgzYTcyOGJlMzYxYjMxZmYyZWUxN2EwMWExZTcyNWI0OWE2ZGMyNjljYzcyYzIwZTk2YjYwMWRiZGI3ZjgiLCJpYXQiOjE2OTc2MjY5MDV9.5O4KzsBF8JYMIGDLC0vzc4YeGFeBeOPudYHr7YdvhVM

'''
'''--- custom-auth/README.md ---
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

'''
'''--- custom-auth/app/api/accountCreate/route.ts ---
import { NextResponse } from 'next/server';
import { KeyPair } from '@near-js/crypto';
import { submitTransaction, connect } from '../../../utils/meta-transactions';
import { InMemoryKeyStore } from '@near-js/keystores';
import { actionCreators } from "@near-js/transactions";
import BN from "bn.js";

// const { parseSeedPhrase, generateSeedPhrase } = require('near-seed-phrase');
const sha256 = require("js-sha256");
const bs58 = require('bs58');
const { sign } = require('tweetnacl');

export async function POST(req: Request) {
    const body = await req.json();

    /**
     * accountId -- the user's desired acct id, e.g. [bob].near
     * userID -- the unique GoogleAuth id retrieved after signing in
     */
    const { accountId, userID } = body;
    console.log("ACCOUNT ID: " + accountId);
    console.log("USER ID: " + userID);

    /////////////////////////////////////////////////////////////////
    // STEP 1: Take the user ID, hash it and use it as randomness
    var hash = sha256.create();
    hash.update(userID);
    var hex = hash.hex();
    var arr = hash.array();

    var b58str = bs58.encode(arr);
    var b58Arr = new Uint8Array(bs58.decode(b58str));

    /////////////////////////////////////////////////////////////////
    // STEP X: Generate KeyPairs
    const key = sign.keyPair.fromSeed(b58Arr);

    const publicKey = new Uint8Array(key.publicKey);
    const secretKey = new Uint8Array(key.secretKey)

    console.log("PUBLIC KEY: " + publicKey);
    console.log("PRIVATE KEY: " + secretKey);

    var pubKeyStr = "ed25519:" + bs58.encode(publicKey);
    var privKeyStr = "ed25519:" + bs58.encode(secretKey);

    console.log("PUB: " + pubKeyStr);
    console.log("PRIV:" + privKeyStr);

    /////////////////////////////////////////////////////////////////
    // STEP X: Create keystore for relayer
    console.log("SETTING KEYSTORE ....");
    const keyStore = new InMemoryKeyStore();
    // const { seedPhrase, publicKey, secretKey } = generateSeedPhrase()

    const marcodotioPk = process.env.MARCODOTIO_PRIVATE_KEY_NEAR_MAINNET as string;

    await keyStore.setKey(
        process.env.NEXT_PUBLIC_NETWORK_ID as string,
        "marcodotio.near",
        KeyPair.fromString(marcodotioPk)
    );

    /////////////////////////////////////////////////////////////////
    // STEP X: Connect to relayer
    console.log("CONNECTING marcodotio.near account ....");
    const signerAccount = await connect(
        "marcodotio.near",
        keyStore,
        process.env.NEXT_PUBLIC_NETWORK_ID as string
    );

    const gas = "200000000000000";
    const deposit = "30000000000000000000000";
    const args: any = {
        "new_account_id": accountId,
        "new_public_key": pubKeyStr
    }

    /////////////////////////////////////////////////////////////////
    // STEP X: Build `create_account` transaction
    console.log("PREPARING FUNCTION CALL ....");
    const action = actionCreators.functionCall(
        "create_account",
        args,
        new BN(gas),
        new BN(deposit)
    );

    /////////////////////////////////////////////////////////////////
    // STEP X: Use relayer to create named account
    console.log("SIGNING DELEGATE ....");
    console.log(`DEBUG: ACTION - ${JSON.stringify(action, null, 2)}`)
    const deserializeDelegate = await signerAccount.signedDelegate({
        actions: [action],
        blockHeightTtl: 600,
        receiverId: "near", // account naming service contract
    });

    try {
        console.log("SUBMITTING TRANSACTION ....");

        const result = await submitTransaction({
            delegate: deserializeDelegate,
            network: process.env.NEXT_PUBLIC_NETWORK_ID as string,
        });

        console.log("TRANSACTION SUBMITTED ....");

        return NextResponse.json(
            // { privateKey: secretKey, result },
            { privateKey: privKeyStr, result },
            {
                status: 200,
                headers: {
                    'content-type': 'text/plain',
                },
            },
        );

    } catch (error: any) {
        console.log("ERROR:" + error);
        return NextResponse.json(
            { error },
            {
                status: 400,
                headers: {
                    'content-type': 'text/plain',
                },
            },
        );
    }
}
'''
'''--- custom-auth/app/api/createUserAndGetToken/route.ts ---
import type { NextApiRequest, NextApiResponse } from 'next';
import { NextResponse } from 'next/server';
import { FirebaseError } from 'firebase/app';
import dotenv from "dotenv";

import * as admin from 'firebase-admin';

// const serviceAccountJsonPath = process.env.SERVICE_ACCOUNT_JSON;
import serviceAccount from '../nearcon23-firebase-adminsdk-d93ck-0d4094232f.json';

function getApp() {
  let app;
  try {
    app = admin.initializeApp(
      {
        credential: admin.credential.cert(serviceAccount as admin.ServiceAccount),
      },
      'my-app',
    );
  } catch (error) {
    app = admin.app('my-app');
  }
  return app;
}

// export default async (req: NextApiRequest, res: NextApiResponse) => {
// const auth = getApp().auth();
//   type SignUpData = {
//     email: string;
//     password: string;
//   };
//   const body = req.body as SignUpData;
// //   const body = req.body;
//   try {
//     const user = await auth.createUser(body);
//     const token = await auth.createCustomToken(user.uid, {
//       isAdmin: true,
//      //... add other custom claims as need be
//     });
//     console.log("TOKEN RESPONSE: " + token);
//     res.send({ token });
//   } catch (error) {
//     if (error instanceof FirebaseError) res.status(400).json({ message: error.message });
//   }
// };

export async function POST(req: Request) {

  const auth = getApp().auth();
  // type SignUpData = {
  //   email: string;
  //   password: string;
  // };

  const body = await req.json();
  const { email, password } = body;

  try {
    const user = await auth.createUser(body);
    const token = await auth.createCustomToken(user.uid, {
      isAdmin: true,
      //... add other custom claims as need be
    });
    console.log("TOKEN RESPONSE: " + token);

    return NextResponse.json(
      { token },
      {
        status: 200,
        headers: {
          'content-type': 'text/plain',
        },
      },
    );
  } catch (error) {
    // if (error instanceof FirebaseError) res.status(400).json({ message: error.message });
    return NextResponse.json(
      { error },
      {
        status: 400,
        headers: {
          'content-type': 'text/plain',
        },
      },
    );
  }
}
'''
'''--- custom-auth/app/api/hashId/route.ts ---
import { NextResponse } from 'next/server';
import { KeyPair, KeyPairEd25519 } from '@near-js/crypto';
import { createAccount, submitTransaction, connect } from '../../../utils/meta-transactions';
import { InMemoryKeyStore } from '@near-js/keystores';
import { actionCreators } from "@near-js/transactions";
const { parseSeedPhrase, generateSeedPhrase } = require('near-seed-phrase');
const sha256 = require("js-sha256");
import BN from "bn.js";
const bs58 = require('bs58')
const { sign } = require('tweetnacl');

export async function GET() {
    // const res = await fetch('https://data.mongodb-api.com/...', {
    //   headers: {
    //     'Content-Type': 'application/json',
    //     'API-Key': process.env.DATA_API_KEY,
    //   },
    // })

    var hash = sha256.create();
    hash.update("106286931906362609286");
    var arr = hash.array();
    console.log("ARR LENGTH: " + arr.length);
    var hex = hash.hex();
    console.log("HEX: " + hex);

    var bs58_string = bs58.encode(arr);
    // bs58_string += bs58_string;
    // bs58_string = "ED25519:" + bs58_string;

    console.log("BASE58: " + bs58_string);
    const utf8EncodeText = new TextEncoder();
    const byteArray = utf8EncodeText.encode(bs58_string);

    var b58Arr = new Uint8Array(bs58.decode(bs58_string));
    console.log("b58Arr LENGTH: " + b58Arr.length);

    console.log("byteArray LENGTH: " + byteArray.length);
    var uint8arr = Uint8Array.from(arr);
    console.log("uint8arr LENGTH: " + uint8arr.length);

    // const key = sign.keyPair.fromSeed(byteArray);
    // const key = sign.keyPair.fromSecretKey(b58Arr);
    const key = sign.keyPair.fromSeed(b58Arr);

    // const keyPair = KeyPair.fromString(bs58_string);
    // const keyPair = new KeyPairEd25519(bs58_string);
    // const keyPair = new KeyPairEd25519(arr);

    const publicKey = new Uint8Array(key.publicKey);
    const secretKey = new Uint8Array(key.secretKey)

    console.log("PUBLIC KEY: " + publicKey);
    console.log("PRIVATE KEY: " + secretKey);

    var pubKeyStr = "ED25519:" + bs58.encode(publicKey);
    var privKeyStr = "ED25519:" + bs58.encode(secretKey);

    console.log("PUB: " + pubKeyStr);
    console.log("PRIV:" + privKeyStr);

    const data = await Response.json(bs58_string);
   
    return Response.json({ data })
  }
'''
'''--- custom-auth/app/api/nearcon23-firebase-adminsdk-d93ck-0d4094232f.json ---
{
  "type": "service_account",
  "project_id": "nearcon23",
  "private_key_id": "0d4094232f120cb73cfb7b6227efdf8e91f3465d",
  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQCr4xgz8psrlvyH\n4kbwxMWj4/ymr5XnW/7jy7r3ei3csylNfP27ISXkRkfdPKLiUW+hApqwSYUvMKTA\nY1uauXXwvbfcPAwgxMCj5AZ1wooRJ/bOrztGbM5QpVaQpi+ERDebAG88CuZj+LsM\n+UmMVuIkkCeReEwFdz8zVA3Aadj0I7fhD7QYGa8cJ14fNA3PiXR7rkaseQF5cTj8\nB+z/G5Iujln86EveTFpTJKwTrQLGUqAU7Lfsp+Gn9ME2u1Zbzwy+rQZktNHwB+s1\nh6iHe45n3d00Lhbw/ffNG1qjifyExI/6UT98/Hqqa8lX+USF+Ms9HX+q1/ByGUkO\nHWWHn2tDAgMBAAECggEAK3+P222U2SYfiB+6Rin1vjDu+hvLOr5sNaeUDBbOTmDE\nngh4iYes+CTVAObcbZugPUXUcbJZUwTjXJCIWRKAB0lrov9LLmu8OH13KQvvNsI/\nUjTEMmFMoNoGmxqDQdylmcM1YyN7BGeopnLbqvk9x3T3nner/WIdC1dFF6Fxtu58\ny5ZwTVAhBERlxdcLqrIvJvrntZip8VwhoRV0+ilcgGujOuEpdVD02s7Y2nwZDue3\ntKipox3jEI0xaAoECXIEFu1/93DLPgLpzKjd/v1hXR38lxGaYsC30z1Ra5Bm1Ck/\nVWAUcKcs/dqPVBgmZeBE1Cxa9kVk27aH6dNn+C8pQQKBgQDbzyuodCGavm9MH53Z\njP4b5Xit/yMSm72LAyAKUReRJUG0z6JCj6pnfkGtJwruhsEtMAQAx3aoy8oiwgYS\nFDjy/KyUaIoY70fJuD3kK6jISZUqmzyNw8Lb8uw+6o4PUTXkeMG7uhxc8WLfJycu\nMCrDv4yYpqkVuikxuNCcvnjxoQKBgQDIMAhxxDkO+RKBz3oGupL5PQGFd6kDx+vJ\nzKaHsUxXM49dCcP8ZUUxdSThXCgFaiSiMtZ/Ldf0fSQHUm83+GaU252ktRrcF1SX\n+ty4NopcISo/ZoMmCyW8qVAFtpQxaxALNn2grSHwazMoyZxRPLYrmmGq0rjFD4dx\nfLupYWu6YwKBgQCWMACpkefgHpxXTAcDvYVmtCz33istrMIeuJzsz6mln+o8S96X\nUihhnG/tio66mdJmOLeTfLZD8TKE+0NAmRasWB7nLGKnVN8dIkkPnREvAK/uM7F1\nP7vlox7ugj9ckeWb3TKqPSjiDIC87rijo3+kzj2Xk9BWKyO4eIn5f1+N4QKBgQCT\nkDyZR/BbZiRLRdoIXb17NYoKjTMsE1Fulolm2r2QRfR2u30Zbrj7hQNjj5/8pcpN\nObY9V1ip4xkMwKo1EsjjD6P7xnf/Jr93rDbJH4ML+HKA+5rPD0aI9DGFlJlWeDoC\nWe9u4lBzPUIf3cV5aIxMReeamOwUbqcDc9ONPr+/SwKBgQDCpj9gdiDg5TeDHuCO\nlXQ3ouYXGwKq6BAck+H5/3O2Eoe2xwqiz+gWdHWxV/tl7W1GOc1Plzn3Y+FkrneL\nXxPaaMTR8oMvHct7cNFPKlNEqMH3SEs1yh2hkGwDpXpFR4bVwvhtK81uzz/roYlH\n8Ap5Bf6ZYPmP5+/Zc335sj6FXg==\n-----END PRIVATE KEY-----\n",
  "client_email": "firebase-adminsdk-d93ck@nearcon23.iam.gserviceaccount.com",
  "client_id": "115003256695134548593",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-d93ck%40nearcon23.iam.gserviceaccount.com",
  "universe_domain": "googleapis.com"
}

'''
'''--- custom-auth/app/api/nftMint/route.ts ---
import { NextResponse } from 'next/server';
import { KeyPair } from "@near-js/crypto";
import { InMemoryKeyStore } from "@near-js/keystores";
import { actionCreators } from "@near-js/transactions";
import axios from "axios";
import BN from "bn.js";
import { connect, submitTransaction } from "../../../utils/meta-transactions";

export async function POST(req: Request) {
    const body = await req.json();
    const {
        accountId,
        title,
        description,
        // cid, 
        image_uri,
        privateKey,
        receiverNFT
    } = body;

    console.log(
        "ACCOUNT ID: " + accountId + 
        " TITLE: " + title + 
        " DESCRIPTION: " + description + 
        " IMAGE_URI: " + image_uri + 
        " PRIVATE KEY: " + privateKey +
        " RECEIVER NFT: " + receiverNFT);

    const keyStore = new InMemoryKeyStore();

    const keypair = KeyPair.fromString(privateKey)

    var pubKey = keypair.getPublicKey();
    var kpStr = keypair.toString();

    console.log("PUB KEY: " + pubKey);
    console.log("KPStr: " + kpStr);
    
    await keyStore.setKey(
        process.env.NEXT_PUBLIC_NETWORK_ID as string,
        accountId,
        // "marcodotio.near",
        keypair
    );

    console.log(`DEBUG: KEYPAIR - ${keypair}`);
    console.log(`DEBUG: NEXT ID - ${process.env.NEXT_PUBLIC_NETWORK_ID}`);

    const signerAccount = await connect(
        `${accountId}`,
        // "marcodotio.near",
        keyStore,
        `${process.env.NEXT_PUBLIC_NETWORK_ID}`
    );

    console.log(`DEBUG: ACCOUNT ID - ${accountId}`);
    console.log(`DEBUG: CONNECT RESULT - ${signerAccount}`);

    const gas = "300000000000000";
    const deposit = "20000000000000000000000";

    const data = JSON.stringify({
        "name": title,
        "description": description,
        "image": image_uri,
        "image_integrity": "r+xt9t8/MXEvI5fg4JIcb4+iskjgljeb2KWafdaRHoU=",
        "image_mimetype": "image/png",
        "animation_url": "",
        "animation_url_integrity": "sha256-",
        "animation_url_mimetype": "",
        "properties": [
            {
                "trait_type": "File Type",
                "value": "image/png"
            }
        ]
    });
    console.log(`DEBUG: JWT API - ${process.env.JWT_PINATA_CLOUD}`);
    const config = {
        method: 'post',
        url: 'https://api.pinata.cloud/pinning/pinJSONToIPFS',
        headers: {
            "Content-Type": "application/json",
            Authorization: `${process.env.JWT_PINATA_CLOUD}`
        },
        data: data
    };

    const ipfsJson: any = await axios(config);
    console.log("IPF ===================================");
    console.log(`DEBUG: IPFSJSON - ${ipfsJson}`);
    console.log(ipfsJson.data);
    const args: object = {
        token_id: `${Date.now()}`,
        metadata: {
            title: `${title}`,
            description: `${description}`,
            media: `${image_uri}`,
            reference: `ipfs/${ipfsJson.data.IpfsHash}`,
        },
        receiver_id: `${receiverNFT}`
    }
    console.log("/IPF ===================================");
    
    console.log("ARGS: " + JSON.stringify(args));

    const action = actionCreators.functionCall(
        "nft_mint",
        args,
        new BN(gas),
        new BN(deposit)
    );

    console.log("SIGNING DELEGATE ...");
    console.log(`DEBUG: MINT ADDRESS - ${process.env.MINT_ADDRESS}`);
    const delegate = await signerAccount.signedDelegate({
        actions: [action],
        blockHeightTtl: 600,
        // receiverId: process.env.NEXT_PUBLIC_NETWORK_ID as string == "mainnet" ? process.env.GENADROP_MAINNET as string : process.env.GENADROP_TESTNET as string,
        receiverId: "marcodotio.near"
    });

    // return NextResponse.json(
    //     "TEST",
    //     {
    //         status: 200,
    //         headers: {
    //             'content-type': 'text/plain',
    //         },
    //     },
    // );

    console.log("SUBMITTING Transactions ...");
    try {
        const result = await submitTransaction({
            delegate: delegate,
            network: process.env.NEXT_PUBLIC_NETWORK_ID as string,
        });
        return NextResponse.json(
            { result },
            {
                status: 200,
                headers: {
                    'content-type': 'text/plain',
                },
            },
        );
    } catch (error) {
        console.log("ERROR SUBMITTING Transactions ... " + error);
        return NextResponse.json(
            { error },
            {
                status: 400,
                headers: {
                    'content-type': 'text/plain',
                },
            },
        );
    }
}
'''
'''--- custom-auth/app/api/relay/route.ts ---
// import { SignedDelegate } from '@near-js/transactions';
// import { deserialize } from 'borsh';
// import { NextResponse } from 'next/server';

// import { createAccount, submitTransaction, connect } from '../../../utils/meta-transactions';
// import { SCHEMA } from '@/helper/utils/near/types/schema';

// export async function POST(req: Request) {
//   const body = await req.json();

//   const deserializeDelegate = deserialize(SCHEMA, SignedDelegate, Buffer.from(new Uint8Array(body)));

//   const result = await submitTransaction({
//     delegate: deserializeDelegate,
//     network: process.env.NEXT_PUBLIC_NETWORK_ID as string,
//   });

//   return NextResponse.json(
//     { result },
//     {
//       status: 200,
//       headers: {
//         'content-type': 'application/json',
//       },
//     },
//   );
// }

import { submitTransaction } from "@/utils/meta-transactions";
import { SCHEMA } from "@/utils/schema";
import { SignedDelegate } from "@near-js/transactions";
import { deserialize } from "borsh";
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  const body = await req.json();
  const { delegated, network } = body;

  const deserializeDelegate = deserialize(
    SCHEMA,
    SignedDelegate,
    Buffer.from(new Uint8Array(delegated))
  );

  const result = await submitTransaction({
    delegate: deserializeDelegate,
    network,
  });

  return NextResponse.json(
    { result },
    {
      status: 200,
      headers: {
        "content-type": "application/json",
      },
    }
  );
}
'''
'''--- custom-auth/app/firebase.ts ---
import { initializeApp } from 'firebase/app';
import { getAuth } from 'firebase/auth';
const firebaseConfig = {
    apiKey: "AIzaSyDXe3ilwWOJbV785682ueePJaPz-D61Cp0",
    authDomain: "nearcon23.firebaseapp.com",
    projectId: "nearcon23",
    storageBucket: "nearcon23.appspot.com",
    messagingSenderId: "973691889479",
    appId: "1:973691889479:web:c56369ba042973745fce62",
    measurementId: "G-W8VEG87F9Y"
};
const app = initializeApp(firebaseConfig);
export const auth = getAuth(app)
'''
'''--- custom-auth/app/globals.css ---
:root {
  --max-width: 1100px;
  --border-radius: 12px;
  --font-mono: ui-monospace, Menlo, Monaco, 'Cascadia Mono', 'Segoe UI Mono',
    'Roboto Mono', 'Oxygen Mono', 'Ubuntu Monospace', 'Source Code Pro',
    'Fira Mono', 'Droid Sans Mono', 'Courier New', monospace;

  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;

  --primary-glow: conic-gradient(
    from 180deg at 50% 50%,
    #16abff33 0deg,
    #0885ff33 55deg,
    #54d6ff33 120deg,
    #0071ff33 160deg,
    transparent 360deg
  );
  --secondary-glow: radial-gradient(
    rgba(255, 255, 255, 1),
    rgba(255, 255, 255, 0)
  );

  --tile-start-rgb: 239, 245, 249;
  --tile-end-rgb: 228, 232, 233;
  --tile-border: conic-gradient(
    #00000080,
    #00000040,
    #00000030,
    #00000020,
    #00000010,
    #00000010,
    #00000080
  );

  --callout-rgb: 238, 240, 241;
  --callout-border-rgb: 172, 175, 176;
  --card-rgb: 180, 185, 188;
  --card-border-rgb: 131, 134, 135;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;

    --primary-glow: radial-gradient(rgba(1, 65, 255, 0.4), rgba(1, 65, 255, 0));
    --secondary-glow: linear-gradient(
      to bottom right,
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0),
      rgba(1, 65, 255, 0.3)
    );

    --tile-start-rgb: 2, 13, 46;
    --tile-end-rgb: 2, 5, 19;
    --tile-border: conic-gradient(
      #ffffff80,
      #ffffff40,
      #ffffff30,
      #ffffff20,
      #ffffff10,
      #ffffff10,
      #ffffff80
    );

    --callout-rgb: 20, 20, 20;
    --callout-border-rgb: 108, 108, 108;
    --card-rgb: 100, 100, 100;
    --card-border-rgb: 200, 200, 200;
  }
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

a {
  color: inherit;
  text-decoration: none;
}

@media (prefers-color-scheme: dark) {
  html {
    color-scheme: dark;
  }
}

'''
'''--- custom-auth/app/page.module.css ---
.main {
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
  padding: 6rem;
  min-height: 100vh;
}

.description {
  display: inherit;
  justify-content: inherit;
  align-items: inherit;
  font-size: 0.85rem;
  max-width: var(--max-width);
  width: 100%;
  z-index: 2;
  font-family: var(--font-mono);
}

.description a {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

.description p {
  position: relative;
  margin: 0;
  padding: 1rem;
  background-color: rgba(var(--callout-rgb), 0.5);
  border: 1px solid rgba(var(--callout-border-rgb), 0.3);
  border-radius: var(--border-radius);
}

.code {
  font-weight: 700;
  font-family: var(--font-mono);
}

.grid {
  display: grid;
  grid-template-columns: repeat(4, minmax(25%, auto));
  max-width: 100%;
  width: var(--max-width);
}

.card {
  padding: 1rem 1.2rem;
  border-radius: var(--border-radius);
  background: rgba(var(--card-rgb), 0);
  border: 1px solid rgba(var(--card-border-rgb), 0);
  transition: background 200ms, border 200ms;
}

.card span {
  display: inline-block;
  transition: transform 200ms;
}

.card h2 {
  font-weight: 600;
  margin-bottom: 0.7rem;
}

.card p {
  margin: 0;
  opacity: 0.6;
  font-size: 0.9rem;
  line-height: 1.5;
  max-width: 30ch;
}

.center {
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  padding: 4rem 0;
}

.center::before {
  background: var(--secondary-glow);
  border-radius: 50%;
  width: 480px;
  height: 360px;
  margin-left: -400px;
}

.center::after {
  background: var(--primary-glow);
  width: 240px;
  height: 180px;
  z-index: -1;
}

.center::before,
.center::after {
  content: '';
  left: 50%;
  position: absolute;
  filter: blur(45px);
  transform: translateZ(0);
}

.logo {
  position: relative;
}
/* Enable hover only on non-touch devices */
@media (hover: hover) and (pointer: fine) {
  .card:hover {
    background: rgba(var(--card-rgb), 0.1);
    border: 1px solid rgba(var(--card-border-rgb), 0.15);
  }

  .card:hover span {
    transform: translateX(4px);
  }
}

@media (prefers-reduced-motion) {
  .card:hover span {
    transform: none;
  }
}

/* Mobile */
@media (max-width: 700px) {
  .content {
    padding: 4rem;
  }

  .grid {
    grid-template-columns: 1fr;
    margin-bottom: 120px;
    max-width: 320px;
    text-align: center;
  }

  .card {
    padding: 1rem 2.5rem;
  }

  .card h2 {
    margin-bottom: 0.5rem;
  }

  .center {
    padding: 8rem 0 6rem;
  }

  .center::before {
    transform: none;
    height: 300px;
  }

  .description {
    font-size: 0.8rem;
  }

  .description a {
    padding: 1rem;
  }

  .description p,
  .description div {
    display: flex;
    justify-content: center;
    position: fixed;
    width: 100%;
  }

  .description p {
    align-items: center;
    inset: 0 0 auto;
    padding: 2rem 1rem 1.4rem;
    border-radius: 0;
    border: none;
    border-bottom: 1px solid rgba(var(--callout-border-rgb), 0.25);
    background: linear-gradient(
      to bottom,
      rgba(var(--background-start-rgb), 1),
      rgba(var(--callout-rgb), 0.5)
    );
    background-clip: padding-box;
    backdrop-filter: blur(24px);
  }

  .description div {
    align-items: flex-end;
    pointer-events: none;
    inset: auto 0 0;
    padding: 2rem;
    height: 200px;
    background: linear-gradient(
      to bottom,
      transparent 0%,
      rgb(var(--background-end-rgb)) 40%
    );
    z-index: 1;
  }
}

/* Tablet and Smaller Desktop */
@media (min-width: 701px) and (max-width: 1120px) {
  .grid {
    grid-template-columns: repeat(2, 50%);
  }
}

@media (prefers-color-scheme: dark) {
  .vercelLogo {
    filter: invert(1);
  }

  .logo {
    filter: invert(1) drop-shadow(0 0 0.3rem #ffffff70);
  }
}

@keyframes rotate {
  from {
    transform: rotate(360deg);
  }
  to {
    transform: rotate(0deg);
  }
}

'''
'''--- custom-auth/next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {}

module.exports = nextConfig

'''
'''--- custom-auth/package-lock.json ---
{
  "name": "custom-auth",
  "version": "0.1.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "custom-auth",
      "version": "0.1.0",
      "dependencies": {
        "@near-js/accounts": "^0.1.4",
        "@near-js/biometric-ed25519": "0.2.0",
        "@near-js/crypto": "^0.0.5",
        "@near-js/keystores": "^0.0.5",
        "@near-js/providers": "^0.0.7",
        "@near-js/signers": "^0.0.5",
        "@near-js/transactions": "^0.2.1",
        "@types/bn.js": "^5.1.2",
        "axios": "^1.6.1",
        "bs58": "^5.0.0",
        "dotenv": "^16.3.1",
        "firebase": "^10.5.2",
        "firebase-admin": "^11.11.0",
        "near-api-js": "2.1.3",
        "near-seed-phrase": "^0.2.0",
        "next": "14.0.1",
        "react": "^18",
        "react-dom": "^18"
      },
      "devDependencies": {
        "@types/node": "^20",
        "@types/react": "^18",
        "@types/react-dom": "^18",
        "typescript": "^5"
      }
    },
    "node_modules/@aws-crypto/sha256-js": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/sha256-js/-/sha256-js-4.0.0.tgz",
      "integrity": "sha512-MHGJyjE7TX9aaqXj7zk2ppnFUOhaDs5sP+HtNS0evOxn72c+5njUmyJmpGd7TfyoDznZlHMmdo/xGUdu2NIjNQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@aws-crypto/util": "^4.0.0",
        "@aws-sdk/types": "^3.222.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/sha256-js/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "license": "0BSD"
    },
    "node_modules/@aws-crypto/util": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/@aws-crypto/util/-/util-4.0.0.tgz",
      "integrity": "sha512-2EnmPy2gsFZ6m8bwUQN4jq+IyXV3quHAcwPOS6ZA3k+geujiqI8aRokO2kFJe+idJ/P3v4qWI186rVMo0+zLDQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@aws-sdk/types": "^3.222.0",
        "@aws-sdk/util-utf8-browser": "^3.0.0",
        "tslib": "^1.11.1"
      }
    },
    "node_modules/@aws-crypto/util/node_modules/tslib": {
      "version": "1.14.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.14.1.tgz",
      "integrity": "sha512-Xni35NKzjgMrwevysHTCArtLDpPvye8zV/0E4EyYn43P7/7qvQwPh9BGkHewbMulVntbigmcT7rdX3BNo9wRJg==",
      "license": "0BSD"
    },
    "node_modules/@aws-sdk/types": {
      "version": "3.433.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/types/-/types-3.433.0.tgz",
      "integrity": "sha512-0jEE2mSrNDd8VGFjTc1otYrwYPIkzZJEIK90ZxisKvQ/EURGBhNzWn7ejWB9XCMFT6XumYLBR0V9qq5UPisWtA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@smithy/types": "^2.4.0",
        "tslib": "^2.5.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@aws-sdk/util-utf8-browser": {
      "version": "3.259.0",
      "resolved": "https://registry.npmjs.org/@aws-sdk/util-utf8-browser/-/util-utf8-browser-3.259.0.tgz",
      "integrity": "sha512-UvFa/vR+e19XookZF8RzFZBrw2EUkQWxiBW0yYQAhvk3C+QVGl0H3ouca8LDBlBfQKXwmW3huo/59H8rwb1wJw==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.3.1"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.23.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.23.0.tgz",
      "integrity": "sha512-vvPKKdMemU85V9WE/l5wZEmImpCtLqbnTvqDS2U1fJ96KrxoW7KrXhNsNCblQlg8Ck4b85yxdTyelsMUgFUXiw==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@cbor-extract/cbor-extract-darwin-arm64": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/@cbor-extract/cbor-extract-darwin-arm64/-/cbor-extract-darwin-arm64-2.1.1.tgz",
      "integrity": "sha512-blVBy5MXz6m36Vx0DfLd7PChOQKEs8lK2bD1WJn/vVgG4FXZiZmZb2GECHFvVPA5T7OnODd9xZiL3nMCv6QUhA==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ]
    },
    "node_modules/@fastify/busboy": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/@fastify/busboy/-/busboy-1.2.1.tgz",
      "integrity": "sha512-7PQA7EH43S0CxcOa9OeAnaeA0oQ+e/DHNPZwSQM9CQHW76jle5+OvLdibRp/Aafs9KXbLhxyjOTkRjWUbQEd3Q==",
      "license": "MIT",
      "dependencies": {
        "text-decoding": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@firebase/analytics": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@firebase/analytics/-/analytics-0.10.0.tgz",
      "integrity": "sha512-Locv8gAqx0e+GX/0SI3dzmBY5e9kjVDtD+3zCFLJ0tH2hJwuCAiL+5WkHuxKj92rqQj/rvkBUCfA1ewlX2hehg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/installations": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/analytics-compat": {
      "version": "0.2.6",
      "resolved": "https://registry.npmjs.org/@firebase/analytics-compat/-/analytics-compat-0.2.6.tgz",
      "integrity": "sha512-4MqpVLFkGK7NJf/5wPEEP7ePBJatwYpyjgJ+wQHQGHfzaCDgntOnl9rL2vbVGGKCnRqWtZDIWhctB86UWXaX2Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/analytics": "0.10.0",
        "@firebase/analytics-types": "0.8.0",
        "@firebase/component": "0.6.4",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/analytics-types": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@firebase/analytics-types/-/analytics-types-0.8.0.tgz",
      "integrity": "sha512-iRP+QKI2+oz3UAh4nPEq14CsEjrjD6a5+fuypjScisAh9kXKFvdJOZJDwk7kikLvWVLGEs9+kIUS4LPQV7VZVw==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app": {
      "version": "0.9.22",
      "resolved": "https://registry.npmjs.org/@firebase/app/-/app-0.9.22.tgz",
      "integrity": "sha512-4hbUg9ojPbn4Gj21Z/GnJbiLQYOzkwBDFT5vBkQgUJJGS28qQLG6eZZ1DwLKh8lcrNJc4MR90OPaJWhSzJCR2w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "idb": "7.1.1",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/app-check": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-check/-/app-check-0.8.0.tgz",
      "integrity": "sha512-dRDnhkcaC2FspMiRK/Vbp+PfsOAEP6ZElGm9iGFJ9fDqHoPs0HOPn7dwpJ51lCFi1+2/7n5pRPGhqF/F03I97g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/app-check-compat": {
      "version": "0.3.7",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-compat/-/app-check-compat-0.3.7.tgz",
      "integrity": "sha512-cW682AxsyP1G+Z0/P7pO/WT2CzYlNxoNe5QejVarW2o5ZxeWSSPAiVEwpEpQR/bUlUmdeWThYTMvBWaopdBsqw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check": "0.8.0",
        "@firebase/app-check-types": "0.5.0",
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/app-check-interop-types": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-interop-types/-/app-check-interop-types-0.3.0.tgz",
      "integrity": "sha512-xAxHPZPIgFXnI+vb4sbBjZcde7ZluzPPaSK7Lx3/nmuVk4TjZvnL8ONnkd4ERQKL8WePQySU+pRcWkh8rDf5Sg==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-check-types": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-check-types/-/app-check-types-0.5.0.tgz",
      "integrity": "sha512-uwSUj32Mlubybw7tedRzR24RP8M8JUVR3NPiMk3/Z4bCmgEKTlQBwMXrehDAZ2wF+TsBq0SN1c6ema71U/JPyQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app-compat": {
      "version": "0.2.22",
      "resolved": "https://registry.npmjs.org/@firebase/app-compat/-/app-compat-0.2.22.tgz",
      "integrity": "sha512-kyksJFA19Oz5HZmR56s/ziOM6ivDBF9JYwC0ufacooYNd2sQ3pRsi5MZAYb1FR9hCE7MgoHuPmTtBHA7S/Cv8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app": "0.9.22",
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/app-types": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/@firebase/app-types/-/app-types-0.9.0.tgz",
      "integrity": "sha512-AeweANOIo0Mb8GiYm3xhTEBVCmPwTYAu9Hcd2qSkLuga/6+j9b1Jskl5bpiSQWy9eJ/j5pavxj6eYogmnuzm+Q==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/app/node_modules/idb": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.1.1.tgz",
      "integrity": "sha512-gchesWBzyvGHRO9W8tzUWFDycow5gwjvFKfyV9FF32Y7F50yZMp7mP+T2mJIWFx49zicqyC4uefHM17o6xKIVQ==",
      "license": "ISC"
    },
    "node_modules/@firebase/auth": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/auth/-/auth-1.3.2.tgz",
      "integrity": "sha512-ksYpeRACL8INRpFZzbCLLnI9NP+L3UH/+ebKo4oBjhc/dSwPbpw6E1wjdm0odB1U5xHhXD/5lpyeFQZ+jXyBxA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "node-fetch": "2.6.7",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x",
        "@react-native-async-storage/async-storage": "^1.18.1"
      },
      "peerDependenciesMeta": {
        "@react-native-async-storage/async-storage": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/auth-compat": {
      "version": "0.4.8",
      "resolved": "https://registry.npmjs.org/@firebase/auth-compat/-/auth-compat-0.4.8.tgz",
      "integrity": "sha512-qKX8BOl1qewBzpfAXl6/lKPW7fjnY8/3umiSFIGO8SHwLQ3LsAdNFPdwafouwMiKLo5MXxW4XdxNSI4ilt0Z5w==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth": "1.3.2",
        "@firebase/auth-types": "0.12.0",
        "@firebase/component": "0.6.4",
        "@firebase/util": "1.9.3",
        "node-fetch": "2.6.7",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/auth-compat/node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/auth-interop-types": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@firebase/auth-interop-types/-/auth-interop-types-0.2.1.tgz",
      "integrity": "sha512-VOaGzKp65MY6P5FI84TfYKBXEPi6LmOCSMMzys6o2BN2LOsqy7pCuZCup7NYnfbk5OkkQKzvIfHOzTm0UDpkyg==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/auth-types": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@firebase/auth-types/-/auth-types-0.12.0.tgz",
      "integrity": "sha512-pPwaZt+SPOshK8xNoiQlK5XIrS97kFYc3Rc7xmy373QsOJ9MmqXxLaYssP5Kcds4wd2qK//amx/c+A8O2fVeZA==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/auth/node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/component": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/@firebase/component/-/component-0.6.4.tgz",
      "integrity": "sha512-rLMyrXuO9jcAUCaQXCMjCMUsWrba5fzHlNK24xz5j2W6A/SRmK8mZJ/hn7V0fViLbxC0lPMtrK1eYzk6Fg03jA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-1.0.1.tgz",
      "integrity": "sha512-VAhF7gYwunW4Lw/+RQZvW8dlsf2r0YYqV9W0Gi2Mz8+0TGg1mBJWoUtsHfOr8kPJXhcLsC4eP/z3x6L/Fvjk/A==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth-interop-types": "0.2.1",
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-compat": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-1.0.1.tgz",
      "integrity": "sha512-ky82yLIboLxtAIWyW/52a6HLMVTzD2kpZlEilVDok73pNPLjkJYowj8iaIWK5nTy7+6Gxt7d00zfjL6zckGdXQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/database": "1.0.1",
        "@firebase/database-types": "1.0.0",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/database-compat/node_modules/@firebase/database-types": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-1.0.0.tgz",
      "integrity": "sha512-SjnXStoE0Q56HcFgNQ+9SsmJc0c8TqGARdI/T44KXy+Ets3r6x/ivhQozT66bMnCEjJRywYoxNurRTMlZF8VNg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.0",
        "@firebase/util": "1.9.3"
      }
    },
    "node_modules/@firebase/database-types": {
      "version": "0.10.4",
      "resolved": "https://registry.npmjs.org/@firebase/database-types/-/database-types-0.10.4.tgz",
      "integrity": "sha512-dPySn0vJ/89ZeBac70T+2tWWPiJXWbmRygYv0smT5TfE3hDrQ09eKMF3Y+vMlTdrMWq7mUdYW5REWPSGH4kAZQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-types": "0.9.0",
        "@firebase/util": "1.9.3"
      }
    },
    "node_modules/@firebase/firestore": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/firestore/-/firestore-4.3.2.tgz",
      "integrity": "sha512-K4TwMbgArWw+XAEUYX/vtk+TVy9n1uLeJKSrQeb89lwfkfyFINGLPME6YleaS0ovD1ziLM5/0WgL1CR4s53fDg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "@firebase/webchannel-wrapper": "0.10.3",
        "@grpc/grpc-js": "~1.9.0",
        "@grpc/proto-loader": "^0.7.8",
        "node-fetch": "2.6.7",
        "tslib": "^2.1.0"
      },
      "engines": {
        "node": ">=10.10.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/firestore-compat": {
      "version": "0.3.21",
      "resolved": "https://registry.npmjs.org/@firebase/firestore-compat/-/firestore-compat-0.3.21.tgz",
      "integrity": "sha512-u17so8cP4FQBEJyivAbZc0kW09YBXBvhSmUXiB7swkOLemfZUmmPZQGJxZGa9y/M02euU1y4EzvWN/h/bkx8pg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/firestore": "4.3.2",
        "@firebase/firestore-types": "3.0.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/firestore-types": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@firebase/firestore-types/-/firestore-types-3.0.0.tgz",
      "integrity": "sha512-Meg4cIezHo9zLamw0ymFYBD4SMjLb+ZXIbuN7T7ddXN6MGoICmOTq3/ltdCGoDCS2u+H1XJs2u/cYp75jsX9Qw==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/firestore/node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/functions": {
      "version": "0.10.0",
      "resolved": "https://registry.npmjs.org/@firebase/functions/-/functions-0.10.0.tgz",
      "integrity": "sha512-2U+fMNxTYhtwSpkkR6WbBcuNMOVaI7MaH3cZ6UAeNfj7AgEwHwMIFLPpC13YNZhno219F0lfxzTAA0N62ndWzA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/app-check-interop-types": "0.3.0",
        "@firebase/auth-interop-types": "0.2.1",
        "@firebase/component": "0.6.4",
        "@firebase/messaging-interop-types": "0.2.0",
        "@firebase/util": "1.9.3",
        "node-fetch": "2.6.7",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/functions-compat": {
      "version": "0.3.5",
      "resolved": "https://registry.npmjs.org/@firebase/functions-compat/-/functions-compat-0.3.5.tgz",
      "integrity": "sha512-uD4jwgwVqdWf6uc3NRKF8cSZ0JwGqSlyhPgackyUPe+GAtnERpS4+Vr66g0b3Gge0ezG4iyHo/EXW/Hjx7QhHw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/functions": "0.10.0",
        "@firebase/functions-types": "0.6.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/functions-types": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/@firebase/functions-types/-/functions-types-0.6.0.tgz",
      "integrity": "sha512-hfEw5VJtgWXIRf92ImLkgENqpL6IWpYaXVYiRkFY1jJ9+6tIhWM7IzzwbevwIIud/jaxKVdRzD7QBWfPmkwCYw==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/functions/node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/installations": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/@firebase/installations/-/installations-0.6.4.tgz",
      "integrity": "sha512-u5y88rtsp7NYkCHC3ElbFBrPtieUybZluXyzl7+4BsIz4sqb4vSAuwHEUgCgCeaQhvsnxDEU6icly8U9zsJigA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/util": "1.9.3",
        "idb": "7.0.1",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/installations-compat": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@firebase/installations-compat/-/installations-compat-0.2.4.tgz",
      "integrity": "sha512-LI9dYjp0aT9Njkn9U4JRrDqQ6KXeAmFbRC0E7jI7+hxl5YmRWysq5qgQl22hcWpTk+cm3es66d/apoDU/A9n6Q==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/installations": "0.6.4",
        "@firebase/installations-types": "0.5.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/installations-types": {
      "version": "0.5.0",
      "resolved": "https://registry.npmjs.org/@firebase/installations-types/-/installations-types-0.5.0.tgz",
      "integrity": "sha512-9DP+RGfzoI2jH7gY4SlzqvZ+hr7gYzPODrbzVD82Y12kScZ6ZpRg/i3j6rleto8vTFC8n6Len4560FnV1w2IRg==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x"
      }
    },
    "node_modules/@firebase/logger": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/@firebase/logger/-/logger-0.4.0.tgz",
      "integrity": "sha512-eRKSeykumZ5+cJPdxxJRgAC3G5NknY2GwEbKfymdnXtnT0Ucm4pspfR6GT4MUQEDuJwRVbVcSx85kgJulMoFFA==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/messaging": {
      "version": "0.12.4",
      "resolved": "https://registry.npmjs.org/@firebase/messaging/-/messaging-0.12.4.tgz",
      "integrity": "sha512-6JLZct6zUaex4g7HI3QbzeUrg9xcnmDAPTWpkoMpd/GoSVWH98zDoWXMGrcvHeCAIsLpFMe4MPoZkJbrPhaASw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/installations": "0.6.4",
        "@firebase/messaging-interop-types": "0.2.0",
        "@firebase/util": "1.9.3",
        "idb": "7.0.1",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/messaging-compat": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@firebase/messaging-compat/-/messaging-compat-0.2.4.tgz",
      "integrity": "sha512-lyFjeUhIsPRYDPNIkYX1LcZMpoVbBWXX4rPl7c/rqc7G+EUea7IEtSt4MxTvh6fDfPuzLn7+FZADfscC+tNMfg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/messaging": "0.12.4",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/messaging-interop-types": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@firebase/messaging-interop-types/-/messaging-interop-types-0.2.0.tgz",
      "integrity": "sha512-ujA8dcRuVeBixGR9CtegfpU4YmZf3Lt7QYkcj693FFannwNuZgfAYaTmbJ40dtjB81SAu6tbFPL9YLNT15KmOQ==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/performance": {
      "version": "0.6.4",
      "resolved": "https://registry.npmjs.org/@firebase/performance/-/performance-0.6.4.tgz",
      "integrity": "sha512-HfTn/bd8mfy/61vEqaBelNiNnvAbUtME2S25A67Nb34zVuCSCRIX4SseXY6zBnOFj3oLisaEqhVcJmVPAej67g==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/installations": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/performance-compat": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@firebase/performance-compat/-/performance-compat-0.2.4.tgz",
      "integrity": "sha512-nnHUb8uP9G8islzcld/k6Bg5RhX62VpbAb/Anj7IXs/hp32Eb2LqFPZK4sy3pKkBUO5wcrlRWQa6wKOxqlUqsg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/performance": "0.6.4",
        "@firebase/performance-types": "0.2.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/performance-types": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@firebase/performance-types/-/performance-types-0.2.0.tgz",
      "integrity": "sha512-kYrbr8e/CYr1KLrLYZZt2noNnf+pRwDq2KK9Au9jHrBMnb0/C9X9yWSXmZkFt4UIdsQknBq8uBB7fsybZdOBTA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/remote-config": {
      "version": "0.4.4",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config/-/remote-config-0.4.4.tgz",
      "integrity": "sha512-x1ioTHGX8ZwDSTOVp8PBLv2/wfwKzb4pxi0gFezS5GCJwbLlloUH4YYZHHS83IPxnua8b6l0IXUaWd0RgbWwzQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/installations": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/remote-config-compat": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config-compat/-/remote-config-compat-0.2.4.tgz",
      "integrity": "sha512-FKiki53jZirrDFkBHglB3C07j5wBpitAaj8kLME6g8Mx+aq7u9P7qfmuSRytiOItADhWUj7O1JIv7n9q87SuwA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/remote-config": "0.4.4",
        "@firebase/remote-config-types": "0.3.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/remote-config-types": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@firebase/remote-config-types/-/remote-config-types-0.3.0.tgz",
      "integrity": "sha512-RtEH4vdcbXZuZWRZbIRmQVBNsE7VDQpet2qFvq6vwKLBIQRQR5Kh58M4ok3A3US8Sr3rubYnaGqZSurCwI8uMA==",
      "license": "Apache-2.0"
    },
    "node_modules/@firebase/storage": {
      "version": "0.11.2",
      "resolved": "https://registry.npmjs.org/@firebase/storage/-/storage-0.11.2.tgz",
      "integrity": "sha512-CtvoFaBI4hGXlXbaCHf8humajkbXhs39Nbh6MbNxtwJiCqxPy9iH3D3CCfXAvP0QvAAwmJUTK3+z9a++Kc4nkA==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/util": "1.9.3",
        "node-fetch": "2.6.7",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app": "0.x"
      }
    },
    "node_modules/@firebase/storage-compat": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/@firebase/storage-compat/-/storage-compat-0.3.2.tgz",
      "integrity": "sha512-wvsXlLa9DVOMQJckbDNhXKKxRNNewyUhhbXev3t8kSgoCotd1v3MmqhKKz93ePhDnhHnDs7bYHy+Qa8dRY6BXw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/storage": "0.11.2",
        "@firebase/storage-types": "0.8.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      },
      "peerDependencies": {
        "@firebase/app-compat": "0.x"
      }
    },
    "node_modules/@firebase/storage-types": {
      "version": "0.8.0",
      "resolved": "https://registry.npmjs.org/@firebase/storage-types/-/storage-types-0.8.0.tgz",
      "integrity": "sha512-isRHcGrTs9kITJC0AVehHfpraWFui39MPaU7Eo8QfWlqW7YPymBmRgjDrlOgFdURh6Cdeg07zmkLP5tzTKRSpg==",
      "license": "Apache-2.0",
      "peerDependencies": {
        "@firebase/app-types": "0.x",
        "@firebase/util": "1.x"
      }
    },
    "node_modules/@firebase/storage/node_modules/node-fetch": {
      "version": "2.6.7",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz",
      "integrity": "sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/@firebase/util": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/@firebase/util/-/util-1.9.3.tgz",
      "integrity": "sha512-DY02CRhOZwpzO36fHpuVysz6JZrscPiBXD0fXp6qSrL9oNOx5KWICKdR95C0lSITzxp0TZosVyHqzatE8JbcjA==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.1.0"
      }
    },
    "node_modules/@firebase/webchannel-wrapper": {
      "version": "0.10.3",
      "resolved": "https://registry.npmjs.org/@firebase/webchannel-wrapper/-/webchannel-wrapper-0.10.3.tgz",
      "integrity": "sha512-+ZplYUN3HOpgCfgInqgdDAbkGGVzES1cs32JJpeqoh87SkRobGXElJx+1GZSaDqzFL+bYiX18qEcBK76mYs8uA==",
      "license": "Apache-2.0"
    },
    "node_modules/@google-cloud/firestore": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/firestore/-/firestore-6.8.0.tgz",
      "integrity": "sha512-JRpk06SmZXLGz0pNx1x7yU3YhkUXheKgH5hbDZ4kMsdhtfV5qPLJLRI4wv69K0cZorIk+zTMOwptue7hizo0eA==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "functional-red-black-tree": "^1.0.1",
        "google-gax": "^3.5.7",
        "protobufjs": "^7.2.5"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/@google-cloud/paginator": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/@google-cloud/paginator/-/paginator-3.0.7.tgz",
      "integrity": "sha512-jJNutk0arIQhmpUUQJPJErsojqo834KcyB6X7a1mxuic8i1tKXxde8E69IZxNZawRIlZdIK2QY4WALvlK5MzYQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@google-cloud/projectify": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/projectify/-/projectify-3.0.0.tgz",
      "integrity": "sha512-HRkZsNmjScY6Li8/kb70wjGlDDyLkVk3KvoEo9uIoxSjYLJasGiCch9+PqRVDOCGUFvEIqyogl+BeqILL4OJHA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/@google-cloud/promisify": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@google-cloud/promisify/-/promisify-3.0.1.tgz",
      "integrity": "sha512-z1CjRjtQyBOYL+5Qr9DdYIfrdLBe746jRTYfaYU6MeXkqp7UfYs/jX16lFFVzZ7PGEJvqZNqYUEtb1mvDww4pA==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@google-cloud/storage": {
      "version": "6.12.0",
      "resolved": "https://registry.npmjs.org/@google-cloud/storage/-/storage-6.12.0.tgz",
      "integrity": "sha512-78nNAY7iiZ4O/BouWMWTD/oSF2YtYgYB3GZirn0To6eBOugjXVoK+GXgUXOl+HlqbAOyHxAVXOlsj3snfbQ1dw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@google-cloud/paginator": "^3.0.7",
        "@google-cloud/projectify": "^3.0.0",
        "@google-cloud/promisify": "^3.0.0",
        "abort-controller": "^3.0.0",
        "async-retry": "^1.3.3",
        "compressible": "^2.0.12",
        "duplexify": "^4.0.0",
        "ent": "^2.2.0",
        "extend": "^3.0.2",
        "fast-xml-parser": "^4.2.2",
        "gaxios": "^5.0.0",
        "google-auth-library": "^8.0.1",
        "mime": "^3.0.0",
        "mime-types": "^2.0.8",
        "p-limit": "^3.0.1",
        "retry-request": "^5.0.0",
        "teeny-request": "^8.0.0",
        "uuid": "^8.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@google-cloud/storage/node_modules/uuid": {
      "version": "8.3.2",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz",
      "integrity": "sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.9.9",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.9.9.tgz",
      "integrity": "sha512-vQ1qwi/Kiyprt+uhb1+rHMpyk4CVRMTGNUGGPRGS7pLNfWkdCHrGEnT6T3/JyC2VZgoOX/X1KwdoU0WYQAeYcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@grpc/proto-loader": "^0.7.8",
        "@types/node": ">=12.12.47"
      },
      "engines": {
        "node": "^8.13.0 || >=10.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.10",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.10.tgz",
      "integrity": "sha512-CAqDfoaQ8ykFd9zqBDn4k6iWT9loLAlc2ETmDFS9JCD70gDcnA4L3AFEo2iV7KyAtAAHFW9ftq1Fz+Vsgq80RQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.4",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@hexagon/base64": {
      "version": "1.1.28",
      "resolved": "https://registry.npmjs.org/@hexagon/base64/-/base64-1.1.28.tgz",
      "integrity": "sha512-lhqDEAvWixy3bZ+UOYbPwUbBkwBq5C1LAJ/xPC8Oi+lL54oyakv/npbA0aU2hgCsx/1NUd4IBvV03+aUBWxerw==",
      "license": "MIT"
    },
    "node_modules/@jsdoc/salty": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/@jsdoc/salty/-/salty-0.2.5.tgz",
      "integrity": "sha512-TfRP53RqunNe2HBobVBJ0VLhK1HbfvBYeTC1ahnN64PWvyYyGebmMiPkuwvD9fpw2ZbkoPb8Q7mwy0aR8Z9rvw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "lodash": "^4.17.21"
      },
      "engines": {
        "node": ">=v12.0.0"
      }
    },
    "node_modules/@near-js/accounts": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/@near-js/accounts/-/accounts-0.1.4.tgz",
      "integrity": "sha512-zHFmL4OUZ4qHXOE+dDBkYgTNHLWC5RmYUVp9LiuGciO5zFPp7WlxmowJL0QjgXqV1w+dNXq3mgmkfAgYVS8Xjw==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/providers": "0.0.7",
        "@near-js/signers": "0.0.5",
        "@near-js/transactions": "0.2.1",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "ajv": "^8.11.2",
        "ajv-formats": "^2.1.1",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "depd": "^2.0.0",
        "near-abi": "0.1.1"
      }
    },
    "node_modules/@near-js/biometric-ed25519": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@near-js/biometric-ed25519/-/biometric-ed25519-0.2.0.tgz",
      "integrity": "sha512-Q+GfyjQ3ANHLukWDyRxLF0Jj+uxPFR7p150LZvaso/qpC9Vjj6x84lT48P7OhDgbJQYrw8UUaaS2a2ohHcTu/w==",
      "license": "ISC",
      "dependencies": {
        "@aws-crypto/sha256-js": "^4.0.0",
        "@hexagon/base64": "^1.1.26",
        "@near-js/crypto": "0.0.5",
        "asn1-parser": "^1.1.8",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "buffer": "^6.0.3",
        "elliptic": "^6.5.4",
        "fido2-lib": "3.3.4"
      }
    },
    "node_modules/@near-js/crypto": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/crypto/-/crypto-0.0.5.tgz",
      "integrity": "sha512-nbQ971iYES5Spiolt+p568gNuZ//HeMHm3qqT3xT+i8ZzgbC//l6oRf48SUVTPAboQ1TJ5dW/NqcxOY0pe7b4g==",
      "license": "ISC",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/@near-js/keystores": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/keystores/-/keystores-0.0.5.tgz",
      "integrity": "sha512-kxqV+gw/3L8/axe9prhlU+M0hfybkxX54xfI0EEpWP2QiUV+qw+jkKolYIbdk5tdEZrGf9jHawh1yFtwP7APPQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/types": "0.0.4"
      }
    },
    "node_modules/@near-js/keystores-browser": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/keystores-browser/-/keystores-browser-0.0.4.tgz",
      "integrity": "sha512-bzwClm3jNlWJrb8wqMunP3rrcG1hS3rD58KKhDvHXy8Dtg9VVUgrfr3Csu9oTnjG+rAPZGOynunaoOQVqju/Aw==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/keystores": "0.0.4"
      }
    },
    "node_modules/@near-js/keystores-browser/node_modules/@near-js/crypto": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/crypto/-/crypto-0.0.4.tgz",
      "integrity": "sha512-2mSIVv6mZway1rQvmkktrXAFoUvy7POjrHNH3LekKZCMCs7qMM/23Hz2+APgxZPqoV2kjarSNOEYJjxO7zQ/rQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/@near-js/keystores-browser/node_modules/@near-js/keystores": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/keystores/-/keystores-0.0.4.tgz",
      "integrity": "sha512-+vKafmDpQGrz5py1liot2hYSjPGXwihveeN+BL11aJlLqZnWBgYJUWCXG+uyGjGXZORuy2hzkKK6Hi+lbKOfVA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/types": "0.0.4"
      }
    },
    "node_modules/@near-js/keystores-node": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/keystores-node/-/keystores-node-0.0.4.tgz",
      "integrity": "sha512-vOdVhAuQ8BVefEluj+TSNzjXHA/1xjEgK7pwBUA1kgpcY8/hZ0Jj4PcvPD17wQNSyP+NJF5H9ed3pP2h2VH+1A==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/keystores": "0.0.4"
      }
    },
    "node_modules/@near-js/keystores-node/node_modules/@near-js/crypto": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/crypto/-/crypto-0.0.4.tgz",
      "integrity": "sha512-2mSIVv6mZway1rQvmkktrXAFoUvy7POjrHNH3LekKZCMCs7qMM/23Hz2+APgxZPqoV2kjarSNOEYJjxO7zQ/rQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/@near-js/keystores-node/node_modules/@near-js/keystores": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/keystores/-/keystores-0.0.4.tgz",
      "integrity": "sha512-+vKafmDpQGrz5py1liot2hYSjPGXwihveeN+BL11aJlLqZnWBgYJUWCXG+uyGjGXZORuy2hzkKK6Hi+lbKOfVA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/types": "0.0.4"
      }
    },
    "node_modules/@near-js/providers": {
      "version": "0.0.7",
      "resolved": "https://registry.npmjs.org/@near-js/providers/-/providers-0.0.7.tgz",
      "integrity": "sha512-qj16Ey+vSw7lHE85xW+ykYJoLPr4A6Q/TsfpwhJLS6zBInSC6sKVqPO1L8bK4VA/yB7V7JJPor9UVCWgRXdNEA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/transactions": "0.2.1",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "http-errors": "^1.7.2"
      },
      "optionalDependencies": {
        "node-fetch": "^2.6.1"
      }
    },
    "node_modules/@near-js/signers": {
      "version": "0.0.5",
      "resolved": "https://registry.npmjs.org/@near-js/signers/-/signers-0.0.5.tgz",
      "integrity": "sha512-XJjYYatehxHakHa7WAoiQ8uIBSWBR2EnO4GzlIe8qpWL+LoH4t68MSezC1HwT546y9YHIvePjwDrBeYk8mg20w==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/keystores": "0.0.5",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/@near-js/transactions": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@near-js/transactions/-/transactions-0.2.1.tgz",
      "integrity": "sha512-V9tXzkICDPruSxihKXkBhUgsI4uvW7TwXlnZS2GZpPsFFiIUeGrso0wo4uiQwB6miFA5q6fKaAtQa4F2v1s+zg==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.5",
        "@near-js/signers": "0.0.5",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/@near-js/types": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/types/-/types-0.0.4.tgz",
      "integrity": "sha512-8TTMbLMnmyG06R5YKWuS/qFG1tOA3/9lX4NgBqQPsvaWmDsa+D+QwOkrEHDegped0ZHQwcjAXjKML1S1TyGYKg==",
      "license": "ISC",
      "dependencies": {
        "bn.js": "5.2.1"
      }
    },
    "node_modules/@near-js/utils": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/utils/-/utils-0.0.4.tgz",
      "integrity": "sha512-mPUEPJbTCMicGitjEGvQqOe8AS7O4KkRCxqd0xuE/X6gXF1jz1pYMZn4lNUeUz2C84YnVSGLAM0o9zcN6Y4hiA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "depd": "^2.0.0",
        "mustache": "^4.0.0"
      }
    },
    "node_modules/@near-js/wallet-account": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@near-js/wallet-account/-/wallet-account-0.0.6.tgz",
      "integrity": "sha512-oyxQM6tf2WG4it+8IMu0ZQ6pa4OQhF1o+Q33Rb2+4Mb1Fm+L7MO7PJoCPcveCIFYVPOjSVk0oyoz1KbE3y62gA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/accounts": "0.1.3",
        "@near-js/crypto": "0.0.4",
        "@near-js/keystores": "0.0.4",
        "@near-js/signers": "0.0.4",
        "@near-js/transactions": "0.2.0",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0"
      }
    },
    "node_modules/@near-js/wallet-account/node_modules/@near-js/accounts": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@near-js/accounts/-/accounts-0.1.3.tgz",
      "integrity": "sha512-rmS1/WwIAWlfSMxHlDN3Q0YLOAscfrU+fkg9PsNI0sdzvdJ+bmiFqAoXi6L3D3KWZemteIudVEXMcegjreHnMg==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/providers": "0.0.6",
        "@near-js/signers": "0.0.4",
        "@near-js/transactions": "0.2.0",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "ajv": "^8.11.2",
        "ajv-formats": "^2.1.1",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "depd": "^2.0.0",
        "near-abi": "0.1.1"
      }
    },
    "node_modules/@near-js/wallet-account/node_modules/@near-js/crypto": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/crypto/-/crypto-0.0.4.tgz",
      "integrity": "sha512-2mSIVv6mZway1rQvmkktrXAFoUvy7POjrHNH3LekKZCMCs7qMM/23Hz2+APgxZPqoV2kjarSNOEYJjxO7zQ/rQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/@near-js/wallet-account/node_modules/@near-js/keystores": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/keystores/-/keystores-0.0.4.tgz",
      "integrity": "sha512-+vKafmDpQGrz5py1liot2hYSjPGXwihveeN+BL11aJlLqZnWBgYJUWCXG+uyGjGXZORuy2hzkKK6Hi+lbKOfVA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/types": "0.0.4"
      }
    },
    "node_modules/@near-js/wallet-account/node_modules/@near-js/providers": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@near-js/providers/-/providers-0.0.6.tgz",
      "integrity": "sha512-PgWCcgDgCAgnyxq2IPZD2vbpQzXt4XK4cN2SbUZsDwJkBaDQEozXMnyShG/Ie2eRoz5aD9dRHpdLDpTieAw5kA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/transactions": "0.2.0",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "http-errors": "^1.7.2"
      },
      "optionalDependencies": {
        "node-fetch": "^2.6.1"
      }
    },
    "node_modules/@near-js/wallet-account/node_modules/@near-js/signers": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/signers/-/signers-0.0.4.tgz",
      "integrity": "sha512-xCglo3U/WIGsz/izPGFMegS5Q3PxOHYB8a1E7RtVhNm5QdqTlQldLCm/BuMg2G/u1l1ZZ0wdvkqRTG9joauf3Q==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/keystores": "0.0.4",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/@near-js/wallet-account/node_modules/@near-js/transactions": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@near-js/transactions/-/transactions-0.2.0.tgz",
      "integrity": "sha512-ejcYkDz0tdQ40i/7ETV23fL5hp/pIiNXYmh4bNuZ9FjeowBODtlXGLqjG3wZbCygHCirJKilmVi5BtM+rh4ovQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/signers": "0.0.4",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/@next/env": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/env/-/env-14.0.1.tgz",
      "integrity": "sha512-Ms8ZswqY65/YfcjrlcIwMPD7Rg/dVjdLapMcSHG26W6O67EJDF435ShW4H4LXi1xKO1oRc97tLXUpx8jpLe86A==",
      "license": "MIT"
    },
    "node_modules/@next/swc-darwin-arm64": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-arm64/-/swc-darwin-arm64-14.0.1.tgz",
      "integrity": "sha512-JyxnGCS4qT67hdOKQ0CkgFTp+PXub5W1wsGvIq98TNbF3YEIN7iDekYhYsZzc8Ov0pWEsghQt+tANdidITCLaw==",
      "cpu": [
        "arm64"
      ],
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@peculiar/asn1-schema": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/@peculiar/asn1-schema/-/asn1-schema-2.3.8.tgz",
      "integrity": "sha512-ULB1XqHKx1WBU/tTFIA+uARuRoBVZ4pNdOA878RDrRbBfBGcSzi5HBkdScC6ZbHn8z7L8gmKCgPC1LHRrP46tA==",
      "license": "MIT",
      "dependencies": {
        "asn1js": "^3.0.5",
        "pvtsutils": "^1.3.5",
        "tslib": "^2.6.2"
      }
    },
    "node_modules/@peculiar/json-schema": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/@peculiar/json-schema/-/json-schema-1.1.12.tgz",
      "integrity": "sha512-coUfuoMeIB7B8/NMekxaDzLhaYmp0HZNPEjYRm9goRou8UZIC3z21s0sL9AWoCw4EG876QyO3kYrc61WNF9B/w==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.0"
      },
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/@peculiar/webcrypto": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/@peculiar/webcrypto/-/webcrypto-1.4.3.tgz",
      "integrity": "sha512-VtaY4spKTdN5LjJ04im/d/joXuvLbQdgy5Z4DXF4MFZhQ+MTrejbNMkfZBp1Bs3O5+bFqnJgyGdPuZQflvIa5A==",
      "license": "MIT",
      "dependencies": {
        "@peculiar/asn1-schema": "^2.3.6",
        "@peculiar/json-schema": "^1.1.12",
        "pvtsutils": "^1.3.2",
        "tslib": "^2.5.0",
        "webcrypto-core": "^1.7.7"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@smithy/types": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/@smithy/types/-/types-2.4.0.tgz",
      "integrity": "sha512-iH1Xz68FWlmBJ9vvYeHifVMWJf82ONx+OybPW8ZGf5wnEv2S0UXcU4zwlwJkRXuLKpcSLHrraHbn2ucdVXLb4g==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.5.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/@swc/helpers": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/@swc/helpers/-/helpers-0.5.2.tgz",
      "integrity": "sha512-E4KcWTpoLHqwPHLxidpOqQbcrZVgi0rsmmZXUle1jXmJfuIf/UWpczUJ7MZZ5tlxytgJXyp0w4PGkkeLiuIdZw==",
      "license": "Apache-2.0",
      "dependencies": {
        "tslib": "^2.4.0"
      }
    },
    "node_modules/@tootallnate/once": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-2.0.0.tgz",
      "integrity": "sha512-XCuKFP5PS55gnMVu3dty8KPatLqUoy/ZYzDzAGCQ8JNFCkLXzmI7vNHCR+XpbZaMWQK/vQubr7PkYq8g470J/A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@types/bn.js": {
      "version": "5.1.5",
      "resolved": "https://registry.npmjs.org/@types/bn.js/-/bn.js-5.1.5.tgz",
      "integrity": "sha512-V46N0zwKRF5Q00AZ6hWtN0T8gGmDUaUzLWQvHFo5yThtVwK/VCenFY3wXVbOvNfajEpsTfQM4IN9k/d6gUVX3A==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/body-parser": {
      "version": "1.19.5",
      "resolved": "https://registry.npmjs.org/@types/body-parser/-/body-parser-1.19.5.tgz",
      "integrity": "sha512-fB3Zu92ucau0iQ0JMCFQE7b/dv8Ot07NI3KaZIkIUNXq82k4eBAqUaneXfleGY9JWskeS9y+u0nXMyspcuQrCg==",
      "license": "MIT",
      "dependencies": {
        "@types/connect": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/connect": {
      "version": "3.4.38",
      "resolved": "https://registry.npmjs.org/@types/connect/-/connect-3.4.38.tgz",
      "integrity": "sha512-K6uROf1LD88uDQqJCktA4yzL1YYAK6NgfsI0v/mTgyPKWsX1CnJ0XPSDhViejru1GcRkLWb8RlzFYJRqGUbaug==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/express": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/@types/express/-/express-4.17.21.tgz",
      "integrity": "sha512-ejlPM315qwLpaQlQDTjPdsUFSc6ZsP4AN6AlWnogPjQ7CVi7PYF3YVz+CY3jE2pwYf7E/7HlDAN0rV2GxTG0HQ==",
      "license": "MIT",
      "dependencies": {
        "@types/body-parser": "*",
        "@types/express-serve-static-core": "^4.17.33",
        "@types/qs": "*",
        "@types/serve-static": "*"
      }
    },
    "node_modules/@types/express-serve-static-core": {
      "version": "4.17.41",
      "resolved": "https://registry.npmjs.org/@types/express-serve-static-core/-/express-serve-static-core-4.17.41.tgz",
      "integrity": "sha512-OaJ7XLaelTgrvlZD8/aa0vvvxZdUmlCn6MtWeB7TkiKW70BQLc9XEPpDLPdbo52ZhXUCrznlWdCHWxJWtdyajA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "@types/qs": "*",
        "@types/range-parser": "*",
        "@types/send": "*"
      }
    },
    "node_modules/@types/glob": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/@types/glob/-/glob-8.1.0.tgz",
      "integrity": "sha512-IO+MJPVhoqz+28h1qLAcBEH2+xHMK6MTyHJc7MTnnYb6wsoLR29POVGJ7LycmVXIqyy/4/2ShP5sUwTXuOwb/w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/minimatch": "^5.1.2",
        "@types/node": "*"
      }
    },
    "node_modules/@types/http-errors": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@types/http-errors/-/http-errors-2.0.4.tgz",
      "integrity": "sha512-D0CFMMtydbJAegzOyHjtiKPLlvnm3iTZyZRSZoLq2mRhDdmLfIWOCYPfQJ4cu2erKghU++QvjcUjp/5h7hESpA==",
      "license": "MIT"
    },
    "node_modules/@types/json-schema": {
      "version": "7.0.15",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.15.tgz",
      "integrity": "sha512-5+fP8P8MFNC+AyZCDxrB2pkZFPGzqQWUzpSeuuVLvm8VMcorNYavBqoFcxK8bQz4Qsbn4oUEEem4wDLfcysGHA==",
      "license": "MIT"
    },
    "node_modules/@types/jsonwebtoken": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/@types/jsonwebtoken/-/jsonwebtoken-9.0.5.tgz",
      "integrity": "sha512-VRLSGzik+Unrup6BsouBeHsf4d1hOEgYWTm/7Nmw1sXoN1+tRly/Gy/po3yeahnP4jfnQWWAhQAqcNfH7ngOkA==",
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/linkify-it": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/@types/linkify-it/-/linkify-it-3.0.5.tgz",
      "integrity": "sha512-yg6E+u0/+Zjva+buc3EIb+29XEg4wltq7cSmd4Uc2EE/1nUVmxyzpX6gUXD0V8jIrG0r7YeOGVIbYRkxeooCtw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/long": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/@types/long/-/long-4.0.2.tgz",
      "integrity": "sha512-MqTGEo5bj5t157U6fA/BiDynNkn0YknVdh48CMPkTSpFTVmvao5UQmm7uEF6xBEo7qIMAlY/JSleYaE6VOdpaA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/markdown-it": {
      "version": "12.2.3",
      "resolved": "https://registry.npmjs.org/@types/markdown-it/-/markdown-it-12.2.3.tgz",
      "integrity": "sha512-GKMHFfv3458yYy+v/N8gjufHO6MSZKCOXpZc5GXIWWy8uldwfmPn98vp81gZ5f9SVw8YYBctgfJ22a2d7AOMeQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/linkify-it": "*",
        "@types/mdurl": "*"
      }
    },
    "node_modules/@types/mdurl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/@types/mdurl/-/mdurl-1.0.5.tgz",
      "integrity": "sha512-6L6VymKTzYSrEf4Nev4Xa1LCHKrlTlYCBMTlQKFuddo1CvQcE52I0mwfOJayueUC7MJuXOeHTcIU683lzd0cUA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/mime": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-3.0.4.tgz",
      "integrity": "sha512-iJt33IQnVRkqeqC7PzBHPTC6fDlRNRW8vjrgqtScAhrmMwe8c4Eo7+fUGTa+XdWrpEgpyKWMYmi2dIwMAYRzPw==",
      "license": "MIT"
    },
    "node_modules/@types/minimatch": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/@types/minimatch/-/minimatch-5.1.2.tgz",
      "integrity": "sha512-K0VQKziLUWkVKiRVrx4a40iPaxTUefQmjtkQofBkYRcoaaL/8rhwDWww9qWbrgicNOgnpIsMxyNIUM4+n6dUIA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@types/node": {
      "version": "20.9.0",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-20.9.0.tgz",
      "integrity": "sha512-nekiGu2NDb1BcVofVcEKMIwzlx4NjHlcjhoxxKBNLtz15Y1z7MYf549DFvkHSId02Ax6kGwWntIBPC3l/JZcmw==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/@types/prop-types": {
      "version": "15.7.10",
      "resolved": "https://registry.npmjs.org/@types/prop-types/-/prop-types-15.7.10.tgz",
      "integrity": "sha512-mxSnDQxPqsZxmeShFH+uwQ4kO4gcJcGahjjMFeLbKE95IAZiiZyiEepGZjtXJ7hN/yfu0bu9xN2ajcU0JcxX6A==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/qs": {
      "version": "6.9.10",
      "resolved": "https://registry.npmjs.org/@types/qs/-/qs-6.9.10.tgz",
      "integrity": "sha512-3Gnx08Ns1sEoCrWssEgTSJs/rsT2vhGP+Ja9cnnk9k4ALxinORlQneLXFeFKOTJMOeZUFD1s7w+w2AphTpvzZw==",
      "license": "MIT"
    },
    "node_modules/@types/range-parser": {
      "version": "1.2.7",
      "resolved": "https://registry.npmjs.org/@types/range-parser/-/range-parser-1.2.7.tgz",
      "integrity": "sha512-hKormJbkJqzQGhziax5PItDUTMAM9uE2XXQmM37dyd4hVM+5aVl7oVxMVUiVQn2oCQFN/LKCZdvSM0pFRqbSmQ==",
      "license": "MIT"
    },
    "node_modules/@types/react": {
      "version": "18.2.37",
      "resolved": "https://registry.npmjs.org/@types/react/-/react-18.2.37.tgz",
      "integrity": "sha512-RGAYMi2bhRgEXT3f4B92WTohopH6bIXw05FuGlmJEnv/omEn190+QYEIYxIAuIBdKgboYYdVved2p1AxZVQnaw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/prop-types": "*",
        "@types/scheduler": "*",
        "csstype": "^3.0.2"
      }
    },
    "node_modules/@types/react-dom": {
      "version": "18.2.15",
      "resolved": "https://registry.npmjs.org/@types/react-dom/-/react-dom-18.2.15.tgz",
      "integrity": "sha512-HWMdW+7r7MR5+PZqJF6YFNSCtjz1T0dsvo/f1BV6HkV+6erD/nA7wd9NM00KVG83zf2nJ7uATPO9ttdIPvi3gg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/react": "*"
      }
    },
    "node_modules/@types/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/@types/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-F3OznnSLAUxFrCEu/L5PY8+ny8DtcFRjx7fZZ9bycvXRi3KPTRS9HOitGZwvPg0juRhXFWIeKX58cnX5YqLohQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/glob": "*",
        "@types/node": "*"
      }
    },
    "node_modules/@types/scheduler": {
      "version": "0.16.6",
      "resolved": "https://registry.npmjs.org/@types/scheduler/-/scheduler-0.16.6.tgz",
      "integrity": "sha512-Vlktnchmkylvc9SnwwwozTv04L/e1NykF5vgoQ0XTmI8DD+wxfjQuHuvHS3p0r2jz2x2ghPs2h1FVeDirIteWA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/send": {
      "version": "0.17.4",
      "resolved": "https://registry.npmjs.org/@types/send/-/send-0.17.4.tgz",
      "integrity": "sha512-x2EM6TJOybec7c52BX0ZspPodMsQUd5L6PRwOunVyVUhXiBSKf3AezDL8Dgvgt5o0UfKNfuA0eMLr2wLT4AiBA==",
      "license": "MIT",
      "dependencies": {
        "@types/mime": "^1",
        "@types/node": "*"
      }
    },
    "node_modules/@types/send/node_modules/@types/mime": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/@types/mime/-/mime-1.3.5.tgz",
      "integrity": "sha512-/pyBZWSLD2n0dcHE3hq8s8ZvcETHtEuF+3E7XVt0Ig2nvsVQXdghHVcEkIWjy9A0wKfTn97a/PSDYohKIlnP/w==",
      "license": "MIT"
    },
    "node_modules/@types/serve-static": {
      "version": "1.15.5",
      "resolved": "https://registry.npmjs.org/@types/serve-static/-/serve-static-1.15.5.tgz",
      "integrity": "sha512-PDRk21MnK70hja/YF8AHfC7yIsiQHn1rcXx7ijCFBX/k+XQJhQT/gw3xekXKJvx+5SXaMMS8oqQy09Mzvz2TuQ==",
      "license": "MIT",
      "dependencies": {
        "@types/http-errors": "*",
        "@types/mime": "*",
        "@types/node": "*"
      }
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/acorn": {
      "version": "8.11.2",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.11.2.tgz",
      "integrity": "sha512-nc0Axzp/0FILLEVsm4fNwLCwMttvhEI263QtVPQcbpfZZ3ts0hLsZGOpE6czNlid7CJ9MlyH8reXkpsf3YUY4w==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/acorn-jsx": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.3.2.tgz",
      "integrity": "sha512-rq9s+JNhf0IChjtDXxllJ7g41oZk5SlXtp0LHwyA5cejwn7vKmKp4pPri6YEePv2PU65sAsegbXtIinmDFDXgQ==",
      "license": "MIT",
      "optional": true,
      "peerDependencies": {
        "acorn": "^6.0.0 || ^7.0.0 || ^8.0.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/ajv": {
      "version": "8.12.0",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-8.12.0.tgz",
      "integrity": "sha512-sRu1kpcO9yLtYxBKvqfTeh9KzZEwO3STyX1HT+4CaDzC6HpTGYhIhPIzj9XuKU7KYDwnaeh5hcOwjy1QuJzBPA==",
      "license": "MIT",
      "dependencies": {
        "fast-deep-equal": "^3.1.1",
        "json-schema-traverse": "^1.0.0",
        "require-from-string": "^2.0.2",
        "uri-js": "^4.2.2"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/epoberezkin"
      }
    },
    "node_modules/ajv-formats": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/ajv-formats/-/ajv-formats-2.1.1.tgz",
      "integrity": "sha512-Wx0Kx52hxE7C18hkMEggYlEifqWZtYaRgouJor+WMdPnQyEK13vgEWyVNup7SoeeoLMsr4kf5h6dOW11I15MUA==",
      "license": "MIT",
      "dependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependencies": {
        "ajv": "^8.0.0"
      },
      "peerDependenciesMeta": {
        "ajv": {
          "optional": true
        }
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0",
      "optional": true
    },
    "node_modules/arrify": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/arrify/-/arrify-2.0.1.tgz",
      "integrity": "sha512-3duEwti880xqi4eAMN8AyR4a0ByT90zoYdLlevfrvU43vb0YZwZVfxOgxWrLXXXpyugL0hNZc9G6BiB5B3nUug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/asn1-parser": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/asn1-parser/-/asn1-parser-1.1.8.tgz",
      "integrity": "sha512-3aYtVA7yzCK7r+qbBzpvzcq53kz7IRfGWTObbAGZieTj+By8wbSGSncZO7TztQ5UXrHELCesUIlJGD4JJcUAsA==",
      "license": "MPL-2.0"
    },
    "node_modules/asn1js": {
      "version": "3.0.5",
      "resolved": "https://registry.npmjs.org/asn1js/-/asn1js-3.0.5.tgz",
      "integrity": "sha512-FVnvrKJwpt9LP2lAMl8qZswRNm3T4q9CON+bxldk2iwk3FFpuwhx2FfinyitizWHsVYyaY+y5JzDR0rCMV5yTQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "pvtsutils": "^1.3.2",
        "pvutils": "^1.1.3",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/async-retry": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/async-retry/-/async-retry-1.3.3.tgz",
      "integrity": "sha512-wfr/jstw9xNi/0teMHrRW7dsz3Lt5ARhYNZ2ewpadnhaIp5mbALhOAP+EAdsC7t4Z6wqsDVv9+W6gm1Dk9mEyw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "retry": "0.13.1"
      }
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.6.1",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.6.1.tgz",
      "integrity": "sha512-vfBmhDpKafglh0EldBEbVuoe7DyAavGSLWhuSm5ZSEKQnHhBf0xAAwybbNH1IkrJNGnS/VG4I5yxig1pCEXE4g==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.0",
        "form-data": "^4.0.0",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/base-x": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-4.0.0.tgz",
      "integrity": "sha512-FuwxlW4H5kh37X/oW59pwTzzTKRzfrrQwhmyspRM7swOEZcHtDZSCt45U6oKgtuFE+WYPblePMVIPR4RZrh/hw==",
      "license": "MIT"
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/bignumber.js": {
      "version": "9.1.2",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.1.2.tgz",
      "integrity": "sha512-2/mKyZH9K85bzOEfhXDBFZTGd1CTs+5IHpeFQo9luiBG7hghdC851Pj2WAhb6E3R6b9tZj/XKhbg4fum+Kepug==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": "*"
      }
    },
    "node_modules/bip39": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/bip39/-/bip39-3.0.2.tgz",
      "integrity": "sha512-J4E1r2N0tUylTKt07ibXvhpT2c5pyAFgvuA5q1H9uDy6dEGpjV8jmymh3MTYJDLCNbIVClSB9FbND49I6N24MQ==",
      "license": "ISC",
      "dependencies": {
        "@types/node": "11.11.6",
        "create-hash": "^1.1.0",
        "pbkdf2": "^3.0.9",
        "randombytes": "^2.0.1"
      }
    },
    "node_modules/bip39-light": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/bip39-light/-/bip39-light-1.0.7.tgz",
      "integrity": "sha512-WDTmLRQUsiioBdTs9BmSEmkJza+8xfJmptsNJjxnoq3EydSa/ZBXT6rm66KoT3PJIRYMnhSKNR7S9YL1l7R40Q==",
      "license": "ISC",
      "dependencies": {
        "create-hash": "^1.1.0",
        "pbkdf2": "^3.0.9"
      }
    },
    "node_modules/bip39/node_modules/@types/node": {
      "version": "11.11.6",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-11.11.6.tgz",
      "integrity": "sha512-Exw4yUWMBXM3X+8oqzJNRqZSwUAaS4+7NdvHqQuFi/d+synz++xmX3QIf+BFqneW8N31R8Ky+sikfZUXq07ggQ==",
      "license": "MIT"
    },
    "node_modules/bluebird": {
      "version": "3.7.2",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.7.2.tgz",
      "integrity": "sha512-XpNj6GDQzdfW+r2Wnn7xiSAd7TM3jzkxGXBGTtWKuSXv1xUV+azxAm8jdWZN06QTQk+2N2XB9jRDkvbmQmcRtg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/bn.js": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-5.2.1.tgz",
      "integrity": "sha512-eXRvHzWyYPBuB4NBy0cmYQjGitUrtqwbvlzP3G6VFnNRbsZQIxQ10PbKKHt8gZ/HW/D/747aDl+QkDqg3KQLMQ==",
      "license": "MIT"
    },
    "node_modules/borsh": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/borsh/-/borsh-0.7.0.tgz",
      "integrity": "sha512-CLCsZGIBCFnPtkNnieW/a8wmreDmfUtjU2m9yHrzPXIlNbqVs0AQrSatSG6vdNYUqdc83tkQi2eHfF98ubzQLA==",
      "license": "Apache-2.0",
      "dependencies": {
        "bn.js": "^5.2.0",
        "bs58": "^4.0.0",
        "text-encoding-utf-8": "^1.0.2"
      }
    },
    "node_modules/borsh/node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/borsh/node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "license": "MIT",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/brace-expansion": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.1.tgz",
      "integrity": "sha512-XnAIvQ8eM+kC6aULx6wuQiwVsnzsi9d3WxzV3FpWTGA19F621kwdbsAcFKXgKUHZWsy+mY6iL1sHTxWEFCytDA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/brorand": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/brorand/-/brorand-1.1.0.tgz",
      "integrity": "sha512-cKV8tMCEpQs4hK/ik71d6LrPOnpkpGBR0wzxqr68g2m/LB2GxVYQroAjMJZRVM1Y4BCjCKc3vAamxSzOY2RP+w==",
      "license": "MIT"
    },
    "node_modules/bs58": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-5.0.0.tgz",
      "integrity": "sha512-r+ihvQJvahgYT50JD05dyJNKlmmSlMoOGwn1lCcEzanPglg7TxYjioQUYehQ9mAR/+hOSd2jRc/Z2y5UxBymvQ==",
      "license": "MIT",
      "dependencies": {
        "base-x": "^4.0.0"
      }
    },
    "node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytestreamjs": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/bytestreamjs/-/bytestreamjs-2.0.1.tgz",
      "integrity": "sha512-U1Z/ob71V/bXfVABvNr/Kumf5VyeQRBEm6Txb0PQ6S7V5GpBM3w4Cbqz/xPDicR5tN0uvDifng8C+5qECeGwyQ==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001561",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001561.tgz",
      "integrity": "sha512-NTt0DNoKe958Q0BE0j0c1V9jbUzhBxHIEJy7asmGrpE0yG63KTV7PLHPnK2E1O9RsQrQ081I3NLuXGS6zht3cw==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/capability": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/capability/-/capability-0.2.5.tgz",
      "integrity": "sha512-rsJZYVCgXd08sPqwmaIqjAd5SUTfonV0z/gDJ8D6cN8wQphky1kkAYEqQ+hmDxTw7UihvBfjUVUSY+DBEe44jg==",
      "license": "MIT"
    },
    "node_modules/catharsis": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/catharsis/-/catharsis-0.9.0.tgz",
      "integrity": "sha512-prMTQVpcns/tzFgFVkVp6ak6RykZyWb3gu8ckUpd6YkTlacOd3DXGJjIpD4Q6zJirizvaiAjSSHlOsA+6sNh2A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "lodash": "^4.17.15"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/cbor-extract": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/cbor-extract/-/cbor-extract-2.1.1.tgz",
      "integrity": "sha512-1UX977+L+zOJHsp0mWFG13GLwO6ucKgSmSW6JTl8B9GUvACvHeIVpFqhU92299Z6PfD09aTXDell5p+lp1rUFA==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "node-gyp-build-optional-packages": "5.0.3"
      },
      "bin": {
        "download-cbor-prebuilds": "bin/download-prebuilds.js"
      },
      "optionalDependencies": {
        "@cbor-extract/cbor-extract-darwin-arm64": "2.1.1",
        "@cbor-extract/cbor-extract-darwin-x64": "2.1.1",
        "@cbor-extract/cbor-extract-linux-arm": "2.1.1",
        "@cbor-extract/cbor-extract-linux-arm64": "2.1.1",
        "@cbor-extract/cbor-extract-linux-x64": "2.1.1",
        "@cbor-extract/cbor-extract-win32-x64": "2.1.1"
      }
    },
    "node_modules/cbor-x": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/cbor-x/-/cbor-x-1.4.1.tgz",
      "integrity": "sha512-qp6nM61RaamDJWsDGHzMIQ4+XBtg7/QIoBi5Lra4IDU65eP8lHcgkkJ9t2yIU8EvRThBfFCh6+S1Qkrmq93J3Q==",
      "license": "MIT",
      "optionalDependencies": {
        "cbor-extract": "^2.0.2"
      }
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/cipher-base": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/cipher-base/-/cipher-base-1.0.4.tgz",
      "integrity": "sha512-Kkht5ye6ZGmwv40uUDZztayT2ThLQGfnj/T71N/XzeZeo3nf8foyW7zGTsPYkEya3m5f3cAypH+qe7YOrM1U2Q==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/client-only": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/client-only/-/client-only-0.0.1.tgz",
      "integrity": "sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==",
      "license": "MIT"
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/compressible": {
      "version": "2.0.18",
      "resolved": "https://registry.npmjs.org/compressible/-/compressible-2.0.18.tgz",
      "integrity": "sha512-AF3r7P5dWxL8MxyITRMlORQNaOA2IkAFaTr4k7BUumjPtRpGDTZpl0Pb1XCO6JeDCBdp126Cgs9sMxqSjgYyRg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "mime-db": ">= 1.43.0 < 2"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/create-hash": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/create-hash/-/create-hash-1.2.0.tgz",
      "integrity": "sha512-z00bCGNHDG8mHAkP7CtT1qVu+bFQUPjYq/4Iv3C3kWjTFV10zIjfSoeqXo9Asws8gwSHDGj/hl2u4OGIjapeCg==",
      "license": "MIT",
      "dependencies": {
        "cipher-base": "^1.0.1",
        "inherits": "^2.0.1",
        "md5.js": "^1.3.4",
        "ripemd160": "^2.0.1",
        "sha.js": "^2.4.0"
      }
    },
    "node_modules/create-hmac": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/create-hmac/-/create-hmac-1.1.7.tgz",
      "integrity": "sha512-MJG9liiZ+ogc4TzUwuvbER1JRdgvUFSB5+VR/g5h82fGaIRWMWddtKBHi7/sVhfjQZ6SehlyhvQYrcYkaUIpLg==",
      "license": "MIT",
      "dependencies": {
        "cipher-base": "^1.0.3",
        "create-hash": "^1.1.0",
        "inherits": "^2.0.1",
        "ripemd160": "^2.0.0",
        "safe-buffer": "^5.0.1",
        "sha.js": "^2.4.8"
      }
    },
    "node_modules/csstype": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/csstype/-/csstype-3.1.2.tgz",
      "integrity": "sha512-I7K1Uu0MBPzaFKg4nI5Q7Vs2t+3gWWW648spaF+Rg7pI9ds18Ugn+lvg4SHczUdKlHI5LWBXyqfS8+DufyBsgQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/debug": {
      "version": "4.3.4",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.3.4.tgz",
      "integrity": "sha512-PRWFHuSU3eDtQJPvnNY7Jcket1j0t5OuOsFzPPzsekD52Zl8qUfFIPEiswXqIvHWGVHOgX+7G/vCNNhehwxfkQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.1.2"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/debug/node_modules/ms": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
      "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
      "license": "MIT"
    },
    "node_modules/deep-is": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.4.tgz",
      "integrity": "sha512-oIPzksmTg4/MriiaYGO+okXDT7ztn/w3Eptv/+gSIdMdKsJo0u4CfYNFJPy+4SKMuCqGw2wxnA+URMg3t8a/bQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/dotenv": {
      "version": "16.3.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.3.1.tgz",
      "integrity": "sha512-IPzF4w4/Rd94bA9imS68tZBaYyBWSCE47V1RGuMrB94iyTOIEwRmVL2x/4An+6mETpLrKJ5hQkB8W4kFAadeIQ==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/motdotla/dotenv?sponsor=1"
      }
    },
    "node_modules/duplexify": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/duplexify/-/duplexify-4.1.2.tgz",
      "integrity": "sha512-fz3OjcNCHmRP12MJoZMPglx8m4rrFP8rovnk4vT8Fs+aonZoCwGg10dSsQsfP/E62eZcPTMSMP6686fu9Qlqtw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "end-of-stream": "^1.4.1",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1",
        "stream-shift": "^1.0.0"
      }
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/elliptic": {
      "version": "6.5.4",
      "resolved": "https://registry.npmjs.org/elliptic/-/elliptic-6.5.4.tgz",
      "integrity": "sha512-iLhC6ULemrljPZb+QutR5TQGB+pdW6KGD5RSegS+8sorOZT+rdQFbsQFJgvN3eRqNALqJer4oQ16YvJHlU8hzQ==",
      "license": "MIT",
      "dependencies": {
        "bn.js": "^4.11.9",
        "brorand": "^1.1.0",
        "hash.js": "^1.0.0",
        "hmac-drbg": "^1.0.1",
        "inherits": "^2.0.4",
        "minimalistic-assert": "^1.0.1",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    },
    "node_modules/elliptic/node_modules/bn.js": {
      "version": "4.12.0",
      "resolved": "https://registry.npmjs.org/bn.js/-/bn.js-4.12.0.tgz",
      "integrity": "sha512-c98Bf3tPniI+scsdk237ku1Dc3ujXQTSgyiPUDEOe7tRkhrqridvh8klBv0HCEso1OLOYcHuCv/cS6DNxKH+ZA==",
      "license": "MIT"
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/end-of-stream": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.4.tgz",
      "integrity": "sha512-+uw1inIHVPQoaVuHzRyXd21icM+cnt4CzD5rW+NC1wjOUSTOs+Te7FOv7AhN7vS9x/oIyhLP5PR1H+phQAHu5Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/ent": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/ent/-/ent-2.2.0.tgz",
      "integrity": "sha512-GHrMyVZQWvTIdDtpiEXdHZnFQKzeO09apj8Cbl4pKWy4i0Oprcq17usfDt5aO63swf0JOeMWjWQE/LzgSRuWpA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/entities": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-2.1.0.tgz",
      "integrity": "sha512-hCx1oky9PFrJ611mf0ifBLBRW8lUUVRlFolb5gWRfIELabBlbp9xZvrqZLZAs+NxFnbfQoeGd8wDkygjg7U85w==",
      "license": "BSD-2-Clause",
      "optional": true,
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/error-polyfill": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/error-polyfill/-/error-polyfill-0.1.3.tgz",
      "integrity": "sha512-XHJk60ufE+TG/ydwp4lilOog549iiQF2OAPhkk9DdiYWMrltz5yhDz/xnKuenNwP7gy3dsibssO5QpVhkrSzzg==",
      "license": "MIT",
      "dependencies": {
        "capability": "^0.2.5",
        "o3": "^1.0.3",
        "u3": "^0.1.1"
      }
    },
    "node_modules/escalade": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.1.1.tgz",
      "integrity": "sha512-k0er2gUkLf8O0zKJiAhmkTnJlTvINGv7ygDNPbeIsX/TJjGJZHuh9B2UxbsaEkmlEo9MfhrSzmhIlhRlI2GXnw==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/escodegen": {
      "version": "1.14.3",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-1.14.3.tgz",
      "integrity": "sha512-qFcX0XJkdg+PB3xjZZG/wKSuT1PnQWx57+TVSjIMmILd2yC/6ByYElPwJnslDsuWuSAp4AwJGumarAAmJch5Kw==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^4.2.0",
        "esutils": "^2.0.2",
        "optionator": "^0.8.1"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=4.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/escodegen/node_modules/estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/eslint-visitor-keys": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-3.4.3.tgz",
      "integrity": "sha512-wpc+LXeiyiisxPlEkUzU6svyS1frIO3Mgxj1fdy7Pm8Ygzguax2N3Fa/D/ag1WqbOprdI+uY6wMUl8/a2G+iag==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/espree": {
      "version": "9.6.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-9.6.1.tgz",
      "integrity": "sha512-oruZaFkjorTpF32kDSI5/75ViwGeZginGGy2NoOSg3Q9bnwlnmDm4HLnkl0RE3n+njDXR037aY1+x58Z/zFdwQ==",
      "license": "BSD-2-Clause",
      "optional": true,
      "dependencies": {
        "acorn": "^8.9.0",
        "acorn-jsx": "^5.3.2",
        "eslint-visitor-keys": "^3.4.1"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      },
      "funding": {
        "url": "https://opencollective.com/eslint"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "license": "BSD-2-Clause",
      "optional": true,
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/fast-deep-equal": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.3.tgz",
      "integrity": "sha512-f3qQ9oQy9j2AhBe/H9VC91wLmKBCCU/gDOnKNAYG5hswO7BLKj09Hc5HYNz9cGI++xlpDCIgDaitVs03ATR84Q==",
      "license": "MIT"
    },
    "node_modules/fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha512-DCXu6Ifhqcks7TZKY3Hxp3y6qphY5SJZmrWMDrKcERSOXWQdMhU9Ig/PYrzyw/ul9jOIyh0N4M0tbC5hodg8dw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/fast-text-encoding": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/fast-text-encoding/-/fast-text-encoding-1.0.6.tgz",
      "integrity": "sha512-VhXlQgj9ioXCqGstD37E/HBeqEGV/qOD/kmbVG8h5xKBYvM1L3lR1Zn4555cQ8GkYbJa8aJSipLPndE1k6zK2w==",
      "license": "Apache-2.0",
      "optional": true
    },
    "node_modules/fast-xml-parser": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/fast-xml-parser/-/fast-xml-parser-4.3.2.tgz",
      "integrity": "sha512-rmrXUXwbJedoXkStenj1kkljNF7ugn5ZjR9FJcwmCfcCbtOMDghPajbc+Tck6vE6F5XsDmx+Pr2le9fw8+pXBg==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/NaturalIntelligence"
        },
        {
          "type": "paypal",
          "url": "https://paypal.me/naturalintelligence"
        }
      ],
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "strnum": "^1.0.5"
      },
      "bin": {
        "fxparser": "src/cli/cli.js"
      }
    },
    "node_modules/faye-websocket": {
      "version": "0.11.4",
      "resolved": "https://registry.npmjs.org/faye-websocket/-/faye-websocket-0.11.4.tgz",
      "integrity": "sha512-CzbClwlXAuiRQAlUyfqPgvPoNKTckTPGfwZV4ZdAhVcP2lh9KUxJg2b5GkE7XbjKQ3YJnQ9z6D9ntLAlB+tP8g==",
      "license": "Apache-2.0",
      "dependencies": {
        "websocket-driver": ">=0.5.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/fido2-lib": {
      "version": "3.3.4",
      "resolved": "https://registry.npmjs.org/fido2-lib/-/fido2-lib-3.3.4.tgz",
      "integrity": "sha512-r/darKZY1MQhGNi+H16CCj/02jMADAp0ni6dxR2mElYliIfdNImflKIzmNZ3sp4ZqcYGnjxrqOypyKdgjtknEA==",
      "license": "MIT",
      "dependencies": {
        "@hexagon/base64": "~1.1.23",
        "@peculiar/webcrypto": "~1.4.0",
        "asn1js": "~3.0.2",
        "cbor-x": "~1.4.0",
        "jose": "^4.10.0",
        "pkijs": "~3.0.8",
        "tldts": "~5.7.91"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/firebase": {
      "version": "10.5.2",
      "resolved": "https://registry.npmjs.org/firebase/-/firebase-10.5.2.tgz",
      "integrity": "sha512-LLCig21TBYdByMbGJt5YmUzzk2HpsFCsIUTvOteQjW9BUh40IrSP2+dZi9IvT8RlztM3zcH+TNZ0jOsOaa7GMQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/analytics": "0.10.0",
        "@firebase/analytics-compat": "0.2.6",
        "@firebase/app": "0.9.22",
        "@firebase/app-check": "0.8.0",
        "@firebase/app-check-compat": "0.3.7",
        "@firebase/app-compat": "0.2.22",
        "@firebase/app-types": "0.9.0",
        "@firebase/auth": "1.3.2",
        "@firebase/auth-compat": "0.4.8",
        "@firebase/database": "1.0.1",
        "@firebase/database-compat": "1.0.1",
        "@firebase/firestore": "4.3.2",
        "@firebase/firestore-compat": "0.3.21",
        "@firebase/functions": "0.10.0",
        "@firebase/functions-compat": "0.3.5",
        "@firebase/installations": "0.6.4",
        "@firebase/installations-compat": "0.2.4",
        "@firebase/messaging": "0.12.4",
        "@firebase/messaging-compat": "0.2.4",
        "@firebase/performance": "0.6.4",
        "@firebase/performance-compat": "0.2.4",
        "@firebase/remote-config": "0.4.4",
        "@firebase/remote-config-compat": "0.2.4",
        "@firebase/storage": "0.11.2",
        "@firebase/storage-compat": "0.3.2",
        "@firebase/util": "1.9.3"
      }
    },
    "node_modules/firebase-admin": {
      "version": "11.11.0",
      "resolved": "https://registry.npmjs.org/firebase-admin/-/firebase-admin-11.11.0.tgz",
      "integrity": "sha512-lp784gXFAJgUEtjSdYNZGTWZqltqjBkoaPSQhDKnmWXJP/MCbWdiDY1hsdkl/6O4O4KFovTjUDLu26sojwdQvw==",
      "license": "Apache-2.0",
      "dependencies": {
        "@fastify/busboy": "^1.2.1",
        "@firebase/database-compat": "^0.3.4",
        "@firebase/database-types": "^0.10.4",
        "@types/node": ">=12.12.47",
        "jsonwebtoken": "^9.0.0",
        "jwks-rsa": "^3.0.1",
        "node-forge": "^1.3.1",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=14"
      },
      "optionalDependencies": {
        "@google-cloud/firestore": "^6.6.0",
        "@google-cloud/storage": "^6.9.5"
      }
    },
    "node_modules/firebase-admin/node_modules/@firebase/database": {
      "version": "0.14.4",
      "resolved": "https://registry.npmjs.org/@firebase/database/-/database-0.14.4.tgz",
      "integrity": "sha512-+Ea/IKGwh42jwdjCyzTmeZeLM3oy1h0mFPsTy6OqCWzcu/KFqRAr5Tt1HRCOBlNOdbh84JPZC47WLU18n2VbxQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/auth-interop-types": "0.2.1",
        "@firebase/component": "0.6.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "faye-websocket": "0.11.4",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/firebase-admin/node_modules/@firebase/database-compat": {
      "version": "0.3.4",
      "resolved": "https://registry.npmjs.org/@firebase/database-compat/-/database-compat-0.3.4.tgz",
      "integrity": "sha512-kuAW+l+sLMUKBThnvxvUZ+Q1ZrF/vFJ58iUY9kAcbX48U03nVzIF6Tmkf0p3WVQwMqiXguSgtOPIB6ZCeF+5Gg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@firebase/component": "0.6.4",
        "@firebase/database": "0.14.4",
        "@firebase/database-types": "0.10.4",
        "@firebase/logger": "0.4.0",
        "@firebase/util": "1.9.3",
        "tslib": "^2.1.0"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.3",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.3.tgz",
      "integrity": "sha512-1VzOtuEM8pC9SFU1E+8KfTjZyMztRsgEfwQl44z8A25uy13jSzTj6dyK2Df52iV0vgHCfBwLhDWevLn95w5v6Q==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/form-data": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.0.tgz",
      "integrity": "sha512-ETEklSGi5t0QMZuiXoA/Q6vcnxcLQP5vdugSpuAyi6SVGi2clPPp+xgEhuMaHC+zGgn31Kd235W35f7Hykkaww==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha512-dsKNQNdj6xA3T+QlADDA7mOSlX0qiMINjn0cgr+eGHGsbSHzTabcIogz2+p/iqP1Xs6EP/sS2SbqH+brGTbq0g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/gaxios": {
      "version": "5.1.3",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-5.1.3.tgz",
      "integrity": "sha512-95hVgBRgEIRQQQHIbnxBXeHbW4TqFk4ZDJW7wmVtvYar72FdhRIo1UGOLS2eRAKCPEdPBWu+M7+A33D9CdX9rA==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^5.0.0",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/gcp-metadata": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-5.3.0.tgz",
      "integrity": "sha512-FNTkdNEnBdlqF2oatizolQqNANMrcqJt6AAYt99B3y1aLLC8Hc5IOBb+ZnnzllodEEf6xMBp6wRcBbc16fa65w==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "gaxios": "^5.0.0",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/glob": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/glob/-/glob-8.1.0.tgz",
      "integrity": "sha512-r8hpEjiQEYlF2QU0df3dS+nxxSIreXQS1qRhMJM0Q5NDdR386C7jb7Hwwod8Fgiuex+k0GFjgft18yvxm5XoCQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^5.0.1",
        "once": "^1.3.0"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-to-regexp": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/glob-to-regexp/-/glob-to-regexp-0.4.1.tgz",
      "integrity": "sha512-lkX1HJXwyMcprw/5YUZc2s7DrpAiHB21/V+E1rHUrVNokkvB6bqMzT0VfV6/86ZNabt1k14YOIaT7nDvOX3Iiw==",
      "license": "BSD-2-Clause"
    },
    "node_modules/google-auth-library": {
      "version": "8.9.0",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-8.9.0.tgz",
      "integrity": "sha512-f7aQCJODJFmYWN6PeNKzgvy9LI2tYmXnzpNDHEjG5sDNPgGb2FXQyTBnXeSH+PAtpKESFD+LmHw3Ox3mN7e1Fg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "arrify": "^2.0.0",
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "fast-text-encoding": "^1.0.0",
        "gaxios": "^5.0.0",
        "gcp-metadata": "^5.3.0",
        "gtoken": "^6.1.0",
        "jws": "^4.0.0",
        "lru-cache": "^6.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/google-gax": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/google-gax/-/google-gax-3.6.1.tgz",
      "integrity": "sha512-g/lcUjGcB6DSw2HxgEmCDOrI/CByOwqRvsuUvNalHUK2iPPPlmAIpbMbl62u0YufGMr8zgE3JL7th6dCb1Ry+w==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/grpc-js": "~1.8.0",
        "@grpc/proto-loader": "^0.7.0",
        "@types/long": "^4.0.0",
        "@types/rimraf": "^3.0.2",
        "abort-controller": "^3.0.0",
        "duplexify": "^4.0.0",
        "fast-text-encoding": "^1.0.3",
        "google-auth-library": "^8.0.2",
        "is-stream-ended": "^0.1.4",
        "node-fetch": "^2.6.1",
        "object-hash": "^3.0.0",
        "proto3-json-serializer": "^1.0.0",
        "protobufjs": "7.2.4",
        "protobufjs-cli": "1.1.1",
        "retry-request": "^5.0.0"
      },
      "bin": {
        "compileProtos": "build/tools/compileProtos.js",
        "minifyProtoJson": "build/tools/minify.js"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/google-gax/node_modules/@grpc/grpc-js": {
      "version": "1.8.21",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.8.21.tgz",
      "integrity": "sha512-KeyQeZpxeEBSqFVTi3q2K7PiPXmgBfECc4updA1ejCLjYmoAlvvM3ZMp5ztTDUCUQmoY3CpDxvchjO1+rFkoHg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@grpc/proto-loader": "^0.7.0",
        "@types/node": ">=12.12.47"
      },
      "engines": {
        "node": "^8.13.0 || >=10.10.0"
      }
    },
    "node_modules/google-gax/node_modules/protobufjs": {
      "version": "7.2.4",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.2.4.tgz",
      "integrity": "sha512-AT+RJgD2sH8phPmCf7OUZR8xGdcJRga4+1cOaXJ64hvcSkVhNcRHOwIxUatPH15+nj59WAGTDv3LSGZPEQbJaQ==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/google-gax/node_modules/protobufjs-cli": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/protobufjs-cli/-/protobufjs-cli-1.1.1.tgz",
      "integrity": "sha512-VPWMgIcRNyQwWUv8OLPyGQ/0lQY/QTQAVN5fh+XzfDwsVw1FZ2L3DM/bcBf8WPiRz2tNpaov9lPZfNcmNo6LXA==",
      "license": "BSD-3-Clause",
      "optional": true,
      "dependencies": {
        "chalk": "^4.0.0",
        "escodegen": "^1.13.0",
        "espree": "^9.0.0",
        "estraverse": "^5.1.0",
        "glob": "^8.0.0",
        "jsdoc": "^4.0.0",
        "minimist": "^1.2.0",
        "semver": "^7.1.2",
        "tmp": "^0.2.1",
        "uglify-js": "^3.7.7"
      },
      "bin": {
        "pbjs": "bin/pbjs",
        "pbts": "bin/pbts"
      },
      "engines": {
        "node": ">=12.0.0"
      },
      "peerDependencies": {
        "protobufjs": "^7.0.0"
      }
    },
    "node_modules/google-p12-pem": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/google-p12-pem/-/google-p12-pem-4.0.1.tgz",
      "integrity": "sha512-WPkN4yGtz05WZ5EhtlxNDWPhC4JIic6G8ePitwUWy4l+XPVYec+a0j0Ts47PDtW59y3RwAhUd9/h9ZZ63px6RQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "node-forge": "^1.3.1"
      },
      "bin": {
        "gp12-pem": "build/src/bin/gp12-pem.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/gtoken": {
      "version": "6.1.2",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-6.1.2.tgz",
      "integrity": "sha512-4ccGpzz7YAr7lxrT2neugmXQ3hP9ho2gcaityLVkiUecAiwiy60Ii8gRbZeOsXV19fYaRjgBSshs8kXw+NKCPQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "gaxios": "^5.0.1",
        "google-p12-pem": "^4.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/hash-base": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/hash-base/-/hash-base-3.1.0.tgz",
      "integrity": "sha512-1nmYp/rhMDiE7AYkDw+lLwlAzz0AntGIe51F3RfFfEqyQ3feY2eI/NcwC6umIQVOASPMsWJLJScWKSSvzL9IVA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.4",
        "readable-stream": "^3.6.0",
        "safe-buffer": "^5.2.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/hash.js": {
      "version": "1.1.7",
      "resolved": "https://registry.npmjs.org/hash.js/-/hash.js-1.1.7.tgz",
      "integrity": "sha512-taOaskGt4z4SOANNseOviYDvjEJinIkRgmp7LbKP2YTTmVxWBl87s/uzK9r+44BclBSp2X7K1hqeNfz9JbBeXA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "minimalistic-assert": "^1.0.1"
      }
    },
    "node_modules/hmac-drbg": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/hmac-drbg/-/hmac-drbg-1.0.1.tgz",
      "integrity": "sha512-Tti3gMqLdZfhOQY1Mzf/AanLiqh1WTiJgEj26ZuYQ9fbkLomzGchCws4FyrSd4VkpBfiNhaE1On+lOz894jvXg==",
      "license": "MIT",
      "dependencies": {
        "hash.js": "^1.0.3",
        "minimalistic-assert": "^1.0.0",
        "minimalistic-crypto-utils": "^1.0.1"
      }
    },
    "node_modules/http-errors": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-1.8.1.tgz",
      "integrity": "sha512-Kpk9Sm7NmI+RHhnj6OIWDI1d6fIoFAtFt9RLaTMRlg/8w49juAStsrBgp0Dp4OdxdVbRIeKhtCUvoi/RuAhO4g==",
      "license": "MIT",
      "dependencies": {
        "depd": "~1.1.2",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": ">= 1.5.0 < 2",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-errors/node_modules/depd": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/depd/-/depd-1.1.2.tgz",
      "integrity": "sha512-7emPTl6Dpo6JRXOXjLRxck+FlLRX5847cLKEn00PLAgc3g2hTZZgr+e4c2v6QpSmLeFP3n5yUo7ft6avBK/5jQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/http-parser-js": {
      "version": "0.5.8",
      "resolved": "https://registry.npmjs.org/http-parser-js/-/http-parser-js-0.5.8.tgz",
      "integrity": "sha512-SGeBX54F94Wgu5RH3X5jsDtf4eHyRogWX1XGT3b4HuW3tQPM4AaBzoUji/4AAJNXCEOWZ5O0DgZmJw1947gD5Q==",
      "license": "MIT"
    },
    "node_modules/http-proxy-agent": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-5.0.0.tgz",
      "integrity": "sha512-n2hY8YdoRE1i7r6M0w9DIw5GgZN0G25P8zLCRQ8rjXtTU3vsNFBI/vWK/UIeE6g5MUUz6avwAPXmL6Fy9D/90w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "2",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/idb": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/idb/-/idb-7.0.1.tgz",
      "integrity": "sha512-UUxlE7vGWK5RfB/fDwEGgRf84DY/ieqNha6msMV99UsEMQhJ1RwbCd8AYBj3QMgnE3VZnfQvm4oKVCJTYlqIgg==",
      "license": "ISC"
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/is-stream-ended": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/is-stream-ended/-/is-stream-ended-0.1.4.tgz",
      "integrity": "sha512-xj0XPvmr7bQFTvirqnFr50o0hQIh6ZItDqloxt5aJrR4NQsYeSsyFQERYGCAzfindAcnKjINnwEEgLx4IqVzQw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/jose": {
      "version": "4.15.4",
      "resolved": "https://registry.npmjs.org/jose/-/jose-4.15.4.tgz",
      "integrity": "sha512-W+oqK4H+r5sITxfxpSU+MMdr/YSWGvgZMQDIsNoBDGGy4i7GBPTtvFKibQzW06n3U3TqHjhvBJsirShsEJ6eeQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/panva"
      }
    },
    "node_modules/js-sha256": {
      "version": "0.9.0",
      "resolved": "https://registry.npmjs.org/js-sha256/-/js-sha256-0.9.0.tgz",
      "integrity": "sha512-sga3MHh9sgQN2+pJ9VYZ+1LPwXOxuBJBA5nrR5/ofPfuiJBE2hnjsaN8se8JznOmGLN2p49Pe5U/ttafcs/apA==",
      "license": "MIT"
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js2xmlparser": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/js2xmlparser/-/js2xmlparser-4.0.2.tgz",
      "integrity": "sha512-6n4D8gLlLf1n5mNLQPRfViYzu9RATblzPEtm1SthMX1Pjao0r9YI9nw7ZIfRxQMERS87mcswrg+r/OYrPRX6jA==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "xmlcreate": "^2.0.4"
      }
    },
    "node_modules/jsdoc": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/jsdoc/-/jsdoc-4.0.2.tgz",
      "integrity": "sha512-e8cIg2z62InH7azBBi3EsSEqrKx+nUtAS5bBcYTSpZFA+vhNPyhv8PTFZ0WsjOPDj04/dOLlm08EDcQJDqaGQg==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "@babel/parser": "^7.20.15",
        "@jsdoc/salty": "^0.2.1",
        "@types/markdown-it": "^12.2.3",
        "bluebird": "^3.7.2",
        "catharsis": "^0.9.0",
        "escape-string-regexp": "^2.0.0",
        "js2xmlparser": "^4.0.2",
        "klaw": "^3.0.0",
        "markdown-it": "^12.3.2",
        "markdown-it-anchor": "^8.4.1",
        "marked": "^4.0.10",
        "mkdirp": "^1.0.4",
        "requizzle": "^0.2.3",
        "strip-json-comments": "^3.1.0",
        "underscore": "~1.13.2"
      },
      "bin": {
        "jsdoc": "jsdoc.js"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-schema-traverse": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-1.0.0.tgz",
      "integrity": "sha512-NM8/P9n3XjXhIZn1lLhkFaACTOURQXjWhV4BA/RnOv8xvgqtqpAX9IO4mRQxSx1Rlo4tqzeqb0sOlruaOy3dug==",
      "license": "MIT"
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.1.tgz",
      "integrity": "sha512-qiLX/xhEEFKUAJ6FiBMbes3w9ATzyk5W7Hvzpa/SLYdxNtng+gcurvrI7TbACjIXlsJyr05/S1oUhZrc63evQA==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.0.tgz",
      "integrity": "sha512-jrZ2Qx916EA+fq9cEAeCROWPTfCwi1IVHqT2tapuqLEVVDKFDENFw1oL+MwrTvH6msKxsd1YTDVw6uKEcsrLEA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "buffer-equal-constant-time": "1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jwks-rsa": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jwks-rsa/-/jwks-rsa-3.1.0.tgz",
      "integrity": "sha512-v7nqlfezb9YfHHzYII3ef2a2j1XnGeSE/bK3WfumaYCqONAIstJbrEGapz4kadScZzEt7zYCN7bucj8C0Mv/Rg==",
      "license": "MIT",
      "dependencies": {
        "@types/express": "^4.17.17",
        "@types/jsonwebtoken": "^9.0.2",
        "debug": "^4.3.4",
        "jose": "^4.14.6",
        "limiter": "^1.1.5",
        "lru-memoizer": "^2.2.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/klaw": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/klaw/-/klaw-3.0.0.tgz",
      "integrity": "sha512-0Fo5oir+O9jnXu5EefYbVK+mHMBeEVEy2cmctR1O1NECcCkPRreJKrS6Qt/j3KC2C148Dfo9i3pCmCMsdqGr0g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "graceful-fs": "^4.1.9"
      }
    },
    "node_modules/levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha512-0OO4y2iOHix2W6ujICbKIaEQXvFQHue65vUG3pb5EUomzPI90z9hsA1VsO/dbIIpC53J8gxM9Q4Oho0jrCM/yA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/limiter": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/limiter/-/limiter-1.1.5.tgz",
      "integrity": "sha512-FWWMIEOxz3GwUI4Ts/IvgVy6LPvoMPgjMdQ185nN6psJyBJ4yOpzqm695/h5umdLJg2vW3GR5iG11MAkR2AzJA=="
    },
    "node_modules/linkify-it": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/linkify-it/-/linkify-it-3.0.3.tgz",
      "integrity": "sha512-ynTsyrFSdE5oZ/O9GEf00kPngmOfVwazR5GKDq6EYfhlpFug3J2zybX56a2PRRpc9P+FuSoGNAwjlbDs9jJBPQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "uc.micro": "^1.0.1"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT"
    },
    "node_modules/lodash.clonedeep": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/lodash.clonedeep/-/lodash.clonedeep-4.5.0.tgz",
      "integrity": "sha512-H5ZhCF25riFd9uB5UCkVKo61m3S/xZk1x4wA6yp/L3RFP6Z/eHH1ymQcGLo7J3GMPfm0V/7m1tryHuGVxpqEBQ==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT"
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT"
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT"
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT"
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT"
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT"
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT"
    },
    "node_modules/long": {
      "version": "5.2.3",
      "resolved": "https://registry.npmjs.org/long/-/long-5.2.3.tgz",
      "integrity": "sha512-lcHwpNoggQTObv5apGNCTdJrO69eHOZMi4BNC+rTLER8iHAqGrUVeLh/irVIM7zTw2bOXA8T6uNPeujwOLg/2Q==",
      "license": "Apache-2.0"
    },
    "node_modules/loose-envify": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/loose-envify/-/loose-envify-1.4.0.tgz",
      "integrity": "sha512-lyuxPGr/Wfhrlem2CL/UcnUc1zcqKAImBDzukY7Y5F/yQiNdko6+fRLevlw1HgMySw7f611UIY408EtxRSoK3Q==",
      "license": "MIT",
      "dependencies": {
        "js-tokens": "^3.0.0 || ^4.0.0"
      },
      "bin": {
        "loose-envify": "cli.js"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/lru-memoizer": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/lru-memoizer/-/lru-memoizer-2.2.0.tgz",
      "integrity": "sha512-QfOZ6jNkxCcM/BkIPnFsqDhtrazLRsghi9mBwFAzol5GCvj4EkFT899Za3+QwikCg5sRX8JstioBDwOxEyzaNw==",
      "license": "MIT",
      "dependencies": {
        "lodash.clonedeep": "^4.5.0",
        "lru-cache": "~4.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/lru-cache": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-4.0.2.tgz",
      "integrity": "sha512-uQw9OqphAGiZhkuPlpFGmdTU2tEuhxTourM/19qGJrxBPHAr/f8BT1a0i/lOclESnGatdJG/UCkP9kZB/Lh1iw==",
      "license": "ISC",
      "dependencies": {
        "pseudomap": "^1.0.1",
        "yallist": "^2.0.0"
      }
    },
    "node_modules/lru-memoizer/node_modules/yallist": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-2.1.2.tgz",
      "integrity": "sha512-ncTzHV7NvsQZkYe1DW7cbDLm0YpzHmZF5r/iyP3ZnQtMiJ+pjzisCiMNI+Sj+xQF5pXhSHxSB3uDbsBTzY/c2A==",
      "license": "ISC"
    },
    "node_modules/markdown-it": {
      "version": "12.3.2",
      "resolved": "https://registry.npmjs.org/markdown-it/-/markdown-it-12.3.2.tgz",
      "integrity": "sha512-TchMembfxfNVpHkbtriWltGWc+m3xszaRD0CZup7GFFhzIgQqxIfn3eGj1yZpfuflzPvfkt611B2Q/Bsk1YnGg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "argparse": "^2.0.1",
        "entities": "~2.1.0",
        "linkify-it": "^3.0.1",
        "mdurl": "^1.0.1",
        "uc.micro": "^1.0.5"
      },
      "bin": {
        "markdown-it": "bin/markdown-it.js"
      }
    },
    "node_modules/markdown-it-anchor": {
      "version": "8.6.7",
      "resolved": "https://registry.npmjs.org/markdown-it-anchor/-/markdown-it-anchor-8.6.7.tgz",
      "integrity": "sha512-FlCHFwNnutLgVTflOYHPW2pPcl2AACqVzExlkGQNsi4CJgqOHN7YTgDd4LuhgN1BFO3TS0vLAruV1Td6dwWPJA==",
      "license": "Unlicense",
      "optional": true,
      "peerDependencies": {
        "@types/markdown-it": "*",
        "markdown-it": "*"
      }
    },
    "node_modules/marked": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/marked/-/marked-4.3.0.tgz",
      "integrity": "sha512-PRsaiG84bK+AMvxziE/lCFss8juXjNaWzVbN5tXAm4XjeaS9NAHhop+PjQxz2A9h8Q4M/xGmzP8vqNwy6JeK0A==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "marked": "bin/marked.js"
      },
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/md5.js": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/md5.js/-/md5.js-1.3.5.tgz",
      "integrity": "sha512-xitP+WxNPcTTOgnTJcrhM0xvdPepipPSf3I8EIpGKeFLjt3PlJLIDG3u8EX53ZIubkb+5U2+3rELYpEhHhzdkg==",
      "license": "MIT",
      "dependencies": {
        "hash-base": "^3.0.0",
        "inherits": "^2.0.1",
        "safe-buffer": "^5.1.2"
      }
    },
    "node_modules/mdurl": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/mdurl/-/mdurl-1.0.1.tgz",
      "integrity": "sha512-/sKlQJCBYVY9Ers9hqzKou4H6V5UWc/M59TH2dvkt+84itfnq7uFOMLpOiOS4ujvHP4etln18fmIxA5R5fll0g==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/mime": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-3.0.0.tgz",
      "integrity": "sha512-jSCU7/VB1loIWBZe14aEYHU/+1UMEHoaO7qxCOVJOw9GgH72VAWppxNcjU+x9a2k3GSIBXNKxXQFqRvvZ7vr3A==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/minimalistic-assert": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-assert/-/minimalistic-assert-1.0.1.tgz",
      "integrity": "sha512-UtJcAD4yEaGtjPezWuO9wC4nwUnVH/8/Im3yEHQP4b67cXlD/Qr9hdITCU1xDbSEXg2XKNaP8jsReV7vQd00/A==",
      "license": "ISC"
    },
    "node_modules/minimalistic-crypto-utils": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/minimalistic-crypto-utils/-/minimalistic-crypto-utils-1.0.1.tgz",
      "integrity": "sha512-JIYlbt6g8i5jKfJ3xz7rF0LXmv2TkDxBLUkiBeZ7bAx4GnnNMr8xFpGnOxn6GhTEHx3SjRrZEoU+j04prX1ktg==",
      "license": "MIT"
    },
    "node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "optional": true,
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "license": "MIT",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/nanoid": {
      "version": "3.3.7",
      "resolved": "https://registry.npmjs.org/nanoid/-/nanoid-3.3.7.tgz",
      "integrity": "sha512-eSRppjcPIatRIMC1U6UngP8XFcz8MQWGQdt1MTBQ7NaAmvXDfvNxbvWV3x2y6CdEUciCSsDHDQZbhYaB8QEo2g==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "bin": {
        "nanoid": "bin/nanoid.cjs"
      },
      "engines": {
        "node": "^10 || ^12 || ^13.7 || ^14 || >=15.0.1"
      }
    },
    "node_modules/near-abi": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/near-abi/-/near-abi-0.1.1.tgz",
      "integrity": "sha512-RVDI8O+KVxRpC3KycJ1bpfVj9Zv+xvq9PlW1yIFl46GhrnLw83/72HqHGjGDjQ8DtltkcpSjY9X3YIGZ+1QyzQ==",
      "license": "(MIT AND Apache-2.0)",
      "dependencies": {
        "@types/json-schema": "^7.0.11"
      }
    },
    "node_modules/near-api-js": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/near-api-js/-/near-api-js-2.1.3.tgz",
      "integrity": "sha512-ggCQE/oGrrbr9dEtXZ9QU7XAf6RgISs+bfD7Q5I2QsQN45XgV85IA4c8KDLzo66u7FTX39gubKz3Ghieo6D7YA==",
      "license": "(MIT AND Apache-2.0)",
      "dependencies": {
        "@near-js/accounts": "0.1.3",
        "@near-js/crypto": "0.0.4",
        "@near-js/keystores": "0.0.4",
        "@near-js/keystores-browser": "0.0.4",
        "@near-js/keystores-node": "0.0.4",
        "@near-js/providers": "0.0.6",
        "@near-js/signers": "0.0.4",
        "@near-js/transactions": "0.2.0",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "@near-js/wallet-account": "0.0.6",
        "ajv": "^8.11.2",
        "ajv-formats": "^2.1.1",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "depd": "^2.0.0",
        "error-polyfill": "^0.1.3",
        "http-errors": "^1.7.2",
        "near-abi": "0.1.1",
        "node-fetch": "^2.6.1",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/@near-js/accounts": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@near-js/accounts/-/accounts-0.1.3.tgz",
      "integrity": "sha512-rmS1/WwIAWlfSMxHlDN3Q0YLOAscfrU+fkg9PsNI0sdzvdJ+bmiFqAoXi6L3D3KWZemteIudVEXMcegjreHnMg==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/providers": "0.0.6",
        "@near-js/signers": "0.0.4",
        "@near-js/transactions": "0.2.0",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "ajv": "^8.11.2",
        "ajv-formats": "^2.1.1",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "depd": "^2.0.0",
        "near-abi": "0.1.1"
      }
    },
    "node_modules/near-api-js/node_modules/@near-js/crypto": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/crypto/-/crypto-0.0.4.tgz",
      "integrity": "sha512-2mSIVv6mZway1rQvmkktrXAFoUvy7POjrHNH3LekKZCMCs7qMM/23Hz2+APgxZPqoV2kjarSNOEYJjxO7zQ/rQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/types": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "tweetnacl": "^1.0.1"
      }
    },
    "node_modules/near-api-js/node_modules/@near-js/keystores": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/keystores/-/keystores-0.0.4.tgz",
      "integrity": "sha512-+vKafmDpQGrz5py1liot2hYSjPGXwihveeN+BL11aJlLqZnWBgYJUWCXG+uyGjGXZORuy2hzkKK6Hi+lbKOfVA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/types": "0.0.4"
      }
    },
    "node_modules/near-api-js/node_modules/@near-js/providers": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/@near-js/providers/-/providers-0.0.6.tgz",
      "integrity": "sha512-PgWCcgDgCAgnyxq2IPZD2vbpQzXt4XK4cN2SbUZsDwJkBaDQEozXMnyShG/Ie2eRoz5aD9dRHpdLDpTieAw5kA==",
      "license": "ISC",
      "dependencies": {
        "@near-js/transactions": "0.2.0",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "http-errors": "^1.7.2"
      },
      "optionalDependencies": {
        "node-fetch": "^2.6.1"
      }
    },
    "node_modules/near-api-js/node_modules/@near-js/signers": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/@near-js/signers/-/signers-0.0.4.tgz",
      "integrity": "sha512-xCglo3U/WIGsz/izPGFMegS5Q3PxOHYB8a1E7RtVhNm5QdqTlQldLCm/BuMg2G/u1l1ZZ0wdvkqRTG9joauf3Q==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/keystores": "0.0.4",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/near-api-js/node_modules/@near-js/transactions": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/@near-js/transactions/-/transactions-0.2.0.tgz",
      "integrity": "sha512-ejcYkDz0tdQ40i/7ETV23fL5hp/pIiNXYmh4bNuZ9FjeowBODtlXGLqjG3wZbCygHCirJKilmVi5BtM+rh4ovQ==",
      "license": "ISC",
      "dependencies": {
        "@near-js/crypto": "0.0.4",
        "@near-js/signers": "0.0.4",
        "@near-js/types": "0.0.4",
        "@near-js/utils": "0.0.4",
        "bn.js": "5.2.1",
        "borsh": "^0.7.0",
        "js-sha256": "^0.9.0"
      }
    },
    "node_modules/near-hd-key": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/near-hd-key/-/near-hd-key-1.2.1.tgz",
      "integrity": "sha512-SIrthcL5Wc0sps+2e1xGj3zceEa68TgNZDLuCx0daxmfTP7sFTB3/mtE2pYhlFsCxWoMn+JfID5E1NlzvvbRJg==",
      "license": "MIT",
      "dependencies": {
        "bip39": "3.0.2",
        "create-hmac": "1.1.7",
        "tweetnacl": "1.0.3"
      }
    },
    "node_modules/near-seed-phrase": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/near-seed-phrase/-/near-seed-phrase-0.2.0.tgz",
      "integrity": "sha512-NpmrnejpY1AdlRpDZ0schJQJtfBaoUheRfiYtQpcq9TkwPgqKZCRULV5L3hHmLc0ep7KRtikbPQ9R2ztN/3cyQ==",
      "license": "MIT",
      "dependencies": {
        "bip39-light": "^1.0.7",
        "bs58": "^4.0.1",
        "near-hd-key": "^1.2.1",
        "tweetnacl": "^1.0.2"
      }
    },
    "node_modules/near-seed-phrase/node_modules/base-x": {
      "version": "3.0.9",
      "resolved": "https://registry.npmjs.org/base-x/-/base-x-3.0.9.tgz",
      "integrity": "sha512-H7JU6iBHTal1gp56aKoaa//YUxEaAOUiydvrV/pILqIHXTtqxSkATOnDA2u+jZ/61sD+L/412+7kzXRtWukhpQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/near-seed-phrase/node_modules/bs58": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/bs58/-/bs58-4.0.1.tgz",
      "integrity": "sha512-Ok3Wdf5vOIlBrgCvTq96gBkJw+JUEzdBgyaza5HLtPm7yTHkjRy8+JzNyHF7BHa0bNWOQIp3m5YF0nnFcOIKLw==",
      "license": "MIT",
      "dependencies": {
        "base-x": "^3.0.2"
      }
    },
    "node_modules/next": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/next/-/next-14.0.1.tgz",
      "integrity": "sha512-s4YaLpE4b0gmb3ggtmpmV+wt+lPRuGtANzojMQ2+gmBpgX9w5fTbjsy6dXByBuENsdCX5pukZH/GxdFgO62+pA==",
      "license": "MIT",
      "dependencies": {
        "@next/env": "14.0.1",
        "@swc/helpers": "0.5.2",
        "busboy": "1.6.0",
        "caniuse-lite": "^1.0.30001406",
        "postcss": "8.4.31",
        "styled-jsx": "5.1.1",
        "watchpack": "2.4.0"
      },
      "bin": {
        "next": "dist/bin/next"
      },
      "engines": {
        "node": ">=18.17.0"
      },
      "optionalDependencies": {
        "@next/swc-darwin-arm64": "14.0.1",
        "@next/swc-darwin-x64": "14.0.1",
        "@next/swc-linux-arm64-gnu": "14.0.1",
        "@next/swc-linux-arm64-musl": "14.0.1",
        "@next/swc-linux-x64-gnu": "14.0.1",
        "@next/swc-linux-x64-musl": "14.0.1",
        "@next/swc-win32-arm64-msvc": "14.0.1",
        "@next/swc-win32-ia32-msvc": "14.0.1",
        "@next/swc-win32-x64-msvc": "14.0.1"
      },
      "peerDependencies": {
        "@opentelemetry/api": "^1.1.0",
        "react": "^18.2.0",
        "react-dom": "^18.2.0",
        "sass": "^1.3.0"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "sass": {
          "optional": true
        }
      }
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-forge": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/node-forge/-/node-forge-1.3.1.tgz",
      "integrity": "sha512-dPEtOeMvF9VMcYV/1Wb8CPoVAXtp6MKMlcbAt4ddqmGqUJ6fQZFXkNZNkNlfevtNkGtaSoXf/vNNNSvgrdXwtA==",
      "license": "(BSD-3-Clause OR GPL-2.0)",
      "engines": {
        "node": ">= 6.13.0"
      }
    },
    "node_modules/node-gyp-build-optional-packages": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/node-gyp-build-optional-packages/-/node-gyp-build-optional-packages-5.0.3.tgz",
      "integrity": "sha512-k75jcVzk5wnnc/FMxsf4udAoTEUv2jY3ycfdSd3yWu6Cnd1oee6/CfZJApyscA4FJOmdoixWwiwOyf16RzD5JA==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "node-gyp-build-optional-packages": "bin.js",
        "node-gyp-build-optional-packages-optional": "optional.js",
        "node-gyp-build-optional-packages-test": "build-test.js"
      }
    },
    "node_modules/o3": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/o3/-/o3-1.0.3.tgz",
      "integrity": "sha512-f+4n+vC6s4ysy7YO7O2gslWZBUu8Qj2i2OUJOvjRxQva7jVjYjB29jrr9NCjmxZQR0gzrOcv1RnqoYOeMs5VRQ==",
      "license": "MIT",
      "dependencies": {
        "capability": "^0.2.5"
      }
    },
    "node_modules/object-hash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/object-hash/-/object-hash-3.0.0.tgz",
      "integrity": "sha512-RSn9F68PjH9HqtltsSnqYC1XXoWe9Bju5+213R98cNGttag9q9yAOTzdbsqvIa7aNm5WffBZFpWYr2aWrklWAw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/pbkdf2": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/pbkdf2/-/pbkdf2-3.1.2.tgz",
      "integrity": "sha512-iuh7L6jA7JEGu2WxDwtQP1ddOpaJNC4KlDEFfdQajSGgGPNi4OyDc2R7QnbY2bR9QjBVGwgvTdNJZoE7RaxUMA==",
      "license": "MIT",
      "dependencies": {
        "create-hash": "^1.1.2",
        "create-hmac": "^1.1.4",
        "ripemd160": "^2.0.1",
        "safe-buffer": "^5.0.1",
        "sha.js": "^2.4.8"
      },
      "engines": {
        "node": ">=0.12"
      }
    },
    "node_modules/picocolors": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.0.0.tgz",
      "integrity": "sha512-1fygroTLlHu66zi26VoTDv8yRgm0Fccecssto+MhsZ0D/DGW2sm8E8AjW7NU5VVTRt5GxbeZ5qBuJr+HyLYkjQ==",
      "license": "ISC"
    },
    "node_modules/pkijs": {
      "version": "3.0.15",
      "resolved": "https://registry.npmjs.org/pkijs/-/pkijs-3.0.15.tgz",
      "integrity": "sha512-n7nAl9JpqdeQsjy+rPmswkmZ3oO/Fu5uN9me45PPQVdWjd0X7HKfL8+HYwfxihqoDSSPUIajkOcqFxEUxMqhwQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "asn1js": "^3.0.5",
        "bytestreamjs": "^2.0.0",
        "pvtsutils": "^1.3.2",
        "pvutils": "^1.1.3",
        "tslib": "^2.4.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/postcss": {
      "version": "8.4.31",
      "resolved": "https://registry.npmjs.org/postcss/-/postcss-8.4.31.tgz",
      "integrity": "sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==",
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/postcss/"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/postcss"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "nanoid": "^3.3.6",
        "picocolors": "^1.0.0",
        "source-map-js": "^1.0.2"
      },
      "engines": {
        "node": "^10 || ^12 || >=14"
      }
    },
    "node_modules/prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha512-ESF23V4SKG6lVSGZgYNpbsiaAkdab6ZgOxe52p7+Kid3W3u3bxR4Vfd/o21dmN7jSt0IwgZ4v5MUd26FEtXE9w==",
      "optional": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/proto3-json-serializer": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/proto3-json-serializer/-/proto3-json-serializer-1.1.1.tgz",
      "integrity": "sha512-AwAuY4g9nxx0u52DnSMkqqgyLHaW/XaPLtaAo3y/ZCfeaQB/g4YDH4kb8Wc/mWzWvu0YjOznVnfn373MVZZrgw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "protobufjs": "^7.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.2.5",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.2.5.tgz",
      "integrity": "sha512-gGXRSXvxQ7UiPgfw8gevrfRWcTlSbOFg+p/N+JVJEK5VhueL2miT6qTymqAmjr1Q5WbOCyJbyrk6JfWKwlFn6A==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/pseudomap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/pseudomap/-/pseudomap-1.0.2.tgz",
      "integrity": "sha512-b/YwNhb8lk1Zz2+bXXpS/LK9OisiZZ1SNsSLxN1x2OXVEhW2Ckr/7mWE5vrC1ZTiJlD9g19jWszTmJsB+oEpFQ==",
      "license": "ISC"
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pvtsutils": {
      "version": "1.3.5",
      "resolved": "https://registry.npmjs.org/pvtsutils/-/pvtsutils-1.3.5.tgz",
      "integrity": "sha512-ARvb14YB9Nm2Xi6nBq1ZX6dAM0FsJnuk+31aUp4TrcZEdKUlSqOqsxJHUPJDNE3qiIp+iUPEIeR6Je/tgV7zsA==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.6.1"
      }
    },
    "node_modules/pvutils": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/pvutils/-/pvutils-1.1.3.tgz",
      "integrity": "sha512-pMpnA0qRdFp32b1sJl1wOJNxZLQ2cbQx+k6tjNtZ8CpvVhNqEPRgivZ2WOUev2YMajecdH7ctUPDvEe87nariQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/randombytes": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/randombytes/-/randombytes-2.1.0.tgz",
      "integrity": "sha512-vYl3iOX+4CKUWuxGi9Ukhie6fsqXqS9FE2Zaic4tNFD2N2QQaXOMFbuKK4QmDHC0JO6B1Zp41J0LpT0oR68amQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "^5.1.0"
      }
    },
    "node_modules/react": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react/-/react-18.2.0.tgz",
      "integrity": "sha512-/3IjMdb2L9QbBdWiW5e3P2/npwMBaU9mHCSCUzNln0ZCYbcfTsGbTJrU/kGemdH2IWmB2ioZ+zkxtmq6g09fGQ==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/react-dom": {
      "version": "18.2.0",
      "resolved": "https://registry.npmjs.org/react-dom/-/react-dom-18.2.0.tgz",
      "integrity": "sha512-6IMTriUmvsjHUjNtEDudZfuDQUoWXVxKHhlEGSk81n4YFS+r/Kl99wXiwlVXtPBtJenozv2P+hxDsw9eA7Xo6g==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0",
        "scheduler": "^0.23.0"
      },
      "peerDependencies": {
        "react": "^18.2.0"
      }
    },
    "node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/require-from-string": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/require-from-string/-/require-from-string-2.0.2.tgz",
      "integrity": "sha512-Xf0nWe6RseziFMu+Ap9biiUbmplq6S9/p+7w7YXP/JBHhrUDDUhwa+vANyubuqfZWTveU//DYVGsDG7RKL/vEw==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requizzle": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/requizzle/-/requizzle-0.2.4.tgz",
      "integrity": "sha512-JRrFk1D4OQ4SqovXOgdav+K8EAhSB/LJZqCz8tbX0KObcdeM15Ss59ozWMBWmmINMagCwmqn4ZNryUGpBsl6Jw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "lodash": "^4.17.21"
      }
    },
    "node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-request": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/retry-request/-/retry-request-5.0.2.tgz",
      "integrity": "sha512-wfI3pk7EE80lCIXprqh7ym48IHYdwmAAzESdbU8Q9l7pnRCk9LEhpbOTNKjz6FARLm/Bl5m+4F0ABxOkYUujSQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "^4.1.1",
        "extend": "^3.0.2"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rimraf/node_modules/brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/rimraf/node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/rimraf/node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/ripemd160": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/ripemd160/-/ripemd160-2.0.2.tgz",
      "integrity": "sha512-ii4iagi25WusVoiC4B4lq7pbXfAp3D9v5CwfkY33vffw2+pkDjY1D8GaN7spsxvCSx8dkPqOZCEZyfxcmJG2IA==",
      "license": "MIT",
      "dependencies": {
        "hash-base": "^3.0.0",
        "inherits": "^2.0.1"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/scheduler": {
      "version": "0.23.0",
      "resolved": "https://registry.npmjs.org/scheduler/-/scheduler-0.23.0.tgz",
      "integrity": "sha512-CtuThmgHNg7zIZWAXi3AsyIzA3n4xx7aNyjwC2VJldO2LMVDhFK+63xGqq6CsJH4rTAt6/M+N4GhZiDYPx9eUw==",
      "license": "MIT",
      "dependencies": {
        "loose-envify": "^1.1.0"
      }
    },
    "node_modules/semver": {
      "version": "7.5.4",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.5.4.tgz",
      "integrity": "sha512-1bCSESV6Pv+i21Hvpxp3Dx+pSD8lIPt8uVjRrxAUt/nbswYc+tK6Y2btiULjd4+fnq15PX+nqQDC7Oft7WkwcA==",
      "license": "ISC",
      "dependencies": {
        "lru-cache": "^6.0.0"
      },
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/sha.js": {
      "version": "2.4.11",
      "resolved": "https://registry.npmjs.org/sha.js/-/sha.js-2.4.11.tgz",
      "integrity": "sha512-QMEp5B7cftE7APOjk5Y6xgrbWu+WkLVQwk8JNjZ8nKRciZaByEW6MubieAiToS7+dwvrjGhH8jRXz3MVd0AYqQ==",
      "license": "(MIT AND BSD-3-Clause)",
      "dependencies": {
        "inherits": "^2.0.1",
        "safe-buffer": "^5.0.1"
      },
      "bin": {
        "sha.js": "bin.js"
      }
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "license": "BSD-3-Clause",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-js": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/source-map-js/-/source-map-js-1.0.2.tgz",
      "integrity": "sha512-R0XvVJ9WusLiqTCEiGCmICCMplcCkIwwR11mOSD9CR5u+IXYdiseeEuXCVAjS54zqwkLcPNnmU4OeJ6tUrWhDw==",
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/statuses": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-1.5.0.tgz",
      "integrity": "sha512-OpZ3zP+jT1PI7I8nemJX4AKmAX070ZkYPVWV/AaKTJl+tXCTGyVdC1a4SL8RUQYEwk/f34ZX8UTykN68FwrqAA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/stream-events": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/stream-events/-/stream-events-1.0.5.tgz",
      "integrity": "sha512-E1GUzBSgvct8Jsb3v2X15pjzN1tYebtbLaMg+eBOUOAxgbLoSbT2NS91ckc5lJD1KfLjId+jXJRgo0qnV5Nerg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "stubs": "^3.0.0"
      }
    },
    "node_modules/stream-shift": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/stream-shift/-/stream-shift-1.0.1.tgz",
      "integrity": "sha512-AiisoFqQ0vbGcZgQPY1cdP2I76glaVA/RauYR4G4thNFgkTqr90yXTo4LYX60Jl+sIlPNHHdGSwo01AvbKUSVQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/strnum": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/strnum/-/strnum-1.0.5.tgz",
      "integrity": "sha512-J8bbNyKKXl5qYcR36TIO8W3mVGVHrmmxsd5PAItGkmyzwJvybiw2IVq5nqd0i4LSNSkB/sx9VHllbfFdr9k1JA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/stubs": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/stubs/-/stubs-3.0.0.tgz",
      "integrity": "sha512-PdHt7hHUJKxvTCgbKX9C1V/ftOcjJQgz8BZwNfV5c4B6dcGqlpelTbJ999jBGZ2jYiPAwcX5dP6oBwVlBlUbxw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/styled-jsx": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/styled-jsx/-/styled-jsx-5.1.1.tgz",
      "integrity": "sha512-pW7uC1l4mBZ8ugbiZrcIsiIvVx1UmTfw7UkC3Um2tmfUq9Bhk8IiyEIPl6F8agHgjzku6j0xQEZbfA5uSgSaCw==",
      "license": "MIT",
      "dependencies": {
        "client-only": "0.0.1"
      },
      "engines": {
        "node": ">= 12.0.0"
      },
      "peerDependencies": {
        "react": ">= 16.8.0 || 17.x.x || ^18.0.0-0"
      },
      "peerDependenciesMeta": {
        "@babel/core": {
          "optional": true
        },
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/teeny-request": {
      "version": "8.0.3",
      "resolved": "https://registry.npmjs.org/teeny-request/-/teeny-request-8.0.3.tgz",
      "integrity": "sha512-jJZpA5He2y52yUhA7pyAGZlgQpcB+xLjcN0eUFxr9c8hP/H7uOXbBNVo/O0C/xVfJLJs680jvkFgVJEEvk9+ww==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "http-proxy-agent": "^5.0.0",
        "https-proxy-agent": "^5.0.0",
        "node-fetch": "^2.6.1",
        "stream-events": "^1.0.5",
        "uuid": "^9.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/text-decoding": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/text-decoding/-/text-decoding-1.0.0.tgz",
      "integrity": "sha512-/0TJD42KDnVwKmDK6jj3xP7E2MG7SHAOG4tyTgyUCRPdHwvkquYNLEQltmdMa3owq3TkddCVcTsoctJI8VQNKA==",
      "license": "MIT"
    },
    "node_modules/text-encoding-utf-8": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/text-encoding-utf-8/-/text-encoding-utf-8-1.0.2.tgz",
      "integrity": "sha512-8bw4MY9WjdsD2aMtO0OzOCY3pXGYNx2d2FfHRVUKkiCPDWjKuOlhLVASS+pD7VkLTVjW268LYJHwsnPFlBpbAg=="
    },
    "node_modules/tldts": {
      "version": "5.7.112",
      "resolved": "https://registry.npmjs.org/tldts/-/tldts-5.7.112.tgz",
      "integrity": "sha512-6VSJ/C0uBtc2PQlLsp4IT8MIk2UUh6qVeXB1HZtK+0HiXlAPzNcfF3p2WM9RqCO/2X1PIa4danlBLPoC2/Tc7A==",
      "license": "MIT",
      "dependencies": {
        "tldts-core": "^5.7.112"
      },
      "bin": {
        "tldts": "bin/cli.js"
      }
    },
    "node_modules/tldts-core": {
      "version": "5.7.112",
      "resolved": "https://registry.npmjs.org/tldts-core/-/tldts-core-5.7.112.tgz",
      "integrity": "sha512-mutrEUgG2sp0e/MIAnv9TbSLR0IPbvmAImpzqul5O/HJ2XM1/I1sajchQ/fbj0fPdA31IiuWde8EUhfwyldY1Q==",
      "license": "MIT"
    },
    "node_modules/tmp": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.2.1.tgz",
      "integrity": "sha512-76SUhtfqR2Ijn+xllcI5P1oyannHNHByD80W1q447gU3mp9G9PSpGdWmjUOHRDPiHYacIk66W7ubDTuPF3BEtQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "rimraf": "^3.0.0"
      },
      "engines": {
        "node": ">=8.17.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.6.2.tgz",
      "integrity": "sha512-AEYxH93jGFPn/a2iVAwW87VuUIkR1FVUKB77NwMF7nBTDkDrrT/Hpt/IrCJ0QXhW27jTBDcf5ZY7w6RiqTMw2Q==",
      "license": "0BSD"
    },
    "node_modules/tweetnacl": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/tweetnacl/-/tweetnacl-1.0.3.tgz",
      "integrity": "sha512-6rt+RN7aOi1nGMyC4Xa5DdYiukl2UWCbcJft7YhxReBGQD7OAM8Pbxw6YMo4r2diNEA8FEmu32YOn9rhaiE5yw==",
      "license": "Unlicense"
    },
    "node_modules/type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha512-ZCmOJdvOWDBYJlzAoFkC+Q0+bUyEOS1ltgp1MGU03fqHG+dbi9tBFU2Rd9QKiDZFAYrhPh2JUf7rZRIuHRKtOg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "prelude-ls": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/typescript": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-5.2.2.tgz",
      "integrity": "sha512-mI4WrpHsbCIcwT9cF4FZvr80QUeKvsUsUvKDoR+X/7XHQH98xYD8YHZg7ANtz2GtZt/CBq2QJ0thkGJMHfqc1w==",
      "dev": true,
      "license": "Apache-2.0",
      "bin": {
        "tsc": "bin/tsc",
        "tsserver": "bin/tsserver"
      },
      "engines": {
        "node": ">=14.17"
      }
    },
    "node_modules/u3": {
      "version": "0.1.1",
      "resolved": "https://registry.npmjs.org/u3/-/u3-0.1.1.tgz",
      "integrity": "sha512-+J5D5ir763y+Am/QY6hXNRlwljIeRMZMGs0cT6qqZVVzzT3X3nFPXVyPOFRMOR4kupB0T8JnCdpWdp6Q/iXn3w==",
      "license": "MIT"
    },
    "node_modules/uc.micro": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/uc.micro/-/uc.micro-1.0.6.tgz",
      "integrity": "sha512-8Y75pvTYkLJW2hWQHXxoqRgV7qb9B+9vFEtidML+7koHUFapnVJAZ6cKs+Qjz5Aw3aZWHMC6u0wJE3At+nSGwA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/uglify-js": {
      "version": "3.17.4",
      "resolved": "https://registry.npmjs.org/uglify-js/-/uglify-js-3.17.4.tgz",
      "integrity": "sha512-T9q82TJI9e/C1TAxYvfb16xO120tMVFZrGA3f9/P4424DNu6ypK103y0GPFVa17yotwSyZW5iYXgjYHkGrJW/g==",
      "license": "BSD-2-Clause",
      "optional": true,
      "bin": {
        "uglifyjs": "bin/uglifyjs"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/underscore": {
      "version": "1.13.6",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.6.tgz",
      "integrity": "sha512-+A5Sja4HP1M08MaXya7p5LvjuM7K6q/2EaC0+iovj/wOcMsTzMvDFbasi/oSapiwOlt252IqsKqPjCl7huKS0A==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/uri-js": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.4.1.tgz",
      "integrity": "sha512-7rKUyy33Q1yc98pQ1DAmLtwX109F7TIfWlW1Ydo8Wl1ii1SeHieeh0HHfPeL2fMXK6z0s8ecKs9frCuLJvndBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "punycode": "^2.1.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/watchpack": {
      "version": "2.4.0",
      "resolved": "https://registry.npmjs.org/watchpack/-/watchpack-2.4.0.tgz",
      "integrity": "sha512-Lcvm7MGST/4fup+ifyKi2hjyIAwcdI4HRgtvTpIUxBRhB+RFtUh8XtDOxUfctVCnhVi+QQj49i91OyvzkJl6cg==",
      "license": "MIT",
      "dependencies": {
        "glob-to-regexp": "^0.4.1",
        "graceful-fs": "^4.1.2"
      },
      "engines": {
        "node": ">=10.13.0"
      }
    },
    "node_modules/webcrypto-core": {
      "version": "1.7.7",
      "resolved": "https://registry.npmjs.org/webcrypto-core/-/webcrypto-core-1.7.7.tgz",
      "integrity": "sha512-7FjigXNsBfopEj+5DV2nhNpfic2vumtjjgPmeDKk45z+MJwXKKfhPB7118Pfzrmh4jqOMST6Ch37iPAHoImg5g==",
      "license": "MIT",
      "dependencies": {
        "@peculiar/asn1-schema": "^2.3.6",
        "@peculiar/json-schema": "^1.1.12",
        "asn1js": "^3.0.1",
        "pvtsutils": "^1.3.2",
        "tslib": "^2.4.0"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/websocket-driver": {
      "version": "0.7.4",
      "resolved": "https://registry.npmjs.org/websocket-driver/-/websocket-driver-0.7.4.tgz",
      "integrity": "sha512-b17KeDIQVjvb0ssuSDF2cYXSg2iztliJ4B9WdsuB6J952qCPKmnVq4DyW5motImXHDC1cBT/1UezrJVsKw5zjg==",
      "license": "Apache-2.0",
      "dependencies": {
        "http-parser-js": ">=0.5.1",
        "safe-buffer": ">=5.1.0",
        "websocket-extensions": ">=0.1.1"
      },
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/websocket-extensions": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/websocket-extensions/-/websocket-extensions-0.1.4.tgz",
      "integrity": "sha512-OqedPIGOfsDlo31UNwYbCFMSaO9m9G/0faIHj5/dZFDMFqPTcx6UwqyOy3COEaEOg/9VsGIpdqn62W5KhoKSpg==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=0.8.0"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/word-wrap": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.5.tgz",
      "integrity": "sha512-BN22B5eaMMI9UMtjrGd5g5eCYPpCPDUy0FJXbYsaT5zYxjFOckS53SQDE3pWkVoWpHXVb3BrYcEN4Twa55B5cA==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/xmlcreate": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/xmlcreate/-/xmlcreate-2.0.4.tgz",
      "integrity": "sha512-nquOebG4sngPmGPICTS5EnxqhKbCmz5Ox5hsszI2T6U5qdrJizBc+0ilYSEjTSzU0yZcmvppztXe/5Al5fUwdg==",
      "license": "Apache-2.0",
      "optional": true
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@next/swc-darwin-x64": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-darwin-x64/-/swc-darwin-x64-14.0.1.tgz",
      "integrity": "sha512-625Z7bb5AyIzswF9hvfZWa+HTwFZw+Jn3lOBNZB87lUS0iuCYDHqk3ujuHCkiyPtSC0xFBtYDLcrZ11mF/ap3w==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-gnu": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-gnu/-/swc-linux-arm64-gnu-14.0.1.tgz",
      "integrity": "sha512-iVpn3KG3DprFXzVHM09kvb//4CNNXBQ9NB/pTm8LO+vnnnaObnzFdS5KM+w1okwa32xH0g8EvZIhoB3fI3mS1g==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-arm64-musl": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-arm64-musl/-/swc-linux-arm64-musl-14.0.1.tgz",
      "integrity": "sha512-mVsGyMxTLWZXyD5sen6kGOTYVOO67lZjLApIj/JsTEEohDDt1im2nkspzfV5MvhfS7diDw6Rp/xvAQaWZTv1Ww==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-gnu": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-gnu/-/swc-linux-x64-gnu-14.0.1.tgz",
      "integrity": "sha512-wMqf90uDWN001NqCM/auRl3+qVVeKfjJdT9XW+RMIOf+rhUzadmYJu++tp2y+hUbb6GTRhT+VjQzcgg/QTD9NQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-linux-x64-musl": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-linux-x64-musl/-/swc-linux-x64-musl-14.0.1.tgz",
      "integrity": "sha512-ol1X1e24w4j4QwdeNjfX0f+Nza25n+ymY0T2frTyalVczUmzkVD7QGgPTZMHfR1aLrO69hBs0G3QBYaj22J5GQ==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "linux"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-arm64-msvc": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-arm64-msvc/-/swc-win32-arm64-msvc-14.0.1.tgz",
      "integrity": "sha512-WEmTEeWs6yRUEnUlahTgvZteh5RJc4sEjCQIodJlZZ5/VJwVP8p2L7l6VhzQhT4h7KvLx/Ed4UViBdne6zpIsw==",
      "cpu": [
        "arm64"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-ia32-msvc": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-ia32-msvc/-/swc-win32-ia32-msvc-14.0.1.tgz",
      "integrity": "sha512-oFpHphN4ygAgZUKjzga7SoH2VGbEJXZa/KL8bHCAwCjDWle6R1SpiGOdUdA8EJ9YsG1TYWpzY6FTbUA+iAJeww==",
      "cpu": [
        "ia32"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/@next/swc-win32-x64-msvc": {
      "version": "14.0.1",
      "resolved": "https://registry.npmjs.org/@next/swc-win32-x64-msvc/-/swc-win32-x64-msvc-14.0.1.tgz",
      "integrity": "sha512-FFp3nOJ/5qSpeWT0BZQ+YE1pSMk4IMpkME/1DwKBwhg4mJLB9L+6EXuJi4JEwaJdl5iN+UUlmUD3IsR1kx5fAg==",
      "cpu": [
        "x64"
      ],
      "optional": true,
      "os": [
        "win32"
      ],
      "engines": {
        "node": ">= 10"
      }
    }
  }
}

'''
'''--- custom-auth/package.json ---
{
  "name": "custom-auth",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@near-js/accounts": "^0.1.4",
    "@near-js/biometric-ed25519": "0.2.0",
    "@near-js/crypto": "^0.0.5",
    "@near-js/keystores": "^0.0.5",
    "@near-js/providers": "^0.0.7",
    "@near-js/signers": "^0.0.5",
    "@near-js/transactions": "^0.2.1",
    "@types/bn.js": "^5.1.2",
    "axios": "^1.6.1",
    "bs58": "^5.0.0",
    "dotenv": "^16.3.1",
    "firebase": "^10.5.2",
    "firebase-admin": "^11.11.0",
    "near-api-js": "2.1.3",
    "near-seed-phrase": "^0.2.0",
    "next": "14.0.1",
    "react": "^18",
    "react-dom": "^18"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "typescript": "^5"
  }
}

'''
'''--- custom-auth/public/next.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>
'''
'''--- custom-auth/public/vercel.svg ---
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 283 64"><path fill="black" d="M141 16c-11 0-19 7-19 18s9 18 20 18c7 0 13-3 16-7l-7-5c-2 3-6 4-9 4-5 0-9-3-10-7h28v-3c0-11-8-18-19-18zm-9 15c1-4 4-7 9-7s8 3 9 7h-18zm117-15c-11 0-19 7-19 18s9 18 20 18c6 0 12-3 16-7l-8-5c-2 3-5 4-8 4-5 0-9-3-11-7h28l1-3c0-11-8-18-19-18zm-10 15c2-4 5-7 10-7s8 3 9 7h-19zm-39 3c0 6 4 10 10 10 4 0 7-2 9-5l8 5c-3 5-9 8-17 8-11 0-19-7-19-18s8-18 19-18c8 0 14 3 17 8l-8 5c-2-3-5-5-9-5-6 0-10 4-10 10zm83-29v46h-9V5h9zM37 0l37 64H0L37 0zm92 5-27 48L74 5h10l18 30 17-30h10zm59 12v10l-3-1c-6 0-10 4-10 10v15h-9V17h9v9c0-5 6-9 13-9z"/></svg>
'''
'''--- custom-auth/test.ts ---
import { NextResponse } from 'next/server';
import { KeyPair } from '@near-js/crypto';
// import { createAccount, submitTransaction, connect } from '../../../utils/meta-transactions';
import { InMemoryKeyStore } from '@near-js/keystores';
import { actionCreators } from "@near-js/transactions";
const { parseSeedPhrase, generateSeedPhrase } = require('near-seed-phrase');
const sha256 = require("js-sha256");
import BN from "bn.js";

// We take the user ID, hash it and use it as randomness
var hash = sha256.create();
hash.update("106286931906362609286");
console.log("HEX: " + hash.hex());
hash.array();
'''
'''--- custom-auth/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

'''
'''--- custom-auth/utils/meta-transactions.ts ---
import { Account } from '@near-js/accounts';
import { KeyPair, PublicKey } from '@near-js/crypto';
import type { KeyStore } from '@near-js/keystores';
import { InMemoryKeyStore } from '@near-js/keystores';
import { JsonRpcProvider } from '@near-js/providers';
import { InMemorySigner } from '@near-js/signers';
import type { SignedDelegate } from '@near-js/transactions';
import { actionCreators } from '@near-js/transactions';
import BN from 'bn.js';
import * as nearAPI from 'near-api-js';

/**
 * References: 
 * https://docs.near.org/develop/relayers/build-relayer
 * https://hackmd.io/@microchipgnu/meta-transactions-relayer-next-js?utm_source=preview-mode&utm_medium=rec
 * https://github.com/microchipgnu/bonsai
 * https://github.com/microchipgnu/bonsai/blob/main/src/app/api/relay/route.ts
 */

const { utils } = nearAPI;

export const { signedDelegate } = actionCreators;
const keyStore = new InMemoryKeyStore();

export const instatiateAccount = async (network: string, accountName: string, pk: string) => {
  const relayerKeyStore = await authenticatedKeyStore(network, accountName, pk);

  return await connect(accountName, relayerKeyStore, network);
};

export const authenticatedKeyStore = async (network: string, account: string, pk: string): Promise<KeyStore> => {
  await keyStore.setKey(network, account, KeyPair.fromString(pk));

  return keyStore;
};

export const randomKeyStore = async (network: string, account: string): Promise<KeyStore> => {
  const kp = KeyPair.fromRandom('ed25519');
  await keyStore.setKey(network, account, kp);

  return keyStore;
};

export const connect = async (accountId: string, keyStore: KeyStore, network = 'mainnet'): Promise<Account> => {
  const provider = new JsonRpcProvider({
    url: network == 'mainnet' ? 'https://rpc.mainnet.near.org' : 'https://rpc.testnet.near.org',
  });

  const signer = new InMemorySigner(keyStore);

  return new Account(
    {
      networkId: network,
      provider,
      signer,
      jsvmAccountId: '',
    },
    accountId,
  );
};

export const createAccount = async (implicitAccount: string, publicKey: string, network: string) => {
  const isMainnet = network === 'mainnet';
  const RELAYER_ACCOUNT: string | undefined = isMainnet
    ? process.env.NEXT_PUBLIC_RELAYER_ACCOUNT_ID_NEAR_MAINNET
    : process.env.NEXT_PUBLIC_RELAYER_ACCOUNT_ID_NEAR_TESTNET;
    
  if (!RELAYER_ACCOUNT) {
    throw new Error('Signer details not found in firebase');
  }

  const relayerPrivateKey = isMainnet
    ? (process.env.RELAYER_PRIVATE_KEY_NEAR_MAINNET as string)
    : (process.env.RELAYER_PRIVATE_KEY_NEAR_TESTNET as string);
  const relayerAccount = await instatiateAccount(network, RELAYER_ACCOUNT, relayerPrivateKey);
  await relayerAccount.createAccount(implicitAccount, PublicKey.fromString(publicKey), new BN('0'));
};

export const submitTransaction = async ({
  network = process.env.NEXT_PUBLIC_NETWORK_ID as string,
  delegate,
}: {
  network: string;
  delegate: SignedDelegate;
}) => {
  const isMainnet = network === 'mainnet';
  console.log("IS MAINNET: " + isMainnet);
  const RELAYER_ACCOUNT: string | undefined = isMainnet
    ? process.env.NEXT_PUBLIC_RELAYER_ACCOUNT_ID_NEAR_MAINNET
    : process.env.NEXT_PUBLIC_RELAYER_ACCOUNT_ID_NEAR_TESTNET;

  try {
    const relayerPrivateKey = isMainnet
      ? (process.env.RELAYER_PRIVATE_KEY_NEAR_MAINNET as string)
      : (process.env.RELAYER_PRIVATE_KEY_NEAR_TESTNET as string);

    if (!RELAYER_ACCOUNT || !relayerPrivateKey) {
      throw new Error('Signer details not found in firebase');
    }
    //Instatiate mintbus account that runs transactions
    const relayerAccount = await instatiateAccount(network, RELAYER_ACCOUNT, relayerPrivateKey);

    const result = await relayerAccount.signAndSendTransaction({
      actions: [signedDelegate(delegate)],
      receiverId: delegate.delegateAction.senderId,
    });

    return result;
  } catch (error) {
    throw error;
  }
};

'''
'''--- custom-auth/utils/schema.ts ---
import { PublicKey } from "@near-js/crypto";
import {
    AccessKey,
    AccessKeyPermission,
    Action,
    AddKey,
    CreateAccount,
    DelegateAction,
    DeleteAccount,
    DeleteKey,
    DeployContract,
    FullAccessPermission,
    FunctionCall,
    FunctionCallPermission,
    Signature,
    SignedDelegate,
    SignedTransaction,
    Stake,
    Transaction,
    Transfer,
} from "@near-js/transactions";

type Class<T = any> = new (...args: any[]) => T;

export const SCHEMA = new Map<Class, any>([
  [
    Signature,
    {
      kind: "struct",
      fields: [
        ["keyType", "u8"],
        ["data", [64]],
      ],
    },
  ],
  [
    SignedTransaction,
    {
      kind: "struct",
      fields: [
        ["transaction", Transaction],
        ["signature", Signature],
      ],
    },
  ],
  [
    Transaction,
    {
      kind: "struct",
      fields: [
        ["signerId", "string"],
        ["publicKey", PublicKey],
        ["nonce", "u64"],
        ["receiverId", "string"],
        ["blockHash", [32]],
        ["actions", [Action]],
      ],
    },
  ],
  [
    PublicKey,
    {
      kind: "struct",
      fields: [
        ["keyType", "u8"],
        ["data", [32]],
      ],
    },
  ],
  [
    AccessKey,
    {
      kind: "struct",
      fields: [
        ["nonce", "u64"],
        ["permission", AccessKeyPermission],
      ],
    },
  ],
  [
    AccessKeyPermission,
    {
      kind: "enum",
      field: "enum",
      values: [
        ["functionCall", FunctionCallPermission],
        ["fullAccess", FullAccessPermission],
      ],
    },
  ],
  [
    FunctionCallPermission,
    {
      kind: "struct",
      fields: [
        ["allowance", { kind: "option", type: "u128" }],
        ["receiverId", "string"],
        ["methodNames", ["string"]],
      ],
    },
  ],
  [FullAccessPermission, { kind: "struct", fields: [] }],
  [
    Action,
    {
      kind: "enum",
      field: "enum",
      values: [
        ["createAccount", CreateAccount],
        ["deployContract", DeployContract],
        ["functionCall", FunctionCall],
        ["transfer", Transfer],
        ["stake", Stake],
        ["addKey", AddKey],
        ["deleteKey", DeleteKey],
        ["deleteAccount", DeleteAccount],
        ["signedDelegate", SignedDelegate],
      ],
    },
  ],
  [CreateAccount, { kind: "struct", fields: [] }],
  [DeployContract, { kind: "struct", fields: [["code", ["u8"]]] }],
  [
    FunctionCall,
    {
      kind: "struct",
      fields: [
        ["methodName", "string"],
        ["args", ["u8"]],
        ["gas", "u64"],
        ["deposit", "u128"],
      ],
    },
  ],
  [Transfer, { kind: "struct", fields: [["deposit", "u128"]] }],
  [
    Stake,
    {
      kind: "struct",
      fields: [
        ["stake", "u128"],
        ["publicKey", PublicKey],
      ],
    },
  ],
  [
    AddKey,
    {
      kind: "struct",
      fields: [
        ["publicKey", PublicKey],
        ["accessKey", AccessKey],
      ],
    },
  ],
  [DeleteKey, { kind: "struct", fields: [["publicKey", PublicKey]] }],
  [DeleteAccount, { kind: "struct", fields: [["beneficiaryId", "string"]] }],
  [
    DelegateAction,
    {
      kind: "struct",
      fields: [
        ["senderId", "string"],
        ["receiverId", "string"],
        ["actions", [Action]],
        ["nonce", "u64"],
        ["maxBlockHeight", "u64"],
        ["publicKey", PublicKey],
      ],
    },
  ],

  [
    SignedDelegate,
    {
      kind: "struct",
      fields: [
        ["delegateAction", DelegateAction],
        ["signature", Signature],
      ],
    },
  ],
]);

'''