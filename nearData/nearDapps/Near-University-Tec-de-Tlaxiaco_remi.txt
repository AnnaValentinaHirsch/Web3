*GitHub Repository "Near-University-Tec-de-Tlaxiaco/remi"*

'''--- README.md ---
# Smart Contract REMI :briefcase:

## ¿Cómo desplejar este contrato inteligente?
---
### Pré-requisitos.
* Debe tener [Nodejs](https://nodejs.org/en/) instalado en su versión 12.0 o mayor.
* Debe tener instalado [Yarn](https://yarnpkg.com/). Para saber si lo tiene, ejecute el comando yarn --version . 
* En caso de no tenerlo, puede instalarlo ejecutando el comando: sudo npm install -g yarn.
* Instale las dependencias de yarn ejecutando yarn install.
* Debe tener una cuenta en la [testnet de NEAR](https://wallet.testnet.near.org/) para realizar pruebas.
* Debe tener [NEAR-CLI](https://github.com/near/near-cli) instalado globalmente en su ordenador. Para saber si ya lo tiene instalado, ejecute near --version. En caso de no tenerlo, instálelo ejecutando el comando sudo npm install -g near-cli 

Una vez teniendo instalados los requisitos necesarios ahora si puede proceder a ejecutarlo. 

## Despliegue e instalación.
---
* Clone el repositorio con ``git clone`` https://github.com/Near-University-Tec-de-Tlaxiaco/remi 
* Inicie sesión con su wallet de tesnet utilizando ``near login``.
* Ejecute el comando ``yarn asb`` para compilar el contrato.
* Para desplegar el contrato utilize la siguiente sintaxis ``near deploy --accountId (Cuenta de Testnet) --wasnFile build/release/remi.wasm``.
* Con el código ``near call`` llame al método que desee ejecutar, a continuación se muestra un ejemplo llamando al método que permite escribir una reseña: ``near call ejemplo.testnet setReseña '{"titulo":"Excelente servicio","texto":"El mueble se ve muy bien y también huele bien","calificacion":4}' --accountId ejemplo.testnet``.

## Autores

- [Gandhi Salazar Cruz](https://github.com/Band-hi)
- [Francisco Isaías Ballesteros Huerta](https://github.com/IsaHuerta23)
- [Rigoberto Ramírez Nicolás](https://github.com/Rigoberto2001)
- [Lizzete León González](https://github.com/Lissete7)

###

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports")

'''
'''--- asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json"
}
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/example.spec.ts ---
import {logging, PersistentVector} from "near-sdk-as";
import {guardarReseña, Reseña, guardarPrestador, Prestador, guardarUsuario, Usuario} from "../model"
import {setReseña, getReseña, deleteReseña, tamañoReseña, getTodasReseñas, getUsuarios, setPrestador} from ".."
const titulo = 'Esplendido';
const texto = 'Excelente servicio, nunca habia recibido mejores muebles en mi vida';
const calificacion = 9;

let reseñaEjemplo = new Reseña(titulo, texto, calificacion);

describe("Publicar Reseña", () => {
    it('No se publico la reseña debido a un error', () => {
        expect(setReseña('Esplendido', 'Excelente servicio, nunca habia recibido mejores muebles en mi vida', 9)).toStrictEqual
        (reseñaEjemplo);
    })
})

const resñaInd = guardarReseña.length;
const data = new Array<Reseña>(resñaInd);
for(let i=0; i < resñaInd; i++) {
    data[i] = guardarReseña[i]
}

describe("Obtener Reseña", () => {
  it('No hay reseñas publicadas, o hay un error', () => {
    expect(getTodasReseñas()).toStrictEqual(data)
  })
})

const usuarioInd = guardarUsuario.length;
const contsData = new Array<Usuario>(usuarioInd);
for(let x = 0; x < usuarioInd; x++) {
  contsData[x] = guardarUsuario[x]
}
describe("Obtener numero de Usuarios", () => {
  it('No hay usuarios, o existe un error', () => {
      expect(getUsuarios()).toStrictEqual(contsData)
  })
})
  
const especialidad = 'Carpintero';
const telefono = '9531585254';
const direccion = 'Calle Girasol #6';
const historial = '4 trabajos hechos';
  
let prestadorEjemplo = new Prestador(especialidad, telefono, direccion, historial);
  
describe("Guardar al Prestador", () => {
  it('No se guardo debido a un error', () => {
    expect(setPrestador('Carpintero', '9531585254', 'Calle Girasol #6', '4 trabajos hechos')).toStrictEqual
      (prestadorEjemplo);
  })
})
'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import {u128, logging, PersistentUnorderedMap} from "near-sdk-as";
import {guardarReseña, Reseña, guardarPrestador, Prestador, guardarUsuario, Usuario} from "./model"

export const reseñas = new PersistentUnorderedMap<string, string>("Reseñas");

const indReseña = guardarReseña.length;
const indUsuario = guardarUsuario.length;

//Método para guardar reseñas
export function setReseña(titulo : String, texto : String, calificacion : i32): Reseña {
    const newRsñ = new Reseña(titulo, texto, calificacion);
    guardarReseña.push(newRsñ);
    logging.log("Nueva reseña publicada");
    return newRsñ;
}

//Metodo para obtener todas las reseñas
export function getTodasReseñas(): Reseña[] {
    const data = new Array<Reseña>(indReseña);
    for(let i = 0; i < indReseña; i++) {
        data[i] = guardarReseña[i];
        logging.log(i);
    }
    return data;
}

//Método para borrar reseñas
export function deleteReseña(reseñaIndice : i32): bool{
    if(guardarReseña.length < reseñaIndice) {
        logging.log('La reseña no existe.');
        return false;
    }
    guardarReseña.swap_remove(reseñaIndice);
    logging.log('Reseña eliminada.');
    return true;
}

//Metodo para obtener el numero de reseñas
export function tamañoReseña(): number {
    return guardarReseña.length;
}

//Método para buscar reseñas
export function getReseña(Buscar: String): Reseña {
    const data = new Array<Reseña>(indReseña);
    for(let i = 0; i < indReseña; i++) {
        data[i] = guardarReseña[i];
        if (data[i].titulo==Buscar) {
            return guardarReseña[i];
        }
    }
    logging.log("No se encontro el comentario")
    return guardarReseña[indReseña+2];
}

//Metodo para obtener usuarios
export function getUsuarios(): Usuario[] {
    const data = new Array<Usuario>(indUsuario);
    for(let i = 0; i < indUsuario; i++) {
        data[i] = guardarUsuario[i]
    }
    return data;
}

//Método para guardar prestadores
export function setPrestador(especialidad : String, telefono : String, direccion : String, historial : String): Prestador {
    const newPres = new Prestador(especialidad, telefono, direccion, historial);
    guardarPrestador.push(newPres);
    logging.log("Nuevo Prestador registrado");
    return newPres;
}
'''
'''--- assembly/model.ts ---
import {PersistentVector, u128, context} from "near-sdk-as";

export class Reseña{
    titulo : String;
    texto : String
    calificacion : number;
    autor : String;
    constructor(titulo : String, texto : String, calificacion : number){
        this.titulo = titulo;
        this.texto = texto;
        this.calificacion = calificacion;
        this.autor = context.sender;
    }
}

export class Usuario{
    usuario : String;
    constructor(){
        this.usuario = context.sender;
    }
}

export class Prestador{
    especialidad : String;
    telefono : String;
    direccion : String;
    historial : String;
    constructor(especialidad : String, telefono : String, direccion : String, historial : String){
        this.especialidad = especialidad;
        this.telefono = telefono;
        this.direccion = direccion;
        this.historial = historial;
    }
}

export const guardarReseña = new PersistentVector<Reseña>("v");
export const guardarUsuario = new PersistentVector<Usuario>("v");
export const guardarPrestador = new PersistentVector<Prestador>("v");
'''
'''--- assembly/tsconfig.json ---

'''
'''--- package.json ---
{
  "name": "remi",
  "version": "1.0.0",
  "description": "practica 6",
  "main": "index.js",
  "scripts": {
    "test": "asp"
  },
  "author": "remi-team",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''