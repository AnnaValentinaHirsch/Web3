*GitHub Repository "GiongNetwork/pristorage"*

'''--- .env ---
CONTRACT_NAME=219c68358efca00092a24d84d9de614a277eb3dae7da7e70cf4f37208a0fa41f

'''
'''--- .gitlab-ci.yml ---
image: node

cache:
  paths:
    - node_modules/

before_script:
  - apt-get update -qq
  - apt-get install -qq git
  - "which ssh-agent || ( apt-get install -qq openssh-client )"
  - eval $(ssh-agent -s)
  - ssh-add <(echo "$SSH_PROD_PRIVATE_KEY")
  - mkdir -p ~/.ssh
  - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

deploy:
  stage: deploy
  script:
    - bash deploy/deploy.sh
  only:
    - master
'''
'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- GUIDE.md ---
Vi storage
==================

PriStorage is an application for users who want to store their files in private, which demands a simple application for users to encrypt and manage files stored on Ipfs or Filecoin network using Web3Storage service.This application uses Web3 Storage service for storing file and Near smart contract to manage these files.

Requirement
===========
To use this application, you need to:
1. Create a near wallet account
2. Sign up Web3.Storage service

Quick Start
===========
1. ### Sign up
    Go to [https://pristorage.surge.sh/](https://pristorage.surge.sh/) and click to the login button
    The app will redirect to Near wallet [https://wallet.testnet.near.org/](https://wallet.testnet.near.org/) and then allow the app to access wallet (cause this app is now under development so we have just deploy on testnet).
    Go to [https://web3.storage/](https://web3.storage/) and login with your account and copy your Web3.Storage token.
    Comeback the page and paste copied token into the form, wait for the SeedPhrase file is downloaded (this file named as {your_near_wallet_account_id}_SeedPhrase.txt), you are now logged in.
    Make sure you store the SeedPhrase file carefully because it would be used to login your account and used to generate your rsa key pair.

2. ### Sign in
    Go to [https://pristorage.surge.sh/](https://pristorage.surge.sh/), if you have not logged in on this browser, you have to provide the SeedPhrase store in the SeedPhrase file downloaded when you signed up with.
    If the SeedPhrase is correct, you are now logged in.

3. ### Create folder in "My Folders" tab
    Click on "Create folder" button and enter the folder name you, then click "Ok", This app will call a function which stores a json document on the near network for managing the folder.
    The app will redirect to the Near wallet.
    Click on "Allow" button, if the transaction is successful, your folder is created.
    You can go to a folder and create a subfolder in this way too.

4. ### Create folder in "Shared Folders" tab
    Click on "Create folder" button and enter the folder name you, then click "Ok", This app will call a function which stores a json document (which has an attribute is folder_password - encrypted by the key pair and use to encrypt all the files in this folder or its subfolder) on the near network for managing the folder.
    The app will redirect to the Near wallet.
    Click on "Allow" button, if the transaction is successful, your folder is created.
    You can go to a folder and create a subfolder in this way too.

5. ### Upload a file in "My Folders" tab
    You need to make sure that you are accessing a folder to show the "Upload file" button.
    Click on "Upload file" and click or drop you file into the dropzone. This app will create a password randomly, then the file will be encrypted by the password and the password will be encrypted by the key pair. After the process, this app will call a function which stores file on IPFS/Filecoin and stores a json document on the near network for managing the file.
    The app will redirect to the Near wallet.
    Click on "Allow" button, if the transaction is successful, your file is uploaded.

5. ### Upload a file in "Shared Folders" tab
    You need to make sure that you are accessing a folder to show the "Upload file" button.
    Click on "Upload file" and click or drop you file into the dropzone. This app find the root folder of the file (the root folder contain the file) and get its folder_password, then the file will be encrypted by the folder_password. After the process, this app will call a function which stores file on IPFS/Filecoin and stores a json document on the near network for managing the file.
    The app will redirect to the Near wallet.
    Click on "Allow" button, if the transaction is successful, your file is uploaded.

6. ### Share a file or folder in "My folders" tab and "Shared folders"
    Click on the share button of file/folder, then enter the account id of the user you wanna to share it with.
    Allow the transaction on near wallet (like the previous section), if the transaction is successful, the file/folder will render in the tab "Files Shared With Me" (if you shared file) or "Folders Shared With Me" (if you shared file).
    Note: In the "My Folders" tab, you only share a single file, on the other hand, the "Shared Folders" tab allow you to share whole shared folder (the folder in root directory) but you cannot share the subfolder or the file in the shared folder.

7. ### Download file
    Click on the download button of file and wait for app decrypt the file and download it if the encrypt process is successful.

8. ### Delete file/folder
    Click on the delete button of file/folder and allow the incoming transaction, if the transaction is successful, your file/folder is deleted.
    Note: the file is note completely remove on Web3.Storage server the because the Web3.Storage did not provide an api for delete file, we just remove documents contain file's information

9. ### Get shared file/folder with your own
    Go to the tab "Files shared with me" to get the single files shared from other users shared to you
    Go to the tab "Folders shared with me" to get the single files shared from other users shared to you

'''
'''--- README.md ---
PriStorage
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `Vi storage 2.0.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `Vi storage 2.0.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account Vi storage 2.0.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'Vi storage 2.0.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
Vi storage 2.0 Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen, setup_alloc};
use near_sdk::collections::{UnorderedMap, UnorderedSet};
use std::option::Option::{Some, None};
use near_sdk::serde::{Serialize, Deserialize};

setup_alloc!();

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct File {
    cid: String,
    name: String,
    encrypted_password: Option<String>,
    file_type: String, // type of file (png, jpeg)
    last_update: u64,
    updated_by: String,
    created_at: u64,
    created_by: String
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Folder {
    name: String,
    files: Vec<String>,
    parent: String,
    children: Vec<String>,
    created_at: u64
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct SharedFolder {
    name: String,
    files: Vec<String>,
    parent: String,
    children: Vec<String>,
    folder_password: Option<String>,
    created_by: String,
    created_at: u64
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct FolderV2 {
    name: String,
    files: Vec<String>,
    parent: String,
    children: Vec<String>,
    folder_type: Option<u8>, // 1 for common folder, 2 for shared folder
    folder_password: Option<String>,
    created_by: String,
    created_at: u64,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct User {
    public_key: String,
    encrypted_token: String
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct SharedFileDoc {
    file: String,
    share_password: String,
    permissions: u8,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct SharedFolderDoc {
    folder: String,
    share_password: String,
    permissions: u8,
}

#[derive(Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct SharedDoc {
    doc_id: String,
    share_password: String,
    permissions: u8,
    created_at: u64,
    doc_type: u8 // 1 for file, 2 for folder
}

#[near_bindgen]
#[derive(BorshSerialize, BorshDeserialize)]
pub struct Contract {

    // v2 developing
    folders_v2:  UnorderedMap<String, FolderV2>,
    users: UnorderedMap<String, User>,
    files: UnorderedMap<String, File>,
    shared_docs: UnorderedMap<String, SharedDoc>,
    shared_docs_of_user: UnorderedMap<String, UnorderedSet<String>>, // mapping from user to a mapping user => doc which the user own

    // v1
    folders: UnorderedMap<String, Folder>,
    shared_folders: UnorderedMap<String, SharedFolder>,
    
    shared_file_docs: UnorderedMap<String, SharedFileDoc>,
    shared_folder_docs: UnorderedMap<String, SharedFolderDoc>,

    shared_file_to_user: UnorderedMap<String, UnorderedSet<String>>,
    user_to_shared_file: UnorderedMap<String, UnorderedMap<String, UnorderedSet<String>>>,

    shared_folder_to_user: UnorderedMap<String, UnorderedSet<String>>,
    user_to_shared_folder: UnorderedMap<String, UnorderedMap<String, UnorderedSet<String>>>,
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            folders: UnorderedMap::new(b"f".to_vec()),
            shared_folders: UnorderedMap::new(b"sf".to_vec()),
            folders_v2: UnorderedMap::new(b"fv2".to_vec()),
            users: UnorderedMap::new(b"u".to_vec()),
            files: UnorderedMap::new(b"fl".to_vec()),
            shared_docs: UnorderedMap::new(b"fd".to_vec()),
            shared_docs_of_user: UnorderedMap::new(b"sdou".to_vec()),

            shared_file_docs: UnorderedMap::new(b"sfld".to_vec()),
            shared_folder_docs:UnorderedMap::new(b"sfdd".to_vec()),

            shared_file_to_user: UnorderedMap::new(b"sfltu".to_vec()),
            user_to_shared_file: UnorderedMap::new(b"utsfl".to_vec()),

            shared_folder_to_user: UnorderedMap::new(b"sfdtu".to_vec()),
            user_to_shared_folder: UnorderedMap::new(b"utsfd".to_vec())
        }
    }
}

#[near_bindgen]
impl Contract {

    pub fn sign_up(&mut self, _public_key: String, _encrypted_token: String, _created_at: u64) {
        env::log(format!("public_key : '{}', encrypted_token: {}", _public_key, _encrypted_token).as_bytes());
        let account_id = env::signer_account_id();
        let user = User {
            public_key: _public_key,
            encrypted_token: _encrypted_token
        };
        self.users.insert(&account_id, &user);
        let root = Folder {
            name: String::from("root"),
            files: Vec::new(),
            parent: String::from(&account_id[..]),
            children: Vec::new(),
            created_at: _created_at
        };
        let root_shared_folder = SharedFolder {
            name: String::from("root"),
            files: Vec::new(),
            parent: String::from(&account_id[..]),
            children: Vec::new(),
            folder_password: None,
            created_by: String::from(&account_id[..]),
            created_at: _created_at
        };
        let root_shared_folder_v2 = FolderV2 {
            name: String::from("root"),
            files: Vec::new(),
            parent: String::from(&account_id[..]),
            children: Vec::new(),
            folder_password: None,
            created_by: String::from(&account_id[..]),
            created_at: _created_at,
            folder_type: None,
        };
        self.folders.insert(&String::from(&account_id[..]), &root);
        self.shared_folders.insert(&String::from(&account_id[..]), &root_shared_folder);
        self.folders_v2.insert(&String::from(&account_id[..]), &root_shared_folder_v2);
    }

    pub fn get_user(&self, account_id: String) -> Option<User> {
        env::log(format!("Account : '{}'", account_id).as_bytes());
        match self.users.get(&account_id) {
            Some(user) => Some(user),
            None => None
        }
    }

    pub fn verify_accessible(
        &self, 
        root_folder: &Option<FolderV2>, 
        folder_id: String,
        account_id: String,
    ) {
        match root_folder {
            Some(folder) => {
                let owner = &folder.parent;
                let root_folder_id = folder_id;
                let share_doc_id = format!("{}_{}_{}", owner, account_id, root_folder_id);
                if !owner.eq(&account_id) {
                    match self.shared_docs.get(&share_doc_id) {
                        Some(share_doc) => {
                            assert_eq!(
                                share_doc.permissions,
                                2,
                                "You do not have permission to change this folder {}",
                                share_doc_id
                            );
                        },
                        None => {
                            assert!(
                                false, 
                                "You do not shared with this doc {}",
                                share_doc_id
                            );
                        }
                    }
                }
            },
            None => {
                assert!(false, "You do not have permission to change this folder"); 
            }
        }
    }

    pub fn validate_folder_id(&self, _folder_id: String) {
        match self.users.get(&String::from(&_folder_id[..])) {
            Some(_) => {
                assert!(false, "Invalid folder id"); 
            },
            None => {}
        }
        match self.folders_v2.get(&_folder_id) {
            Some(_) => {
                assert!(false, "Folder id already exists"); 
            },
            None => {}
        }
    }

    pub fn verify_user(&self ,account_id: String, owner_id: String) {
        assert_eq!(
            account_id,
            owner_id,
            "Owner not match: '{}', '{}'", account_id, String::from(&owner_id[..])
        );
    }

    pub fn validate_file_id(&self, _file_id: String) {
        match self.files.get(&_file_id) {
            Some(_) => {
                assert!(false, "file id already exists"); 
            },
            None => {}
        }
    }

    pub fn validate_folder_type(&self, root_folder: &Option<FolderV2>, folder_type: u8) {
        match root_folder {
            Some(root_folder_parsed) => {
                if root_folder_parsed.folder_type.is_some() {
                    assert_eq!(
                        root_folder_parsed.folder_type.unwrap(), 
                        folder_type, 
                        "bad behavior"
                    );
                } else {
                    assert!(false, "root folder not found")
                }
            },
            None => {
                assert!(false, "root folder not found")
            }
        }
    }

    pub fn create_folder_v2(
        &mut self, 
        _id: String, 
        _name: String, 
        _parent: String, 
        _password: Option<String>, 
        _type: Option<u8>, 
        _created_at: u64
    ) {
        self.validate_folder_id(String::from(&_id));
        let _account_id = env::signer_account_id();
        if _parent.ne(&_account_id) {
            let (root_folder, folder_id) = self.get_root(String::from(&_parent[..]));
            self.verify_accessible(&root_folder, folder_id, String::from(&_account_id[..]));
        }
        let mut folder_password = None;
        let mut folder_type = None;
        if _parent.eq(&_account_id) && _type.is_some() {
            if  _type.unwrap() == 2 {
                folder_password = _password;
            }
            folder_type = _type
        }
        let _parent_id: &str = _parent.as_str();
        match self.folders_v2.get(&_parent) {
            Some(mut folder) => {
                folder.children.push(String::from(&_id[..]));
                self.folders_v2.insert(&_parent, &folder);
                let new_folder = FolderV2 {
                    name: String::from(&_name[..]),
                    files: Vec::new(),
                    parent: String::from(&_parent[..]),
                    children: Vec::new(),
                    folder_password: folder_password,
                    folder_type: folder_type,
                    created_by: _account_id,
                    created_at: _created_at
                };
                self.folders_v2.insert(&_id, &new_folder);
            },
            None => {
                env::log(format!("Folder not found: '{}'", _parent).as_bytes());
            }
        };
    }

    pub fn create_file_v2(
        &mut self, 
        _folder: String, 
        _file_id: String, 
        _cid: String, 
        _name: String, 
        _encrypted_password: Option<String>, 
        _file_type: String, 
        _created_at: u64
    ) {
        self.validate_file_id(String::from(&_file_id[..]));
        let _account_id = env::signer_account_id();
        let (root_folder, folder_id) = self.get_root(String::from(&_folder[..]));
        self.verify_accessible(&root_folder, folder_id, String::from(&_account_id[..]));
        match self.folders_v2.get(&_folder) {
            Some(mut folder) => {
                let file = File {
                    cid: _cid,
                    name: _name,
                    encrypted_password: _encrypted_password,
                    file_type: _file_type,
                    created_at: _created_at,
                    created_by: String::from(&_account_id[..]),
                    updated_by: _account_id,
                    last_update: _created_at,
                };
                let index = folder.files.iter().position(|x| *x == _file_id);
                if index.is_none() {
                    folder.files.push(String::from(&_file_id[..]));
                }
                self.folders_v2.insert(&_folder, &folder);
                self.files.insert(&_file_id, &file);
            },
            None => {
                env::log(format!("Folder not found: '{}'", _folder).as_bytes());
            }
        };
    }

    pub fn share_file_v2(
        &mut self, 
        _file_id: String, 
        _share_with: String, 
        _parent_folder: String, 
        _password: String,
        _permissions: u8,
        _created_at: u64
    ) {
        let _account_id = env::signer_account_id();
        assert_ne!(
            String::from(&_account_id[..]), 
            String::from(&_share_with[..]), 
            "cannot share to your self {} - {}", &_account_id, &_share_with
        );
        let (root_folder, folder_id) = self.get_root(String::from(&_parent_folder[..]));
        
        self.verify_accessible(&root_folder, folder_id, String::from(&_account_id[..]));
        self.validate_folder_type(&root_folder, 1);
        match self.folders_v2.get(&_parent_folder) {
            Some(folder) => {
                let index = folder.files.iter().position(|f| String::from(&f[..]).eq(&_file_id[..]));
                assert_eq!(
                    index.is_none(), 
                    false, 
                    "file {} not in folder {}", _file_id, _parent_folder
                );
            },
            None => {
                env::log(format!("Folder not found: '{}'", _parent_folder).as_bytes());
            }
        }
        let share_doc_id = format!("{}_{}_{}", _account_id, _share_with, _file_id);
        let share_doc = SharedDoc {
            doc_id: _file_id,
            share_password: _password,
            permissions: _permissions,
            created_at: _created_at,
            doc_type: 1
        };
        self.shared_docs.insert(&share_doc_id, &share_doc);
        match self.shared_docs_of_user.get(&_share_with) {
            Some(mut user_shared_with_docs) => {
                user_shared_with_docs.insert(&share_doc_id);
                self.shared_docs_of_user.insert(&_share_with ,&user_shared_with_docs);
            },
            None => {
                let mut files_prefix = Vec::with_capacity(33);
                files_prefix.push(b's');
                files_prefix.extend(env::sha256(_account_id.as_bytes()));
                let mut new_shared_set = UnorderedSet::new(files_prefix.to_vec());
                new_shared_set.insert(&share_doc_id);
                self.shared_docs_of_user.insert(&_share_with ,&new_shared_set);
            }
        }
    }

    pub fn share_folder_v2(
        &mut self, 
        _folder_id: String, 
        _share_with: String, 
        _password: String,
        _permissions: u8,
        _created_at: u64,
    ) {
        let _account_id = env::signer_account_id();
        assert_ne!(
            String::from(&_account_id[..]), 
            String::from(&_share_with[..]), 
            "cannot share to your self"
        );
        let (root_folder, root_folder_id) = self.get_root(String::from(&_folder_id[..]));
        assert_eq!(
            String::from(&root_folder_id[..]), 
            String::from(&_folder_id[..]), 
            "this is not the root folder"
        );
        self.verify_accessible(&root_folder, root_folder_id, String::from(&_account_id[..]));
        self.validate_folder_type(&root_folder, 2);
        let share_doc_id = format!("{}_{}_{}", _account_id, _share_with, _folder_id);
        let share_doc = SharedDoc {
            doc_id: _folder_id,
            share_password: _password,
            permissions: _permissions,
            created_at: _created_at,
            doc_type: 2
        };
        self.shared_docs.insert(&share_doc_id, &share_doc);
        match self.shared_docs_of_user.get(&_share_with) {
            Some(mut user_shared_with_docs) => {
                user_shared_with_docs.insert(&share_doc_id);
                self.shared_docs_of_user.insert(&_share_with ,&user_shared_with_docs);
            },
            None => {
                let mut files_prefix = Vec::with_capacity(33);
                files_prefix.push(b's');
                files_prefix.extend(env::sha256(_account_id.as_bytes()));
                let mut new_shared_set = UnorderedSet::new(files_prefix.to_vec());
                new_shared_set.insert(&share_doc_id);
                self.shared_docs_of_user.insert(&_share_with ,&new_shared_set);
            }
        }
    }

    pub fn remove_file_v2(&mut self, _folder: String, _file: String) {
        let _account_id = env::signer_account_id();
        let (root_folder, _) = self.get_root(String::from(&_folder[..]));
        match root_folder {
            Some(root_folder_unwrapped) => {
                let owner_id = root_folder_unwrapped.parent;
                self.verify_user(_account_id, owner_id);
            },
            None => {
                assert!(false, "root folder not found")
            }
        }
        match self.folders_v2.get(&_folder) {
            Some(mut folder) => {
                let index = folder.files.iter().position(|x| *x == _file).unwrap();
                folder.files.remove(index);
                self.folders_v2.insert(&_folder, &folder);
                self.files.remove(&_file);
            },
            None => {
                env::log(format!("Folder not found: '{}'", _folder).as_bytes());
            }
        }
    }

    pub fn remove_folder_v2(&mut self, _folder: String) {
        let _account_id = env::signer_account_id();
        let (root_folder, _) = self.get_root(String::from(&_folder[..]));
        match root_folder {
            Some(root_folder_unwrapped) => {
                let owner_id = root_folder_unwrapped.parent;
                self.verify_user(_account_id, owner_id);
            },
            None => {
                assert!(false, "root folder not found")
            }
        }
        match self.folders_v2.get(&_folder) {
            Some(folder) => {
                match self.folders_v2.get(&folder.parent) {
                    Some(mut parent_folder) => {
                        let index = parent_folder.children.iter().position(|x| *x == _folder).unwrap();
                        parent_folder.children.remove(index);
                        self.folders_v2.remove(&_folder);
                        self.folders_v2.insert(&folder.parent, &parent_folder);
                    },
                    None => {}
                }
                self.folders.remove(&_folder);
            },
            None => {
                env::log(format!("Folder not found: '{}'", _folder).as_bytes());
            }
        };
    }

    pub fn get_shared_doc_of_user(&self, _account_id: String) -> Vec<String> {
        match self.shared_docs_of_user.get(&_account_id) {
            Some(shared_docs) => {
                shared_docs.to_vec()
            },
            None => {
                vec![]
            }
        }
    }

    pub fn get_shared_doc_detail(&self, _doc_id: String) -> (Option<SharedDoc>, Option<FolderV2>, Option<File>, String) {
        match self.shared_docs.get(&_doc_id) {
            Some(doc) => {
                let file = self.files.get(&doc.doc_id);
                let folder = self.folders_v2.get(&doc.doc_id);
                (Some(doc), folder, file, _doc_id)
            }
            None => {
                (None, None, None, _doc_id)
            }
        }
    } 

    pub fn get_root(&self, folder_id: String) -> (Option<FolderV2>, String) {
        let mut result = String::from("");
        match self.folders_v2.get(&folder_id) {
            Some(folder_by_id) => {
                let mut current_id = String::from(&folder_id[..]);
                let mut parent_id = String::from(&folder_by_id.parent[..]);
                while current_id.ne(&parent_id[..]) {
                    match self.folders_v2.get(&parent_id) {
                        Some(folder) => {
                            let temp = current_id.clone();
                            current_id = String::from(&parent_id[..]);
                            parent_id = folder.parent;
                            if current_id.eq(&parent_id) {
                                result = String::from(&temp[..]);
                            }
                        },
                        None => {},
                    };
                };
            }, 
            None => {
            }
        }
        match self.folders_v2.get(&result) {
            Some(root) => {
                (Some(root), result)
            }, 
            None => {
                (None, result)
            }
        }
    }

    pub fn get_file_info(&self, file_id: String) -> Option<File> {
        match self.files.get(&file_id) {
            Some(file) => Some(file),
            None => None,
        }
    }

    pub fn get_folder_info_v2(&self, folder_id: String) -> Option<FolderV2> {
        match self.folders_v2.get(&folder_id) {
            Some(folder) => Some(folder),
            None => None,
        }
    }

}

// #[cfg(test)]
// mod tests {
//     use super::*;
//     use near_sdk::MockedBlockchain;
//     use near_sdk::{testing_env, VMContext};

//     // mock the context for testing, notice "signer_account_id" that was accessed above from env::
//     fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
//         VMContext {
//             current_account_id: "alice_near".to_string(),
//             signer_account_id: "bob_near".to_string(),
//             signer_account_pk: vec![0, 1, 2],
//             predecessor_account_id: "carol_near".to_string(),
//             input,
//             block_index: 0,
//             block_timestamp: 0,
//             account_balance: 0,
//             account_locked_balance: 0,
//             storage_usage: 0,
//             attached_deposit: 0,
//             prepaid_gas: 10u64.pow(18),
//             random_seed: vec![0, 1, 2],
//             is_view,
//             output_data_receivers: vec![],
//             epoch_height: 19,
//         }
//     }

//     #[test]
//     fn set_then_get_greeting() {
//         let context = get_context(vec![], false);
//         testing_env!(context);
//         let mut contract = Contract::default();
//         // contract.set_greeting("howdy".to_string());
//         // assert_eq!(
//         //     "howdy".to_string(),
//         //     contract.get_greeting("bob_near".to_string())
//         // );
//     }

//     #[test]
//     fn get_default_greeting() {
//         let context = get_context(vec![], true);
//         testing_env!(context);
//         let contract = Contract::default();
//         // this test did not call set_greeting so should return the default "Hello" greeting
//         // assert_eq!(
//         //     "Hello".to_string(),
//         //     contract.get_greeting("francis.near".to_string())
//         // );
//     }
// }
'''
'''--- deploy/deploy.sh ---
#!/bin/bash

DEPLOY_SERVER=$DEPLOY_SERVER
SERVER_FOLDER="pristorage.io"

# Building React output
yarn install
yarn build:web

echo "Deploying to ${DEPLOY_SERVER}"
scp -r dist/* ubuntu@${DEPLOY_SERVER}:/var/www/${SERVER_FOLDER}/html/

echo "Finished copying the build files"
'''
'''--- dist/avatar.svg ---
<svg id="457bf273-24a3-4fd8-a857-e9b918267d6a" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="698" height="698" viewBox="0 0 698 698"><defs><linearGradient id="b247946c-c62f-4d08-994a-4c3d64e1e98f" x1="349" y1="698" x2="349" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="gray" stop-opacity="0.25"/><stop offset="0.54" stop-color="gray" stop-opacity="0.12"/><stop offset="1" stop-color="gray" stop-opacity="0.1"/></linearGradient></defs><title>profile pic</title><g opacity="0.5"><circle cx="349" cy="349" r="349" fill="url(#b247946c-c62f-4d08-994a-4c3d64e1e98f)"/></g><circle cx="349.68" cy="346.77" r="341.64" fill="#f5f5f5"/><path d="M601,790.76a340,340,0,0,0,187.79-56.2c-12.59-68.8-60.5-72.72-60.5-72.72H464.09s-45.21,3.71-59.33,67A340.07,340.07,0,0,0,601,790.76Z" transform="translate(-251 -101)" fill="#38d39f"/><circle cx="346.37" cy="339.57" r="164.9" fill="#333"/><path d="M293.15,476.92H398.81a0,0,0,0,1,0,0v84.53A52.83,52.83,0,0,1,346,614.28h0a52.83,52.83,0,0,1-52.83-52.83V476.92a0,0,0,0,1,0,0Z" opacity="0.1"/><path d="M296.5,473h99a3.35,3.35,0,0,1,3.35,3.35v81.18A52.83,52.83,0,0,1,346,610.37h0a52.83,52.83,0,0,1-52.83-52.83V476.35A3.35,3.35,0,0,1,296.5,473Z" fill="#fdb797"/><path d="M544.34,617.82a152.07,152.07,0,0,0,105.66.29v-13H544.34Z" transform="translate(-251 -101)" opacity="0.1"/><circle cx="346.37" cy="372.44" r="151.45" fill="#fdb797"/><path d="M489.49,335.68S553.32,465.24,733.37,390l-41.92-65.73-74.31-26.67Z" transform="translate(-251 -101)" opacity="0.1"/><path d="M489.49,333.78s63.83,129.56,243.88,54.3l-41.92-65.73-74.31-26.67Z" transform="translate(-251 -101)" fill="#333"/><path d="M488.93,325a87.49,87.49,0,0,1,21.69-35.27c29.79-29.45,78.63-35.66,103.68-69.24,6,9.32,1.36,23.65-9,27.65,24-.16,51.81-2.26,65.38-22a44.89,44.89,0,0,1-7.57,47.4c21.27,1,44,15.4,45.34,36.65.92,14.16-8,27.56-19.59,35.68s-25.71,11.85-39.56,14.9C608.86,369.7,462.54,407.07,488.93,325Z" transform="translate(-251 -101)" fill="#333"/><ellipse cx="194.86" cy="372.3" rx="14.09" ry="26.42" fill="#fdb797"/><ellipse cx="497.8" cy="372.3" rx="14.09" ry="26.42" fill="#fdb797"/></svg>
'''
'''--- dist/doc.svg ---
<svg id="b340c189-66f3-4f05-9055-65c54b2ae483" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="777.69685" height="613.28514" viewBox="0 0 777.69685 613.28514"><path d="M352.94583,215.69156a10.05577,10.05577,0,0,0-8.543,12.83638l-29.07453,20.7762,17.33071,6.66935,24.95268-20.75192a10.11027,10.11027,0,0,0-4.66584-19.53Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><path d="M350.24195,246.986l-36.06422,36.28719a29.89622,29.89622,0,0,1-18.41948,8.62953l-44.5634,4.066a12.27993,12.27993,0,0,1-9.11541-2.8646,11.99558,11.99558,0,0,1,5.29328-20.95052l45.52648-9.69376,41.44849-30.5531a3.79287,3.79287,0,0,1,3.76933.0281l11.27183,9.23372a3.70275,3.70275,0,0,1,1.86773,3.88642A3.618,3.618,0,0,1,350.24195,246.986Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M782.628,266.48724a12.13173,12.13173,0,0,0-6.71771-12.199L551.46863,144.59115a12.0995,12.0995,0,0,0-16.18578,5.55125l-.00411.00842L451.09862,322.3844a12.12136,12.12136,0,0,0,5.55968,16.18989L681.09991,448.27138a12.12137,12.12137,0,0,0,16.1899-5.55968l84.18011-172.23357A12.01171,12.01171,0,0,0,782.628,266.48724Z" transform="translate(-211.15157 -143.35743)" fill="#f2f2f2"/><path d="M651.14179,648.76059H359.91726a13.84469,13.84469,0,0,1-13.8291-13.8291V239.582a13.84469,13.84469,0,0,1,13.8291-13.8291H651.14179a13.84469,13.84469,0,0,1,13.8291,13.8291v395.3495A13.84469,13.84469,0,0,1,651.14179,648.76059Z" transform="translate(-211.15157 -143.35743)" fill="#fff"/><circle cx="226.0083" cy="181.28514" r="19" fill="#e6e6e6"/><path d="M408.20138,376.57177a54.43119,54.43119,0,0,0,8.39893,3.8706l.51318.17774A54.76653,54.76653,0,0,0,435.32,383.71239c1.24756,0,2.44922-.04345,3.572-.12842a54.13483,54.13483,0,0,0,8.12305-1.12011c1.46826-.3208,2.93188-.70459,4.34814-1.13916.34253-.10108.65967-.2002,1.00684-.30908a55.18285,55.18285,0,0,0,16.052-8.31788,24.80532,24.80532,0,0,0-1.279-2.14892,27.42455,27.42455,0,0,0-22.98315-12.40625h-10a27.516,27.516,0,0,0-25.0254,16.08789A24.98384,24.98384,0,0,0,408.20138,376.57177Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M443.60748,381.99078a3.61841,3.61841,0,0,0-1.7801.6245,53.17031,53.17031,0,0,0,7.97082-1.10638Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M438.31173,273.08257a55.56576,55.56576,0,0,0-27.72021,103.72,54.6388,54.6388,0,0,0,8.83007,4.11005l.52.18a55.25847,55.25847,0,0,0,18.37012,3.12c1.21,0,2.41992-.04,3.60986-.13a54.65,54.65,0,0,0,8.19-1.13c1.51025-.33,2.99023-.72,4.39013-1.15.33985-.1.65967-.2,1.00977-.31a55.57115,55.57115,0,0,0-17.19971-108.41Zm32.23975,97.19a52.68148,52.68148,0,0,1-15.94971,8.41c-.31006.1-.63037.2-.9502.3-1.33007.41-2.73.76995-4.16992,1.07995a51.23077,51.23077,0,0,1-7.75,1.08c-1.12988.08-2.28027.12-3.41992.12a52.5441,52.5441,0,0,1-17.39014-2.95l-.48974-.17a51.23572,51.23572,0,0,1-8.76026-4.12,52.57628,52.57628,0,1,1,58.87989-3.75Z" transform="translate(-211.15157 -143.35743)" fill="#ccc"/><path d="M364.67642,494.92223" transform="translate(-211.15157 -143.35743)" fill="#f2f2f2"/><path d="M651.14179,648.76059H359.91726a13.84469,13.84469,0,0,1-13.8291-13.8291V239.582a13.84469,13.84469,0,0,1,13.8291-13.8291H651.14179a13.84469,13.84469,0,0,1,13.8291,13.8291v395.3495A13.84469,13.84469,0,0,1,651.14179,648.76059ZM359.91726,227.37984A12.216,12.216,0,0,0,347.71512,239.582v395.3495a12.216,12.216,0,0,0,12.20214,12.20215H651.14179a12.216,12.216,0,0,0,12.20215-12.20215V239.582a12.216,12.216,0,0,0-12.20215-12.20215Z" transform="translate(-211.15157 -143.35743)" fill="#ccc"/><path d="M594.7642,328.43312H512.35768a6.51929,6.51929,0,1,1,0-13.03858H594.7642a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.65628,350.43573H512.35768a6.51929,6.51929,0,1,1,0-13.03858h109.2986a6.51929,6.51929,0,0,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M594.64422,434.82487H389.40277a6.51929,6.51929,0,1,1,0-13.03858H594.64422a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.5363,456.82748H389.40277a6.51929,6.51929,0,1,1,0-13.03858H621.5363a6.51929,6.51929,0,0,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M594.64422,507.39792H389.40277a6.51929,6.51929,0,1,1,0-13.03858H594.64422a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.5363,529.40053H389.40277a6.51929,6.51929,0,0,1,0-13.03858H621.5363a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M594.64422,579.971H389.40277a6.51929,6.51929,0,0,1,0-13.03859H594.64422a6.51929,6.51929,0,1,1,0,13.03859Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.5363,601.97358H389.40277a6.51929,6.51929,0,0,1,0-13.03859H621.5363a6.5193,6.5193,0,0,1,0,13.03859Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M772.628,379.48724a12.13173,12.13173,0,0,0-6.71771-12.199L541.46863,257.59115a12.0995,12.0995,0,0,0-16.18578,5.55125l-.00411.00842L441.09862,435.3844a12.12136,12.12136,0,0,0,5.55968,16.18989L671.09991,561.27138a12.12137,12.12137,0,0,0,16.1899-5.55968l84.18011-172.23357A12.01171,12.01171,0,0,0,772.628,379.48724Z" transform="translate(-211.15157 -143.35743)" fill="#fff"/><path d="M772.628,379.48724a12.13173,12.13173,0,0,0-6.71771-12.199L541.46863,257.59115a12.0995,12.0995,0,0,0-16.18578,5.55125l-.00411.00842L441.09862,435.3844a12.12136,12.12136,0,0,0,5.55968,16.18989L671.09991,561.27138a12.12137,12.12137,0,0,0,16.1899-5.55968l84.18011-172.23357A12.01171,12.01171,0,0,0,772.628,379.48724ZM686.01043,555.0864a10.69317,10.69317,0,0,1-14.28521,4.9056L447.2836,450.29492a10.69321,10.69321,0,0,1-4.90557-14.28521l84.18011-172.23357a10.69317,10.69317,0,0,1,14.28518-4.90559L765.28494,368.56764a10.69321,10.69321,0,0,1,4.90561,14.28519Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><path d="M748.14785,387.3187,689.36749,507.58406a3.369,3.369,0,0,1-4.50563,1.549l-.00011,0-204.16-99.78435a2.83892,2.83892,0,0,1-.41747-.24582,3.367,3.367,0,0,1-1.13054-4.26189l58.78038-120.26542a3.369,3.369,0,0,1,4.50569-1.54893h0L746.59984,382.811a3.369,3.369,0,0,1,1.549,4.50565l0,.00009Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><circle cx="357.75864" cy="208.28689" r="29.56668" fill="#00bfa6"/><path d="M612.20158,474.21733,481.88833,410.526a2.95392,2.95392,0,0,1-.46807-.2766l113.80964-76.6327a4.80317,4.80317,0,0,1,7.51178,3.67142l6.34775,91.85777.30612,4.39658Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><polygon points="401.05 330.86 356.558 309.114 393.905 288.064 396.594 286.548 397.938 285.789 398.244 290.185 401.05 330.86" opacity="0.2" style="isolation:isolate"/><path d="M684.75906,509.6802,572.0488,454.59244l37.34677-21.05,2.68877-1.51719L660.75207,404.592c3.19024-1.7977,7.76143.22749,8.79816,3.667a5.71792,5.71792,0,0,1,.16006.71138Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><polygon points="125.844 376.82 138.103 376.819 143.936 329.531 125.841 329.532 125.844 376.82" fill="#ffb8b8"/><path d="M333.86788,516.1748l24.1438-.001h.001a15.38605,15.38605,0,0,1,15.38647,15.38623v.5l-39.53051.00146Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><polygon points="30.551 369.014 43.253 371.498 58.881 323.688 40.135 320.021 30.551 369.014" fill="#ffb8b8"/><path d="M239.27428,507.59042l25.01436,4.89306.001.0002a16.24294,16.24294,0,0,1,12.82227,19.05981l-.10135.518L236.05472,524.05Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M354.8316,357.05617a10.05575,10.05575,0,0,0-14.13593-6.15884l-25.5542-24.97923L311.61562,344.15l24.80726,20.92555a10.11027,10.11027,0,0,0,18.40872-8.01938Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><circle cx="48.87092" cy="60.56582" r="24.56103" fill="#ffb8b8"/><path d="M254.865,228.86026c1.30495.571,3.97731-9.82732,2.78024-11.90707-1.78024-3.09293-1.675-3.07071-2.85681-5.117s-1.44623-4.84712.08417-6.64761,5.072-1.56163,5.77042.69581c-.4493-4.2878,3.79189-7.73454,7.993-8.70313s8.63244-.36723,12.85668-1.22917c4.90243-1.00032,10.00316-5.10972,8.04719-10.5007a7.5932,7.5932,0,0,0-1.48106-2.43408c-2.25992-2.54094-5.42117-3.62594-8.512-4.675-6.43006-2.18246-13.036-4.39233-19.82212-4.15141a28.7977,28.7977,0,0,0-25.44625,18.60924,26.156,26.156,0,0,0-1.08344,4.02534c-2.32924,12.52423,4.94368,24.87794,16.75623,29.64715Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M248.83468,363.78417a3.75449,3.75449,0,0,1-1.77783-3.7168l-11.083-54.90136-11.23437-42.13477h.00024A21.07382,21.07382,0,0,1,235.291,238.94042l7.427-7.02734,16.20239,6.98047,7.699,7.82812a44.02687,44.02687,0,0,1,22.99316,27.26074L301.9609,316.2373,330.47823,358.664a3.77282,3.77282,0,0,1-.36938,4.67969C326.14157,367.61132,248.83468,363.78417,248.83468,363.78417Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M323.54806,359.88378l-42.05078-29.13965A29.89622,29.89622,0,0,1,269.77047,314.124L257.9504,270.96483a12.28,12.28,0,0,1,1.22119-9.47656,11.99558,11.99558,0,0,1,21.5542,1.53613l17.52954,43.12012,37.3501,35.44629a3.79288,3.79288,0,0,1,.63355,3.71582l-7.11328,12.7168a3.70279,3.70279,0,0,1-3.49854,2.52051A3.618,3.618,0,0,1,323.54806,359.88378Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M236.188,505.05272a3.74374,3.74374,0,0,1-.44751-3.42285l19.45362-70.71972,1.438-69.29493,65.48633-4.49121.31787-.02148,19.72412,35.749a91.97727,91.97727,0,0,1,11.10035,36.23535l6.5,71.2295a3.71631,3.71631,0,0,1-3.25074,4.06445l-19.7456,1.87793a3.67409,3.67409,0,0,1-4.07886-3.11133l-8.01807-72.38281-28.84961-48.74512-9.68408,51.31836L266.071,504.207a3.7189,3.7189,0,0,1-3.45825,2.42578l-23.40015.00977A3.63923,3.63923,0,0,1,236.188,505.05272Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M737.61617,737.64257H244.15157a33.03734,33.03734,0,0,1-33-33v-271a33.03734,33.03734,0,0,1,33-33h60.50269a32.92486,32.92486,0,0,1,22.19507,8.57959l65.61157,46.85107a23.18228,23.18228,0,0,0,15.65869,6.06934H740.68014A33.00029,33.00029,0,0,1,773.67672,495.625l-3.064,209.5A33.13847,33.13847,0,0,1,737.61617,737.64257Z" transform="translate(-211.15157 -143.35743)" fill="#fff"/><path d="M733.23214,721.64257H247.071a15.93751,15.93751,0,0,1-15.91944-15.9195V430.292A15.93754,15.93754,0,0,1,247.071,414.37252a14.09636,14.09636,0,0,1,14.08056,14.08056v258.27A14.9364,14.9364,0,0,0,276.071,701.64251H731.5903a10.12538,10.12538,0,0,1,9.91528,7.5874,9.72,9.72,0,0,1-4.30689,11.18457A7.59512,7.59512,0,0,1,733.23214,721.64257Z" transform="translate(-211.15157 -143.35743)" fill="#f2f2f2"/><path d="M494.57588,589.36994l-1.28-1.28a1.37,1.37,0,0,1-.06356-1.9364q.0307-.03286.06356-.0636l11.23-11.24a1.37,1.37,0,0,1,1.93644-.0636q.03282.03076.06356.0636l11.23,11.23a1.39,1.39,0,0,1,.03454,1.96546l-.03454.03454-1.28,1.28a1.39,1.39,0,0,1-1.96546.03455l-.03454-.03455-6.64-7v16.61a1.37994,1.37994,0,0,1-1.36993,1.38995l-.01007.00006h-1.85a1.39,1.39,0,0,1-1.39-1.39h0V582.38l-6.64,7a1.39,1.39,0,0,1-1.9656.02472Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><path d="M505.50591,564.64a22.79,22.79,0,1,1-22.79,22.79h0a22.81,22.81,0,0,1,22.79-22.79m0-3a25.79,25.79,0,1,0,25.79,25.79h0A25.79,25.79,0,0,0,505.50591,561.64Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><path d="M737.61617,737.64257H244.15157a33.03734,33.03734,0,0,1-33-33v-271a33.03734,33.03734,0,0,1,33-33h60.50269a32.92486,32.92486,0,0,1,22.19507,8.57959l65.61157,46.85107a23.18228,23.18228,0,0,0,15.65869,6.06934H740.68014A33.00029,33.00029,0,0,1,773.67672,495.625l-3.064,209.5A33.13847,33.13847,0,0,1,737.61617,737.64257Zm-493.4646-335a31.03529,31.03529,0,0,0-31,31v271a31.03529,31.03529,0,0,0,31,31h493.4646a31.12957,31.12957,0,0,0,30.99659-30.54688l3.06421-209.5a31,31,0,0,0-30.99683-31.45312H408.11959a25.17915,25.17915,0,0,1-16.96216-6.55127l-65.61132-46.85108a30.93108,30.93108,0,0,0-20.89185-8.09765Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><polygon points="568.285 599.561 556.025 599.561 552.193 552.273 568.287 552.274 568.285 599.561" fill="#ffb8b8"/><path d="M782.56291,754.803l-39.53051-.00147v-.5a15.38605,15.38605,0,0,1,15.38647-15.38623h.001l24.1438.001Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><polygon points="705.285 599.561 693.025 599.561 687.193 552.273 705.287 552.274 705.285 599.561" fill="#ffb8b8"/><path d="M919.56291,754.803l-39.53051-.00147v-.5a15.38605,15.38605,0,0,1,15.38647-15.38623h.001l24.1438.001Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M876.1253,596.73307a11.29143,11.29143,0,0,0,.29141-14.3014,9.29926,9.29926,0,0,0-1.071-1.09138l9.234-34.09151-15.39037,5.10584-6.4092,31.5911a11.37213,11.37213,0,0,0,1.01721,12.44942A7.89882,7.89882,0,0,0,876.1253,596.73307Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><path d="M875.53292,575.76171a3.90859,3.90859,0,0,1-.57641-.043l-8.01953-1.20947a4.34336,4.34336,0,0,1-3.0127-2.0874,5.60344,5.60344,0,0,1-.70313-3.87256l10.00538-55.88184-6.78565-35.90137c-1.30835-6.90918,2.06665-13.8872,7.85108-16.23193a10.72756,10.72756,0,0,1,10.49316,1.34424,14.31655,14.31655,0,0,1,5.62134,10.20849l4.80249,45.77637-.05738.19922L879.69479,572.311A4.47572,4.47572,0,0,1,875.53292,575.76171Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><circle cx="662.01317" cy="272.83111" r="24.56103" fill="#ffb8b8"/><path d="M860.58956,530.35888a4.97146,4.97146,0,0,1-1.78906-.333l-38.82056-14.93164a4.98327,4.98327,0,0,1-3.16137-5.32764l1.55908-11.69287a26.50127,26.50127,0,0,1,6.24975-23.59033l.94532-1.04,11.48535-20.94385a12.25972,12.25972,0,0,1,16.73071-4.80761l20.28223,11.334a12.238,12.238,0,0,1,5.65014,6.82519,37.406,37.406,0,0,1-.5725,25.19629L865.26193,527.1538A5.03505,5.03505,0,0,1,860.58956,530.35888Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><path d="M758.85177,731.3081l-.05273-.01026a5.0008,5.0008,0,0,1-3.92164-6.05957l29.74854-130.03955a350.67931,350.67931,0,0,1,20.102-60.146l12.65625-28.85644,47.22608,21.56006,6.74291,12.33252a120.69737,120.69737,0,0,1,7.97632,43.02246l47.98658,140.63183a4.99969,4.99969,0,0,1-3.90967,6.54639l-26.269-.29687a4.04456,4.04456,0,0,1-.751.06347,4.96678,4.96678,0,0,1-4.62134-3.13476l-54.85425-142.186a1.0056,1.0056,0,0,0-.96191-.61963.97054.97054,0,0,0-.90283.65674l-52.04761,142.894a4.97557,4.97557,0,0,1-5.58789,3.21Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M794.76536,571.39216a10.05576,10.05576,0,0,0,5.36511-14.45584l23.523-26.90067-18.39942-2.50893-19.517,25.93a10.11027,10.11027,0,0,0,9.02832,17.93546Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><path d="M805.854,552.44189a5.00894,5.00894,0,0,1-2.34766-.58594l-8.27783-4.415a5.00071,5.00071,0,0,1-1.86865-7.09131l30.57422-48.17725,5.30151-36.35644a14.03461,14.03461,0,1,1,27.52148,5.356l-10.946,44.811-36.06323,44.60449A4.98359,4.98359,0,0,1,805.854,552.44189Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><path d="M851.0572,395.92355c2.841-9.31634,19.25481-13.47286,32.89789-9.60742s23.44419,14.0001,25.72575,23.90877c5.05239,21.9422-21.30043,39.75058-16.525,61.69533,3.15948,14.51885,21.43586,28.24626,42.02041,31.56157-22.68517,4.74615-50.37341.57437-71.41-10.75935-13.09259-7.05379-24.07717-17.69856-23.91119-28.43533.10049-6.501,4.23589-12.24949,9.29313-17.21585s11.11108-9.38126,15.75221-14.56516,7.85664-11.391,6.50229-17.97171-8.23545-13.4434-17.4938-15.35808Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M987.84843,756.64257h-381a1,1,0,0,1,0-2h381a1,1,0,0,1,0,2Z" transform="translate(-211.15157 -143.35743)" fill="#ccc"/></svg>
'''
'''--- dist/logo.svg ---
<svg enable-background="new 0 0 342 90" viewBox="0 0 342 90" xmlns="http://www.w3.org/2000/svg"><path d="m171.2 18.8v52.5c0 .4-.3.8-.8.8h-5.5c-2.5 0-4.9-1.3-6.3-3.4l-24.8-38.3.8 19.1v21.9c0 .4-.3.8-.8.8h-7.2c-.4 0-.8-.3-.8-.8v-52.6c0-.4.3-.8.8-.8h5.4c2.5 0 4.9 1.3 6.3 3.4l24.8 38.2-.8-19.1v-21.7c0-.4.3-.8.8-.8h7.2c.6 0 .9.3.9.8z"/><path d="m245 72h-7.6c-.5 0-.9-.5-.7-1l20.2-52.3c.2-.4.6-.7 1-.7h9.6c.5 0 .9.3 1 .7l20.3 52.3c.2.5-.2 1-.7 1h-7.6c-.3 0-.6-.2-.7-.5l-16.3-43c-.2-.6-1.2-.6-1.4 0l-16.3 43c-.2.3-.5.5-.8.5z"/><path d="m341.8 70.8-15.2-19.4c8.6-1.6 13.6-7.4 13.6-16.3 0-10.2-6.6-17.1-18.4-17.1h-21.2c-.6 0-1.1.5-1.1 1.1 0 4 3.2 7.2 7.2 7.2h14.3c7.1 0 10.5 3.6 10.5 8.9s-3.3 8.9-10.5 8.9h-20.2c-.6 0-1.1.5-1.1 1.1v26c0 .4.3.8.8.8h7.2c.4 0 .8-.3.8-.8v-19.3h8.3l13.2 17.2c1.4 1.9 3.6 2.9 6 2.9h5.5c.4 0 .7-.7.3-1.2z"/><path d="m222.2 18h-33.5c-.6 0-1 .4-1 1 0 4 3.3 7.3 7.3 7.3h27.2c.4 0 .8-.3.8-.8v-6.8c-.1-.4-.4-.7-.8-.7zm0 45.7h-25c-.4 0-.8-.3-.8-.8v-13.5c0-.4.3-.8.8-.8h23.1c.4 0 .8-.3.8-.8v-6.8c0-.4-.3-.8-.8-.8h-31.5c-.6 0-1.1.5-1.1 1.1v29.5c0 .6.5 1.1 1.1 1.1h33.4c.4 0 .8-.3.8-.8v-6.8c-.1-.3-.4-.6-.8-.6z"/><path d="m72.2 4.6-18.8 27.9c-1.3 1.9 1.2 4.2 3 2.6l18.5-16.1c.5-.4 1.2-.1 1.2.6v50.3c0 .7-.9 1-1.3.5l-56-67c-1.8-2.2-4.4-3.4-7.3-3.4h-2c-5.2 0-9.5 4.3-9.5 9.6v70.8c0 5.3 4.3 9.6 9.6 9.6 3.3 0 6.4-1.7 8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6l-18.5 16c-.5.4-1.2.1-1.2-.6v-50.2c0-.7.9-1 1.3-.5l56 67c1.8 2.2 4.5 3.4 7.3 3.4h2c5.3 0 9.6-4.3 9.6-9.6v-70.8c-.1-5.3-4.4-9.6-9.7-9.6-3.3 0-6.4 1.7-8.2 4.6z"/></svg>
'''
'''--- package.json ---
{
  "name": "pristorage",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "parcel build src/index.html --no-scope-hoist --public-url ./",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "cp -R dist/* /var/www/pristorage.io/html/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug",
    "start": "echo The app is starting! It will automatically open in your browser when ready && env-cmd -f .env parcel src/index.html --open",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand"
  },
  "devDependencies": {
    "@babel/core": "^7.19.1",
    "@babel/preset-env": "^7.19.1",
    "@babel/preset-react": "^7.18.6",
    "assert": "^2.0.0",
    "babel-jest": "~26.6.2",
    "buffer": "^6.0.3",
    "crypto-browserify": "^3.12.0",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.6.0",
    "nodemon": "~2.0.3",
    "parcel": "^2.0.0",
    "process": "^0.11.10",
    "querystring-es3": "^0.2.1",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4",
    "stream-browserify": "^3.0.0",
    "string_decoder": "^1.3.0",
    "url": "^0.11.0"
  },
  "dependencies": {
    "@ant-design/icons": "^4.7.0",
    "@reduxjs/toolkit": "^1.6.2",
    "antd": "^4.16.13",
    "axios": "^0.22.0",
    "comlink": "^4.3.1",
    "crypto-js": "^4.1.1",
    "eth-crypto": "^2.1.0",
    "formik": "^2.2.9",
    "ipfs-car": "^0.5.8",
    "lodash": "^4.17.21",
    "moment": "^2.29.1",
    "near-api-js": "~0.41.0",
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "react-redux": "^7.2.5",
    "react-router-dom": "^5.3.0",
    "regenerator-runtime": "~0.13.5",
    "tweetnacl": "^1.0.3",
    "uuid": "^8.3.2",
    "web3.storage": "^3.3.2",
    "yup": "^0.32.11"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": "> 0.5%, last 2 versions, not dead",
  "build": {
    "appId": "com.pri-storage.app"
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, {useState} from 'react'
import {
    BrowserRouter as Router,
    Switch,
    Link
} from "react-router-dom";
import './global.css'
import GuardedRoute from './components/GuardedRoute';
import routers from './router/'
import 'antd/dist/antd.css';
import MainLayout from './layout/MainLayout'
import {Provider} from 'react-redux';
import store from './store/store'

export default function App() {
    return (
        <>
        <Provider store={store}>
            <Router>
                <MainLayout>
                    <Switch>
                        {routers.map((route, i) => {
                            return (
                                <GuardedRoute key={i} {...route} />
                            )
                        })}
                    </Switch>
                </MainLayout>
            </Router>
        </Provider>
        </>
    )
}
'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/assets/avatar.svg ---
<svg id="457bf273-24a3-4fd8-a857-e9b918267d6a" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="698" height="698" viewBox="0 0 698 698"><defs><linearGradient id="b247946c-c62f-4d08-994a-4c3d64e1e98f" x1="349" y1="698" x2="349" gradientUnits="userSpaceOnUse"><stop offset="0" stop-color="gray" stop-opacity="0.25"/><stop offset="0.54" stop-color="gray" stop-opacity="0.12"/><stop offset="1" stop-color="gray" stop-opacity="0.1"/></linearGradient></defs><title>profile pic</title><g opacity="0.5"><circle cx="349" cy="349" r="349" fill="url(#b247946c-c62f-4d08-994a-4c3d64e1e98f)"/></g><circle cx="349.68" cy="346.77" r="341.64" fill="#f5f5f5"/><path d="M601,790.76a340,340,0,0,0,187.79-56.2c-12.59-68.8-60.5-72.72-60.5-72.72H464.09s-45.21,3.71-59.33,67A340.07,340.07,0,0,0,601,790.76Z" transform="translate(-251 -101)" fill="#38d39f"/><circle cx="346.37" cy="339.57" r="164.9" fill="#333"/><path d="M293.15,476.92H398.81a0,0,0,0,1,0,0v84.53A52.83,52.83,0,0,1,346,614.28h0a52.83,52.83,0,0,1-52.83-52.83V476.92a0,0,0,0,1,0,0Z" opacity="0.1"/><path d="M296.5,473h99a3.35,3.35,0,0,1,3.35,3.35v81.18A52.83,52.83,0,0,1,346,610.37h0a52.83,52.83,0,0,1-52.83-52.83V476.35A3.35,3.35,0,0,1,296.5,473Z" fill="#fdb797"/><path d="M544.34,617.82a152.07,152.07,0,0,0,105.66.29v-13H544.34Z" transform="translate(-251 -101)" opacity="0.1"/><circle cx="346.37" cy="372.44" r="151.45" fill="#fdb797"/><path d="M489.49,335.68S553.32,465.24,733.37,390l-41.92-65.73-74.31-26.67Z" transform="translate(-251 -101)" opacity="0.1"/><path d="M489.49,333.78s63.83,129.56,243.88,54.3l-41.92-65.73-74.31-26.67Z" transform="translate(-251 -101)" fill="#333"/><path d="M488.93,325a87.49,87.49,0,0,1,21.69-35.27c29.79-29.45,78.63-35.66,103.68-69.24,6,9.32,1.36,23.65-9,27.65,24-.16,51.81-2.26,65.38-22a44.89,44.89,0,0,1-7.57,47.4c21.27,1,44,15.4,45.34,36.65.92,14.16-8,27.56-19.59,35.68s-25.71,11.85-39.56,14.9C608.86,369.7,462.54,407.07,488.93,325Z" transform="translate(-251 -101)" fill="#333"/><ellipse cx="194.86" cy="372.3" rx="14.09" ry="26.42" fill="#fdb797"/><ellipse cx="497.8" cy="372.3" rx="14.09" ry="26.42" fill="#fdb797"/></svg>
'''
'''--- src/assets/doc.svg ---
<svg id="b340c189-66f3-4f05-9055-65c54b2ae483" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" width="777.69685" height="613.28514" viewBox="0 0 777.69685 613.28514"><path d="M352.94583,215.69156a10.05577,10.05577,0,0,0-8.543,12.83638l-29.07453,20.7762,17.33071,6.66935,24.95268-20.75192a10.11027,10.11027,0,0,0-4.66584-19.53Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><path d="M350.24195,246.986l-36.06422,36.28719a29.89622,29.89622,0,0,1-18.41948,8.62953l-44.5634,4.066a12.27993,12.27993,0,0,1-9.11541-2.8646,11.99558,11.99558,0,0,1,5.29328-20.95052l45.52648-9.69376,41.44849-30.5531a3.79287,3.79287,0,0,1,3.76933.0281l11.27183,9.23372a3.70275,3.70275,0,0,1,1.86773,3.88642A3.618,3.618,0,0,1,350.24195,246.986Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M782.628,266.48724a12.13173,12.13173,0,0,0-6.71771-12.199L551.46863,144.59115a12.0995,12.0995,0,0,0-16.18578,5.55125l-.00411.00842L451.09862,322.3844a12.12136,12.12136,0,0,0,5.55968,16.18989L681.09991,448.27138a12.12137,12.12137,0,0,0,16.1899-5.55968l84.18011-172.23357A12.01171,12.01171,0,0,0,782.628,266.48724Z" transform="translate(-211.15157 -143.35743)" fill="#f2f2f2"/><path d="M651.14179,648.76059H359.91726a13.84469,13.84469,0,0,1-13.8291-13.8291V239.582a13.84469,13.84469,0,0,1,13.8291-13.8291H651.14179a13.84469,13.84469,0,0,1,13.8291,13.8291v395.3495A13.84469,13.84469,0,0,1,651.14179,648.76059Z" transform="translate(-211.15157 -143.35743)" fill="#fff"/><circle cx="226.0083" cy="181.28514" r="19" fill="#e6e6e6"/><path d="M408.20138,376.57177a54.43119,54.43119,0,0,0,8.39893,3.8706l.51318.17774A54.76653,54.76653,0,0,0,435.32,383.71239c1.24756,0,2.44922-.04345,3.572-.12842a54.13483,54.13483,0,0,0,8.12305-1.12011c1.46826-.3208,2.93188-.70459,4.34814-1.13916.34253-.10108.65967-.2002,1.00684-.30908a55.18285,55.18285,0,0,0,16.052-8.31788,24.80532,24.80532,0,0,0-1.279-2.14892,27.42455,27.42455,0,0,0-22.98315-12.40625h-10a27.516,27.516,0,0,0-25.0254,16.08789A24.98384,24.98384,0,0,0,408.20138,376.57177Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M443.60748,381.99078a3.61841,3.61841,0,0,0-1.7801.6245,53.17031,53.17031,0,0,0,7.97082-1.10638Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M438.31173,273.08257a55.56576,55.56576,0,0,0-27.72021,103.72,54.6388,54.6388,0,0,0,8.83007,4.11005l.52.18a55.25847,55.25847,0,0,0,18.37012,3.12c1.21,0,2.41992-.04,3.60986-.13a54.65,54.65,0,0,0,8.19-1.13c1.51025-.33,2.99023-.72,4.39013-1.15.33985-.1.65967-.2,1.00977-.31a55.57115,55.57115,0,0,0-17.19971-108.41Zm32.23975,97.19a52.68148,52.68148,0,0,1-15.94971,8.41c-.31006.1-.63037.2-.9502.3-1.33007.41-2.73.76995-4.16992,1.07995a51.23077,51.23077,0,0,1-7.75,1.08c-1.12988.08-2.28027.12-3.41992.12a52.5441,52.5441,0,0,1-17.39014-2.95l-.48974-.17a51.23572,51.23572,0,0,1-8.76026-4.12,52.57628,52.57628,0,1,1,58.87989-3.75Z" transform="translate(-211.15157 -143.35743)" fill="#ccc"/><path d="M364.67642,494.92223" transform="translate(-211.15157 -143.35743)" fill="#f2f2f2"/><path d="M651.14179,648.76059H359.91726a13.84469,13.84469,0,0,1-13.8291-13.8291V239.582a13.84469,13.84469,0,0,1,13.8291-13.8291H651.14179a13.84469,13.84469,0,0,1,13.8291,13.8291v395.3495A13.84469,13.84469,0,0,1,651.14179,648.76059ZM359.91726,227.37984A12.216,12.216,0,0,0,347.71512,239.582v395.3495a12.216,12.216,0,0,0,12.20214,12.20215H651.14179a12.216,12.216,0,0,0,12.20215-12.20215V239.582a12.216,12.216,0,0,0-12.20215-12.20215Z" transform="translate(-211.15157 -143.35743)" fill="#ccc"/><path d="M594.7642,328.43312H512.35768a6.51929,6.51929,0,1,1,0-13.03858H594.7642a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.65628,350.43573H512.35768a6.51929,6.51929,0,1,1,0-13.03858h109.2986a6.51929,6.51929,0,0,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M594.64422,434.82487H389.40277a6.51929,6.51929,0,1,1,0-13.03858H594.64422a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.5363,456.82748H389.40277a6.51929,6.51929,0,1,1,0-13.03858H621.5363a6.51929,6.51929,0,0,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M594.64422,507.39792H389.40277a6.51929,6.51929,0,1,1,0-13.03858H594.64422a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.5363,529.40053H389.40277a6.51929,6.51929,0,0,1,0-13.03858H621.5363a6.51929,6.51929,0,1,1,0,13.03858Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M594.64422,579.971H389.40277a6.51929,6.51929,0,0,1,0-13.03859H594.64422a6.51929,6.51929,0,1,1,0,13.03859Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M621.5363,601.97358H389.40277a6.51929,6.51929,0,0,1,0-13.03859H621.5363a6.5193,6.5193,0,0,1,0,13.03859Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><path d="M772.628,379.48724a12.13173,12.13173,0,0,0-6.71771-12.199L541.46863,257.59115a12.0995,12.0995,0,0,0-16.18578,5.55125l-.00411.00842L441.09862,435.3844a12.12136,12.12136,0,0,0,5.55968,16.18989L671.09991,561.27138a12.12137,12.12137,0,0,0,16.1899-5.55968l84.18011-172.23357A12.01171,12.01171,0,0,0,772.628,379.48724Z" transform="translate(-211.15157 -143.35743)" fill="#fff"/><path d="M772.628,379.48724a12.13173,12.13173,0,0,0-6.71771-12.199L541.46863,257.59115a12.0995,12.0995,0,0,0-16.18578,5.55125l-.00411.00842L441.09862,435.3844a12.12136,12.12136,0,0,0,5.55968,16.18989L671.09991,561.27138a12.12137,12.12137,0,0,0,16.1899-5.55968l84.18011-172.23357A12.01171,12.01171,0,0,0,772.628,379.48724ZM686.01043,555.0864a10.69317,10.69317,0,0,1-14.28521,4.9056L447.2836,450.29492a10.69321,10.69321,0,0,1-4.90557-14.28521l84.18011-172.23357a10.69317,10.69317,0,0,1,14.28518-4.90559L765.28494,368.56764a10.69321,10.69321,0,0,1,4.90561,14.28519Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><path d="M748.14785,387.3187,689.36749,507.58406a3.369,3.369,0,0,1-4.50563,1.549l-.00011,0-204.16-99.78435a2.83892,2.83892,0,0,1-.41747-.24582,3.367,3.367,0,0,1-1.13054-4.26189l58.78038-120.26542a3.369,3.369,0,0,1,4.50569-1.54893h0L746.59984,382.811a3.369,3.369,0,0,1,1.549,4.50565l0,.00009Z" transform="translate(-211.15157 -143.35743)" fill="#e6e6e6"/><circle cx="357.75864" cy="208.28689" r="29.56668" fill="#00bfa6"/><path d="M612.20158,474.21733,481.88833,410.526a2.95392,2.95392,0,0,1-.46807-.2766l113.80964-76.6327a4.80317,4.80317,0,0,1,7.51178,3.67142l6.34775,91.85777.30612,4.39658Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><polygon points="401.05 330.86 356.558 309.114 393.905 288.064 396.594 286.548 397.938 285.789 398.244 290.185 401.05 330.86" opacity="0.2" style="isolation:isolate"/><path d="M684.75906,509.6802,572.0488,454.59244l37.34677-21.05,2.68877-1.51719L660.75207,404.592c3.19024-1.7977,7.76143.22749,8.79816,3.667a5.71792,5.71792,0,0,1,.16006.71138Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><polygon points="125.844 376.82 138.103 376.819 143.936 329.531 125.841 329.532 125.844 376.82" fill="#ffb8b8"/><path d="M333.86788,516.1748l24.1438-.001h.001a15.38605,15.38605,0,0,1,15.38647,15.38623v.5l-39.53051.00146Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><polygon points="30.551 369.014 43.253 371.498 58.881 323.688 40.135 320.021 30.551 369.014" fill="#ffb8b8"/><path d="M239.27428,507.59042l25.01436,4.89306.001.0002a16.24294,16.24294,0,0,1,12.82227,19.05981l-.10135.518L236.05472,524.05Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M354.8316,357.05617a10.05575,10.05575,0,0,0-14.13593-6.15884l-25.5542-24.97923L311.61562,344.15l24.80726,20.92555a10.11027,10.11027,0,0,0,18.40872-8.01938Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><circle cx="48.87092" cy="60.56582" r="24.56103" fill="#ffb8b8"/><path d="M254.865,228.86026c1.30495.571,3.97731-9.82732,2.78024-11.90707-1.78024-3.09293-1.675-3.07071-2.85681-5.117s-1.44623-4.84712.08417-6.64761,5.072-1.56163,5.77042.69581c-.4493-4.2878,3.79189-7.73454,7.993-8.70313s8.63244-.36723,12.85668-1.22917c4.90243-1.00032,10.00316-5.10972,8.04719-10.5007a7.5932,7.5932,0,0,0-1.48106-2.43408c-2.25992-2.54094-5.42117-3.62594-8.512-4.675-6.43006-2.18246-13.036-4.39233-19.82212-4.15141a28.7977,28.7977,0,0,0-25.44625,18.60924,26.156,26.156,0,0,0-1.08344,4.02534c-2.32924,12.52423,4.94368,24.87794,16.75623,29.64715Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M248.83468,363.78417a3.75449,3.75449,0,0,1-1.77783-3.7168l-11.083-54.90136-11.23437-42.13477h.00024A21.07382,21.07382,0,0,1,235.291,238.94042l7.427-7.02734,16.20239,6.98047,7.699,7.82812a44.02687,44.02687,0,0,1,22.99316,27.26074L301.9609,316.2373,330.47823,358.664a3.77282,3.77282,0,0,1-.36938,4.67969C326.14157,367.61132,248.83468,363.78417,248.83468,363.78417Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M323.54806,359.88378l-42.05078-29.13965A29.89622,29.89622,0,0,1,269.77047,314.124L257.9504,270.96483a12.28,12.28,0,0,1,1.22119-9.47656,11.99558,11.99558,0,0,1,21.5542,1.53613l17.52954,43.12012,37.3501,35.44629a3.79288,3.79288,0,0,1,.63355,3.71582l-7.11328,12.7168a3.70279,3.70279,0,0,1-3.49854,2.52051A3.618,3.618,0,0,1,323.54806,359.88378Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M236.188,505.05272a3.74374,3.74374,0,0,1-.44751-3.42285l19.45362-70.71972,1.438-69.29493,65.48633-4.49121.31787-.02148,19.72412,35.749a91.97727,91.97727,0,0,1,11.10035,36.23535l6.5,71.2295a3.71631,3.71631,0,0,1-3.25074,4.06445l-19.7456,1.87793a3.67409,3.67409,0,0,1-4.07886-3.11133l-8.01807-72.38281-28.84961-48.74512-9.68408,51.31836L266.071,504.207a3.7189,3.7189,0,0,1-3.45825,2.42578l-23.40015.00977A3.63923,3.63923,0,0,1,236.188,505.05272Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M737.61617,737.64257H244.15157a33.03734,33.03734,0,0,1-33-33v-271a33.03734,33.03734,0,0,1,33-33h60.50269a32.92486,32.92486,0,0,1,22.19507,8.57959l65.61157,46.85107a23.18228,23.18228,0,0,0,15.65869,6.06934H740.68014A33.00029,33.00029,0,0,1,773.67672,495.625l-3.064,209.5A33.13847,33.13847,0,0,1,737.61617,737.64257Z" transform="translate(-211.15157 -143.35743)" fill="#fff"/><path d="M733.23214,721.64257H247.071a15.93751,15.93751,0,0,1-15.91944-15.9195V430.292A15.93754,15.93754,0,0,1,247.071,414.37252a14.09636,14.09636,0,0,1,14.08056,14.08056v258.27A14.9364,14.9364,0,0,0,276.071,701.64251H731.5903a10.12538,10.12538,0,0,1,9.91528,7.5874,9.72,9.72,0,0,1-4.30689,11.18457A7.59512,7.59512,0,0,1,733.23214,721.64257Z" transform="translate(-211.15157 -143.35743)" fill="#f2f2f2"/><path d="M494.57588,589.36994l-1.28-1.28a1.37,1.37,0,0,1-.06356-1.9364q.0307-.03286.06356-.0636l11.23-11.24a1.37,1.37,0,0,1,1.93644-.0636q.03282.03076.06356.0636l11.23,11.23a1.39,1.39,0,0,1,.03454,1.96546l-.03454.03454-1.28,1.28a1.39,1.39,0,0,1-1.96546.03455l-.03454-.03455-6.64-7v16.61a1.37994,1.37994,0,0,1-1.36993,1.38995l-.01007.00006h-1.85a1.39,1.39,0,0,1-1.39-1.39h0V582.38l-6.64,7a1.39,1.39,0,0,1-1.9656.02472Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><path d="M505.50591,564.64a22.79,22.79,0,1,1-22.79,22.79h0a22.81,22.81,0,0,1,22.79-22.79m0-3a25.79,25.79,0,1,0,25.79,25.79h0A25.79,25.79,0,0,0,505.50591,561.64Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><path d="M737.61617,737.64257H244.15157a33.03734,33.03734,0,0,1-33-33v-271a33.03734,33.03734,0,0,1,33-33h60.50269a32.92486,32.92486,0,0,1,22.19507,8.57959l65.61157,46.85107a23.18228,23.18228,0,0,0,15.65869,6.06934H740.68014A33.00029,33.00029,0,0,1,773.67672,495.625l-3.064,209.5A33.13847,33.13847,0,0,1,737.61617,737.64257Zm-493.4646-335a31.03529,31.03529,0,0,0-31,31v271a31.03529,31.03529,0,0,0,31,31h493.4646a31.12957,31.12957,0,0,0,30.99659-30.54688l3.06421-209.5a31,31,0,0,0-30.99683-31.45312H408.11959a25.17915,25.17915,0,0,1-16.96216-6.55127l-65.61132-46.85108a30.93108,30.93108,0,0,0-20.89185-8.09765Z" transform="translate(-211.15157 -143.35743)" fill="#3f3d56"/><polygon points="568.285 599.561 556.025 599.561 552.193 552.273 568.287 552.274 568.285 599.561" fill="#ffb8b8"/><path d="M782.56291,754.803l-39.53051-.00147v-.5a15.38605,15.38605,0,0,1,15.38647-15.38623h.001l24.1438.001Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><polygon points="705.285 599.561 693.025 599.561 687.193 552.273 705.287 552.274 705.285 599.561" fill="#ffb8b8"/><path d="M919.56291,754.803l-39.53051-.00147v-.5a15.38605,15.38605,0,0,1,15.38647-15.38623h.001l24.1438.001Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M876.1253,596.73307a11.29143,11.29143,0,0,0,.29141-14.3014,9.29926,9.29926,0,0,0-1.071-1.09138l9.234-34.09151-15.39037,5.10584-6.4092,31.5911a11.37213,11.37213,0,0,0,1.01721,12.44942A7.89882,7.89882,0,0,0,876.1253,596.73307Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><path d="M875.53292,575.76171a3.90859,3.90859,0,0,1-.57641-.043l-8.01953-1.20947a4.34336,4.34336,0,0,1-3.0127-2.0874,5.60344,5.60344,0,0,1-.70313-3.87256l10.00538-55.88184-6.78565-35.90137c-1.30835-6.90918,2.06665-13.8872,7.85108-16.23193a10.72756,10.72756,0,0,1,10.49316,1.34424,14.31655,14.31655,0,0,1,5.62134,10.20849l4.80249,45.77637-.05738.19922L879.69479,572.311A4.47572,4.47572,0,0,1,875.53292,575.76171Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><circle cx="662.01317" cy="272.83111" r="24.56103" fill="#ffb8b8"/><path d="M860.58956,530.35888a4.97146,4.97146,0,0,1-1.78906-.333l-38.82056-14.93164a4.98327,4.98327,0,0,1-3.16137-5.32764l1.55908-11.69287a26.50127,26.50127,0,0,1,6.24975-23.59033l.94532-1.04,11.48535-20.94385a12.25972,12.25972,0,0,1,16.73071-4.80761l20.28223,11.334a12.238,12.238,0,0,1,5.65014,6.82519,37.406,37.406,0,0,1-.5725,25.19629L865.26193,527.1538A5.03505,5.03505,0,0,1,860.58956,530.35888Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><path d="M758.85177,731.3081l-.05273-.01026a5.0008,5.0008,0,0,1-3.92164-6.05957l29.74854-130.03955a350.67931,350.67931,0,0,1,20.102-60.146l12.65625-28.85644,47.22608,21.56006,6.74291,12.33252a120.69737,120.69737,0,0,1,7.97632,43.02246l47.98658,140.63183a4.99969,4.99969,0,0,1-3.90967,6.54639l-26.269-.29687a4.04456,4.04456,0,0,1-.751.06347,4.96678,4.96678,0,0,1-4.62134-3.13476l-54.85425-142.186a1.0056,1.0056,0,0,0-.96191-.61963.97054.97054,0,0,0-.90283.65674l-52.04761,142.894a4.97557,4.97557,0,0,1-5.58789,3.21Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M794.76536,571.39216a10.05576,10.05576,0,0,0,5.36511-14.45584l23.523-26.90067-18.39942-2.50893-19.517,25.93a10.11027,10.11027,0,0,0,9.02832,17.93546Z" transform="translate(-211.15157 -143.35743)" fill="#ffb8b8"/><path d="M805.854,552.44189a5.00894,5.00894,0,0,1-2.34766-.58594l-8.27783-4.415a5.00071,5.00071,0,0,1-1.86865-7.09131l30.57422-48.17725,5.30151-36.35644a14.03461,14.03461,0,1,1,27.52148,5.356l-10.946,44.811-36.06323,44.60449A4.98359,4.98359,0,0,1,805.854,552.44189Z" transform="translate(-211.15157 -143.35743)" fill="#00bfa6"/><path d="M851.0572,395.92355c2.841-9.31634,19.25481-13.47286,32.89789-9.60742s23.44419,14.0001,25.72575,23.90877c5.05239,21.9422-21.30043,39.75058-16.525,61.69533,3.15948,14.51885,21.43586,28.24626,42.02041,31.56157-22.68517,4.74615-50.37341.57437-71.41-10.75935-13.09259-7.05379-24.07717-17.69856-23.91119-28.43533.10049-6.501,4.23589-12.24949,9.29313-17.21585s11.11108-9.38126,15.75221-14.56516,7.85664-11.391,6.50229-17.97171-8.23545-13.4434-17.4938-15.35808Z" transform="translate(-211.15157 -143.35743)" fill="#2f2e41"/><path d="M987.84843,756.64257h-381a1,1,0,0,1,0-2h381a1,1,0,0,1,0,2Z" transform="translate(-211.15157 -143.35743)" fill="#ccc"/></svg>
'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/assets/logo.svg ---
<svg enable-background="new 0 0 342 90" viewBox="0 0 342 90" xmlns="http://www.w3.org/2000/svg"><path d="m171.2 18.8v52.5c0 .4-.3.8-.8.8h-5.5c-2.5 0-4.9-1.3-6.3-3.4l-24.8-38.3.8 19.1v21.9c0 .4-.3.8-.8.8h-7.2c-.4 0-.8-.3-.8-.8v-52.6c0-.4.3-.8.8-.8h5.4c2.5 0 4.9 1.3 6.3 3.4l24.8 38.2-.8-19.1v-21.7c0-.4.3-.8.8-.8h7.2c.6 0 .9.3.9.8z"/><path d="m245 72h-7.6c-.5 0-.9-.5-.7-1l20.2-52.3c.2-.4.6-.7 1-.7h9.6c.5 0 .9.3 1 .7l20.3 52.3c.2.5-.2 1-.7 1h-7.6c-.3 0-.6-.2-.7-.5l-16.3-43c-.2-.6-1.2-.6-1.4 0l-16.3 43c-.2.3-.5.5-.8.5z"/><path d="m341.8 70.8-15.2-19.4c8.6-1.6 13.6-7.4 13.6-16.3 0-10.2-6.6-17.1-18.4-17.1h-21.2c-.6 0-1.1.5-1.1 1.1 0 4 3.2 7.2 7.2 7.2h14.3c7.1 0 10.5 3.6 10.5 8.9s-3.3 8.9-10.5 8.9h-20.2c-.6 0-1.1.5-1.1 1.1v26c0 .4.3.8.8.8h7.2c.4 0 .8-.3.8-.8v-19.3h8.3l13.2 17.2c1.4 1.9 3.6 2.9 6 2.9h5.5c.4 0 .7-.7.3-1.2z"/><path d="m222.2 18h-33.5c-.6 0-1 .4-1 1 0 4 3.3 7.3 7.3 7.3h27.2c.4 0 .8-.3.8-.8v-6.8c-.1-.4-.4-.7-.8-.7zm0 45.7h-25c-.4 0-.8-.3-.8-.8v-13.5c0-.4.3-.8.8-.8h23.1c.4 0 .8-.3.8-.8v-6.8c0-.4-.3-.8-.8-.8h-31.5c-.6 0-1.1.5-1.1 1.1v29.5c0 .6.5 1.1 1.1 1.1h33.4c.4 0 .8-.3.8-.8v-6.8c-.1-.3-.4-.6-.8-.6z"/><path d="m72.2 4.6-18.8 27.9c-1.3 1.9 1.2 4.2 3 2.6l18.5-16.1c.5-.4 1.2-.1 1.2.6v50.3c0 .7-.9 1-1.3.5l-56-67c-1.8-2.2-4.4-3.4-7.3-3.4h-2c-5.2 0-9.5 4.3-9.5 9.6v70.8c0 5.3 4.3 9.6 9.6 9.6 3.3 0 6.4-1.7 8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6l-18.5 16c-.5.4-1.2.1-1.2-.6v-50.2c0-.7.9-1 1.3-.5l56 67c1.8 2.2 4.5 3.4 7.3 3.4h2c5.3 0 9.6-4.3 9.6-9.6v-70.8c-.1-5.3-4.4-9.6-9.7-9.6-3.3 0-6.4 1.7-8.2 4.6z"/></svg>
'''
'''--- src/components/DeleteButton/index.js ---
import React from 'react';
import { 
    Button, 
    Modal, 
    Tooltip
} from 'antd'
import {
    DeleteOutlined,
    ExclamationCircleOutlined
} from '@ant-design/icons'
import { useHistory } from 'react-router-dom'
const { confirm } = Modal

const DeleteButton = (props) => {

    const history = useHistory()
    const {type, handleDelete, name} = props;

    const showConfirm = () => {
        confirm({
            title: `Do you want to delete this ${type}?`,
            icon: <ExclamationCircleOutlined />,
            content: name,
            onOk() {
                handleDelete()
            },
            onCancel() {
            },
        });
    }

    return (
        <>
        <Tooltip title="Remove">
            <Button danger onClick={showConfirm} className="mx-1">
                <DeleteOutlined />
            </Button>
        </Tooltip>
        </>
    )
}

export default DeleteButton
'''
'''--- src/components/FilePreview/index.css ---
.file-preview-frame {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;    
    background-color: rgba(0, 0, 0, 0.8);
}

.frame {
    border: 0;
    margin: 0 auto;
    width: 100%;
    height: 100%;
    display:block;
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;    
    justify-self: center; 
    align-self: center; 
}
'''
'''--- src/components/FilePreview/index.js ---
import React from 'react';
import './index.css'

const FilePreview = ({url}) => {

    return (
        <>
        <iframe 
            src={url} 
            frameBorder="0" 
            className="frame"
            allowFullScreen
        />
        </>
    )
}

export default FilePreview
'''
'''--- src/components/GuardedRoute/index.js ---
import React from 'react';
import { Route, Redirect } from "react-router-dom";

const GuardedRoute = (props) => {
    const {beforeRouteEnter, component: Component, ...rest} = props
    if (beforeRouteEnter) {
        return (
            <Route {...rest} >
                {!beforeRouteEnter() ? <Redirect to="/login" /> : <Component />}
            </Route>
        ) 
    } else {
        return (
            <Route {...rest} >
                <Component />
            </Route>
        ) 
    }
    
}

export default GuardedRoute;
'''
'''--- src/components/ShareFileButton/index.js ---
import React, {useState, useEffect} from 'react';
import { 
    Button, 
    Modal, 
    Input,
    Select,
    message,
    Tooltip
} from 'antd'
import {
    ShareAltOutlined,
} from '@ant-design/icons';
import {
    getPublicKeyByPrivateKey,
    encryptStringTypeData,
    decryptStringTypeData
} from '../../utils/keypair.utils'

import * as Yup from 'yup';
import { useFormik } from 'formik';
import { useDispatch, useSelector } from 'react-redux';

const validationSchema = Yup.object().shape({
    account: Yup.string().required('Invalid account id'),
    permissions: Yup.number().required('Invalid permission'),
});

const {Option} = Select

const ShareFileButton = (props) => {

    const dispatch = useDispatch()
    const [loading, setLoading] = useState(false)
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)

    const accountFormik = useFormik({
        initialValues: {
            account: '',
            permissions: ''
        },
        validationSchema: validationSchema,
        onSubmit: async (values) => {
            setLoading(true)
            const user = await window.contract.get_user({account_id: values.account})
            if (!user) {
                message.error(`User "${values.account}" not found`)
                setLoading(false)
                return
            }
            const {plaintext, success: decryptStatus} = await decryptStringTypeData(userCurrent.privateKey, props.encrypted_password)
            if (!decryptStatus) {
                message.error(`Wrong user password`)
                setLoading(false)
                return
            }
            const {public_key} = user
            const {cipher, success} = await encryptStringTypeData(public_key, plaintext)
            if (!success) {
                message.error(`Fail to encrypt password`)
                setLoading(false)
                return
            }
            const current = new Date().getTime()
            const params = {
                _file_id: props.id, 
                _share_with: values.account, 
                _parent_folder: props.folder, 
                _password: cipher,
                _permissions: values.permissions,
                _created_at: current
            }
            const data = await window.contract.share_file_v2(params)
            setIsModalShareVisible(false)
            message.success(`Share file success with account ${values.account}!!!`)
            setLoading(false)
            // history.go(0)
        }
    })

    const {
        values: values, 
        errors: errors,
        touched, 
        handleChange: handleChange, 
        handleSubmit: handleSubmit, 
        setFieldValue: setFieldValue
    } = accountFormik

    const [isModalShareVisible, setIsModalShareVisible] = useState(false);

    const showModalShare = () => {
        setIsModalShareVisible(true);
    };
    
    const handleCancelShare = () => {
        setIsModalShareVisible(false);
        accountFormik.resetForm()
        setLoading(false)
    };

    return (
        <>
        <Tooltip title="Share file">
            <Button onClick={showModalShare} className="mx-1">
                <ShareAltOutlined />
            </Button>
        </Tooltip>
        <Modal 
            title="Share file" 
            visible={isModalShareVisible} 
            onOk={handleSubmit} 
            onCancel={handleCancelShare}
            confirmLoading={loading}
            cancelButtonProps={{disabled: loading}}
            maskClosable={false}
        >
            <div className="input-group mb-3">
                <label className="form-label">Share with</label>
                <Input placeholder="Account id" value={values.account || ''} onChange={handleChange('account')} />
            </div>
            {errors.account && touched.account && <span className="error-text">{errors.account}</span>}
            
            <div className="input-group mb-3">
                <label className="form-label">Permission</label>
                <Select style={{ width: '100%' }} placeholder="Permission" value={values.permissions.toString() || []} onChange={(val) => setFieldValue('permissions', parseInt(val))}>
                    <Option value="1">Read only</Option>
                    {/* <Option value="2">Edit</Option> */}
                </Select>
            </div>
            {errors.permissions && touched.permissions && <span className="error-text">{errors.permissions}</span>}
        </Modal>
        </>
    )
}

export default ShareFileButton;
'''
'''--- src/components/ShareFolderButton/index.js ---
import React, {useState, useEffect} from 'react';
import { 
    Button, 
    Modal, 
    Input,
    Select,
    message,
    Tooltip
} from 'antd'
import {
    ShareAltOutlined,
} from '@ant-design/icons';
import {
    getPublicKeyByPrivateKey,
    encryptStringTypeData,
    decryptStringTypeData
} from '../../utils/keypair.utils'
import * as Yup from 'yup';
import { useFormik } from 'formik';
import { useDispatch, useSelector } from 'react-redux';

const accountValidationSchema = Yup.object().shape({
    account: Yup.string().required('Invalid account id'),
    permissions: Yup.number().required('Invalid permission'),
});

const {Option} = Select

const ShareFolderButton = (props) => {

    const dispatch = useDispatch()
    const [loading, setLoading] = useState(false)
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)

    const accountFormik = useFormik({
        initialValues: {
            account: '',
            permissions: ''
        },
        validationSchema: accountValidationSchema,
        onSubmit: async (values) => {
            setLoading(true)
            const user = await window.contract.get_user({account_id: values.account})
            if (!user) {
                message.error(`User "${values.account}" not found`)
                setLoading(false)
                return
            }
            const {plaintext, success} = await decryptStringTypeData(userCurrent.privateKey, props.folder_password)
            if (!success) {
                message.error(`Wrong user password`)
                setLoading(false)
                return
            }
            const {public_key} = user
            const {cipher, success: isEncryptSuccess} = await encryptStringTypeData(public_key, plaintext)
            if (!isEncryptSuccess) {
                message.error(`fail to encrypt password`)
                setLoading(false)
                return
            }
            const current = new Date().getTime()
            const params = {
                _folder_id: props.id, 
                _share_with: values.account, 
                _password: cipher,
                _permissions: values.permissions,
                _created_at: current
            }
            await window.contract.share_folder_v2(params)
            setIsModalShareVisible(false)
            message.success(`Share folder success with account ${values.account}!!!`)
            setLoading(false)
            // history.go(0)
        }
    })

    const {
        values: values, 
        errors: errors, 
        touched,
        handleChange: handleChange, 
        handleSubmit: handleSubmit, 
        setFieldValue: setFieldValue
    } = accountFormik

    const [isModalShareVisible, setIsModalShareVisible] = useState(false);

    const showModalShare = () => {
        setIsModalShareVisible(true);
    };
    
    const handleCancelShare = () => {
        setIsModalShareVisible(false);
        setLoading(false)
        accountFormik.resetForm()
    };

    return (
        <>
        <Tooltip title='Share folder'>
            <Button onClick={showModalShare}>
                <ShareAltOutlined />
            </Button>
        </Tooltip>
        <Modal 
            title="Share folder" 
            visible={isModalShareVisible} 
            onOk={handleSubmit} 
            onCancel={handleCancelShare}
            confirmLoading={loading}
            cancelButtonProps={{disabled: loading}}
            maskClosable={false}
        >
            <label className="form-label">Share with</label>
            <div className="input-group mb-3">
                <Input placeholder="Account id" value={values.account || ''} onChange={handleChange('account')} />
            </div>
            {errors.account && touched.account && <span className="error-text">{errors.account}</span>}

            <div className="input-group mb-3">
                <label className="form-label">Permission</label>
                <Select style={{ width: '100%' }} placeholder='Permission' value={values.permissions.toString() || []} onChange={(val) => setFieldValue('permissions', parseInt(val))}>
                    <Option value="1">Read only</Option>
                    <Option value="2">Edit</Option>
                </Select>
            </div>
            {errors.permissions && touched.permissions && <span className="error-text">{errors.permissions}</span>}
        </Modal>
        </>
    )
}

export default ShareFolderButton;
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || '219c68358efca00092a24d84d9de614a277eb3dae7da7e70cf4f37208a0fa41f'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/global.css ---
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@500&display=swap');

* {
  box-sizing: border-box;
}

html {
  font-family: 'Roboto', sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
}

.error-text {
  color: #e74c3c;
}

'''
'''--- src/hook/useDownloadFile.js ---
import React, {useEffect, useState} from 'react';
import {
    retrieveFiles,
} from '../utils/web3.storage'
import {concatenateBlobs, saveFile} from '../utils/file.utils'
import {
    encryptStringTypeData,
    decryptStringTypeData
} from '../utils/keypair.utils'
import { 
    useSelector, 
} from 'react-redux';
import { v4 as uuidv4 } from 'uuid';
import {wrap} from 'comlink'
import {message} from 'antd'

const worker = new Worker(new URL('../worker.js', import.meta.url), { type: "module" } )

const useDownloadFile = () => {

    const [loading, setLoading] = useState(false)
    const {
        root,
        folderId: currentFolderId,
    } = useSelector(state => state.folderV2)
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)

    const download = async (cid, encryptedPassword, name, fileType, setDownloadId) => {
        setLoading(true)
        setDownloadId(cid)

        const {plaintext, success} = await decryptStringTypeData(userCurrent.privateKey, encryptedPassword)
        if (success) {
            message.info('Downloading')
            const files = await retrieveFiles(userCurrent.web3token, cid)
            message.info('Decrypting')
            const {decryptByWorker} = wrap(worker)
            const decryptedFile = await decryptByWorker(files, name, plaintext)
            concatenateBlobs(decryptedFile, fileType, (blob) => {
                saveFile(blob, name)
                setLoading(false)
            })
        } else {
            message.error('Invalid private key')
        }
    }

    return {
        loading,
        download
    }
}

export default useDownloadFile
'''
'''--- src/hook/useFetchFolder.js ---
import React, {useEffect, useState} from 'react';
import {
    decryptStringTypeData
} from '../utils/keypair.utils'
import {
    setRoot,
    setCurrent,
    setFolderId,
    setParentFolder
} from '../store/slice/folderV2.slice'
import {useDispatch} from 'react-redux'
import {getUrlParameter} from '../utils/url.utils'
import { commonFolderSlice } from '../store/slice/folderV2.slice';

const useFetchFolder = (newFolderId, setNewFolderId, setTableLoading) => {

    const [folderItems, setFolderItems] = useState([])
    const [root, setRootFolder] = useState({})
    // const [loading, setLoading] = useState(false)
    const [error, setError] = useState('')
    const dispatch = useDispatch()

    const fetchData = async () => {
        setTableLoading(true)
        const {accountId} = await window.walletConnection.account()
        const folderId = getUrlParameter('folder') ? getUrlParameter('folder') : accountId
        setNewFolderId(folderId)
        dispatch(setFolderId(newFolderId))
        const folderData = await window.contract.get_folder_info_v2({folder_id: newFolderId || folderId})
        const [root, root_id] = await window.contract.get_root({folder_id: newFolderId})
        const {children = [], files = []} = folderData || {}
        const childrenInDetail = await Promise.all(children.map(child => {
            return window.contract.get_folder_info_v2({folder_id: child}).then(result => {
                return {
                    ...result, 
                    id: child, 
                    isFolder: true,
                    numOfFolders: result.children.length,
                    numOfFiles: result.files.length,
                    file_type: 'folder',
                    children: undefined,
                    files: undefined
                };
            })
        }))
        const filesDetail = await Promise.all(files.map(id => {
            return window.contract.get_file_info({file_id: id}).then(result => {
                return {...result, id, isFolder: false}
            })
        }))
        let dataMapping = [...childrenInDetail, ...filesDetail]
        setRootFolder(root)
        setFolderItems(dataMapping)
        // setLoading(false)
        dispatch(setRoot(root))
        dispatch(setCurrent(dataMapping))
        dispatch(setParentFolder(folderData?.parent))
        setTableLoading(false)
    }

    useEffect(() => {
        // setLoading(true)
        fetchData()
    }, [newFolderId]) 

    return {
        folderItems,
        root,
        // loading,
        error
    }
}

export default useFetchFolder
'''
'''--- src/hook/useFetchSharedDoc.js ---
import React, {useEffect, useState} from 'react';
import {
    decryptStringTypeData
} from '../utils/keypair.utils'
import {
    setCurrentSharedData,
    setRootSharedFolder,
    setSharedFolderId,
    setParentOfSharedFolder,
    setPermission
} from '../store/slice/sharedWithMeV2'
import {useDispatch} from 'react-redux'
import {getUrlParameter} from '../utils/url.utils'

const useFetchSharedDocs = (newFolderId, setNewFolderId, setTableLoading) => {

    // const [loading, setLoading] = useState(false)
    const [error, setError] = useState('')
    const [page, setPage] = useState(0)
    const [total, setTotal] = useState(0)
    const [limit, setLimit] = useState(10)

    const dispatch = useDispatch()

    const fetchSharedFolderDetail = async (folderId) => {
        setTableLoading(true)
        const {accountId} = await window.walletConnection.account()
        setNewFolderId(folderId)
        dispatch(setSharedFolderId(newFolderId))
        const folder = await window.contract.get_folder_info_v2({folder_id: newFolderId})
        const [root, root_id] = await window.contract.get_root({folder_id: newFolderId})
        if (root) {
            const sharedDocDetail = await window.contract.get_shared_doc_detail({_doc_id: `${root.created_by}_${accountId}_${root_id}`})
            const [sharedDoc, , file] = sharedDocDetail 
            const {children, files} = folder
            const childrenInDetail = await Promise.all(children.map(child => {
                return window.contract.get_folder_info_v2({folder_id: child}).then(result => {
                    return {
                        ...result, 
                        id: child, 
                        isFolder: true,
                        numOfFolders: result.children.length,
                        numOfFiles: result.files.length,
                        file_type: 'folder',
                        children: undefined,
                        files: undefined
                    };
                })
            }))
            const filesDetail = await Promise.all(files.map(id => {
                return window.contract.get_file_info({file_id: id}).then(result => {
                    return {...result, id, isFolder: false}
                })
            }))
            let data = [...childrenInDetail, ...filesDetail]
            // setLoading(false)
            dispatch(setRootSharedFolder({
                ...root,
                id: root_id,
                folder_password: sharedDoc.share_password,
                permissions: sharedDoc.permissions,
            }))
            dispatch(setCurrentSharedData(data))
            dispatch(setParentOfSharedFolder(folder.parent))
            dispatch(setPermission(sharedDoc.permissions))
        }        
        setTableLoading(false)
    }

    const fetchSharedDoc = async () => {
        setTableLoading(true)
        let data = []
        const {accountId} = await window.walletConnection.account()
        const sharedDocOfUser = await window.contract.get_shared_doc_of_user({_account_id: accountId})
        setTotal(sharedDocOfUser.length)
        // const start = page * limit
        // const end = (page + 1) * limit
        // const sharedDocSlice = sharedDocOfUser.slice(start, end)
        Promise.all(sharedDocOfUser.map(doc => {
            return window.contract.get_shared_doc_detail({_doc_id: doc})
        })).then((result) => {
            result.forEach(shareData => {
                const [sharedDoc, folder, file, docId] = shareData
                if (folder) {
                    data.push({
                        ...folder,
                        docId: docId,
                        id: sharedDoc.doc_id,
                        folder_password: sharedDoc.share_password,
                        permissions: sharedDoc.permissions,
                        file_type: "folder",
                        numOfFiles: folder.files.length,
                        numOfFolders: folder.children.length,
                        isFolder: true,
                        children: undefined,
                        files: undefined
                    })
                } 
                if(!!file) {
                    data.push({
                        ...file, 
                        docId: docId,
                        encrypted_password: sharedDoc.share_password,
                        permissions: sharedDoc.permissions,
                        isFolder: false,
                        id: sharedDoc.doc_id
                    })
                }
            })
            dispatch(setCurrentSharedData(data))
            setTableLoading(false)
        })
    }

    useEffect(() => {
        // setLoading(true)
        const folderId = getUrlParameter('doc_id')
        if  (folderId) {
            fetchSharedFolderDetail(folderId)
        } else {
            fetchSharedDoc()
        }
        
    }, [newFolderId, page, limit]) 

    return {
        // loading,
        error,
        setPage,
        setLimit,
        total,
        page,
        limit
    }
}

export default useFetchSharedDocs
'''
'''--- src/hook/useFetchUser.js ---
import { set } from 'lodash';
import React, {useEffect, useState} from 'react';
import { useHistory } from 'react-router-dom'
import {
    decryptStringTypeData
} from '../utils/keypair.utils'
import {setUser} from '../store/slice/user.slice'
import {useDispatch} from 'react-redux'

const useFetchUser = () => {

    const [isRegistered, setRegistered] = useState(true)
    const [isLoggedIn, setLoggedIn] = useState(true)
    const dispatch = useDispatch()

    const fetchUserInfo = async () => {
        const account = await window.walletConnection.account()

        // if (!account) return setLoggedIn(false)
        const {accountId} = account
        if (!accountId) {
            setLoggedIn(true)
            return //setLoggedIn(true)
        }

        const user = await window.contract.get_user({account_id: accountId})
        const privateKey = window.localStorage.getItem(`${accountId}_private_key`)
        if (!user) {
            setRegistered(false)
            return
        } 
        if (!privateKey) {
            setLoggedIn(false)
            return
        }
        const {public_key, encrypted_token} = user
        const {success, plaintext} = await decryptStringTypeData(privateKey, encrypted_token)
        if (!success) {
            setLoggedIn(false)
            return
        }
        const userDecoded = {
            publicKey: public_key,
            web3token: plaintext, 
            account: accountId,
            privateKey: privateKey,
        }
        dispatch(setUser(userDecoded))
    }

    useEffect(() => {
        fetchUserInfo()
    }, []) 

    return {
        isRegistered,
        isLoggedIn
    }
}

export default useFetchUser
'''
'''--- src/hook/useFileCreate.js ---
import React, {useEffect, useState} from 'react';
import {
    storeFiles
} from '../utils/web3.storage'
import {
    encryptStringTypeData,
    decryptStringTypeData
} from '../utils/keypair.utils'
import { 
    useSelector, 
} from 'react-redux';
import { v4 as uuidv4 } from 'uuid';
import {wrap} from 'comlink'
import {message} from 'antd'
const worker = new Worker(new URL('../worker.js', import.meta.url), { type: "module" } )

const useFileCreate = () => {
    const [loading, setLoading] = useState(false)
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)

    const storeToWeb3Storage = async (files, filename, fileType, encryptedPassword, currentFolderId, setIsModalUploadVisible) => {
        const totalSize = files.map(f => f.size).reduce((a, b) => a + b, 0)
        let uploaded = 0

        const onRootCidReady = cid => {
            console.log('upfolderLoading files with cid:', cid)
        }
    
        const onStoredChunk = size => {
            uploaded += size
            const pct = uploaded / totalSize
            console.log(`UpfolderLoading... ${pct.toFixed(2) * 100}% complete`)
        }

        const cid = await storeFiles(userCurrent.web3token, files, onRootCidReady, onStoredChunk)
        const current = new Date().getTime()
        try {
            await window.contract.create_file_v2({
                _folder: currentFolderId, 
                _file_id: uuidv4(),
                _cid: cid, 
                _name: filename, 
                _encrypted_password: encryptedPassword, 
                _file_type: fileType ,
                _created_at: current
            })
            history.go(0)
        } catch (error) {
            setLoading(false)
            message.error(error.message, 10)
            setIsModalUploadVisible(false)
        } finally {
        }       
        
    }

    const fileSubmit = async (file, root, currentFolderId, setIsModalUploadVisible, setLoading) => {
        setLoading(true)
        const {encryptByWorker} = wrap(worker)
        const {folder_type: folderType = 1,folder_password: folderPassword} = root || {}
        if (folderType === 2) {
            const {success, plaintext: folderDecryptedPassword} = await decryptStringTypeData(userCurrent.privateKey, folderPassword)
            if (success) {
                const encryptedFiles = await encryptByWorker(file, folderDecryptedPassword)
                await storeToWeb3Storage(encryptedFiles, file.name, file.type, null, currentFolderId, setIsModalUploadVisible, setLoading)
                // setIsModalUploadVisible(false)
                // history.go(0)
            } else {
                message.error("Wrong private key")
            }
        } else {
            const password = uuidv4()
            const encryptedFiles = await encryptByWorker(file, password)
            const {success, cipher} = await encryptStringTypeData(userCurrent.publicKey, password)
            if (success) {
                await storeToWeb3Storage(encryptedFiles, file.name, file.type, cipher, currentFolderId, setIsModalUploadVisible, setLoading)
                // setIsModalUploadVisible(false)
                // history.go(0)
            } else {
                message.error('Fail to encrypt file ' + file.name)
            }
        }
    }

    return {
        loading,
        fileSubmit
    }
}

export default useFileCreate
'''
'''--- src/hook/useFilePreview.js ---
import {useState} from 'react';
import {
    retrieveFiles,
} from '../utils/web3.storage'
import {
    concatenateBlobs, 
    createFileUrl
} from '../utils/file.utils'
import {
    decryptStringTypeData
} from '../utils/keypair.utils'
import { 
    useSelector, 
} from 'react-redux';
import {wrap} from 'comlink'
import {message} from 'antd'

const worker = new Worker(new URL('../worker.js', import.meta.url), { type: "module" } )

const useFilePreview = () => {

    const [loading, setLoading] = useState(false)
    const [fileUrl, setFileUrl] = useState("")
    const [fileType, setFileType] = useState(null)
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)
    const [previewing, setPreviewing] = useState(false)
    
    const downloadAndCreateUrl = async (cid, encryptedPassword, name, fileType) => {
        message.info('Wait for file to be ready')
        const {plaintext, success} = await decryptStringTypeData(userCurrent.privateKey, encryptedPassword)
        if (success) {
            const files = await retrieveFiles(userCurrent.web3token, cid)
            const {decryptByWorker} = wrap(worker)
            const decryptedFile = await decryptByWorker(files, name, plaintext)
            concatenateBlobs(decryptedFile, fileType, (blob) => {
                const url = createFileUrl(blob)
                window.open(url);
                setFileUrl(url)
                setLoading(false)
            })
        } else {
            message.error('Fail to download file')
        }
    }

    const preview = async (cid, encryptedPassword, name, fileType) => {
        setLoading(true)
        setFileType('png')
        setPreviewing(true)
        await downloadAndCreateUrl(cid, encryptedPassword, name, fileType)
    }

    return {
        loading,
        preview,
        previewing,
        fileUrl,
        fileType,
        setPreviewing
    }
}

export default useFilePreview
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    <title>Pristorage</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script type="module" src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/layout/MainLayout.js ---
import React, {useState, useEffect} from 'react'
import './layout.css'
import { Layout, Menu, Input, Modal, Button, message, Dropdown, Space } from 'antd';
import {
    MenuUnfoldOutlined,
    MenuFoldOutlined,
    DatabaseOutlined,
    UsergroupAddOutlined,
    UserSwitchOutlined,
    CaretDownOutlined
} from '@ant-design/icons';
const { Header, Sider, Content } = Layout;
import {useFormik } from 'formik';
import * as Yup from 'yup';
import {
    validateToken
} from '../utils/web3.storage'
import { 
    useHistory,
} from "react-router-dom";
import {
    createKeyPair,
    encryptStringTypeData
} from '../utils/keypair.utils'
import {saveFile} from '../utils/file.utils'
import { useSelector, useDispatch } from 'react-redux';
import _ from 'lodash'
import useFetchUser from '../hook/useFetchUser'
import {logout} from '../utils/near.utils'

const { TextArea } = Input;

const signupValidationSchema = Yup.object().shape({
    token: Yup.string().test('Validate password', 'Invalid Token', value => {
        return new Promise((resolve, reject) => {
            validateToken(value).then(result => {
                resolve(result)
            })
        });
        
    }).required('Invalid Web3 storage token')
});

const loginValidationSchema = Yup.object().shape({
    seedPhrase: Yup.string().test('Validate password', 'Invalid password', value => {
        return value.length > 12
        
    }).required('Invalid Web3 storage token')
});

export default function MainLayout({children}) {

    let history = useHistory();
    const dispatch = useDispatch()

    const [collapsed, setCollapsed] = useState(false)
    const [isModalVisible, setIsModalVisible] = useState(false);
    const [isModalLoginVisible, setIsModalLoginVisible] = useState(false);
    const [loading, setLoading] = useState(false);
    const [isHideLayout, setHideLayout] = useState(false);
    const [modalKeyVisible, setModalKeyVisible] = useState(false);
    const {
        isRegistered,
        isLoggedIn
    } = useFetchUser()
    const [accountId, setAccountId] = useState("")
    const [appPrivateKey, setAppPrivateKey] = useState("")

    useEffect(() => {
        const currentURL = window.location.href
        if (currentURL.includes('login')) {
            setHideLayout(true)
        } else {
            setHideLayout(false)
        }
    }, [])

    const {current} = useSelector(state => state.user)

    const formik = useFormik({
        initialValues: {
            token: '',
        },
        validationSchema: signupValidationSchema,
        onSubmit: async (values) => {
            const {accountId} = await window.walletConnection.account()
            setLoading(true);
            const {privateKey, publicKey} = createKeyPair();
            const {success, cipher} = await encryptStringTypeData(publicKey, values.token)
            if (success) {
                window.localStorage.setItem(`${accountId}_private_key`, privateKey)
                window.localStorage.setItem(`${accountId}_web3_storage_token`, values.token)
                const current = new Date().getTime()
                try {
                    await window.contract.sign_up({_public_key: publicKey, _encrypted_token: cipher, _created_at: current})
                    setAppPrivateKey(privateKey)
                    setIsModalVisible(false)
                    setModalKeyVisible(true)
                } catch (error) {
                    message.error(error.message, 10)
                }
                
            } else {
                message.error('Fail to sign up')
            }
        }
    })

    const loginFormik = useFormik({
        initialValues: {
            seedPhrase: '',
        },
        validationSchema: loginValidationSchema,
        onSubmit: async (values) => {
            window.localStorage.setItem(`${accountId}_private_key`, values.seedPhrase)
            history.go(0)
        }
    })

    const logoutHandler = async () => {
        const {accountId} = await window.walletConnection.account()
        window.localStorage.removeItem(`${accountId}_private_key`)
        window.localStorage.removeItem(`${accountId}_web3_storage_token`)
        logout().then(() => {
            history.push('/login')
        }) 
    }

    const downloadPrivateKey = async () => {
        const {accountId} = await window.walletConnection.account()
        const privateKey = window.localStorage.getItem(`${accountId}_private_key`)
        const blob = new Blob([privateKey], { type: "text/plain;charset=utf-8" })
        await saveFile(blob, `${accountId}_private_key.txt`)
        history.go(0)
    }

    const menu = (
        <Menu>
            <Menu.Item key="1" onClick={() => setModalKeyVisible(true)}>
                Private Key
            </Menu.Item>
            <Menu.Item key="2" onClick={logoutHandler} danger>
                Logout
            </Menu.Item>
        </Menu>
    );

    const {values, errors, handleChange, handleSubmit, setFieldValue} = formik
    const {
        values: loginValues, 
        errors: loginErrors, 
        handleChange: loginHandleChange, 
        handleSubmit: loginHandleSubmit, 
        setFieldValue: loginSetFieldValue,
    } = loginFormik

    const toggle = () => {
        setCollapsed(!collapsed)
    }

    const showModal = () => {
        setIsModalVisible(true);
    };
    
    const handleOk = () => {
        handleSubmit()
    };
    
    useEffect(() => {
        if (!current.success && current.status === 1) {
            showModal()
        }
    }, [current])

    const getAccountId = async () => {
        const {accountId} = await window.walletConnection.account()
        setAccountId(accountId)
    }

    const getPrivateKey = async () => {
        const {accountId} = await window.walletConnection.account()
        const privateKey = window.localStorage.getItem(`${accountId}_private_key`)
        setAppPrivateKey(privateKey)
    }

    useEffect(() => {
        getAccountId()
        if (!isRegistered) {
            showModal()
        } else if (!isLoggedIn) {
            setIsModalLoginVisible(true)
        } else {
            getPrivateKey()
        }
    }, [isRegistered, isLoggedIn])

    const redirect = (path) => {
        history.push(path)
        // history.go(0)
    }

    const handleCloseModalPrivateKey = () => {
        setModalKeyVisible(false)
    }
    const currentPage = window.location.href
    const selectPage = currentPage.includes("/shared_with_me") ? "4" : "2"
    return (
        <div id="page-layout-trigger">
            {isHideLayout ? <div>{children}</div> : <Layout>
                <Sider trigger={null} collapsible collapsed={collapsed}>
                    <div className="logo"></div>
                    <Menu theme="dark" mode="inline" defaultSelectedKeys={selectPage}>
                        <Menu.Item key="2" icon={<DatabaseOutlined />} onClick={() => redirect("/")}>
                            My Folders
                        </Menu.Item>
                        <Menu.Item key="4" icon={<UserSwitchOutlined />} onClick={() => redirect("/shared_with_me")}>
                            Shared With Me
                        </Menu.Item>
                    </Menu>
                </Sider>
                <Layout className="site-layout">
                    <Header className="site-layout-background" style={{ padding: 0 }}>
                        <div className="d-flex justify-content-between">
                            <div>
                                {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {
                                    className: 'trigger',
                                    onClick: toggle,
                                })}
                            </div>
                            <div className="account">
                                <Dropdown overlay={menu} placement="bottomLeft">
                                    <Button type="text">{current.account}<CaretDownOutlined /></Button>
                                </Dropdown>
                            </div>
                        </div>
                    </Header>
                    <Content
                        className="site-layout-background"
                        style={{
                        margin: '24px 16px',
                        padding: 24,
                        minHeight: 280,
                        }}
                    >
                        {children}
                    </Content>
                </Layout>
            </Layout>}
            <Modal
                visible={isModalLoginVisible}
                title={`Login as ${accountId}`}
                onOk={loginHandleSubmit}
                maskClosable={false}
                footer={[
                    <Button
                        loading={loading}
                        onClick={logoutHandler}
                        key="signout button"
                    >
                        Login with another account
                    </Button>,
                    <Button
                        loading={loading}
                        type="primary"
                        onClick={loginHandleSubmit}
                        key="signup button"
                    >
                        Login
                    </Button>,
                ]}
            >
                <div className="input-group mb-3">
                    <label className="form-label">Please enter your private key</label>
                    <TextArea 
                        placeholder="Private key" 
                        onChange={loginHandleChange('seedPhrase')}
                    />
                    {loginErrors.seedPhrase && <span className="error-text">{loginErrors.seedPhrase}</span>}
                </div>
            </Modal>
            <Modal
                visible={isModalVisible}
                title="Web3 Storage token is required"
                onOk={handleOk}
                maskClosable={false}
                footer={[
                    <Button
                        loading={loading}
                        type="primary"
                        onClick={handleOk}
                        key="signup button"
                    >
                        Register
                    </Button>,
                ]}
            >
                <div className="input-group mb-3 d-block">
                    <div className="form-label"><b>Web3Storage Token</b></div>
                    <div>You can get or create your token at this <a href="https://web3.storage/tokens/" target="_blank">link</a></div>
                    <TextArea 
                        placeholder="Web3Storage Token" 
                        onChange={handleChange('token')}
                    />
                    {errors.token && <span className="error-text">{errors.token}</span>}
                </div>
            </Modal>
            <Modal
                visible={modalKeyVisible}
                title="User's private key"
                onOk={handleCloseModalPrivateKey}
                onCancel={handleCloseModalPrivateKey}
                maskClosable={false}
                footer={[
                    <Button key="1" type="primary" onClick={downloadPrivateKey}>Download</Button>
                ]}
            >
                <div className="input-group mb-3">
                    <label className="form-label">Private key</label>
                    <TextArea 
                        disabled
                        value={appPrivateKey} 
                    />
                </div>
            </Modal>
        </div>
    )
}

'''
'''--- src/layout/layout.css ---
#page-layout-trigger {
    height: 100vh;
}

#page-layout-trigger .ant-layout {
    height: 100vh;
}

#page-layout-trigger .ant-layout .ant-layout-content {
    overflow: auto;
}

#page-layout-trigger .ant-layout-sider-children ul.ant-menu {
    padding-top:auto;
}

#page-layout-trigger .trigger {
    padding: 0 24px;
    font-size: 18px;
    line-height: 64px;
    cursor: pointer;
    transition: color 0.3s;
}

#page-layout-trigger .trigger:hover {
    color: #1890ff;
}

#page-layout-trigger .logo {
    height: 32px;
    margin: 16px;
    background: rgba(255, 255, 255, 0.3);
    }

.site-layout .site-layout-background {
    background: #fff;
}

.site-layout .account {
    display: flex;
    align-items: center;
    margin-right: 20px;
    font-weight: 400;
    font-size: 16px;
}

.login-screen {
    font-family: "Poppins", sans-serif;
    overflow: hidden;
  }
  
  .login-wave {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 100%;
    z-index: -1;
  }
  
  .login-container {
    width: 100vw;
    height: 100vh;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 7rem;
    padding: 0 2rem;
  }
  
  .login-img {
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }
  
  .login-content {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    text-align: center;
  }
  
  .login-content .title {
    font-size: 28px;
  }
  
  .login-img img {
    width: 500px;
  }
  
  .login-screen form {
    width: 360px;
  }
  
  .login-content img {
    height: 100px;
  }
  
  .login-content h2 {
    margin: 15px 0;
    color: #333;
    text-transform: uppercase;
    font-size: 2.9rem;
  }
  
  .login-content .input-div {
    position: relative;
    display: grid;
    grid-template-columns: 7% 93%;
    margin: 25px 0;
    padding: 5px 0;
    border-bottom: 2px solid #d9d9d9;
  }
  
  .login-content .input-div.one {
    margin-top: 0;
  }
  
  .i {
    color: #d9d9d9;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .i i {
    transition: 0.3s;
  }
  
  .input-div > div {
    position: relative;
    height: 45px;
  }
  
  .input-div > div > h5 {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
    font-size: 18px;
    transition: 0.3s;
  }
  
  .input-div:before,
  .input-div:after {
    content: "";
    position: absolute;
    bottom: -2px;
    width: 0%;
    height: 2px;
    background-color: #38d39f;
    transition: 0.4s;
  }
  
  .input-div:before {
    right: 50%;
  }
  
  .input-div:after {
    left: 50%;
  }
  
  .input-div.focus:before,
  .input-div.focus:after {
    width: 50%;
  }
  
  .input-div.focus > div > h5 {
    top: -5px;
    font-size: 15px;
  }
  
  .input-div.focus > .i > i {
    color: #38d39f;
  }
  
  .input-div > div > input {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border: none;
    outline: none;
    background: none;
    padding: 0.5rem 0.7rem;
    font-size: 1.2rem;
    color: #555;
    font-family: "poppins", sans-serif;
  }
  
  .input-div.pass {
    margin-bottom: 4px;
  }
  
  .login-screen a {
    display: block;
    text-align: right;
    text-decoration: none;
    color: #999;
    font-size: 0.9rem;
    transition: 0.3s;
  }
  
  .login-screen a:hover {
    color: #38d39f;
  }
  
  .btn {
    display: block;
    width: 100%;
    height: 50px;
    border-radius: 25px;
    outline: none;
    border: none;
    background-image: linear-gradient(to right, #32be8f, #38d39f, #32be8f);
    background-size: 200%;
    font-size: 1.2rem;
    color: #fff;
    font-family: "Poppins", sans-serif;
    text-transform: uppercase;
    margin: 1rem 0;
    cursor: pointer;
    transition: 0.5s;
  }
  .btn:hover {
    background-position: right;
  }
  
  .disable {
    opacity: 0.4;
    cursor: not-allowed;
  }
  
  @media screen and (max-width: 1050px) {
    .login-container {
      grid-gap: 5rem;
    }
  }
  
  @media screen and (max-width: 1000px) {
    .login-screen form {
      width: 290px;
    }
  
    .login-content h2 {
      font-size: 2.4rem;
      margin: 8px 0;
    }
  
    .login-img img {
      width: 400px;
    }
  }
  
  @media screen and (max-width: 900px) {
    .login-container {
      grid-template-columns: 1fr;
    }
  
    .login-img {
      display: none;
    }
  
    .login-wave {
      display: none;
    }
  
    .login-content {
      justify-content: center;
    }
  }
  
'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/pages/HomeV2.js ---
import React, {useState, useEffect} from 'react'
import './style/General.page.css'
import {
    FolderAddOutlined,
    UploadOutlined,
    InboxOutlined,
    DownloadOutlined,
    FolderOpenOutlined,
    FileProtectOutlined,
    ArrowLeftOutlined
} from '@ant-design/icons';
import { 
    Button, 
    Table, 
    Modal, 
    Input, 
    Upload, 
    message, 
    Tooltip,
    Select,
    Spin, 
} from 'antd';
import { 
    useSelector, 
} from 'react-redux';
import { v4 as uuidv4 } from 'uuid';
import {useFormik } from 'formik';
import * as Yup from 'yup';
import {
    encryptStringTypeData,
} from '../utils/keypair.utils'
import { useHistory } from 'react-router-dom';
import ShareFileButton from '../components/ShareFileButton'
import ShareFolderButton from '../components/ShareFolderButton'
import DeleteButton from '../components/DeleteButton'
import useFetchFolder from '../hook/useFetchFolder'
import useFileCreate from '../hook/useFileCreate'
import useDownloadFile from '../hook/useDownloadFile'
import useFilePreview from '../hook/useFilePreview'
import { async } from 'regenerator-runtime';
import ColumnGroup from 'antd/lib/table/ColumnGroup';

const { Dragger } = Upload;
const {Option} = Select

const folderValidationSchema = Yup.object().shape({
    name: Yup.string().required('Invalid name'),
    type: Yup.number().required('Invalid type'),
});

export default function Home() {
    const [loading, setLoading] = useState(false)
    const [tableLoading, setTableLoading] = useState(false)
    const [upLoadDisable, setUpLoadDisable] = useState(false)
    const [newFolderId, setNewFolderId] = useState('')
    const [file, setFile] = useState({})
    const [downloadId, setDownloadId] = useState('')
    const history = useHistory()
    const {
        loading: folderLoading, 
        current: folderCurrent, 
        root: rootFolder,
        folderId: currentFolderId,
        parentFolder
    } = useSelector(state => state.folderV2)
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)
    const {loading: submitting, fileSubmit} = useFileCreate()
    const {loading: downloading, download} = useDownloadFile()
    useFetchFolder(newFolderId,setNewFolderId, setTableLoading)

    const {
        preview
    } = useFilePreview()

    const formik = useFormik({
        initialValues: {
            name: '',
            type: ''
        },
        validationSchema: folderValidationSchema,
        onSubmit: async (values) => {
            setLoading(true)
            const currentTimeStamp = new Date().getTime()
            const id = uuidv4()
            const folder_password = uuidv4()
            const {success, cipher} = await encryptStringTypeData(userCurrent.publicKey, folder_password)
            if (success) {
                const folder = {
                    _id: id, 
                    _name: values.name, 
                    _parent: currentFolderId,
                    _created_at: currentTimeStamp,
                    _type: parseInt(values.type),
                    _password: cipher,
                }
                try {
                    await window.contract.create_folder_v2(folder)
                    setIsModalCreateFolderVisible(false)
                    message.success("Folder created!!!")
                    setNewFolderId(folder._id)
                    formik.resetForm()              
                } catch (error) {
                    message.error(error.message, 10)
                } finally {
                    setLoading(false)
                }
                

                // history.go(0)
            }
            else {
                message.error("Invalid private key")
            }
        }
    })

    const {values, errors, touched, handleChange, handleSubmit, setFieldValue} = formik

    const [isModalCreateFolderVisible, setIsModalCreateFolderVisible] = useState(false);
    const [isModalUploadVisible, setIsModalUploadVisible] = useState(false);

    const showModalCreateFolder = () => {
        setIsModalCreateFolderVisible(true);
    };
    
    const handleOkCreateFolder = async() => {
        if(values.type===''){
            await setFieldValue('type', '1')
            handleSubmit()
        }else{
            handleSubmit()
        }
    }

    const handleUploadFile = async() => {
        setLoading(true)
        await fileSubmit(file, rootFolder, currentFolderId)
        message.success('Upload success!!!')
        setIsModalUploadVisible(false)
        setLoading(false)
        // setNewFolderId('')
    }

    const handleCancelCreateFolder = () => {
        formik.resetForm()
        setIsModalCreateFolderVisible(false);
    };

    const showModalUpload = () => {
        setIsModalUploadVisible(true);
    };
    
    const handleCancelUpload = () => {
        setIsModalUploadVisible(false);
        setFile({})
        setUpLoadDisable(false)
    };
    
    const props = {
        name: 'file',
        multiple: false,
        onChange(info) {
            const { status } = info.file;
            if (status !== 'uploading') {
                setLoading(true)
                fileSubmit(file, rootFolder, currentFolderId, setIsModalUploadVisible, setLoading)
            }
            // console.log(info.file.originFileObj)
            if (status === 'done') {
                message.success(`${info.file.name} file uploaded successfully.`);
            } else if (status === 'error') {
                message.error(`${info.file.name} file upload failed.`);
            }
        },
        onDrop(e) {
            console.log('Dropped files', e.dataTransfer.files);
        },
        showUploadList: {
            showRemoveIcon: false,
        }
    };

    const redirectToFolder = async(id) => {
        history.push(`/v2?folder=${id}`)
        setNewFolderId(id)
        // history.go(0)
    }

    const downloadFile = async (record) => {
        const {folder_type: folderType, folder_password} = rootFolder
        const {cid, encrypted_password, name, file_type} = record
        if (folderType === 1) {
            download(cid, encrypted_password, name, file_type, setDownloadId)
        } else if (folderType === 2) {
            download(cid, folder_password, name, file_type, setDownloadId)
        } else {
            message.error('download error, invalid file')
        }
    }

    const previewFile = async (record) => {
        const {folder_type: folderType, folder_password} = rootFolder
        const {cid, encrypted_password, name, file_type} = record
        if (folderType === 1) {
            preview(cid, encrypted_password, name, file_type)
        } else if (folderType === 2) {
            preview(cid, folder_password, name, file_type)
        } else {
            message.error('preview error, invalid file')
        }
    }

    const columns = [
        {
            title: 'Name',
            dataIndex: 'name',
            render(text, record) {
                return (
                    <div>
                        {record.isFolder  ? 
                            <a onClick={() => redirectToFolder(record.id)}>{!record.isTop && <FolderOpenOutlined />} {record.name}</a>
                            :
                            <a onClick={() => previewFile(record)}><FileProtectOutlined /> {record.name}</a>
                        }
                    </div>
                )
            }
        },
        {
            title: 'Type',
            dataIndex: 'file_type',
        },
        {
            title: '',
            render(text, record) {
                return (
                    <div>
                        {!record.isFolder && !record.isTop && <div className="d-flex" style={{float:"right"}}>
                            <Tooltip title="Download">
                                <Button
                                    onClick={async () => downloadFile(record)}
                                    className="mx-1"
                                    loading={downloading && downloadId === record.cid}
                                    disabled={downloading}
                                    style={{minWidth:'46px'}}
                                >
                                    {!(downloading && downloadId === record.cid)&&
                                        <DownloadOutlined />
                                    }
                                </Button>
                            </Tooltip>

                            {(!!rootFolder && rootFolder.folder_type === 1) &&<Tooltip title="Share file">
                                <ShareFileButton {...{...record, folder: currentFolderId}} />
                            </Tooltip>}

                            <Tooltip title="Remove">
                                <DeleteButton 
                                    type="File" 
                                    name={record.name} 
                                    handleDelete={async () => {
                                        try {
                                            setTableLoading(true)
                                            await window.contract.remove_file_v2({_folder: currentFolderId, _file: record.id})
                                            setNewFolderId('')
                                            message.success(`File ${record.name} deleted!!!`)            
                                        } catch (error) {
                                            message.error(error.message, 10)
                                        } finally {
                                            setTableLoading(false)
                                        }
                                        
                                        // history.go(0)
                                    }}
                                />
                            </Tooltip>
                        </div>}
                        {record.isFolder && !record.isTop && <div className="d-flex" style={{float:"right"}}>
                            {record.parent === userCurrent.account && record.folder_type === 2 &&<Tooltip title="Share folder">
                                <ShareFolderButton {...{...record, folder: currentFolderId}} />
                            </Tooltip>}

                            <Tooltip title="Remove">
                                <DeleteButton 
                                    type="Folder" 
                                    name={record.name} 
                                    handleDelete={async () => {
                                        try {
                                            setTableLoading(true)
                                            await window.contract.remove_folder_v2({_folder: record.id})
                                            setNewFolderId('')
                                            message.success(`Folder ${record.name} deleted!!!`) 
                                        } catch (error) {
                                            message.error(error.message, 10)
                                        } finally {
                                            setTableLoading(false)
                                        }

                                        
                                        // history.go(0)
                                    }}
                                />
                            </Tooltip>
                        </div>}
                    </div>
                )
            }

        },

    ];
    const fileUploading = loading ? <Spin tip='File Uploading' spinning={loading}></Spin> : "Click or drag file to this area to upload"

    return (
        <>
        
        <div id="homepage">
            <div className="header">
                <h2 className="title">My folders</h2>
                <hr />
            </div>
            <div className="content">
                <div className="actions d-flex justify-content-end">
                    <div className="action-button">
                        <Tooltip title="Create folder">
                            <Button 
                                icon={<FolderAddOutlined style={{ fontSize: '18px' }} />} 
                                onClick={showModalCreateFolder}
                                disabled={tableLoading}
                            >
                                Create folder
                            </Button>
                        </Tooltip>
                        <Modal 
                            title="Create folder" 
                            visible={isModalCreateFolderVisible} 
                            onOk={handleOkCreateFolder} 
                            onCancel={handleCancelCreateFolder}
                            confirmLoading={loading}
                            focusTriggerAfterClose={true}
                            maskClosable={false}
                            cancelButtonProps={{disabled: loading}}
                        >
                            <div>
                                <label className="form-label">Folder name</label>
                                <div className="input-group mb-3">
                                    <Input placeholder="Folder name" value={values.name || ''} onChange={handleChange('name')} />
                                </div>
                                {errors.name && touched.name && <span className="error-text">{errors.name}</span>}
                            </div>
                            {currentFolderId === userCurrent.account && <div>
                                <label className="form-label">Folder type</label>
                                <Select style={{ width: '100%' }} placeholder='Folder type' value={values.type || []} onChange={(val) => setFieldValue('type', val)}>
                                    <Option value="1">Private</Option>
                                    <Option value="2">Shareable</Option>
                                </Select>
                                {errors.type && touched.type && <span className="error-text">{errors.type}</span>}
                            </div>}
                        </Modal>
                    </div>
                    {currentFolderId !== userCurrent.account && <div className="action-button">
                        <Tooltip title='Upload file'>
                            <Button 
                                icon={<UploadOutlined style={{ fontSize: '18px' }} />} 
                                onClick={showModalUpload}
                                disabled={tableLoading}
                            >
                                Upload file
                            </Button>
                        </Tooltip>
                        <Modal 
                            id="UploadFile"
                            title="Upload file" 
                            visible={isModalUploadVisible} 
                            onCancel={handleCancelUpload}
                            footer={[]}
                            // okText="Upload"
                            // onOk={handleUploadFile}
                            // confirmLoading={loading}
                            
                            maskClosable={false}
                        >
                            <Dragger {...props} disabled={upLoadDisable} beforeUpload={(inf)=> {
                                if(!!inf){
                                    setUpLoadDisable(true)
                                    setFile(inf)
                                }
                                return false
                            }}>
                                <p className="ant-upload-drag-icon">
                                    <InboxOutlined />
                                </p>
                                <p className="ant-upload-text">{fileUploading}</p>
                            </Dragger>
                        </Modal>
                    </div>}
                </div>
                <div>
                    <Tooltip title="Back">
                        <Button onClick={() => redirectToFolder(parentFolder)} disabled={tableLoading}><ArrowLeftOutlined /></Button>
                    </Tooltip>
                </div>
                <div className="list-items mt-3">
                <Spin spinning={tableLoading} tip='Loading data...'>
                    <Table 
                        columns={columns} 
                        dataSource={folderCurrent} 
                        rowKey={(record) => record.id} 
                    />
                </Spin>
                </div>
            </div>
        </div>

        </>
    )
}

'''
'''--- src/pages/Login.js ---
import React, {useState, useEffect} from 'react'
import { useHistory } from "react-router-dom";
import './style/LoginPage.module.css'
// import wave from './wave.png'
// import avatar from './avatar.svg'
// import doc from './doc.svg'
import {login} from '../utils/near.utils'

export default function LoginPage() {

    let history = useHistory();

    useEffect(() => {
        if (window.walletConnection.isSignedIn()) {
            setTimeout(() => {
                history.push("/home");
            }, 1000)
        }
    }, [])

    const submitHandler = (e) => {
        e.preventDefault()
        login()
    }

    if (!window.walletConnection.isSignedIn()) {
        return (
            <>
                <div className="login-screen">
                    <img className="login-wave" src="/wave.png" alt="" />
                    <div className="login-container">
                        <div className="login-img">
                            <img src="/doc.svg" alt="" />
                        </div>
                        <div className="login-content">
                            <form onSubmit={submitHandler}>
                                <img src="/avatar.svg" alt="" />
                                <h2 className="title">PriStorage</h2>
                                <input
                                    className="btn"
                                    type="submit"
                                    value=" Login with NEAR"
                                />
                            </form>
                        </div>
                    </div>
                </div>
            </>
        )
    }

    return (
        <>
            <div className="login-screen">
                <img className="login-wave" src="/wave.png" alt="" />
                <div className="login-container">
                    <div className="login-img">
                        <img src="/doc.svg" alt="" />
                    </div>
                    <div className="login-content">
                        <form onSubmit={submitHandler}>
                            <img src="/avatar.svg" alt="" />
                            <h2 className="title">Vi Storage</h2>
                            <h3>You are logged in</h3>
                        </form>
                    </div>
                </div>
            </div>
        </>
    )
}

'''
'''--- src/pages/SharedWithMe.js ---
import React, {useState, useEffect} from 'react'
import './style/General.page.css'
import {
    DownloadOutlined,
    FolderOpenOutlined,
    FileProtectOutlined,
    FolderAddOutlined,
    UploadOutlined,
    InboxOutlined,
    ArrowLeftOutlined
} from '@ant-design/icons';
import { 
    Table, 
    Tabs,
    Tooltip,
    Button,
    Input,
    Modal,
    Upload,
    message,
    Spin, 
} from 'antd';
import { 
    useSelector, 
} from 'react-redux';
import {
    encryptStringTypeData,
} from '../utils/keypair.utils'
import {useHistory} from 'react-router-dom'
import {useFormik } from 'formik';
import * as Yup from 'yup';
import { v4 as uuidv4 } from 'uuid';
import useFetchSharedDocs from '../hook/useFetchSharedDoc'
import useFileCreate from '../hook/useFileCreate'
import useDownloadFile from '../hook/useDownloadFile'
import useFilePreview from '../hook/useFilePreview'
import { getUrlParameter } from '../utils/url.utils';

const { Dragger } = Upload;

const folderValidationSchema = Yup.object().shape({
    name: Yup.string().required('Invalid folder name'),
});

export default function SharedWithMe() {
    const [loading, setLoading] = useState(false)
    const [tableLoading, setTableLoading] = useState(false)
    const [newFolderId, setNewFolderId] = useState('')
    const [upLoadDisable, setUpLoadDisable] = useState(false)
    const [file, setFile] = useState({})
    const history = useHistory()

    const [data, setData] = useState([])
    const {loading: loadingCurrent, current: userCurrent} = useSelector(state => state.user)
    const {
        loading: folderLoading, 
        current: folderCurrent, 
        root: rootFolder,
        folderId: currentFolderId,
        parentFolder,
        permission
    } = useSelector(state => state.sharedWithMe)
    const {loading: submitting, fileSubmit} = useFileCreate()
    const {loading: downloading, download} = useDownloadFile()
    useFetchSharedDocs(newFolderId, setNewFolderId, setTableLoading)
    const {
        preview
    } = useFilePreview()
    
    const formik = useFormik({
        initialValues: {
            name: '',
        },
        validationSchema: folderValidationSchema,
        onSubmit: async (values) => {
            setLoading(true)
            const currentTimeStamp = new Date().getTime()
            const id = uuidv4()
            const {accountId} = await window.walletConnection.account()
            const folder = {
                _id: id, 
                _name: values.name, 
                _parent: currentFolderId,
                _password: null,
                _created_at: currentTimeStamp,
                _type: null,
            }

            try {
                await window.contract.create_folder_v2(folder)
                setIsModalCreateFolderVisible(false)
                message.success("Folder created!!!")
                setNewFolderId(folder._id)
                formik.resetForm()             
            } catch (error) {
                message.error(error.message, 10)
            } finally {
                setLoading(false)
            }
            
            // history.go(0)
        }
    })

    const {values, errors, touched, handleChange, handleSubmit, setFieldValue} = formik

    const [isModalCreateFolderVisible, setIsModalCreateFolderVisible] = useState(false);
    const [isModalUploadVisible, setIsModalUploadVisible] = useState(false);

    const showModalCreateFolder = () => {
        setIsModalCreateFolderVisible(true);
    };
    
    const handleCancelCreateFolder = () => {
        setIsModalCreateFolderVisible(false);
        formik.resetForm()
    };

    const showModalUpload = () => {
        setIsModalUploadVisible(true);
    };
    
    const handleUpload = () => {
        setIsModalUploadVisible(false);
    };
    
    const handleCancelUpload = () => {
        setIsModalUploadVisible(false);
    };

    const props = {
        name: 'file',
        multiple: false,
        onChange(info) {
            const { status } = info.file;
            if (status !== 'uploading') {
                setLoading(true)
                fileSubmit(file, rootFolder, currentFolderId, setIsModalUploadVisible, setLoading)
            }
        },
        onDrop(e) {
            console.log('Dropped files', e.dataTransfer.files);
            // fileSubmit(e.dataTransfer.files[0])
        },
        showUploadList: {
            showRemoveIcon: false,
        }
    };

    const redirectToFolder = (id) => {
        if (!id || id === rootFolder?.parent) {
            history.push(`/shared_with_me`)
            setNewFolderId('')
            // history.go(0)
        } else {
            history.push(`/shared_with_me?doc_id=${id}`)
            setNewFolderId(id)
            // history.go(0)
        }
    }

    const downloadFile = async (record) => {
        const {cid, encrypted_password, name, file_type} = record
        if (encrypted_password) {
            download(cid, encrypted_password, name, file_type)
        } else if (rootFolder?.folder_password) {
            const {folder_password} = rootFolder
            download(cid, folder_password, name, file_type)
        } else {
            message.error('download error, invalid file')
        }
    }

    const previewFile = async (record) => {
        const {cid, encrypted_password, name, file_type} = record
        if (encrypted_password) {
            preview(cid, encrypted_password, name, file_type)
        } else if (rootFolder?.folder_password) {
            const {folder_password} = rootFolder
            preview(cid, folder_password, name, file_type)
        } else {
            message.error('download error, invalid file')
        }
    }

    const columns = [
        {
            title: 'Name',
            dataIndex: 'name',
            render(text, record) {
                return (
                    <div>
                        {record.isFolder  ? 
                            <a onClick={() => redirectToFolder(record.id)}>{!record.isTop && <FolderOpenOutlined />} {record.name}</a>:
                            <a onClick={() => previewFile(record)}><FileProtectOutlined /> {record.name}</a>
                        }
                    </div>
                )
            }
        },
        {
            title: 'Type',
            dataIndex: 'file_type',
        },
        {
            title: '',
            render(text, record) {
                return (
                    <div>
                        {!record.isFolder && !record.isTop && <div className="d-flex" style={{float:"right"}}>
                            <Tooltip title="Download">
                                <Button
                                    onClick={async () => downloadFile(record)}
                                    className='mx-1'
                                >
                                    <DownloadOutlined />
                                </Button>
                            </Tooltip>
                        </div>}
                    </div>
                )
            }
        },
    ];
    const fileUploading = loading ? <Spin tip='File Uploading' spinning={loading}></Spin>:"Click or drag file to this area to upload"

    return (
        <>
        <div>
            <div className="header">
                <h2 className="title">Shared with me</h2>
                <hr />
            </div>
            <div className="content">
                {!!getUrlParameter("doc_id") && permission === 2  && <div className="actions d-flex justify-content-end">
                    <div className="action-button">
                        <Tooltip title='Create folder'>
                            <Button 
                                icon={<FolderAddOutlined style={{ fontSize: '18px' }} />} 
                                onClick={showModalCreateFolder} 
                                disabled={tableLoading}
                            >
                                Create folder
                            </Button>
                        </Tooltip>
                        <Modal 
                            title="Create folder" 
                            visible={isModalCreateFolderVisible} 
                            onOk={handleSubmit} 
                            onCancel={handleCancelCreateFolder}
                            confirmLoading={loading}
                            maskClosable={false}
                            cancelButtonProps={{disabled: loading}}
                        >
                            <label className="form-label">Folder name</label>
                            <div className="input-group mb-3">
                                <Input placeholder="Folder name" value={values.name || ''} onChange={handleChange('name')} />
                            </div>
                            {errors.name && touched.name && <span className="error-text">{errors.name}</span>}
                        </Modal>
                    </div>
                    <div className="action-button">
                        <Tooltip title='Upload file'>
                            <Button 
                                icon={<UploadOutlined style={{ fontSize: '18px' }} />} 
                                onClick={showModalUpload}
                                disabled={tableLoading}
                            >
                                Upload file
                            </Button>
                        </Tooltip>
                        <Modal 
                            title="Upload file" 
                            visible={isModalUploadVisible} 
                            onCancel={handleCancelUpload}
                            maskClosable={false}
                            footer={[]}
                            // okText="Upload"
                            // onOk={handleUploadFile}
                            // confirmLoading={loading}
                        >
                            <Dragger {...props} disabled={upLoadDisable} beforeUpload={(inf)=> {
                                if(!!inf){
                                    setUpLoadDisable(true)
                                    setFile(inf)
                                }
                                return false
                            }}>
                                <p className="ant-upload-drag-icon">
                                    <InboxOutlined />
                                </p>
                                <p className="ant-upload-text">{fileUploading}</p>
                            </Dragger>
                        </Modal>
                    </div>
                </div>}
                <div className="list-items mt-3">
                    <div>
                        <Tooltip title="Back">
                            <Button onClick={() => redirectToFolder(parentFolder)} disabled={tableLoading}><ArrowLeftOutlined /></Button>
                        </Tooltip>
                    </div>
                    <div className="mt-3">
                    <Spin spinning={tableLoading} tip='Loading data...'>
                        <Table 
                            columns={columns} 
                            dataSource={folderCurrent} 
                            rowKey={(record) => record.id} 
                        />
                    </Spin>
                    </div>
                </div>
            </div>
        </div>
        </>
    )
}

'''
'''--- src/pages/style/General.page.css ---
.header .title {
    font-weight: 300;
}

.content .actions .action-button {
    margin-right: 10px;
}
'''
'''--- src/pages/style/LoginPage.module.css ---
.login-screen {
    font-family: "Poppins", sans-serif;
    overflow: hidden;
  }
  
  .login-wave {
    position: absolute;
    bottom: 0;
    left: 0;
    height: 100%;
    z-index: -1;
  }
  
  .login-container {
    width: 100vw;
    height: 100vh;
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-gap: 7rem;
    padding: 0 2rem;
  }
  
  .login-img {
    display: flex;
    justify-content: flex-end;
    align-items: center;
  }
  
  .login-content {
    display: flex;
    justify-content: flex-start;
    align-items: center;
    text-align: center;
  }
  
  .login-content .title {
    font-size: 28px;
  }
  
  .login-img img {
    width: 500px;
  }
  
  .login-screen form {
    width: 360px;
  }
  
  .login-content img {
    height: 100px;
  }
  
  .login-content h2 {
    margin: 15px 0;
    color: #333;
    text-transform: uppercase;
    font-size: 2.9rem;
  }
  
  .login-content .input-div {
    position: relative;
    display: grid;
    grid-template-columns: 7% 93%;
    margin: 25px 0;
    padding: 5px 0;
    border-bottom: 2px solid #d9d9d9;
  }
  
  .login-content .input-div.one {
    margin-top: 0;
  }
  
  .i {
    color: #d9d9d9;
    display: flex;
    justify-content: center;
    align-items: center;
  }
  
  .i i {
    transition: 0.3s;
  }
  
  .input-div > div {
    position: relative;
    height: 45px;
  }
  
  .input-div > div > h5 {
    position: absolute;
    left: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: #999;
    font-size: 18px;
    transition: 0.3s;
  }
  
  .input-div:before,
  .input-div:after {
    content: "";
    position: absolute;
    bottom: -2px;
    width: 0%;
    height: 2px;
    background-color: #38d39f;
    transition: 0.4s;
  }
  
  .input-div:before {
    right: 50%;
  }
  
  .input-div:after {
    left: 50%;
  }
  
  .input-div.focus:before,
  .input-div.focus:after {
    width: 50%;
  }
  
  .input-div.focus > div > h5 {
    top: -5px;
    font-size: 15px;
  }
  
  .input-div.focus > .i > i {
    color: #38d39f;
  }
  
  .input-div > div > input {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    border: none;
    outline: none;
    background: none;
    padding: 0.5rem 0.7rem;
    font-size: 1.2rem;
    color: #555;
    font-family: "poppins", sans-serif;
  }
  
  .input-div.pass {
    margin-bottom: 4px;
  }
  
  .login-screen a {
    display: block;
    text-align: right;
    text-decoration: none;
    color: #999;
    font-size: 0.9rem;
    transition: 0.3s;
  }
  
  .login-screen a:hover {
    color: #38d39f;
  }
  
  .btn {
    display: block;
    width: 100%;
    height: 50px;
    border-radius: 25px;
    outline: none;
    border: none;
    background-image: linear-gradient(to right, #32be8f, #38d39f, #32be8f);
    background-size: 200%;
    font-size: 1.2rem;
    color: #fff;
    font-family: "Poppins", sans-serif;
    text-transform: uppercase;
    margin: 1rem 0;
    cursor: pointer;
    transition: 0.5s;
  }
  .btn:hover {
    background-position: right;
  }
  
  .disable {
    opacity: 0.4;
    cursor: not-allowed;
  }
  
  @media screen and (max-width: 1050px) {
    .login-container {
      grid-gap: 5rem;
    }
  }
  
  @media screen and (max-width: 1000px) {
    .login-screen form {
      width: 290px;
    }
  
    .login-content h2 {
      font-size: 2.4rem;
      margin: 8px 0;
    }
  
    .login-img img {
      width: 400px;
    }
  }
  
  @media screen and (max-width: 900px) {
    .login-container {
      grid-template-columns: 1fr;
    }
  
    .login-img {
      display: none;
    }
  
    .login-wave {
      display: none;
    }
  
    .login-content {
      justify-content: center;
    }
  }
  
'''
'''--- src/router/index.js ---
import LoginPage from "../pages/Login"
import FolderSharedWithMe from '../pages/SharedWithMe'
import HomeV2 from '../pages/HomeV2'

const isAuthenticated = () => {
    return window.walletConnection.isSignedIn()
}

const routers = [
    {
        path: '/login',
        component: LoginPage
    },
    {
        path: '/shared_with_me',
        component: FolderSharedWithMe,
        beforeRouteEnter: isAuthenticated
    },
    {
        path: '/',
        component: HomeV2,
        beforeRouteEnter: isAuthenticated
    },
]

module.exports = routers
'''
'''--- src/store/slice/folderV2.slice.js ---
import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';

const commonFolderSlice = createSlice({
    name: 'folderV2',
    initialState: {
        loading: false,
        current: [],
        root: {},
        folderId: "",
        parentFolder: ""
    },
    reducers: {
        setCurrent: (state, {type, payload}) => {
            state.current = payload
        },
        setRoot: (state, {type, payload}) => {
            state.root = payload
        },
        setFolderId: (state, {type, payload}) => {
            state.folderId = payload
        },
        setParentFolder: (state, {type, payload}) => {
            state.parentFolder = payload
        },
    },
    extraReducers: {
        
    },
})

const {actions, reducer} = commonFolderSlice

export const { 
    setCurrent,
    setRoot,
    setFolderId,
    setParentFolder
} = actions

export default reducer
'''
'''--- src/store/slice/root.slice.js ---
import user from './user.slice'
import folderV2 from './folderV2.slice'
import sharedWithMe from './sharedWithMeV2'

const reducers = {
    folderV2: folderV2,
    sharedWithMe: sharedWithMe,
    user: user,
}

export default reducers
'''
'''--- src/store/slice/sharedWithMeV2.js ---
import {createSlice, createAsyncThunk} from '@reduxjs/toolkit';

const commonFolderSlice = createSlice({
    name: 'folderV2',
    initialState: {
        loading: false,
        current: [],
        root: null,
        folderId: "",
        parentFolder: "",
        owner: "",
        permission: 1
    },
    reducers: {
        setCurrentSharedData: (state, {type, payload}) => {
            state.current = payload
        },
        setRootSharedFolder: (state, {type, payload}) => {
            state.root = payload
        },
        setSharedFolderId: (state, {type, payload}) => {
            state.folderId = payload
        },
        setParentOfSharedFolder: (state, {type, payload}) => {
            state.parentFolder = payload
        },
        setOwner: (state, {type, payload}) => {
            state.owner = payload
        },
        setPermission: (state, {type, payload}) => {
            state.permission = payload
        },
    },
    extraReducers: {
        
    },
})

const {actions, reducer} = commonFolderSlice

export const { 
    setCurrentSharedData,
    setRootSharedFolder,
    setSharedFolderId,
    setParentOfSharedFolder,
    setOwner,
    setPermission
} = actions

export default reducer
'''
'''--- src/store/slice/user.slice.js ---
import {createSlice} from '@reduxjs/toolkit';

const userSlice = createSlice({
    name: 'user',
    initialState: {
        loading: false,
        current: {
            account: "",
            privateKey: "",
            publicKey: "",
            web3token: ""
        }
    },
    reducers: {
        setUser: (state, {type, payload}) => {
            state.current = payload
        },

        logout(state) {
            state.current = {
                status: 0,
                account: "",
                publicKey: "",
                web3token: ""
            }
        }
    },

    extraReducers: {
        
    },
})

const {actions, reducer} = userSlice

export const { 
    setUser,
    logout
} = actions

export default reducer
'''
'''--- src/store/store.js ---
import { configureStore } from '@reduxjs/toolkit';
import rootReducer from './slice/root.slice'
//...

const store = configureStore({
    reducer: rootReducer
})

export default store
'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

export async function initContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  window.walletConnection = new WalletConnection(near)

  window.accountId = window.walletConnection.getAccountId()

  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: [
      'get_user', 
      'get_folder_info', 
      'get_folder_info_v2',
      'get_shared_folder_info',
      'get_file_info',
      'get_root_shared_folder',
      'get_owner_by_folder_id',
      'get_owner_by_shared_folder_id',
      'get_shared_folders_of_user',
      'get_shared_user_of_folder',
      'get_shared_files_of_user',
      'get_shared_user_of_file',
      'get_shared_file_docs_by_owner',
      'get_shared_folder_docs_by_owner',
      'get_all_file_in_folder',
      'get_all_file_in_shared_folder',
      'get_root_id_by_shared_folder_id',
      'get_root',
      'get_shared_doc_of_user',
      'get_shared_doc_detail',
      'verify_accessible'
    ],
    changeMethods: [
      'sign_up', 
      'create_folder', 
      'create_shared_folder', 
      'create_folder_v2',
      'create_file', 
      'create_file_v2',
      'create_shared_folder_file',
      'share_file',
      'share_file_v2',
      'share_folder',
      'share_folder_v2',
      'remove_file',
      'remove_file_v2', 
      'remove_folder',
      'remove_folder_v2',
      'remove_shared_file',
      'remove_shared_folder'
    ],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/utils/file.utils.js ---
import CryptoJS from "crypto-js"

const FILE_MAX_SIZE = 30000 * 1024

function createChunks(file,cSize) {
    let startPointer = 0;
    let endPointer = file.size;
    let chunks = [];
    while(startPointer<endPointer){
        let newStartPointer = startPointer+cSize;
        chunks.push(file.slice(startPointer,newStartPointer));
        startPointer = newStartPointer;
    }
    return chunks;
}

function concatenateBlobs(blobs, type, callback) {
    var buffers = [];

    var index = 0;

    function readAsArrayBuffer() {
        if (!blobs[index]) {
            return concatenateBuffers();
        }
        var reader = new FileReader();
        reader.onload = function(event) {
            buffers.push(event.target.result);
            index++;
            readAsArrayBuffer();
        };
        reader.readAsArrayBuffer(blobs[index]);
    }

    readAsArrayBuffer();

    function audioLengthTo32Bit(n) {
        n = Math.floor(n);
        var b1 = n & 255;
        var b2 = (n >> 8) & 255;
        var b3 = (n >> 16) & 255;
        var b4 = (n >> 24) & 255;
        return [b1, b2, b3, b4];
    }

    function concatenateBuffers() {
        var byteLength = 0;
        buffers.forEach(function(buffer) {
            byteLength += buffer.byteLength;
        });

        var tmp = new Uint8Array(byteLength);
        var lastOffset = 0;
        var newData;
        buffers.forEach(function(buffer) {
            if (type=='audio/wav' && lastOffset >  0) newData = new Uint8Array(buffer, 44);
            else newData = new Uint8Array(buffer);
            tmp.set(newData, lastOffset);
            lastOffset += newData.length;
        });
        if (type=='audio/wav') {
            tmp.set(audioLengthTo32Bit(lastOffset - 8), 4);
            tmp.set(audioLengthTo32Bit(lastOffset - 44), 40); // update audio length in the header
        }
        var blob = new Blob([tmp.buffer], {
            type: type
        });
        callback(blob);         
    }
}

function getBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    });
}

function createFileUrl(blob) {
    const url = window.URL.createObjectURL(blob);
    return url
}

function saveFile(blob, filename) {
    var a = document.createElement("a");
    document.body.appendChild(a);
    a.style = "display: none";
    var url = createFileUrl(blob);
    a.href = url;
    a.download = filename;
    a.click();
    window.URL.revokeObjectURL(url);
}

function getArrayBuffer(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsArrayBuffer(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    })
}

function getSplittedEncodeFiles(file) {
    const chunks = createChunks(file, FILE_MAX_SIZE)
    const files = chunks.map((chunk, index) => {
        return new File([chunk], `${index}_${file.name}`)
    })
    return files
}

async function encryptSingleFile(file, password) {
    var key = password;
    const arrayBuffer = await getArrayBuffer(file)
    var wordArray = CryptoJS.lib.WordArray.create(arrayBuffer);
    var encrypted = CryptoJS.AES.encrypt(wordArray, key).toString();
    var fileEnc = new Blob([encrypted]);
    return new File([fileEnc], file.name + ".enc");
}

function encrypt(file, password) {
    const files = getSplittedEncodeFiles(file)
    return Promise.all(files.map(file => {
        return encryptSingleFile(file, password)
    }))
}

function convertWordArrayToUint8Array(wordArray) {
    var arrayOfWords = wordArray.hasOwnProperty("words") ? wordArray.words : [];
    var length = wordArray.hasOwnProperty("sigBytes") ? wordArray.sigBytes : arrayOfWords.length * 4;
    var uInt8Array = new Uint8Array(length), index=0, word, i;
    for (i=0; i<length; i++) {
        word = arrayOfWords[i];
        uInt8Array[index++] = word >> 24;
        uInt8Array[index++] = (word >> 16) & 0xff;
        uInt8Array[index++] = (word >> 8) & 0xff;
        uInt8Array[index++] = word & 0xff;
    }
    return uInt8Array;
}

function getFileAsText(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsText(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    })
}

async function decrypt(files, fileName, password) {
    const decryptedFiles = await Promise.all(files.map(file => {
        return decryptSingleFile(file, password)
    }))
    return decryptedFiles
}

async function decryptSingleFile(file, password) {
    var key = password;  
    const textFile = await getFileAsText(file) 
    var decrypted = CryptoJS.AES.decrypt(textFile, key);
    var typedArray = convertWordArrayToUint8Array(decrypted);
    var fileDec = new Blob([typedArray]);
    return fileDec
}

module.exports = {
    encrypt,
    decrypt,
    concatenateBlobs,
    saveFile,
    createFileUrl
}
'''
'''--- src/utils/keypair.utils.js ---
const EthCrypto = require('eth-crypto');

function createKeyPair() {
    const {privateKey, publicKey} = EthCrypto.createIdentity();
    return {privateKey, publicKey}
}

function getPublicKeyByPrivateKey(privateKey) {
    return EthCrypto.publicKeyByPrivateKey(privateKey)
}

async function encryptStringTypeData(publicKey, data) {
    try {
        const encrypted = await EthCrypto.encryptWithPublicKey(
            publicKey,
            data
        );
        const cipher = EthCrypto.cipher.stringify(encrypted)
        return {success: true, cipher}
    } catch(error) {
        return {success: false, error: error.message}
    } 
}

async function decryptStringTypeData(privateKey, data) {
    try {
        const cipher = EthCrypto.cipher.parse(data)
        const encrypted = await EthCrypto.decryptWithPrivateKey(
            privateKey,
            cipher
        );
        return {success: true, plaintext: encrypted}
    } catch(error) {
        return {success: false, error: error.message}
    } 
}

module.exports = {
    createKeyPair,
    getPublicKeyByPrivateKey,
    encryptStringTypeData,
    decryptStringTypeData
}
'''
'''--- src/utils/near.utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from '../config'
const nearConfig = getConfig(process.env.NODE_ENV || 'development')

export async function initContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))
  window.walletConnection = new WalletConnection(near)
  window.accountId = window.walletConnection.getAccountId()
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: ['isSignedUp', 'getUser', 'getFolderInfo', 'getSharedFolderInfo'],
    changeMethods: ['signUp', 'createFolder', 'createSharedFolder', 'createFile', 'removeFile', 'removeFolder', ],
  })
}

export function logout() {
  window.walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export async function login() {
  await window.walletConnection.requestSignIn(
    nearConfig.contractName
  )
}
'''
'''--- src/utils/url.utils.js ---
const getUrlParameter = (name) => {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    let regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    let results = regex.exec(window.location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
};

module.exports = {
    getUrlParameter
}
'''
'''--- src/utils/web3.storage.js ---
import { Web3Storage } from 'web3.storage/dist/bundle.esm.min.js'

function makeStorageClient(TOKEN) {
    return new Web3Storage({ token: TOKEN })
}

async function storeFiles(TOKEN, files, onRootCidReady, onStoredChunk ) {
    const client = makeStorageClient(TOKEN)
    const cid = await client.put(files, { onRootCidReady, onStoredChunk })
    return cid
}

async function retrieveFiles(TOKEN, cid) {
    const client = makeStorageClient(TOKEN)
    const res = await client.get(cid)
    console.log(`Got a response! [${res.status}] ${res.statusText}`)
    if (!res.ok) {
        throw new Error(`failed to get ${cid} - [${res.status}] ${res.statusText}`)
    }

    // unpack File objects from the response
    const files = await res.files()
    return files
}

async function retrieve(TOKEN, cid) {
    const client = makeStorageClient(TOKEN)
    const res = await client.get(cid)
    console.log(`Got a response! [${res.status}] ${res.statusText}`)
    if (!res.ok) {
        throw new Error(`failed to get ${cid}`)
    }

    // request succeeded! do something with the response object here...
}

async function checkFileStatus(TOKEN, cid) {
    const client = makeStorageClient(TOKEN)
    const status = await client.status(cid)
    if (status) {
        console.log(status)
    }
}

async function validateToken(token) {
    const web3storage = new Web3Storage({ token })
    try {
        for await (const _ of web3storage.list({ maxResults: 1})) {
            break
        }
        return true
    } catch (e) {
        return false
    }
}

module.exports = {
    makeStorageClient,
    storeFiles,
    retrieve,
    retrieveFiles,
    checkFileStatus,
    validateToken
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''
'''--- src/worker.js ---
import { expose } from "comlink";
import {
    encrypt,
    decrypt 
} from "./utils/file.utils"

const worker = {
    encryptByWorker: encrypt,
    decryptByWorker: decrypt
}

expose(worker)
'''