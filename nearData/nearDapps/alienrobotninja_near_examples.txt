*GitHub Repository "alienrobotninja/near_examples"*

'''--- csharp/music-server-js/near-api/nearProvider.js ---
const nearAPI = require("near-api-js");

const { keyStores, KeyPair, connect, WalletConnection } = nearAPI;
const DEFAULT_ACCOUNT_ID = "halremawa.testnet";
// creates keyStore from a private key string
// you can define your key here or use an environment variable

let keyStore, keyPair, config, near, default_account, contract;//wallet

const PRIVATE_KEY =
    "ed25519:2cugYUvidWRDcDEvkZ8reDed3Cxytpux4qbmLLptXgUnFDhqsMv1tZZt6qHLyvMU5nT31vChLdsSp8sbZy9bnAbP";

const initParameters = new Promise(async (resolve, reject) => {
    keyStore = new keyStores.InMemoryKeyStore();
    // creates a public / private key pair using the provided private key
    keyPair = KeyPair.fromString(PRIVATE_KEY);
    // adds the keyPair you created to keyStore
    await keyStore.setKey("testnet", "halremawa.testnet", keyPair);

    config = {
        networkId: "testnet",
        keyStore: keyStore,
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };

    // connect to NEAR
    near = await connect(config);

    // create wallet connection
    //wallet = new WalletConnection(near);

    // create default account
    default_account = await near.account(DEFAULT_ACCOUNT_ID);

    contract = new nearAPI.Contract(
        default_account, // the account object that is connecting
        "music.halremawa.testnet",
        {
            // name of contract you're connecting to
            viewMethods: ["getSong", "getSongs", "getSongsForUser", "getSongsForCurrentUser"], // view methods do not change state but usually return a value
            changeMethods: ["setSong", "uploadSong", "updateSong", "deleteSong"], // change methods modify state
            sender: default_account // account object to initialize and sign transactions.
        }
    );

    console.log("Near connected");
    resolve({
        near,
        default_account,
        contract,
        nearAPI
    });
});

exports.nearItems = initParameters;

'''
'''--- csharp/music-server-js/server.js ---
var express = require('express'),
cors = require('cors'),
  app = express(),
 fileUpload = require('express-fileupload');
  port = process.env.PORT || 3001,
  bodyParser = require('body-parser');

process.on('uncaughtException', function (err) {
  console.log(err);
});

app.use(cors());

// app.use(function(req, res) {
//     res.status(404).send({url: req.originalUrl + ' not found'})
//   });

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
var routes = require('./near-api/routes/transactionsRoute');
routes(app);

routes = require('./near-api/routes/songsRoute');
routes(app);

routes = require('./near-api/routes/accountRoute');
routes(app);

app.use(fileUpload());
routes = require('./arweave-api/routes/addressRoute'); //importing route
routes(app); //register the route

app.listen(port, function () {
  console.log('near/arweave RESTful API server started on: ' + port);
});
'''
'''--- csharp/music-ui/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- csharp/music-ui/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- csharp/music-ui/src/App.js ---
import logo from './logo.svg';
import './App.css';
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Songs from "./components/marketplace/Songs";
import Cover from "./components/utils/Cover";
import coverImg from "./assets/img/sandwich.jpg";
import "./App.css";

const App = function AppWrapper() {
  const account = window.walletConnection.account();
  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
       <Notification /> 
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <main> 
            <Songs /> 
            </main>
        </Container>
      ) : (
        <Cover name="Share" login={login} coverImg={coverImg} />
      )}
    </>
  );
};

export default App;

'''
'''--- csharp/music-ui/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- csharp/music-ui/src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> {symbol}</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                destroy();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- csharp/music-ui/src/components/marketplace/AddSong.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import axios from "axios";
import { Button, Modal, Form, FloatingLabel, Spinner } from "react-bootstrap";
import { arweave } from "../../lib/api";
import { toast } from "react-toastify";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";

axios.defaults.timeout = 0;

const AddSong = ({ save, onLoading, offLoading }) => {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [artist, setArtist] = useState("");
  const [location, setLocation] = useState("");
  const [selectedFile, setSelectedFile] = useState(null);
  // const [price, setPrice] = useState(0);
  const isFormFilled = () => name && image && artist && location;

  const [show, setShow] = useState(false);

  const [showUploading, setShowUploading] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  //arweave post data
  async function onUploadButtonClicked() {

    setShowUploading(true);

    try {
      //debugger;
      let formData = new FormData();
      formData.append('file', selectedFile);
      for (var key of formData.entries()) {
        console.log(key[0] + ', ' + key[1]);
      }
      //debugger;
      var ret = await axios.post('http://localhost:3001/arweave/postSong', formData, {timeout:0});

      //debugger;
      setLocation(ret.data.address);
      setShowUploading(false);
      toast(<NotificationSuccess text="Song uploaded successfully." />);
      return ret.data;

    } catch (err) {
      //debugger;
      console.error(err);
      setShowUploading(false);
      toast(<NotificationSuccess text="Network congestion. Please try again later." />);
    };
  }

  // On file select (from the pop up)
  let onFileChange = event => {
    console.log('[onFileChange]', event.target.files[0]);
    // Update the state
    setSelectedFile(event.target.files[0]);
  };
  // File content to be displayed after
  // file upload is complete
  let fileData = () => {
    if (selectedFile) {
      return (
        <>
          <div>
            <h2>File Details:</h2>
            <p>File Name: {selectedFile.name}</p>
            <p>File Type: {selectedFile.type}</p>
            {/* 
             */}
          </div>
        </>
      );
    } else {
      return (
        <>
          <div>
            <br />
            <h4>Choose before Pressing the Upload button</h4>
          </div>
        </>
      );
    }
  };

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Song</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Title"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter title of song"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputDescription"
              label="Artist"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Artist"
                onChange={(e) => {
                  setArtist(e.target.value);
                }}
              />
            </FloatingLabel>
            {/* <FloatingLabel
              controlId="inputLocation"
              label="Location"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Location"
                contentEditable="false"
                onChange={(e) => {
                  setLocation(e.target.value);
                }}
              />
            </FloatingLabel> */}

            <div>
              <di>
                Location: {location}
              </di>
              <div>
                <input type="file" onChange={onFileChange} />
                {!showUploading ? (
                  <>
                    <button onClick={onUploadButtonClicked}>
                      Upload!
                    </button>
                  </>
                ) : (
                  <>
                    <Button disabled>
                      <Spinner
                        as="span"
                        animation="grow"
                        size="sm"
                        role="status"
                        aria-hidden="true"
                      />
                      Uploading...
                    </Button>
                  </>
                )

                }
              </div>
              {/* {fileData()} */}
            </div>

          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              save({
                name,
                image,
                artist,
                location,
              });
              handleClose();
            }}
          >
            Save song
          </Button>
        </Modal.Footer>
      </Modal>

    </>
  );
};

AddSong.propTypes = {
  save: PropTypes.func.isRequired,
};

export default AddSong;
'''
'''--- csharp/music-ui/src/components/marketplace/DeleteSong.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
import { utils } from "near-api-js";

const DeleteSong = ( {songId, songName, deleteFunc} ) => {
  
  const [show, setShow] = useState(false);

  const handleCloseDelete = () => setShow(false);
  const handleShowDelete = () => setShow(true);

  return (
    <>
      {/* <Button
        onClick={handleShowDelete}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button> */}
      <Button
            variant="outline-dark"
            onClick={handleShowDelete}
            className="w-100 py-3"
          >
            Delete
          </Button>
      <Modal show={show} onHide={handleCloseDelete} centered>
        <Modal.Header closeButton>
          <Modal.Title>Delete Song</Modal.Title>
        </Modal.Header>
        <div>
          Are you sure you want to delete song "{songName}"?
        </div>
        <Modal.Footer>
        <Button
            variant="dark"
            onClick={() => {
              deleteFunc(songId);
              handleCloseDelete();
            }}
          >
            Yes
          </Button>
          <Button variant="outline-secondary" onClick={handleCloseDelete}>
            No
          </Button>

        </Modal.Footer>
      </Modal>
    </>
  );
};

// AddSong.propTypes = {
//   save: PropTypes.func.isRequired,
// };

export default DeleteSong;
'''
'''--- csharp/music-ui/src/components/marketplace/EditSong.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
import { utils } from "near-api-js";

const EditSong = ( prop ) => {
  const [name, setName] = useState(prop.song.name);
  const [image, setImage] = useState(prop.song.image);
  const [artist, setArtist] = useState(prop.song.artist);
  // const [location, setLocation] = useState(prop.song.location);
  const id=prop.song.id;
  const isFormFilled = () => name && image && artist;

  const [show, setShow] = useState(false);

  const handleCloseEdit = () => setShow(false);
  const handleShowEdit = () => setShow(true);

  const triggerEdit = () => {
    prop.save({
      id,
      name,
      image,
      artist
    });
  };

  return (
    <>
      {/* <Button
        onClick={handleShowEdit}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button> */}
      <Button
            variant="outline-dark"
            onClick={handleShowEdit}
            className="w-100 py-3"
          >
            Edit
          </Button>
      <Modal show={show} onHide={handleCloseEdit} centered>
        <Modal.Header closeButton>
          <Modal.Title>Edit Song</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label={"Song titel"}
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                //placeholder={name}
                placeholder="Title of song"
                value={name}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputDescription"
              label="Artist"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="artist"
                onChange={(e) => {
                  setArtist(e.target.value);
                }}
                // placeholder={description}
                value={artist}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
                // placeholder={imageurl}
                value={image}
              />
            </FloatingLabel>
            {/* <FloatingLabel
              controlId="inputLocation"
              label="Location"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Location"
                onChange={(e) => {
                  setLocation(e.target.value);
                }}
                 placeholder={location}
                value={location}
              />
            </FloatingLabel> */}
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleCloseEdit}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              prop.save({
                id,
                name,
                image,
                artist,
              });
              handleCloseEdit();
            }}
          >
            Update song
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

// AddSong.propTypes = {
//   save: PropTypes.func.isRequired,
// };

export default EditSong;
'''
'''--- csharp/music-ui/src/components/marketplace/Song.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";
import ReactAudioPlayer from "react-audio-player";
import moment from "moment";

import EditSong from "./EditSong";
import DeleteSong from "./DeleteSong";

  

const Song = ({ song, edit, deleteFunc }) => {
  const { id,  artist, name, tags, timeStamp, location, image, owner } =
    song;

  // const triggerBuy = () => {
  //   buy(id, artist);
  // };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            {/* <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge> */}
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Text className="text-secondary">
            <span>{artist}</span>
          </Card.Text>
          <Card.Body className="flex-grow-1 ">
            <ReactAudioPlayer src={`${location}`} controls />
            </Card.Body>
          

          <EditSong song={song} save={edit} /> 
        <DeleteSong songName={song.name} songId={song.id} deleteFunc={deleteFunc} />  
            

          {/* <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(artist)} NEAR
          </Button> */}
        </Card.Body>
      </Card>
    </Col>
  );
};

Song.propTypes = {
  song: PropTypes.instanceOf(Object).isRequired
};

export default Song;
'''
'''--- csharp/music-ui/src/components/marketplace/Songs.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddSong from "./AddSong";
import Song from "./Song";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getSongs as getSongList,
  uploadSong,
  //createSong,
  editSong,
  deleteSong,
} from "../../utils/api";

const Songs = () => {
    const [songs, setSongs] = useState([]);
    const [loading, setLoading] = useState(false);

    const onLoading = () => {
      setLoading(true);
  };

  const offLoading = () => {
    setLoading(false);
};

    const getSongs = useCallback(async () => {
      try {
        setLoading(true);
        setSongs(await getSongList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addSong = async (data) => {
        try {
          setLoading(true);
          uploadSong(data).then((resp) => {
            getSongs();
          });
          toast(<NotificationSuccess text="Song added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a song." />);
        } finally {
          setLoading(false);
        }
      };

      const edit = async (data) => {
        try {
          debugger;
          setLoading(true);
          editSong(data).then((resp) => {
            getSongs();
          });
          toast(<NotificationSuccess text="Song updated successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text={error.toString()} />);
        } finally {
          setLoading(false);
        }
      };

      const deleteSongF = async (id) => {
          try {
            setLoading(true);
            deleteSong(id).then((resp) => {
              getSongs();
            });
            toast(<NotificationSuccess text="Song deleted successfully." />);
          } catch (error) {
            console.log({ error });
            toast(<NotificationError text={error.toString()} />);
          } finally {
            setLoading(false);
          }
        };

      // const buy = async (id, price) => {
      //   try {
      //     await buySong({
      //       id,
      //       price,
      //     }).then((resp) => getSongs());
      //     toast(<NotificationSuccess text="Song bought successfully" />);
      //   } catch (error) {
      //     toast(<NotificationError text="Failed to purchase song." />);
      //   } finally {
      //     setLoading(false);
      //   }
      // };
      
      useEffect(() => {
        getSongs();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Music Shared</h1>
                <AddSong save={addSong} onLoading={onLoading} offLoading={offLoading} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {songs.map((_song) => (
                  <Song
                    song={{
                      ..._song,
                    }}
                      edit={edit} deleteFunc={deleteSongF}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Songs;
'''
'''--- csharp/music-ui/src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">Powered by NEAR</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;
'''
'''--- csharp/music-ui/src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
'''
'''--- csharp/music-ui/src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const Props = {
  text: PropTypes.string,
};

const DefaultProps = {
  text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };
'''
'''--- csharp/music-ui/src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals(console.log);
'''
'''--- csharp/music-ui/src/lib/api.js ---
import Arweave from 'arweave';
export const arweave = Arweave.init({});

export const buildQuery = () => {
    const queryObject = { query: `{
      transactions(first: 100,
        tags: [
          {
            name: "App-Name",
            values: ["PublicSquare"]
          },
          {
            name: "Content-Type",
            values: ["text/plain"]
          }
        ]
      ) {
        edges {
          node {
            id
            owner {
              address
            }
            data {
              size
            }
            block {
              height
              timestamp
            }
            tags {
              name,
              value
            }
          }
        }
      }
    }`}
    return queryObject;
   }
'''
'''--- csharp/music-ui/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- csharp/music-ui/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- csharp/music-ui/src/utils/api.js ---
import { v4 as uuid4 } from "uuid";
//import { parseNearAmount } from "near-api-js/lib/utils/format";

//const GAS = 100000000000000;
const apiBaseUrl = "http://localhost:3001/";

//old name = createSong
export async function uploadSong(song) {
  song.id = uuid4();
  song.isUploaded = true;
  song.isPaid = true;
  song.owner = window.accountId;
  let away = JSON.stringify(song);
  away = "{\"song\":" + away + "}";
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songs", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: away
  });
  var response = await res.json();
  return response;
}

// export function uploadSong(song) {
//     song.id = uuid4();
//     song.isUploaded=true;
//       song.isPaid=true;
//     return window.contract.uploadSong({ song:song, uploadPrice: parseNearAmount("0.01")});
//   }

export async function editSong(song) {
  //song.price = parseNearAmount(song.price + "");
  song.isUploaded = true;
  song.isPaid = true;
  let away = JSON.stringify(song);
  away = "{\"song\":" + away + "}";
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songs", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json"
    },
    body: away
  });
  var response = await res.json();
  return response;
}

export async function getSongs() {
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songList", {
    method: "GET",
    headers: {
      "Content-Type": "application/json"
    },
  });
  var songs = await res.json();
  return songs;
}

export async function deleteSong(id) {
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songs/" + id, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json"
    },
  });
  var res = await res.json();
  return res;
}
'''
'''--- csharp/music-ui/src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "music.halremawa.testnet"; // line 1

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- csharp/music-ui/src/utils/marketplace.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createSong(song) {
  song.id = uuid4();
  song.isUploaded=true;
    song.isPaid=true;
  //song.price = parseNearAmount(song.price + "");
  return window.contract.setSong({ song });
}

export function uploadSong(song) {
    song.id = uuid4();
    song.isUploaded=true;
      song.isPaid=true;
    return window.contract.uploadSong({ song:song, uploadPrice: parseNearAmount("0.01")});
  }

  export function editSong(song) {
    //song.price = parseNearAmount(song.price + "");
    song.isUploaded=true;
    song.isPaid=true;
    debugger;
    return window.contract.updateSong({ song });
  }

export function getSongs() {
  return window.contract.getSongs();
}

  export async function deleteSong(id) {
      //debugger;
    await window.contract.deleteSong({ songId: id });
  }
'''
'''--- csharp/music-ui/src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getSong", "getSongs", "getSongsForUser","getSongsForCurrentUser"],
        changeMethods: ["uploadSong", "setSong", "updateSong", "deleteSong"],
      }
    );
  }

  export async function accountBalance() {
    return formatNearAmount(
      (await window.walletConnection.account().getAccountBalance()).total,
      2
    );
  }
  
  export async function getAccountId() {
    return window.walletConnection.getAccountId();
  }
  
  export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
  }
  
  export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
  }
'''
'''--- csharp_api/music-server-js/near-api/nearProvider.js ---
const nearAPI = require("near-api-js");

const { keyStores, KeyPair, connect, WalletConnection } = nearAPI;
const DEFAULT_ACCOUNT_ID = "halremawa.testnet";
// creates keyStore from a private key string
// you can define your key here or use an environment variable

let keyStore, keyPair, config, near, default_account, contract;//wallet

const PRIVATE_KEY =
    "ed25519:2cugYUvidWRDcDEvkZ8reDed3Cxytpux4qbmLLptXgUnFDhqsMv1tZZt6qHLyvMU5nT31vChLdsSp8sbZy9bnAbP";

const initParameters = new Promise(async (resolve, reject) => {
    keyStore = new keyStores.InMemoryKeyStore();
    // creates a public / private key pair using the provided private key
    keyPair = KeyPair.fromString(PRIVATE_KEY);
    // adds the keyPair you created to keyStore
    await keyStore.setKey("testnet", "halremawa.testnet", keyPair);

    config = {
        networkId: "testnet",
        keyStore: keyStore,
        nodeUrl: "https://rpc.testnet.near.org",
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
    };

    // connect to NEAR
    near = await connect(config);

    // create wallet connection
    //wallet = new WalletConnection(near);

    // create default account
    default_account = await near.account(DEFAULT_ACCOUNT_ID);

    contract = new nearAPI.Contract(
        default_account, // the account object that is connecting
        "music.halremawa.testnet",
        {
            // name of contract you're connecting to
            viewMethods: ["getSong", "getSongs", "getSongsForUser", "getSongsForCurrentUser"], // view methods do not change state but usually return a value
            changeMethods: ["setSong", "uploadSong", "updateSong", "deleteSong"], // change methods modify state
            sender: default_account // account object to initialize and sign transactions.
        }
    );

    console.log("Near connected");
    resolve({
        near,
        default_account,
        contract,
        nearAPI
    });
});

exports.nearItems = initParameters;

'''
'''--- csharp_api/music-server-js/server.js ---
var express = require('express'),
cors = require('cors'),
  app = express(),
 fileUpload = require('express-fileupload');
  port = process.env.PORT || 3001,
  bodyParser = require('body-parser');

process.on('uncaughtException', function (err) {
  console.log(err);
});

app.use(cors());

// app.use(function(req, res) {
//     res.status(404).send({url: req.originalUrl + ' not found'})
//   });

app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
var routes = require('./near-api/routes/transactionsRoute');
routes(app);

routes = require('./near-api/routes/songsRoute');
routes(app);

routes = require('./near-api/routes/accountRoute');
routes(app);

app.use(fileUpload());
routes = require('./arweave-api/routes/addressRoute'); //importing route
routes(app); //register the route

app.listen(port, function () {
  console.log('near/arweave RESTful API server started on: ' + port);
});
'''
'''--- csharp_api/music-ui/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- csharp_api/music-ui/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- csharp_api/music-ui/src/App.js ---
import logo from './logo.svg';
import './App.css';
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Songs from "./components/marketplace/Songs";
import Cover from "./components/utils/Cover";
import coverImg from "./assets/img/sandwich.jpg";
import "./App.css";

const App = function AppWrapper() {
  const account = window.walletConnection.account();
  const [balance, setBalance] = useState("0");
  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);
  return (
    <>
       <Notification /> 
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <main> 
            <Songs /> 
            </main>
        </Container>
      ) : (
        <Cover name="Share" login={login} coverImg={coverImg} />
      )}
    </>
  );
};

export default App;

'''
'''--- csharp_api/music-ui/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- csharp_api/music-ui/src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> {symbol}</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                destroy();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- csharp_api/music-ui/src/components/marketplace/AddSong.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import axios from "axios";
import { Button, Modal, Form, FloatingLabel, Spinner } from "react-bootstrap";
import { arweave } from "../../lib/api";
import { toast } from "react-toastify";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";

axios.defaults.timeout = 0;

const AddSong = ({ save, onLoading, offLoading }) => {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [artist, setArtist] = useState("");
  const [location, setLocation] = useState("");
  const [selectedFile, setSelectedFile] = useState(null);
  // const [price, setPrice] = useState(0);
  const isFormFilled = () => name && image && artist && location;

  const [show, setShow] = useState(false);

  const [showUploading, setShowUploading] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  //arweave post data
  async function onUploadButtonClicked() {

    setShowUploading(true);

    try {
      //debugger;
      let formData = new FormData();
      formData.append('file', selectedFile);
      for (var key of formData.entries()) {
        console.log(key[0] + ', ' + key[1]);
      }
      //debugger;
      var ret = await axios.post('http://localhost:3001/arweave/postSong', formData, {timeout:0});

      //debugger;
      setLocation(ret.data.address);
      setShowUploading(false);
      toast(<NotificationSuccess text="Song uploaded successfully." />);
      return ret.data;

    } catch (err) {
      //debugger;
      console.error(err);
      setShowUploading(false);
      toast(<NotificationSuccess text="Network congestion. Please try again later." />);
    };
  }

  // On file select (from the pop up)
  let onFileChange = event => {
    console.log('[onFileChange]', event.target.files[0]);
    // Update the state
    setSelectedFile(event.target.files[0]);
  };
  // File content to be displayed after
  // file upload is complete
  let fileData = () => {
    if (selectedFile) {
      return (
        <>
          <div>
            <h2>File Details:</h2>
            <p>File Name: {selectedFile.name}</p>
            <p>File Type: {selectedFile.type}</p>
            {/* 
             */}
          </div>
        </>
      );
    } else {
      return (
        <>
          <div>
            <br />
            <h4>Choose before Pressing the Upload button</h4>
          </div>
        </>
      );
    }
  };

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Song</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Title"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter title of song"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputDescription"
              label="Artist"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Artist"
                onChange={(e) => {
                  setArtist(e.target.value);
                }}
              />
            </FloatingLabel>
            {/* <FloatingLabel
              controlId="inputLocation"
              label="Location"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Location"
                contentEditable="false"
                onChange={(e) => {
                  setLocation(e.target.value);
                }}
              />
            </FloatingLabel> */}

            <div>
              <di>
                Location: {location}
              </di>
              <div>
                <input type="file" onChange={onFileChange} />
                {!showUploading ? (
                  <>
                    <button onClick={onUploadButtonClicked}>
                      Upload!
                    </button>
                  </>
                ) : (
                  <>
                    <Button disabled>
                      <Spinner
                        as="span"
                        animation="grow"
                        size="sm"
                        role="status"
                        aria-hidden="true"
                      />
                      Uploading...
                    </Button>
                  </>
                )

                }
              </div>
              {/* {fileData()} */}
            </div>

          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              save({
                name,
                image,
                artist,
                location,
              });
              handleClose();
            }}
          >
            Save song
          </Button>
        </Modal.Footer>
      </Modal>

    </>
  );
};

AddSong.propTypes = {
  save: PropTypes.func.isRequired,
};

export default AddSong;
'''
'''--- csharp_api/music-ui/src/components/marketplace/DeleteSong.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
import { utils } from "near-api-js";

const DeleteSong = ( {songId, songName, deleteFunc} ) => {
  
  const [show, setShow] = useState(false);

  const handleCloseDelete = () => setShow(false);
  const handleShowDelete = () => setShow(true);

  return (
    <>
      {/* <Button
        onClick={handleShowDelete}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button> */}
      <Button
            variant="outline-dark"
            onClick={handleShowDelete}
            className="w-100 py-3"
          >
            Delete
          </Button>
      <Modal show={show} onHide={handleCloseDelete} centered>
        <Modal.Header closeButton>
          <Modal.Title>Delete Song</Modal.Title>
        </Modal.Header>
        <div>
          Are you sure you want to delete song "{songName}"?
        </div>
        <Modal.Footer>
        <Button
            variant="dark"
            onClick={() => {
              deleteFunc(songId);
              handleCloseDelete();
            }}
          >
            Yes
          </Button>
          <Button variant="outline-secondary" onClick={handleCloseDelete}>
            No
          </Button>

        </Modal.Footer>
      </Modal>
    </>
  );
};

// AddSong.propTypes = {
//   save: PropTypes.func.isRequired,
// };

export default DeleteSong;
'''
'''--- csharp_api/music-ui/src/components/marketplace/EditSong.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";
import { utils } from "near-api-js";

const EditSong = ( prop ) => {
  const [name, setName] = useState(prop.song.name);
  const [image, setImage] = useState(prop.song.image);
  const [artist, setArtist] = useState(prop.song.artist);
  // const [location, setLocation] = useState(prop.song.location);
  const id=prop.song.id;
  const isFormFilled = () => name && image && artist;

  const [show, setShow] = useState(false);

  const handleCloseEdit = () => setShow(false);
  const handleShowEdit = () => setShow(true);

  const triggerEdit = () => {
    prop.save({
      id,
      name,
      image,
      artist
    });
  };

  return (
    <>
      {/* <Button
        onClick={handleShowEdit}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button> */}
      <Button
            variant="outline-dark"
            onClick={handleShowEdit}
            className="w-100 py-3"
          >
            Edit
          </Button>
      <Modal show={show} onHide={handleCloseEdit} centered>
        <Modal.Header closeButton>
          <Modal.Title>Edit Song</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label={"Song titel"}
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                //placeholder={name}
                placeholder="Title of song"
                value={name}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputDescription"
              label="Artist"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="artist"
                onChange={(e) => {
                  setArtist(e.target.value);
                }}
                // placeholder={description}
                value={artist}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
                // placeholder={imageurl}
                value={image}
              />
            </FloatingLabel>
            {/* <FloatingLabel
              controlId="inputLocation"
              label="Location"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Location"
                onChange={(e) => {
                  setLocation(e.target.value);
                }}
                 placeholder={location}
                value={location}
              />
            </FloatingLabel> */}
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleCloseEdit}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              prop.save({
                id,
                name,
                image,
                artist,
              });
              handleCloseEdit();
            }}
          >
            Update song
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

// AddSong.propTypes = {
//   save: PropTypes.func.isRequired,
// };

export default EditSong;
'''
'''--- csharp_api/music-ui/src/components/marketplace/Song.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";
import ReactAudioPlayer from "react-audio-player";
import moment from "moment";

import EditSong from "./EditSong";
import DeleteSong from "./DeleteSong";

  

const Song = ({ song, edit, deleteFunc }) => {
  const { id,  artist, name, tags, timeStamp, location, image, owner } =
    song;

  // const triggerBuy = () => {
  //   buy(id, artist);
  // };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{owner}</span>
            {/* <Badge bg="secondary" className="ms-auto">
              {sold} Sold
            </Badge> */}
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Text className="text-secondary">
            <span>{artist}</span>
          </Card.Text>
          <Card.Body className="flex-grow-1 ">
            <ReactAudioPlayer src={`${location}`} controls />
            </Card.Body>
          

          <EditSong song={song} save={edit} /> 
        <DeleteSong songName={song.name} songId={song.id} deleteFunc={deleteFunc} />  
            

          {/* <Button
            variant="outline-dark"
            onClick={triggerBuy}
            className="w-100 py-3"
          >
            Buy for {utils.format.formatNearAmount(artist)} NEAR
          </Button> */}
        </Card.Body>
      </Card>
    </Col>
  );
};

Song.propTypes = {
  song: PropTypes.instanceOf(Object).isRequired
};

export default Song;
'''
'''--- csharp_api/music-ui/src/components/marketplace/Songs.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddSong from "./AddSong";
import Song from "./Song";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
  getSongs as getSongList,
  uploadSong,
  //createSong,
  editSong,
  deleteSong,
} from "../../utils/api";

const Songs = () => {
    const [songs, setSongs] = useState([]);
    const [loading, setLoading] = useState(false);

    const onLoading = () => {
      setLoading(true);
  };

  const offLoading = () => {
    setLoading(false);
};

    const getSongs = useCallback(async () => {
      try {
        setLoading(true);
        setSongs(await getSongList());
      } catch (error) {
        console.log({ error });
      } finally {
        setLoading(false);
      }
    });

    const addSong = async (data) => {
        try {
          setLoading(true);
          uploadSong(data).then((resp) => {
            getSongs();
          });
          toast(<NotificationSuccess text="Song added successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text="Failed to create a song." />);
        } finally {
          setLoading(false);
        }
      };

      const edit = async (data) => {
        try {
          debugger;
          setLoading(true);
          editSong(data).then((resp) => {
            getSongs();
          });
          toast(<NotificationSuccess text="Song updated successfully." />);
        } catch (error) {
          console.log({ error });
          toast(<NotificationError text={error.toString()} />);
        } finally {
          setLoading(false);
        }
      };

      const deleteSongF = async (id) => {
          try {
            setLoading(true);
            deleteSong(id).then((resp) => {
              getSongs();
            });
            toast(<NotificationSuccess text="Song deleted successfully." />);
          } catch (error) {
            console.log({ error });
            toast(<NotificationError text={error.toString()} />);
          } finally {
            setLoading(false);
          }
        };

      // const buy = async (id, price) => {
      //   try {
      //     await buySong({
      //       id,
      //       price,
      //     }).then((resp) => getSongs());
      //     toast(<NotificationSuccess text="Song bought successfully" />);
      //   } catch (error) {
      //     toast(<NotificationError text="Failed to purchase song." />);
      //   } finally {
      //     setLoading(false);
      //   }
      // };
      
      useEffect(() => {
        getSongs();
      }, []);

      return (
        <>
          {!loading ? (
            <>
              <div className="d-flex justify-content-between align-items-center mb-4">
                <h1 className="fs-4 fw-bold mb-0">Music Shared</h1>
                <AddSong save={addSong} onLoading={onLoading} offLoading={offLoading} />
              </div>
              <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                {songs.map((_song) => (
                  <Song
                    song={{
                      ..._song,
                    }}
                      edit={edit} deleteFunc={deleteSongF}
                  />
                ))}
              </Row>
            </>
          ) : (
            <Loader />
          )}
        </>
      );
    };
    
    export default Songs;
'''
'''--- csharp_api/music-ui/src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#000", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect Wallet
          </Button>
        </div>
        <p className="mt-auto text-secondary">Powered by NEAR</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;
'''
'''--- csharp_api/music-ui/src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
'''
'''--- csharp_api/music-ui/src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const Props = {
  text: PropTypes.string,
};

const DefaultProps = {
  text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };
'''
'''--- csharp_api/music-ui/src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
  .then(() => {
    ReactDOM.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>,
      document.getElementById("root")
    );
  })
  .catch(console.error);

reportWebVitals(console.log);
'''
'''--- csharp_api/music-ui/src/lib/api.js ---
import Arweave from 'arweave';
export const arweave = Arweave.init({});

export const buildQuery = () => {
    const queryObject = { query: `{
      transactions(first: 100,
        tags: [
          {
            name: "App-Name",
            values: ["PublicSquare"]
          },
          {
            name: "Content-Type",
            values: ["text/plain"]
          }
        ]
      ) {
        edges {
          node {
            id
            owner {
              address
            }
            data {
              size
            }
            block {
              height
              timestamp
            }
            tags {
              name,
              value
            }
          }
        }
      }
    }`}
    return queryObject;
   }
'''
'''--- csharp_api/music-ui/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- csharp_api/music-ui/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- csharp_api/music-ui/src/utils/api.js ---
import { v4 as uuid4 } from "uuid";
//import { parseNearAmount } from "near-api-js/lib/utils/format";

//const GAS = 100000000000000;
const apiBaseUrl = "http://localhost:3001/";

//old name = createSong
export async function uploadSong(song) {
  song.id = uuid4();
  song.isUploaded = true;
  song.isPaid = true;
  song.owner = window.accountId;
  let away = JSON.stringify(song);
  away = "{\"song\":" + away + "}";
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songs", {
    method: "POST",
    headers: {
      "Content-Type": "application/json"
    },
    body: away
  });
  var response = await res.json();
  return response;
}

// export function uploadSong(song) {
//     song.id = uuid4();
//     song.isUploaded=true;
//       song.isPaid=true;
//     return window.contract.uploadSong({ song:song, uploadPrice: parseNearAmount("0.01")});
//   }

export async function editSong(song) {
  //song.price = parseNearAmount(song.price + "");
  song.isUploaded = true;
  song.isPaid = true;
  let away = JSON.stringify(song);
  away = "{\"song\":" + away + "}";
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songs", {
    method: "PUT",
    headers: {
      "Content-Type": "application/json"
    },
    body: away
  });
  var response = await res.json();
  return response;
}

export async function getSongs() {
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songList", {
    method: "GET",
    headers: {
      "Content-Type": "application/json"
    },
  });
  var songs = await res.json();
  return songs;
}

export async function deleteSong(id) {
  //debugger;
  var res = await fetch(apiBaseUrl + "near/songs/" + id, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json"
    },
  });
  var res = await res.json();
  return res;
}
'''
'''--- csharp_api/music-ui/src/utils/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "music.halremawa.testnet"; // line 1

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- csharp_api/music-ui/src/utils/marketplace.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createSong(song) {
  song.id = uuid4();
  song.isUploaded=true;
    song.isPaid=true;
  //song.price = parseNearAmount(song.price + "");
  return window.contract.setSong({ song });
}

export function uploadSong(song) {
    song.id = uuid4();
    song.isUploaded=true;
      song.isPaid=true;
    return window.contract.uploadSong({ song:song, uploadPrice: parseNearAmount("0.01")});
  }

  export function editSong(song) {
    //song.price = parseNearAmount(song.price + "");
    song.isUploaded=true;
    song.isPaid=true;
    debugger;
    return window.contract.updateSong({ song });
  }

export function getSongs() {
  return window.contract.getSongs();
}

  export async function deleteSong(id) {
      //debugger;
    await window.contract.deleteSong({ songId: id });
  }
'''
'''--- csharp_api/music-ui/src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
    const near = await connect(
      Object.assign(
        { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
        nearEnv
      )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
      window.walletConnection.account(),
      nearEnv.contractName,
      {
        viewMethods: ["getSong", "getSongs", "getSongsForUser","getSongsForCurrentUser"],
        changeMethods: ["uploadSong", "setSong", "updateSong", "deleteSong"],
      }
    );
  }

  export async function accountBalance() {
    return formatNearAmount(
      (await window.walletConnection.account().getAccountBalance()).total,
      2
    );
  }
  
  export async function getAccountId() {
    return window.walletConnection.getAccountId();
  }
  
  export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
  }
  
  export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
  }
'''
'''--- java_api_1/near_nft_minter/config-overrides.js ---
const webpack = require('webpack');

module.exports = function override(config) {
    const fallback = config.resolve.fallback || {};
    config.ignoreWarnings = [/Failed to parse source map/];
    Object.assign(fallback, {
        "crypto": require.resolve("crypto-browserify"),
        "stream": require.resolve("stream-browserify"),
        "assert": require.resolve("assert"),
        "http": require.resolve("stream-http"),
        "https": require.resolve("https-browserify"),
        "os": require.resolve("os-browserify"),
        "url": require.resolve("url")
    })
    config.resolve.fallback = fallback;
    config.plugins = (config.plugins || []).concat([
        new webpack.ProvidePlugin({
            process: 'process/browser',
            Buffer: ['buffer', 'Buffer']
        })
    ])
    return config;
}
'''
'''--- java_api_1/near_nft_minter/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- java_api_1/near_nft_minter/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- java_api_1/near_nft_minter/src/App.js ---
import logo from './logo.svg';
import './App.css';
import { useEffect, useState } from 'react';
import {utils, keyStores, connect } from 'near-api-js';
import nearSeedPhrase from 'near-seed-phrase'
// import bip39 from "bip39";

function App() {
  const [account, setAccount] = useState({})
  // const getKeyPair = (seedPhrase) => {
  //   return bip39.mnemonicToSeedSync(seedPhrase).slice(0, 32);
  // }

  useEffect(() => {
    const getAccount = async (account_id, seedPhrase) => {
      let private_key = nearSeedPhrase.parseSeedPhrase(seedPhrase);
      console.log(private_key)
      try {
        let network = "testnet";
        let rpc_node = "https://rpc.testnet.near.org"

        // private_key = private_key.secretKey.replace('"', '');

        const keyPair = utils.KeyPair.fromString(private_key.secretKey);
        const keyStore = new keyStores.InMemoryKeyStore();
        await keyStore.setKey(network, account_id, keyPair);

        const near = await connect({
          networkId: network,
          deps: {keyStore},
          masterAccount: account_id,
          nodeUrl: rpc_node,
          // headers: (typeof this.headers !== undefined) ? this.headers : {}
        });

        const acct = await near.account(account_id);
        console.log(acct)
        setAccount(acct)
      } catch (e) {
        console.log("An error occured", e.message);
      }
    }

    getAccount("janet12.testnet", "true envelope letter aware marble saddle flush laundry where donkey deal explain")
  }, [])

  useEffect(
      () =>{

      }, []
  )

  return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p>
            Edit <code>src/App.js</code> and save to reload.
          </p>
          <a
              className="App-link"
              href="https://reactjs.org"
              target="_blank"
              rel="noopener noreferrer"
          >
            Learn React
          </a>
        </header>
      </div>
  );
}

export default App;

'''
'''--- java_api_1/near_nft_minter/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- java_api_1/near_nft_minter/src/component/LoginPage.js ---
import React from 'react';
import {Button, Container, Grid, Stack, TextField} from "@mui/material";
import {useFormik} from "formik";
import {GetAccountByKey} from "../service/MintService";
import { useNavigate } from 'react-router-dom';

const LoginPage = () => {

    const formik = useFormik({
        initialValues: {
            accountId: "",
            seedPhrase: "",
        },
        onSubmit: (values) => {
            GetAccountByKey(values.accountId, values.seedPhrase).then(res => {
                console.log(res)
                localStorage.setItem("account", JSON.stringify(res))
            })
        }
    });

    const navigate = useNavigate();

    return (
        <Stack
               justifyContent="center"
               direction="column"
               alignItems="center"
               paddingTop="10rem"
               width="40rem"
               marginLeft="37rem"
        >
            <Container>
            <form onSubmit={formik.handleSubmit}>
                <Grid container marginTop={10}>
                    <Grid Item lg={12}>
                        <TextField
                            fullWidth
                            id="outlined-basic"
                            variant="outlined"
                            id="accountId"
                            value={formik.values.accountId}
                            onChange={formik.handleChange}
                            label="Account Id"
                            name="accountId"
                            type="accountId"
                            placeholder="Enter Account Id"
                            error={
                                formik.touched.accountId && Boolean(formik.errors.accountId)
                            }
                            helperText={formik.touched.accountId && formik.errors.accountId}
                        />
                    </Grid>
                    <Grid Grid item lg={12} marginTop={5}>
                        <TextField
                            fullWidth
                            id="outlined-basic"
                            variant="outlined"
                            id="seedPhrase"
                            value={formik.values.seedPhrase}
                            onChange={formik.handleChange}
                            name="seedPhrase"
                            label="Seed Phrase"
                            type="seedPhrase"
                            placeholder="Enter Seed Phrase"
                        />
                    </Grid>
                    <Grid  item lg={12} marginTop={5}>
                        <Button
                            variant="contained"
                            fullWidth
                            type="submit"
                            sx={{ background: "#6E8264", height: 60 }}
                        >
                            Login
                            </Button>
                    </Grid>
                </Grid>

            </form>

            </Container>
        </Stack>
    );
};

export default LoginPage;
'''
'''--- java_api_1/near_nft_minter/src/component/MintNftPage.js ---
import React, {useState} from 'react';
import {Button, Grid, Stack, TextField} from "@mui/material";
import {create} from "ipfs-http-client";

import {useNavigate} from "react-router-dom";
import {useFormik} from "formik";
import api from "../service/api";
import { Contract } from 'near-api-js';

const MintNftPage = () => {

    const [fileUrl, updateFileUrl] = useState(``)

    const navigate = useNavigate();

    const client = create('https://ipfs.infura.io:5001/api/v0')
    async function onChange(e) {
        const file = e.target.files[0]
        try {
            const added = await client.add(file)
            const url = `https://ipfs.infura.io/ipfs/${added.path}`
            updateFileUrl(url)
            console.log(fileUrl)
        } catch (error) {
            console.log('Error uploading file: ', error)
        }
    }

    const formik = useFormik({
        initialValues: {
            title: '',
            description: '',
        },

        onSubmit: async (values) => {
            console.log("values ::::: ", values)
            const account = JSON.parse(localStorage.getItem("account"))
            const Metadata = {
                "title": formik.values.title,
                "description": formik.values.description,
                "media": fileUrl,
            }
            const contract = await new Contract(
                account,
                "nft-frontend-simple-mint.blockhead.testnet",
                {
                    viewMethods: ["check_token"],
                    changeMethods: ["nft_mint"],
                }
            );

            console.log(account)
            mintNFT(contract, Metadata, account).then(r => console.log(r))
            console.log("I reached here")
            alert(JSON.stringify(values, null, 2));
        },

    });

    const mintNFT = async (contract, metadata, account) => {
        try {
            const tx = await contract.nft_mint(
                {
                    token_id:  account.accountId,
                    metadata:  metadata,
                    receiver_id: account.accountId,
                },

                '100000000000000',
                '10000000000000000000000');

            if (!tx.status.Failure)
                return tx.transaction.hash
        } catch (e) {
            return api.reject(e);
        }
    };

    return (
        <Stack
        direction="column"
        >
            <div className="dropZoneContainer">
                <input type="file" id="contained-button-file" className="FileUpload" accept=".jpg,.png,.gif"
                       onChange={onChange}  style={{ opacity: 0}} />
                <label htmlFor="contained-button-file">
                    <Button variant="contained" color="primary" component="span">
                        Upload Photo
                    </Button>
                </label>
            </div>

            <form onSubmit={formik.handleSubmit}>
                <Grid container marginTop={10} >
                    <Grid Item lg={12}>
                        <TextField
                            error={formik.touched.title && Boolean(formik.errors.title)}
                            helperText={formik.touched.title && formik.errors.title}
                            fullWidth
                            id="title"
                            name="title"
                            label="Title"
                            onChange={formik.handleChange}
                            value={formik.values.title}
                        >

                        </TextField>
                    </Grid>
                    <Grid Item lg={12} marginTop={5}>
                        <TextField
                            error={formik.touched.description && Boolean(formik.errors.description)}
                            helperText={formik.touched.description && formik.errors.description}
                            fullWidth
                            height="3rem"
                            id="description"
                            multiline
                            name="description"
                            label="Description"
                            variant="outlined"
                            onChange={formik.handleChange}
                            value={formik.values.description}
                        >
                        </TextField>
                    </Grid>
                    <Grid item lg={12} marginTop={5}>
                        <Button variant="contained" fullWidth type="submit" sx={{
                            background: "#000", height: 60,
                            ":hover": {
                                background: "#fff",
                                color: "#000"
                            }
                        }}>
                            Proceed to Mint
                        </Button>
                    </Grid>
                </Grid>
            </form >
        </Stack>
    );
};

export default MintNftPage;
'''
'''--- java_api_1/near_nft_minter/src/component/MintPage.js ---
import React, {useState} from 'react';
import {
    Box,
    Button,
    Grid, Paper,
    Stack,
    Step,
    StepContent,
    StepLabel,
    Stepper,
    TextField,
    Typography
} from "@mui/material";
import { useFormik } from "formik";
import { create } from 'ipfs-http-client'
import { useNavigate } from 'react-router-dom';
import api from "../service/api";

const MintPage = () => {
    const [fileUrl, updateFileUrl] = useState(``)

    const navigate = useNavigate();

   const Upload = () => {

       const client = create('https://ipfs.infura.io:5001/api/v0')
       async function onChange(e) {
           const file = e.target.files[0]
           try {
               const added = await client.add(file)
               const url = `https://ipfs.infura.io/ipfs/${added.path}`
               updateFileUrl(url)
               console.log(fileUrl)
           } catch (error) {
               console.log('Error uploading file: ', error)
           }
       }

       return (
           <div className="dropZoneContainer">
               <input type="file" id="contained-button-file" className="FileUpload" accept=".jpg,.png,.gif"
                      onChange={onChange}  style={{ opacity: 0}} />
               <label htmlFor="contained-button-file">
                   <Button variant="contained" color="primary" component="span">
                       Upload Photo
                   </Button>
               </label>
           </div>
       );
   };

   const ImageForm =  () => {
       const formik = useFormik({
           initialValues: {
               title: '',
               description: '',
               fileUrl: fileUrl

           },
           onSubmit: (values) => {
               console.log("values ::::: ", values)
               const account = JSON.parse(localStorage.getItem("account"))
               mintNFT(values, account).then(r => console.log(r))
               console.log("I reached here")
               alert(JSON.stringify(values, null, 2));
           },

       });

       const mintNFT = async (metadata, account) => {
           try {
               const tx = await account.functionCall(
                   account.accountId,
                   "nft_mint",
                   {
                       "token_id": `${account.accountId }-token`,
                       "metadata": metadata
                   },

                   '100000000000000',
                   '10000000000000000000000');

               if (!tx.status.Failure)
                   return tx.transaction.hash
           } catch (e) {
               return api.reject(e);
           }
       };

       return (
           <form onSubmit={formik.handleSubmit, handleNext}>
               <Grid container marginTop={10} >
                   <Grid Item lg={12}>
                       <TextField
                           error={formik.touched.title && Boolean(formik.errors.title)}
                           helperText={formik.touched.title && formik.errors.title}
                           fullWidth
                           id="title"
                           name="title"
                           label="Title"
                           onChange={formik.handleChange}
                           value={formik.values.title}

                       >

                       </TextField>
                   </Grid>
                   <Grid Item lg={12} marginTop={5}>
                       <TextField
                           error={formik.touched.description && Boolean(formik.errors.description)}
                           helperText={formik.touched.description && formik.errors.description}
                           fullWidth
                           height="3rem"
                           id="description"
                           multiline
                           name="description"
                           label="Description"
                           variant="outlined"
                           onChange={formik.handleChange}
                           value={formik.values.description}
                       >
                       </TextField>
                   </Grid>
                   <Grid item lg={12} marginTop={5}>
                       <Button variant="contained" fullWidth type="submit" sx={{
                           background: "#000", height: 60,
                           ":hover": {
                               background: "#fff",
                               color: "#000"
                           }
                       }}>
                           Proceed to Mint
                       </Button>
                   </Grid>
               </Grid>
           </form >
       );
   };

    const steps = [
        {
            label: 'Upload An Image',
            description: <Upload />,
        },
        {
            label: 'Enter Image Details',
            description: <ImageForm/>,
        },
        {
            label: 'Congratulations',
            description: `You have successfully created an NFT`,
        },
    ];

    const [activeStep, setActiveStep] = React.useState(0);

    const handleNext = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handleReset = () => {
        setActiveStep(0);
    };
    return (
        <Grid container justifyContent="center" direction="column" alignItems="center">
            <Stack textAlign="center" marginTop={10}>
                <Typography fontSize="86px" fontWeight="700" lineHeight="105px" color="#eee">
                    Mint NFT
                </Typography>
            </Stack>
            {/* stepper */}
            <>

                <Box sx={{ maxWidth: 400 }}>
                    <Stepper activeStep={activeStep} orientation="vertical">
                        {steps.map((step, index) => (
                            <Step key={step.label}>
                                <StepLabel
                                    optional={
                                        index === 2 ? (
                                            <Typography variant="caption">Last step</Typography>
                                        ) : null
                                    }
                                >
                                    {step.label}
                                </StepLabel>
                                <StepContent>
                                    <Typography>{step.description}</Typography>
                                    <Box sx={{ mb: 2 }}>
                                        <div>
                                            <Button
                                                variant="contained"
                                                onClick={handleNext}
                                                sx={{ mt: 1, mr: 1 }}
                                            >
                                                {index === steps.length - 1 ? 'Finish'  : 'Continue'}
                                            </Button>
                                            <Button
                                                disabled={index === 0}
                                                onClick={handleBack}
                                                sx={{ mt: 1, mr: 1 }}
                                            >
                                                Back
                                            </Button>
                                        </div>
                                    </Box>
                                </StepContent>
                            </Step>
                        ))}
                    </Stepper>
                    {activeStep === steps.length && (
                        <Paper square elevation={0} sx={{ p: 3 }}>
                            <Typography>All steps completed - you&apos;re finished</Typography>
                            <Button onClick={handleReset} sx={{ mt: 1, mr: 1 }}>
                                Reset
                            </Button>
                        </Paper>
                    )}
                </Box>

            </>

        </Grid>

    );
};

export default MintPage;
'''
'''--- java_api_1/near_nft_minter/src/component/Testshii.js ---
import React from "react";
import PropTypes from "prop-types";
import { Form, Button, Card, Container, Row, Alert } from "react-bootstrap";
import { keys } from "regenerator-runtime";
const BN = require("bn.js");

const Testshii = (props) => {
    const mintNFT = async () => {
        await window.contract.nft_mint(
            {
                token_id: `${window.accountId}-go-team-token`,
                metadata: {
                    title: "CommandLine Team NFT",
                    description: "The Team that goes near with NEAR Blockchain :)",
                    media:
                        "https://bafybeigolztv64z3fcfu55sowyboutqqtmldzh5ugdaqg2iqh7jrzzxjdu.ipfs.nftstorage.link/",
                },
                receiver_id: window.accountId,
            },
            300000000000000, // attached GAS (optional)
            new BN("1000000000000000000000000")
        );
    };

    return (
        <Card style={{ padding: "2vh" }}>
            <Container>
                <Row style={{ marginBottom: "2vh" }}>
                    <p>
                        Step 2: After you have logged in, hit this button to mint your "Go
                        Team" Token and go your{" "}
                        <a href='https://wallet.testnet.near.org/'> wallet</a> and see your
                        NFT
                    </p>
                </Row>
                <Row className='d-flex justify-content-center'>
                    <Button
                        disabled={props.userNFTStatus || window.accountId === ""}
                        onClick={mintNFT}
                        style={{ width: "50vw" }}
                    >
                        Mint NFT
                    </Button>
                </Row>
                <Row className='d-flex justify-content-center'>
                    {console.log(props.userNFTStatus)}
                    {props.userNFTStatus ? (
                        <Alert variant='danger' style={{ marginTop: "2vh" }}>
                            <p style={{ textAlign: "center" }}>
                                You have an NFT already in this wallet. You can see it{" "}
                                <a href={"https://wallet.testnet.near.org/?tab=collectibles"}>
                                    here!
                                </a>
                                :)
                            </p>
                        </Alert>
                    ) : null}
                </Row>
            </Container>
        </Card>
    );
};

Testshii.propTypes = {};

export default Testshii;
'''
'''--- java_api_1/near_nft_minter/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import reportWebVitals from './reportWebVitals';
// import App from "./App";
import Testshii from "./component/Testshii"
import MintPage from "./component/MintPage"
import LoginPage from "./component/LoginPage";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import MintNftPage from "./component/MintNftPage";

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>

      {/*<Testshii/>*/}

      {/*<App/>*/}
      <Router>
          <Routes>
              <Route path="/login" element={<LoginPage/>}/>
              <Route path="/mint-page" element={<MintPage/>}/>
              <Route path="/mintPage" element={<MintNftPage/>}/>
              <Route path="/test" element={<Testshii/>}/>
          </Routes>
      </Router>
  </React.StrictMode>
);

reportWebVitals();

'''
'''--- java_api_1/near_nft_minter/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- java_api_1/near_nft_minter/src/service/MintService.js ---
// import fs from "fs";
import api from "./api";
import {utils, keyStores, connect } from 'near-api-js';
import nearSeedPhrase from "near-seed-phrase"

// const settings = JSON.parse(fs.readFileSync(api.CONFIG_PATH, 'utf8'));
//
// export async function mintNft(tokenId, metadata, contractAccountId, account_id, private_key) {
//     const nftContract = contractAccountId ? contractAccountId : settings.nft_contract;
//
//     let account = !(account_id && private_key)
//         ? await getMasterAccount()
//         : await GetAccountByKey(account_id, private_key);
//
//     try {
//         const tx = await account.functionCall(
//             nftContract,
//             "nft_mint",
//             {
//                 "token_id": tokenId,
//                 "metadata": metadata
//             },
//             '100000000000000',
//             '10000000000000000000000');
//
//         if (!tx.status.Failure)
//             return tx.transaction.hash
//     } catch (e) {
//         return api.reject(e);
//     }
// }

//  async function getMasterAccount() {
//     try {
//         const keyPair = utils.KeyPair.fromString(settings.master_key);
//         const keyStore = new keyStores.InMemoryKeyStore();
//         keyStore.setKey("default", settings.master_account_id, keyPair);
//
//         const near = await connect({
//             networkId: "default",
//             deps: {keyStore},
//             masterAccount: settings.master_account_id,
//             nodeUrl: settings.rpc_node
//         });
//
//         return await near.account(settings.master_account_id);
//     } catch (e) {
//         return api.reject(e);
//     }
// }

 export async function GetAccountByKey(account_id, seedPhrase) {

    let rpc_node = "https://rpc.testnet.near.org"
     let network = "testnet"
    let private_key = nearSeedPhrase.parseSeedPhrase(seedPhrase)
    try {
        // private_key = private_key.replace('"', '');

        const keyPair = utils.KeyPair.fromString(private_key.secretKey);
        console.log(private_key.secretKey)
        const keyStore = new keyStores.InMemoryKeyStore();
        await keyStore.setKey(network, account_id, keyPair);

        const near = await connect({
            networkId: "default",
            deps: {keyStore},
            masterAccount: account_id,
            nodeUrl: rpc_node
        });

        return await near.account(account_id);
    } catch (e) {
        return api.reject(e);
    }

    // async function getKeyFroSeedPhrase(seedPhrase){
    //     return nearSeedPhrase.parseSeedPhrase(seedPhrase)
    // }
}
'''
'''--- java_api_1/near_nft_minter/src/service/api.js ---
const CONFIG_PATH = './near-api-server.config.json';

module.exports = {
    CONFIG_PATH,

    reject: (err) => {
        console.log(err);
        return {error: typeof err === "string" ? err : JSON.stringify(err)};
    },
    notify: (message) => {
        return {text: message};
    }
}
'''
'''--- java_api_1/near_nft_minter/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- java_api_1/near_nft_minter/src/utils/Config.js ---
// import * as nearAPI from "near-api-js";
//
// const { connect, keyStores, WalletConnection } = nearAPI;
//
// const keyStore = new keyStores.BrowserLocalStorageKeyStore();
//
//
// const config = {
//     networkId: "testnet",
//     keyStore: new keyStores.BrowserLocalStorageKeyStore(),
//     nodeUrl: "https://rpc.testnet.near.org",
//     walletUrl: "https://wallet.testnet.near.org",
//     helperUrl: "https://helper.testnet.near.org",
//     explorerUrl: "https://explorer.testnet.near.org",
// };
//
// // connect to NEAR
//
// const near = await connect(config);
// const account = await near.account("example-account.testnet");
//
// account.createAndDeployContract()
//
// // create wallet connection
// const wallet = new WalletConnection(near);
'''
'''--- java_api_1/near_nft_minter/src/utils/Wallet.js ---

'''
'''--- java_api_2/crowdfuse/public/index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta
          name="description"
          content="A decentralized donations platform for crowdfunding, built on NEAR"
  />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
  <!--
    manifest.json provides metadata used when your web app is installed on a
    user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
  -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
    Notice the use of %PUBLIC_URL% in the tags above.
    It will be replaced with the URL of the `public` folder during the build.
    Only files inside the `public` folder can be referenced from the HTML.

    Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
    work correctly both with client-side routing and a non-root public URL.
    Learn how to configure a non-root public URL by running `npm run build`.
  -->
  <title>Crowdfuse</title>
</head>
<body>
<noscript>You need to enable JavaScript to run this app.</noscript>
<div id="root"></div>
<!--
  This HTML file is a template.
  If you open it directly in the browser, you will see an empty page.

  You can add webfonts, meta tags, or analytics to this file.
  The build step will place the bundled scripts into the <body> tag.

  To begin the development, run `npm start` or `yarn start`.
  To create a production bundle, use `npm run build` or `yarn build`.
-->
</body>
</html>

'''
'''--- java_api_2/crowdfuse/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- java_api_2/crowdfuse/src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./utils/near";
import Wallet from "./components/Wallet";
import { Notification } from "./components/utils/Notifications";
import Projects from "./components/donations/Projects";
import Cover from "./components/utils/Cover";
import coverImg from "./assets/img/do_something_great.jpg";
import "./App.css";

const App = function AppWrapper() {
    const account = window.walletConnection.account();

    const [balance, setBalance] = useState("0");

    const getBalance = useCallback(async () => {
        if (account.accountId) {
            setBalance(await accountBalance());
        }
    });

    useEffect(() => {
        getBalance();
    }, [getBalance]);

    return (
        <>
            <Notification />
            {account.accountId ? (
                <Container fluid="md">
                    <Nav className="justify-content-end pt-3 pb-5">
                        <Nav.Item>
                            <Wallet
                                address={account.accountId}
                                amount={balance}
                                symbol="NEAR"
                                destroy={destroy}
                            />
                        </Nav.Item>
                    </Nav>
                    <main>
                        <Projects />
                    </main>
                </Container>
            ) : (
                <Cover name="Near CrowdFuse" login={login} coverImg={coverImg} />
            )}
        </>
    );
};

export default App;
'''
'''--- java_api_2/crowdfuse/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- java_api_2/crowdfuse/src/components/Wallet.js ---
import React from "react";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount, symbol, destroy }) => {
    if (address) {
        return (
            <>
                <Dropdown>
                    <Dropdown.Toggle
                        variant="light"
                        align="end"
                        id="dropdown-basic"
                        className="d-flex align-items-center border rounded-pill py-1"
                    >
                        {amount ? (
                            <>
                                {amount} <span className="ms-1"> {symbol}</span>
                            </>
                        ) : (
                            <Spinner animation="border" size="sm" className="opacity-25" />
                        )}
                    </Dropdown.Toggle>

                    <Dropdown.Menu className="shadow-lg border-0">
                        <Dropdown.Item
                            href={`https://explorer.testnet.near.org/accounts/${address}`}
                            target="_blank"
                        >
                            <Stack direction="horizontal" gap={2}>
                                <i className="bi bi-person-circle fs-4" />
                                <span className="font-monospace">{address}</span>
                            </Stack>
                        </Dropdown.Item>

                        <Dropdown.Divider />
                        <Dropdown.Item
                            as="button"
                            className="d-flex align-items-center"
                            onClick={() => {
                                destroy();
                            }}
                        >
                            <i className="bi bi-box-arrow-right me-2 fs-4" />
                            Disconnect
                        </Dropdown.Item>
                    </Dropdown.Menu>
                </Dropdown>
            </>
        );
    }

    return null;
};

export default Wallet;
'''
'''--- java_api_2/crowdfuse/src/components/donations/AddProject.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";

const AddProject = ({ save }) => {
    const [name, setName] = useState("");
    const [image, setImage] = useState("");
    const [purpose, setPurpose] = useState("");
    const [location, setLocation] = useState("");
    const [goal, setGoal] = useState(1);

    const min = 100000000000000000000000;

    const isFormFilled = () => name && image && purpose && location && Number(goal) > min;

    const [show, setShow] = useState(false);

    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
            <Button
                onClick={handleShow}
                variant="dark"
                className="rounded-pill px-0"
                style={{ width: "38px" }}
            >
                <i class="bi bi-plus"></i>
            </Button>
            <Modal show={show} onHide={handleClose} centered>
                <Modal.Header closeButton>
                    <Modal.Title>New Charity Project</Modal.Title>
                </Modal.Header>
                <Form>
                    <Modal.Body>
                        <FloatingLabel
                            controlId="inputName"
                            label="Charity name"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                onChange={(e) => {
                                    setName(e.target.value);
                                }}
                                placeholder="Enter name of Charity Project"
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputUrl"
                            label="Image URL"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                placeholder="Image URL"
                                onChange={(e) => {
                                    setImage(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputPurpose"
                            label="Purpose"
                            className="mb-3"
                        >
                            <Form.Control
                                as="textarea"
                                placeholder="purpose"
                                style={{ height: "80px" }}
                                onChange={(e) => {
                                    setPurpose(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputLocation"
                            label="Location"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                placeholder="Location"
                                onChange={(e) => {
                                    setLocation(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                        <FloatingLabel
                            controlId="inputGoal"
                            label="Goal"
                            className="mb-3"
                        >
                            <Form.Control
                                type="number"
                                placeholder="Goal(Min 1 Near)"
                                onChange={(e) => {
                                    setGoal(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                    </Modal.Body>
                </Form>
                <Modal.Footer>
                    <Button variant="outline-secondary" onClick={handleClose}>
                        Close
                    </Button>
                    <Button
                        variant="dark"
                        disabled={!isFormFilled()}
                        onClick={() => {
                            save({
                                name,
                                image,
                                purpose,
                                location,
                                goal,
                            });
                            handleClose();
                        }}
                    >
                        Save Charity
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
};

AddProject.propTypes = {
    save: PropTypes.func.isRequired,
};

export default AddProject;
'''
'''--- java_api_2/crowdfuse/src/components/donations/MakeDonations.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";

const MakeDonation = ({ save, id }) => {
    const [donation, setDonation] = useState(0);
    const min = 10000000000000000000000;

    const isFormFilled = () =>  Number(donation) > min;

    const [show, setShow] = useState(false);

    const handleClose = () => setShow(false);
    const handleShow = () => setShow(true);

    return (
        <>
            <Button
                onClick={handleShow}
                variant="dark"
                className="rounded-pill px-0"
                style={{ width: "38px" }}
            >
                <i class="bi bi-plus"></i>
            </Button>
            <Modal show={show} onHide={handleClose} centered>
                <Modal.Header closeButton>
                    <Modal.Title>Donate to Project</Modal.Title>
                </Modal.Header>
                <Form>
                    <Modal.Body>

                        <FloatingLabel
                            controlId="inputDonation"
                            label="Donation"
                            className="mb-3"
                        >
                            <Form.Control
                                type="text"
                                placeholder="Donation(Min 0.1 Near)"
                                onChange={(e) => {
                                    setDonation(e.target.value);
                                }}
                            />
                        </FloatingLabel>
                    </Modal.Body>
                </Form>
                <Modal.Footer>
                    <Button variant="outline-secondary" onClick={handleClose}>
                        Close
                    </Button>
                    <Button
                        variant="dark"
                        disabled={!isFormFilled()}
                        onClick={() => {
                            save({
                                id,
                                donation,
                            });
                            handleClose();
                        }}
                    >
                        Donate to Project
                    </Button>
                </Modal.Footer>
            </Modal>
        </>
    );
};

MakeDonation.propTypes = {
    save: PropTypes.func.isRequired,
    id: PropTypes.string.isRequired,
};

export default MakeDonation;
'''
'''--- java_api_2/crowdfuse/src/components/donations/Project.js ---
import React, { useEffect, useState, useCallback } from "react";
import PropTypes from "prop-types";
import { toast } from "react-toastify";
import { utils } from "near-api-js";
import MakeDonation from "./MakeDonations";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";
import { parseNearAmount } from "near-api-js/lib/utils/format";
import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
    getProjects as getProjectList,
    donateToProject,
    deleteProject,
} from "../../utils/donations";

const Project = ({ project }) => {
    const [projects, setProjects] = useState([]);
    const [loading, setLoading] = useState(false);

    const account = window.walletConnection.account();

    const deleteProject = async (projectId) => {
        console.log(projectId);
        try {
            setLoading(true);
            await deleteProject({
                id: projectId
            }).then((resp) => getProjects());
            toast(<NotificationSuccess text="Project deleted successfully." />);
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to delete project ." />);
        } finally {
            setLoading(false);
        }
    }

    const getProjects = useCallback(async () => {
        try {
            setLoading(true);
            setProjects(await getProjectList());
        } catch (error) {
            console.log({ error });
        } finally {
            setLoading(false);
        }
    });

    const { id, goal, name, purpose, raised, location, image, owner, donations, highest, donors } =
        project;

    const makeDonation = async (data) => {
        try {
            setLoading(true);
            await donateToProject({
                id: data.id,
                donation: (data.donation + ""),

            }).then((resp) => getProjects());
            toast(<NotificationSuccess text="Project created successfully." />);
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to make a donation to project." />);
        } finally {
            setLoading(false);
        }
    };

    return (
        <Col key={id}>
            <Card className=" h-100">
                <Card.Header>
                    <Stack direction="horizontal" gap={2}>
                        <span className="font-monospace text-secondary">{owner}</span>
                        <Badge bg="secondary" className="ms-auto">
                            Goal: {utils.format.formatNearAmount(goal, 2)} Near | Raised: {utils.format.formatNearAmount(raised, 2)} Near
                        </Badge>
                    </Stack>
                </Card.Header>
                <div className=" ratio ratio-4x3">
                    <img src={image} alt={name} style={{ objectFit: "cover" }} />
                </div>
                <Card.Body className="d-flex  flex-column text-center">
                    <Card.Title>{name}</Card.Title>
                    <Card.Subtitle className="mb-2 text-muted">{donations} Donation(s) | Highest Donation: {utils.format.formatNearAmount(highest)} Near</Card.Subtitle>
                    <Card.Text>Last Donor: {donors[donors.length - 1]}</Card.Text>
                    <Card.Text className="flex-grow-1 ">{purpose}</Card.Text>
                    <Card.Text className="text-secondary">
                        <span>{location}</span>
                    </Card.Text>
                    <Button
                        variant="outline-dark"
                        className="w-100 py-3"
                    >
                        Make Donation <MakeDonation save={makeDonation} id={id}/>
                    </Button>
                    <button style={owner === account.accountId ? {} : { display: 'none' }} className="btn btn-danger" onClick={() => deleteProject(id)}>Delete</button>

                </Card.Body>
            </Card>
        </Col>
    );
};

Project.propTypes = {
    project: PropTypes.instanceOf(Object).isRequired,
    buy: PropTypes.func.isRequired,
};

export default Project;
'''
'''--- java_api_2/crowdfuse/src/components/donations/Projects.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import AddProject from "./AddProject";
import Project from "./Project";
import Loader from "../utils/Loader";
import { Row } from "react-bootstrap";

import { NotificationSuccess, NotificationError } from "../utils/Notifications";
import {
    getProjects as getProjectList,
    donateToProject,
    donateToAllProjects,
    createProject,
    getOngoingProjectCount,
} from "../../utils/donations";

const Projects = () => {
    const [projects, setProjects] = useState([]);
    const [loading, setLoading] = useState(false);

    // function to get the list of projects
    const getProjects = useCallback(async () => {
        try {
            setLoading(true);
            setProjects(await getProjectList());
        } catch (error) {
        } finally {
            setLoading(false);
        }
    });

    const addProject = async (data) => {
        try {
            setLoading(true);
            createProject(data).then((resp) => {
                getProjects();
            });
            toast(<NotificationSuccess text="Project created successfully." />);
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to create project." />);
        } finally {
            setLoading(false);
        }
    };

    const donateToAll = async () => {
        let countIt = 0;
        try {
            setLoading(true);
            await getOngoingProjectCount().then((resp) => {
                countIt = resp;
            }, (err) => {
                console.log({ err });
            });
            await donateToAllProjects({
                amount: countIt,
            }).then(() => getProjects());
            toast(<NotificationSuccess text="Donation successfully made to all Projects." />);
        } catch (error) {
            console.log({ error });
            toast(<NotificationError text="Failed to make donation." />);
        } finally {
            setLoading(false);
        }
    }

    //  function to initiate transaction
    const donate = async (id, price) => {
        try {
            await donateToProject({
                id,
                price,
            }).then(() => getProjects());
            toast(<NotificationSuccess text="Donation successfully made to Project." />);
        } catch (error) {
            toast(<NotificationError text="Failed to make donation." />);
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        getProjects();
    }, [getProjects]);

    return (
        <>
            {!loading ? (
                <>
                    <div className="d-flex justify-content-between align-items-center mb-4">
                        <h1 className="fs-4 fw-bold mb-0">Near Project(Crowdfuse)</h1>
                        <button className="btn btn-dark" onClick={donateToAll}>Donate To All(1 Near Each)</button>
                        <AddProject save={addProject} />

                    </div>
                    <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
                        {projects.map((_project) => (
                            <Project
                                project={{
                                    ..._project,
                                }}
                                donate={donate}
                            />
                        ))}
                    </Row>
                </>
            ) : (
                <Loader />
            )}
        </>
    );
};

export default Projects;
'''
'''--- java_api_2/crowdfuse/src/components/utils/Cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
    if ((name, login, coverImg)) {
        return (
            <div
                className="d-flex justify-content-center flex-column text-center "
                style={{ background: "#000", minHeight: "100vh" }}
            >
                <div className="mt-auto text-light mb-5">
                    <div
                        className=" ratio ratio-1x1 mx-auto mb-2"
                        style={{ maxWidth: "320px" }}
                    >
                        <img src={coverImg} alt="" />
                    </div>
                    <h1>{name}</h1>
                    <p>Please connect your wallet to continue.</p>
                    <Button
                        onClick={login}
                        variant="outline-light"
                        className="rounded-pill px-3 mt-3"
                    >
                        Connect Wallet
                    </Button>
                </div>
                <p className="mt-auto text-secondary">Powered by NEAR</p>
            </div>
        );
    }
    return null;
};

Cover.propTypes = {
    name: PropTypes.string,
};

Cover.defaultProps = {
    name: "",
};

export default Cover;
'''
'''--- java_api_2/crowdfuse/src/components/utils/Loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
    <div className="d-flex justify-content-center">
        <Spinner animation="border" role="status" className="opacity-25">
            <span className="visually-hidden">Loading...</span>
        </Spinner>
    </div>
);
export default Loader;
'''
'''--- java_api_2/crowdfuse/src/components/utils/Notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
    <ToastContainer
        position="bottom-center"
        autoClose={5000}
        hideProgressBar
        newestOnTop
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable={false}
        pauseOnHover
    />
);

const NotificationSuccess = ({ text }) => (
    <div>
        <i className="bi bi-check-circle-fill text-success mx-2" />
        <span className="text-secondary mx-1">{text}</span>
    </div>
);

const NotificationError = ({ text }) => (
    <div>
        <i className="bi bi-x-circle-fill text-danger mx-2" />
        <span className="text-secondary mx-1">{text}</span>
    </div>
);

const Props = {
    text: PropTypes.string,
};

const DefaultProps = {
    text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };
'''
'''--- java_api_2/crowdfuse/src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import App from "./App";
import reportWebVitals from "./reportWebVitals";
import { initializeContract } from "./utils/near";

import "bootstrap";
import "bootstrap-icons/font/bootstrap-icons.css";
import "bootstrap/dist/css/bootstrap.min.css";

window.nearInitPromise = initializeContract()
    .then(() => {
        ReactDOM.render(
            <React.StrictMode>
                <App />
            </React.StrictMode>,
            document.getElementById("root")
        );
    })
    .catch(console.error);

reportWebVitals();
'''
'''--- java_api_2/crowdfuse/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
    if (onPerfEntry && onPerfEntry instanceof Function) {
        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
            getCLS(onPerfEntry);
            getFID(onPerfEntry);
            getFCP(onPerfEntry);
            getLCP(onPerfEntry);
            getTTFB(onPerfEntry);
        });
    }
};

export default reportWebVitals;

'''
'''--- java_api_2/crowdfuse/src/utils/config.js ---

const CONTRACT_NAME = process.env.CONTRACT_NAME || "ehis.ehigie.testnet";

function environment(env) {
    switch (env) {
        case "mainnet": // line 5
            return {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
        case "testnet": // line 14
            return {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
        default:
            throw Error(`Unknown environment '${env}'.`);
    }
}

export default environment;
'''
'''--- java_api_2/crowdfuse/src/utils/donations.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createProject(project) {
    project.id = uuid4();
    project.price = parseNearAmount(project.price + "");
    return window.contract.setProject({ project });
}

export function getProjects() {
    return window.contract.getProjects();
}

export async function donateToProject({ id, donation }) {
    parseNearAmount(donation + "");
    await window.contract.donateToProject({ projectId: id }, GAS, donation);
}

export function getOngoingProjectCount() {
    return window.contract.getOngoingProjectCount();
}

export function donateToAllProjects({ amount }) {
    console.log("value passed", amount.toString());
    const figure = amount + "000000000000000000000000";
    parseNearAmount(figure + "");
    return window.contract.donateToAll({ projectId: figure }, GAS, figure);
}

export function deleteProject({ id }) {
    return window.contract.deleteProject({ projectId: id }, GAS);
}

'''
'''--- java_api_2/crowdfuse/src/utils/near.js ---
import environment from "./config";
import {  connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
    const near = await connect(
        Object.assign(
            { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
            nearEnv
        )
    );
    window.walletConnection = new WalletConnection(near);
    window.accountId = window.walletConnection.getAccountId();
    window.contract = new Contract(
        window.walletConnection.account(),
        nearEnv.contractName,
        {
            viewMethods: ["getProject", "getProjects", "getProjectCount"],
            changeMethods: ["donateToProject", "setProject", "donateToAll", "transferProject", "deleteProject"],
        }
    );
}

export async function accountBalance() {
    return formatNearAmount(
        (await window.walletConnection.account().getAccountBalance()).total,
        2
    );
}

export async function getAccountId() {
    return window.walletConnection.getAccountId();
}

export function login() {
    window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
    window.walletConnection.signOut();
    window.location.reload();
}
'''
'''--- java_api_3/Near-Photo-Sharing-App/bin/app.js ---
"use strict";

'''
'''--- java_api_3/Near-Photo-Sharing-App/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- java_api_3/Near-Photo-Sharing-App/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- java_api_3/Near-Photo-Sharing-App/src/App.js ---
import React, { useEffect, useCallback, useState } from "react";
import { Container, Nav } from "react-bootstrap";
import { login, logout as destroy, accountBalance } from "./util/near";
import Wallet from "./component/wallet";
import { Notification } from "./component/utils/notifications";
import Cover from "./component/utils/cover";
import coverImg from "./assets/Oculus.png";
import "./App.css";

const App = function AppWrapper() {
  const account = window.walletConnection.account();

  const [balance, setBalance] = useState("0");

  const getBalance = useCallback(async () => {
    if (account.accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  return (
    <>
      <Notification />
      {account.accountId ? (
        <Container fluid="md">
          <Nav className="justify-content-end pt-3 pb-5">
            <Nav.Item>
              <Wallet
                address={account.accountId}
                amount={balance}
                symbol="NEAR"
                destroy={destroy}
              />
            </Nav.Item>
          </Nav>
          <main>
            <Memes />
          </main>
        </Container>
      ) : (
        <Cover name="Photo-Sharing App" login={login} coverImg={coverImg} />
      )}
    </>
  );
};

export default App;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/marketplace/picture.js ---
import React from "react";
import PropTypes from "prop-types";
import { utils } from "near-api-js";
import { Card, Button, Col, Badge, Stack } from "react-bootstrap";

const Picture = ({ picture, like }) => {
  const { id, price, name, image, details, size, user, addlike, removelike } =
    picture;

  const likeImage = (number) => {
    like(id, number);
  };

  return (
    <Col key={id}>
      <Card className=" h-100">
        <Card.Header>
          <Stack direction="horizontal" gap={2}>
            <span className="font-monospace text-secondary">{user}</span>  

            <button type="button" class="btn btn-success position-relative btn-xs ms-auto"  onClick={() => likeImage(1)}>
              <i class="bi bi-hand-thumbs-up-fill"></i>
              <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-dark">
               {addlike}            
              </span>
            </button>

            <button type="button" class="btn btn-danger position-relative btn-xs ms-auto" onClick={() => likeImage(0)}>
              <i class="bi bi-hand-thumbs-down-fill"></i>
              <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-dark">
               {removelike}            
              </span>
            </button>
          </Stack>
        </Card.Header>
        <div className=" ratio ratio-4x3">
          <img src={image} alt={name} style={{ objectFit: "cover" }} />
        </div>
        <Card.Body className="d-flex  flex-column text-center">
          <Card.Title>{name}</Card.Title>
          <Card.Text className="flex-grow-1 ">{details}</Card.Text>         
          <Button
            variant="outline-dark"
            onClick={likeImage}
            className="w-100 py-3"
          >
            Like for {utils.format.formatNearAmount(price)} NEAR
          </Button>
        </Card.Body>
      </Card>
    </Col>
  );
};

Picture.propTypes = {
  picture: PropTypes.instanceOf(Object).isRequired,
  like: PropTypes.func.isRequired,
};

export default Picture;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/marketplace/pictures.js ---
import React, { useEffect, useState, useCallback } from "react";
import { toast } from "react-toastify";
import Picture from "./picture";
import Loader from "../utils/loader";
import { Row } from "react-bootstrap";
import { NotificationSuccess, NotificationError } from "../utils/notifications";
import { getPictures, likePicture } from "../../util/album";
import { UploadPictureOnIPFS } from '../../util/ipfs'

const Pictures = () => {
  const [pictures, setPictures] = useState([]);
  const [loading, setLoading] = useState(false);

  // function to get the list of memes
  const getPictures = useCallback(async () => {
    try {
      setLoading(true);
      setPictures(await getPictures());
    } catch (error) {
      console.log({ error });
    } finally {
      setLoading(false);
    }
  });

  const addPicture = async (data) => {
    try {      
      setLoading(true);
      UploadPictureOnIPFS(data).then((resp) => {
        getPictures();
      });
      toast(<NotificationSuccess text="Picture uploaded successfully." />);
    } catch (error) {
      toast(<NotificationError text="Failed to upload a picture." />);
    } finally {
      setLoading(false);
    }
  };

  //  function to like a picture
  const likePicture = async (id, price) => {
    try {
      await likeImage({
        id,
        price,
      }).then((resp) => getPictures());
      toast(<NotificationSuccess text="You have liked the picture" />);
    } catch (error) {
      toast(<NotificationError text="Failed to like picture." />);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getPictures();
  }, []);

  return (
    <>
      {!loading ? (
        <>
          <div className="d-flex justify-content-between align-items-center mb-4">
            <h1 className="fs-4 fw-bold mb-0">Pictures</h1>
            <UploadPicture save={addPicture} />
          </div>
          <Row xs={1} sm={2} lg={3} className="g-3  mb-5 g-xl-4 g-xxl-5">
            {pictures.map((_picture) => (
              <Picture
                picture={{
                  ..._picture,
                }}
                like={like}
              />
            ))}
          </Row>
        </>
      ) : (
        <Loader />
      )}
    </>
  );
};

export default Pictures;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/marketplace/uploadPicture.js ---
import React, { useState } from "react";
import PropTypes from "prop-types";
import { Button, Modal, Form, FloatingLabel } from "react-bootstrap";

const UploadPicture = ({ save }) => {
  const [name, setName] = useState("");
  const [image, setImage] = useState("");
  const [details, setDetails] = useState("");
  const [size, setSize] = useState("");
  const [price, setPrice] = useState(0);
  const isFormFilled = () => name && image && details && size && price;

  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Button
        onClick={handleShow}
        variant="dark"
        className="rounded-pill px-0"
        style={{ width: "38px" }}
      >
        <i class="bi bi-plus"></i>
      </Button>
      <Modal show={show} onHide={handleClose} centered>
        <Modal.Header closeButton>
          <Modal.Title>New Picture</Modal.Title>
        </Modal.Header>
        <Form>
          <Modal.Body>
            <FloatingLabel
              controlId="inputName"
              label="Meme name"
              className="mb-3"
            >
              <Form.Control
                type="text"
                onChange={(e) => {
                  setName(e.target.value);
                }}
                placeholder="Enter name of Image"
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputUrl"
              label="Image URL"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Image URL"
                onChange={(e) => {
                  setImage(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputDescription"
              label="Description"
              className="mb-3"
            >
              <Form.Control
                as="textarea"
                placeholder="details"
                style={{ height: "80px" }}
                onChange={(e) => {
                  setDetails(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputLocation"
              label="Size"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="size"
                onChange={(e) => {
                  setSize(e.target.value);
                }}
              />
            </FloatingLabel>
            <FloatingLabel
              controlId="inputPrice"
              label="Price"
              className="mb-3"
            >
              <Form.Control
                type="text"
                placeholder="Price"
                onChange={(e) => {
                  setPrice(e.target.value);
                }}
              />
            </FloatingLabel>
          </Modal.Body>
        </Form>
        <Modal.Footer>
          <Button variant="outline-secondary" onClick={handleClose}>
            Close
          </Button>
          <Button
            variant="dark"
            disabled={!isFormFilled()}
            onClick={() => {
              save({
                name,
                image,
                details,
                size,
                price,
              });
              handleClose();
            }}
          >
            Save Picture
          </Button>
        </Modal.Footer>
      </Modal>
    </>
  );
};

UploadPicture.propTypes = {
  save: PropTypes.func.isRequired,
};

export default UploadPicture;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/utils/cover.js ---
import React from "react";
import PropTypes from "prop-types";
import { Button } from "react-bootstrap";

const Cover = ({ name, login, coverImg }) => {
  if ((name, login, coverImg)) {
    return (
      <div
        className="d-flex justify-content-center flex-column text-center "
        style={{ background: "#eb690c", minHeight: "100vh" }}
      >
        <div className="mt-auto text-light mb-5">
          <div
            className=" ratio ratio-1x1 mx-auto mb-2"
            style={{ maxWidth: "320px" }}
          >
            <img src={coverImg} alt="" />
          </div>
          <h1>{name}</h1>
          <p style={{ fontSize: "x-large", color: "aquamarine"}}
          >Photo Share App</p>
          <p>Please connect your wallet to continue.</p>
          <Button
            onClick={login}
            variant="outline-light"
            className="rounded-pill px-3 mt-3"
          >
            Connect your Wallet To Continue
          </Button>
        </div>
        <p className="mt-auto text-secondary">Powered by NEAR</p>
      </div>
    );
  }
  return null;
};

Cover.propTypes = {
  name: PropTypes.string,
};

Cover.defaultProps = {
  name: "",
};

export default Cover;

'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/utils/loader.js ---
import React from "react";
import { Spinner } from "react-bootstrap";

const Loader = () => (
  <div className="d-flex justify-content-center">
    <Spinner animation="border" role="status" className="opacity-25">
      <span className="visually-hidden">Loading...</span>
    </Spinner>
  </div>
);
export default Loader;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/utils/notifications.js ---
import React from "react";
import { ToastContainer } from "react-toastify";
import PropTypes from "prop-types";
import "react-toastify/dist/ReactToastify.css";

const Notification = () => (
  <ToastContainer
    position="bottom-center"
    autoClose={5000}
    hideProgressBar
    newestOnTop
    closeOnClick
    rtl={false}
    pauseOnFocusLoss
    draggable={false}
    pauseOnHover
  />
);

const NotificationSuccess = ({ text }) => (
  <div>
    <i className="bi bi-check-circle-fill text-success mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const NotificationError = ({ text }) => (
  <div>
    <i className="bi bi-x-circle-fill text-danger mx-2" />
    <span className="text-secondary mx-1">{text}</span>
  </div>
);

const Props = {
  text: PropTypes.string,
};

const DefaultProps = {
  text: "",
};

NotificationSuccess.propTypes = Props;
NotificationSuccess.defaultProps = DefaultProps;

NotificationError.propTypes = Props;
NotificationError.defaultProps = DefaultProps;

export { Notification, NotificationSuccess, NotificationError };
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/component/wallet.js ---
import React from "react";
import { logout } from "../util/near";
import { Dropdown, Stack, Spinner } from "react-bootstrap";

const Wallet = ({ address, amount }) => {
  if (address) {
    return (
      <>
        <Dropdown>
          <Dropdown.Toggle
            variant="light"
            //@ts-ignore
            align="end"
            id="dropdown-basic"
            className="d-flex align-items-center border rounded-pill py-1"
          >
            {amount ? (
              <>
                {amount} <span className="ms-1"> NEAR</span>
              </>
            ) : (
              <Spinner animation="border" size="sm" className="opacity-25" />
            )}
          </Dropdown.Toggle>

          <Dropdown.Menu className="shadow-lg border-0">
            <Dropdown.Item
              href={`https://explorer.testnet.near.org/accounts/${address}`}
              target="_blank"
            >
              <Stack direction="horizontal" gap={2}>
                <i className="bi bi-person-circle fs-4" />
                <span className="font-monospace">{address}</span>
              </Stack>
            </Dropdown.Item>

            <Dropdown.Divider />
            <Dropdown.Item
              as="button"
              className="d-flex align-items-center"
              onClick={() => {
                logout();
              }}
            >
              <i className="bi bi-box-arrow-right me-2 fs-4" />
              Disconnect
            </Dropdown.Item>
          </Dropdown.Menu>
        </Dropdown>
      </>
    );
  }

  return null;
};

export default Wallet;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import reportWebVitals from "./reportWebVitals";
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import App from './App'

ReactDOM.render(
  <React.StrictMode>
    <Router>
      <Routes>
        <Route path="/" element={<App/>} />
      </Routes>
    </Router>
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- java_api_3/Near-Photo-Sharing-App/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- java_api_3/Near-Photo-Sharing-App/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- java_api_3/Near-Photo-Sharing-App/src/util/album.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";
import {fetchMemeMeta} from "./ipfs"

const GAS = 100000000000000;

export async function uploadPicture(picture) {
    picture.id = uuid4();
    picture.price = parseNearAmount(picture.price + "");
    return await window.contract.uploadPicture( { picture })
}

export async function getPictures() {
    try{
        const pictures = await window.contract.getPictures();
        const pictureList = [];
        pictures.forEach(picture => {
            const pictureItem = new Promise( async (resolve) => {
                const meta = await fetchPictureMeta(picture.metadata);
                //call contract method to get votes count
                const vote= await window.contract.getMemeVotes({ memeId: meme.id});
                resolve({
                    id: picture.id,
                    price: picture.price,
                    owner: picture.owner,
                    addlikes: like[0],
                    removelikes: like[1],
                    name: meta.data.name,
                    image: meta.data.image,
                    details: meta.data.description,
                    size: meta.data.size
                });
            });
            pictureList.push(pictureItem);
        });
        return Promise.all(pictureList);
    } catch(e){
        console.log({e});
    }
}

export async function likePicture({id, like}){
    const isSuccess = await window.contract.likePicture({pictureId: id, like: u8}, GAS);
    if (isSuccess){
        return Promise.resolve(isSuccess);
    } else{
        return Promise.reject();
    }
}
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/util/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || "photo-sharing-app.testnet"; // line 1

function environment(env) {
  switch (env) {
    case "mainnet": // line 5
      return {
        networkId: "mainnet",
        nodeUrl: "https://rpc.mainnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.near.org",
        helperUrl: "https://helper.mainnet.near.org",
        explorerUrl: "https://explorer.mainnet.near.org",
      };
    case "testnet": // line 14
      return {
        networkId: "testnet",
        nodeUrl: "https://rpc.testnet.near.org",
        contractName: CONTRACT_NAME,
        walletUrl: "https://wallet.testnet.near.org",
        helperUrl: "https://helper.testnet.near.org",
        explorerUrl: "https://explorer.testnet.near.org",
      };
    default:
      throw Error(`Unknown environment '${env}'.`);
  }
}

export default environment;
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/util/ipfs.js ---
import { create, IPFSHTTPClient } from "ipfs-http-client";
import axios from "axios";
import { uploadPicture } from "./album";

let ipfs;
try {
    ipfs = create({
        url: "https://ipfs.infura.io:5001/api/v0",

    });
} catch (error) {
    console.error("IPFS error ", error);
    ipfs = undefined;
}

export async function UploadPictureOnIPFS(picture) {
    const data =  JSON.stringify({
        name: picture.name,
        image: picture.image,
        details: picture.details,
    });
    try {
        // save picture metadata to IPFS
        const added = await client.add(data);
        // IPFS url for uploaded metadata
        const url = `https://ipfs.io/ipfs/${added.path}`;

        let imageData = {
            price: picture.price,
            metadata: url
        };
        //now add the picture, including the IPFS url to the blockchain
        let saveMeme = uploadPicture(imageData);

    } catch(error){
    }
}

// get the metedata for a meme from IPFS
export const fetchMemeMeta = async (ipfsUrl) => {
    try {
        if (!ipfsUrl) return null;
        const meta = await axios.get(ipfsUrl);
        return meta;
    } catch (e) {
        console.log({e});
    }
};
'''
'''--- java_api_3/Near-Photo-Sharing-App/src/util/near.js ---
import enviroment from './config'
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

// const nearenv = enviroment("testnet");

export async function set_contract(){
    const nearapi = await connect(
        Object.assign (
            {deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() }},
            "http://localhost:3000"
        )
    );

    window.walletConnection = new WalletConnection("http://localhost:3000")
    window.accountId = window.walletConnection.getAccountId();

    window.contract = new Contract(
        window.walletConnection.account(),
        nearenv.contractName, {
            viewMethods: ["getPictures", "getAllPictures"],
            changeMethods: ["upload_picture"]
        }
    )
}

export async function accountBalance(){
    return formatNearAmount(
        await window.walletConnection.account().getAccountBalance().total, 2
    )
}
export async function getAccountId(){
    return window.walletConnection.getAccountId();
}

export function login(){
    window.walletConnection.requestSignIn(nearenv.contractName);
}

export function logout(){
    window.walletConnection.signOut();
    window.location.reload();
}
'''
'''--- java_api_4/wrapper-api/food-discovery/config-overrides.js ---
const webpack = require('webpack');

module.exports = function override(config) {

    config.ignoreWarnings = [/Failed to parse source map/];
    const fallback = config.resolve.fallback || {};
    Object.assign(fallback, {
        "crypto": require.resolve("crypto-browserify"),
        "stream": require.resolve("stream-browserify"),
        "assert": require.resolve("assert"),
        "http": require.resolve("stream-http"),
        "https": require.resolve("https-browserify"),
        "os": require.resolve("os-browserify"),
        "url": require.resolve("url")
    })
    config.resolve.fallback = fallback;
    config.plugins = (config.plugins || []).concat([
        new webpack.ProvidePlugin({
            process: 'process/browser',
            Buffer: ['buffer', 'Buffer']
        })
    ])
    return config;
}
'''
'''--- java_api_4/wrapper-api/food-discovery/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- java_api_4/wrapper-api/food-discovery/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- java_api_4/wrapper-api/food-discovery/src/App.js ---
import logo from './logo.svg';
import './App.css';

function App() {
  return (
    <div className="App">
      <header className="App-header">
        <img src={logo} className="App-logo" alt="logo" />
        <p>
          Edit <code>src/App.js</code> and save to reload.
        </p>
        <a
          className="App-link"
          href="https://reactjs.org"
          target="_blank"
          rel="noopener noreferrer"
        >
          Learn React
        </a>
      </header>
    </div>
  );
}

export default App;

'''
'''--- java_api_4/wrapper-api/food-discovery/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- java_api_4/wrapper-api/food-discovery/src/component/Login.js ---
import React from "react";
import { useFormik } from "formik";
import {
  Container,
  TextField,
  Button,
  Grid,
  Typography,
  Stack,
  Link,
  Box,
} from "@mui/material";

const Login = () => {
  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
  });

  return (
    <Box bgcolor="#ECE5E5" height="63rem" marginTop="-8rem">
      <Container>
        <Stack
          justifyContent="center"
          direction="column"
          alignItems="center"
          paddingTop="10rem"
        >
          <Stack textAlign="center" marginTop={10}>
            <Typography
              fontSize="50px"
              fontWeight="700"
              lineHeight="105px"
              color="#000"
            >
              Log In
            </Typography>
            <Stack direction="row" marginTop={3}>
              <Typography
                fontWeight="400"
                color="rgba(0, 0, 0, 0.5)"
                fontSize="18px"
              >
                Don't have an account ? &nbsp;
              </Typography>
              <Link
                sx={{ textDecoration: "none", cursor: "pointer" }}
                onClick={() => navigate("/register")}
              >
                <Typography fontWeight="400" color="#000" fontSize="18px">
                  Sign Up
                </Typography>
              </Link>
            </Stack>
          </Stack>
          <form onSubmit={formik.handleSubmit}>
            <Grid container marginTop={10}>
              <Grid Item lg={12}>
                <TextField
                  fullWidth
                  id="outlined-basic"
                  variant="outlined"
                  id="email"
                  name="email"
                  label="Email"
                  placeholder="enter email address (ex. mail@send.com)"
                  value={formik.values.email}
                  onChange={formik.handleChange}
                  error={formik.touched.email && Boolean(formik.errors.email)}
                  helperText={formik.touched.email && formik.errors.email}
                />
              </Grid>
              <Grid item lg={12} marginTop={5}>
                <TextField
                  fullWidth
                  id="outlined-basic"
                  variant="outlined"
                  id="password"
                  name="password"
                  label="Password"
                  type="password"
                  placeholder="enter password"
                  value={formik.values.password}
                  onChange={formik.handleChange}
                  error={
                    formik.touched.password && Boolean(formik.errors.password)
                  }
                  helperText={formik.touched.password && formik.errors.password}
                />
              </Grid>
              <Grid item lg={12} marginTop={5}>
                <Button
                  variant="contained"
                  fullWidth
                  type="submit"
                  sx={{ background: "#6E8264", height: 60 }}
                >
                  Login
                </Button>
              </Grid>
            </Grid>
          </form>
        </Stack>
      </Container>
    </Box>
  );
};

export default Login;

'''
'''--- java_api_4/wrapper-api/food-discovery/src/component/LoginPage.js ---
import React from 'react';
import {Button, Container, Grid, Stack, TextField} from "@mui/material";
import {useFormik} from "formik";
import {GetAccountByKey} from "./service";

const LoginPage = () => {

    const formik = useFormik({
        initialValues: {
            accountId: "",
            seedPhrase: "",
        },
        onSubmit: (values) => {
            GetAccountByKey(values.accountId, values.seedPhrase).then(res => console.log(res))
        }
    });

    return (
        <Stack
               justifyContent="center"
               direction="column"
               alignItems="center"
               paddingTop="10rem"
               width="40rem"
               marginLeft="37rem"
        >
            <Container>
            <form onSubmit={formik.handleSubmit}>
                <Grid container marginTop={10}>
                    <Grid Item lg={12}>
                        <TextField
                            fullWidth
                            id="outlined-basic"
                            variant="outlined"
                            id="accountId"
                            value={formik.values.accountId}
                            onChange={formik.handleChange}
                            label="Account Id"
                            name="accountId"
                            type="accountId"
                            placeholder="Enter Account Id"
                            error={
                                formik.touched.accountId && Boolean(formik.errors.accountId)
                            }
                            helperText={formik.touched.accountId && formik.errors.accountId}
                        />
                    </Grid>
                    <Grid Grid item lg={12} marginTop={5}>
                        <TextField
                            fullWidth
                            id="outlined-basic"
                            variant="outlined"
                            id="seedPhrase"
                            value={formik.values.seedPhrase}
                            onChange={formik.handleChange}
                            name="seedPhrase"
                            label="Seed Phrase"
                            type="seedPhrase"
                            placeholder="Enter Seed Phrase"
                        />
                    </Grid>
                    <Grid  item lg={12} marginTop={5}>
                        <Button
                            variant="contained"
                            fullWidth
                            type="submit"
                            sx={{ background: "#6E8264", height: 60 }}
                        >
                            Login
                            </Button>
                    </Grid>
                </Grid>

            </form>

            </Container>
        </Stack>
    );
};

export default LoginPage;
'''
'''--- java_api_4/wrapper-api/food-discovery/src/component/api.js ---
const CONFIG_PATH = './near-api-server.config.json';

module.exports = {
    CONFIG_PATH,

    reject: (err) => {
        console.log(err);
        return {error: typeof err === "string" ? err : JSON.stringify(err)};
    },
    notify: (message) => {
        return {text: message};
    }
}
'''
'''--- java_api_4/wrapper-api/food-discovery/src/component/service.js ---
import api from "./api";
import {utils, keyStores, connect } from 'near-api-js';
import nearSeedPhrase from "near-seed-phrase"

export async function GetAccountByKey(account_id, seedPhrase) {

    let rpc_node = "https://rpc.testnet.near.org"
     let network = "testnet"
    let private_key = nearSeedPhrase.parseSeedPhrase(seedPhrase)
    try {
        // private_key = private_key.replace('"', '');

        const keyPair = utils.KeyPair.fromString(private_key.secretKey);
        const keyStore = new keyStores.InMemoryKeyStore();
        await keyStore.setKey(network, account_id, keyPair);

        const near = await connect({
            networkId: "default",
            deps: {keyStore},
            masterAccount: account_id,
            nodeUrl: rpc_node
        });

        return await near.account(account_id);
    } catch (e) {
        return api.reject(e);
    }

}
'''
'''--- java_api_4/wrapper-api/food-discovery/src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import reportWebVitals from "./reportWebVitals";
import Login from "./component/LoginPage";

ReactDOM.render(
  <React.StrictMode>
    <Login />
  </React.StrictMode>,
  document.getElementById("root")
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- java_api_4/wrapper-api/food-discovery/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- java_api_4/wrapper-api/food-discovery/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- js_api/api-js/app.js ---
const cors = require('cors');
const express = require('express');
require('express-async-errors');
const morgan = require('morgan');
const middleware = require('./utils/middleware');

const accountRouter = require("./routes/account");
const networkRouter = require("./routes/network");
const gasRouter = require("./routes/gas");

const app = express();

app.use(cors());
app.use(express.static('build'));
app.use(express.json());

app.use(morgan('dev'));

app.use('/api/v1/account', accountRouter);
app.use('/api/v1/network', networkRouter);
app.use('/api/v1/gas', gasRouter);

// app.use(middleware.error_handler);
// app.use(middleware.unknown_endpoint);

module.exports = app;
'''
'''--- js_api/api-js/controllers/account.js ---
const axios = require('axios');

// the controller to get the data from the rpc func calls 

const BaseUrl = "https://rpc.testnet.near.org";

const viewAccount = async () => {
    const JSONParams =
    {
        "jsonrpc": "2.0",
        "id": "dontcare",
        "method": "query",
        "params": {
            "request_type": "view_account",
            "finality": "final",
            "account_id": "nearkat.testnet"
        }
    };

    try {
        const axiosRes = await axios.post(BaseUrl, JSONParams);
        // console.log("this is the axios result -> ", axiosRes.data);
        return axiosRes;
    } catch (err) {
        console.error("error getting the account info ->", err);
    }
}

module.exports = {
    viewAccount,
}
'''
'''--- js_api/api-js/controllers/gas.js ---
const axios = require('axios');

// the controller to get the data from the rpc func calls 

const BaseUrl = "https://rpc.testnet.near.org";

//this rpc uses [null] and will return the gas price for the most recent block 
const gasPrice = async () => {
    const JSONParams = {
        "jsonrpc": "2.0",
        "id": "dontcare",
        "method": "gas_price",
        "params": [null]
    };

    try {
        const axiosRes = await axios.post(BaseUrl, JSONParams);
        // console.log("result for latest gas price-> ", axiosRes.data);
        return axiosRes;
    } catch (err) {
        console.error("error getting gas price ->", err);
    }
}

module.exports = {
    gasPrice
};

'''
'''--- js_api/api-js/controllers/network.js ---
const axios = require('axios');

// the controller to get the data from the rpc func calls 

const BaseUrl = "https://rpc.testnet.near.org";

const networkInfo = async () => {
    const JSONParams =
    {
        "jsonrpc": "2.0",
        "id": "dontcare",
        "method": "network_info",
        "params": []
    };

    try {
        const axiosRes = await axios.post(BaseUrl, JSONParams);
        // console.log("result for network info -> ", axiosRes.data);
        return axiosRes;
    } catch (err) {
        console.error("error getting the network info ->", err);
    }
}

const nodeStatus = async () => {
    const JSONParams =
    {
        "jsonrpc": "2.0",
        "id": "dontcare",
        "method": "status",
        "params": []
    };

    try {
        const axiosRes = await axios.post(BaseUrl, JSONParams);
        // console.log("result for node status -> ", axiosRes.data);
        return axiosRes;
    } catch (err) {
        console.error("error getting the node status ->", err);
    }
}

const validationStatus = async () => {
    const JSONParams = {
        "jsonrpc": "2.0",
        "id": "dontcare",
        "method": "validators",
        "params": [null]
    };

    try {
        const axiosRes = await axios.post(BaseUrl, JSONParams);
        // console.log("validation status for the latest block  -> ", axiosRes.data);
        return axiosRes;
    } catch (err) {
        console.error("error getting validation status for the latest block ->", err);
    }
}

module.exports = {
    networkInfo,
    nodeStatus,
    validationStatus,
}
'''
'''--- js_api/api-js/index.js ---
const http = require('http');
const app = require('./app');
const config = require('./utils/config');

const server = http.createServer(app);

server.listen(config.PORT, () => {
    console.log(`server running on port -> ${config.PORT}`)
})
'''
'''--- js_api/api-js/jest.config.js ---
module.exports = {
    testEnvironment: 'node',
    testTimeout: 3000000,
    coveragePathIgnorePatterns: [
        '/node_modules/'
    ]
};
'''
'''--- js_api/api-js/routes/account.js ---
const accountRouter = require('express').Router();

let accountController = require('../controllers/account');

accountRouter.get('/', async (req, res) => {
    const accountResp = (await accountController.viewAccount()).data;
    // console.log("the account res", accountResp);
    res.json(accountResp);
});

module.exports = accountRouter;
'''
'''--- js_api/api-js/routes/gas.js ---
const gasRouter = require('express').Router();

let gasController = require('../controllers/gas');

gasRouter.get('/', async (req, res) => {
    const gasResp = (await gasController.gasPrice()).data;
    // console.log("the gas res", gasResp);
    res.json(gasResp);
});

module.exports = gasRouter;
'''
'''--- js_api/api-js/routes/network.js ---
const networkRouter = require('express').Router();

let networkController = require('../controllers/network');

networkRouter.get('/net-info', async (req, res) => {
    const networkInfoResp = (await networkController.networkInfo()).data;
    res.json(networkInfoResp);
});

networkRouter.get("/node-status", async(req, res) => {
    const nodeStatusResp = (await networkController.nodeStatus()).data;
    res.json(nodeStatusResp);
});

networkRouter.get("validation-status", async(req, res) => {
    const validationStatusResp = (await networkController.validationStatus()).data;
    res.json(validationStatusResp); 
});

module.exports = networkRouter;
'''
'''--- js_api/api-js/tests/accountController.test.js ---
let accountController = require('../controllers/account');

// an rpc call should return a 200 OK signal
test("the status of an rcp call to the NEAR protocol should return 200", async () => {
    let res = await accountController.viewAccount();
    expect(res.status).toBe(200);
});  
'''
'''--- js_api/api-js/tests/api.test.js ---
const supertest = require('supertest');
const app = require('../app');

const api = supertest(app);

describe("GET /account endpoints", () => {
    it("should return status 200 Ok", async () => {
        const res = await api.get('/api/v1/account');
        expect(res.status).toEqual(200);

    });

    it("the property result should be returned in body", async () => {
        const res = await api.get('/api/v1/account');
        expect(res.body).toHaveProperty('result');
    });

    it("the data returned in body should be json type", async () => {
        const res = await api.get('/api/v1/account');
        expect(res.type).toEqual(expect.stringContaining('json'));
    });

});

describe("GET /network endpoints", () => {
    it("GET /network/net-info return status 200 Ok", async () => {
        const res = await api.get('/api/v1/network/net-info');
        expect(res.status).toEqual(200);

    });

    it("network info response body should have property active_peers", async () => {
        const res = await api.get('/api/v1/network/net-info');
        expect(res.body.result).toHaveProperty('active_peers');
    });

});

describe("GET /gas price endpoints", () => {
    it("result should have data of the gas price in it", async () => {
        const res = await api.get('/api/v1/gas');
        // console.log(res.body)
        expect(res.body.result.gas_price).toBeDefined();
    });
});

describe("GET /non-existent router should return a 404", () => {
    it("a call to /non-existent should not return any valid data", async () => {
        const res = await api.get('/api/v1/non-existent');
        expect(res.status).toBe(404);
    });
});

'''
'''--- js_api/api-js/tests/dummy.test.js ---
// NOTE: LATEST NODE VERSION SUPPORTS TESTING NATIVELY. DON'T USE JEST 

test("this is a dummy and should always pass", () => {
    const resp = 23;

    expect(resp).toBe(23); 
});
'''
'''--- js_api/api-js/utils/config.js ---
require('dotenv').config();

const PORT = process.env.PORT || 3040;

module.exports = { PORT }
'''
'''--- js_api/api-js/utils/middleware.js ---
const unknownEndpoint = (req, res) => {
    res.status(400).send({ error: "unknown endpoint" });
}

// const errorHandler = (err, req, res, next) => {
//     console.error(err.message);

//     if (err.message === "CastError") {
//         return res.status(400).send({ error: "malformatted id" });
//     } else if (err.message === "ValidationError") {
//         return res.status(400).json({ error: err.message });
//     } else if (err.message = "JsonWebTokenError") {
//         res.status(401).json({ error: " invalid token" });
//     }

//     next(err);
// }

module.exports = {
    unknownEndpoint,
    // errorHandler,
}
'''