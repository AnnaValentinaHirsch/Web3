*GitHub Repository "Mycelium-Lab/crisp-frontend"*

'''--- .eslintrc.js ---
module.exports = {
  root: true,
  env: {
    node: true
  },
  'extends': [
    'plugin:vue/vue3-essential',
    'eslint:recommended'
  ],
  parserOptions: {
    parser: '@babel/eslint-parser'
  },
  rules: {
    'no-console': process.env.NODE_ENV === 'production' ? 'warn' : 'off',
    'no-debugger': process.env.NODE_ENV === 'production' ? 'warn' : 'off'
  }
}

'''
'''--- README.md ---
# Crisp frontend

[Crisp](https://crisp.exchange/) is an open-source structured liquidity protocol on the NEAR blockchain.

This repository contains the frontend.

There is also a [smart contract repository](https://github.com/Mycelium-Lab/crisp-exchange).

## Overview

The protocol is an advanced DEX where you can:
- trade with existing liquidity
- place concentrated liquidity positions in a chosen price range to earn trading fees
- leverage your positions up to 5x
- lend your tokens for others to borrow for leverage and earn interest
- liquidate underwater leveraged positions to earn a premium

<img src="docs/img/swap.png" height=200>
<img src="docs/img/create-position.png" height=200>
<img src="docs/img/your-positions.png" height=200>
<img src="docs/img/add-liquidity.png" height=200>
<img src="docs/img/remove-liquidity.png" height=200>
<img src="docs/img/lend.png" height=200>

## Project setup
```
npm i
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

'''
'''--- babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ],
  plugins: [
    '@babel/plugin-proposal-optional-chaining'
  ]
}
'''
'''--- docs/README.md ---
### Documentation

### Layout:
The parent component is the /App.vue file, it contains the router-view, where the components from the /views folder are stored. It also contains header, notifications-wrapper and socials-wrapper.

The layout uses scss, some basic styles are placed in /assets/scss/main.scss file, for example text sizes and most colors for buttons and text.

# Project structure:
For each page the corresponding component from the /views folder is used, they are rendered in the router-view tag in App.vue, and switched by the router consequence /router/index.js. The router is configured to preserve history. Using a non-existent router (app.crisp.exchange/foo-bar12345), as well as its absence (app.crisp.exchange/), leads to the swap component. 

In the /constants folder there are two files with constants:

1. charts.js is used to store the default set of settings for the chart drawn using the Apexcharts library, if desired, you can change them directly in the constant, or add some parameters of a particular instance in the component using the spread operator (apexCharts = {...apexCharts, tooltip: {enabled: false}).
2. index.js has such constants as CONTRACT_ID, METHOD_NAMES (new methods should be added here, so that the user is granted usage rights for them at login), DEFAULT_SWAP_PAIR (if there is no last used pair in localStorage, SwapView component takes this pair as default) and SWAP_TOKENS (listing of all currently used tokens).

The /utils folder contains five files with reusable functions and code:

1. format.js uses the ethers.js library to convert a token quantity using decimals (addDecimals), and to subtract decimals, converting that quantity to human format (removeDecimals)
2. index.js contains CONFIG which is currently set to testnet, these values can be changed to mainnet
3. localStorage.js simplifies working with localStorage by providing functions to write, read, and delete records from localStorage
4. number.js: toFixed() and isNumber() simplify working with numbers in exponential notation (replaced by ethers.js methods almost everywhere due to imprecision)
5. tick.js is used to round the price to the nearest tick

# Application initialization

When rendering the application, at the moment when the created() hook is triggered in the App.vue file, the load method is called, which sequentially calls the following functions in the store:

1. fetchCrispContract() initializes the walletSelector and setupModal entities of the nearWalletSelector library, as well as nearConnection (using the config), and then walletConnection (which are nearAPI entities themselves). When initializing setupModal, the user is presented with a login prompt if they are not already logged in. After a successful login, the page is refreshed and, if the user is logged in, the crispContract entity is initialized, which is then used for simple calls to contract functions (not batch transactions).
2. fetchPools() fetches the list of pools from the contract by calling the corresponding method
3. fetchBalances(), using the user's accountId, gets a list of the user's balances by initializing the tokenBalances entity. The response from get_balance_all_tokens comes as a single string, so it is broken down into an object, and then for each object there is a query to ft_metadata() to get additional data about the token - symbol, icon, number of decimals etc. This list is then matched against the existing (in constants/index.js) list of tokens to initialize objects for missing balances too, since a user may not have tokens on crisp but have them on nir wallet. After all manipulations for each tokenBalance object the ft_balance_of method is also called to get the same balance on the nir wallet, and as a result we get an array of objects, where each balance object contains all the necessary information about the token, its crisp balance, and its nir balance.
4. processTokensMetadata() is used to get information about tokens available in pools to output additional data for them. Potentially can be written out in the future, as now this information is also duplicated in tokenBalances, but for now it is used in most components
5. processPositions lists all positions in the pools obtained by the fetchPools method and initializes two arrays: one with all positions in all pools (for general display at the bottom of the page) and with user positions (for detailed display on the same page)
6. fetchDeposits retrieves user deposits made available for borrowing by other users, creating a userDeposits entity for rendering on the corresponding page
7. fetchBorrows gets the user's deposits, finds the corresponding items in the userPositions list and updates some values in them, so that the LiquidityView page will display the corresponding information about the item being in the borrowed state and some additional data.

After all these functions are executed, the application displays all the necessary information when navigating through the different pages. Similar calls occur at the reload() function in the store component, which is called during some transactions that are executed directly on the page.

# Transaction invocation, classical method and batch transactions

At the moment there are two types of transaction calls used in a contract.

The first one is simplified, when we need to call only one action in one contract, for example, the withdraw() call in DepositView.

In this case, we only need to take the crispContract entity from the store, which has all existing contract functions in it, and call it in the form:

```
await contract.withdraw(
    {
        token: this.tokenW, // address of the token to be withdrawn
        amount: addDecimals(this.amountW, tokenObj), // amount of token with decimals added
    }
)
```

after which we process the returned promis with .then(), and dispatch reload(), since such functions can be called directly from the application

The second is the so-called batch transaction, a functionality provided by the near wallet selector library, and it allows us to call several actions in one contract, and several actions in several contracts, within one transaction.

Example: the create_deposit function in LendingView. If we set nearWallet as the desired token source to create the deposit, the following batchTx is executed:

```
await wallet.signAndSendTransactions({
    transactions: [
        {
            receiverId: tokenObj.token,
            actions: [
                {
                    type: "FunctionCall",
                    params: {
                        methodName: "storage_deposit",
                        args: Buffer.from(JSON.stringify(argsDeposit)),
                        gas: 150000000000000,
                        deposit: 1
                    }
                },
                {
                    type: "FunctionCall",
                    params: {
                        methodName: "ft_transfer_call",
                        args: Buffer.from(JSON.stringify(argsTransfer)),
                        gas: 150000000000000,
                        deposit: 1
                    }
                }
            ]
        },
        {
            receiverId: CONTRACT_ID,
            actions: [
                {
                    type: "FunctionCall",
                    params: {
                        methodName: "create_deposit",
                        args: Buffer.from(JSON.stringify(argsCreateDeposit)),
                        gas: 150000000000000
                        // deposit: 1
                    }
                }
            ]
        }
    ]
})
```

The signAndSendTransactions function is a function of the wallet object that we need to get from store.

The transactions parameter is an array of calls to the contracts we will access, and each transaction has an array of receiverId, which is the address of the contract where the actions will be executed, and the actions themselves, which is a list of actions in that contract.

In each action we need to specify the type, as well as parameters such as the name of the method, the maximum amount of gas per transaction, and for some transactions we need to specify the deposit (in NEAR). Arguments are composed in the same way as for the previous transaction call, but they must be cast first to a string and then to a buffer (as specified in the example)

'''
'''--- jsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "module": "esnext",
    "baseUrl": "./",
    "moduleResolution": "node",
    "paths": {
      "@/*": [
        "src/*"
      ]
    },
    "lib": [
      "esnext",
      "dom",
      "dom.iterable",
      "scripthost"
    ]
  }
}

'''
'''--- package.json ---
{
  "name": "near-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "@near-wallet-selector/core": "^8.1.4",
    "@near-wallet-selector/modal-ui-js": "^8.1.4",
    "@near-wallet-selector/near-wallet": "^8.1.4",
    "@near-wallet-selector/my-near-wallet": "^8.1.4",
    "@near-wallet-selector/here-wallet": "^8.1.4",
    "@near-wallet-selector/meteor-wallet": "^8.1.4",
    "@near-wallet-selector/near-mobile-wallet": "^8.1.4",
    "apexcharts": "^3.36.3",
    "bignumber.js": "^9.1.1",
    "core-js": "^3.8.3",
    "ethers": "^6.7.1",
    "near-api-js": "^1.1.0",
    "node-polyfill-webpack-plugin": "^3.0.0",
    "vue": "^3.2.13",
    "vue-router": "^4.0.3",
    "vue3-apexcharts": "^1.4.1",
    "vuex": "^4.0.0"
  },
  "devDependencies": {
    "@babel/core": "^7.12.16",
    "@babel/eslint-parser": "^7.12.16",
    "@vue/cli-plugin-babel": "~5.0.0",
    "@vue/cli-plugin-eslint": "~5.0.0",
    "@vue/cli-plugin-router": "~5.0.0",
    "@vue/cli-plugin-vuex": "~5.0.0",
    "@vue/cli-service": "~5.0.0",
    "eslint": "^7.32.0",
    "eslint-plugin-vue": "^8.0.3",
    "sass": "^1.32.7",
    "sass-loader": "^12.0.0",
    "vue-cli-plugin-store": "~0.0.7"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-LVEGNLSKBF"></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
    
      gtag('config', 'G-LVEGNLSKBF');
    </script>
    
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Montserrat:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet"> 
    <title>Crisp</title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- src/assets/icons/ArrowsClockwise.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.5188 9.34686H21.0188V4.84686" stroke="#212121" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M6.1687 6.16876C6.93407 5.40227 7.84304 4.7942 8.84362 4.37932C9.84421 3.96443 10.9168 3.75089 12 3.75089C13.0831 3.75089 14.1557 3.96443 15.1563 4.37932C16.1569 4.7942 17.0658 5.40227 17.8312 6.16876L21.0187 9.34688" stroke="#212121" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M7.4812 14.6531H2.9812V19.1531" stroke="#212121" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M17.8312 17.8313C17.0658 18.5977 16.1569 19.2058 15.1563 19.6207C14.1557 20.0356 13.0831 20.2491 12 20.2491C10.9168 20.2491 9.84421 20.0356 8.84362 19.6207C7.84304 19.2058 6.93407 18.5977 6.1687 17.8313L2.9812 14.6531" stroke="#212121" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/icons/arrow-down.svg ---
<svg width="18" height="10" viewBox="0 0 18 10" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.5 1L9 8.5L1.5 1" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/icons/arrow-twin.svg ---
<?xml version="1.0" encoding="iso-8859-1"?>
<!-- Uploaded to: SVG Repo, www.svgrepo.com, Generator: SVG Repo Mixer Tools -->
<svg fill="#000000" height="800px" width="800px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" 
	 viewBox="0 0 512.04 512.04" xml:space="preserve">
<g>
	<g>
		<path d="M508.933,248.353L402.267,141.687c-4.267-4.053-10.987-3.947-15.04,0.213c-3.947,4.16-3.947,10.667,0,14.827
			l88.427,88.427H36.4l88.427-88.427c4.053-4.267,3.947-10.987-0.213-15.04c-4.16-3.947-10.667-3.947-14.827,0L3.12,248.353
			c-4.16,4.16-4.16,10.88,0,15.04L109.787,370.06c4.267,4.053,10.987,3.947,15.04-0.213c3.947-4.16,3.947-10.667,0-14.827
			L36.4,266.593h439.147L387.12,355.02c-4.267,4.053-4.373,10.88-0.213,15.04c4.053,4.267,10.88,4.373,15.04,0.213
			c0.107-0.107,0.213-0.213,0.213-0.213l106.667-106.667C513.093,259.34,513.093,252.513,508.933,248.353z"/>
	</g>
</g>
</svg>
'''
'''--- src/assets/icons/burger.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3.75 12H20.25" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M3.75 6H20.25" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M3.75 18H20.25" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/icons/expand.svg ---
<svg width="37" height="38" viewBox="0 0 37 38" fill="none" xmlns="http://www.w3.org/2000/svg">
<g filter="url(#filter0_d_1_71)">
<path d="M18.25 29.5917L4 16.3417L7.325 13.25L18.25 23.3531L29.175 13.25L32.5 16.3417L18.25 29.5917ZM18.25 16.3417L4 3.09167L7.325 0L18.25 10.1031L29.175 0L32.5 3.09167L18.25 16.3417Z" fill="#E6A407"/>
</g>
<defs>
<filter id="filter0_d_1_71" x="0" y="0" width="36.5" height="37.5917" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
<feFlood flood-opacity="0" result="BackgroundImageFix"/>
<feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha"/>
<feOffset dy="4"/>
<feGaussianBlur stdDeviation="2"/>
<feComposite in2="hardAlpha" operator="out"/>
<feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0"/>
<feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_1_71"/>
<feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_1_71" result="shape"/>
</filter>
</defs>
</svg>

'''
'''--- src/assets/icons/isActive/active.svg ---
<svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="10.5" cy="10.5" r="10.5" fill="#72E75F"/>
</svg>

'''
'''--- src/assets/icons/isActive/error.svg ---
<svg width="21" height="21" viewBox="0 0 21 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="10.5" cy="10.5" r="10.5" fill="#FC460D"/>
</svg>

'''
'''--- src/assets/icons/logout.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 12H17.25" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M10.5 5.25L17.25 12L10.5 18.75" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M20.25 3.75V20.25" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/icons/search.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M10.875 18.75C15.2242 18.75 18.75 15.2242 18.75 10.875C18.75 6.52576 15.2242 3 10.875 3C6.52576 3 3 6.52576 3 10.875C3 15.2242 6.52576 18.75 10.875 18.75Z" stroke="#212121" stroke-opacity="0.5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M16.4438 16.4438L21.0001 21" stroke="#212121" stroke-opacity="0.5" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/icons/telegram.svg ---
<svg width="32px" height="32px" viewBox="0 0 448 512" fill="white" xmlns="http://www.w3.org/2000/svg"><path d="M446.7 98.6l-67.6 318.8c-5.1 22.5-18.4 28.1-37.3 17.5l-103-75.9-49.7 47.8c-5.5 5.5-10.1 10.1-20.7 10.1l7.4-104.9 190.9-172.5c8.3-7.4-1.8-11.5-12.9-4.1L117.8 284 16.2 252.2c-22.1-6.9-22.5-22.1 4.6-32.7L418.2 66.4c18.4-6.9 34.5 4.1 28.5 32.2z"/></svg>
'''
'''--- src/assets/icons/x.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M25 7L7 25" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
<path d="M25 25L7 7" stroke="black" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
</svg>

'''
'''--- src/assets/near-protocol-near-logo.svg ---
<?xml version="1.0" encoding="UTF-8"?>
<!-- Generator: Adobe Illustrator 24.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->
<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 90.1 90" style="enable-background:new 0 0 90.1 90;" xml:space="preserve">
<path d="M72.2,4.6L53.4,32.5c-1.3,1.9,1.2,4.2,3,2.6L74.9,19c0.5-0.4,1.2-0.1,1.2,0.6v50.3c0,0.7-0.9,1-1.3,0.5l-56-67  C17,1.2,14.4,0,11.5,0h-2C4.3,0,0,4.3,0,9.6v70.8C0,85.7,4.3,90,9.6,90c3.3,0,6.4-1.7,8.2-4.6l18.8-27.9c1.3-1.9-1.2-4.2-3-2.6  l-18.5,16c-0.5,0.4-1.2,0.1-1.2-0.6V20.1c0-0.7,0.9-1,1.3-0.5l56,67c1.8,2.2,4.5,3.4,7.3,3.4h2c5.3,0,9.6-4.3,9.6-9.6V9.6  c0-5.3-4.3-9.6-9.6-9.6C77.1,0,74,1.7,72.2,4.6z"/>
</svg>
'''
'''--- src/constants/charts.js ---
export const defaultOptions = {
    annotations: {
      position: 'front'
    },
    chart: {
      type: 'area',
      toolbar: {
        show: false
      },
      animations: {
        enabled: true,
        easing: 'easeinout',
        speed: 700, // first render
        dynamicAnimation: { // re-render (switching between 3 graphs)
          enabled: true,
          speed: 500
        }
      },
      height: 240,
      width: 380,
      zoom: {
        enabled: false
      },
      brush: {
        enabled: true
      },
      selection: {
        enabled: true,
        type: 'x',
        fill: {
          color: '#e9effb',
          opacity: 0.4
        },
        stroke: {
          width: 0,
          dashArray: 3,
          color: '#24292e',
          opacity: 0.4
        },
        xaxis: {
            min: undefined,
            max: undefined
        }
      }
    },
    colors: ['#000'],
    fill: {
      gradient: {
        opacityFrom: 0.75,
        opacityTo: 0.35,
        shadeIntensity: 0,
        gradientToColors: ['#E7B35A', '#fff']
      }
    },
    tooltip: {
      enabled: true
    },
    dataLabels: {
      enabled: false
    },
    stroke: {
      curve: 'straight',
      width: 1
    },
    xaxis: {
      type: 'numeric',
      tooltip: {
        enabled: false
      },
      tickAmount: 6,
      labels: {
          offsetX: 3,
          show: true,
          formatter: function (value) {
              if (value !== null) {
                  return value.toFixed(2)
              }
          }
      }
    },
    yaxis: {
      show: false,
    },
    legend: {
      show: false
    },
    grid: {
      show: false
    }
  };
'''
'''--- src/constants/index.js ---
export const CONTRACT_ID = "dev-1705280229234-19875813623641"
export const METHOD_NAMES = ['get_pools', 'get_balance', 'get_balance_all_tokens', 'open_position', 'close_position', 'swap', 'add_liquidity', 'remove_liquidity', /* 'swap_in', 'swap_out',*/'storage_deposit', 'ft_transfer_call', 'withdraw', 'get_return', 'get_expense', 'create_reserve', 'create_deposit', 'close_deposit', 'refresh_deposits_growth', 'take_deposit_growth', 'get_account_deposits', 'supply_collateral_and_borrow', 'return_collateral_and_repay', 'get_liquidation_list', 'get_borrow_health_factor', 'liquidate', 'positions_opened', 'get_borrows_by_account', 'get_liquidation_price', 'get_max_leverage']

export const DEFAULT_SWAP_PAIR = {
    token_in: {
        symbol:"USDT",
        token:"usdt.fakes.testnet"
    },
    token_out: {
        symbol:"wNEAR",
        token:"wrap.testnet"
    }
}

export const SWAP_TOKENS = [
    {
        symbol: 'USDT',
        token: 'usdt.fakes.testnet'
    },
    {
        symbol: 'USDC',
        token: 'usdc.fakes.testnet'
    },
    {
        symbol: 'wNEAR',
        token: 'wrap.testnet'
    }
]

export const NOT_ENOUGH_LIQUIDITY_ERROR = 'not enough liquidity in pool to cover this swap'
'''
'''--- src/main.js ---
import { createApp } from 'vue'
import App from './App.vue'
import router from './router'
import store from './store'

createApp(App).use(store).use(router).mount('#app')

'''
'''--- src/router/index.js ---
import { createRouter, createWebHistory } from 'vue-router'
// import HomeView from '../views/HomeView.vue'

const routes = [
  {
    path: '/',
    redirect: '/swap'
    // name: 'home',
    // component: HomeView
  },
  {
    path: '/pools',
    name: 'pools',
    component: () => import('../views/LiquidityView.vue')
  },
  {
    path: '/deposit',
    name: 'deposit',
    component: () => import('../views/DepositView.vue')
  },
  {
    path: '/swap',
    name: 'swap',
    component: () => import('../views/SwapView.vue')
  },
  {
    path: '/about',
    name: 'about',
    // route level code-splitting
    // this generates a separate chunk (about.[hash].js) for this route
    // which is lazy-loaded when the route is visited.
    component: () => import(/* webpackChunkName: "about" */ '../views/AboutView.vue')
  },
  {
    path: '/lending',
    name: 'lending',
    component: () => import('../views/LendingView.vue')
  },
  {
    path: '/:catchAll(.*)', redirect: '/swap'
  }
]

const router = createRouter({
  history: createWebHistory(process.env.BASE_URL),
  routes
})

export default router

'''
'''--- src/store/index.js ---
import { createStore } from 'vuex'
import * as nearAPI from "near-api-js"
import { CONTRACT_ID, METHOD_NAMES, SWAP_TOKENS } from '../constants/index.js'
import { CONFIG } from '../utils/index.js'
import router from '../router'

import { setupWalletSelector } from "@near-wallet-selector/core";
import { setupModal } from "@near-wallet-selector/modal-ui-js";
import { setupNearWallet } from "@near-wallet-selector/near-wallet";
import { setupMyNearWallet } from "@near-wallet-selector/my-near-wallet";
import { setupHereWallet } from "@near-wallet-selector/here-wallet";
import { setupMeteorWallet } from "@near-wallet-selector/meteor-wallet";
import { setupNearMobileWallet } from "@near-wallet-selector/near-mobile-wallet"; 
import { toFixed } from '@/utils/number.js'
import { removeDecimals } from '@/utils/format.js'

export default createStore({
  state: {
    selector: null,
    modal: null,
    nearConnection: null,
    walletConnection: null,
    crispContract: null,
    account: null,

    accountId: null,
    
    tokenBalances: [],
    tokensBeingLoaded: false,
    pools: [],
    positions: null,
    borrows: null,
    userPositions: null,
    userDeposits: null,
    // userDepositsByToken: null,
    tokens: null,
    notifications: [],
    tokenForDeposit: null,

    loaded: {
      balances: false,
      pools: false,
      positions: false,
      tokens: false,
      deposits: false
    }
  },
  getters: {
    tokenForDeposit: (s) => s.tokenForDeposit
  },
  mutations: {
    async pushNotification(state, notification) {
      let newId = 0
      if (state.notifications[0]) {
        for (let i = 0; i < state.notifications.length; i++) {
          if (state.notifications[i].id >= newId) {
            newId = state.notifications[i].id + 1
          }
        }
      }
      state.notifications.push({
        id: newId,      // int
        // txid: notification.txid,
        title: notification.title,
        type: notification.type,  // success/error
        text: notification.text   // caption
      })
      setTimeout(() => {
        this.commit('removeNotification', newId)
      },5000)
    },
    removeNotification(state, id) {
      state.notifications = state.notifications.filter(x => x.id !== id)
    },
    emitLoading(state, parameter) {
      if (parameter === 'positions') { state.loaded.positions = true }
      if (parameter === 'tokens') { state.loaded.tokens = true }
    },
    setDepositToken(state, tokenForDeposit) {
      state.tokenForDeposit = tokenForDeposit
    }
  },
  actions: {
    depositToken({ commit }, token) {
      commit('setDepositToken', token)
      router.push("/deposit")
    },
    async reload ({state, commit, dispatch}) {
      state.loaded = {
        balances: false,
        pools: false,
        positions: false,
        tokens: false,
        deposits: false
      }
      state.tokenBalances = []
      state.tokens = null
      state.pools = []
      state.borrows = null
      state.positions = null
      state.userPositions = null
      state.userDeposits = null
      // state.userDepositsByToken = null
      await dispatch('fetchCrispContract', state)
      await dispatch('fetchPools', state)
      await dispatch('fetchBalances', state)
      if (state.pools[0]) {
        await dispatch('processTokenMetadata', state)
      } else {
        commit('emitLoading', 'tokens')
      }
      if (state.pools[0]) {
        await dispatch('processPositions', state)
      } else {
        commit('emitLoading', 'positions')
      }
      await dispatch('fetchDeposits', state)
      await dispatch('fetchBorrows', state)
    },
    async signIn ({state}) {
      state.modal.show();
    },
    async signOut ({state}) {
      const wallet = await state.selector.wallet();
      await wallet.signOut();
      state.walletConnection.signOut();
      location.reload();
    },
    async fetchPools({state}) {
      await state.walletConnection.account().viewFunction(
        {
          contractId: CONTRACT_ID,
          methodName: 'get_pools',
          args: {
          },
        }
      ).then((res) => {
        state.pools = res
        state.loaded.pools = true
      })
    },
    async processTokenMetadata({state}) {
      const tokens = []
      for (let i = 0; i < state.pools.length; i++) {
        const pool = state.pools[i]
        if (tokens.findIndex((unit) => {
          unit.token === pool.token0
        }) === -1) {
          tokens.push({
            token: pool.token0,
          })
        }
        if (tokens.findIndex((unit) => {
          unit.token === pool.token1
        }) === -1) {
          tokens.push({
            token: pool.token1,
          })
        }
      }
      const tokensWithMetadata = []
      for (let i = 0; i < tokens.length; i++) {
        await state.walletConnection.account().viewFunction(
          {
            contractId: tokens[i].token,
            methodName: 'ft_metadata',
            args: {
            }
          }
        ).then((res) => {
          if (tokens[i].token !== 'wrap.testnet') {
            tokensWithMetadata[tokens[i].token] = {
              token: tokens[i].token,
              icon: res.icon,
              symbol: res.symbol,
              decimals: res.decimals,
              name: res.name
            }
          } else {
            tokensWithMetadata[tokens[i].token] = {
              token: tokens[i].token,
              icon: "data:image/svg+xml,%3Csvg width='32' height='32' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='12' cy='12' r='11' fill='%23FAFAFA' stroke='%23D5D4D8' stroke-width='2'%3E%3C/circle%3E%3Cpath d='M15.6317 6.60497L13.1233 10.3034C13.0876 10.3567 13.0725 10.421 13.0808 10.4845C13.0892 10.5479 13.1204 10.6063 13.1686 10.6487C13.2169 10.691 13.279 10.7146 13.3435 10.7151C13.4079 10.7155 13.4703 10.6928 13.5192 10.651L15.9883 8.52414C16.0028 8.51128 16.0207 8.50289 16.0399 8.49998C16.0591 8.49707 16.0788 8.49977 16.0964 8.50776C16.1141 8.51574 16.129 8.52867 16.1394 8.54495C16.1498 8.56123 16.1553 8.58017 16.155 8.59945V15.2582C16.155 15.2786 16.1487 15.2985 16.1369 15.3152C16.1251 15.3319 16.1084 15.3446 16.0891 15.3515C16.0698 15.3585 16.0489 15.3594 16.029 15.3541C16.0092 15.3488 15.9915 15.3376 15.9783 15.3219L8.515 6.44938C8.39495 6.3086 8.24548 6.19548 8.07696 6.11788C7.90844 6.04027 7.72492 6.00005 7.53917 6H7.27833C6.9393 6 6.61415 6.13375 6.37442 6.37183C6.13468 6.60991 6 6.93282 6 7.26952V16.6477C6 16.9844 6.13468 17.3073 6.37442 17.5454C6.61415 17.7835 6.9393 17.9172 7.27833 17.9172C7.49693 17.9173 7.71189 17.8617 7.90271 17.7558C8.09353 17.6499 8.25384 17.4972 8.36833 17.3123L10.8767 13.6138C10.9124 13.5605 10.9275 13.4962 10.9192 13.4328C10.9108 13.3693 10.8796 13.311 10.8314 13.2686C10.7831 13.2262 10.721 13.2026 10.6566 13.2022C10.5921 13.2017 10.5297 13.2245 10.4808 13.2662L8.01167 15.3931C7.9972 15.406 7.97927 15.4144 7.96008 15.4173C7.94088 15.4202 7.92125 15.4175 7.90358 15.4095C7.8859 15.4015 7.87095 15.3886 7.86055 15.3723C7.85015 15.356 7.84475 15.3371 7.845 15.3178V8.65738C7.84501 8.63699 7.85133 8.61711 7.86311 8.60041C7.8749 8.58372 7.89157 8.57103 7.91086 8.56407C7.93016 8.55711 7.95114 8.55622 7.97096 8.56151C7.99078 8.5668 8.00849 8.57803 8.02167 8.59366L15.4842 17.4679C15.6042 17.6086 15.7537 17.7218 15.9222 17.7994C16.0907 17.877 16.2742 17.9172 16.46 17.9172H16.7208C16.8888 17.9174 17.0551 17.8846 17.2103 17.8208C17.3655 17.7571 17.5065 17.6636 17.6253 17.5457C17.7441 17.4278 17.8383 17.2878 17.9026 17.1337C17.9669 16.9797 18 16.8145 18 16.6477V7.26952C18 6.93282 17.8653 6.60991 17.6256 6.37183C17.3859 6.13375 17.0607 6 16.7217 6C16.5031 5.99994 16.2881 6.05552 16.0973 6.16143C15.9065 6.26733 15.7462 6.42004 15.6317 6.60497Z' fill='%23D5D4D8'%3E%3C/path%3E%3C/svg%3E",
              symbol: res.symbol,
              decimals: res.decimals,
              name: res.name
            }
          }
        })
      }
      console.log(tokensWithMetadata)
      state.tokens = tokensWithMetadata
      state.loaded.tokens = true
    },
    async processPositions({state}) {
      state.positions = []
      state.userPositions = []
      for (let i = 0; i < state.pools.length; i++) {
        const pool = state.pools[i]
        console.log(pool)
        const newPositions = []
        for (let [key, value] of Object.entries(pool.positions)) {
          value = {
            ...value,
            id: Number(key)
          }
          newPositions.push(value)
        }
        for (let p = 0; p < newPositions.length; p++) {
          // const position = pool.positions[p]
          const position = newPositions[p]
          let token0obj, token1obj
          if (state.tokens[pool.token0]) {
            token0obj = state.tokens[pool.token0]
          }
          if (state.tokens[pool.token1]) {
            token1obj = state.tokens[pool.token1]
          }
          state.positions.push({
            id: position.id,
            poolId: i,
            isActive: position.is_active,
            ownerId: position.owner_id,
            sqrt_lower_bound_price: position.sqrt_lower_bound_price,
            sqrt_upper_bound_price: position.sqrt_upper_bound_price,
            lower_bound_price_decimals: position.sqrt_lower_bound_price * position.sqrt_lower_bound_price * Math.pow(10, token0obj.decimals - token1obj.decimals),
            upper_bound_price_decimals: position.sqrt_upper_bound_price * position.sqrt_upper_bound_price * Math.pow(10, token0obj.decimals - token1obj.decimals),
            tick_lower_bound_price: position.tick_lower_bound_price,
            tick_upper_bound_price: position.tick_upper_bound_price,
            fees0: position.fees_earned_token0 / Math.pow(10, token0obj.decimals),
            fees1: position.fees_earned_token1 / Math.pow(10, token1obj.decimals),
            token0: pool.token0,
            token1: pool.token1,
            token0_real_liquidity: position.token0_locked / Math.pow(10, token0obj.decimals),
            token1_real_liquidity: position.token1_locked / Math.pow(10, token1obj.decimals),
            totalLiquidity: position.liquidity
          })
          if (state.account && position.owner_id === state.account.accountId) {
            state.userPositions.push({
              id: position.id,
              poolId: i,
              isActive: position.is_active,
              ownerId: position.owner_id,
              sqrt_lower_bound_price: position.sqrt_lower_bound_price,
              sqrt_upper_bound_price: position.sqrt_upper_bound_price,
              lower_bound_price_decimals: position.sqrt_lower_bound_price * position.sqrt_lower_bound_price * Math.pow(10, token0obj.decimals - token1obj.decimals),
              upper_bound_price_decimals: position.sqrt_upper_bound_price * position.sqrt_upper_bound_price * Math.pow(10, token0obj.decimals - token1obj.decimals),
              tick_lower_bound_price: position.tick_lower_bound_price,
              tick_upper_bound_price: position.tick_upper_bound_price,
              fees0: position.fees_earned_token0 / Math.pow(10, token0obj.decimals),
              fees1: position.fees_earned_token1 / Math.pow(10, token1obj.decimals),
              token0: pool.token0,
              token1: pool.token1,
              token0_real_liquidity: position.token0_locked / Math.pow(10, token0obj.decimals),
              token1_real_liquidity: position.token1_locked / Math.pow(10, token1obj.decimals),
              totalLiquidity: position.liquidity,
              activeTab: 'in'
            })
          }
        }
      }
      console.log(state.userPositions)
      state.loaded.positions = true
    },
    async fetchCrispContract ({state}) {
      console.log("nearAPI: ", nearAPI)
      const { connect, WalletConnection, Contract } = nearAPI
      console.log("Keystore: ", CONFIG.keyStore)

      state.selector = await setupWalletSelector({
        network: "testnet",
        modules: [
          setupMeteorWallet(),
          setupMyNearWallet(),
          setupNearMobileWallet(),
          setupNearWallet(),
          setupHereWallet(),
        ],
      });
      console.log("Selector: ", state.selector)

      state.modal = setupModal(state.selector, {
        contractId: CONTRACT_ID,
        methodNames: METHOD_NAMES
      });
      state.modal.on("onHide", () => {
        location.reload();
      });

      // connect to NEAR
      state.nearConnection = await connect(CONFIG)
      // create wallet connection
      state.walletConnection = await new WalletConnection(state.nearConnection, 'my-app');

      if (state.selector.isSignedIn()) {
        const wallet = await state.selector.wallet()
        const accounts = await wallet.getAccounts()
        const account_id = accounts[0].accountId

        state.account = await state.nearConnection.account(account_id)
        console.log("Account: ", state.account)
        
        state.crispContract = await new Contract(
          state.account,
          CONTRACT_ID,
          {
            viewMethods: ['get_pools', 'get_balance', 'positions_opened', 'get_max_leverage'],
            changeMethods: ['open_position', 'close_position', 'add_liquidity', 'remove_liquidity', 'swap',/*'swap_in', 'swap_out',*/ 'get_balance_all_tokens', 'storage_deposit', 'ft_transfer_call', 'withdraw', 'get_return', 'get_expense', 'create_reserve', 'create_deposit', 'close_deposit', 'refresh_deposits_growth', 'take_deposit_growth', 'get_account_deposits', 'supply_collateral_and_borrow', 'return_collateral_and_repay', 'get_liquidation_list', 'get_borrow_health_factor', 'liquidate', 'get_borrows_by_account', 'get_liquidation_price'],
            sender: account_id
          }
        )
      } else {
        // console.log('smths wrong')
      }
    },

    // step 1. get all balances of tokens with get_balance_all_tokens() method if there is a contract entity existing and user is signed in using wallet selector
    // step 2. cast a string resolve from get_balance_all_tokens() into an array of objects
    // step 3. call ft_metadata() for each ODD (1st, 3rd, 5th) array index, since every EVEN (2nd, 4th, 6th) index is an amount
    // step 4. 
    async fetchBalances ({state, dispatch}) {
      state.tokensBeingLoaded = true
      if (state.crispContract && state.selector.isSignedIn() /*state.walletConnection.isSignedIn()*/) {
        // console.log('fetching balances for account ' + state.walletConnection.getAccountId())
        const account_id = state.account.accountId
        console.log('fetching balances for account ' + account_id)

        try {
          await state.walletConnection.account().viewFunction(
            {
              contractId: CONTRACT_ID,
              methodName: 'get_balance_all_tokens',
              args: { account_id: account_id
              },
            }
          )
          .then(async (resolve) => {
            console.log(resolve)
            const formatedArr = []
            const balanceObjects = []
            if (resolve) {
              // We have a string instead of array of objects. So, first we split it by using : and , symbols as separators
              const arr = resolve.split(/[:,,]/)
              // Resulting array units might still have empty spaces in them, so we remove those spaces
              arr.forEach((unit) => {
                const newUnit = unit.replace(/ /g, '')
                if (newUnit) formatedArr.push(newUnit)
              })
              // At this point we have an array which looks like
              // [token, amount, token, amount]
              // We call ft_metadata() function for each odd (1st, 3rd, 5th ..) array index
              for (let i = 0; i < formatedArr.length; i++) {
                await state.walletConnection.account().viewFunction({
                  contractId: formatedArr[i],
                  methodName: 'ft_metadata',
                  args: {
                    account_id: account_id
                  },
                },
                account_id
                ).then((res) => {
                  if (formatedArr[i] !== 'wrap.testnet') {
                    balanceObjects.push({
                      token: formatedArr[i],
                      amount: removeDecimals(formatedArr[i+1], res),
                      icon: res.icon,
                      symbol: res.symbol,
                      decimals: res.decimals,
                      name: res.name
                    })
                  } else {
                    balanceObjects.push({
                      token: formatedArr[i],
                      amount: removeDecimals(formatedArr[i+1], res),
                      icon: "data:image/svg+xml,%3Csvg width='32' height='32' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='12' cy='12' r='11' fill='%23FAFAFA' stroke='%23D5D4D8' stroke-width='2'%3E%3C/circle%3E%3Cpath d='M15.6317 6.60497L13.1233 10.3034C13.0876 10.3567 13.0725 10.421 13.0808 10.4845C13.0892 10.5479 13.1204 10.6063 13.1686 10.6487C13.2169 10.691 13.279 10.7146 13.3435 10.7151C13.4079 10.7155 13.4703 10.6928 13.5192 10.651L15.9883 8.52414C16.0028 8.51128 16.0207 8.50289 16.0399 8.49998C16.0591 8.49707 16.0788 8.49977 16.0964 8.50776C16.1141 8.51574 16.129 8.52867 16.1394 8.54495C16.1498 8.56123 16.1553 8.58017 16.155 8.59945V15.2582C16.155 15.2786 16.1487 15.2985 16.1369 15.3152C16.1251 15.3319 16.1084 15.3446 16.0891 15.3515C16.0698 15.3585 16.0489 15.3594 16.029 15.3541C16.0092 15.3488 15.9915 15.3376 15.9783 15.3219L8.515 6.44938C8.39495 6.3086 8.24548 6.19548 8.07696 6.11788C7.90844 6.04027 7.72492 6.00005 7.53917 6H7.27833C6.9393 6 6.61415 6.13375 6.37442 6.37183C6.13468 6.60991 6 6.93282 6 7.26952V16.6477C6 16.9844 6.13468 17.3073 6.37442 17.5454C6.61415 17.7835 6.9393 17.9172 7.27833 17.9172C7.49693 17.9173 7.71189 17.8617 7.90271 17.7558C8.09353 17.6499 8.25384 17.4972 8.36833 17.3123L10.8767 13.6138C10.9124 13.5605 10.9275 13.4962 10.9192 13.4328C10.9108 13.3693 10.8796 13.311 10.8314 13.2686C10.7831 13.2262 10.721 13.2026 10.6566 13.2022C10.5921 13.2017 10.5297 13.2245 10.4808 13.2662L8.01167 15.3931C7.9972 15.406 7.97927 15.4144 7.96008 15.4173C7.94088 15.4202 7.92125 15.4175 7.90358 15.4095C7.8859 15.4015 7.87095 15.3886 7.86055 15.3723C7.85015 15.356 7.84475 15.3371 7.845 15.3178V8.65738C7.84501 8.63699 7.85133 8.61711 7.86311 8.60041C7.8749 8.58372 7.89157 8.57103 7.91086 8.56407C7.93016 8.55711 7.95114 8.55622 7.97096 8.56151C7.99078 8.5668 8.00849 8.57803 8.02167 8.59366L15.4842 17.4679C15.6042 17.6086 15.7537 17.7218 15.9222 17.7994C16.0907 17.877 16.2742 17.9172 16.46 17.9172H16.7208C16.8888 17.9174 17.0551 17.8846 17.2103 17.8208C17.3655 17.7571 17.5065 17.6636 17.6253 17.5457C17.7441 17.4278 17.8383 17.2878 17.9026 17.1337C17.9669 16.9797 18 16.8145 18 16.6477V7.26952C18 6.93282 17.8653 6.60991 17.6256 6.37183C17.3859 6.13375 17.0607 6 16.7217 6C16.5031 5.99994 16.2881 6.05552 16.0973 6.16143C15.9065 6.26733 15.7462 6.42004 15.6317 6.60497Z' fill='%23D5D4D8'%3E%3C/path%3E%3C/svg%3E",
                      symbol: res.symbol,
                      decimals: res.decimals,
                      name: res.name
                    })
                  }
                })
                // 2nd increment is placed inside the cycle body so this only affects odd array indexes
                i++
              }
            }
            // if (!balanceObjects[0]) {
            for (let i = 0; i < SWAP_TOKENS.length; i++) {
              const existingBalanceOfThisToken = balanceObjects.find((item) => item.token === SWAP_TOKENS[i].token)
              if (!existingBalanceOfThisToken) {
                balanceObjects.push(SWAP_TOKENS[i])
              }
            }
            for (let i = 0; i < balanceObjects.length; i++) {
              if (('amount' in balanceObjects[i]) === false) {
                await state.walletConnection.account().viewFunction(
                  {
                    contractId: balanceObjects[i].token,
                    methodName: 'ft_metadata',
                    args: {
                      account_id: account_id
                    },
                  },
                account_id
                ).then((res) => {
                  balanceObjects[i].amount = 0
                  balanceObjects[i].decimals = res.decimals
                  balanceObjects[i].name = res.name
                  if (balanceObjects[i].token == 'wrap.testnet') {
                    balanceObjects[i].icon = "data:image/svg+xml,%3Csvg width='32' height='32' viewBox='0 0 24 24' fill='none' xmlns='http://www.w3.org/2000/svg'%3E%3Ccircle cx='12' cy='12' r='11' fill='%23FAFAFA' stroke='%23D5D4D8' stroke-width='2'%3E%3C/circle%3E%3Cpath d='M15.6317 6.60497L13.1233 10.3034C13.0876 10.3567 13.0725 10.421 13.0808 10.4845C13.0892 10.5479 13.1204 10.6063 13.1686 10.6487C13.2169 10.691 13.279 10.7146 13.3435 10.7151C13.4079 10.7155 13.4703 10.6928 13.5192 10.651L15.9883 8.52414C16.0028 8.51128 16.0207 8.50289 16.0399 8.49998C16.0591 8.49707 16.0788 8.49977 16.0964 8.50776C16.1141 8.51574 16.129 8.52867 16.1394 8.54495C16.1498 8.56123 16.1553 8.58017 16.155 8.59945V15.2582C16.155 15.2786 16.1487 15.2985 16.1369 15.3152C16.1251 15.3319 16.1084 15.3446 16.0891 15.3515C16.0698 15.3585 16.0489 15.3594 16.029 15.3541C16.0092 15.3488 15.9915 15.3376 15.9783 15.3219L8.515 6.44938C8.39495 6.3086 8.24548 6.19548 8.07696 6.11788C7.90844 6.04027 7.72492 6.00005 7.53917 6H7.27833C6.9393 6 6.61415 6.13375 6.37442 6.37183C6.13468 6.60991 6 6.93282 6 7.26952V16.6477C6 16.9844 6.13468 17.3073 6.37442 17.5454C6.61415 17.7835 6.9393 17.9172 7.27833 17.9172C7.49693 17.9173 7.71189 17.8617 7.90271 17.7558C8.09353 17.6499 8.25384 17.4972 8.36833 17.3123L10.8767 13.6138C10.9124 13.5605 10.9275 13.4962 10.9192 13.4328C10.9108 13.3693 10.8796 13.311 10.8314 13.2686C10.7831 13.2262 10.721 13.2026 10.6566 13.2022C10.5921 13.2017 10.5297 13.2245 10.4808 13.2662L8.01167 15.3931C7.9972 15.406 7.97927 15.4144 7.96008 15.4173C7.94088 15.4202 7.92125 15.4175 7.90358 15.4095C7.8859 15.4015 7.87095 15.3886 7.86055 15.3723C7.85015 15.356 7.84475 15.3371 7.845 15.3178V8.65738C7.84501 8.63699 7.85133 8.61711 7.86311 8.60041C7.8749 8.58372 7.89157 8.57103 7.91086 8.56407C7.93016 8.55711 7.95114 8.55622 7.97096 8.56151C7.99078 8.5668 8.00849 8.57803 8.02167 8.59366L15.4842 17.4679C15.6042 17.6086 15.7537 17.7218 15.9222 17.7994C16.0907 17.877 16.2742 17.9172 16.46 17.9172H16.7208C16.8888 17.9174 17.0551 17.8846 17.2103 17.8208C17.3655 17.7571 17.5065 17.6636 17.6253 17.5457C17.7441 17.4278 17.8383 17.2878 17.9026 17.1337C17.9669 16.9797 18 16.8145 18 16.6477V7.26952C18 6.93282 17.8653 6.60991 17.6256 6.37183C17.3859 6.13375 17.0607 6 16.7217 6C16.5031 5.99994 16.2881 6.05552 16.0973 6.16143C15.9065 6.26733 15.7462 6.42004 15.6317 6.60497Z' fill='%23D5D4D8'%3E%3C/path%3E%3C/svg%3E"
                  } else {
                    balanceObjects[i].icon = res.icon
                  }
                })
              }
            }
            // }
            for (let i = 0; i < balanceObjects.length; i++) {
              try {
                await state.walletConnection.account().viewFunction(
                  {
                      contractId: balanceObjects[i].token,
                      methodName: 'ft_balance_of',
                      args: {
                          account_id: state.account.accountId
                      }
                  }
                ).then((res) => {
                  balanceObjects[i].nearBalance = res / Math.pow(10, balanceObjects[i].decimals)
                })
              } catch (e) {
                console.log(e)
                await dispatch('signOut', state)
              }
            }
            console.log("balanceObjects final: ", balanceObjects)
            state.tokenBalances = balanceObjects
            state.loaded.balances = true
          })
        } catch (error) {
          console.log(error)
          console.log(dispatch)
          await dispatch('signOut', state)
        }
      }
      state.tokensBeingLoaded = false
    },
    async fetchDeposits ({state}) {
      if (state.crispContract && state.selector.isSignedIn()) {
        try {
          await state.walletConnection.account().viewFunction(
            {
              contractId: CONTRACT_ID,
              methodName: 'get_account_deposits',
              args: {
                account_id: state.account.accountId
              },
            }
          ).then((res) => {
            console.log(res)
            const depositsArray = Object.entries(res)
            const userDeposits = []
            for (let i = 0; i < depositsArray.length; i++) {
              console.log(depositsArray[i])
              // console.log(toFixed(depositsArray[i][1].amount))
              const asset = depositsArray[i][1].asset
              const amount = toFixed(depositsArray[i][1].amount)
              const apr = depositsArray[i][1].apr
              const id = depositsArray[i][0]
          
              userDeposits.push({
                asset: asset,
                amount: amount,
                apr: apr,
                id: id
              })
            }
            console.log(userDeposits)
            state.userDeposits = userDeposits
          })
        } catch (e) {
          console.log(e)
        }
        state.loaded.deposits = true
      }
    },
    async fetchBorrows ({state}) {
      if (state.crispContract && state.selector.isSignedIn()) {
        await state.walletConnection.account().viewFunction(
          {
            contractId: CONTRACT_ID,
            methodName: 'get_borrows_by_account',
            args: {
              account_id: state.account.accountId
            },
          }
        ).then((res) => { 
          if (res && res[0]) {
            console.log(res)
            console.log(state.userPositions)
            for (let i = 0; i < res.length; i++) {
              const borrow = res[i]
              const pos = state.userPositions.find((element) => Number(element.id) === Number(borrow.position_id) && Number(element.poolId) == Number(borrow.pool_id))
              if (pos) {
                if (state.tokens[borrow.asset0]) {
                  const tokenObj = state.tokens[borrow.asset0]
                  const tokenObj2 = state.tokens[borrow.asset1]

                  pos.leverageAsset = tokenObj
                  pos.leverageAsset2 = tokenObj2
                  pos.isBorrowed = true
                  pos.borrowed0 = borrow.borrowed0 / Math.pow(10, tokenObj.decimals)
                  pos.borrowed1 = borrow.borrowed1 / Math.pow(10, tokenObj2.decimals)
                  // pos.collateral = borrow.collateral / Math.pow(10, tokenObj.decimals)
                  pos.leverage = borrow.leverage
                  pos.borrowId = borrow.id

                  console.log(borrow)

                  // pos.liquidation_price = borrow.liquidation_price * Math.pow(10, tokenObj2.decimals - tokenObj.decimals) * pos.leverage
                  pos.liquidation_price0 = borrow.liquidation_price[0] * Math.pow(10, tokenObj.decimals - tokenObj2.decimals)
                  pos.liquidation_price1 = borrow.liquidation_price[1] * Math.pow(10, tokenObj.decimals - tokenObj2.decimals)

                  pos.apr = borrow.apr
                }
              }
            }
          }
        })
      }
    }
  },
  modules: {
  }
})

'''
'''--- src/utils/format.js ---
import * as nearAPI from "near-api-js"
import { ethers } from "ethers"

const { utils } = nearAPI

export function addDecimals(amount, tokenObj) {
    let resolve
    if (tokenObj.symbol === 'wNEAR') {
        resolve = utils.format.parseNearAmount(amount.toString())
    } else {
        resolve = ethers.parseUnits(Number(amount).toFixed(6), tokenObj.decimals) // amount * Math.pow(10, tokenObj.decimals)
    }
    return resolve.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })
}

export function removeDecimals(amount, tokenObj) {
    let resolve
    if (tokenObj.symbol === 'wNEAR') {
        resolve = utils.format.formatNearAmount(amount.toString())
    } else {
        resolve = ethers.formatUnits(amount.toString(), tokenObj.decimals)
    }
    console.log(tokenObj.symbol, resolve)
    return resolve.toLocaleString('en-US', { useGrouping: false, maximumFractionDigits: 20 })
}

// export function addDecimalsToPrice(amount, decimals) {
//     const resolve = ethers.formatUnits(amount.toString(), decimals)
//     return resolve
// }
'''
'''--- src/utils/index.js ---
import * as nearAPI from "near-api-js"

const { keyStores } = nearAPI

export const CONFIG = {
    networkId: "testnet",
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://g.w.lavanet.xyz:443/gateway/neart/rpc-http/975c3a792300f0e7086c7ba824aca00b",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
}
'''
'''--- src/utils/localStorage.js ---
function getStorageItem (key) {
  try {
    const serializedData = localStorage.getItem(key)
    if (serializedData === null) {
      return undefined
    }

    return JSON.parse(serializedData)
  } catch (_) {
    return undefined
  }
}

function setStorageItem (key, value) {
  try {
    const serializedData = JSON.stringify(value)
    localStorage.setItem(key, serializedData)
  } catch (err) {
    console.warn(err)
  }
}

function removeStorageItem (key) {
  try {
    localStorage.removeItem(key)
  } catch (err) {
    console.warn(err)
  }
}
export { getStorageItem, setStorageItem, removeStorageItem }

'''
'''--- src/utils/number.js ---
export function isNumber(evt) {
  var charCode = (evt.which) ? evt.which : evt.keyCode
  if ((charCode > 31 && (charCode < 48 || charCode > 57)) && charCode !== 46) {
    evt.preventDefault()
    return false
  } else {
    return true
  }
}

export function toFixed(x) {
  if(!x.toString().includes('e')) return x
  if (Math.abs(x) < 1.0) {
    let e = parseInt(x.toString().split('e-')[1]);
    if (e) {
        x *= Math.pow(10,e-1);
        x = '0.' + (new Array(e)).join('0') + x.toString().substring(2);
    }
  } else {
    let e = parseInt(x.toString().split('+')[1]);
    if (e > 20) {
        e -= 20;
        x /= Math.pow(10,e);
        x += (new Array(e+1)).join('0');
    }
  }
  return x;
}
'''
'''--- src/utils/tick.js ---
function sqrt_price_to_tick(sqrt_price) {
    return Math.floor(2 * Math.log(sqrt_price) / Math.log(1.0001))
}

function tick_to_sqrt_price(tick) {
    return Math.pow(1.0001, tick / 2)
}

export { sqrt_price_to_tick, tick_to_sqrt_price }
'''
'''--- vue.config.js ---
/*eslint-disable*/
//prevents class name uglyfying
const path = require('path');
const NodePolyfillPlugin = require("node-polyfill-webpack-plugin")
module.exports = {
    chainWebpack: config => {
        config.optimization
            .minimizer('terser')
            .tap(args => {
                const { terserOptions } = args[0]
                terserOptions.keep_classnames = true
                terserOptions.keep_fnames = true
                return args
            })
            config.module
            .rule('supportChaining')
            .test(/\.js$/)
              .include
                .add(path.resolve('node_modules/@lifi'))
                .add(path.resolve('node_modules/microdiff'))
                .end()
            .use('babel-loader')
              .loader('babel-loader')
              .tap(options => ({ ...options, 
                plugins : ['@babel/plugin-proposal-optional-chaining']
              }))
              .end()
    },
    transpileDependencies: [
        '@tanstack'
    ],
    productionSourceMap: false,
    configureWebpack: {
      plugins: [
        new NodePolyfillPlugin()
      ]
    }
}
'''