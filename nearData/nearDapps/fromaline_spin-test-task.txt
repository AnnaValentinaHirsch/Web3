*GitHub Repository "fromaline/spin-test-task"*

'''--- README.md ---
# Test task for Spin

## Install dependencies

```sh
yarn install
```

## Run the project in development mode

```sh
yarn dev
```

It's a parcel-based build, so open [http://localhost:1234/](http://localhost:1234/)

### Todo
- [x] Figure out how to format exponential numbers properly
'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/index.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
// @nearfile

'''
'''--- assembly/model.ts ---
// @nearfile

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- package.json ---
{
  "name": "spin-test-task",
  "version": "1.0.0",
  "description": "test task for Spin",
  "source": "src/index.html",
  "browserslist": "> 0.5%, last 2 versions, not dead",
  "scripts": {
    "build": "asb --verbose",
    "dev": "yarn build && yarn dev:deploy:contract && parcel src/index.html",
    "dev:deploy:contract": "near dev-deploy --wasmFile=\"./out/main.wasm\" && echo \"# This file used by parcel\nCONTRACT_NAME=$(cat neardev/dev-account)\" > .env.local"
  },
  "author": "Nikita Grechino <grechino@protonmail.com> (https://www.fromaline.com/)",
  "license": "ISC",
  "devDependencies": {
    "@parcel/transformer-sass": "^2.3.2",
    "@types/node": "^17.0.21",
    "@typescript-eslint/eslint-plugin": "^5.13.0",
    "@typescript-eslint/parser": "^5.13.0",
    "asbuild": "^0.2.0",
    "buffer": "^6.0.3",
    "eslint": "^8.10.0",
    "eslint-config-airbnb-base": "^15.0.0",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-import": "^2.25.4",
    "eslint-plugin-prettier": "^4.0.0",
    "near-cli": "^3.2.0",
    "near-sdk-as": "^3.2.3",
    "parcel": "^2.3.2",
    "prettier": "^2.5.1",
    "process": "^0.11.10",
    "typescript": "^4.6.2"
  },
  "dependencies": {
    "near-api-js": "^0.43.1"
  }
}

'''
'''--- src/constants/config.ts ---
const { CONTRACT_NAME } = process.env;

const config = {
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME || 'sample-contract-name',
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
};

export default config;

'''
'''--- src/dashboard/balances/index.ts ---
import getTable from '../../utils/getTable';

const $balances = document.createElement('div');
$balances.classList.add('balances');

const $title = document.createElement('h4');
$title.textContent = 'Balances';

$balances.append($title);

$balances.addEventListener('mounted', () => {
  const $table = getTable([
    ['Asset', 'Wallet'],
    ['NEAR', window.nearAmount],
  ]);

  $balances.append($table);
});

export default $balances;

'''
'''--- src/dashboard/header.ts ---
const $header = document.createElement('header');
$header.classList.add('header');

// #region sign out button
const $button = document.createElement('button');
$button.classList.add('btn', 'btn--sm', 'btn--tertiary');
$button.textContent = 'Sign Out';
$button.addEventListener('click', () => {
  window.walletAccount.signOut();
  window.location.replace(window.location.origin + window.location.pathname);
});

$header.append($button);
// #endregion

$header.addEventListener('mounted', () => {
  const $p = document.createElement('p');
  $p.textContent = window.accountId;

  $header.prepend($p);
});

export default $header;

'''
'''--- src/dashboard/index.ts ---
import $balances from './balances';
import $header from './header';
import $orderBook from './orderBook';

const $dashboard = document.createElement('div');
$dashboard.classList.add('dashboard', 'container');

const $layout = document.createElement('div');
$layout.classList.add('dashboard__layout');

$layout.append($orderBook, $balances);

$dashboard.append($header, $layout);

$dashboard.addEventListener('mounted', () => {
  $header.dispatchEvent(new Event('mounted'));
  $balances.dispatchEvent(new Event('mounted'));
  $orderBook.dispatchEvent(new Event('mounted'));
});

export default $dashboard;

'''
'''--- src/dashboard/orderBook/getOrderTable.ts ---
import { NEAR_NOMINATION_EXP } from 'near-api-js/lib/utils/format';
import getTable from '../../utils/getTable';

const exponentialToReadable = (value: number) =>
  value / 10 ** NEAR_NOMINATION_EXP;

const toFloat = (num: number, fractionDigits = 4) =>
  parseFloat(num.toString()).toFixed(fractionDigits);

const formatOrder = ({ price, quantity }: Order) => {
  const readablePrice = exponentialToReadable(price);
  const readableQuantity = exponentialToReadable(quantity);
  const total = readablePrice * readableQuantity;

  return [toFloat(readablePrice), toFloat(readableQuantity), toFloat(total, 2)];
};

const getOrderTable = (
  markets: Markets,
  baseTicker: string | undefined,
  quoteTicker: string | undefined
) => {
  const askOrders = markets.ask_orders.reverse().map((order) => {
    return formatOrder(order);
  });

  const bidOrders = markets.bid_orders.map((order) => {
    return formatOrder(order);
  });

  const $table = getTable([
    [`Price (${baseTicker})`, `Size (${quoteTicker})`, 'Total'],
    ...askOrders,
    ...bidOrders,
  ]);

  return $table;
};

export default getOrderTable;

'''
'''--- src/dashboard/orderBook/getSelect.ts ---
const getSelect = (tickers: Ticker[]): HTMLSelectElement => {
  const $select = document.createElement('select');

  tickers.forEach(({ id, base, quote }, index) => {
    const $option = document.createElement('option');

    $option.textContent = `${base.ticker}/${quote.ticker}`;
    $option.value = id.toString();

    if (index === 0) {
      $option.setAttribute('selected', 'true');
    }

    $select.append($option);
  });

  return $select;
};

export default getSelect;

'''
'''--- src/dashboard/orderBook/index.ts ---
import getOrderTable from './getOrderTable';
import getSelect from './getSelect';

const $orderBook = document.createElement('div');
$orderBook.classList.add('order-book');

const $title = document.createElement('h4');
$title.textContent = 'Order Book';

$orderBook.append($title);

const $tableWrapper = document.createElement('div');
$tableWrapper.classList.add('table-wrapper');

$orderBook.addEventListener('mounted', async () => {
  // #region initial initialization of order table
  const tickers = await window.contract.markets({});

  const $select = getSelect(tickers);

  let markets = await window.contract.view_market({
    market_id: tickers[0].id,
  });

  let $orderTable = getOrderTable(
    markets,
    tickers[0].base.ticker,
    tickers[0].quote.ticker
  );

  $tableWrapper.append($orderTable);

  $orderBook.append($select, $tableWrapper);
  // #endregion

  $select.addEventListener('change', async (e) => {
    const $target = e.target as HTMLSelectElement;
    const id = +$target.value;

    markets = await window.contract.view_market({
      market_id: id,
    });

    const selectedTicker = tickers.find((ticker) => ticker.id === id);

    $orderTable.remove();

    $orderTable = getOrderTable(
      markets,
      selectedTicker?.base.ticker,
      selectedTicker?.quote.ticker
    );

    $tableWrapper.appendChild($orderTable);
  });
});

export default $orderBook;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Spin Test Task</title>
    <link rel="stylesheet" href="./style.scss" />
    <script type="module" src="./main.ts" defer></script>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

'''
'''--- src/main.ts ---
import $dashboard from './dashboard';
import $singIn from './signIn';
import initContract from './utils/initContract';

const app = document.querySelector('#root');

window.nearInitPromise = initContract()
  .then(() => {
    const isSignedIn = window.walletAccount.isSignedIn();

    if (isSignedIn) {
      app?.append($dashboard);
      $dashboard.dispatchEvent(new Event('mounted'));
    } else {
      app?.append($singIn);
    }
  })
  // eslint-disable-next-line no-console
  .catch(console.error);

'''
'''--- src/signIn/form.ts ---
import nearConfig from '../constants/config';

const $form = document.createElement('form');
$form.classList.add('form');

// #region sign in button
const $button = document.createElement('button');
$button.setAttribute('type', 'submit');
$button.classList.add('btn');
$button.textContent = 'Sign In';

$form.append($button);
// #endregion

$form.addEventListener('submit', (e) => {
  e.preventDefault();

  window.walletAccount.requestSignIn(
    nearConfig.contractName,
    'Account Balance'
  );
});

export default $form;

'''
'''--- src/signIn/index.ts ---
import $form from './form';

const $singIn = document.createElement('div');
$singIn.classList.add('sign-in');

const $title = document.createElement('h1');
$title.textContent = 'Connect to NEAR';

$singIn.append($title, $form);

export default $singIn;

'''
'''--- src/typings/window.d.ts ---
interface Ticker {
  id: number;
  base: {
    ticker: string;
    decimal: number;
    address: string;
  };
  quote: {
    ticker: string;
    decimal: number;
    address: string;
  };
  fee: number;
}

interface Order {
  price: number;
  quantity: number;
}

interface Markets {
  ask_orders: Order[];
  bid_orders: Order[];
}

interface CustomContract {
  markets: (emptyObj: Record<string, never>) => Ticker[];
  view_market: ({ market_id: number }) => Markets;
}

interface Window {
  walletAccount: import('near-api-js').WalletAccount;
  nearConfig: import('near-api-js').NearConfig;
  near: import('near-api-js').Near;
  contract: CustomContract;
  accountId: string;
  nearInitPromise: Promise<void>;
  nearAmount: string;
}

'''
'''--- src/utils/getTable.ts ---
const getTable = (
  tableData: string[][],
  withTableHeader = true
): HTMLTableElement => {
  const $table = document.createElement('table');
  const $thead = document.createElement('thead');
  const $tbody = document.createElement('tbody');

  tableData.forEach((row, index) => {
    if (withTableHeader && index === 0) {
      // #region thead
      const $trInThead = document.createElement('tr');

      row.forEach((cell) => {
        const $th = document.createElement('th');
        $th.textContent = cell;

        $trInThead.append($th);
      });

      $thead.append($trInThead);

      $table.append($thead);
      // #endregion
    } else {
      // #region tbody
      const $trInBody = document.createElement('tr');

      row.forEach((cell) => {
        const $td = document.createElement('td');

        $td.textContent = cell;

        $trInBody.append($td);
      });

      $tbody.append($trInBody);

      $table.append($tbody);
      // #endregion
    }
  });

  $table.append($thead, $tbody);

  return $table;
};

export default getTable;

'''
'''--- src/utils/initContract.ts ---
import * as nearAPI from 'near-api-js';
import { formatNearAmount } from 'near-api-js/lib/utils/format';

import nearConfig from '../constants/config';

const initContract = async () => {
  const near = await nearAPI.connect({
    deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() },
    ...nearConfig,
  });
  const walletAccount = new nearAPI.WalletAccount(near, null);
  const accountId = walletAccount.getAccountId();

  if (accountId) {
    const account = await near.account(accountId);
    const nearAmount = formatNearAmount(
      await (
        await account.getAccountBalance()
      ).total,
      3
    );

    window.nearAmount = nearAmount;

    const contract = new nearAPI.Contract(account, 'app_2.spin_swap.testnet', {
      viewMethods: ['markets', 'view_market'],
      changeMethods: [],
    });

    window.contract = contract as any as CustomContract;
  }

  window.near = near;
  window.walletAccount = walletAccount;
  window.accountId = accountId;
};

export default initContract;

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    /* Visit https://aka.ms/tsconfig.json to read more about this file */
    /* Projects */
    // "incremental": true,                              /* Enable incremental compilation */
    // "composite": true,                                /* Enable constraints that allow a TypeScript project to be used with project references. */
    // "tsBuildInfoFile": "./",                          /* Specify the folder for .tsbuildinfo incremental compilation files. */
    // "disableSourceOfProjectReferenceRedirect": true,  /* Disable preferring source files instead of declaration files when referencing composite projects */
    // "disableSolutionSearching": true,                 /* Opt a project out of multi-project reference checking when editing. */
    // "disableReferencedProjectLoad": true,             /* Reduce the number of projects loaded automatically by TypeScript. */
    /* Language and Environment */
    "target": "es2021", /* Set the JavaScript language version for emitted JavaScript and include compatible library declarations. */
    // "lib": [],                                        /* Specify a set of bundled library declaration files that describe the target runtime environment. */
    // "jsx": "preserve",                                /* Specify what JSX code is generated. */
    // "experimentalDecorators": true,                   /* Enable experimental support for TC39 stage 2 draft decorators. */
    // "emitDecoratorMetadata": true,                    /* Emit design-type metadata for decorated declarations in source files. */
    // "jsxFactory": "",                                 /* Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h' */
    // "jsxFragmentFactory": "",                         /* Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'. */
    // "jsxImportSource": "",                            /* Specify module specifier used to import the JSX factory functions when using `jsx: react-jsx*`.` */
    // "reactNamespace": "",                             /* Specify the object invoked for `createElement`. This only applies when targeting `react` JSX emit. */
    // "noLib": true,                                    /* Disable including any library files, including the default lib.d.ts. */
    // "useDefineForClassFields": true,                  /* Emit ECMAScript-standard-compliant class fields. */
    /* Modules */
    "module": "commonjs", /* Specify what module code is generated. */
    // "rootDir": "./",                                  /* Specify the root folder within your source files. */
    // "moduleResolution": "node",                       /* Specify how TypeScript looks up a file from a given module specifier. */
    // "baseUrl": "./",                                  /* Specify the base directory to resolve non-relative module names. */
    // "paths": {},                                      /* Specify a set of entries that re-map imports to additional lookup locations. */
    // "rootDirs": [],                                   /* Allow multiple folders to be treated as one when resolving modules. */
    "typeRoots": [
      "./src/typings"
    ], /* Specify multiple folders that act like `./node_modules/@types`. */
    // "types": [],                                      /* Specify type package names to be included without being referenced in a source file. */
    // "allowUmdGlobalAccess": true,                     /* Allow accessing UMD globals from modules. */
    // "resolveJsonModule": true,                        /* Enable importing .json files */
    // "noResolve": true,                                /* Disallow `import`s, `require`s or `<reference>`s from expanding the number of files TypeScript should add to a project. */
    /* JavaScript Support */
    // "allowJs": true,                                  /* Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files. */
    // "checkJs": true,                                  /* Enable error reporting in type-checked JavaScript files. */
    // "maxNodeModuleJsDepth": 1,                        /* Specify the maximum folder depth used for checking JavaScript files from `node_modules`. Only applicable with `allowJs`. */
    /* Emit */
    // "declaration": true,                              /* Generate .d.ts files from TypeScript and JavaScript files in your project. */
    // "declarationMap": true,                           /* Create sourcemaps for d.ts files. */
    // "emitDeclarationOnly": true,                      /* Only output d.ts files and not JavaScript files. */
    // "sourceMap": true,                                /* Create source map files for emitted JavaScript files. */
    // "outFile": "./",                                  /* Specify a file that bundles all outputs into one JavaScript file. If `declaration` is true, also designates a file that bundles all .d.ts output. */
    // "outDir": "./",                                   /* Specify an output folder for all emitted files. */
    // "removeComments": true,                           /* Disable emitting comments. */
    // "noEmit": true,                                   /* Disable emitting files from a compilation. */
    // "importHelpers": true,                            /* Allow importing helper functions from tslib once per project, instead of including them per-file. */
    // "importsNotUsedAsValues": "remove",               /* Specify emit/checking behavior for imports that are only used for types */
    // "downlevelIteration": true,                       /* Emit more compliant, but verbose and less performant JavaScript for iteration. */
    // "sourceRoot": "",                                 /* Specify the root path for debuggers to find the reference source code. */
    // "mapRoot": "",                                    /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,                          /* Include sourcemap files inside the emitted JavaScript. */
    // "inlineSources": true,                            /* Include source code in the sourcemaps inside the emitted JavaScript. */
    // "emitBOM": true,                                  /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */
    // "newLine": "crlf",                                /* Set the newline character for emitting files. */
    // "stripInternal": true,                            /* Disable emitting declarations that have `@internal` in their JSDoc comments. */
    // "noEmitHelpers": true,                            /* Disable generating custom helper functions like `__extends` in compiled output. */
    // "noEmitOnError": true,                            /* Disable emitting files if any type checking errors are reported. */
    // "preserveConstEnums": true,                       /* Disable erasing `const enum` declarations in generated code. */
    // "declarationDir": "./",                           /* Specify the output directory for generated declaration files. */
    // "preserveValueImports": true,                     /* Preserve unused imported values in the JavaScript output that would otherwise be removed. */
    /* Interop Constraints */
    // "isolatedModules": true,                          /* Ensure that each file can be safely transpiled without relying on other imports. */
    // "allowSyntheticDefaultImports": true,             /* Allow 'import x from y' when a module doesn't have a default export. */
    "esModuleInterop": true, /* Emit additional JavaScript to ease support for importing CommonJS modules. This enables `allowSyntheticDefaultImports` for type compatibility. */
    // "preserveSymlinks": true,                         /* Disable resolving symlinks to their realpath. This correlates to the same flag in node. */
    "forceConsistentCasingInFileNames": true, /* Ensure that casing is correct in imports. */
    /* Type Checking */
    "strict": true, /* Enable all strict type-checking options. */
    // "noImplicitAny": true,                            /* Enable error reporting for expressions and declarations with an implied `any` type.. */
    // "strictNullChecks": true,                         /* When type checking, take into account `null` and `undefined`. */
    // "strictFunctionTypes": true,                      /* When assigning functions, check to ensure parameters and the return values are subtype-compatible. */
    // "strictBindCallApply": true,                      /* Check that the arguments for `bind`, `call`, and `apply` methods match the original function. */
    // "strictPropertyInitialization": true,             /* Check for class properties that are declared but not set in the constructor. */
    // "noImplicitThis": true,                           /* Enable error reporting when `this` is given the type `any`. */
    // "useUnknownInCatchVariables": true,               /* Type catch clause variables as 'unknown' instead of 'any'. */
    // "alwaysStrict": true,                             /* Ensure 'use strict' is always emitted. */
    // "noUnusedLocals": true,                           /* Enable error reporting when a local variables aren't read. */
    // "noUnusedParameters": true,                       /* Raise an error when a function parameter isn't read */
    // "exactOptionalPropertyTypes": true,               /* Interpret optional property types as written, rather than adding 'undefined'. */
    // "noImplicitReturns": true,                        /* Enable error reporting for codepaths that do not explicitly return in a function. */
    // "noFallthroughCasesInSwitch": true,               /* Enable error reporting for fallthrough cases in switch statements. */
    // "noUncheckedIndexedAccess": true,                 /* Include 'undefined' in index signature results */
    // "noImplicitOverride": true,                       /* Ensure overriding members in derived classes are marked with an override modifier. */
    // "noPropertyAccessFromIndexSignature": true,       /* Enforces using indexed accessors for keys declared using an indexed type */
    // "allowUnusedLabels": true,                        /* Disable error reporting for unused labels. */
    // "allowUnreachableCode": true,                     /* Disable error reporting for unreachable code. */
    /* Completeness */
    // "skipDefaultLibCheck": true,                      /* Skip type checking .d.ts files that are included with TypeScript. */
    "skipLibCheck": true /* Skip type checking all .d.ts files. */
  },
  "include": [
    "src/**/*",
  ],
  "exclude": [
    "node_modules"
  ]
}
'''