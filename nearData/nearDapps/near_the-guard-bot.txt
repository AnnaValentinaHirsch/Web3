*GitHub Repository "near/the-guard-bot"*

'''--- .circleci/config.yml ---
version: 2
jobs:
  build:
    docker:
      - image: circleci/node:12

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          keys:
          - v2-dependencies-{{ checksum "package-lock.json" }}
          - v2-dependencies-

      - run: npm ci

      - save_cache:
          paths:
            - "$HOME/.npm"
          key: v2-dependencies-{{ checksum "package-lock.json" }}

      - run: npm run -s typecheck

      - run: npm run -s lint

'''
'''--- .eslintrc.json ---
{
	"parserOptions": {
		"ecmaVersion": 2018,
		"project": "tsconfig.json",
		"sourceType": "script"
	},
	"parser": "@typescript-eslint/parser",
	"plugins": ["@typescript-eslint"],
	"env": {
		"es6": true,
		"node": true
	},
	"extends": "eslint:recommended",
	"overrides": [
		{
			"files": "*.ts",
			"extends": [
				"plugin:@typescript-eslint/recommended-requiring-type-checking",
				"plugin:@typescript-eslint/eslint-recommended",
				"plugin:@typescript-eslint/recommended",
				"plugin:prettier/recommended",
				"prettier/@typescript-eslint"
			],
			"rules": {
				"@typescript-eslint/ban-ts-ignore": "warn",
				"@typescript-eslint/camelcase": "off",
				"@typescript-eslint/explicit-function-return-type": "off",
				"@typescript-eslint/no-floating-promises": "error",
				"@typescript-eslint/prefer-optional-chain": "error"
			}
		}
	],
	"rules": {
		"indent": [
			"error",
			"tab"
		],
		"linebreak-style": [
			"error",
			"unix"
		],
		"quotes": [
			"error",
			"single"
		],
		"semi": [
			"error",
			"always"
		],
		"@typescript-eslint/no-base-to-string": "error",
		"@typescript-eslint/no-floating-promises": "error",
		"no-console": [ "error", { "allow": [ "assert" ] } ],
		"for-direction": "error",
		"no-await-in-loop": "error",
		"no-extra-parens": "error",
		"no-template-curly-in-string": "error",
		"accessor-pairs": "error",
		"array-callback-return": "error",
		"block-scoped-var": "error",
		"class-methods-use-this": "error",
		"consistent-return": "error",
		"curly": [
			"error",
			"multi-line"
		],
		"default-case": "error",
		"dot-location": [
			"error",
			"property"
		],
		"dot-notation": "error",
		"eqeqeq": "error",
		"no-alert": "error",
		"no-caller": "error",
		"no-else-return": "error",
		"no-empty-function": "error",
		"no-eq-null": "error",
		"no-eval": "error",
		"no-extend-native": "error",
		"no-extra-bind": "error",
		"no-extra-label": "error",
		"no-implied-eval": "error",
		"no-invalid-this": "error",
		"no-iterator": "error",
		"no-lone-blocks": "error",
		"no-loop-func": "error",
		"no-magic-numbers": [
			"off",
			{
				"ignoreArrayIndexes": true
			}
		],
		"no-multi-spaces": "error",
		"no-multi-str": "error",
		"no-new": "error",
		"no-new-func": "error",
		"no-new-wrappers": "error",
		"no-octal-escape": "error",
		"no-proto": "error",
		"no-return-await": "error",
		"no-script-url": "error",
		"no-self-compare": "error",
		"no-throw-literal": "error",
		"no-unmodified-loop-condition": "error",
		"no-unused-expressions": [
			"error",
			{
				"allowShortCircuit": true,
				"allowTernary": true,
				"allowTaggedTemplates": true
			}
		],
		"no-useless-call": "error",
		"no-useless-concat": "error",
		"no-useless-return": "error",
		"no-void": "error",
		"no-with": "error",
		"prefer-promise-reject-errors": [
			"error",
			{
				"allowEmptyReject": true
			}
		],
		"require-await": "error",
		"vars-on-top": "error",
		"strict": [
			"error",
			"global"
		],
		"no-catch-shadow": "error",
		"no-label-var": "error",
		"no-shadow": "error",
		"no-shadow-restricted-names": "error",
		"no-undef-init": "error",
		"no-undefined": "error",
		"no-use-before-define": "error",
		"global-require": "error",
		"handle-callback-err": "error",
		"no-buffer-constructor": "error",
		"no-mixed-requires": "error",
		"no-new-require": "error",
		"no-path-concat": "error",
		"no-process-exit": "error",
		"array-bracket-spacing": [
			"error",
			"always"
		],
		"block-spacing": "error",
		"brace-style": "error",
		"comma-spacing": "error",
		"comma-style": "error",
		"computed-property-spacing": "error",
		"consistent-this": [
			"error",
			"self"
		],
		"eol-last": "error",
		"func-call-spacing": "error",
		"func-name-matching": "error",
		"func-names": [
			"error",
			"as-needed"
		],
		"func-style": [
			"error",
			"declaration",
			{
				"allowArrowFunctions": true
			}
		],
		"function-paren-newline": ["error", "multiline-arguments"],
		"comma-dangle": ["warn", "always-multiline"],
		"key-spacing": "error",
		"keyword-spacing": "error",
		"lines-around-comment": "error",
		"max-len": ["error", {"ignoreTemplateLiterals": true}],
		"max-nested-callbacks": "error",
		"max-params": "error",
		"max-statements": "off",
		"max-statements-per-line": "error",
		"new-cap": [
			"error",
			{
				"capIsNewExceptionPattern": "Error$"
			}
		],
		"new-parens": "error",
		"no-array-constructor": "error",
		"no-continue": "error",
		"no-lonely-if": "error",
		"no-multiple-empty-lines": "error",
		"no-negated-condition": "error",
		"no-new-object": "error",
		"no-trailing-spaces": "error",
		"no-underscore-dangle": "off",
		"no-unneeded-ternary": "error",
		"no-whitespace-before-property": "error",
		"object-curly-spacing": [
			"error",
			"always"
		],
		"object-property-newline": [
			"error",
			{
				"allowMultiplePropertiesPerLine": true
			}
		],
		"operator-assignment": "error",
		"operator-linebreak": "error",
		"quote-props": [
			"error",
			"as-needed",
			{
				"keywords": false,
				"numbers": false
			}
		],
		"require-jsdoc": [
			"off",
			{
				"require": {
					"MethodDefinition": true,
					"ClassDeclaration": true
				}
			}
		],
		"semi-spacing": "error",
		"semi-style": "error",
		"sort-vars": [
			"error",
			{
				"ignoreCase": true
			}
		],
		"space-before-blocks": "error",
		"space-before-function-paren": [
			"error",
			{
				"named": "never"
			}
		],
		"space-in-parens": "error",
		"space-infix-ops": "error",
		"space-unary-ops": [
			"error",
			{
				"words": true,
				"nonwords": false
			}
		],
		"spaced-comment": "error",
		"switch-colon-spacing": "error",
		"template-tag-spacing": "error",
		"unicode-bom": "error",
		"arrow-body-style": "error",
		"arrow-spacing": "error",
		"generator-star-spacing": "error",
		"no-duplicate-imports": [
			"error",
			{
				"includeExports": true
			}
		],
		"no-useless-computed-key": "error",
		"no-useless-constructor": "error",
		"no-useless-rename": "error",
		"no-var": "warn",
		"object-shorthand": "error",
		"prefer-arrow-callback": [
			"error",
			{
				"allowNamedFunctions": true
			}
		],
		"prefer-const": "error",
		"prefer-destructuring": "error",
		"prefer-numeric-literals": "error",
		"prefer-rest-params": "warn",
		"prefer-spread": "warn",
		"rest-spread-spacing": "error",
		"sort-imports": [
			"error",
			{
				"ignoreCase": true
			}
		],
		"symbol-description": "error",
		"template-curly-spacing": "error",
		"require-atomic-updates": "warn"
	}
}

'''
'''--- .github/ISSUE_TEMPLATE/BOUNTY.yml ---
name: "Simple Bounty"
description: "Use this template to create a HEROES Simple Bounty via Github bot"
title: "Bounty: "
labels: ["bounty"]
assignees: heroes-bot-test
body:
  - type: markdown
    attributes:
      value: |
        Hi! Let's set up your bounty! Please don't change the template - @heroes-bot-test won't be able to help you.

  - type: dropdown
    id: type
    attributes:
      label: What talent are you looking for?
      options:
        - Marketing
        - Development
        - Design
        - Other
        - Content
        - Research
        - Audit

  - type: textarea
    id: description
    attributes:
      label: What you need to be done?

  - type: dropdown
    id: tags
    attributes:
      label: Tags
      description: Add tags that match the topic of the work
      multiple: true
      options:
        - API
        - Blockchain
        - Community
        - CSS
        - DAO
        - dApp
        - DeFi
        - Design
        - Documentation
        - HTML
        - Javascript
        - NFT
        - React
        - Rust
        - Smart contract
        - Typescript
        - UI/UX
        - web3
        - Translation
        - Illustration
        - Branding
        - Copywriting
        - Blogging
        - Editing
        - Video Creation
        - Social Media
        - Graphic Design
        - Transcription
        - Product Design
        - Artificial Intelligence
        - Quality Assurance
        - Risk Assessment
        - Security Audit
        - Bug Bounty
        - Code Review
        - Blockchain Security
        - Smart Contract Testing
        - Penetration Testing
        - Vulnerability Assessment
        - BOS
        - News
        - Hackathon
        - NEARCON2023
        - NEARWEEK

  - type: input
    id: deadline
    attributes:
      label: Deadline
      description: "Set a deadline for your bounty. Please enter the date in format: DD.MM.YYYY"
      placeholder: "19.05.2027"

  - type: dropdown
    id: currencyType
    attributes:
      label: Currency
      description: What is the currency you want to pay?
      options:
        - USDC.e
        - USDT.e
        - DAI
        - wNEAR
        - USDt
        - XP
        - marmaj
        - NEKO
        - JUMP
        - USDC
        - NEARVIDIA
      default: 0
    validations:
      required: true

  - type: input
    id: currencyAmount
    attributes:
      label: Amount
      description: How much it will be cost?

  - type: markdown
    attributes:
      value: "## Advanced settings"

  - type: checkboxes
    id: kyc
    attributes:
      label: KYC
      description: "Use HEROES' KYC Verification, only applicants who passed HEROES' KYC can apply and work on this bounty!"
      options:
        - label: Use KYC Verification

  - type: markdown
    attributes:
      value: |
        ### This cannot be changed once the bounty is live!

'''
'''--- .vscode/extensions.json ---
{
	"recommendations": [
		"editorconfig.editorconfig",
		"dbaeumer.vscode-eslint"
	]
}

'''
'''--- .vscode/settings.json ---
{
	"[typescript]": {
		"editor.rulers": []
	},
	"eslint.validate": ["javascript", "typescript"],
	"editor.codeActionsOnSave": {
		"source.fixAll.eslint": true
	}
}

'''
'''--- README.md ---
<p align="center">
  <img src="assets/logo.png" width="180" height="180">
  <h1 align="center">The Guard Bot</h1>
</p>
The Guard is a Telegram bot made to help admins manage their groups.

Initially created to moderate [The Devs Network](https://thedevs.network).

**NOTE: The Guard is in beta phase;**
**it has known issues, but it's successfully being used in production**

If you need help with using the Bot or setting it up, join our [Support Chat](https://t.me/theguardsupport).

## Setup
You need [Node.js](https://nodejs.org/) (>= 12) to run this bot.

1. Create a bot via [@BotFather](https://t.me/BotFather) and grab a **token**.
2. Clone this repository or [download zip](https://github.com/TheDevs-Network/the-guard-bot/archive/master.zip).
3. Install dependencies via `npm install`.
4. Copy `example.config.js` to `config.js` and edit it.
5. Start the bot via `npm start`.

## Setup with Docker
You need to have [docker](https://docs.docker.com/engine/installation/linux/docker-ce/ubuntu/#install-from-a-package) installed on your machine.

1. Create a bot via [@BotFather](https://t.me/BotFather) and grab a **token**.
2. Clone this repository or [download zip](https://github.com/TheDevs-Network/the-guard-bot/archive/master.zip).
3. Copy `example.config.js` to `config.js` and edit it.
4. Run `docker build -t the_guard_bot .` to build image.
5. Run `docker run -v $(pwd)/data:/app/data --rm -itd the_guard_bot` to start the bot.

Now you can add the bot as **administrator** to your groups.

## Features
* Synchronized database across multiple groups.
* Adding admins to the bot.
* Auto-remove and warn channels and groups ads.
* Kick bots added by users.
* Warn and ban users to control the group.
* Commands work with replying, mentioning and ID.
* Removes commands and temporary bot messages.
* Ability to create custom commands.
* Supports plugins.

Overall, keeps the groups clean and healthy to use.

## Commands
Command                 | Role       | Available at | Description
----------------------- | ---------- | ------------ | -----------------
`/admin`                | _Master_   | _Everywhere_ | Makes the user admin in the bot and groups.
`/unadmin`              | _Master_   | _Everywhere_ | Demotes the user from admin list.
`/leave <name\|id>`     | _Master_   | _Everywhere_ | Make the bot to leave the group cleanly.
`/hidegroup`            | _Master_   | _Groups_     | Revoke invite link and hide the group from `/groups` list.
`/showgroup`            | _Master_   | _Groups_     | Make the group accessible via `/groups` list.
`/del [reason]`         | _Admin_    | _Everywhere_ | Deletes replied-to message.
`/warn <reason>`        | _Admin_    | _Groups_     | Warns the user.
`/unwarn`               | _Admin_    | _Everywhere_ | Removes the last warn from the user.
`/nowarns`              | _Admin_    | _Everywhere_ | Clears warns for the user.
`/permit`               | _Admin_    | _Everywhere_ | Permits the user to advertise once, within 24 hours.
`/ban <reason>`         | _Admin_    | _Groups_     | Bans the user from groups.
`/unban`                | _Admin_    | _Everywhere_ | Removes the user from ban list.
`/user`                 | _Admin_    | _Everywhere_ | Shows the status of the user.
`/addcommand <name>`    | _Admin_    | _In-Bot_     | Create a custom command.
`/removecommand <name>` | _Admin_    | _In-Bot_     | Remove a custom command.
`/staff`                | _Everyone_ | _Everywhere_ | Shows a list of admins.
`/link`                 | _Everyone_ | _Everywhere_ | Shows the current group's link.
`/groups`               | _Everyone_ | _Everywhere_ | Shows a list of groups which the bot is admin in.
`/report`               | _Everyone_ | _Everywhere_ | Reports the replied-to message to admins.
`/commands`             | _Everyone_ | _In-Bot_     | Shows a list of available commands.
`/help` \| `/start`     | _Everyone_ | _In-Bot_     | How to use the bot.

All commands and actions are synchronized across all of the groups managed by the owner and they work with **replying**, **mentioning** or **ID** of a user.

If used by reply, `/ban` and `/warn` would remove the replied-to message.

The bot is still in beta phase so feel free to [open issues](https://github.com/thedevs-network/the-guard-bot/issues/new) and ask for features.

[**Roadmap**](https://github.com/TheDevs-Network/the-guard-bot/projects/1)

---

> Important Note: Under the AGPL-3.0 license, if you're running your own instance, you should add a link to the source [(this repository)](https://github.com/TheDevs-Network/the-guard-bot) in your bot's bio. If you're modifying this source and making your own bot, you should link to the source of your own version of the bot according to the AGPL-3.0 license. Check [LICENSE](LICENSE) for more info.

`The Guard` icon is from [Entypo+](http://entypo.com/) by Daniel Bruce.

'''
'''--- actions/ban.js ---
'use strict';

const { displayUser } = require('../utils/tg');
const { html, lrm } = require('../utils/html');
const { pMap } = require('../utils/promise');
const { telegram } = require('../bot');

const { listVisibleGroups } = require('../stores/group');
const { ban } = require('../stores/user');

module.exports = async ({ admin, reason, userToBan }) => {
	// move some checks from handler here?

	const by_id = admin.id;
	const date = new Date();

	await ban(userToBan, { by_id, date, reason });

	await pMap(await listVisibleGroups(), group =>
		telegram.kickChatMember(group.id, userToBan.id));

	return html`
		🚫 ${lrm}${admin.first_name} <b>banned</b> ${displayUser(userToBan)}.
		<b>Reason</b>: ${lrm}${reason}
	`;
};

'''
'''--- actions/batchBan.js ---
'use strict';

const { batchBan, ensureExists } = require('../stores/user');
const { displayUser } = require('../utils/tg');
const { TgHtml, lrm } = require('../utils/html');

module.exports = async ({ admin, reason, targets }) => {
	const by_id = admin.id;
	const date = new Date();

	await Promise.all(targets.map(ensureExists));

	const banned = await batchBan(targets, { by_id, date, reason });
	const bannedString = TgHtml.join(', ', banned.map(displayUser));

	return TgHtml.tag`
		${lrm}${admin.first_name} <b>banned</b> ${bannedString}.
		<b>Reason</b>: ${lrm}${reason}
	`;
};

'''
'''--- actions/warn.js ---
// @ts-check
'use strict';

const { context } = require('../bot');
const { html, lrm } = require('../utils/html');
const { link } = require('../utils/tg');
const { isWarnNotExpired } = require('../utils/config');
const { numberOfWarnsToBan } = require('../utils/config').config;
const { warn } = require('../stores/user');
const ban = require('./ban');

const cmp = (a, b) => Math.sign(a - b);

module.exports = async ({ admin, amend, reason, userToWarn }) => {
	const by_id = admin.id;
	const date = new Date();

	const { warns } = await warn(
		userToWarn,
		{ by_id, date, reason },
		{ amend },
	);

	const recentWarns = warns.filter(isWarnNotExpired(date));

	const count = {
		'-1': html`<b>${recentWarns.length}</b>/${numberOfWarnsToBan}`,
		0: html`<b>Final warning</b>`,
		// eslint-disable-next-line max-len
		1: html`<b>${recentWarns.length}</b>/${numberOfWarnsToBan} (🚫 <b>banned</b>)`,
	}[cmp(recentWarns.length + 1, numberOfWarnsToBan)];

	const warnMessage = html`
		⚠️ ${lrm}${admin.first_name} <b>warned</b> ${link(userToWarn)}.
		${count}: ${lrm}${reason}
	`;

	if (recentWarns.length >= numberOfWarnsToBan) {
		await ban({
			admin: context.botInfo,
			reason: 'Reached max number of warnings',
			userToBan: userToWarn,
		});
	}

	return warnMessage;
};

'''
'''--- bot/context.js ---
'use strict';

const warn = require('../actions/warn');
const ban = require('../actions/ban');
const batchBan = require('../actions/batchBan');
const { scheduleDeletion } = require('../utils/tg');

const {
	warnInlineKeyboard,
	chats = {},
	deleteWarnsAfter = false,
	deleteBansAfter = false,
} = require('../utils/config').config;

const normalisedDeleteWarnsAfter = typeof deleteWarnsAfter === 'object'
	? { auto: false, manual: false, ...deleteWarnsAfter }
	: { auto: deleteWarnsAfter, manual: deleteWarnsAfter };

const reply_markup = { inline_keyboard: warnInlineKeyboard };

/** @type { import('../typings/context').ContextExtensions } */
module.exports = {
	async ban({ admin, reason, userToBan }) {
		const banMessage = await ban({ admin, reason, userToBan });
		return this.loggedReply(banMessage)
			.then(scheduleDeletion(deleteBansAfter));
	},
	async batchBan({ admin, reason, targets }) {
		const banMessage = await batchBan({ admin, reason, targets });
		return this.loggedReply(banMessage)
			.then(scheduleDeletion(deleteBansAfter));
	},
	async warn({ admin, amend, reason, userToWarn, mode }) {
		const warnMessage = await warn({ admin, amend, reason, userToWarn });
		return this.loggedReply(warnMessage, { reply_markup })
			.then(scheduleDeletion(normalisedDeleteWarnsAfter[mode]));
	},

	loggedReply(html, extra) {
		if (chats.adminLog) {
			this.tg
				.sendMessage(
					chats.adminLog,
					html.toJSON().replace(/\[<code>(\d+)<\/code>\]/g, '[#u$1]'),
					{ parse_mode: 'HTML' },
				)
				.catch(() => null);
		}
		return this.replyWithHTML(html, extra);
	},

	replyWithCopy(content, options) {
		return this.tg.sendCopy(this.chat.id, content, options);
	},
};

'''
'''--- bot/index.js ---
'use strict';

const Telegraf = require('telegraf');
const { config } = require('../utils/config');

/** @typedef { import('../typings/context').ExtendedContext } ExtendedContext */

/** @type { import('telegraf/typings').Telegraf<ExtendedContext> } */
const bot = new Telegraf(config.token);

if (process.env.NODE_ENV === 'development') {
	bot.polling.offset = -1;
}

module.exports = bot;

// cyclic dependency
// bot/index requires context requires actions/warn requires bot/index
Object.assign(bot.context, require('./context'));

'''
'''--- example.config.js ---
// @ts-check
'use strict';

/**
 * @typedef { import('./typings/config').Config } Config
 * @typedef { import('./typings/config').InlineKeyboard } InlineKeyboard
 */

/*
 * Create `config.js` by running `cp example.config.js config.js`
 * in the project folder, then edit it.
 *
 * Config file in JSON format (`config.json`) is also supported.
 * For backwards compatibility, and because why not, it needs no extra code.
 */

/**
 * Millisecond
 * String to be parsed by https://npmjs.com/millisecond,
 * or number of milliseconds. Pass 0 to remove immediately.
 * @typedef {( number | string )} ms
 */

/**
 * @type {Config}
 */
const config = {

	/**
	 * @type {!( number | string | (number|string)[] )}
	 * ID (number) or username (string) of master,
	 * the person who can promote and demote admins,
	 * and add the bot to groups.
	 */
	master: 123456789,

	/**
	 * @type {!string}
	 * Telegram Bot token obtained from https://t.me/BotFather.
	 */
	token: '',

	chats: {

		/**
		 * @type {(number | false)}
		 * Chat to send member join/leave notifications to.
		 * Pass false to disable this feature.
		 */
		presenceLog: false,

		/**
		 * @type {(number | false)}
		 * Chat to send report notifications to.
		 * Pass false to disable this feature.
		 */
		report: -1001148607297,
	},

	/**
	 * @type {( 'all' | 'own' | 'none' )}
	 * Which messages with commands should be deleted?
	 * Defaults to 'own' -- don't delete commands meant for other bots.
	 */
	deleteCommands: 'own',

	deleteCustom: {
		longerThan: 450, // UTF-16 characters
		after: '20 minutes'
	},

	/**
	 * @type {(ms | false)} Millisecond
	 * Timeout before removing join and leave messages.
	 * [Look at typedef above for details.]
	 * Pass false to disable this feature.
	 */
	deleteJoinsAfter: '2 minutes',

	/**
	 * @type {(ms | { auto: (ms | false), manual: (ms | false) } | false)}
	 * Timeout before removing auto-warn messages.
	 * [Look at typedef above for details.]
	 * Pass an object with { auto, manual } for more granular control
	 * over which messages get deleted
	 * Pass false to disable this feature.
	 */
	deleteWarnsAfter: false,

	/**
	 * @type {(ms | false)}
	 * Timeout before removing ban messages.
	 * [Look at typedef above for details.]
	 * Pass false to disable this feature.
	 */
	deleteBansAfter: false,

	/**
	 * @type {string[]}
	 * List of blacklisted domains.
	 * Messages containing blacklisted domains will automatically be warned.
	 * If the link is shortened, an attempt will be made to resolve it.
	 * If resolved link is blacklisted, it will be warned for.
	 */
	blacklistedDomains: [],

	/**
	 * @type {( string[] | false )}
	 * List of whitelisted links and usernames,
	 * For channels and groups to stop warning users for them.
	 * Pass false to whitelist all links and channels.
	 */
	excludeLinks: [],

	/**
	 * @type {ms}
	 * Don't count warns older than this value towards automatic ban.
	 * [Look at typedef above for details.]
	 */
	expireWarnsAfter: Infinity,

	/**
	 * @type {InlineKeyboard}
	 * Inline keyboard to be added to reply to /groups.
	 * We use it to display button opening our webpage.
	 */
	groupsInlineKeyboard: [],

	numberOfWarnsToBan: 3,

	/**
	 * @type {string[]}
	 * List of plugin names to be loaded.
	 * See Readme in plugins directory for more details.
	 */
	plugins: [],

	/**
	 * @type {InlineKeyboard}
	 * Inline keyboard to be added to warn message.
	 * We use it to display button showing our rules.
	 */
	warnInlineKeyboard: [],
};

module.exports = Object.freeze(config);

'''
'''--- handlers/commands/addCommand.js ---
'use strict';

// DB
const { addCommand, getCommand } = require('../../stores/command');

// Bot
const { Markup } = require('telegraf');

const Cmd = require('../../utils/cmd');
const { isMaster } = require('../../utils/config');
const { inlineKeyboard } = require('../../utils/tg');

const preserved = require('../commands').handlers;

const roleBtn = (btRole, { newCommand, currentRole }) => {
	const noop = btRole.toLowerCase() === currentRole.toLowerCase();
	return {
		text: '✅ '.repeat(noop) + btRole,
		callback_data: Cmd.stringify({
			command: 'addcommand',
			flags: {
				noop,
				role: btRole,
				replace: 'soft',
			},
			reason: newCommand,
		}),
	};
};

const roleKbRow = (cmdData) => [
	roleBtn('Admins', cmdData),
	roleBtn('Everyone', cmdData),
];

const normalizeRole = (role = '') => {
	const lower = role.toLowerCase();
	return lower === 'master' || lower === 'admins'
		? lower
		: 'everyone';
};

/** @param { import('../../typings/context').ExtendedContext } ctx */
const addCommandHandler = async (ctx) => {
	const { chat, message, reply } = ctx;
	if (chat.type === 'channel') return null;
	const { id } = ctx.from;

	if (ctx.from.status !== 'admin') {
		return ctx.replyWithHTML(
			'ℹ️ <b>Sorry, only admins access this command.</b>',
		);
	}

	const { flags, reason: commandName } = Cmd.parse(message);
	if (flags.has('noop')) return null;

	const isValidName = /^!?(\w+)$/.exec(commandName);
	if (!isValidName) {
		return ctx.replyWithHTML(
			'<b>Send a valid command.</b>\n\nExample:\n' +
			'<code>/addcommand rules</code>',
		);
	}
	const newCommand = isValidName[1].toLowerCase();
	if (preserved.has(newCommand)) {
		return reply('❗️ Sorry you can\'t use this name, it\'s preserved.\n\n' +
			'Try another one.');
	}

	const replaceCmd = flags.has('replace');
	const content = message.reply_to_message;

	const cmdExists = await getCommand({ isActive: true, name: newCommand });

	if (!replaceCmd && cmdExists) {
		return ctx.replyWithHTML(
			'ℹ️ <b>This command already exists.</b>\n\n' +
			'/commands - to see the list of commands.\n' +
			'/addcommand <code>&lt;name&gt;</code> - to add a command.\n' +
			'/removecommand <code>&lt;name&gt;</code>' +
			' - to remove a command.',
			Markup.keyboard([ [ `/addcommand -replace ${newCommand}` ] ])
				.selective()
				.oneTime()
				.resize()
				.extra(),
		);
	}
	if (cmdExists && cmdExists.role === 'master' && !isMaster(ctx.from)) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Sorry, only master can replace this command.</b>',
		);
	}

	const softReplace = flags.get('replace') === 'soft';
	if (content || softReplace) {
		const role = normalizeRole(flags.get('role'));
		await addCommand({
			id,
			role,
			type: 'copy',
			caption: null,
			isActive: true,
			name: newCommand,
			...softReplace || { content },
		});
		return ctx.replyWithHTML(
			`✅ <b>Successfully added <code>!${isValidName[1]}</code></b>.\n` +
			'Who should be able to use it?',
			inlineKeyboard(roleKbRow({ currentRole: role, newCommand })),
		);
	}

	// eslint-disable-next-line max-len
	return ctx.replyWithHTML('ℹ️ <b>Reply to a message you\'d like to save</b>');
};

module.exports = addCommandHandler;

'''
'''--- handlers/commands/admin.js ---
'use strict';

// Utils
const { html } = require('../../utils/html');
const { isMaster } = require('../../utils/config');
const { link, scheduleDeletion } = require('../../utils/tg');
const { parse, strip } = require('../../utils/cmd');

// DB
const {
	admin,
	getUser,
} = require('../../stores/user');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const adminHandler = async ({ from, message, replyWithHTML }) => {
	if (!isMaster(from)) return null;

	const { targets } = parse(message);

	if (targets.length > 1) {
		return replyWithHTML(
			'ℹ️ <b>Specify one user to promote.</b>',
		).then(scheduleDeletion());
	}

	const userToAdmin = targets.length
		? await getUser(strip(targets[0]))
		: from;

	if (!userToAdmin) {
		return replyWithHTML(
			'❓ <b>User unknown.</b>\n' +
			'Please forward their message, then try again.',
		).then(scheduleDeletion());
	}

	if (userToAdmin.status === 'banned') {
		return replyWithHTML('ℹ️ <b>Can\'t admin banned user.</b>');
	}

	if (userToAdmin.status === 'admin') {
		return replyWithHTML(
			html`⭐️ ${link(userToAdmin)} <b>is already admin.</b>`,
		);
	}

	await admin(userToAdmin);

	return replyWithHTML(html`⭐️ ${link(userToAdmin)} <b>is now admin.</b>`);
};

module.exports = adminHandler;

'''
'''--- handlers/commands/ban.js ---
'use strict';

// Utils
const { displayUser, scheduleDeletion } = require('../../utils/tg');
const { html } = require('../../utils/html');
const { parse, strip, substom } = require('../../utils/cmd');

// Bot

// DB
const { getUser } = require('../../stores/user');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const banHandler = async (ctx) => {
	if (ctx.chat.type === 'private') {
		return ctx.replyWithHTML(
			'ℹ️ <b>This command is only available in groups.</b>',
		);
	}

	if (ctx.from.status !== 'admin') return null;

	const { flags, targets, reason } = parse(ctx.message);

	if (targets.length === 0) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Specify at least one user to ban.</b>',
		).then(scheduleDeletion());
	}

	if (reason.length === 0) {
		return ctx.replyWithHTML('ℹ️ <b>Need a reason to ban.</b>')
			.then(scheduleDeletion());
	}

	if (targets.length > 1) {
		return ctx.batchBan({ admin: ctx.from, reason, targets });
	}

	const userToBan = await getUser(strip(targets[0])) || targets[0];

	if (!userToBan.id) {
		return ctx.replyWithHTML(
			'❓ <b>User unknown.</b>\n' +
			'Please forward their message, then try again.',
		).then(scheduleDeletion());
	}

	if (userToBan.id === ctx.botInfo.id) return null;

	if (userToBan.status === 'admin') {
		return ctx.replyWithHTML('ℹ️ <b>Can\'t ban other admins.</b>');
	}

	if (ctx.message.reply_to_message) {
		ctx.deleteMessage(ctx.message.reply_to_message.message_id)
			.catch(() => null);
	}

	if (!flags.has('amend') && userToBan.status === 'banned') {
		return ctx.replyWithHTML(
			html`🚫 ${displayUser(userToBan)} <b>is already banned.</b>`,
		);
	}

	return ctx.ban({
		admin: ctx.from,
		reason: await substom(reason),
		userToBan,
	});
};

module.exports = banHandler;

'''
'''--- handlers/commands/commands.js ---
'use strict';

const R = require('ramda');

// DB
const { listCommands } = require('../../stores/command');

// cfg
const { isMaster } = require('../../utils/config');

const { scheduleDeletion } = require('../../utils/tg');

const masterCommands = `\
<b>Master commands</b>:
<code>/admin</code> - Makes the user admin.
<code>/unadmin</code> - Demotes the user from admin list.
<code>/leave &lt;name|id&gt;</code> - Makes the bot leave the group cleanly.
<code>/hidegroup</code> - Hide the group from <code>/groups</code> list.
<code>/showgroup</code> - Show the group it in <code>/groups</code> list.\n
`;

const adminCommands = `\
<b>Admin commands</b>:
<code>/del [reason]</code> - Deletes replied-to message.
<code>/warn &lt;reason&gt;</code> - Warns the user.
<code>/unwarn</code> - Removes the last warn from the user.
<code>/nowarns</code> - Clears warns for the user.
<code>/permit</code> - Permits the user to advertise once, within 24 hours.
<code>/ban &lt;reason&gt;</code> - Bans the user from groups.
<code>/unban</code> - Removes the user from ban list.
<code>/user</code> - Shows user's status and warns.
<code>/addcommand &lt;name&gt;</code> - to create a custom command.
<code>/removecommand &lt;name&gt;</code> - to remove a custom command.\n
`;
const userCommands = `\
<b>Commands for everyone</b>:
<code>/staff</code> - Shows a list of admins.
<code>/link</code> - Show the current group's link.
<code>/groups</code> - Show a list of groups which the bot is admin in.
<code>/report</code> - Reports the replied-to message to admins.\n
`;
const role = R.prop('role');
const name = R.prop('name');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const commandReferenceHandler = async (ctx) => {
	const customCommands = await listCommands();

	const customCommandsGrouped = R.groupBy(role, customCommands);
	const userCustomCommands = customCommandsGrouped.everyone
		? '[everyone]\n<code>' +
		customCommandsGrouped.everyone
			.map(name)
			.join(', ') +
		'</code>\n\n'
		: '';

	const adminCustomCommands = customCommandsGrouped.admins
		? '[admins]\n<code>' +
		customCommandsGrouped.admins
			.map(name)
			.join(', ') +
		'</code>\n\n'
		: '';

	const masterCustomCommands = customCommandsGrouped.master
		? '[master]\n<code>' +
		customCommandsGrouped.master
			.map(name)
			.join(', ') +
		'</code>\n\n'
		: '';

	const customCommandsText = masterCommands.repeat(isMaster(ctx.from)) +
		adminCommands.repeat(ctx.from && ctx.from.status === 'admin') +
		userCommands +
		'\n<b>Custom commands(prefix with !):</b>\n' +
		masterCustomCommands.repeat(isMaster(ctx.from)) +
		adminCustomCommands.repeat(ctx.from && ctx.from.status === 'admin') +
		userCustomCommands;

	return ctx.replyWithHTML(customCommandsText)
		.then(scheduleDeletion());
};

module.exports = commandReferenceHandler;

'''
'''--- handlers/commands/del.js ---
'use strict';

const R = require('ramda');

const { html } = require('../../utils/html');
const { parse } = require('../../utils/cmd');
const { scheduleDeletion } = require('../../utils/tg');

const link = ({ id, first_name }) =>
	html`<a href="tg://user?id=${id}">${first_name}</a>`;

/** @param { import('../../typings/context').ExtendedContext } ctx */
module.exports = async (ctx) => {
	if (ctx.from.status !== 'admin') return;

	const { flags, reason } = parse(ctx.message);

	if (!(flags.has('msg_id') || ctx.message.reply_to_message)) {
		// eslint-disable-next-line max-len
		await ctx.replyWithHTML('ℹ️ <b>Reply to a message you\'d like to delete</b>').then(scheduleDeletion());
		return;
	}

	await ctx.tg.deleteMessage(
		flags.get('chat_id') || ctx.chat.id,
		flags.get('msg_id') || ctx.message.reply_to_message.message_id,
	);

	if (reason) {
		const id = R.path([ 'message', 'reply_to_message', 'from', 'id' ], ctx);
		const emoji = id ? link({ id, first_name: '🗑' }) : '🗑';
		await ctx.replyWithHTML(html`${emoji} ${reason}`)
			.then(scheduleDeletion());
	}
};

'''
'''--- handlers/commands/fban.js ---
'use strict';

module.exports = require('./ban');

'''
'''--- handlers/commands/groups.js ---
// @ts-check
'use strict';

const XRegExp = require('xregexp');

// Utils
const { scheduleDeletion } = require('../../utils/tg');
const { TgHtml } = require('../../utils/html');

// DB
const { listVisibleGroups } = require('../../stores/group');

const { config } = require('../../utils/config');

const inline_keyboard = config.groupsInlineKeyboard;

const reply_markup = inline_keyboard && { inline_keyboard };

const entry = group => group.username
	? `- @${group.username}`
	: TgHtml.tag`- <a href="${group.link}">${group.title}</a>`;

const emojiRegex = XRegExp.tag('gx')`
	[\uE000-\uF8FF]|
	\uD83C[\uDC00-\uDFFF]|
	\uD83D[\uDC00-\uDFFF]|
	[\u2011-\u26FF]|
	\uD83E[\uDD10-\uDDFF]`;

const stripEmoji = s => s.replace(emojiRegex, '');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const groupsHandler = async ({ replyWithHTML }) => {
	const groups = await listVisibleGroups();

	groups.sort((a, b) =>
		stripEmoji(a.title).localeCompare(stripEmoji(b.title)));

	const entries = TgHtml.join('\n', groups.map(entry));

	return replyWithHTML(TgHtml.tag`🛠 <b>Groups I manage</b>:\n\n${entries}`, {
		disable_web_page_preview: true,
		reply_markup,
	}).then(scheduleDeletion());
};

module.exports = groupsHandler;

'''
'''--- handlers/commands/help.js ---
'use strict';
const { Markup } = require('telegraf');
const { homepage } = require('../../package.json');

const message = `\
Hey there!

I'm an <b>administration</b> bot that helps you to keep \
your <b>groups</b> safe from <b>spammers.</b>

Send /commands to get the list of available commands.

If you want to use me for your groups, \
note that I'm more useful on a network of groups and \
you also need to <b>setup a new bot.</b>

So if you don't wish to self-host, @MissRose_bot \
might be a better choice for you.
`;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const helpHandler = ({ chat, replyWithHTML }) => {
	if (chat.type !== 'private') return null;

	return replyWithHTML(
		message,
		Markup.inlineKeyboard([
			Markup.urlButton('🛠 Setup a New Bot', homepage)
		]).extra()
	);
};

module.exports = helpHandler;

'''
'''--- handlers/commands/hideGroup.js ---
'use strict';

const { hideGroup } = require('../../stores/group');

const noop = Function.prototype;

/** @param { import('../../typings/context').ExtendedContext } ctx */
module.exports = (ctx, next) => {
	if (!ctx.state.isMaster) return next();

	// try to revoke the old link
	ctx.exportChatInviteLink().catch(noop);

	return hideGroup(ctx.chat);
};

'''
'''--- handlers/commands/index.js ---
'use strict';

const requireDir = require('require-directory');
const R = require('ramda');
const { Router } = require('telegraf');

const routingFn = require('./routingFn');

const router = new Router(routingFn);

module.exports = router;

const exclude = (_, filename) => filename === 'routingFn.js';
const rename = R.toLower;

const extensions = [ 'js', 'ts' ];
const handlers = requireDir(module, { exclude, extensions, rename });
router.handlers = new Map(Object.entries(handlers));

'''
'''--- handlers/commands/leave.ts ---
import { managesGroup, removeGroup } from "../../stores/group";
import { ExtendedContext } from "../../typings/context";
import { html } from "../../utils/html";
import { isMaster } from "../../utils/config";

const leaveCommandHandler = async (ctx: ExtendedContext) => {
	if (!isMaster(ctx.from)) return null;

	const query = ctx.message!.text!.split(" ").slice(1).join(" ");

	const group = query
		? await managesGroup(
				/^-?\d+/.test(query) ? { id: +query } : { title: query }
		  )
		: ctx.chat;
	if (!group) {
		return ctx.replyWithHTML("❓ <b>Unknown group.</b>");
	}

	await removeGroup(group);
	await ctx.replyWithHTML(html`✅ <b>I no longer manage ${group.title}.</b>`);
	return ctx.tg.leaveChat(group.id);
};

export = leaveCommandHandler;

'''
'''--- handlers/commands/link.js ---
'use strict';

// Utils
const { scheduleDeletion } = require('../../utils/tg');

// DB
const { managesGroup } = require('../../stores/group');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const linkHandler = async ({ chat, replyWithHTML }, next) => {
	if (chat.type === 'private') {
		return next();
	}

	const group = await managesGroup({ id: chat.id });

	return replyWithHTML(group.link || '️ℹ️ <b>No link to this group</b>', {
		disable_web_page_preview: false,
	}).then(scheduleDeletion());
};

module.exports = linkHandler;

'''
'''--- handlers/commands/nowarns.js ---
// @ts-check
'use strict';

// Utils
const { html, lrm } = require('../../utils/html');
const { link, scheduleDeletion } = require('../../utils/tg');
const { parse, strip } = require('../../utils/cmd');
const { pMap } = require('../../utils/promise');

// DB
const { getUser, nowarns } = require('../../stores/user');
const { listGroups } = require('../../stores/group');

// This handler is very similiar to commands/unban.
// When adding a feature here, please consider adding it there too.

/** @param { import('../../typings/context').ExtendedContext } ctx */
const nowarnsHandler = async (ctx) => {
	if (ctx.from?.status !== 'admin') return null;

	const { targets } = parse(ctx.message);

	if (targets.length !== 1) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Specify one user to pardon.</b>',
		).then(scheduleDeletion());
	}

	const userToUnwarn = await getUser(strip(targets[0]));

	if (!userToUnwarn) {
		return ctx.replyWithHTML(
			'❓ <b>User unknown.</b>',
		).then(scheduleDeletion());
	}

	const { warns } = userToUnwarn;

	if (warns.length === 0) {
		return ctx.replyWithHTML(
			html`ℹ️ ${link(userToUnwarn)} <b>already has no warnings.</b>`,
		);
	}

	if (userToUnwarn.status === 'banned') {
		await pMap(await listGroups({ type: 'supergroup' }), (group) =>
			ctx.tg.unbanChatMember(group.id, userToUnwarn.id));
	}

	await nowarns(userToUnwarn);

	if (userToUnwarn.status === 'banned') {
		ctx.tg.sendMessage(
			userToUnwarn.id,
			'♻️ You were unbanned from all of the /groups!',
		).catch(() => null);
		// it's likely that the banned person haven't PMed the bot,
		// which will cause the sendMessage to fail,
		// hance .catch(noop)
		// (it's an expected, non-critical failure)
	}

	return ctx.loggedReply(html`
		♻️ ${lrm}${ctx.from.first_name} <b>pardoned</b> ${link(userToUnwarn)}
		for all of their warnings.
	`);
};

module.exports = nowarnsHandler;

'''
'''--- handlers/commands/permit.ts ---
import { displayUser, scheduleDeletion } from "../../utils/tg";
import { html, lrm } from "../../utils/html";
import { parse, strip } from "../../utils/cmd";
import type { ExtendedContext } from "../../typings/context";
import { permit } from "../../stores/user";

export = async (ctx: ExtendedContext) => {
	if (ctx.from?.status !== "admin") return null;

	const { targets } = parse(ctx.message);
	if (targets.length !== 1) {
		return ctx
			.replyWithHTML("ℹ️ <b>Specify one user to permit.</b>")
			.then(scheduleDeletion());
	}

	const permitted = await permit(strip(targets[0]), {
		by_id: ctx.from.id,
		date: new Date(),
	});

	return ctx.replyWithHTML(html`
		🎟 ${lrm}${ctx.from.first_name} <b>permitted</b> ${displayUser(permitted)} to
		promote once within the next 24 hours!
	`);
};

'''
'''--- handlers/commands/removeCommand.js ---
'use strict';

// DB
const { getCommand, removeCommand } = require('../../stores/command');

const { isMaster } = require('../../utils/config');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const removeCommandHandler = async ({ from, chat, message, replyWithHTML }) => {
	const { text } = message;
	if (chat.type !== 'private') return null;

	if (from.status !== 'admin') {
		return replyWithHTML(
			'ℹ️ <b>Sorry, only admins access this command.</b>',
		);
	}
	const [ , commandName ] = text.split(' ');
	if (!commandName) {
		return replyWithHTML(
			'<b>Send a valid command.</b>\n\nExample:\n' +
			'<code>/removecommand rules</code>',
		);
	}

	const command = await getCommand({ name: commandName.toLowerCase() });
	if (!command) {
		return replyWithHTML(
			'ℹ️ <b>Command couldn\'t be found.</b>',
		);
	}

	const role = command.role.toLowerCase();
	if (role === 'master' && !isMaster(from)) {
		return replyWithHTML(
			'ℹ️ <b>Sorry, only master can remove this command.</b>',
		);
	}

	await removeCommand({ name: commandName.toLowerCase() });
	return replyWithHTML(
		`✅ <code>!${commandName}</code> ` +
		'<b>has been removed successfully.</b>',
	);
};

module.exports = removeCommandHandler;

'''
'''--- handlers/commands/report.js ---
'use strict';

// Utils
const Cmd = require('../../utils/cmd');
const { TgHtml } = require('../../utils/html');
const {
	link,
	msgLink,
	scheduleDeletion,
} = require('../../utils/tg');

const { chats = {} } = require('../../utils/config').config;

const isQualified = member => member.status === 'creator' ||
	member.can_delete_messages &&
	member.can_restrict_members;

const adminMention = ({ user }) =>
	TgHtml.tag`<a href="tg://user?id=${user.id}">&#8203;</a>`;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const reportHandler = async ctx => {
	if (!ctx.chat.type.endsWith('group')) return null;
	if (!ctx.message.reply_to_message) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Reply to message you\'d like to report</b>',
		).then(scheduleDeletion());
	}
	const admins = (await ctx.getChatAdministrators())
		.filter(isQualified)
		.map(adminMention);
	// eslint-disable-next-line max-len
	const s = TgHtml.tag`❗️ ${link(ctx.from)} <b>reported the message to the admins</b>.${TgHtml.join('', admins)}`;
	const report = await ctx.replyWithHTML(s, {
		reply_to_message_id: ctx.message.reply_to_message.message_id,
	});
	if (chats.report) {
		await ctx.tg.sendMessage(
			chats.report,
			TgHtml.tag`❗️ ${link(ctx.from)} reported <a href="${msgLink(
				ctx.message.reply_to_message,
			)}">a message</a> in ${ctx.chat.title}!`,
			{
				parse_mode: 'HTML',
				reply_markup: { inline_keyboard: [ [ {
					text: '✔️ Handled',
					callback_data: Cmd.stringify({
						command: 'del',
						flags: {
							chat_id: report.chat.id,
							msg_id: report.message_id,
						},
						reason: 'Report handled',
					}),
				} ] ] } },
		);
	}
	return null;
};

module.exports = reportHandler;

'''
'''--- handlers/commands/routingFn.js ---
'use strict';

const eq = require('../../utils/eq');
const { isCommand } = require('../../utils/tg');

/** @param { import('telegraf').ContextMessageUpdate } ctx */
module.exports = ({ me, message }) => {
	if (!isCommand(message)) return null;

	const [ , command, username ] =
		/^\/(?:start )?(\w+)(@\w+)?/.exec(message.text);

	if (username && !eq.username(username, me)) return null;

	return { route: command.toLowerCase() };
};

'''
'''--- handlers/commands/showGroup.js ---
'use strict';

const { updateGroup } = require('../../stores/group');

/** @param { import('../../typings/context').ExtendedContext } ctx */
module.exports = async (ctx, next) => {
	if (!ctx.state.isMaster) return next();

	const { id, username, title } = ctx.chat;

	try {
		const link = username
			? `https://t.me/${username.toLowerCase()}`
			: await ctx.exportChatInviteLink();

		return updateGroup({ id, link, title });
	} catch (err) {
		return ctx.reply(String(err));
	}
};

'''
'''--- handlers/commands/staff.js ---
'use strict';

// Utils
const { html, TgHtml } = require('../../utils/html');
const { quietLink, scheduleDeletion } = require('../../utils/tg');

// DB
const { getAdmins } = require('../../stores/user');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const staffHandler = async ctx => {
	const admins = await getAdmins();
	admins.sort((a, b) => a.first_name > b.first_name ? 1 : -1);

	const links = admins.map(quietLink);

	const list = TgHtml.join('\n', links.map(s => html`⭐ ${s}`));

	return ctx.replyWithHTML(html`<b>Admins in the network:</b>\n\n${list}`, {
		disable_notification: true,
		disable_web_page_preview: true,
	}).then(scheduleDeletion());
};

module.exports = staffHandler;

'''
'''--- handlers/commands/start.js ---
// @ts-check
'use strict';

module.exports = require('./help');

'''
'''--- handlers/commands/unadmin.js ---
'use strict';

// Utils
const { html } = require('../../utils/html');
const { isMaster } = require('../../utils/config');
const { link, scheduleDeletion } = require('../../utils/tg');
const { parse, strip } = require('../../utils/cmd');

// Bot
const { telegram } = require('../../bot');

// DB
const { getUser, unadmin } = require('../../stores/user');
const { listGroups } = require('../../stores/group');

const noop = Function.prototype;

const tgUnadmin = async (userToUnadmin) => {
	for (const group of await listGroups()) {
		telegram.promoteChatMember(group.id, userToUnadmin.id, {
			can_change_info: false,
			can_delete_messages: false,
			can_invite_users: false,
			can_pin_messages: false,
			can_promote_members: false,
			can_restrict_members: false,
		}).catch(noop);
	}
};

/** @param { import('../../typings/context').ExtendedContext } ctx */
const unAdminHandler = async ({ from, message, replyWithHTML }) => {
	if (!isMaster(from)) return null;

	const { targets } = parse(message);

	if (targets.length !== 1) {
		return replyWithHTML(
			'ℹ️ <b>Specify one user to unadmin.</b>',
		).then(scheduleDeletion());
	}

	const userToUnadmin = await getUser(strip(targets[0]));

	if (!userToUnadmin) {
		return replyWithHTML(
			'❓ <b>User unknown.</b>',
		).then(scheduleDeletion());
	}

	if (userToUnadmin.status !== 'admin') {
		return replyWithHTML(
			html`ℹ️ ${link(userToUnadmin)} <b>is not admin.</b>`,
		);
	}

	await tgUnadmin(userToUnadmin);

	await unadmin(userToUnadmin);

	return replyWithHTML(
		html`❗️ ${link(userToUnadmin)} <b>is no longer admin.</b>`,
	);
};

module.exports = unAdminHandler;

'''
'''--- handlers/commands/unban.js ---
// @ts-check
'use strict';

// Utils
const { displayUser, scheduleDeletion } = require('../../utils/tg');
const { html, lrm } = require('../../utils/html');
const { parse, strip } = require('../../utils/cmd');
const { pMap } = require('../../utils/promise');

// DB
const { listGroups } = require('../../stores/group');
const { getUser, unban } = require('../../stores/user');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const unbanHandler = async (ctx) => {
	if (ctx.from?.status !== 'admin') return null;

	const { targets } = parse(ctx.message);

	if (targets.length !== 1) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Specify one user to unban.</b>',
		).then(scheduleDeletion());
	}

	const userToUnban = await getUser(strip(targets[0]));

	if (!userToUnban) {
		return ctx.replyWithHTML(
			'❓ <b>User unknown.</b>',
		).then(scheduleDeletion());
	}

	if (userToUnban.status !== 'banned') {
		return ctx.replyWithHTML('ℹ️ <b>User is not banned.</b>');
	}

	await pMap(await listGroups({ type: 'supergroup' }), (group) =>
		ctx.tg.unbanChatMember(group.id, userToUnban.id));

	await unban(userToUnban);

	ctx.tg.sendMessage(
		userToUnban.id,
		'♻️ You were unbanned from all of the /groups!',
	).catch(() => null);
	// it's likely that the banned person haven't PMed the bot,
	// which will cause the sendMessage to fail,
	// hance .catch(noop)
	// (it's an expected, non-critical failure)

	return ctx.loggedReply(html`
		♻️ ${lrm}${ctx.from.first_name} <b>unbanned</b> ${displayUser(userToUnban)}.
	`);
};

module.exports = unbanHandler;

'''
'''--- handlers/commands/unwarn.js ---
// @ts-check
'use strict';

const { last } = require('ramda');
const XRegExp = require('xregexp');

// Utils
const { html, lrm } = require('../../utils/html');
const { link, scheduleDeletion } = require('../../utils/tg');
const { isWarnNotExpired } = require('../../utils/config');
const { parse, strip } = require('../../utils/cmd');
const { pMap } = require('../../utils/promise');

// Config
const { numberOfWarnsToBan } = require('../../utils/config').config;

// DB
const { listGroups } = require('../../stores/group');
const { getUser, unwarn } = require('../../stores/user');

const dateRegex = XRegExp.tag('nix')`^
	\d{4}       # year
	-\d{2}      # month
	(-\d{2}     # day
	([T\s]\d{2} # hour
	(:\d{2}     # min
	(:\d{2}     # sec
	(.\d{3}Z?   # ms
	)?)?)?)?)?
$`;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const unwarnHandler = async (ctx) => {
	if (ctx.from?.status !== 'admin') return null;

	const { reason, targets } = parse(ctx.message);

	if (targets.length !== 1) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Specify one user to unwarn.</b>',
		).then(scheduleDeletion());
	}

	const userToUnwarn = await getUser(strip(targets[0]));

	if (!userToUnwarn) {
		return ctx.replyWithHTML(
			'❓ <b>User unknown</b>',
		).then(scheduleDeletion());
	}

	const allWarns = userToUnwarn.warns.filter(isWarnNotExpired(new Date()));

	if (allWarns.length === 0) {
		return ctx.replyWithHTML(
			html`ℹ️ ${link(userToUnwarn)} <b>already has no warnings.</b>`,
		);
	}

	if (userToUnwarn.status === 'banned') {
		await pMap(await listGroups({ type: 'supergroup' }), group =>
			ctx.tg.unbanChatMember(group.id, userToUnwarn.id));
	}

	let lastWarn;
	if (!reason) {
		lastWarn = last(allWarns);
	} else if (dateRegex.test(reason)) {
		const normalized = reason.replace(' ', 'T').toUpperCase();
		lastWarn = allWarns.find(({ date }) =>
			date && date.toISOString().startsWith(normalized));
	} else {
		return ctx.replyWithHTML(
			'⚠ <b>Invalid date</b>',
		).then(scheduleDeletion());
	}

	if (!lastWarn) {
		return ctx.replyWithHTML(
			'❓ <b>404: Warn not found</b>',
		).then(scheduleDeletion());
	}

	await unwarn(userToUnwarn, lastWarn);

	if (userToUnwarn.status === 'banned') {
		ctx.tg.sendMessage(
			userToUnwarn.id,
			'♻️ You were unbanned from all of the /groups!',
		).catch(() => null);
		// it's likely that the banned person haven't PMed the bot,
		// which will cause the sendMessage to fail,
		// hance .catch(noop)
		// (it's an expected, non-critical failure)
	}

	const count = html`<b>${allWarns.length}</b>/${numberOfWarnsToBan}`;

	return ctx.loggedReply(html`
		❎ ${lrm}${ctx.from.first_name} <b>pardoned</b> ${link(userToUnwarn)} for
		${count}: ${lrm}${lastWarn.reason || lastWarn}
	`);
};

module.exports = unwarnHandler;

'''
'''--- handlers/commands/user.js ---
// @ts-check
'use strict';

// Utils
const { inspect } = require('util');
const { displayUser, scheduleDeletion } = require('../../utils/tg');
const { html, lrm, TgHtml } = require('../../utils/html');
const { isMaster, isWarnNotExpired } = require('../../utils/config');
const { parse, strip } = require('../../utils/cmd');

// DB
const { getUser, permit } = require('../../stores/user');

/** @param {Date} date */
const formatDate = date =>
	date && date.toISOString().slice(0, -5).replace('T', ' ');

/**
 * @param {string} defaultVal
 */
const formatEntry = async (entry, defaultVal) => {
	if (!entry || !entry.by_id) return html`${defaultVal}`;
	const { first_name } = await getUser({ id: entry.by_id }) || {};
	if (!first_name) return html`${lrm}${entry.reason} (${formatDate(entry.date)})`;
	return html`${lrm}${entry.reason} (${first_name}, ${formatDate(entry.date)})`;
};

const formatWarn = async (warn, i) =>
	isWarnNotExpired(new Date())(warn)
		? html`${i + 1}. ${await formatEntry(warn, warn)}`
		: html`<del>${i + 1}. ${await formatEntry(warn, warn)}</del>`;

/**
 * @param {string | TgHtml | undefined } content
 */
const isNotEmpty = content => content?.length;

const optional = (header, sep, content) =>
	isNotEmpty(content)
		? html`${header}${sep}${content}`
		: html``;

const title = user => {
	if (isMaster(user)) {
		return html`🕴️ <b>Bot master</b>`;
	} else if (user.status === 'admin') {
		return html`⭐️ <b>Admin</b>`;
	}
	return html`👤 <b>User</b>`;
};

/** @param { import('../../typings/context').ExtendedContext } ctx */
const getWarnsHandler = async ({ from, message, replyWithHTML }) => {
	if (!from) {
		return replyWithHTML(
			'ℹ️ <b>This command is not available in channels.</b>',
		).then(scheduleDeletion());
	}

	const { flags, targets } = parse(message);

	if (targets.length > 1) {
		return replyWithHTML(
			'ℹ️ <b>Specify one user.</b>',
		).then(scheduleDeletion());
	}

	const theUser = targets.length && from.status === 'admin'
		? await getUser(strip(targets[0]))
		: from;

	if (!theUser) {
		return replyWithHTML(
			'❓ <b>User unknown.</b>',
		).then(scheduleDeletion());
	}

	if (flags.has('raw') && from.status === 'admin') {
		return replyWithHTML(
			TgHtml.pre(inspect(theUser)),
		).then(scheduleDeletion());
	}

	const header = html`${title(theUser)} ${displayUser(theUser)}`;
	const banReason = optional(
		html`🚫 <b>Ban reason:</b>`,
		' ',
		await formatEntry(theUser.ban_details, theUser.ban_reason || ''),
	);
	const { warns = [] } = theUser;
	const userWarns = optional(
		html`<b>⚠️ Warns:</b>`,
		'\n',
		TgHtml.join('\n', await Promise.all(warns.map(formatWarn))),
	);

	const firstSeen = optional(
		html`👀 <b>First seen:</b>`,
		' ',
		formatDate(theUser.createdAt),
	);

	const permitS = permit.isValid(theUser.permit)
		// eslint-disable-next-line max-len
		? `🎟 ${(await getUser({ id: theUser.permit.by_id })).first_name}, ${formatDate(theUser.permit.date)}`
		: '';

	const oneliners = TgHtml.join('\n', [
		header,
		firstSeen,
		permitS,
	].filter(isNotEmpty));

	return replyWithHTML(TgHtml.join('\n\n', [
		oneliners,
		userWarns,
		banReason,
	].filter(isNotEmpty))).then(scheduleDeletion());
};

module.exports = getWarnsHandler;

'''
'''--- handlers/commands/warn.js ---
'use strict';

// Utils
const { parse, strip, substom } = require('../../utils/cmd');
const { scheduleDeletion } = require('../../utils/tg');

// DB
const { getUser } = require('../../stores/user');

/** @param { import('../../typings/context').ExtendedContext } ctx */
const warnHandler = async (ctx) => {
	if (!ctx.message.chat.type.endsWith('group')) {
		return ctx.replyWithHTML(
			'ℹ️ <b>This command is only available in groups.</b>',
		);
	}

	if (ctx.from.status !== 'admin') return null;

	const { flags, reason, targets } = parse(ctx.message);

	if (targets.length !== 1) {
		return ctx.replyWithHTML(
			'ℹ️ <b>Specify one user to warn.</b>',
		).then(scheduleDeletion());
	}

	const userToWarn = await getUser(strip(targets[0]));

	if (!userToWarn) {
		return ctx.replyWithHTML(
			'❓ <b>User unknown.</b>\n' +
			'Please forward their message, then try again.',
		).then(scheduleDeletion());
	}

	if (userToWarn.id === ctx.botInfo.id) return null;

	if (userToWarn.status === 'admin') {
		return ctx.replyWithHTML('ℹ️ <b>Can\'t warn other admins.</b>');
	}

	if (reason.length === 0) {
		return ctx.replyWithHTML('ℹ️ <b>Need a reason to warn.</b>')
			.then(scheduleDeletion());
	}

	if (ctx.message.reply_to_message) {
		ctx.deleteMessage(ctx.message.reply_to_message.message_id)
			.catch(() => null);
	}

	return ctx.warn({
		admin: ctx.from,
		amend: flags.has('amend'),
		reason: await substom(reason),
		userToWarn,
		mode: 'manual',
	});
};

module.exports = warnHandler;

'''
'''--- handlers/middlewares/addedToGroup.ts ---
import { Context, Middleware } from "telegraf";
import { addGroup } from "../../stores/group";
import { admin } from "../../stores/user";
import { isMaster } from "../../utils/config";

const addedToGroupHandler: Middleware<Context> = async (ctx, next) => {
	const wasAdded = ctx.message?.new_chat_members?.some(
		(user) => user.username === ctx.me
	);
	if (wasAdded && isMaster(ctx.from)) {
		await admin(ctx.from!);
		const link = ctx.chat!.username
			? `https://t.me/${ctx.chat!.username.toLowerCase()}`
			: await ctx.exportChatInviteLink().catch(() => "");
		if (!link) {
			await ctx.replyWithHTML(
				"⚠️ <b>Failed to export chat invite link.</b>\n" +
					"Group won't be visible in /groups list.\n" +
					"\n" +
					"If this isn't your intention, " +
					"make sure I am permitted to export chat invite link, " +
					"and then run /showgroup."
			);
		}
		const { id, title, type } = ctx.chat!;
		await addGroup({ id, link, title, type });
		await ctx.replyWithHTML(
			"🛠 <b>Ok, I'll help you manage this group from now.</b>"
		);
	}

	return next();
};

export = addedToGroupHandler;

'''
'''--- handlers/middlewares/antibot.js ---
'use strict';

const { pMap } = require('../../utils/promise');

const link = user => '@' + user.username;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const antibotHandler = async (ctx, next) => {
	const msg = ctx.message;

	const bots = msg.new_chat_members.filter(user =>
		user.is_bot && user.username !== ctx.me);

	if (bots.length === 0) {
		return next();
	}

	if (ctx.from.status === 'admin') {
		return next();
	}

	await pMap(bots, bot =>
		ctx.kickChatMember(bot.id));

	await ctx.replyWithHTML(
		`🚫 <b>Kicked bot(s):</b> ${bots.map(link).join(', ')}`,
	);

	return next();
};

module.exports = antibotHandler;

'''
'''--- handlers/middlewares/checkLinks.ts ---
/* eslint new-cap: ["error", {"capIsNewExceptionPattern": "^(?:Action|jspack)\."}] */

import * as R from "ramda";
import { html, lrm } from "../../utils/html";
import { isAdmin, permit } from "../../stores/user";
import { config } from "../../utils/config";
import type { ExtendedContext } from "../../typings/context";
import fetch from "node-fetch";
import { jspack } from "jspack";
import { managesGroup } from "../../stores/group";
import type { MessageEntity } from "telegraf/typings/telegram-types";
import { pMap } from "../../utils/promise";
import { telegram } from "../../bot";
import { URL } from "url";
import XRegExp = require("xregexp");

const { excludeLinks = [], blacklistedDomains = [] } = config;

if (excludeLinks === false) {
	module.exports = (ctx, next) => next();
	// @ts-ignore
	return;
}

const tmeDomains = ["t.me", "telega.one", "telegram.dog", "telegram.me"];

const tmeDomainRegex = XRegExp.union(tmeDomains);

const normalizeTme = R.replace(
	XRegExp.tag("i")`^(?:@|(?:https?:\/\/)?${tmeDomainRegex}\/)(\w+)(\/.+)?`,
	(_match, username, rest) =>
		/^\/\d+$/.test(rest)
			? `https://t.me/${username.toLowerCase()}`
			: `https://t.me/${username.toLowerCase()}${rest || ""}`
);

const stripQuery = (s: string) => s.split("?", 1)[0];

const customWhitelist = new Set(excludeLinks.map(normalizeTme).map(stripQuery));

// eslint-disable-next-line @typescript-eslint/no-namespace
namespace Action {
	export enum Type {
		Nothing,
		Notify,
		Warn,
	}

	export type Nothing = { type: Type.Nothing };
	export type Notify = { type: Type.Notify; errorMsg: CodeError };
	export type Warn = { type: Type.Warn; reason: string };

	export const Nothing: Nothing = { type: Type.Nothing };
	export const Notify = (errorMsg: CodeError): Notify => ({
		type: Type.Notify,
		errorMsg,
	});
	export const Warn = (reason: string): Warn => ({
		type: Type.Warn,
		reason,
	});
}

type Action = Action.Nothing | Action.Notify | Action.Warn;

const actionPriority = (action: Action) => action.type;
const maxByActionPriority = R.maxBy(actionPriority);
const highestPriorityAction = R.reduce(maxByActionPriority, Action.Nothing);

const assumeProtocol = R.unless(R.contains("://"), R.concat("http://"));
const isHttp = R.propSatisfies(R.test(/^https?:$/i), "protocol");
const isLink = (entity: MessageEntity) =>
	["url", "text_link", "mention"].includes(entity.type);

const obtainUrlFromText = (text: string) => ({ length, offset, url = "" }) =>
	url ? url : text.slice(offset, length + offset);

const blacklisted = {
	protocol: (url: URL) =>
		url.protocol === "tg:" && url.host.toLowerCase() === "resolve",
};

const isPublic = async (username: string) => {
	try {
		const chat = await telegram.getChat(username);
		return chat.type !== "private";
	} catch (err) {
		return false;
	}
};

const inviteLinkToGroupID = (url: URL) => {
	if (url.pathname.toLowerCase().startsWith("/joinchat/")) {
		const [, groupID] = jspack.Unpack(
			">LLQ",
			Buffer.from(url.pathname.split("/")[2], "base64")
		);
		return groupID;
	}
	return null;
};

const managesLinkedGroup = (url: URL) => {
	const id = inviteLinkToGroupID(url);
	const superId = +`-100${id}`;
	const link = url.toString();
	return managesGroup({ $or: [{ id }, { id: superId }, { link }] });
};

const dh = {
	blacklistedDomain: R.always(
		Promise.resolve(Action.Warn("Link to a blacklisted domain"))
	),
	nothing: R.always(Promise.resolve(Action.Nothing)),
	tme: async (url: URL) => {
		if (url.pathname === "/") return Action.Nothing;
		if (url.pathname.toLowerCase().startsWith("/c/")) return Action.Nothing;
		if (url.pathname.toLowerCase().startsWith("/addstickers/")) {
			return Action.Nothing;
		}
		if (url.searchParams.has("start")) return Action.Warn("Bot reflink");
		if (await managesLinkedGroup(url)) return Action.Nothing;
		const [, username] = R.match(/^\/(\w+)(?:\/\d*)?$/, url.pathname);
		if (username && !(await isPublic("@" + username))) return Action.Nothing;
		return Action.Warn("Link to a Telegram group or channel");
	},
};

const domainHandlers = new Map([
	...tmeDomains.map((domain) => [domain, dh.tme] as const),
	...blacklistedDomains.map(
		(domain) => [domain, dh.blacklistedDomain] as const
	),
]);

const isWhitelisted = (url: URL) =>
	customWhitelist.has(stripQuery(url.toString()));

class CodeError extends Error {
	constructor(readonly code: string) {
		super(code);
	}
}

const unshorten = (url: URL | string) =>
	fetch(url, { redirect: "follow" }).then((res) =>
		res.ok
			? new URL(normalizeTme(res.url))
			: Promise.reject(new CodeError(`${res.status} ${res.statusText}`))
	);

const checkLinkByDomain = (url: URL) => {
	const domain = url.host.toLowerCase();
	const handler = domainHandlers.get(domain) || dh.nothing;
	return handler(url);
};

const classifyAsync = R.memoize(async (url: URL) => {
	if (isWhitelisted(url)) return Action.Nothing;

	if (blacklisted.protocol(url)) return Action.Warn("Link using tg protocol");

	if (domainHandlers.has(url.host.toLowerCase())) return checkLinkByDomain(url);

	if (!isHttp(url)) return Action.Nothing;

	try {
		const longUrl = await unshorten(url);
		if (isWhitelisted(longUrl)) return Action.Nothing;
		return checkLinkByDomain(longUrl);
	} catch (e) {
		e.url = url;
		return Action.Notify(e);
	}
});

const classifyList = (urls: URL[]) =>
	pMap(urls, classifyAsync).then(highestPriorityAction);

const matchTmeLinks = R.match(XRegExp.tag("gi")`\b${tmeDomainRegex}\/[\w-/]+`);

const maybeProp = (prop) => (o) => (R.has(prop, o) ? [o[prop]] : []);

const buttonUrls = R.pipe(
	R.path(["reply_markup", "inline_keyboard"]),
	R.defaultTo([]),
	// @ts-ignore
	// eslint-disable-next-line @typescript-eslint/unbound-method
	R.unnest,
	R.chain(maybeProp("url"))
);

const classifyCtx = (ctx: ExtendedContext) => {
	if (!ctx.chat?.type.endsWith("group")) return Action.Nothing;

	const message = ctx.message || ctx.editedMessage;

	if (!message) return Action.Nothing;

	const entities = message.entities || message.caption_entities || [];

	const text = message.text || message.caption || "";

	const rawUrls = entities
		.filter(isLink)
		.map(obtainUrlFromText(text))
		.concat(buttonUrls(message))
		.concat(matchTmeLinks(text));

	const urls = R.uniq(rawUrls)
		.map(normalizeTme)
		.map(assumeProtocol)
		.map((url) => new URL(url));

	return classifyList(urls);
};

export = async (ctx: ExtendedContext, next) => {
	const action = await classifyCtx(ctx);

	if (action.type === Action.Type.Warn) {
		const userToWarn = ctx.from!;

		if (userToWarn.id === 777000) return next();
		if (await isAdmin(userToWarn)) return next();

		if (await permit.revoke(userToWarn)) {
			await ctx.replyWithHTML(html`
				${lrm}${userToWarn.first_name} used 🎟 permit!
			`);
			return next();
		}

		ctx.deleteMessage().catch(() => null);
		return ctx.warn({
			admin: ctx.botInfo!,
			reason: action.reason,
			userToWarn,
			mode: "auto",
		});
	}

	return next();
};

'''
'''--- handlers/middlewares/commandButtons.js ---
'use strict';

const { Context } = require('telegraf');

/** @type { import('../../typings/context').ContextExtensions } */
const contextCustomizations = require('../../bot/context');

/** @param { import('telegraf').Context } ctx */
module.exports = (ctx, next) => {
	if (!ctx.callbackQuery) return next();
	if (!ctx.callbackQuery.data.startsWith('/')) return next();

	const cbUpdate = {
		message: {
			from: ctx.from,
			chat: ctx.chat,
			text: ctx.callbackQuery.data,
			entities: [ { offset: 0, type: 'bot_command' } ],
		},
	};

	/** @type { import('../../typings/context').ExtendedContext } */
	const cbCtx = new Context(cbUpdate, ctx.tg, ctx.options);
	Object.assign(cbCtx, contextCustomizations);
	cbCtx.botInfo = ctx.botInfo;

	cbCtx.reply = ctx.editMessageText;

	return next(cbCtx);
};

'''
'''--- handlers/middlewares/index.js ---
// @ts-check
'use strict';

const { Composer } = require('telegraf');

/**
 * @typedef {import('../../typings/context').ExtendedContext} ExtendedContext
 * @type {import('telegraf').Composer<ExtendedContext>}
 */
const composer = new Composer();

const { deleteAfter } = require('../../utils/tg');
const { deleteJoinsAfter = '2 minutes' } = require('../../utils/config').config;

const addedToGroupHandler = require('./addedToGroup');
const antibotHandler = require('./antibot');
const checkLinksHandler = require('./checkLinks');
const commandButtons = require('./commandButtons');
const kickBannedHandler = require('./kickBanned');
const kickedFromGroupHandler = require('./kickedFromGroup');
const leaveUnmanagedHandler = require('./leaveUnmanaged');
const monkeyPatchHandler = require('./monkeyPatch');
const presenceLogHandler = require('./logPresence');
const removeChannelForwardsHandler = require('./removeChannelForwards');
const removeCommandsHandler = require('./removeCommands');
const reportHandled = require('./reportHandled');
const syncStatusHandler = require('./syncStatus');
const updateUserDataHandler = require('./updateUserData');
const updateGroupTitleHandler = require('./updateGroupTitle');

composer.on('new_chat_members', addedToGroupHandler);
composer.on('left_chat_member', kickedFromGroupHandler);
composer.use(leaveUnmanagedHandler);
composer.use(monkeyPatchHandler);
composer.use(updateUserDataHandler);

composer.on('new_chat_members', syncStatusHandler, antibotHandler);
composer.on('message', kickBannedHandler);
composer.use(removeChannelForwardsHandler);
composer.on([ 'edited_message', 'message' ], checkLinksHandler);
composer.on('new_chat_title', updateGroupTitleHandler);
composer.on('text', removeCommandsHandler);
composer.on(
	[ 'new_chat_members', 'left_chat_member' ],
	deleteAfter(deleteJoinsAfter),
	presenceLogHandler,
);
composer.action(
	/^\/del -chat_id=(-\d+) -msg_id=(\d+) Report handled/,
	reportHandled,
);
composer.on('callback_query', commandButtons);

module.exports = composer;

'''
'''--- handlers/middlewares/kickBanned.js ---
'use strict';

const noop = Function.prototype;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const kickBannedHandler = (ctx, next) => {
	if (!ctx.chat.type.endsWith('group')) {
		return next();
	}
	if (ctx.from.status === 'banned') {
		ctx.deleteMessage().catch(noop);
		return ctx.kickChatMember(ctx.from.id)
			.catch(err => ctx.reply(`⚠️ kickBanned: ${err}`));
	}
	return next();
};

module.exports = kickBannedHandler;

'''
'''--- handlers/middlewares/kickedFromGroup.js ---
'use strict';

const { removeGroup } = require('../../stores/group');

/** @param { import('telegraf').ContextMessageUpdate } ctx */
const kickedFromGroupHandler = (ctx, next) => {
	if (ctx.message.left_chat_member.username !== ctx.me) {
		return next();
	}
	return removeGroup(ctx.chat);
};

module.exports = kickedFromGroupHandler;

'''
'''--- handlers/middlewares/leaveUnmanaged.js ---
'use strict';

const { managesGroup, migrateGroup } = require('../../stores/group');

const { chats = {} } = require('../../utils/config').config;

const pkg = require('../../package.json');

const caption = `\
Sorry, you need to set up your own instance \
to use me in your group or a network of groups.

If you don't wish to self host, \
you can try @MissRose_bot instead.
`;

const inline_keyboard = [ [ {
	text: '🛠 Setup a New Bot',
	url: pkg.homepage,
} ] ];

const reply_markup = JSON.stringify({ inline_keyboard });

const gifIds = [
	'xTk9ZBWrma4PIC9y4E',
	'l2Sqc3POpzkj5r8SQ',
	'StaMzjNkq5PqM',
	'fjYDN5flDJ756',
	'3XiQswSmbjBiU',
];

const gifs = gifIds.map(x => `https://media.giphy.com/media/${x}/giphy.gif`);

/**
 * @template T
 * @param {Array<T>} arr
 */
const randomChoice = arr => arr[Math.floor(Math.random() * arr.length)];

/** @param { import('telegraf').Context } ctx */
const leaveUnmanagedHandler = async (ctx, next) => {
	if (!ctx.message) return next();
	if (ctx.message.migrate_from_chat_id) {
		return migrateGroup(ctx.message.migrate_from_chat_id, ctx.chat.id);
	}

	if (
		ctx.chat.type === 'private' ||
		Object.values(chats).includes(ctx.chat.id) ||
		await managesGroup({ id: ctx.chat.id })) {
		return next();
	}

	try {
		await ctx.replyWithVideo(randomChoice(gifs), { caption, reply_markup });
	} catch (err) {
		// do nothing
	}
	await ctx.telegram.leaveChat(ctx.chat.id);
	return next();
};

module.exports = leaveUnmanagedHandler;

'''
'''--- handlers/middlewares/logPresence.js ---
'use strict';

const { chats = {} } = require('../../utils/config').config;

function getUserLink(user) {
	const lastName = user.last_name ? ` ${user.last_name}` : '';
	const username = user.username ? ` @${user.username}` : '';
	return `<a href="tg://user?id=${user.id}">${user.first_name}${lastName}${username}</a>`;
}

function getId(user) {
	return user.id;
}

/** @param { import('../../typings/context').ExtendedContext } ctx */
function log(ctx, next) {
	if (!chats.presenceLog) return next();
	if (ctx.updateSubTypes[0] === 'new_chat_members') {
		ctx.telegram
			.sendMessage(
				chats.presenceLog,
				ctx.message.new_chat_members.map(getUserLink).join(', ') +
					' #joined ' +
					ctx.chat.title,
				{
					parse_mode: 'HTML',
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: `🚫 Ban ${ctx.message.new_chat_members.length}`,
									callback_data: `/ban ${ctx.message.new_chat_members
										.map(getId)
										.join(' ')} [joining]`,
								},
							],
						],
					},
				}
			)
			.catch(() => null);
	}
	return next();
}
module.exports = log;

'''
'''--- handlers/middlewares/monkeyPatch.js ---
'use strict';

const { telegram } = require('../../bot');

const msgAlreadyDeleted = 'Bad Request: message to delete not found';

/** @param { import('telegraf').Context } ctx */
module.exports = (ctx, next) => {
	ctx.tg.deleteMessage = async (chat_id, message_id) => {
		try {
			return await ctx.tg.callApi('deleteMessage', {
				chat_id,
				message_id,
			});
		} catch (err) {
			if (err.description === msgAlreadyDeleted) {
				return false;
			}
			throw err;
		}
	};
	telegram.deleteMessage = ctx.tg.deleteMessage;
	ctx.tg.sendMessage = (chat_id, text, extra) =>
		ctx.tg.callApi('sendMessage', {
			disable_web_page_preview: true,
			chat_id,
			text,
			...extra,
		});
	return next();
};

'''
'''--- handlers/middlewares/removeChannelForwards.js ---
'use strict';

const R = require('ramda');
const { optional, passThru } = require('telegraf');

const { permit } = require('../../stores/user');

const { html, lrm } = require('../../utils/html');
const { excludeLinks = [] } = require('../../utils/config').config;

if (excludeLinks === false || excludeLinks === '*') {
	module.exports = passThru();
	return;
}

const isChannelForward = R.pathEq(
	[ 'message', 'forward_from_chat', 'type' ],
	'channel',
);
const fromAdmin = R.pathEq([ 'from', 'status' ], 'admin');

const inGroup = ctx => ctx.chat.type.endsWith('group');

const capturingGroups = R.tail;

const toUsername = R.compose(
	capturingGroups,
	R.match(/^(?:@|(?:https?:\/\/)?(?:t\.me|telegram\.(?:me|dog))\/)(\w+)/i),
);

const customWhitelist = R.pipe(
	R.chain(toUsername),
	R.map(R.toLower),
	R.constructN(1, Set),
)(excludeLinks);

const isWhitelisted = username => customWhitelist.has(username.toLowerCase());

const fromWhitelisted = ctx =>
	isWhitelisted(ctx.message.forward_from_chat.username || '');

const pred = R.allPass([
	inGroup,
	isChannelForward,
	R.complement(fromAdmin),
	R.complement(fromWhitelisted),
]);

/** @param { import('../../typings/context').ExtendedContext } ctx */
const handler = async (ctx, next) => {
	if (await permit.revoke(ctx.from)) {
		await ctx.replyWithHTML(html`${lrm}${ctx.from.first_name} used 🎟 permit!`);
		return next();
	}

	ctx.deleteMessage().catch(() => null);
	return ctx.warn({
		admin: ctx.botInfo,
		reason: 'Channel forward',
		userToWarn: ctx.from,
		mode: 'auto',
	});
};

module.exports = optional(pred, handler);

'''
'''--- handlers/middlewares/removeCommands.js ---
'use strict';

const { deleteCommands = 'own' } = require('../../utils/config').config;
const { isCommand } = require('../../utils/tg.js');
const { unmatched } = require('../unmatched');

const shouldDelete = {
	all: () => true,
	none: () => false,
	own: ctx => !ctx.state[unmatched],
};

if (!(deleteCommands in shouldDelete)) {
	throw new Error('Invalid value for `deleteCommands` in config file: ' +
		deleteCommands);
}

const noop = Function.prototype;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const removeCommandsHandler = async (ctx, next) => {
	await next();
	if (
		shouldDelete[deleteCommands](ctx) &&
		isCommand(ctx.message) &&
		ctx.chat.type !== 'private'
	) {
		ctx.deleteMessage().catch(noop);
	}
};

module.exports = removeCommandsHandler;

'''
'''--- handlers/middlewares/reportHandled.ts ---
import type { ExtendedContext } from "../../typings/context";

export = (ctx: ExtendedContext) => {
	if (ctx.from?.status !== "admin") {
		return ctx.answerCbQuery("✋ Not permitted!", false, { cache_time: 600 });
	}

	const [, chatId, msgId] = ctx.match!;

	return Promise.all([
		ctx.deleteMessage(),
		ctx.tg.deleteMessage(+chatId, +msgId),
	]);
};

'''
'''--- handlers/middlewares/syncStatus.js ---
'use strict';

const ms = require('millisecond');
const spamwatch = require('../../utils/spamwatch');
const { getUser } = require('../../stores/user');
const { pMap } = require('../../utils/promise');

/**
 * @param { import('../../typings/context').ExtendedContext } ctx
 * @param { import('telegraf/typings/telegram-types').User } newMember
 */
const handleNewMember = async (ctx, newMember) => {
	if (await spamwatch.shouldKick(newMember)) {
		const until_date = (Date.now() + ms('24h')) / 1000;
		return ctx.kickChatMember(newMember.id, until_date);
	}

	return null;
};

/** @param { import('../../typings/context').ExtendedContext } ctx */
const syncStatusHandler = (ctx, next) => {
	pMap(ctx.message.new_chat_members, async newMember => {
		if (newMember.is_bot) {
			return null;
		}

		const dbUser = await getUser({ id: newMember.id });
		const { status = 'member' } = dbUser || {};

		switch (status) {
		case 'admin':
			return ctx.promoteChatMember(newMember.id, {
				can_change_info: false,
				can_delete_messages: true,
				can_invite_users: true,
				can_pin_messages: true,
				can_promote_members: false,
				can_restrict_members: true,
			});
		case 'banned':
			return ctx.kickChatMember(newMember.id);
		case 'member':
			return handleNewMember(ctx, newMember);
		default:
			throw new Error(`Unexpected member status: ${dbUser.status}`);
		}
	}).catch(() => null);

	return next();
};

module.exports = syncStatusHandler;

'''
'''--- handlers/middlewares/updateGroupTitle.js ---
'use strict';

const { updateGroup } = require('../../stores/group');

/** @param { import('../../typings/context').ExtendedContext } ctx */
module.exports = (ctx, next) => {
	const { id, title } = ctx.chat;
	updateGroup({ id, title });
	return next(); // just in case there's a plugin listening for the same event
};

'''
'''--- handlers/middlewares/updateUserData.js ---
'use strict';

const { isMaster } = require('../../utils/config');

// DB
const { updateUser } = require('../../stores/user');

/** @param { import('telegraf').ContextMessageUpdate } ctx */
const updateUserDataHandler = async (ctx, next) => {
	if (ctx.message && ctx.message.forward_from) {
		updateUser(ctx.message.forward_from).catch(() => null);
	}

	const { entities = [] } = ctx.message || {};

	await Promise.all(entities.map(({ user }) => user && updateUser(user)));

	if (!ctx.from) return next();

	const user = await updateUser(ctx.from);

	Object.defineProperty(ctx, 'from', { value: { ...user, ...ctx.from } });

	ctx.state = {
		isAdmin: user && user.status === 'admin',
		isMaster: isMaster(ctx.from),
		user,
	};

	return next();
};

module.exports = updateUserDataHandler;

'''
'''--- handlers/regex/groupLinker.js ---
'use strict';

const { hears } = require('telegraf');
const XRegExp = require('xregexp');

const { managesGroup } = require.main.require('./stores/group');

const { replyId } = require('../../utils/tg');

const regex = XRegExp.tag('ix')`^
	(?<groupName>.+?)
	\s(?:chat|gro?u?p)(?:\slink)?
	(?:,?\sple?a?[sz]e?)?
	\s*\?*
$`;

/** @param { import('../../typings/context').ExtendedContext } ctx */
const handler = async (ctx, next) => {
	let [ , groupName ] = ctx.match;
	if (groupName.toLowerCase() === 'this') {
		if (!ctx.chat.title) return next();
		groupName = ctx.chat.title;
	}

	const $regex = XRegExp.tag('nix')`(^|/\s?)
		(the\s)?${groupName}(\sgroup|\schat)?
	($|\s?/)`;

	const group = await managesGroup({ title: { $regex } });
	const { link } = group || {};

	if (!link) return next();

	return ctx.reply(link, {
		disable_web_page_preview: false,
		reply_to_message_id: replyId(ctx.message),
	});
};

module.exports = hears(regex, handler);

'''
'''--- handlers/regex/index.js ---
'use strict';

const { compose, hears } = require('telegraf');

/* eslint-disable global-require */

module.exports = compose([
	hears(/^(?:!report|[@!]admins?)\b/i, require('../commands/report')),
	require('./runCustomCmd'),
	require('./groupLinker'),
]);

'''
'''--- handlers/regex/runCustomCmd.js ---
'use strict';

const { hears } = require('telegraf');
const R = require('ramda');

// DB
const { getCommand } = require('../../stores/command');

const { scheduleDeletion } = require('../../utils/tg');

const { isMaster } = require('../../utils/config');

const { config } = require('../../utils/config');

const deleteCustom = config.deleteCustom || { longerThan: Infinity };

const capitalize = R.replace(/^./, R.toUpper);

const getRepliedToId = R.path([ 'reply_to_message', 'message_id' ]);

const typeToMethod = type =>
	type === 'text'
		? 'replyWithHTML'
		: `replyWith${capitalize(type)}`;

const autoDelete = ({ content, type }) => {
	switch (type) {
	case 'text':
		return content.length > deleteCustom.longerThan;
	case 'copy':
		return (content.text || '').length > deleteCustom.longerThan;
	default:
		return false;
	}
};

const hasRole = (role, from) => {
	switch (role.toLowerCase()) {
	case 'master':
		return isMaster(from);
	case 'admins':
		return from && from.status === 'admin';
	default:
		return true;
	}
};

/** @param { import('../../typings/context').ExtendedContext } ctx */
const runCustomCmdHandler = async (ctx, next) => {
	const commandName = ctx.match[1].toLowerCase();
	const command = await getCommand({ isActive: true, name: commandName });

	if (!command || !hasRole(command.role, ctx.from)) {
		return next();
	}

	const { caption, content, type } = command;

	const options = {
		...caption && { caption },
		disable_web_page_preview: true,
		reply_to_message_id: getRepliedToId(ctx.message),
	};

	return ctx[typeToMethod(type)](content, options)
		.then(scheduleDeletion(autoDelete(command) && deleteCustom.after));
};

module.exports = hears(/^! ?(\w+)/, runCustomCmdHandler);

'''
'''--- handlers/unmatched.js ---
'use strict';

/** @param { import('../typings/context').ExtendedContext } ctx */
const unmatchedHandler = async ctx => {
	ctx.state[unmatchedHandler.unmatched] = true;
	if (ctx.chat && ctx.chat.type === 'private') {
		await ctx.reply(
			'Sorry, I couldn\'t understand that, do you need /help?',
		);
	}
};

unmatchedHandler.unmatched = Symbol('unmatchedHandler.unmatched');

module.exports = unmatchedHandler;

'''
'''--- index.js ---
// @ts-check
'use strict';

process.chdir(__dirname);
require('ts-node').register({ transpileOnly: true });

// Utils
const { logError } = require('./utils/log');

const bot = require('./bot');

bot.use(
	require('./handlers/middlewares'),
	require('./plugins'),
	require('./handlers/commands'),
	require('./handlers/regex'),
	require('./handlers/unmatched'),
);

bot.catch(logError);

// eslint-disable-next-line @typescript-eslint/no-floating-promises
bot.launch();

'''
'''--- package-lock.json ---
{
  "name": "the_guard_bot",
  "version": "1.4.0",
  "lockfileVersion": 1,
  "requires": true,
  "dependencies": {
    "@babel/code-frame": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.8.3.tgz",
      "integrity": "sha512-a9gxpmdXtZEInkCSHUJDLHZVBgb1QS0jhss4cPP93EW7s+uC5bikET2twEF3KV+7rDblJcmNvTR7VJejqd2C2g==",
      "dev": true,
      "requires": {
        "@babel/highlight": "^7.8.3"
      }
    },
    "@babel/helper-validator-identifier": {
      "version": "7.9.5",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.9.5.tgz",
      "integrity": "sha512-/8arLKUFq882w4tWGj9JYzRpAlZgiWUJ+dtteNTDqrRBz9Iguck9Rn3ykuBDoUwh2TO4tSAJlrxDUOXWklJe4g==",
      "dev": true
    },
    "@babel/highlight": {
      "version": "7.9.0",
      "resolved": "https://registry.npmjs.org/@babel/highlight/-/highlight-7.9.0.tgz",
      "integrity": "sha512-lJZPilxX7Op3Nv/2cvFdnlepPXDxi29wxteT57Q965oc5R9v86ztx0jfxVrTcBk8C2kcPkkDa2Z4T3ZsPPVWsQ==",
      "dev": true,
      "requires": {
        "@babel/helper-validator-identifier": "^7.9.0",
        "chalk": "^2.0.0",
        "js-tokens": "^4.0.0"
      }
    },
    "@babel/runtime-corejs3": {
      "version": "7.9.6",
      "resolved": "https://registry.npmjs.org/@babel/runtime-corejs3/-/runtime-corejs3-7.9.6.tgz",
      "integrity": "sha512-6toWAfaALQjt3KMZQc6fABqZwUDDuWzz+cAfPhqyEnzxvdWOAkjwPNxgF8xlmo7OWLsSjaKjsskpKHRLaMArOA==",
      "requires": {
        "core-js-pure": "^3.0.0",
        "regenerator-runtime": "^0.13.4"
      }
    },
    "@types/color-name": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@types/color-name/-/color-name-1.1.1.tgz",
      "integrity": "sha512-rr+OQyAjxze7GgWrSaJwydHStIhHq2lvY3BOC2Mj7KnzI7XK0Uw1TOOdI9lDoajEbSWLiYgoo4f1R51erQfhPQ==",
      "dev": true
    },
    "@types/eslint-visitor-keys": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/@types/eslint-visitor-keys/-/eslint-visitor-keys-1.0.0.tgz",
      "integrity": "sha512-OCutwjDZ4aFS6PB1UZ988C4YgwlBHJd6wCeQqaLdmadZ/7e+w79+hbMUFC1QXDNCmdyoRfAFdm0RypzwR+Qpag==",
      "dev": true
    },
    "@types/json-schema": {
      "version": "7.0.4",
      "resolved": "https://registry.npmjs.org/@types/json-schema/-/json-schema-7.0.4.tgz",
      "integrity": "sha512-8+KAKzEvSUdeo+kmqnKrqgeE+LcA0tjYWFY7RPProVYwnqDjukzO+3b6dLD56rYX5TdWejnEOLJYOIeh4CXKuA==",
      "dev": true
    },
    "@types/node": {
      "version": "13.13.4",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-13.13.4.tgz",
      "integrity": "sha512-x26ur3dSXgv5AwKS0lNfbjpCakGIduWU1DU91Zz58ONRWrIKGunmZBNv4P7N+e27sJkiGDsw/3fT4AtsqQBrBA==",
      "dev": true
    },
    "@types/node-fetch": {
      "version": "2.5.7",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.5.7.tgz",
      "integrity": "sha512-o2WVNf5UhWRkxlf6eq+jMZDu7kjgpgJfl4xVNlvryc95O/6F2ld8ztKX+qu+Rjyet93WAWm5LjeX9H5FGkODvw==",
      "dev": true,
      "requires": {
        "@types/node": "*",
        "form-data": "^3.0.0"
      }
    },
    "@types/ramda": {
      "version": "0.25.51",
      "resolved": "https://registry.npmjs.org/@types/ramda/-/ramda-0.25.51.tgz",
      "integrity": "sha512-xcmtfHIgF9SYjhGdsZR1nQslxG4hu0cIpFfLQ4CWdw3KzHvl7ki1AzFLQUkbDTG42ZN3ZsQfdRzXRlkAvbIy5Q==",
      "dev": true
    },
    "@types/xregexp": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/@types/xregexp/-/xregexp-4.3.0.tgz",
      "integrity": "sha512-3gJTS9gt27pS7U9q5IVqo4YvKSlkf2ck8ish6etuDj6LIRxkL/2Y8RMUtK/QzvE1Yv2zwWV5yemI2BS0GGGFnA==",
      "dev": true
    },
    "@typescript-eslint/eslint-plugin": {
      "version": "2.31.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/eslint-plugin/-/eslint-plugin-2.31.0.tgz",
      "integrity": "sha512-iIC0Pb8qDaoit+m80Ln/aaeu9zKQdOLF4SHcGLarSeY1gurW6aU4JsOPMjKQwXlw70MvWKZQc6S2NamA8SJ/gg==",
      "dev": true,
      "requires": {
        "@typescript-eslint/experimental-utils": "2.31.0",
        "functional-red-black-tree": "^1.0.1",
        "regexpp": "^3.0.0",
        "tsutils": "^3.17.1"
      }
    },
    "@typescript-eslint/experimental-utils": {
      "version": "2.31.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/experimental-utils/-/experimental-utils-2.31.0.tgz",
      "integrity": "sha512-MI6IWkutLYQYTQgZ48IVnRXmLR/0Q6oAyJgiOror74arUMh7EWjJkADfirZhRsUMHeLJ85U2iySDwHTSnNi9vA==",
      "dev": true,
      "requires": {
        "@types/json-schema": "^7.0.3",
        "@typescript-eslint/typescript-estree": "2.31.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^2.0.0"
      }
    },
    "@typescript-eslint/parser": {
      "version": "2.31.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/parser/-/parser-2.31.0.tgz",
      "integrity": "sha512-uph+w6xUOlyV2DLSC6o+fBDzZ5i7+3/TxAsH4h3eC64tlga57oMb96vVlXoMwjR/nN+xyWlsnxtbDkB46M2EPQ==",
      "dev": true,
      "requires": {
        "@types/eslint-visitor-keys": "^1.0.0",
        "@typescript-eslint/experimental-utils": "2.31.0",
        "@typescript-eslint/typescript-estree": "2.31.0",
        "eslint-visitor-keys": "^1.1.0"
      }
    },
    "@typescript-eslint/typescript-estree": {
      "version": "2.31.0",
      "resolved": "https://registry.npmjs.org/@typescript-eslint/typescript-estree/-/typescript-estree-2.31.0.tgz",
      "integrity": "sha512-vxW149bXFXXuBrAak0eKHOzbcu9cvi6iNcJDzEtOkRwGHxJG15chiAQAwhLOsk+86p9GTr/TziYvw+H9kMaIgA==",
      "dev": true,
      "requires": {
        "debug": "^4.1.1",
        "eslint-visitor-keys": "^1.1.0",
        "glob": "^7.1.6",
        "is-glob": "^4.0.1",
        "lodash": "^4.17.15",
        "semver": "^6.3.0",
        "tsutils": "^3.17.1"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        }
      }
    },
    "acorn": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-7.1.1.tgz",
      "integrity": "sha512-add7dgA5ppRPxCFJoAGfMDi7PIBXq1RtGo7BhbLaxwrXPOmw8gq48Y9ozT01hUKy9byMjlR20EJhu5zlkErEkg==",
      "dev": true
    },
    "acorn-jsx": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/acorn-jsx/-/acorn-jsx-5.2.0.tgz",
      "integrity": "sha512-HiUX/+K2YpkpJ+SzBffkM/AQ2YE03S0U1kjTLVpoJdhZMOWy8qvXVN9JdLqv2QsaQ6MPYQIuNmwD8zOiYUofLQ==",
      "dev": true
    },
    "ajv": {
      "version": "6.12.2",
      "resolved": "https://registry.npmjs.org/ajv/-/ajv-6.12.2.tgz",
      "integrity": "sha512-k+V+hzjm5q/Mr8ef/1Y9goCmlsK4I6Sm74teeyGvFk1XrOsbsKLjEdrvny42CZ+a8sXbk8KWpY/bDwS+FLL2UQ==",
      "dev": true,
      "requires": {
        "fast-deep-equal": "^3.1.1",
        "fast-json-stable-stringify": "^2.0.0",
        "json-schema-traverse": "^0.4.1",
        "uri-js": "^4.2.2"
      }
    },
    "ansi-escapes": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.1.tgz",
      "integrity": "sha512-JWF7ocqNrp8u9oqpgV+wH5ftbt+cfvv+PTjOvKLT3AdYly/LmORARfEVT1iyjwN+4MqE5UmVKoAdIBqeoCHgLA==",
      "dev": true,
      "requires": {
        "type-fest": "^0.11.0"
      },
      "dependencies": {
        "type-fest": {
          "version": "0.11.0",
          "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.11.0.tgz",
          "integrity": "sha512-OdjXJxnCN1AvyLSzeKIgXTXxV+99ZuXl3Hpo9XpJAv9MBcHrrJOQ5kV7ypXOuQie+AmWG25hLbiKdwYTifzcfQ==",
          "dev": true
        }
      }
    },
    "ansi-regex": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.0.tgz",
      "integrity": "sha512-bY6fj56OUQ0hU1KjFNDQuJFezqKdrAyFdIevADiqrWHwSlbmBNMHp5ak2f40Pm8JTFyM2mqxkG6ngkHO11f/lg==",
      "dev": true
    },
    "ansi-styles": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-3.2.1.tgz",
      "integrity": "sha512-VT0ZI6kZRdTh8YyJw3SMbYm/u+NqfsAxEpWO0Pf9sq8/e94WxxOpPKx9FR1FlyCtOVDNOQ+8ntlqFxiRc+r5qA==",
      "dev": true,
      "requires": {
        "color-convert": "^1.9.0"
      }
    },
    "any-promise": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/any-promise/-/any-promise-1.3.0.tgz",
      "integrity": "sha1-q8av7tzqUugJzcA3au0845Y10X8="
    },
    "arg": {
      "version": "4.1.3",
      "resolved": "https://registry.npmjs.org/arg/-/arg-4.1.3.tgz",
      "integrity": "sha512-58S9QDqG0Xx27YwPSt9fJxivjYl432YCwfDMfZ+71RAqUrZef7LrKQZ3LHLOwCS4FLNBplP533Zx895SeOCHvA=="
    },
    "argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "dev": true,
      "requires": {
        "sprintf-js": "~1.0.2"
      }
    },
    "astral-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/astral-regex/-/astral-regex-1.0.0.tgz",
      "integrity": "sha512-+Ryf6g3BKoRc7jfp7ad8tM4TtMiaWvbF/1/sQcZPkkS7ag3D5nMBCe2UfOTONtAkaG0tO0ij3C5Lwmf1EiyjHg==",
      "dev": true
    },
    "async": {
      "version": "0.2.10",
      "resolved": "https://registry.npmjs.org/async/-/async-0.2.10.tgz",
      "integrity": "sha1-trvgsGdLnXGXCMo43owjfLUmw9E="
    },
    "asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha1-x57Zf380y48robyXkLzDZkdLS3k=",
      "dev": true
    },
    "axios": {
      "version": "0.19.2",
      "resolved": "https://registry.npmjs.org/axios/-/axios-0.19.2.tgz",
      "integrity": "sha512-fjgm5MvRHLhx+osE2xoekY70AhARk3a6hkN+3Io1jc00jtquGvxYlKlsFUhmUET0V5te6CcZI7lcv2Ym61mjHA==",
      "requires": {
        "follow-redirects": "1.5.10"
      }
    },
    "balanced-match": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.0.tgz",
      "integrity": "sha1-ibTRmasr7kneFk6gK4nORi1xt2c=",
      "dev": true
    },
    "binary-search-tree": {
      "version": "0.2.5",
      "resolved": "https://registry.npmjs.org/binary-search-tree/-/binary-search-tree-0.2.5.tgz",
      "integrity": "sha1-fbs7IQ/coIJFDa0jNMMErzm9x4Q=",
      "requires": {
        "underscore": "~1.4.4"
      }
    },
    "brace-expansion": {
      "version": "1.1.11",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz",
      "integrity": "sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==",
      "dev": true,
      "requires": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "buffer-from": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.1.tgz",
      "integrity": "sha512-MQcXEUbCKtEo7bhqEs6560Hyd4XaovZlO/k9V3hjVUF/zwW7KBVdSK4gIt/bzwS9MbR5qob+F5jusZsb0YQK2A=="
    },
    "callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "dev": true
    },
    "chalk": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-2.4.2.tgz",
      "integrity": "sha512-Mti+f9lpJNcwF4tWV8/OrTTtF1gZi+f8FqlyAdouralcFWFQWF2+NgCHShjkCb+IFBLq9buZwE1xckQU4peSuQ==",
      "dev": true,
      "requires": {
        "ansi-styles": "^3.2.1",
        "escape-string-regexp": "^1.0.5",
        "supports-color": "^5.3.0"
      }
    },
    "chardet": {
      "version": "0.7.0",
      "resolved": "https://registry.npmjs.org/chardet/-/chardet-0.7.0.tgz",
      "integrity": "sha512-mT8iDcrh03qDGRRmoA2hmBJnxpllMR+0/0qlzjqZES6NdiWDcZkCNAk4rPFZ9Q85r27unkiNNg8ZOiwZXBHwcA==",
      "dev": true
    },
    "cli-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/cli-cursor/-/cli-cursor-3.1.0.tgz",
      "integrity": "sha512-I/zHAwsKf9FqGoXM4WWRACob9+SNukZTd94DWF57E4toouRulbCxcUh6RKUEOQlYTHJnzkPMySvPNaaSLNfLZw==",
      "dev": true,
      "requires": {
        "restore-cursor": "^3.1.0"
      }
    },
    "cli-width": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/cli-width/-/cli-width-2.2.1.tgz",
      "integrity": "sha512-GRMWDxpOB6Dgk2E5Uo+3eEBvtOOlimMmpbFiKuLFnQzYDavtLFY3K5ona41jgN/WdRZtG7utuVSVTL4HbZHGkw==",
      "dev": true
    },
    "color-convert": {
      "version": "1.9.3",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-1.9.3.tgz",
      "integrity": "sha512-QfAUtd+vFdAtFQcC8CCyYt1fYWxSqAiK2cSD6zDB8N3cpsEBAvRxp9zOGg6G/SHHJYAT88/az/IuDGALsNVbGg==",
      "dev": true,
      "requires": {
        "color-name": "1.1.3"
      }
    },
    "color-name": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.3.tgz",
      "integrity": "sha1-p9BVi9icQveV3UIyj3QIMcpTvCU=",
      "dev": true
    },
    "combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "dev": true,
      "requires": {
        "delayed-stream": "~1.0.0"
      }
    },
    "concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha1-2Klr13/Wjfd5OnMDajug1UBdR3s=",
      "dev": true
    },
    "core-js-pure": {
      "version": "3.6.5",
      "resolved": "https://registry.npmjs.org/core-js-pure/-/core-js-pure-3.6.5.tgz",
      "integrity": "sha512-lacdXOimsiD0QyNf9BC/mxivNJ/ybBGJXQFKzRekp1WTHoVUWsUHEn+2T8GJAzzIhyOuXA+gOxCVN3l+5PLPUA=="
    },
    "cross-spawn": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-6.0.5.tgz",
      "integrity": "sha512-eTVLrBSt7fjbDygz805pMnstIs2VTBNkRm0qxZd+M7A5XDdxVRWO5MxGBXZhjY4cqLYLdtrGqRf8mBPmzwSpWQ==",
      "dev": true,
      "requires": {
        "nice-try": "^1.0.4",
        "path-key": "^2.0.1",
        "semver": "^5.5.0",
        "shebang-command": "^1.2.0",
        "which": "^1.2.9"
      },
      "dependencies": {
        "semver": {
          "version": "5.7.1",
          "resolved": "https://registry.npmjs.org/semver/-/semver-5.7.1.tgz",
          "integrity": "sha512-sauaDf/PZdVgrLTNYHRtpXa1iRiKcaebiKQ1BJdpQlWH2lCvexQdX55snPFyK7QzpudqbCI0qXFfOasHdyNDGQ==",
          "dev": true
        }
      }
    },
    "debug": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.1.0.tgz",
      "integrity": "sha512-OX8XqP7/1a9cqkxYw2yXss15f26NKWBpDXQd0/uK/KPqdQhxbPa994hnzjcE2VqQpDslf55723cKPUOGSmMY3g==",
      "requires": {
        "ms": "2.0.0"
      }
    },
    "dedent-js": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dedent-js/-/dedent-js-1.0.1.tgz",
      "integrity": "sha1-vuX7fJ5yfYXf+iRZDRDsGrElUwU="
    },
    "deep-is": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/deep-is/-/deep-is-0.1.3.tgz",
      "integrity": "sha1-s2nW+128E+7PUk+RsHD+7cNXzzQ=",
      "dev": true
    },
    "delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha1-3zrhmayt+31ECqrgsp4icrJOxhk=",
      "dev": true
    },
    "diff": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/diff/-/diff-4.0.2.tgz",
      "integrity": "sha512-58lmxKSA4BNyLz+HHMUzlOEpg09FV+ev6ZMe3vJihgdxzgcwZ8VoEEPmALCZG9LmqfVoNMMKpttIYTVG6uDY7A=="
    },
    "doctrine": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/doctrine/-/doctrine-3.0.0.tgz",
      "integrity": "sha512-yS+Q5i3hBf7GBkd4KG8a7eBNNWNGLTaEwwYWUijIYM7zrlYDM0BFXHjjPWlWZ1Rg7UaddZeIDmi9jF3HmqiQ2w==",
      "dev": true,
      "requires": {
        "esutils": "^2.0.2"
      }
    },
    "emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "dev": true
    },
    "escape-string-regexp": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-1.0.5.tgz",
      "integrity": "sha1-G2HAViGQqN/2rjuyzwIAyhMLhtQ="
    },
    "eslint": {
      "version": "6.8.0",
      "resolved": "https://registry.npmjs.org/eslint/-/eslint-6.8.0.tgz",
      "integrity": "sha512-K+Iayyo2LtyYhDSYwz5D5QdWw0hCacNzyq1Y821Xna2xSJj7cijoLLYmLxTQgcgZ9mC61nryMy9S7GRbYpI5Ig==",
      "dev": true,
      "requires": {
        "@babel/code-frame": "^7.0.0",
        "ajv": "^6.10.0",
        "chalk": "^2.1.0",
        "cross-spawn": "^6.0.5",
        "debug": "^4.0.1",
        "doctrine": "^3.0.0",
        "eslint-scope": "^5.0.0",
        "eslint-utils": "^1.4.3",
        "eslint-visitor-keys": "^1.1.0",
        "espree": "^6.1.2",
        "esquery": "^1.0.1",
        "esutils": "^2.0.2",
        "file-entry-cache": "^5.0.1",
        "functional-red-black-tree": "^1.0.1",
        "glob-parent": "^5.0.0",
        "globals": "^12.1.0",
        "ignore": "^4.0.6",
        "import-fresh": "^3.0.0",
        "imurmurhash": "^0.1.4",
        "inquirer": "^7.0.0",
        "is-glob": "^4.0.0",
        "js-yaml": "^3.13.1",
        "json-stable-stringify-without-jsonify": "^1.0.1",
        "levn": "^0.3.0",
        "lodash": "^4.17.14",
        "minimatch": "^3.0.4",
        "mkdirp": "^0.5.1",
        "natural-compare": "^1.4.0",
        "optionator": "^0.8.3",
        "progress": "^2.0.0",
        "regexpp": "^2.0.1",
        "semver": "^6.1.2",
        "strip-ansi": "^5.2.0",
        "strip-json-comments": "^3.0.1",
        "table": "^5.2.3",
        "text-table": "^0.2.0",
        "v8-compile-cache": "^2.0.3"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "dev": true,
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "eslint-utils": {
          "version": "1.4.3",
          "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-1.4.3.tgz",
          "integrity": "sha512-fbBN5W2xdY45KulGXmLHZ3c3FHfVYmKg0IrAKGOkT/464PQsx2UeIzfz1RmEci+KLm1bBaAzZAh8+/E+XAeZ8Q==",
          "dev": true,
          "requires": {
            "eslint-visitor-keys": "^1.1.0"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w==",
          "dev": true
        },
        "regexpp": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-2.0.1.tgz",
          "integrity": "sha512-lv0M6+TkDVniA3aD1Eg0DVpfU/booSu7Eev3TDO/mZKHBfVjgCGTV4t4buppESEYDtkArYFOxTJWv6S5C+iaNw==",
          "dev": true
        }
      }
    },
    "eslint-config-prettier": {
      "version": "6.11.0",
      "resolved": "https://registry.npmjs.org/eslint-config-prettier/-/eslint-config-prettier-6.11.0.tgz",
      "integrity": "sha512-oB8cpLWSAjOVFEJhhyMZh6NOEOtBVziaqdDQ86+qhDHFbZXoRTM7pNSvFRfW/W/L/LrQ38C99J5CGuRBBzBsdA==",
      "dev": true,
      "requires": {
        "get-stdin": "^6.0.0"
      }
    },
    "eslint-plugin-prettier": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/eslint-plugin-prettier/-/eslint-plugin-prettier-3.1.3.tgz",
      "integrity": "sha512-+HG5jmu/dN3ZV3T6eCD7a4BlAySdN7mLIbJYo0z1cFQuI+r2DiTJEFeF68ots93PsnrMxbzIZ2S/ieX+mkrBeQ==",
      "dev": true,
      "requires": {
        "prettier-linter-helpers": "^1.0.0"
      }
    },
    "eslint-scope": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/eslint-scope/-/eslint-scope-5.0.0.tgz",
      "integrity": "sha512-oYrhJW7S0bxAFDvWqzvMPRm6pcgcnWc4QnofCAqRTRfQC0JcwenzGglTtsLyIuuWFfkqDG9vz67cnttSd53djw==",
      "dev": true,
      "requires": {
        "esrecurse": "^4.1.0",
        "estraverse": "^4.1.1"
      }
    },
    "eslint-utils": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/eslint-utils/-/eslint-utils-2.0.0.tgz",
      "integrity": "sha512-0HCPuJv+7Wv1bACm8y5/ECVfYdfsAm9xmVb7saeFlxjPYALefjhbYoCkBjPdPzGH8wWyTpAez82Fh3VKYEZ8OA==",
      "dev": true,
      "requires": {
        "eslint-visitor-keys": "^1.1.0"
      }
    },
    "eslint-visitor-keys": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/eslint-visitor-keys/-/eslint-visitor-keys-1.1.0.tgz",
      "integrity": "sha512-8y9YjtM1JBJU/A9Kc+SbaOV4y29sSWckBwMHa+FGtVj5gN/sbnKDf6xJUl+8g7FAij9LVaP8C24DUiH/f/2Z9A==",
      "dev": true
    },
    "espree": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/espree/-/espree-6.2.1.tgz",
      "integrity": "sha512-ysCxRQY3WaXJz9tdbWOwuWr5Y/XrPTGX9Kiz3yoUXwW0VZ4w30HTkQLaGx/+ttFjF8i+ACbArnB4ce68a9m5hw==",
      "dev": true,
      "requires": {
        "acorn": "^7.1.1",
        "acorn-jsx": "^5.2.0",
        "eslint-visitor-keys": "^1.1.0"
      }
    },
    "esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "dev": true
    },
    "esquery": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/esquery/-/esquery-1.3.1.tgz",
      "integrity": "sha512-olpvt9QG0vniUBZspVRN6lwB7hOZoTRtT+jzR+tS4ffYx2mzbw+z0XCOk44aaLYKApNX5nMm+E+P6o25ip/DHQ==",
      "dev": true,
      "requires": {
        "estraverse": "^5.1.0"
      },
      "dependencies": {
        "estraverse": {
          "version": "5.1.0",
          "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.1.0.tgz",
          "integrity": "sha512-FyohXK+R0vE+y1nHLoBM7ZTyqRpqAlhdZHCWIWEviFLiGB8b04H6bQs8G+XTthacvT8VuwvteiP7RJSxMs8UEw==",
          "dev": true
        }
      }
    },
    "esrecurse": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/esrecurse/-/esrecurse-4.2.1.tgz",
      "integrity": "sha512-64RBB++fIOAXPw3P9cy89qfMlvZEXZkqqJkjqqXIvzP5ezRZjW+lPWjw35UX/3EhUPFYbg5ER4JYgDw4007/DQ==",
      "dev": true,
      "requires": {
        "estraverse": "^4.1.0"
      }
    },
    "estraverse": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-4.3.0.tgz",
      "integrity": "sha512-39nnKffWz8xN1BU/2c79n9nB9HDzo0niYUqx6xyqUnyoAnQyyWpOTdZEeiCch8BBu515t4wp9ZmgVfVhn9EBpw==",
      "dev": true
    },
    "esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "dev": true
    },
    "external-editor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/external-editor/-/external-editor-3.1.0.tgz",
      "integrity": "sha512-hMQ4CX1p1izmuLYyZqLMO/qGNw10wSv9QDCPfzXfyFrOaCSSoRfqE1Kf1s5an66J5JZC62NewG+mK49jOCtQew==",
      "dev": true,
      "requires": {
        "chardet": "^0.7.0",
        "iconv-lite": "^0.4.24",
        "tmp": "^0.0.33"
      }
    },
    "fast-deep-equal": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/fast-deep-equal/-/fast-deep-equal-3.1.1.tgz",
      "integrity": "sha512-8UEa58QDLauDNfpbrX55Q9jrGHThw2ZMdOky5Gl1CDtVeJDPVrG4Jxx1N8jw2gkWaff5UUuX1KJd+9zGe2B+ZA==",
      "dev": true
    },
    "fast-diff": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/fast-diff/-/fast-diff-1.2.0.tgz",
      "integrity": "sha512-xJuoT5+L99XlZ8twedaRf6Ax2TgQVxvgZOYoPKqZufmJib0tL2tegPBOZb1pVNgIhlqDlA0eO0c3wBvQcmzx4w==",
      "dev": true
    },
    "fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true
    },
    "fast-levenshtein": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/fast-levenshtein/-/fast-levenshtein-2.0.6.tgz",
      "integrity": "sha1-PYpcZog6FqMMqGQ+hR8Zuqd5eRc=",
      "dev": true
    },
    "figures": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/figures/-/figures-3.2.0.tgz",
      "integrity": "sha512-yaduQFRKLXYOGgEn6AZau90j3ggSOyiqXU0F9JZfeXYhNa+Jk4X+s45A2zg5jns87GAFa34BBm2kXw4XpNcbdg==",
      "dev": true,
      "requires": {
        "escape-string-regexp": "^1.0.5"
      }
    },
    "file-entry-cache": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/file-entry-cache/-/file-entry-cache-5.0.1.tgz",
      "integrity": "sha512-bCg29ictuBaKUwwArK4ouCaqDgLZcysCFLmM/Yn/FDoqndh/9vNuQfXRDvTuXKLxfD/JtZQGKFT8MGcJBK644g==",
      "dev": true,
      "requires": {
        "flat-cache": "^2.0.1"
      }
    },
    "flat-cache": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/flat-cache/-/flat-cache-2.0.1.tgz",
      "integrity": "sha512-LoQe6yDuUMDzQAEH8sgmh4Md6oZnc/7PjtwjNFSzveXqSHt6ka9fPBuso7IGf9Rz4uqnSnWiFH2B/zj24a5ReA==",
      "dev": true,
      "requires": {
        "flatted": "^2.0.0",
        "rimraf": "2.6.3",
        "write": "1.0.3"
      }
    },
    "flatted": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/flatted/-/flatted-2.0.2.tgz",
      "integrity": "sha512-r5wGx7YeOwNWNlCA0wQ86zKyDLMQr+/RB8xy74M4hTphfmjlijTSSXGuH8rnvKZnfT9i+75zmd8jcKdMR4O6jA==",
      "dev": true
    },
    "follow-redirects": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.5.10.tgz",
      "integrity": "sha512-0V5l4Cizzvqt5D44aTXbFZz+FtyXV1vrDN6qrelxtfYQKW0KO0W2T/hkE8xvGa/540LkZlkaUjO4ailYTFtHVQ==",
      "requires": {
        "debug": "=3.1.0"
      }
    },
    "form-data": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-3.0.0.tgz",
      "integrity": "sha512-CKMFDglpbMi6PyN+brwB9Q/GOw0eAnsrEZDgcsH5Krhz5Od/haKHAX0NmQfha2zPPz0JpWzA7GJHGSnvCRLWsg==",
      "dev": true,
      "requires": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "mime-types": "^2.1.12"
      }
    },
    "fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha1-FQStJSMVjKpA20onh8sBQRmU6k8=",
      "dev": true
    },
    "functional-red-black-tree": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/functional-red-black-tree/-/functional-red-black-tree-1.0.1.tgz",
      "integrity": "sha1-GwqzvVU7Kg1jmdKcDj6gslIHgyc=",
      "dev": true
    },
    "get-stdin": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/get-stdin/-/get-stdin-6.0.0.tgz",
      "integrity": "sha512-jp4tHawyV7+fkkSKyvjuLZswblUtz+SQKzSWnBbii16BuZksJlU1wuBYXY75r+duh/llF1ur6oNwi+2ZzjKZ7g==",
      "dev": true
    },
    "glob": {
      "version": "7.1.6",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.1.6.tgz",
      "integrity": "sha512-LwaxwyZ72Lk7vZINtNNrywX0ZuLyStrdDtabefZKAY5ZGJhVtgdznluResxNmPitE0SAO+O26sWTHeKSI2wMBA==",
      "dev": true,
      "requires": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.0.4",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      }
    },
    "glob-parent": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.1.tgz",
      "integrity": "sha512-FnI+VGOpnlGHWZxthPGR+QhR78fuiK0sNLkHQv+bL9fQi57lNNdquIbna/WrfROrolq8GK5Ek6BiMwqL/voRYQ==",
      "dev": true,
      "requires": {
        "is-glob": "^4.0.1"
      }
    },
    "globals": {
      "version": "12.4.0",
      "resolved": "https://registry.npmjs.org/globals/-/globals-12.4.0.tgz",
      "integrity": "sha512-BWICuzzDvDoH54NHKCseDanAhE3CeDorgDL5MT6LMXXj2WCnd9UC2szdk4AWLfjdgNBCXLUanXYcpBBKOSWGwg==",
      "dev": true,
      "requires": {
        "type-fest": "^0.8.1"
      }
    },
    "has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha1-tdRU3CGZriJWmfNGfloH87lVuv0=",
      "dev": true
    },
    "iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "dev": true,
      "requires": {
        "safer-buffer": ">= 2.1.2 < 3"
      }
    },
    "ignore": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/ignore/-/ignore-4.0.6.tgz",
      "integrity": "sha512-cyFDKrqc/YdcWFniJhzI42+AzS+gNwmUzOSFcRCQYwySuBBBy/KjuxWLZ/FHEH6Moq1NizMOBWyTcv8O4OZIMg==",
      "dev": true
    },
    "immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha1-nbHb0Pr43m++D13V5Wu2BigN5ps="
    },
    "import-fresh": {
      "version": "3.2.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.2.1.tgz",
      "integrity": "sha512-6e1q1cnWP2RXD9/keSkxHScg508CdXqXWgWBaETNhyuBFz+kUZlKboh+ISK+bU++DmbHimVBrOz/zzPe0sZ3sQ==",
      "dev": true,
      "requires": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      }
    },
    "imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha1-khi5srkoojixPcT7a21XbyMUU+o=",
      "dev": true
    },
    "inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha1-Sb1jMdfQLQwJvJEKEHW6gWW1bfk=",
      "dev": true,
      "requires": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "dev": true
    },
    "inquirer": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/inquirer/-/inquirer-7.1.0.tgz",
      "integrity": "sha512-5fJMWEmikSYu0nv/flMc475MhGbB7TSPd/2IpFV4I4rMklboCH2rQjYY5kKiYGHqUF9gvaambupcJFFG9dvReg==",
      "dev": true,
      "requires": {
        "ansi-escapes": "^4.2.1",
        "chalk": "^3.0.0",
        "cli-cursor": "^3.1.0",
        "cli-width": "^2.0.0",
        "external-editor": "^3.0.3",
        "figures": "^3.0.0",
        "lodash": "^4.17.15",
        "mute-stream": "0.0.8",
        "run-async": "^2.4.0",
        "rxjs": "^6.5.3",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0",
        "through": "^2.3.6"
      },
      "dependencies": {
        "ansi-styles": {
          "version": "4.2.1",
          "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.2.1.tgz",
          "integrity": "sha512-9VGjrMsG1vePxcSweQsN20KY/c4zN0h9fLjqAbwbPfahM3t+NL+M9HC8xeXG2I8pX5NoamTGNuomEUFI7fcUjA==",
          "dev": true,
          "requires": {
            "@types/color-name": "^1.1.1",
            "color-convert": "^2.0.1"
          }
        },
        "chalk": {
          "version": "3.0.0",
          "resolved": "https://registry.npmjs.org/chalk/-/chalk-3.0.0.tgz",
          "integrity": "sha512-4D3B6Wf41KOYRFdszmDqMCGq5VV/uMAB273JILmO+3jAlh8X4qDtdtgCR3fxtbLEMzSx22QdhnDcJvu2u1fVwg==",
          "dev": true,
          "requires": {
            "ansi-styles": "^4.1.0",
            "supports-color": "^7.1.0"
          }
        },
        "color-convert": {
          "version": "2.0.1",
          "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
          "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
          "dev": true,
          "requires": {
            "color-name": "~1.1.4"
          }
        },
        "color-name": {
          "version": "1.1.4",
          "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
          "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
          "dev": true
        },
        "has-flag": {
          "version": "4.0.0",
          "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
          "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
          "dev": true
        },
        "strip-ansi": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
          "dev": true,
          "requires": {
            "ansi-regex": "^5.0.0"
          }
        },
        "supports-color": {
          "version": "7.1.0",
          "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.1.0.tgz",
          "integrity": "sha512-oRSIpR8pxT1Wr2FquTNnGet79b3BWljqOuoW/h4oBhxJ/HUbX5nX6JSruTkvXDCFMwDPvsaTTbvMLKZWSy0R5g==",
          "dev": true,
          "requires": {
            "has-flag": "^4.0.0"
          }
        }
      }
    },
    "is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha1-qIwCU1eR8C7TfHahueqXc8gz+MI=",
      "dev": true
    },
    "is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "dev": true
    },
    "is-glob": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.1.tgz",
      "integrity": "sha512-5G0tKtBTFImOqDnLB2hG6Bp2qcKEFduo4tZu9MT/H6NQv/ghhy30o55ufafxJ/LdH79LLs2Kfrn85TLKyA7BUg==",
      "dev": true,
      "requires": {
        "is-extglob": "^2.1.1"
      }
    },
    "isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha1-6PvzdNxVb/iUehDcsFctYz8s+hA=",
      "dev": true
    },
    "js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "dev": true
    },
    "js-yaml": {
      "version": "3.13.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.13.1.tgz",
      "integrity": "sha512-YfbcO7jXDdyj0DGxYVSlSeQNHbD7XPWvrVWeVUujrQEoZzWJIRrCPoyk6kL6IAjAG2IolMK4T0hNUe0HOUs5Jw==",
      "dev": true,
      "requires": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      }
    },
    "json-schema-traverse": {
      "version": "0.4.1",
      "resolved": "https://registry.npmjs.org/json-schema-traverse/-/json-schema-traverse-0.4.1.tgz",
      "integrity": "sha512-xbbCH5dCYU5T8LcEhhuh7HJ88HXuW3qsI3Y0zOZFKfZEHcpWiHU/Jxzk629Brsab/mMiHQti9wMP+845RPe3Vg==",
      "dev": true
    },
    "json-stable-stringify-without-jsonify": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/json-stable-stringify-without-jsonify/-/json-stable-stringify-without-jsonify-1.0.1.tgz",
      "integrity": "sha1-nbe1lJatPzz+8wp1FC0tkwrXJlE=",
      "dev": true
    },
    "jspack": {
      "version": "0.0.4",
      "resolved": "https://registry.npmjs.org/jspack/-/jspack-0.0.4.tgz",
      "integrity": "sha1-Mt01x/3LPjRWwY+7fvntC8YjgXc="
    },
    "levn": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/levn/-/levn-0.3.0.tgz",
      "integrity": "sha1-OwmSTt+fCDwEkP3UwLxEIeBHZO4=",
      "dev": true,
      "requires": {
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2"
      }
    },
    "lie": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.1.1.tgz",
      "integrity": "sha1-mkNrLMd0bKWd56QfpGmz77dr2H4=",
      "requires": {
        "immediate": "~3.0.5"
      }
    },
    "localforage": {
      "version": "1.7.3",
      "resolved": "https://registry.npmjs.org/localforage/-/localforage-1.7.3.tgz",
      "integrity": "sha512-1TulyYfc4udS7ECSBT2vwJksWbkwwTX8BzeUIiq8Y07Riy7bDAAnxDaPU/tWyOVmQAcWJIEIFP9lPfBGqVoPgQ==",
      "requires": {
        "lie": "3.1.1"
      }
    },
    "lodash": {
      "version": "4.17.15",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.15.tgz",
      "integrity": "sha512-8xOcRHvCjnocdS5cpwXQXVzmmh5e5+saE2QGoeQmbKmRS6J3VQppPOIt0MnmE+4xlZoumy0GPG0D0MVIQbNA1A==",
      "dev": true
    },
    "make-error": {
      "version": "1.3.6",
      "resolved": "https://registry.npmjs.org/make-error/-/make-error-1.3.6.tgz",
      "integrity": "sha512-s8UhlNe7vPKomQhC1qFelMokr/Sc3AgNbso3n74mVPA5LTZwkB9NlXf4XPamLxJE8h0gh73rM94xvwRT2CVInw=="
    },
    "millisecond": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/millisecond/-/millisecond-0.1.2.tgz",
      "integrity": "sha1-bMWtOGJByrjniv+WT4cCjuyS2sU="
    },
    "mime-db": {
      "version": "1.44.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.44.0.tgz",
      "integrity": "sha512-/NOTfLrsPBVeH7YtFPgsVWveuL+4SjjYxaQ1xtM1KMFj7HdxlBlxeyNLzhyJVx7r4rZGJAZ/6lkKCitSc/Nmpg==",
      "dev": true
    },
    "mime-types": {
      "version": "2.1.27",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.27.tgz",
      "integrity": "sha512-JIhqnCasI9yD+SsmkquHBxTSEuZdQX5BuQnS2Vc7puQQQ+8yiP5AY5uWhpdv4YL4VM5c6iliiYWPgJ/nJQLp7w==",
      "dev": true,
      "requires": {
        "mime-db": "1.44.0"
      }
    },
    "mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true
    },
    "minimatch": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.0.4.tgz",
      "integrity": "sha512-yJHVQEhyqPLUTgt9B83PXu6W3rx4MvvHvSUvToogpwoGDOUQ+yDrR0HRot+yOCdCO7u4hX3pWft6kWBBcqh0UA==",
      "dev": true,
      "requires": {
        "brace-expansion": "^1.1.7"
      }
    },
    "minimist": {
      "version": "1.2.5",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.5.tgz",
      "integrity": "sha512-FM9nNUYrRBAELZQT3xeZQ7fmMOBg6nWNmJKTcgsJeaLstP/UODVpGsr5OhXhhXg6f+qtJ8uiZ+PUxkDWcgIXLw=="
    },
    "mkdirp": {
      "version": "0.5.5",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.5.tgz",
      "integrity": "sha512-NKmAlESf6jMGym1++R0Ra7wvhV+wFW63FaSOFPwRahvea0gMUcGUhVeAg/0BC0wiv9ih5NYPB1Wn1UEI1/L+xQ==",
      "requires": {
        "minimist": "^1.2.5"
      }
    },
    "module-alias": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/module-alias/-/module-alias-2.2.2.tgz",
      "integrity": "sha512-A/78XjoX2EmNvppVWEhM2oGk3x4lLxnkEA4jTbaK97QKSDjkIoOsKQlfylt/d3kKKi596Qy3NP5XrXJ6fZIC9Q=="
    },
    "ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha1-VgiurfwAvmwpAd9fmGF4jeDVl8g="
    },
    "mute-stream": {
      "version": "0.0.8",
      "resolved": "https://registry.npmjs.org/mute-stream/-/mute-stream-0.0.8.tgz",
      "integrity": "sha512-nnbWWOkoWyUsTjKrhgD0dcz22mdkSnpYqbEjIm2nhwhuxlSkpywJmBo8h0ZqJdkp73mb90SssHkN4rsRaBAfAA==",
      "dev": true
    },
    "natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha1-Sr6/7tdUHywnrPspvbvRXI1bpPc=",
      "dev": true
    },
    "nedb": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/nedb/-/nedb-1.8.0.tgz",
      "integrity": "sha1-DjUCzYLABNU1WkPJ5VV3vXvZHYg=",
      "requires": {
        "async": "0.2.10",
        "binary-search-tree": "0.2.5",
        "localforage": "^1.3.0",
        "mkdirp": "~0.5.1",
        "underscore": "~1.4.4"
      }
    },
    "nedb-promise": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/nedb-promise/-/nedb-promise-2.0.1.tgz",
      "integrity": "sha1-g5suSQlxb99pUAt/aLK4ciWCzWU=",
      "requires": {
        "nedb": "^1.8.0",
        "thenify": "^3.2.0"
      }
    },
    "nice-try": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/nice-try/-/nice-try-1.0.5.tgz",
      "integrity": "sha512-1nh45deeb5olNY7eX82BkPO7SSxR5SSYJiPTrTdFUVYwAl8CKMA5N9PjTYkHiRjisVcxcQ1HXdLhx2qxxJzLNQ==",
      "dev": true
    },
    "node-fetch": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.0.tgz",
      "integrity": "sha512-8dG4H5ujfvFiqDmVu9fQ5bOHUC15JMjMY/Zumv26oOvvVJjM67KF8koCWIabKQ1GJIa9r2mMZscBq/TbdOcmNA=="
    },
    "object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha1-IQmtx5ZYh8/AXLvUQsrIv7s2CGM="
    },
    "once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha1-WDsap3WWHUsROsF9nFC6753Xa9E=",
      "dev": true,
      "requires": {
        "wrappy": "1"
      }
    },
    "onetime": {
      "version": "5.1.0",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.0.tgz",
      "integrity": "sha512-5NcSkPHhwTVFIQN+TUqXoS5+dlElHXdpAWu9I0HP20YOtIi+aZ0Ct82jdlILDxjLEAWwvm+qj1m6aEtsDVmm6Q==",
      "dev": true,
      "requires": {
        "mimic-fn": "^2.1.0"
      }
    },
    "optionator": {
      "version": "0.8.3",
      "resolved": "https://registry.npmjs.org/optionator/-/optionator-0.8.3.tgz",
      "integrity": "sha512-+IW9pACdk3XWmmTXG8m3upGUJst5XRGzxMRjXzAuJ1XnIFNvfhjjIuYkDvysnPQ7qzqVzLt78BCruntqRhWQbA==",
      "dev": true,
      "requires": {
        "deep-is": "~0.1.3",
        "fast-levenshtein": "~2.0.6",
        "levn": "~0.3.0",
        "prelude-ls": "~1.1.2",
        "type-check": "~0.3.2",
        "word-wrap": "~1.2.3"
      }
    },
    "os-tmpdir": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/os-tmpdir/-/os-tmpdir-1.0.2.tgz",
      "integrity": "sha1-u+Z0BseaqFxc/sdm/lc0VV36EnQ=",
      "dev": true
    },
    "parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "dev": true,
      "requires": {
        "callsites": "^3.0.0"
      }
    },
    "path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha1-F0uSaHNVNP+8es5r9TpanhtcX18=",
      "dev": true
    },
    "path-key": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-2.0.1.tgz",
      "integrity": "sha1-QRyttXTFoUDTpLGRDUDYDMn0C0A=",
      "dev": true
    },
    "prelude-ls": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/prelude-ls/-/prelude-ls-1.1.2.tgz",
      "integrity": "sha1-IZMqVJ9eUv/ZqCf1cOBL5iqX2lQ=",
      "dev": true
    },
    "prettier": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/prettier/-/prettier-2.0.5.tgz",
      "integrity": "sha512-7PtVymN48hGcO4fGjybyBSIWDsLU4H4XlvOHfq91pz9kkGlonzwTfYkaIEwiRg/dAJF9YlbsduBAgtYLi+8cFg==",
      "dev": true
    },
    "prettier-linter-helpers": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/prettier-linter-helpers/-/prettier-linter-helpers-1.0.0.tgz",
      "integrity": "sha512-GbK2cP9nraSSUF9N2XwUwqfzlAFlMNYYl+ShE/V+H8a9uNl/oUqB1w2EL54Jh0OlyRSd8RfWYJ3coVS4TROP2w==",
      "dev": true,
      "requires": {
        "fast-diff": "^1.1.2"
      }
    },
    "progress": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
      "dev": true
    },
    "punycode": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.1.1.tgz",
      "integrity": "sha512-XRsRjdf+j5ml+y/6GKHPZbrF/8p2Yga0JPtdqTIY2Xe5ohJPD9saDJJLPvp9+NSBprVvevdXZybnj2cv8OEd0A==",
      "dev": true
    },
    "ramda": {
      "version": "0.25.0",
      "resolved": "https://registry.npmjs.org/ramda/-/ramda-0.25.0.tgz",
      "integrity": "sha512-GXpfrYVPwx3K7RQ6aYT8KPS8XViSXUVJT1ONhoKPE9VAleW42YE+U+8VEyGWt41EnEQW7gwecYJriTI0pKoecQ=="
    },
    "regenerator-runtime": {
      "version": "0.13.5",
      "resolved": "https://registry.npmjs.org/regenerator-runtime/-/regenerator-runtime-0.13.5.tgz",
      "integrity": "sha512-ZS5w8CpKFinUzOwW3c83oPeVXoNsrLsaCoLtJvAClH135j/R77RuymhiSErhm2lKcwSCIpmvIWSbDkIfAqKQlA=="
    },
    "regexpp": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/regexpp/-/regexpp-3.1.0.tgz",
      "integrity": "sha512-ZOIzd8yVsQQA7j8GCSlPGXwg5PfmA1mrq0JP4nGhh54LaKN3xdai/vHUDu74pKwV8OxseMS65u2NImosQcSD0Q==",
      "dev": true
    },
    "require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha1-jGStX9MNqxyXbiNE/+f3kqam30I="
    },
    "resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "dev": true
    },
    "restore-cursor": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/restore-cursor/-/restore-cursor-3.1.0.tgz",
      "integrity": "sha512-l+sSefzHpj5qimhFSE5a8nufZYAM3sBSVMAPtYkmC+4EH2anSGaEMXSD0izRQbu9nfyQ9y5JrVmp7E8oZrUjvA==",
      "dev": true,
      "requires": {
        "onetime": "^5.1.0",
        "signal-exit": "^3.0.2"
      }
    },
    "rimraf": {
      "version": "2.6.3",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-2.6.3.tgz",
      "integrity": "sha512-mwqeW5XsA2qAejG46gYdENaxXjx9onRNCfn7L0duuP4hCuTIi/QO7PDK07KJfp1d+izWPrzEJDcSqBa0OZQriA==",
      "dev": true,
      "requires": {
        "glob": "^7.1.3"
      }
    },
    "run-async": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/run-async/-/run-async-2.4.1.tgz",
      "integrity": "sha512-tvVnVv01b8c1RrA6Ep7JkStj85Guv/YrMcwqYQnwjsAS2cTmmPGBBjAjpCW7RrSodNSoE2/qg9O4bceNvUuDgQ==",
      "dev": true
    },
    "rxjs": {
      "version": "6.5.5",
      "resolved": "https://registry.npmjs.org/rxjs/-/rxjs-6.5.5.tgz",
      "integrity": "sha512-WfQI+1gohdf0Dai/Bbmk5L5ItH5tYqm3ki2c5GdWhKjalzjg93N3avFjVStyZZz+A2Em+ZxKH5bNghw9UeylGQ==",
      "dev": true,
      "requires": {
        "tslib": "^1.9.0"
      }
    },
    "safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "dev": true
    },
    "sandwich-stream": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/sandwich-stream/-/sandwich-stream-2.0.2.tgz",
      "integrity": "sha512-jLYV0DORrzY3xaz/S9ydJL6Iz7essZeAfnAavsJ+zsJGZ1MOnsS52yRjU3uF3pJa/lla7+wisp//fxOwOH8SKQ=="
    },
    "semver": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.0.tgz",
      "integrity": "sha512-b39TBaTSfV6yBrapU89p5fKekE2m/NwnDocOVruQFS1/veMgdzuPcnOM34M6CwxW8jH/lxEa5rBoDeUwu5HHTw==",
      "dev": true
    },
    "shebang-command": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-1.2.0.tgz",
      "integrity": "sha1-RKrGW2lbAzmJaMOfNj/uXer98eo=",
      "dev": true,
      "requires": {
        "shebang-regex": "^1.0.0"
      }
    },
    "shebang-regex": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-1.0.0.tgz",
      "integrity": "sha1-2kL0l0DAtC2yypcoVxyxkMmO/qM=",
      "dev": true
    },
    "signal-exit": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.3.tgz",
      "integrity": "sha512-VUJ49FC8U1OxwZLxIbTTrDvLnf/6TDgxZcK8wxR8zs13xpx7xbG60ndBlhNrFi2EMuFRoeDoJO7wthSLq42EjA==",
      "dev": true
    },
    "slice-ansi": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/slice-ansi/-/slice-ansi-2.1.0.tgz",
      "integrity": "sha512-Qu+VC3EwYLldKa1fCxuuvULvSJOKEgk9pi8dZeCVK7TqBfUNTH4sFkk4joj8afVSfAYgJoSOetjx9QWOJ5mYoQ==",
      "dev": true,
      "requires": {
        "ansi-styles": "^3.2.0",
        "astral-regex": "^1.0.0",
        "is-fullwidth-code-point": "^2.0.0"
      },
      "dependencies": {
        "is-fullwidth-code-point": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
          "dev": true
        }
      }
    },
    "source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g=="
    },
    "source-map-support": {
      "version": "0.5.19",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.19.tgz",
      "integrity": "sha512-Wonm7zOCIJzBGQdB+thsPar0kYuCIzYvxZwlBa87yi/Mdjv7Tip2cyVbLj5o0cFPN4EVkuTwb3GDDyUx2DGnGw==",
      "requires": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "spamwatch": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/spamwatch/-/spamwatch-0.2.0.tgz",
      "integrity": "sha512-FaJUYMJKWghyQwXnXS3lznqe76QevuYgU84xhmVO4wVxv96aQvHERnlhu6x6kNVxT/UAGnrR1pYY3XNO6VtaDA==",
      "requires": {
        "axios": "^0.19.0"
      }
    },
    "sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha1-BOaSb2YolTVPPdAVIDYzuFcpfiw=",
      "dev": true
    },
    "string-replace-async": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/string-replace-async/-/string-replace-async-1.2.1.tgz",
      "integrity": "sha1-1SzcfjOBQbvq6jRx3jEhUCjJo6o=",
      "requires": {
        "escape-string-regexp": "^1.0.4",
        "object-assign": "^4.0.1"
      }
    },
    "string-width": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.0.tgz",
      "integrity": "sha512-zUz5JD+tgqtuDjMhwIg5uFVV3dtqZ9yQJlZVfq4I01/K5Paj5UHj7VyrQOJvzawSVlKpObApbfD0Ed6yJc+1eg==",
      "dev": true,
      "requires": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "dependencies": {
        "strip-ansi": {
          "version": "6.0.0",
          "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.0.tgz",
          "integrity": "sha512-AuvKTrTfQNYNIctbR1K/YGTR1756GycPsg7b9bdV9Duqur4gv6aKqHXah67Z8ImS7WEz5QVcOtlfW2rZEugt6w==",
          "dev": true,
          "requires": {
            "ansi-regex": "^5.0.0"
          }
        }
      }
    },
    "strip-ansi": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-5.2.0.tgz",
      "integrity": "sha512-DuRs1gKbBqsMKIZlrffwlug8MHkcnpjs5VPmL1PAh+mA30U0DTotfDZ0d2UUsXpPmPmMMJ6W773MaA3J+lbiWA==",
      "dev": true,
      "requires": {
        "ansi-regex": "^4.1.0"
      },
      "dependencies": {
        "ansi-regex": {
          "version": "4.1.0",
          "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-4.1.0.tgz",
          "integrity": "sha512-1apePfXM1UOSqw0o9IiFAovVz9M5S1Dg+4TrDwfMewQ6p/rmMueb7tWZjQ1rx4Loy1ArBggoqGpfqqdI4rondg==",
          "dev": true
        }
      }
    },
    "strip-json-comments": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.0.tgz",
      "integrity": "sha512-e6/d0eBu7gHtdCqFt0xJr642LdToM5/cN4Qb9DbHjVx1CP5RyeM+zH7pbecEmDv/lBqb0QH+6Uqq75rxFPkM0w==",
      "dev": true
    },
    "supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "requires": {
        "has-flag": "^3.0.0"
      }
    },
    "table": {
      "version": "5.4.6",
      "resolved": "https://registry.npmjs.org/table/-/table-5.4.6.tgz",
      "integrity": "sha512-wmEc8m4fjnob4gt5riFRtTu/6+4rSe12TpAELNSqHMfF3IqnA+CH37USM6/YR3qRZv7e56kAEAtd6nKZaxe0Ug==",
      "dev": true,
      "requires": {
        "ajv": "^6.10.2",
        "lodash": "^4.17.14",
        "slice-ansi": "^2.1.0",
        "string-width": "^3.0.0"
      },
      "dependencies": {
        "emoji-regex": {
          "version": "7.0.3",
          "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-7.0.3.tgz",
          "integrity": "sha512-CwBLREIQ7LvYFB0WyRvwhq5N5qPhc6PMjD6bYggFlI5YyDgl+0vxq5VHbMOFqLg7hfWzmu8T5Z1QofhmTIhItA==",
          "dev": true
        },
        "is-fullwidth-code-point": {
          "version": "2.0.0",
          "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-2.0.0.tgz",
          "integrity": "sha1-o7MKXE8ZkYMWeqq5O+764937ZU8=",
          "dev": true
        },
        "string-width": {
          "version": "3.1.0",
          "resolved": "https://registry.npmjs.org/string-width/-/string-width-3.1.0.tgz",
          "integrity": "sha512-vafcv6KjVZKSgz06oM/H6GDBrAtz8vdhQakGjFIvNrHA6y3HCF1CInLy+QLq8dTJPQ1b+KDUqDFctkdRW44e1w==",
          "dev": true,
          "requires": {
            "emoji-regex": "^7.0.1",
            "is-fullwidth-code-point": "^2.0.0",
            "strip-ansi": "^5.1.0"
          }
        }
      }
    },
    "telegraf": {
      "version": "3.38.0",
      "resolved": "https://registry.npmjs.org/telegraf/-/telegraf-3.38.0.tgz",
      "integrity": "sha512-va4VlrKWp64JrowFoZX/NPzzA6q38kvaIukVXOWFO1V+jR1G8+hCfgJy4TX8Z3rwLJzwaBEet1QhikHDRZWl3A==",
      "requires": {
        "debug": "^4.0.1",
        "minimist": "^1.2.0",
        "module-alias": "^2.2.2",
        "node-fetch": "^2.2.0",
        "sandwich-stream": "^2.0.1",
        "telegram-typings": "^3.6.0"
      },
      "dependencies": {
        "debug": {
          "version": "4.1.1",
          "resolved": "https://registry.npmjs.org/debug/-/debug-4.1.1.tgz",
          "integrity": "sha512-pYAIzeRo8J6KPEaJ0VWOh5Pzkbw/RetuzehGM7QRRX5he4fPHx2rdKMB256ehJCkX+XRQm16eZLqLNS8RSZXZw==",
          "requires": {
            "ms": "^2.1.1"
          }
        },
        "ms": {
          "version": "2.1.2",
          "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.2.tgz",
          "integrity": "sha512-sGkPx+VjMtmA6MX27oA4FBFELFCZZ4S4XqeGOXCv68tT+jb3vk/RyaKWP0PTKyWtmLSM0b+adUTEvbs1PEaH2w=="
        }
      }
    },
    "telegram-typings": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/telegram-typings/-/telegram-typings-3.6.1.tgz",
      "integrity": "sha512-njVv1EAhIZnmQVLocZEADYUyqA1WIXuVcDYlsp+mXua/XB0pxx+PKtMSPeZ/EE4wPWTw9h/hA9ASTT6yQelkiw=="
    },
    "text-table": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/text-table/-/text-table-0.2.0.tgz",
      "integrity": "sha1-f17oI66AUgfACvLfSoTsP8+lcLQ=",
      "dev": true
    },
    "thenify": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/thenify/-/thenify-3.3.0.tgz",
      "integrity": "sha1-5p44obq+lpsBCCB5eLn2K4hgSDk=",
      "requires": {
        "any-promise": "^1.0.0"
      }
    },
    "through": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/through/-/through-2.3.8.tgz",
      "integrity": "sha1-DdTJ/6q8NXlgsbckEV1+Doai4fU=",
      "dev": true
    },
    "tmp": {
      "version": "0.0.33",
      "resolved": "https://registry.npmjs.org/tmp/-/tmp-0.0.33.tgz",
      "integrity": "sha512-jRCJlojKnZ3addtTOjdIqoRuPEKBvNXcGYqzO6zWZX8KfKEpnGY5jfggJQ3EjKuu8D4bJRr0y+cYJFmYbImXGw==",
      "dev": true,
      "requires": {
        "os-tmpdir": "~1.0.2"
      }
    },
    "ts-node": {
      "version": "8.10.1",
      "resolved": "https://registry.npmjs.org/ts-node/-/ts-node-8.10.1.tgz",
      "integrity": "sha512-bdNz1L4ekHiJul6SHtZWs1ujEKERJnHs4HxN7rjTyyVOFf3HaJ6sLqe6aPG62XTzAB/63pKRh5jTSWL0D7bsvw==",
      "requires": {
        "arg": "^4.1.0",
        "diff": "^4.0.1",
        "make-error": "^1.1.1",
        "source-map-support": "^0.5.17",
        "yn": "3.1.1"
      }
    },
    "tslib": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-1.11.1.tgz",
      "integrity": "sha512-aZW88SY8kQbU7gpV19lN24LtXh/yD4ZZg6qieAJDDg+YBsJcSmLGK9QpnUjAKVG/xefmvJGd1WUmfpT/g6AJGA==",
      "dev": true
    },
    "tsutils": {
      "version": "3.17.1",
      "resolved": "https://registry.npmjs.org/tsutils/-/tsutils-3.17.1.tgz",
      "integrity": "sha512-kzeQ5B8H3w60nFY2g8cJIuH7JDpsALXySGtwGJ0p2LSjLgay3NdIpqq5SoOBe46bKDW2iq25irHCr8wjomUS2g==",
      "dev": true,
      "requires": {
        "tslib": "^1.8.1"
      }
    },
    "type-check": {
      "version": "0.3.2",
      "resolved": "https://registry.npmjs.org/type-check/-/type-check-0.3.2.tgz",
      "integrity": "sha1-WITKtRLPHTVeP7eE8wgEsrUg23I=",
      "dev": true,
      "requires": {
        "prelude-ls": "~1.1.2"
      }
    },
    "type-fest": {
      "version": "0.8.1",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.8.1.tgz",
      "integrity": "sha512-4dbzIzqvjtgiM5rw1k5rEHtBANKmdudhGyBEajN01fEyhaAIhsoKNy6y7+IN93IfpFtwY9iqi7kD+xwKhQsNJA==",
      "dev": true
    },
    "typescript": {
      "version": "3.8.3",
      "resolved": "https://registry.npmjs.org/typescript/-/typescript-3.8.3.tgz",
      "integrity": "sha512-MYlEfn5VrLNsgudQTVJeNaQFUAI7DkhnOjdpAp4T+ku1TfQClewlbSuTVHiA+8skNBgaf02TL/kLOvig4y3G8w=="
    },
    "underscore": {
      "version": "1.4.4",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.4.4.tgz",
      "integrity": "sha1-YaajIBBiKvoHljvzJSA88SI51gQ="
    },
    "uri-js": {
      "version": "4.2.2",
      "resolved": "https://registry.npmjs.org/uri-js/-/uri-js-4.2.2.tgz",
      "integrity": "sha512-KY9Frmirql91X2Qgjry0Wd4Y+YTdrdZheS8TFwvkbLWf/G5KNJDCh6pKL5OZctEW4+0Baa5idK2ZQuELRwPznQ==",
      "dev": true,
      "requires": {
        "punycode": "^2.1.0"
      }
    },
    "v8-compile-cache": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/v8-compile-cache/-/v8-compile-cache-2.1.0.tgz",
      "integrity": "sha512-usZBT3PW+LOjM25wbqIlZwPeJV+3OSz3M1k1Ws8snlW39dZyYL9lOGC5FgPVHfk0jKmjiDV8Z0mIbVQPiwFs7g==",
      "dev": true
    },
    "which": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/which/-/which-1.3.1.tgz",
      "integrity": "sha512-HxJdYWq1MTIQbJ3nw0cqssHoTNU267KlrDuGZ1WYlxDStUtKUhOaJmh112/TZmHxxUfuJqPXSOm7tDyas0OSIQ==",
      "dev": true,
      "requires": {
        "isexe": "^2.0.0"
      }
    },
    "word-wrap": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/word-wrap/-/word-wrap-1.2.3.tgz",
      "integrity": "sha512-Hz/mrNwitNRh/HUAtM/VT/5VH+ygD6DV7mYKZAtHOrbs8U7lvPS6xf7EJKMF0uW1KJCl0H701g3ZGus+muE5vQ==",
      "dev": true
    },
    "wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
      "dev": true
    },
    "write": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/write/-/write-1.0.3.tgz",
      "integrity": "sha512-/lg70HAjtkUgWPVZhZcm+T4hkL8Zbtp1nFNOn3lRrxnlv50SRBv7cR7RqR+GMsd3hUXy9hWBo4CHTbFTcOYwig==",
      "dev": true,
      "requires": {
        "mkdirp": "^0.5.1"
      }
    },
    "xregexp": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/xregexp/-/xregexp-4.3.0.tgz",
      "integrity": "sha512-7jXDIFXh5yJ/orPn4SXjuVrWWoi4Cr8jfV1eHv9CixKSbU+jY4mxfrBwAuDvupPNKpMUY+FeIqsVw/JLT9+B8g==",
      "requires": {
        "@babel/runtime-corejs3": "^7.8.3"
      }
    },
    "yn": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yn/-/yn-3.1.1.tgz",
      "integrity": "sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q=="
    }
  }
}

'''
'''--- package.json ---
{
  "name": "the_guard_bot",
  "version": "1.4.0",
  "description": "Telegram guard bot to manage network of groups.",
  "main": "index.js",
  "scripts": {
    "postversion": "git push --atomic --follow-tags origin develop develop:master",
    "start": "node index",
    "lint": "eslint --ext .ts --ext .js .",
    "typecheck": "tsc --noEmit"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/TheDevs-Network/bot.git"
  },
  "keywords": [
    "bot",
    "the guard",
    "thedevs",
    "telegram"
  ],
  "author": "Thomas Rory Gummerson <thomas@gummerson.no> (https://trgwii.no)",
  "contributors": [
    "Pouria Ezzati <pouria@thedevs.network> (https://thedevs.network)",
    "Wojciech Pawlik <woj.pawlik@gmail.com>"
  ],
  "license": "AGPL-3.0",
  "bugs": {
    "url": "https://github.com/TheDevs-Network/the-guard-bot/issues"
  },
  "homepage": "https://github.com/TheDevs-Network/the-guard-bot/",
  "dependencies": {
    "dedent-js": "^1.0.1",
    "jspack": "0.0.4",
    "millisecond": "^0.1.2",
    "nedb-promise": "^2.0.1",
    "node-fetch": "^2.2.0",
    "ramda": "^0.25.0",
    "require-directory": "^2.1.1",
    "spamwatch": "^0.2.0",
    "string-replace-async": "^1.2.1",
    "telegraf": "^3.38.0",
    "ts-node": "^8.9.1",
    "typescript": "^3.8.3",
    "xregexp": "^4.2.0"
  },
  "engines": {
    "node": ">=12.3.1"
  },
  "devDependencies": {
    "@types/node": "^13.13.2",
    "@types/node-fetch": "^2.5.7",
    "@types/ramda": "^0.25.51",
    "@types/xregexp": "^4.3.0",
    "@typescript-eslint/eslint-plugin": "^2.31.0",
    "@typescript-eslint/parser": "^2.31.0",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.11.0",
    "eslint-plugin-prettier": "^3.1.3",
    "prettier": "2.0.5"
  }
}

'''
'''--- plugins/README.md ---
# Plugins #

Plugins let you extend the bot with new functionality
without touching source code of the bot.

## Using plugins ##

To use a plugin, put it in this directory and add it's name
to `plugins` array in `config.js`.

If `plugins` is undefined, no plugins are loaded.
However, this behavior may change, don't rely on it.
If you want no plugins to be loaded, explicitly set it to empty array.

## Creating a plugin ##

Plugin is basically "requirable"
(JS file, or directory with `index.js`)
which exports a valid Telegraf handler
(usually function or `Composer` instance).

Plugins are similar to [micro-bot] bots.

## Known plugins ##

- https://gist.github.com/wojpawlik/ef6273e4155bc5db89e4db8b3bdc14a8

[micro-bot]: https://github.com/telegraf/micro-bot

'''
'''--- plugins/index.js ---
'use strict';

const { compose } = require('telegraf');

const { config } = require('../utils/config');
const names = config.plugins || [];

const plugins = names.map(name => `./${name}`).map(require);

module.exports = compose(plugins);

'''
'''--- stores/command.js ---
'use strict';

const Datastore = require('nedb-promise');

const Command = new Datastore({
	autoload: true,
	filename: 'data/Command.db',
});

Command.ensureIndex({
	fieldName: 'name',
	unique: true,
});

const addCommand = command =>
	Command.update(
		{ name: command.name },
		{ $set: { isActive: false, ...command } },
		{ upsert: true }
	);

const updateCommand = (data) =>
	Command.update({ id: data.id, isActive: false }, { $set: data });

const removeCommand = command => Command.remove(command);

const getCommand = (data) => Command.findOne(data);

const listCommands = () =>
	Command.cfind({ isActive: true }).sort({ name: 1 }).exec();

module.exports = {
	addCommand,
	getCommand,
	listCommands,
	removeCommand,
	updateCommand,
};

'''
'''--- stores/group.js ---
'use strict';

const Datastore = require('nedb-promise');

const Group = new Datastore({
	autoload: true,
	filename: 'data/Group.db',
});

Group.ensureIndex({
	fieldName: 'id',
	unique: true,
});

const addGroup = group =>
	Group.update({ id: group.id }, group, { upsert: true });

const hideGroup = ({ id }) =>
	Group.update({ id }, { $set: { link: '' } });

const updateGroup = group =>
	Group.update({ id: group.id }, { $set: group });

const listGroups = (query = {}) =>
	Group.find(query);

const listVisibleGroups = () =>
	Group.find({ $not: { link: '' } });

const managesGroup = group =>
	Group.findOne(group);

const migrateGroup = (oldId, newId) =>
	Group.update(
		{ id: oldId, type: 'group' },
		{ $set: { id: newId, type: 'supergroup' } },
	);

const removeGroup = ({ id }) =>
	Group.remove({ id });

module.exports = {
	addGroup,
	hideGroup,
	listGroups,
	listVisibleGroups,
	managesGroup,
	migrateGroup,
	removeGroup,
	updateGroup,
};

'''
'''--- stores/user.js ---
'use strict';

/**
 * @typedef { { id: number } | { username: string } } UserQuery
 * @exports UserQuery
*/

// Utils
const { strip } = require('../utils/cmd');

const Datastore = require('nedb-promise');
const ms = require('millisecond');
const R = require('ramda');

const User = new Datastore({
	autoload: true,
	filename: 'data/User.db',
	timestampData: true,
});

User.ensureIndex({
	fieldName: 'id',
	unique: true,
});

User.ensureIndex({
	fieldName: 'status',
});

// Migration
User.update(
	{ username: '' },
	{ $unset: { username: true } },
	{ multi: true },
).then(() =>
	User.ensureIndex({ fieldName: 'username', sparse: true, unique: true }));

const normalizeTgUser = R.pipe(
	R.pick([ 'first_name', 'id', 'last_name', 'username' ]),
	R.evolve({ username: R.toLower }),
	R.merge({ first_name: '', last_name: '' }),
);

const getUpdatedDocument = R.prop(1);

const getUser = user =>
	User.findOne(user);

const updateUser = async (rawTgUser) => {
	const tgUser = normalizeTgUser(rawTgUser);

	const { id, username } = tgUser;

	const [ rawDbUser ] = await Promise.all([
		getUser({ id }),
		User.update({ $not: { id }, username }, { $unset: { username: true } }),
	]);

	if (rawDbUser === null) {
		return User.update(
			{ id },
			{ status: 'member', warns: [], ...tgUser },
			{ returnUpdatedDocs: true, upsert: true },
		).then(getUpdatedDocument);
	}

	const dbUser = rawDbUser;

	if (!R.whereEq(tgUser, dbUser)) {
		return User.update(
			{ id },
			{ $set: tgUser },
			{ returnUpdatedDocs: true },
		).then(getUpdatedDocument);
	}

	return dbUser;
};

const admin = ({ id }) =>
	User.update(
		{ id },
		{ $set: { status: 'admin', warns: [] } },
	);

const getAdmins = () =>
	User.find({ status: 'admin' });

const unadmin = ({ id }) =>
	User.update({ id }, { $set: { status: 'member' } });

const isAdmin = (user) => {
	if (!user) return false;

	if (user.status) return user.status === 'admin';

	return User.findOne({ id: user.id, status: 'admin' });
};

const ban = ({ id }, ban_details) =>
	User.update(
		{ id, $not: { status: 'admin' } },
		{ $set: { ban_details, status: 'banned' } },
		{ upsert: true },
	);

const batchBan = (users, ban_details) =>
	User.update(
		{ $or: users.map(strip), $not: { status: 'admin' } },
		{ $set: { ban_details, status: 'banned' } },
		{ multi: true, returnUpdatedDocs: true },
	).then(getUpdatedDocument);

const ensureExists = ({ id }) =>
	id && User.insert({ id, status: 'member', warns: [] }).catch(R.F);

const unban = ({ id }) =>
	User.update(
		{ id },
		{
			$set: { status: 'member' },
			$unset: { ban_details: true, ban_reason: true },
		},
	);

/**
 * @param {UserQuery} user
 */
const permit = (user, { by_id, date }) =>
	User.update(
		user,
		{ $set: { permit: { by_id, date } } },
		{ returnUpdatedDocs: true },
	).then(getUpdatedDocument);

/**
 * @param {UserQuery} user
 */
permit.revoke = (user) =>
	User.update(
		{ permit: { $exists: true }, ...strip(user) },
		{ $unset: { permit: true } },
		{ returnUpdatedDocs: true },
	).then(getUpdatedDocument);

permit.isValid = (p) => Date.now() - ms('24h') < p?.date;

const warn = ({ id }, reason, { amend }) =>
	User.update(
		{ id, $not: { status: 'admin' } },
		{
			$pop: { warns: +!!amend },
			$push: { warns: reason },
			$unset: { permit: true },
		},
		{ returnUpdatedDocs: true },
	).then(getUpdatedDocument);

const unwarn = ({ id }, warnQuery) =>
	User.update(
		{ id },
		{
			$pull: { warns: warnQuery },
			$set: { status: 'member' },
			$unset: { ban_details: true, ban_reason: true },
		},
	);

const nowarns = query => unwarn(query, {});

module.exports = {
	admin,
	ban,
	batchBan,
	ensureExists,
	getAdmins,
	getUser,
	isAdmin,
	nowarns,
	permit,
	unadmin,
	unban,
	unwarn,
	updateUser,
	warn,
};

'''
'''--- tsconfig.json ---
{
	"compilerOptions": {
		"allowJs": true,
		"module": "CommonJS",
		"noEmit": true,
		"noImplicitAny": false,
		"strict": true,
		"target": "ES2019"
	}
}

'''
'''--- typings/config.d.ts ---
import type { InlineKeyboardMarkup } from "telegraf/typings/telegram-types";

export type InlineKeyboard = InlineKeyboardMarkup["inline_keyboard"];

/**
 * String to be parsed by https://npmjs.com/millisecond,
 * or number of milliseconds.
 */
type ms = number | string;

export interface Config {
	/**
	 * ID (number) or username (string) of master,
	 * the person who can promote and demote admins,
	 * and add the bot to groups.
	 */
	master: number | string | (number | string)[];

	/**
	 * Telegram Bot token obtained from https://t.me/BotFather.
	 */
	token: string;

	chats?: {
		/**
		 * Chat to log all admin actions to.
		 */
		adminLog?: number;

		/**
		 * Chat to send member join/leave notifications to.
		 * Pass false to disable this feature.
		 */
		presenceLog?: number | false;

		/**
		 * Chat to send report notifications to.
		 * Pass false to disable this feature.
		 */
		report?: number | false;
	};

	/**
	 * Which messages with commands should be deleted?
	 * Defaults to 'own' -- don't delete commands meant for other bots.
	 */
	deleteCommands?: "all" | "own" | "none";

	deleteCustom?: {
		longerThan: number; // UTF-16 characters
		after: ms;
	};

	/**
	 * Timeout before removing join and leave messages.
	 * [Look at typedef above for details.]
	 * Pass false to disable this feature.
	 */
	deleteJoinsAfter?: ms | false;

	/**
	 * Timeout before removing auto-warn messages.
	 * [Look at typedef above for details.]
	 * Pass an object with { auto, manual } for more granular control
	 * over which messages get deleted
	 * Pass false to disable this feature.
	 */
	deleteWarnsAfter?: ms | { auto: ms | false; manual: ms | false } | false;

	/**
	 * Timeout before removing ban messages.
	 * [Look at typedef above for details.]
	 * Pass false to disable this feature.
	 */
	deleteBansAfter?: ms | false;

	/**
	 * List of blacklisted domains.
	 * Messages containing blacklisted domains will automatically be warned.
	 * If the link is shortened, an attempt will be made to resolve it.
	 * If resolved link is blacklisted, it will be warned for.
	 */
	blacklistedDomains?: string[];

	/**
	 * List of whitelisted links and usernames,
	 * For channels and groups to stop warning users for them.
	 * Pass false to whitelist all links and channels.
	 */
	excludeLinks?: string[] | false;

	/**
	 * Don't count warns older than this value towards automatic ban.
	 * [Look at typedef above for details.]
	 */
	expireWarnsAfter?: ms;

	/**
	 * Inline keyboard to be added to reply to /groups.
	 * We use it to display button opening our webpage.
	 */
	groupsInlineKeyboard?: InlineKeyboard;

	numberOfWarnsToBan: number;

	/**
	 * List of plugin names to be loaded.
	 * See Readme in plugins directory for more details.
	 */
	plugins?: string[];

	spamwatch?: {
		token: string;
		host?: string;
	};

	/**
	 * Inline keyboard to be added to warn message.
	 * We use it to display button showing our rules.
	 */
	warnInlineKeyboard?: InlineKeyboard;
}

'''
'''--- typings/context.d.ts ---
import type {
	ExtraReplyMessage,
	Message,
	User,
} from "telegraf/typings/telegram-types";
import type { Context } from "telegraf";
import type { TgHtml } from "../utils/html";

interface DbUser {
	status: "member" | "admin" | "banned";
}

export interface ContextExtensions {
	ban(
		this: ExtendedContext,
		options: {
			admin: User;
			reason: string;
			userToBan: User;
		}
	): Promise<Message>;
	batchBan(
		this: ExtendedContext,
		options: {
			admin: User;
			reason: string;
			targets: User[];
		}
	): Promise<Message>;
	warn(
		this: ExtendedContext,
		options: {
			admin: User;
			amend?: boolean;
			reason: string;
			userToWarn: User;
			mode: "auto" | "manual";
		}
	): Promise<Message>;

	loggedReply(
		this: ExtendedContext,
		html: TgHtml,
		extra?: ExtraReplyMessage
	): Promise<Message>;
	replyWithHTML(
		this: void,
		html: string | TgHtml,
		extra?: ExtraReplyMessage
	): Promise<Message>;
	replyWithCopy(
		this: ExtendedContext,
		content: Message,
		options?: ExtraReplyMessage
	): Promise<Message>;
}

export type ExtendedContext = ContextExtensions &
	Context & {
		from?: DbUser;
	};

'''
'''--- utils/cmd/index.js ---
'use strict';

module.exports = {
	...require('./parse'), // eslint-disable-line global-require
	...require('./stringify'), // eslint-disable-line global-require
	...require('./substom'), // eslint-disable-line global-require
};

'''
'''--- utils/cmd/parse.ts ---
import XRegExp = require("xregexp");
import type { Message, MessageEntity } from "telegraf/typings/telegram-types";

export const strip = ({ id, username }) =>
	id ? { id } : { username: username.toLowerCase() };

const toUserObject = (s) =>
	s.user || (/^\d+$/.test(s) ? { id: +s } : { username: s.replace("@", "") });

const isTextMention = (m: MessageEntity) => m.type === "text_mention";

const spliceOut = (s: string, { offset, length }: MessageEntity) =>
	s.slice(0, offset) + s.slice(offset + length);

const botReply = ({ from, entities = [] }: Message) => {
	const textMentions = entities.filter(isTextMention);

	return from?.is_bot && textMentions.length === 1 && [textMentions[0].user];
};

const flagsRegex = /\s+(?:--?|—)(\w+)(?:=(\S*))?/g;

function* extractFlags(flagS: string) {
	// @ts-ignore
	for (const [, name, value] of flagS.matchAll(flagsRegex)) {
		yield [name.toLowerCase(), value] as const;
	}
}

const regex = XRegExp.tag("snx")`^
	\/\w+(@\w+)?
	(?<flagS> ${flagsRegex}*)
	(?<ids> (\s+@\w+|\s+\d+)*)
	(?:\s+--|\s+—)?
	(?:\s+(?<reason>.*))?
$`;

export const isCommand = (
	message?: Message
): message is Message & {
	text: string;
	entities: [{ type: "bot_command"; offset: 0 }];
} => {
	const firstEntity = message?.entities?.[0];
	return firstEntity?.type === "bot_command" && firstEntity.offset === 0;
};

export const parse = (message?: Message) => {
	if (!isCommand(message)) {
		throw new TypeError("Not a command");
	}
	const textMentions = message.entities.filter(isTextMention);
	const noTextMentions = textMentions.reduceRight(spliceOut, message.text);

	const { flagS, ids, reason = "" } = XRegExp.exec(noTextMentions, regex)!;
	const flags = new Map(extractFlags(flagS));
	const users = textMentions.concat(ids.match(/@\w+|\d+/g) || []);
	const { reply_to_message } = message;

	// prettier-ignore
	const targets = users.length
		? users.map(toUserObject)
		: reply_to_message
			? botReply(reply_to_message) || [ reply_to_message.from ]
			: [];

	return { flags, reason, targets };
};

'''
'''--- utils/cmd/stringify.js ---
'use strict';

const camelToSnake = s => s.replace(/[A-Z]/g, c => '_' + c.toLowerCase());

exports.stringify = ({ command = '', flags = {}, reason = '' }) => {
	const flagS = Object.entries(flags)
		.flatMap(([ key, value ]) => {
			switch (value) {
			case null:
			case false:
			case undefined: // eslint-disable-line no-undefined
				return [];
			case true:
				return [ '-' + camelToSnake(key) ];
			default:
				return [ `-${camelToSnake(key)}=${value}` ];
			}
		}).join(' ');
	return [
		'/' + command,
		flagS,
		reason
	].filter(Boolean).join(' ');
};

'''
'''--- utils/cmd/substom.ts ---
import replace = require("string-replace-async");
import { getCommand } from "../../stores/command";

export const substom = (reason: string): Promise<string> =>
	replace(reason, /!\s?(\w+)\s*|.+/g, async (match, name) => {
		if (!name) return match;
		const command = await getCommand({
			name: name.toLowerCase(),
			role: { $ne: "master" },
			type: "copy",
		});
		const text = command?.content.text || command?.content.caption;
		if (!text) return match;
		return text + " ";
	});

'''
'''--- utils/config.js ---
// @ts-check
'use strict';

/** @type { import('../typings/config').Config } */
// @ts-ignore
const config = require('../config');
const eq = require('./eq');

const ms = require('millisecond');

const { expireWarnsAfter = Infinity } = config;

const isNewerThan = date => warning => warning.date >= date;

/** @param {Date} date */
const isWarnNotExpired = date =>
	isNewerThan(date.getTime() - ms(expireWarnsAfter));

const stringOrNumber = x => [ 'string', 'number' ].includes(typeof x);

// @ts-ignore
const masters = [].concat(config.master);

if (!masters.every(x => stringOrNumber(x) && /^@?\w+$/.test(x))) {
	throw new Error('Invalid value for `master` in config file: ' +
		config.master);
}

const isMaster = user =>
	user && masters.some(x =>
		user.id === Number(x) ||
		user.username && eq.username(user.username, String(x)));

module.exports = {
	config,
	isMaster,
	isWarnNotExpired,
};

'''
'''--- utils/eq.js ---
'use strict';

const R = require('ramda');

module.exports = R.map(R.eqBy, require('./normalize'));

'''
'''--- utils/html.ts ---
// from https://gist.github.com/f9e184b78bbfc4419bc1ee70c238ca6f

import dedent = require("dedent-js");

const symbol = Symbol("TgHtml.symbol");

type Escapable = bigint | boolean | Error | number | string;
type Sub = Escapable | TgHtml;

const escapeHtml = (s: Escapable) =>
	String(s)
		.replace(/&/g, "&amp;")
		.replace(/"/g, "&quot;")
		.replace(/'/g, "&#39;")
		.replace(/</g, "&lt;");

const isTgHtml = (o: Sub): o is TgHtml => typeof o?.[symbol] === "string";
const toHtml = (o: Sub) => (isTgHtml(o) ? o[symbol] : escapeHtml(o));

export class TgHtml {
	readonly [Symbol.toStringTag] = "TgHtml";
	private readonly [symbol]: string;
	private constructor(s: string) {
		this[symbol] = s;
	}
	toJSON() {
		return this[symbol];
	}
	get length() {
		return this[symbol].length;
	}

	static tag(raw: TemplateStringsArray, ...subs: Sub[]) {
		return new TgHtml(dedent(raw, ...subs.map(toHtml)));
	}
	static join(sep: Sub, s: Sub[]) {
		return new TgHtml(s.map(toHtml).join(toHtml(sep)));
	}
	static concat(...s: Sub[]) {
		return TgHtml.join("", s);
	}
	static pre(s: Sub) {
		return TgHtml.tag`<pre>${s}</pre>`;
	}
}

export const html = (raw: TemplateStringsArray, ...subs: Sub[]) =>
	TgHtml.tag(raw, ...subs);

export const lrm = "\u200E";

'''
'''--- utils/log.js ---
// @ts-check
'use strict';

/* eslint-disable no-console */

const { inspect } = require('util');

const logError = err => console.error(err);

const print = value =>
	console.log(inspect(value, { colors: true, depth: null }));

module.exports = {
	logError,
	print
};

'''
'''--- utils/normalize.js ---
'use strict';

const username = s => s.replace(/^@/, '').toLowerCase();

module.exports = {
	username,
};

'''
'''--- utils/promise.ts ---
export function pMap<T, U>(arr: T[], fn: (t: T) => Promise<U>) {
	return Promise.all(arr.map(fn));
}

'''
'''--- utils/spamwatch.js ---
// @ts-check
'use strict';

const { Client } = require('spamwatch');

const { config } = require('./config');

// eslint-disable-next-line func-names
exports.shouldKick = (function () {
	if (!config.spamwatch) {
		return () => false;
	}

	const client = new Client(config.spamwatch.token, config.spamwatch.host);
	return ({ id }) => client.getBan(id);
}());

'''
'''--- utils/tg.js ---
// @ts-check
'use strict';

const millisecond = require('millisecond');
const { telegram } = require('../bot');

const { html, lrm } = require('./html');
const R = require('ramda');

const replyId = R.path([ 'reply_to_message', 'message_id' ]);

const { isCommand } = require('../utils/cmd');

const inlineKeyboard = (...inline_keyboard) =>
	({ reply_markup: { inline_keyboard } });

const msgLink = msg =>
	`https://t.me/c/${msg.chat.id.toString().slice(4)}/${msg.message_id}`;

const link = ({ id, first_name }) =>
	html`${lrm}<a href="tg://user?id=${id}">${first_name}</a> [<code>${id}</code>]`;

const quietLink = (user) =>
	user.username
		? html`<a href="t.me/${user.username}">${user.first_name}</a>`
		: html`<a href="tg://user?id=${user.id}">${user.first_name}</a>`;

const displayUser = user =>
	user.first_name
		? link(user)
		: html`[<code>${user.id}</code>]`;

/** @param {number | string | false} ms */
const deleteAfter = ms => (ctx, next) => {
	if (ms !== false) {
		setTimeout(ctx.deleteMessage, millisecond(ms));
	}
	next();
};

/** @param {number | string | false} ms */
const scheduleDeletion = (ms = 5 * 60 * 1000) => message => {
	const { chat, message_id } = message;

	if (chat.type !== 'private' && ms !== false) {
		message.timeout = setTimeout(
			() => telegram.deleteMessage(chat.id, message_id),
			millisecond(ms),
		);
	}

	return message;
};

module.exports = {
	deleteAfter,
	displayUser,
	inlineKeyboard,
	isCommand,
	link,
	msgLink,
	quietLink,
	replyId,
	scheduleDeletion,
};

'''