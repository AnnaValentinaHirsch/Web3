*GitHub Repository "akaia-near/nearnames"*

'''--- .eslintrc.js ---
module.exports = {
  parserOptions: {
    ecmaVersion: 2020,
    sourceType: 'module',
    ecmaFeatures: {
      jsx: true,
    },
  },
};

'''
'''--- prettier.config.js ---
// Remember to edit .vscode/settings.json like in https://paulintrognon.fr/blog/typescript-prettier-eslint-next-js

// https://prettier.io/docs/en/options.html
module.exports = {
  trailingComma: 'all',
  endOfLine: 'auto', // https://stackoverflow.com/a/53769213/
  printWidth: 180,
  bracketSpacing: true,
  useTabs: false,
  tabWidth: 2,
  semi: true,
  singleQuote: true,
  arrowParens: 'always',
  overrides: [
    {
      files: 'Routes.js',
      options: {
        printWidth: 200,
      },
    },
  ],
};

'''
'''--- src/App.js ---
import React, { useContext, useEffect } from 'react';
import { appStore, onAppMount } from './state/app';

import { Container } from './components/Container';
import { Receiver } from './components/Receiver';
import { Giver } from './components/Giver';

// helpers
export const btnClass = 'btn btn-lg btn-outline-primary mb-3 ';
export const flexClass = 'd-flex justify-content-evenly align-items-center ';
export const qs = (s) => document.querySelector(s);

const App = () => {
  const { state, dispatch, update } = useContext(appStore);

  const onMount = () => {
    dispatch(onAppMount());
  };
  useEffect(onMount, []);

  // console.log('state', state);

  const { accountData, funding, wallet } = state;

  let children = null;

  if (accountData) {
    children = <Receiver {...{ state, dispatch }} />;
  }

  if (funding) {
    children = (
      <div class="container container-custom">
        <h2>DO NOT CLOSE OR REFRESH THIS PAGE</h2>
        <h2>Creating Account...</h2>
      </div>
    );
  }

  if (wallet) {
    children = <Giver {...{ state, dispatch, update }} />;
  }

  return <Container state={state}>{children}</Container>;
};

export default App;

'''
'''--- src/components/Container.js ---
import React from 'react';

import { flexClass } from '../App';

export const Container = ({ children, state }) => {
  return (
    <>
      <div class="background"></div>
      <div class={flexClass}>
        <div class="container container-custom">{children}</div>
      </div>
      {state.app.alert && (
        <div class="container-alert">
          <div class={flexClass + ' mt-0'}>
            <div class="container container-custom mt-0">
              <div class="alert alert-primary mt-0" role="alert">
                {state.app.alert}
              </div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

'''
'''--- src/components/Footer.js ---
import React from 'react';

export default function Footer() {
  return (
    <footer class="container text-center mt-5">
      <small>
        Questions? Comments? Cookies? Hit us up{' '}
        <a href="https://twitter.com/NEARProtocol?s=20" target="_blank">
          @NEARProtocol
        </a>{' '}
        🌈 or{' '}
        <a href="https://near.chat" target="_blank">
          https://near.chat
        </a>{' '}
        or{' '}
        <a href="https://github.com/near-examples/nearnames" target="_blank">
          GitHub
        </a>
      </small>
    </footer>
  );
}

'''
'''--- src/components/Giver.js ---
import React, { useState } from 'react';
import { onAlert } from '../state/app';
import { nameSuffix, unclaimLink } from '../state/near';
import { share } from '../utils/mobile';
import { flexClass, btnClass, qs } from '../App';
import { getVideoId } from '../utils/youtube';
import SignedOutSteps from './SignedOutSteps';
import Footer from './Footer';

const forExample = `(for example: "bestie${nameSuffix}" or "squad${nameSuffix}")`;
const forExampleWithoutSuffix = forExample.replaceAll(nameSuffix, '');
const baseUrl = window.location.href.substr(0, window.location.href.lastIndexOf('/'));
const getLink = (accountId, key, wallet, message = '', link = '') =>
  `${baseUrl}?accountId=${accountId}&key=${key}&from=${wallet.getAccountId()}&message=${encodeURIComponent(message)}&link=${getVideoId(link)}`;

console.log(nameSuffix);

export const Giver = ({ state, update, dispatch }) => {
  const { app, wallet, links, claimed } = state;

  const [id, setId] = useState('');
  const [disabled, setDisabled] = useState(true);
  const [message, setMessage] = useState('');
  const [link, setLink] = useState('');

  const checkDisabled = () => {
    setTimeout(() => setDisabled(!!document.querySelectorAll(':invalid').length), 250);
  };

  return (
    <>
      <div className={flexClass + 'mb-3 text-center'}>
        <h1>Gift a name on NEAR Protocol!</h1>
      </div>

      <h4>
        Claim a name for friends and family on the{' '}
        <a href="https://near.org/" target="_blank">
          NEAR blockchain
        </a>
        .
      </h4>

      {wallet.signedIn ? (
        <>
          <p>
            Your wallet (<strong>{wallet.getAccountId()}</strong>) currently has a balance of <strong>{wallet.balance} N</strong>.
          </p>
          <ol>
            <li className="mb-3">
              When you <strong>submit the form below</strong>, a new account will be created (using the account name you choose) and will be funded with the amount of NEAR tokens
              that you're gifting to that account (minus a small amount of NEAR that is used to claim the custom account name).
            </li>
            <li className="mb-3">
              On the following page, <strong>you'll receive a "magic link"</strong> that you'll be able to share with your friend.
            </li>
            <li className="mb-3">
              <strong>Your friend will click the link</strong> that you shared and will then be guided through the easy process of claiming and taking full ownership of that new
              account.
            </li>
          </ol>
        </>
      ) : (
        <SignedOutSteps forExample={forExample} />
      )}

      {wallet.signedIn ? (
        <>
          <h2 className="pt-3">My Wallet</h2>
          <div className={flexClass}>
            <div>
              <p>{wallet.getAccountId()}</p>
              <p>Balance: {wallet.balance} N</p>
            </div>
            <button
              className={btnClass + 'ms-3'}
              onClick={() => {
                wallet.signOut();
                update('wallet.signedIn', false);
              }}
            >
              Sign Out
            </button>
          </div>
        </>
      ) : (
        <div className={flexClass}>
          <button className={btnClass} onClick={() => wallet.signIn()}>
            Connect to NEAR Wallet
          </button>
        </div>
      )}

      {wallet.signedIn && (
        <>
          {links && links.length > 0 && (
            <>
              <h2>Gift Links</h2>
              <center>
                {links.map(({ key, accountId, recipientName = '' }) => (
                  <div key={key}>
                    <div>
                      <strong>{accountId}</strong> {recipientName.length > 0 && <span>for {recipientName}</span>}
                    </div>
                    <div>
                      <button
                        className={btnClass + 'mt-2'}
                        onClick={() => {
                          share(getLink(accountId, key, wallet, message, link));
                          dispatch(onAlert('Copied!'));
                        }}
                      >
                        Click to Share
                      </button>
                    </div>
                  </div>
                ))}
              </center>
              <h4 className="mb-3">Include Gift Message (optional)</h4>
              <p className="sub-note">
                Personalize each link <i>before</i> you "Click to Share" above.
              </p>
              <form className={'was-validated'}>
                <div className="form-floating mb-3">
                  <textarea type="text" className="form-control" placeholder=" " maxlength="140" value={message} onChange={(e) => setMessage(e.target.value)} />
                  <label for="fundingAmount">Custom Message</label>
                </div>
                {/* <div className="form-floating mb-3" name="yt-link">
                                <input type="text" className="form-control" placeholder=" "
                                    value={link}
                                    pattern="(?:https?:\/\/)?(?:www\.)?youtu(?:\.be\/|be.com\/\S*(?:watch|embed)(?:(?:(?=\/[^&\s\?]+(?!\S))\/)|(?:\S*v=|v\/)))([^&\s\?]+)"
                                    onChange={(e) => setLink(e.target.value)}
                                />
                                <label for="fundingAmount">YouTube Link</label>
                                <div className="invalid-feedback">
                                    Not a valid YT link
                                </div>
                            </div> */}
              </form>
              {/* <select className="form-control" id="video-select" onChange={() => setLink(qs('#video-select').value)}>
                            <option value="">Select a Video</option>
                            <option value="https://www.youtube.com/watch?v=s1LUXQWzCno">Charlie Brown Christmas Dance</option>
                            <option value="https://www.youtube.com/watch?v=ppWrbYC3WwQ">How the Grinch Stole Christmas</option>
                            <option value="https://www.youtube.com/watch?v=uwCcVRH8idA">Otis Redding - White Christmas</option>
                            <option value="https://www.youtube.com/watch?v=dQw4w9WgXcQ">Never Gonna Give You Up</option>
                            <option value="https://www.youtube.com/watch?v=B7u6bMBlCXw">Love Actually - To me you are perfect</option>
                            <option value="https://www.youtube.com/watch?v=76WFkKp8Tjs">Bruce Springsteen - Santa Claus Is Comin' To Town</option>
                            <option value="https://www.youtube.com/watch?v=sDfcQ_LBHqY">Mean Girls  - Jingle Bell Rock</option>
                            <option value="https://www.youtube.com/watch?v=yXQViqx6GMY">Mariah Carey - All I Want For Christmas Is You</option>
                        </select> */}
            </>
          )}
          <h2 className="mt-5">Create {links && links.length > 0 ? 'Another' : ''} Gift Account</h2>
          <form className={'needs-validation ' + (app.wasValidated ? 'was-validated' : '')} autocomplete="off">
            <div className="form-floating">
              <input
                type="text"
                className="form-control"
                id="accountName"
                placeholder=" "
                required
                minlength={app.accountTaken ? 999999 : 2}
                maxlength={48}
                pattern="^(([a-z\d]+[\-_])*[a-z\d]+$"
                autocomplete="off"
                value={id}
                onChange={(e) => {
                  const v = e.target.value.toLowerCase();
                  setId(v);
                  wallet.isAccountTaken(v);
                  checkDisabled();
                }}
              />
              <label for="accountName">Account Name {forExampleWithoutSuffix}</label>
              <div className="invalid-feedback">{app.accountTaken ? 'Account name is already taken' : '2-48 characters, no spaces, no symbols'}</div>
            </div>
            <small className="text-muted d-block mb-3">The "{nameSuffix}" suffix will be added automatically to this account name.</small>

            <div className="form-floating mb-3">
              <input type="number" className="form-control" id="fundingAmount" placeholder=" " required min={0.1} step={0.00001} onChange={() => checkDisabled()} />
              <label for="fundingAmount">Gift Amount (N)</label>
              <div className="invalid-feedback">Please enter an amount of NEAR &gt;= 0.1</div>
            </div>

            <div className="form-floating mb-3">
              <input
                type="text"
                className="form-control"
                id="recipientName"
                placeholder=" "
                required
                minlength={1}
                maxlength={64}
                autocomplete="off"
                onChange={() => checkDisabled()}
              />
              <label for="recipientName">Recipient Name</label>
              <section id="accordion">
                <section id="recipient-name-hint">
                  <a href="#recipient-name-hint">
                    <small className="text-muted">How does Recipient Name get used?</small>
                  </a>
                  <div>
                    This form only asks for the Recipient Name so your friend will see a friendly greeting on the page when claiming the account. The Recipient Name does not get
                    stored in the account anywhere.
                  </div>
                </section>
              </section>
              <div className="invalid-feedback">Please enter a name</div>
            </div>
          </form>
          <button disabled={disabled} className={btnClass + 'pulse'} onClick={() => wallet.fundAccount(qs('#fundingAmount').value, id, qs('#recipientName').value)}>
            CREATE GIFT ACCOUNT
          </button>
          {links && links.length > 0 && (
            <>
              <h2 className="mt-5">Backup</h2>

              <button
                className={btnClass + 'mt-3'}
                onClick={() => {
                  let backupTxt = '';
                  links.forEach(({ key, accountId, recipientName = '' }) => {
                    backupTxt += `accountId: ${getLink(accountId, key, wallet, message, link)} for ${recipientName}\n\n`;
                  });
                  share(backupTxt);
                  dispatch(onAlert('Copied!'));
                }}
              >
                Copy All Gift Links
              </button>
              <p className="sub-note">In case your browser's storage is cleared. Keep them somewhere safe!</p>
            </>
          )}
          {claimed.length > 0 && <h2 className="mt-5">Past Gifted Accounts</h2>}
          {claimed.map(({ key, accountId, recipientName = '' }) => (
            <div key={key}>
              <p className={'mb-0'}>
                <strong>{accountId}</strong>: claimed by {recipientName}
              </p>
              <button className={btnClass + 'mb-3'} onClick={() => dispatch(unclaimLink(key))}>
                Try Share Link Again
              </button>
            </div>
          ))}
        </>
      )}

      <Footer />
    </>
  );
};

'''
'''--- src/components/Receiver.js ---
import React, { useEffect, useState } from 'react';
import { share } from '../utils/mobile';
import anime from 'animejs/lib/anime.es.js';
import { onAlert } from '../state/app';
import { keyRotation, walletUrl, SEED_PHRASE_LOCAL_COPY } from '../state/near';
import { btnClass, qs } from '../App';
import { get } from '../utils/storage';

import stocking from '../img/stocking.svg';
import tweet from '../img/twitter.webp';

export const Receiver = ({ state, dispatch }) => {
  const { accountId, from, seedPhrase, message, link, keyExists } = state.accountData;
  const sender = from;
  const btnSuccessClass = `${btnClass.replace('btn-outline-primary', '')} btn-success pulse`;

  const [claiming, setClaiming] = useState(false);
  const [success, setSuccess] = useState(0);
  const [seedHidden, setSeedHidden] = useState(true);

  useEffect(() => {
    var tag = document.createElement('script');

    tag.src = 'https://www.youtube.com/iframe_api';
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    window.onYouTubeIframeAPIReady = () => {
      window.player = new YT.Player('player-yt', {
        videoId: link && link.length > 0 ? link : 's1LUXQWzCno',
        events: {
          onReady: () => setVideoReady(true),
        },
      });
    };
  }, []);

  if (claiming) {
    return (
      <div class="container container-custom">
        <h2>DO NOT CLOSE OR REFRESH THIS PAGE</h2>
        <h2>Claiming Your Account...</h2>
      </div>
    );
  }

  if (!keyExists || success === 1) {
    return (
      <div class="container container-custom">
        <h2>Congratulations!</h2>
        <ul>
          <li>Your passphrase is like a password.</li>
          <li>Do not share it with anyone!</li>
          <li>Your account is forever tied to this phrase. You can log into or recover your account with your passphrase at wallet.near.org from now on!</li>
        </ul>

        <div class="container text-center mt-5">
          <a href={walletUrl + '/recover-seed-phrase'} target="_blank">
            <button class={btnClass}>Sign in to NEAR Wallet</button>
          </a>
        </div>

        <div class="container text-center mt-5">
          <button
            class={btnClass}
            onClick={() => {
              const localSeedPhrase = get(SEED_PHRASE_LOCAL_COPY, '');
              if (!localSeedPhrase.length) {
                window.alert(
                  'There is no seed phrase on this device for this gift link. Did you open the link in another browser? Please open that link again and use this button!',
                );
              }
              share(localSeedPhrase);
              dispatch(onAlert('Copied!'));
            }}
          >
            COPY SEED PHRASE
          </button>
          <p class="sub-note">This is a local copy in your browser, just in case you didn't write it down. Please write down your passphrase and keep it somewhere safe!</p>
        </div>

        <div class="container text-center mt-5">
          <p>Sharing is caring! Spread the love ✌️</p>

          <a
            href={`https://twitter.com/intent/tweet?text=${encodeURIComponent(
              `${sender} gifted me the snazzy NEAR Account Name: ${accountId} @nearprotocol #NEARName https://nearnames.com/ `,
            )}`}
            target="_blank"
          >
            <button class={btnClass + 'tweet-button'}>
              <img class="tweet-icon" src={tweet} />
              &nbsp;&nbsp;Tweet About Your Gift
            </button>
          </a>
        </div>

        <div class="container text-center mt-5">
          <p>
            Questions? Comments? Cookies?
            <br />
            Hit us up{' '}
            <a href="https://twitter.com/NEARProtocol?s=20" target="_blank">
              @NEARProtocol on Twitter
            </a>{' '}
            🌈
          </p>
        </div>
      </div>
    );
  }

  return (
    <>
      <div class="text-center mt-3 mb-5">
        <h3>Welcome to NEAR!</h3>
        <p>
          <b>{sender}</b> has gifted you a brand new{' '}
          <a href="https://near.org/" target="_blank">
            NEAR
          </a>{' '}
          account (<b>{accountId}</b>), along with some NEAR tokens inside it!
        </p>

        {message && message.length > 0 && (
          <div className="card p-3">
            <p>
              Message from <b>{sender}</b>:
            </p>
            <p>{message}</p>
          </div>
        )}
      </div>

      <div class="position-yt mb-3">
        <div class="wrap-yt mb-3">
          <div class="size-yt mb-3">
            <div id="player-yt" />
          </div>
        </div>
      </div>

      {/* <div class="wrap-stocking">
            <div class="stocking-cta">{videoReady ? '👇 Open Stocking 👇' : ''}</div>
            <img class="stocking" src={stocking} onClick={() => {
                if (!videoReady) return
                window.player.playVideo()
                setVideoReady(false)
                // qs('#ytplayer').src += '&autoplay=1'
                anime({
                    targets: '.wrap-yt',
                    easing: 'easeOutElastic',
                    keyframes: [
                        { opacity: -1, translateX: 50, translateY: 50, scaleX: 0, scaleY: 0, duration: 0 },
                        { opacity: 1, translateX: 25, translateY: -Math.min(200, window.innerWidth / 5), scaleX: 0.5, scaleY: 0.5, duration: 1000 },
                        { translateX: 0, translateY: -25, scaleX: 1, scaleY: 1, duration: 250, easing: 'easeOutCubic' },
                    ],
                    complete: function () {
                        anime({
                            targets: '.stocking',
                            opacity: 0,
                            duration: 1000,
                        })
                        setTimeout(() => {
                            qs('.stocking').style.height = qs('.wrap-yt').getBoundingClientRect().height - 20 + 'px'
                            qs('.instructions').style.display = 'block'
                            anime({
                                targets: '.instructions',
                                opacity: 1,
                                duration: 1000,
                            })
                        }, 1000)
                    }
                });
            }} />
        </div> */}

      <div class="instructions">
        <p>To accept this gift (i.e. claim ownership of your new account), simply follow the steps below.</p>
        <p>The passphrase that you'll see below is like an account password but with a couple important differences:</p>
        <ul>
          <li className="mb-3">
            Anyone who knows a NEAR account's passphrase has full control of the account without even needing to know the account name. (So keep the passphrase private!)
          </li>
          <li>
            If you were to forget your passphrase, you'd completely lose access to your account. You would be permanently locked out. (Even the NEAR team does not have the ability
            to assign a new passphrase to an account.)
          </li>
        </ul>
        <h3>Claim Your New Account</h3>
        <ol>
          <li className="mb-3">Click the button below to reveal your passphrase.</li>
          <li className="mb-3">Write those 12 words down in their exact order.</li>
          <li className="mb-3">Click the "Claim My Account Now" button once you've safely stored your passphrase somewhere.</li>
          <li className="mb-3">Do not share your passphrase with anyone! This passphrase controls your NEAR account and its NEAR tokens, so keep it somewhere safe and private.</li>
          <li>
            Going forward, you can use your passphrase at{' '}
            <a href={walletUrl} target="_blank">
              wallet.near.org
            </a>{' '}
            to access your account.
          </li>
        </ol>

        {seedHidden && (
          <button
            className={btnClass}
            style={{ textTransform: 'uppercase' }}
            onClick={() => {
              setSeedHidden(!seedHidden);
            }}
          >
            Reveal My Passphrase
          </button>
        )}

        <div class="form-floating mb-3">
          <textarea readonly class="form-control" id="seedPhrase" value={seedHidden ? `******** ****  ********  ******` : seedPhrase} />
          <label for="seedPhrase">Passphrase</label>
        </div>

        {!seedHidden && (
          <>
            <button
              className={btnClass}
              style={{ textTransform: 'uppercase' }}
              onClick={() => {
                share(seedPhrase);
                dispatch(onAlert('Copied!'));
              }}
            >
              Copy Passphrase
            </button>

            <br />
            <center>
              <button
                className={btnSuccessClass}
                onClick={async () => {
                  setClaiming(true);
                  try {
                    await dispatch(keyRotation());
                    setSuccess(1);
                  } catch (e) {
                    if (e.message.indexOf('Can not sign transactions') > -1) {
                      alert('It looks like the account has already been claimed!');
                      setSuccess(1);
                    } else {
                      alert('There was an error claiming your account. Please try again.');
                      console.error(e);
                    }
                  }
                  setClaiming(false);
                }}
              >
                I wrote down my passphrase! CLAIM MY ACCOUNT NOW!
              </button>
            </center>
          </>
        )}
        <small className="text-muted">
          (Until you click the "Claim My Account" button, the account technically remains available for anyone to claim by visiting this special account claiming page, but
          presumably you are the only person who knows the URL of this page, other than the friend who sent it to you.)
        </small>
      </div>
    </>
  );
};

'''
'''--- src/components/SignedOutSteps.js ---
import React from 'react';
import screenshot from '../img/connect.png';

export default function SignedOutSteps({ forExample }) {
  return (
    <>
      <p>Below, we'll guide you through these easy steps:</p>
      <ol>
        <li>
          <strong>Sign in</strong> to your{' '}
          <a href="https://wallet.near.org/" target="_blank" style={{ fontWeight: 'bold' }}>
            NEAR Wallet
          </a>
          .
        </li>
        <li>
          <strong>Connect</strong> to your NEAR Wallet using the button below.
          <ul>
            <li>
              You will see a screen like this and click "Next" to confirm:{' '}
              <a style={{ border: '1px dashed #ccc', padding: '1rem', maxWidth: '200px' }} className="d-inline-block" target="_blank" href={screenshot}>
                <img src={screenshot} alt="screenshot" className="img-fluid" />
              </a>
            </li>
          </ul>
        </li>
        <li>
          <strong>Choose an account name</strong> for the new NEAR account {forExample}.
        </li>
        <li>
          <strong>Choose an amount</strong> of NEAR tokens that you want to send to that account (from your own wallet).
        </li>
        <li>
          <strong>Send</strong> the magic link to your friend.
          <ul>
            <li>When your friend visits the link, they'll be able to claim and take full ownership of that account and all of its tokens!</li>
          </ul>
        </li>
      </ol>
    </>
  );
}

'''
'''--- src/index.html ---
<!doctype html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:title" content="NEAR Names" />
    <meta property="og:image" content="./img/preview_jake.png" />
    <meta property="og:image:width" content="1200"/>
    <meta property="og:image:height" content="628"/>
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://near-examples.github.io/account-gifter/" />
    <meta property="og:description" content="Your friend has gifted you a unique account name on the NEAR blockchain!" />
    <meta name="twitter:card" content="summary_large_image">
    <meta name="twitter:site" content="@mattdlockyer">
    <meta name="twitter:creator" content="@mattdlockyer">
    <meta property="twitter:image:alt" content="your_name_on.near">

    <title>NEAR Names</title>

    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous">

    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600&display=swap" rel="stylesheet">

    <link rel="stylesheet" type="text/css" href="./App.css">

</head>

<body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js"></script>
</body>

</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { AppProvider } from './state/app.js';

ReactDOM.render(
  <AppProvider>
    <App />
  </AppProvider>,
  document.getElementById('root'),
);

'''
'''--- src/state/app.js ---
import anime from 'animejs/lib/anime.es.js';
import { generateSeedPhrase } from 'near-seed-phrase';
import { State } from '../utils/state';
import { initNear, hasKey } from './near';

const initialState = {
  app: {
    mounted: false,
    wasValidated: false,
    accountTaken: false,
    alert: null,
  },
  links: [],
};

export const { appStore, AppProvider } = State(initialState, 'app');

let alertAnimation;
export const onAlert =
  (message) =>
  async ({ update }) => {
    await update('app.alert', message);
    if (alertAnimation) {
      alertAnimation.pause();
    }
    alertAnimation = anime({
      targets: '.alert',
      easing: 'easeOutElastic',
      keyframes: [
        { scaleX: 0, scaleY: 0, duration: 0 },
        { scaleX: 1, scaleY: 1, duration: 500 },
        { duration: 2000 },
        { scaleX: 0, scaleY: 0, duration: 500, easing: 'easeInCubic' },
      ],
      complete: function () {
        update('app.alert', null);
      },
    });
  };

export const onAppMount =
  () =>
  async ({ update, getState, dispatch }) => {
    update('app', { mounted: true });

    const url = new URL(window.location.href);
    const key = url.searchParams.get('key');
    const from = url.searchParams.get('from');
    const message = decodeURIComponent(url.searchParams.get('message') || '');
    const link = url.searchParams.get('link') || '';
    const accountId = url.searchParams.get('accountId');
    if (key && accountId) {
      const { seedPhrase, publicKey } = generateSeedPhrase();
      const keyExists = await hasKey(key, accountId);
      update('accountData', { key, from, message, link, accountId, seedPhrase, publicKey, keyExists });
    } else {
      dispatch(initNear());
    }
  };

'''
'''--- src/state/config.js ---
import { BN } from 'bn.js';

// testnet / default
let config = {
  SEED_PHRASE_LOCAL_COPY: '__SEED_PHRASE_LOCAL_COPY',
  FUNDING_DATA: '__FUNDING_DATA',
  ACCOUNT_LINKS: '__ACCOUNT_LINKS',
  GAS: '200000000000000',
  networkId: 'testnet',
  nodeUrl: 'https://rpc.testnet.near.org',
  walletUrl: 'https://wallet.testnet.near.org',
  nameSuffix: '.akaia.testnet',
  contractName: 'akaia.testnet',
};

if (process.env.REACT_APP_ENV === 'prod') {
  config = {
    ...config,
    networkId: 'mainnet',
    nodeUrl: 'https://rpc.mainnet.near.org',
    walletUrl: 'https://wallet.near.org',
    nameSuffix: '.akaia.near',
    contractName: 'akaia.near',
  };
}

export { config };

'''
'''--- src/state/near.js ---
import * as nearAPI from 'near-api-js';
import { get, set, del } from '../utils/storage';

import { config } from './config';

const ANALYTICS_URL = 'https://hooks.zapier.com/hooks/catch/6370559/ocibjmr/';
const SIGN_IN_TITLE = '';

export const { FUNDING_DATA, FUNDING_DATA_BACKUP, ACCOUNT_LINKS, GAS, SEED_PHRASE_LOCAL_COPY, networkId, nodeUrl, walletUrl, nameSuffix, contractName } = config;

const {
  KeyPair,
  InMemorySigner,
  transactions: { addKey, deleteKey, fullAccessKey },
  utils: {
    PublicKey,
    format: { parseNearAmount, formatNearAmount },
  },
} = nearAPI;

export const initNear =
  () =>
  async ({ update, getState, dispatch }) => {
    // // check returned from funding key -> claim the named account
    // update('funding', false)
    // if (!skipFunding) {
    //     const fundingData = get(FUNDING_DATA)
    //     if (fundingData && fundingData.key) {
    //         update('funding', true)
    //         return dispatch(hasFundingKeyFlow(fundingData))
    //     }
    // }

    const near = await nearAPI.connect({
      networkId,
      nodeUrl,
      walletUrl,
      deps: { keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore() },
    });

    const isAccountTaken = async (accountId) => {
      const account = new nearAPI.Account(near.connection, accountId);
      try {
        await account.state();
      } catch (e) {
        console.warn(e);
        if (/does not exist while viewing/.test(e.toString())) {
          return false;
        }
      }
      return true;
    };
    // check localLinks, see if they're still valid
    const localLinks = get(ACCOUNT_LINKS, []).sort((a) => (a.claimed ? 1 : -1));
    for (let i = 0; i < localLinks.length; i++) {
      const { key, accountId, keyStored = 0, claimed } = localLinks[i];
      const exists = await isAccountTaken(accountId);
      if (!exists) {
        localLinks.splice(i, 1);
        continue;
      }
      if (!!claimed || Date.now() - keyStored < 5000) {
        continue;
      }
      const keyExists = await hasKey(key, accountId, near);
      if (!keyExists) {
        localLinks[i].claimed = true;
      }
    }
    set(ACCOUNT_LINKS, localLinks);

    const claimed = localLinks.filter(({ claimed }) => !!claimed);
    const links = localLinks.filter(({ claimed }) => !claimed);

    // resume wallet / contract flow
    const wallet = new nearAPI.WalletAccount(near);
    wallet.signIn = () => {
      wallet.requestSignIn(contractName, SIGN_IN_TITLE);
    };
    wallet.signedIn = wallet.isSignedIn();
    if (wallet.signedIn) {
      wallet.balance = formatNearAmount((await wallet.account().getAccountBalance()).available, 2);
    }

    const contract = await new nearAPI.Contract(wallet.account(), contractName, {
      changeMethods: ['send', 'create_account', 'create_account_and_claim'],
    });
    wallet.isAccountTaken = async (accountId) => {
      const accountTaken = await isAccountTaken(accountId + nameSuffix);
      update('app', { accountTaken, wasValidated: true });
      return accountTaken;
    };
    wallet.fundAccount = async (amount, accountId, recipientName) => {
      if (accountId.indexOf(nameSuffix) > -1 || accountId.indexOf('.') > -1) {
        alert(`The "${nameSuffix}" suffix gets added automatically, so please omit it from the Account Name field. Also, no periods (".") are allowed.`);
        return update('app.wasValidated', true);
      }
      if (await wallet.isAccountTaken(accountId)) {
        return;
      }

      update('app', { accountTaken: true }); // assume until check says false

      accountId = accountId + nameSuffix;
      if (parseFloat(amount, 10) < 0.1 || accountId.length < 2 || accountId.length > 48) {
        return update('app.wasValidated', true);
      }
      const keyPair = KeyPair.fromRandom('ed25519');

      const links = get(ACCOUNT_LINKS, []);
      links.push({ key: keyPair.secretKey, accountId, recipientName, keyStored: Date.now() });
      set(ACCOUNT_LINKS, links);

      // set(FUNDING_DATA, { key: keyPair.secretKey, accountId, recipientName, amount, funder_account_id: wallet.getAccountId() })
      await contract.create_account({ new_account_id: accountId, new_public_key: keyPair.publicKey.toString() }, GAS, parseNearAmount(amount));
    };

    update('', { near, wallet, links, claimed });
  };

export const unclaimLink =
  (keyToFind) =>
  async ({ update }) => {
    let links = get(ACCOUNT_LINKS, []);
    const link = links.find(({ key }) => key === keyToFind);
    if (!link) {
      alert('cannot find link');
      return;
    }
    link.claimed = false;
    set(ACCOUNT_LINKS, links);

    const claimed = links.filter(({ claimed }) => claimed === true);
    links = links.filter(({ claimed }) => !claimed);

    update('', { links, claimed });
  };

export const keyRotation =
  () =>
  async ({ update, getState, dispatch }) => {
    const state = getState();
    const { key, accountId, publicKey, seedPhrase } = state.accountData;

    const keyPair = KeyPair.fromString(key);
    const signer = await InMemorySigner.fromKeyPair(networkId, accountId, keyPair);
    const near = await nearAPI.connect({
      networkId,
      nodeUrl,
      walletUrl,
      deps: { keyStore: signer.keyStore },
    });
    const account = new nearAPI.Account(near.connection, accountId);
    const accessKeys = await account.getAccessKeys();
    const actions = [deleteKey(PublicKey.from(accessKeys[0].public_key)), addKey(PublicKey.from(publicKey), fullAccessKey())];

    set(SEED_PHRASE_LOCAL_COPY, seedPhrase);

    const result = await account.signAndSendTransaction(accountId, actions);

    fetch(ANALYTICS_URL, {
      method: 'POST',
      body: JSON.stringify({
        account_id: accountId,
        time_claimed: Date.now(),
      }),
    });

    return result;
  };

export const hasKey = async (key, accountId, near) => {
  const keyPair = KeyPair.fromString(key);
  const pubKeyStr = keyPair.publicKey.toString();

  if (!near) {
    const signer = await InMemorySigner.fromKeyPair(networkId, accountId, keyPair);
    near = await nearAPI.connect({
      networkId,
      nodeUrl,
      walletUrl,
      deps: { keyStore: signer.keyStore },
    });
  }
  const account = new nearAPI.Account(near.connection, accountId);
  try {
    const accessKeys = await account.getAccessKeys();
    if (accessKeys.length > 0 && accessKeys.find(({ public_key }) => public_key === pubKeyStr)) {
      return true;
    }
  } catch (e) {
    console.warn(e);
  }
  return false;
};

/// Deprecated

// export const hasFundingKeyFlow = ({ key, accountId, recipientName, amount, funder_account_id }) => async ({ update, getState, dispatch }) => {
//     const keyPair = KeyPair.fromString(key)
//     const keyExists = await hasKey(key, contractName)
//     if (!keyExists) {
//         dispatch(initNear(true))
//     }

//     const signer = await InMemorySigner.fromKeyPair(networkId, contractName, keyPair)
//     const near = await nearAPI.connect({
//         networkId, nodeUrl, walletUrl, deps: { keyStore: signer.keyStore },
//     });
//     const account = new nearAPI.Account(near.connection, contractName);
//     const contract = await new nearAPI.Contract(account, contractName, {
//         changeMethods: ['send', 'create_account_and_claim'],
//         sender: account
//     })

//     const newKeyPair = KeyPair.fromRandom('ed25519')
//     try {
//         const links = get(ACCOUNT_LINKS, [])
//         links.push({ key: newKeyPair.secretKey, accountId, recipientName, keyStored: Date.now() })
//         set(ACCOUNT_LINKS, links)
//     } catch(e) {
//         alert('Browser error saving key. Still have funds. Please refresh this page.')
//         return dispatch(initNear(true))
//     }

//     const links = get(ACCOUNT_LINKS, [])
//     const hasLink = links.some(({ accountId: id }) => accountId === id)
//     if (!hasLink) {
//         alert('Browser error saving key. Still have funds. Please refresh this page.')
//         return dispatch(initNear(true))
//     }

//     let result
//     try {
//         result = await contract.create_account_and_claim({
//             new_account_id: accountId,
//             new_public_key: newKeyPair.publicKey.toString()
//         }, GAS, '0')

//         if (result === true) {
//             del(FUNDING_DATA)
//             fetch('https://hooks.zapier.com/hooks/catch/6370559/oc18t1b/', {
//                 method: 'POST',
//                 body: JSON.stringify({
//                     funder_account_id,
//                     alias: recipientName,
//                     account_id: accountId,
//                     amount,
//                     time_created: Date.now()
//                 })
//             })
//             dispatch(initNear())
//         } else {
//             dispatch(initNear(true))
//         }
//     } catch (e) {
//         if (e.message.indexOf('no matching key pair found') === -1) {
//             throw e
//         }
//         dispatch(initNear(true))
//     }
// }

'''
'''--- src/utils/mobile.js ---
import copy from 'copy-to-clipboard';

export const share = (text) => {
  if (navigator.share && /mobile/gi.test(window.navigator.userAgent)) {
    navigator
      .share({
        text,
      })
      .catch((e) => {
        copy(text);
      });
  } else {
    copy(text);
  }
};

'''
'''--- src/utils/state.js ---
import React, { createContext, useReducer } from 'react';

export const State = (initialState, prefix) => {
  let updatedState;
  const getState = () => updatedState;
  const store = createContext(initialState);
  const { Provider: InnerProvider } = store;

  const updateState = (state, path = '', newState = {}) => {
    // console.log('updateState', state, path, newState) // debugging

    if (path.length === 0) {
      return { ...state, ...newState };
    }
    const pathArr = path.split('.');
    const first = pathArr[0];

    state = { ...state };
    if (!state[first]) {
      state[first] = {};
    }

    if (pathArr.length === 1) {
      state[first] =
        typeof newState === 'object' && newState !== null && !Array.isArray(newState)
          ? {
              ...state[first],
              ...newState,
            }
          : newState;
    } else {
      state[first] = {
        ...state[first],
        ...updateState(state[first], pathArr.slice(1).join('.'), newState),
      };
    }

    return state;
  };

  const Provider = ({ children }) => {
    const [state, dispatch] = useReducer((state, payload) => {
      const { path, newState } = payload;
      if (path === undefined) {
        return state;
      }
      updatedState = updateState(state, path, newState);
      return updatedState;
    }, initialState);

    const update = (path, newState) => {
      dispatch({ path, newState });
    };
    const wrappedDispatch = (fn) => fn({ update, getState, dispatch: wrappedDispatch });

    return <InnerProvider value={{ update, state, dispatch: wrappedDispatch }}>{children}</InnerProvider>;
  };

  if (prefix) {
    return {
      [prefix + 'Store']: store,
      [prefix.substr(0, 1).toUpperCase() + prefix.substr(1) + 'Provider']: Provider,
    };
  }

  return { store, Provider };
};

'''
'''--- src/utils/storage.js ---
export const get = (k, d = {}) => {
  let v = localStorage.getItem(k);
  try {
    return JSON.parse(v || JSON.stringify(d));
  } catch (e) {
    return v;
  }
};
export const set = (k, v) => localStorage.setItem(k, typeof v === 'string' ? v : JSON.stringify(v));
export const del = (k) => localStorage.removeItem(k);

'''
'''--- src/utils/youtube.js ---
//https://stackoverflow.com/a/27728417/1060487
const rx = /^.*(?:(?:youtu\.be\/|v\/|vi\/|u\/\w\/|embed\/)|(?:(?:watch)?\?v(?:i)?=|\&v(?:i)?=))([^#\&\?]*).*/;
export const getVideoId = (url) => {
  const match = url.match(rx);
  return match ? match[1] : '';
};

//alternate pattern for form validation
//(?:https?:\/\/)?(?:www\.)?youtu(?:\.be\/|be.com\/\S*(?:watch|embed)(?:(?:(?=\/[^&\s\?]+(?!\S))\/)|(?:\S*v=|v\/)))([^&\s\?]+)

'''