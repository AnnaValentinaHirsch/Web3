*GitHub Repository "kiberuJ/collectables-contract"*

'''--- README.md ---
# collectables-contract

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- assembly/index.ts ---
import { Coin, listedCoins } from './model';

import { ContractPromiseBatch, context, u128 } from 'near-sdk-as';

export function setCoin(coin: Coin): void {
    let storedCoin = listedCoins.get(coin.id);
    if (storedCoin !== null) {
        throw new Error(`a coin with ${coin.id} already exists`);
    }
    assert(coin.description.length > 0, "Empty description");
    assert(coin.name.length > 0, "Empty name");
    assert(coin.image.length > 0, "Empty image");
    assert(coin.location.length > 0, "Empty location");
    listedCoins.set(coin.id, Coin.fromPayload(coin));
}

export function getCoin(id: string): Coin | null {
    return listedCoins.get(id);
}

export function getCoins(): Coin[] {
    return listedCoins.values();
}

export function buyCoin(coinId: string, orderedCoins: u32): void {
    const coin = getCoin(coinId);
    if (coin == null) {
        throw new Error("coin not found");
    }
    assert(orderedCoins <= coin.quantity, "Ordered amount can't be fulfilled");
    ContractPromiseBatch.create(coin.owner).transfer(context.attachedDeposit);
    coin.saleProcessing(orderedCoins);
    listedCoins.set(coin.id, coin);
}

export function deleteCoin(coinId: string): void {
    const coin = getCoin(coinId);
    if (coin == null) {
        throw new Error("Entry not found!");
    } else {
        assert(coin.owner.toString() == context.sender, "Unauthorized sender");
        listedCoins.delete(coinId);
    }
}

export function clearListing(): void {
    assert(context.predecessor.toString() == context.contractName.toString(), "Only admin can delete all listings");
    listedCoins.clear();
}

export function entriesLength(): i32 {
    return listedCoins.length;
}
'''
'''--- assembly/model.ts ---
import { PersistentUnorderedMap, u128, context } from "near-sdk-as";

@nearBindgen
export class Coin {
    id: string;
    name: string;
    description: string;
    image: string;
    location: string;
    price: u128;
    owner: string;
    sold: u32;
    quantity: u32;
    public static fromPayload(payload: Coin): Coin {
        const coin = new Coin();
        coin.id = payload.id;
        coin.name = payload.name;
        coin.description = payload.description;
        coin.image = payload.image;
        coin.location = payload.location;
        coin.price = payload.price;
        coin.quantity = payload.quantity;
        coin.owner = context.sender;
        return coin;
    }
    public saleProcessing(orderedCoins: u32): void {
        this.sold = this.sold + orderedCoins;
        this.quantity = this.quantity - orderedCoins;
    }
}

export const listedCoins = new PersistentUnorderedMap<string, Coin>("CNS");
'''
'''--- assembly/tsconfig.json ---
{
    "extends": "../node_modules/assemblyscript/std/assembly.json",
    "include": [
      "./**/*.ts"
    ]
  }
'''
'''--- package.json ---
{
  "name": "collectables-contract",
  "version": "1.0.0",
  "description": "A smart contract for collectibles items sale",
  "main": "index.ts",
  "repository": "git@github.com:kiberuJ/collectables-contract.git",
  "author": "kiberuJ <wanjiku.janekiberu@gmail.com>",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''