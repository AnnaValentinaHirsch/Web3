*GitHub Repository "nearprotocol/near-reserve"*

'''--- .travis.yml ---
language: node_js
node_js:
  - 12

before_script:
  - "curl -H 'Cache-Control: no-cache' https://raw.githubusercontent.com/fossas/fossa-cli/master/install.sh | sudo bash"

script:
  - fossa init
  - fossa analyze --server-scan
  - fossa test

'''
'''--- README.md ---
# Example of NEAR Wallet integration

## Description

This example demonstrates how to integrate your application with NEAR Wallet.
The contract is quite simple. It can store the account_id of last sender and return it. It also shows how you can debug contracts using logs.

## To Run

*In NEAR Studio (https://studio.nearprotocol.com)*

1. Click the "Run" button on the top of the Studio window

2. You will be redirected to the new window where you can interract with the app.
3. You'd be asked to sign-up with NEAR wallet (https://wallet.nearprotocol.com). If you don't have an account yet, then the wallet asks you to create one. 
4. Once you have an account, you would be asked to authorize the application and the contract.
5. Once authorized, you would be redirected back to the application and it would have access to your account ID and be able to issue transactions on behalf of your account. The transactions can only go to the authorized contract and can't include any tokens with them.
6. "Say Hi!"

## To Test

*In NEAR Studio (https://studio.nearprotocol.com)*

1. Click the "Test" button on the top of the Studio window

2. You will be redirected to the output for the JavaScript tests described in `src/test.js` to show that the contract is performing properly.

## To Explore

- `assembly/main.ts` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/test.js` for the JS tests for the contract

'''
'''--- assembly/main.ts ---
//@nearfile
import { context, storage, logging, PersistentVector } from "near-runtime-ts";
// --- contract code goes below

export function registerAccount(): void {
  logging.log("registerAccount: " + context.sender);
  storage.set<string>("registeredAccount:" + context.sender, "1");
}

export function isRegistered(accountId: string): bool {
  logging.log('acccountId:' + accountId);
  return storage.contains("registeredAccount:" + accountId);
}
'''
'''--- assembly/model.ts ---
//@nearfile
// TODO: Define data model here
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- gulpfile.js ---
const gulp = require("gulp");
const nearUtils = require("near-shell/gulp-utils");

gulp.task("build", callback => {
  nearUtils.compile("./assembly/main.ts", "./out/main.wasm", callback);
});

exports.default = gulp.series(["build"])

// TODO: Extract all following boilerplate into library

// This task is not required when running the project locally. Its purpose is to set up the
// AssemblyScript compiler when a new project has been loaded in WebAssembly Studio.
gulp.task("project:load", callback => {
  const utils = require("@wasm/studio-utils");
  utils.eval(utils.getProject().getFile("setup.js").getData(), {
    logLn,
    getProject: utils.getProject,
    monaco,
    fileTypeForExtension,
    setupCallback: callback
  });
});

'''
'''--- package.json ---
{
  "name": "@wasm/wallet_example_ts",
  "description": "",
  "version": "0.0.1",
  "scripts": {
    "build": "mkdir -p out/ && gulp",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d src",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build && npm run deploy:contract",
    "start": "serve src",
    "test": "npm run build && jest test --env=near-shell/test_environment"
  },
  "wasmStudio": {
    "name": "Example of NEAR Wallet integration",
    "description": "This example demonstrates how to integrate your application with NEAR Wallet. The contract is quite simple. It can store the account_id of last sender and return it. It also shows how you can debug contracts using logs.",
    "icon": "typescript-lang-file-icon"
  },
  "dependencies": {
    "near-runtime-ts": "github:nearprotocol/near-runtime-ts"
  },
  "devDependencies": {
    "gh-pages": "^2.1.1",
    "gulp": "^4.0.2",
    "jest": "^24.8.0",
    "jest-environment-node": "^24.8.0",
    "near-shell": "^0.11.5",
    "serve": "^11.1.0"
  }
}

'''
'''--- setup.js ---
// This file is not required when running the project locally. Its purpose is to set up the
// AssemblyScript compiler when a new project has been loaded in WebAssembly Studio.

const CURRENT_URL = new URL(window.location.href);
const ASC_COMMMIT = CURRENT_URL.searchParams.get("asc") || "f8c87361ad1ebc92b06aae4386e056ed2e368f0a";

require.config({
  paths: {
    "binaryen": "https://cdn.jsdelivr.net/gh/AssemblyScript/binaryen.js@84.0.0-nightly.20190522/index",
    "assemblyscript": `https://cdn.jsdelivr.net/gh/nearprotocol/assemblyscript@${ASC_COMMMIT}/dist/assemblyscript`,
    "near-assemblyscript/dist/asc": `https://cdn.jsdelivr.net/gh/nearprotocol/assemblyscript@${ASC_COMMMIT}/dist/asc`
  }
});

logLn("Loading AssemblyScript compiler ...");
window.logLn = logLn;

Object.assign(window.StudioFs, {
  readFileSync(path) {
    const file = getProject().getFile(path);
    return file ? file.data : null;
  },
  writeFileSync(path, contents) {
    path = path.replace(/^\.\//, "");
    const type = fileTypeForExtension(path.substring(path.lastIndexOf(".") + 1));
    getProject().newFile(path, type, true).setData(contents);
  },
  existsSync(path) {
    return !!getProject().getFile(path);
  },
  listDirSync(path) {
    let dir = getProject().getFile(path);
    if (dir == null) {
        return dir;
    }
    assert(dir.type === "directory");
    return dir.list();
  },
  mkdirSync(path) {
    getProject().newDirectory(path);
  }
});

require(["near-assemblyscript/dist/asc"], asc => {
  Object.assign(window.AssemblyScriptCompiler, asc);

  if (!window.process) {
    window.process = {};
  }

  monaco.languages.typescript.typescriptDefaults.addExtraLib(asc.definitionFiles.assembly);
  logLn("AssemblyScript compiler is ready!");
  setupCallback();
});

'''
'''--- src/config.js ---
(function() {
    const CONTRACT_NAME = 'near-reserve';
    const DEFAULT_ENV = 'development';

    function getConfig(env) {
        switch (env) {

        case 'production':
        case 'development':
            return {
                networkId: 'default',
                nodeUrl: 'https://rpc.nearprotocol.com',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://wallet.nearprotocol.com',
            };
        case 'staging':
            return {
                networkId: 'staging',
                nodeUrl: 'https://staging-rpc.nearprotocol.com/',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://near-wallet-staging.onrender.com',
            };
        case 'local':
            return {
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: 'http://localhost:4000/wallet',
                contractName: CONTRACT_NAME,
            };
        case 'test':
            return {
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            };
        case 'test-remote':
        case 'ci':
            return {
                networkId: 'shared-test',
                nodeUrl: 'http://shared-test.nearprotocol.com:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            };
        case 'ci-staging':
            return {
                networkId: 'shared-test-staging',
                nodeUrl: 'http://staging-shared-test.nearprotocol.com:3030',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            };
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
        }
    }

    const cookieConfig = typeof Cookies != 'undefined' && Cookies.getJSON('fiddleConfig');
    if (typeof module !== 'undefined' && module.exports) {
        module.exports = getConfig;
    } else {
        window.nearConfig =  cookieConfig && cookieConfig.nearPages ? cookieConfig : getConfig(DEFAULT_ENV);
    }
})();

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div class="container">
    <h1>Reserve your account name for NEAR MainNet</h1>
    <div id="signed-out-flow" class="d-none">
      <div class="row">
        <div class="col">
          <p>Create / login into NEAR account you'd like to reserve for MainNet launch.
          <p><button id="sign-in-button" class="btn btn-primary btn-lg">Login with NEAR</button>
        </div>
      </div>
    </div> 
    <div id="signed-in-flow" class="d-none">
      <div class="row">
        <div class="col success-message">
          <p>Take action keep your NEAR account name after MainNet launch.
        </div>
      </div>
      <div class="row">
        <div class="col-sm-3">
          <button id="say-hi" class="btn btn-success btn-lg btn-block ">Reserve NEAR account</button>
        </div>
        <div class="col-sm-3">
          <button id="sign-out-button" class="btn btn-danger btn-lg btn-block">Sign-out</button>
        </div>
      </div>
      <div class="row">
        <div class="col">
          Note: we are not guaranteeing the name availability at this point as there are some names that must be locked by various existing entities or TLDs for programmatic connection.
        </div>
      </div>
    </div> 
  </div>
  <script src="https://cdn.jsdelivr.net/npm/nearlib@0.16.0/dist/nearlib.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>
  <script src="./config.js"></script>
  <script src="./main.js"></script>
</body>
</html>

'''
'''--- src/loader.html ---
<head>
    <script>
        window.paceOptions = {
            elements: {
                selectors: ['.never-appears']
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/pace.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/themes/black/pace-theme-center-radar.css" rel="stylesheet" />
</head>
'''
'''--- src/main.js ---
// Initializing contract
async function initContract() {
  console.log("nearConfig", nearConfig);

  // Initializing connection to the NEAR DevNet.
  window.near = await nearlib.connect(Object.assign({ deps: { keyStore: new nearlib.keyStores.BrowserLocalStorageKeyStore() } }, nearConfig));

  // Initializing Wallet based Account. It can work with NEAR DevNet wallet that
  // is hosted at https://wallet.nearprotocol.com
  window.walletAccount = new nearlib.WalletAccount(window.near);

  // Getting the Account ID. If unauthorized yet, it's just empty string.
  window.accountId = window.walletAccount.getAccountId();

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await near.loadContract(nearConfig.contractName, {
    // NOTE: This configuration only needed while NEAR is still in development
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ["isRegistered"],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ["registerAccount"],
    // Sender is the account ID to initialize transactions.
    sender: window.accountId,
  });
}

// Using initialized contract
async function doWork() {
  // Based on whether you've authorized, checking which flow we should go.
  if (!window.walletAccount.isSignedIn()) {
    signedOutFlow();
  } else {
    signedInFlow();
  }
}

// Function that initializes the signIn button using WalletAccount
function signedOutFlow() {
  // Displaying the signed out flow container.
  document.getElementById('signed-out-flow').classList.remove('d-none');
  // Adding an event to a sing-in button.
  document.getElementById('sign-in-button').addEventListener('click', () => {
    window.walletAccount.requestSignIn(
      // The contract name that would be authorized to be called by the user's account.
      window.nearConfig.contractName,
      // This is the app name. It can be anything.
      'Reserve your name for MainNet?',
      // We can also provide URLs to redirect on success and failure.
      // The current URL is used by default.
    );
  });
}

// Main function for the signed-in flow (already authorized by the wallet).
function signedInFlow() {
  // Displaying the signed in flow container.
  document.getElementById('signed-in-flow').classList.remove('d-none');

  // Adding an event to a say-hi button.
  document.getElementById('say-hi').addEventListener('click', () => {
    window.contract.registerAccount().then(accountRegistered);
  });

  // Adding an event to a sing-out button.
  document.getElementById('sign-out-button').addEventListener('click', () => {
    walletAccount.signOut();
    // Forcing redirect.
    window.location.replace(window.location.origin + window.location.pathname);
  });

  window.contract.isRegistered({ accountId: window.accountId }).then(isRegistered => {
    if (isRegistered) {
      document.querySelector('.success-message').innerHTML = `<p>Account <b>${accountId}</b> is already registered for MainNet migration`;
    }
  })
}

function accountRegistered() {
  console.log("accountRegistered");
  document.querySelector('.success-message').innerHTML = `<p>Registered <b>${accountId}</b> for MainNet migration successfully!`;
}

// Loads nearlib and this contract into window scope.
window.nearInitPromise = initContract()
  .then(doWork)
  .catch(console.error);
'''
'''--- src/test-setup.js ---
(function () {
  let params = new URL(window.location).searchParams;
  let keyStore = new nearlib.keyStores.InMemoryKeyStore();
  nearConfig.contractName = params.get('contractName') || nearConfig.contractName;
  keyStore.setKey(nearConfig.networkId, nearConfig.contractName, nearlib.KeyPair.fromString(params.get('privateKey')));
  nearConfig.deps = { keyStore };
})();

'''
'''--- src/test.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/jasmine.css">
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/jasmine.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/jasmine-html.js"></script>
  <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jasmine/3.3.0/boot.js"></script>
</head>
<body style="background: #fff">
  <script src="https://cdn.jsdelivr.net/npm/js-cookie@2/src/js.cookie.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/nearlib@0.16.0/dist/nearlib.js"></script>
  <script src="./config.js"></script>
  <script src="./test-setup.js"></script>
  <script src="./test.js"></script>
</body>
</html>

'''
'''--- src/test.js ---
describe("Authorizer", function () {
  let near;
  let contract;
  let accountId;

  jasmine.DEFAULT_TIMEOUT_INTERVAL = 10000;

  // Common setup below
  beforeAll(async function () {
    near = await nearlib.connect(nearConfig);
    accountId = nearConfig.contractName;
    contract = await near.loadContract(accountId, {
      // NOTE: This configuration only needed while NEAR is still in development
      // View methods are read only. They don't modify the state, but usually return some value. 
      viewMethods: ["whoSaidHi"],
      // Change methods can modify the state. But you don't receive the returned value when called.
      changeMethods: ["sayHi"],
      sender: nearConfig.contractName
    });
    window.near = near;
  });

  // Multiple tests can be described below. Search Jasmine JS for documentation.
  describe("simple", function () {
    beforeAll(async function () {
      // There can be some common setup for each test.
    });

    it("check, say hi, check again", async function () {
      // Checking that no one said Hi before us.
      const nobody = await contract.whoSaidHi();
      expect(nobody).toBeFalsy();
      // Saying Hi!
      await contract.sayHi();
      // Checking again
      const shouldBeMe = await contract.whoSaidHi();
      expect(shouldBeMe).toBe(accountId);
    });
  });
});
'''