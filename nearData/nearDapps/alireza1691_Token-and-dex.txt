*GitHub Repository "alireza1691/Token-and-dex"*

'''--- front-end/dex/blockchain/faucet.js ---
// const { ethers } = require( "ethers" )

// const faucetAbi = require ("../constants/faucetAbi.json")

// const faucetContract = ethers => {
//     return new ethers.Contract( "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0" , faucetAbi /*, signerOrProvider*/ )

// }

// export default faucetContract
'''
'''--- front-end/dex/blockchain/myTokenAbi.js ---
// const { ethers } = require("hardhat")

// const MyTokenAbi = require ("../blockchain/build/blockchain_contracts_MyToken_sol_MyToken.abi")

// const tokenContract = ethers => {
//     return new ethers.Contract( "0x5FbDB2315678afecb367f032d93F642f64180aa3" , MyTokenAbi /*, signerOrProvider*/ )

// }

// export default tokenContract

'''
'''--- front-end/dex/blockchain/stableDexAbi.js ---
// const { ethers } = require("hardhat")

// const stableDexAbi = require ("../blockchain/build/blockchain_contracts_StableDex_sol_StableDex.abi")

// const dexContract = ethers => {
//     return new ethers.Contract( "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512" , stableDexAbi /*, signerOrProvider*/ )

// }

// export default dexContract

'''
'''--- front-end/dex/components/Footer.js ---

import styles from '../styles/Home.module.css'
const Footer = () => {

<footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span >
          </span>
        </a>
</footer>
    
}
export default Footer
'''
'''--- front-end/dex/components/Header.js ---
import Head from 'next/head'
import Image from 'next/image'
import "../public/Invesweet.png";
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { React ,useState, useEffect } from 'react'
// import { ethers } from 'ethers'
import {/*MoralisProvider,*/ useMoralis, useWeb3Contract} from 'react-moralis'
import { faucetAbi, faucetContractAddress, dexAbi, dexContractAddress, iErc20Abi, dexNew } from '../constants'
import { BigNumber, Contract, ethers } from 'ethers'
import { Tab } from '@headlessui/react'
import { ConnectButton } from '@suiet/wallet-kit';
// import { ethers } from 'hardhat'
// import faucetContract from '../blockchain/faucetAbi'
// import * as nearAPI from "near-api-js";
// import { NearBindgen, near, call, view, initialize, UnorderedMap } from 'near-sdk-js'
// import { setupWalletSelector } from "@near-wallet-selector/core";
// import { setupNearWallet } from "@near-wallet-selector/near-wallet";

const Header = ({conncetWalletHandler, isConnected}) =>{

  return (
    <div className={styles.container}>
      <div className='box'>
          <nav className='level navbar-has-shadow py-1'>
            <div className='navbar-brand'>
              <div className={styles.navbarBrand}>
              <img src='./Invesweet.png' ></img>
              
               {/* <div>
                 <ConnectButton>connect</ConnectButton>
                </div> */}
                </div>
            </div>
            
            <div className='navbar-end'>
            <ConnectButton className='button  is-normal is-dark mt-2 '>Connect to Sui </ConnectButton>
            
              <div className='navbar-item'>
              
                {/* <button onClick={''} className='button is-black mr-2' disabled>Near Wallet</button> */}
                {/* {isConnected ? ("Connected") : (<button onClick={() => connect} className='button is-link'>Connect Wallet</button>)} */}
                <button onClick={conncetWalletHandler} className='button is-info ' disabled={isConnected}>{isConnected ? 'Wallet connected' : "Connect wallet"}</button>
              </div>
            </div>
          </nav>
        </div>
    </div>
  )
}

export default Header

'''
'''--- front-end/dex/components/Layout.js ---
import Header from "./Header"
import Footer from "./Footer"

const  Layout = ({children}) => {
    return ( 
        <div className="content">
            {/* <Header/> */}
            {children}
            {/* <Footer/> */}
        </div>
    );
}
 
export default Layout;
'''
'''--- front-end/dex/components/useFetch.js ---
import { useState, useEffect } from "react";
import { BigNumber, Contract, ethers } from 'ethers'
const useFetch = () => {
    const [account, setAccount] = useState()
    const [isConnected, setIsConnected] = useState(false);
    const [provider, setProvider] = useState();
    const [signer, setSigner] = useState()
    const [faucetContract, setFaucetContract] = useState()
    const [address, setAddress] = useState()
    const [dexContract, setDexContract] = useState()
    const [usdcContract, setUsdcContract] = useState()
    const [istContract, setIstContract] = useState()
    const [userShares, setUserShares] = useState("0")
    const [usdcReserve, setUsdcReserve] = useState()
    const [istReserve, setIstReserve] = useState()
    const [outPutUsdc, setOutPutUsdc] = useState("0")
    const [outPutIst, setOutPutIst] = useState("0")
    const [pairAmount , setPairAmount ] = useState("0")

    const usdcContractAddress = "0x07865c6E87B9F70255377e024ace6630C1Eaa37F"
    const istContractAddress = "0x9c3565df44b79a7dbdab3678f0b00b9beabc7d70"

    const conncetWalletHandler = async () => {
      if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
        try {
          const accounts = await ethereum.request({method: "eth_requestAccounts"});
          setIsConnected(true)
          let connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
          setProvider(connectedProvider)
          const _signer = connectedProvider.getSigner()
          setSigner(_signer)
          const chainId = await _signer.getChainId()
          const goerliChainId = 5
          console.log('chain id:',chainId);
          if(chainId === goerliChainId){
            console.log('connected to the georli network');
          } else {
            try {
              await provider.request({
                method: 'wallet_switchEthereumChain',
                params: [{ chainId: goerliChainId}],
              });
            } catch (error) {
              if (error.code === 4902) {
              console.log("This network is not available in your metamask, please add it")
              try {
                await window.ethereum.request({
                  method: 'wallet_addEthereumChain',
                  params: [
                    {
                      chainId: '0x5',
                      rpcUrl: 'https://goerli.infura.io/v3/',
                      nativeCurrency: {
                        name: GoerliEtherem,
                        Symbol: GoerliETH,
                        decimals: 18
                      },
                      blockExplorerUrl: 'https://goerli.etherscan.io',
                    },
                  ],
                });
              } catch (addError) {
                  console.log(addError);
                }
              }
              console.log("Failed to switch to the network")
            }
            }
          
          
          setAddress(accounts[0])
          setFaucetContract(new ethers.Contract( faucetContractAddress , faucetAbi , provider ))
          const dexC = new ethers.Contract(dexContractAddress, dexAbi, provider)
          setDexContract (dexC)
          const dexWithSigner =  dexC.connect(_signer)
          const get = await (dexWithSigner.balanceOf(accounts[0]))
          setUserShares(get.toString())
          setUsdcContract (new ethers.Contract(usdcContractAddress , iErc20Abi ,  provider))
          setIstContract (new ethers.Contract(istContractAddress , iErc20Abi ,  provider))
  
          console.log(_signer.getAddress( ));
          console.log(accounts[0]);
  
          const istR = await dexWithSigner._getReserveMyToken()
          const usdcR = await dexWithSigner._getReserveUsdc()
  
          console.log(`ist reserve: ${istR} and usdc reserve : ${usdcR}`);
  
          setIstReserve(istR)
          setUsdcReserve(usdcR)
  
          // const lev = (usdcR * 10 ** 12) / (istR )
          const usdcOutPut = (( usdcR / (10**6)) * (1)) / ((istR / (10 ** 18)) + (1))
          const istUPOutPut = (( istR / (10**6)) * (1)) / ((usdcR / (10 ** 18)) + (1))
    
          setOutPutUsdc(usdcOutPut)
          setOutPutIst(istUPOutPut)
  
          setPairAmount(((usdcR * (10**12))/(istR)))
          window.ethereum.on('accountsChanged',async () =>{
            const newAccounts = await ethereum.request({method: "eth_requestAccounts"})
            setAddress(newAccounts[0])
            console.log("connected wallet changed to:",newAccounts[0]);
          })
        
          ethereum.on('chainChanged', async () => {
            const newChainId = await signer.getChainId()
            console.log(`chain id changed to :${newChainId}`);
            window.location.reload();
          })
          ethereum.on('disconnect', setIsConnected(false));
          const isConnected3 = ethereum.isConnected()
          setIsConnected(isConnected3)
          
          console.log('user disconnected!');
          }catch (e) {
          console.log(e);
        }
      } else {
        setIsConnected(false)
      }
    }
  
    useEffect(() => {
        async function accountChanged () {
          window.ethereum.on("accountsChanged", async () =>{
              const accounts = await window.ethereum.request({
                  method: 'eth_requestAccounts',
              })
              if (accounts.length) {
                setAccount(accounts[0])
              } else {
                  window.location.reload()
              }
          })
        }
        accountChanged()
      },[address])

      

      return(account,conncetWalletHandler,address,isConnected,provider,signer,faucetContract,dexContract,usdcContract,istContract,userShares,usdcReserve,istReserve,outPutUsdc,outPutIst,pairAmount)
}

export default useFetch;
'''
'''--- front-end/dex/constants/index.js ---
const faucetAbi = require("./faucetAbi.json")
const faucetContractAddress = require("./faucetContractAdresses.json")
const dexAbi = require('./dexAbi.json')
const dexContractAddress = require('./dexContractAddress.json')
const iErc20Abi = require('./IERC20ABI.json')
const dexNew = require('./dexNewVersionAbi.json')

module.exports = {
    faucetContractAddress,
    faucetAbi,
    dexAbi,
    dexContractAddress,
    iErc20Abi,
    dexNew
}
'''
'''--- front-end/dex/next.config.js ---
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
}

module.exports = nextConfig

'''
'''--- front-end/dex/pages/404.js ---
import Link from "next/link";
import { useEffect } from "react";
import {useRouter} from 'next/router'
import Header from '../components/Header'
import Footer from '../components/footer'
import styles from '../styles/Home.module.css'

const NotFound = () => {
    const router = useRouter();

    useEffect (() => {
        setTimeout(() => {

        }, 3000)
    }, [])

    return (
        <div className={styles.container}>
        <Header/>
        <div className={styles.main}>
        <div className="'not-found">
            <h1>Oooops</h1>
            <h2>That page cannot be found.</h2>
            <p>Go back to the <Link href={'/'}>Home page</Link></p>
        </div>
        </div>
        </div>
    )

}
export default NotFound;
'''
'''--- front-end/dex/pages/_app.js ---
import '../styles/globals.css'
import { MoralisProvider } from "react-moralis";
import { WalletKitProvider } from "@mysten/wallet-kit";
import Layout from '../components/Layout'
import { WalletProvider } from '@suiet/wallet-kit';
// import '@suiet/wallet-kit/style.css';
import '../styles/Button.css'

function MyApp({ Component, pageProps }) {
  return (
    // <WalletKitProvider>
    <WalletProvider>
    <MoralisProvider initializeOnMount={false}>
      <Layout>
        <Component {...pageProps} />
      </Layout>
    </MoralisProvider>
    </WalletProvider>
    
    // {/* </WalletKitProvider> */}
  );
}
export default MyApp

'''
'''--- front-end/dex/pages/api/hello.js ---
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction

export default function handler(req, res) {
  res.status(200).json({ name: 'John Doe' })
}

'''
'''--- front-end/dex/pages/faucet.js ---
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { useState, useEffect } from 'react'
import {/*MoralisProvider,*/ useMoralis, useWeb3Contract} from 'react-moralis'
import { faucetAbi, faucetContractAddress } from '../constants'
import { Contract, ethers } from 'ethers'
// import { ethers } from 'hardhat'
// import faucetContract from '../blockchain/faucetAbi'
// import { ConnectButton } from "web3uikit"

export default function faucet() {

  const { enableWeb3, isWeb3Enabled, isWeb3EnableLoading, account, Moralis, deactivateWeb3 } =
        useMoralis()

  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState();
  const [signer, setSigner] = useState()
  const [faucetContract, setFaucetContract] = useState()
  const [getFaucetError, setGetFaucetError] = useState ('')
  const [address, setAddress] = useState()
  const [web3, setWeb3] = useState()
  const [bcContract, setBcContract] = useState()
  const [balance, setBalance] = useState("0")
  const [inputValue1, setInputvalue1] = useState()
  const [inputValue2, setInputvalue2] = useState()
  const [signerAddress, setSignerAddress] = useState()
  const [betPlayers, setBetPlayers] = useState([])
  const [totalValue, setTotalValue] = useState()

  const connect = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      try {
        const accounts = await ethereum.request({method: "eth_requestAccounts"});
        setIsConnected(true)
        let connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
        setProvider(connectedProvider)
        const _signer = connectedProvider.getSigner()
        setSigner(_signer)
        setSignerAddress(_signer.getAddress( ))
        setAddress(accounts[0])
        setFaucetContract(new ethers.Contract( "0x12d6fa140cf5817393128e802e778c2ea3d30f26" , faucetAbi , provider ))
        console.log(_signer.getAddress( ));
        console.log(accounts[0]);
        
      } catch (e) {
        console.log(e);
      }
    } else {
      setIsConnected(false)
    }
  }
  

  const getCurrentWalletConnected = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      try {

        const connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
        const accounts = await provider.send("eth_accounts", []);
        if (accounts.length > 0) {
          setSigner(connectedProvider.getSigner())
          setSignerAddress(signer.getAddress( ))
          setFaucetContract(new ethers.Contract( "0x12d6fa140cf5817393128e802e778c2ea3d30f26" , faucetAbi , provider ))
        } else {
          console.log("Connect your wallet using the connect button");
        }
      } catch (e) {
        console.log(e);
      }
    }
  }

  const addWalletListener = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      window.ethereum.on("accounsChanged", (accounts) => {
        setAddress(accounts[0])
      })
  } else {
    setAddress("")
    console.log("please install metamask");
  }
}
  const _faucetContract = new ethers.Contract("0x12d6fa140cf5817393128e802e778c2ea3d30f26" , faucetAbi , signer )

  const faucetContract_ = ethers => {
   return new ethers.Contract( "0x12d6fa140cf5817393128e802e778c2ea3d30f26" , faucetAbi , provider )
  }
  
    
  // const { runContractFunction: getFaucet } = useWeb3Contract({
  //   abi: faucetAbi,
  //   contractAddress: faucetContractAddress, // specify the networkId
  //   functionName: "getFaucet",
  //   params: {inputValue1},
  // })

  const getFaucetToken = async () => {
    setGetFaucetError("")
    try {
      const contractWithSigner = faucetContract.connect(signer)
      const resp = await contractWithSigner.requestTokens()   
    } catch (err) {
      console.log(err.message);
      setGetFaucetError(err.message)
    }
  }

  //   const handleSuccess = async function(tx) {
  //     await tx.wait(1)
  //     handleNewNotification(tx)
  // }

  // const handleNewNotification = function () {
  //     dispatch ({
  //         type: "info",
  //         message: "Transaction Complete",
  //         title: "Tx Notification",
  //         position: "topR",
  //         icon: "bell"
  //     })
  // }

  return (
    <div className={styles.container}>
      <Head>
        <title>Invesweet Pool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
      <span className='is-link has-text-weight-bold'>
        {address && address.length > 0 ? `Connected to: ${address.substring(0,6)}...${address.substring(38)}` :"Connect wallet"}
      </span>
        <div className='box'>
          <div className="tabs  is-centered ">
            <ul className=''>
              <li><Link href='/swap'>Swap</Link></li>
              <li><Link href='/liquidity'>Pool</Link></li>
              <li className="is-active"><a>Faucet</a></li>
            </ul>
          </div>
          <div className='has-text-weight-semibold py-2'>
          <p>Get test tokens once a day</p>
          </div>
          <p>These tokens hasn't any real value, you can use them for tesntnet transactions like Swap & Provide liquidity</p>
                <div className='box mt-4'>
                <label className="label">Get testnet tokens</label>
                <div className="control">
                  
                    <div className="navbarzz-item is-hoverable navbar-end ">
                    </div>
                    <input className="input mt-2" defaultValue={address} /*value={inputValue1}*/ type="text" placeholder="Input your address..."  />
                    <button onClick={async () => await getFaucetToken()} className='button is-link mt-2 mr-2'>Claim</button>
                </div>
                </div>
               
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
  }

'''
'''--- front-end/dex/pages/index.js ---
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { React ,useState, useEffect } from 'react'
// import { useHistory } from 'react-router-dom'
import {/*MoralisProvider,*/ useMoralis, useWeb3Contract} from 'react-moralis'
import { faucetAbi, faucetContractAddress, dexAbi, dexContractAddress, iErc20Abi, dexNew } from '../constants'
import { BigNumber, Contract, ethers, Wallet } from 'ethers'
import { Tab } from '@headlessui/react'
import { ConnectButton, useWallet } from "@mysten/wallet-kit";
import useFetch from '../components/useFetch'
// import Header from '../components/Header'
// import Footer from '../components/footer'
import Header from '../components/Header'
import Footer from '../components/footer'
import { enabled } from 'waffle/lib/utils/Log'

// import { ethers } from 'hardhat'
// import faucetContract from '../blockchain/faucetAbi'
// import * as nearAPI from "near-api-js";
// import { NearBindgen, near, call, view, initialize, UnorderedMap } from 'near-sdk-js'
// import { setupWalletSelector } from "@near-wallet-selector/core";
// import { setupNearWallet } from "@near-wallet-selector/near-wallet";

export default function main() {

// const {address} = useFetch()
const { Moralis, isWeb3Enabled, chainId: chainIdHex } = useMoralis()

const usdcContractAddress = "0x07865c6E87B9F70255377e024ace6630C1Eaa37F"
const istContractAddress = "0x9c3565df44b79a7dbdab3678f0b00b9beabc7d70"

const [isConnected, setIsConnected] = useState(false);
const [provider, setProvider] = useState();
const [signer, setSigner] = useState()
const [faucetContract, setFaucetContract] = useState()
const [getFaucetError, setGetFaucetError] = useState ('')
const [address, setAddress] = useState()
const [inputValueIst, setInputvalueIst] = useState()
const [inputValueUsdc, setInputvalueUsdc] = useState()
const [inputValueShares, setInputvalueShares] = useState()
const [dexContract, setDexContract] = useState()
const [usdcContract, setUsdcContract] = useState()
const [istContract, setIstContract] = useState()
const [userShares, setUserShares] = useState("0")
const [selectedToken, setSelectedToken] = useState(istContractAddress)
//   const [pairAmount, setPairAmount] = useState()

const [usdcReserve, setUsdcReserve] = useState()
const [istReserve, setIstReserve] = useState()

const [approvedAmountIst, setApprovedAmountIST] = useState()
const [approvedAmountUsdc, setApprovedAmountUsdc] = useState()

const [outPutUsdc, setOutPutUsdc] = useState("0")
const [outPutIst, setOutPutIst] = useState("0")
const [isUsdcApproved, setIsUsdcApproved] = useState(false)
const [isIstApproved, setIsIstApproved] = useState(false)
const [pairAmount , setPairAmount ] = useState("0")

//   const UpdatePairAmount = event => {
//     setPairAmount(event.target.value)
//   }

const totalSupply = 0

  const conncetWalletHandler = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      try {
        const accounts = await ethereum.request({method: "eth_requestAccounts"});
        setIsConnected(true)
        let connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
        setProvider(connectedProvider)
        const _signer = connectedProvider.getSigner()
        setSigner(_signer)
        const chainId = await _signer.getChainId()
        const goerliChainId = "0x5"
        console.log('chain id:',chainId);
        if(chainId === goerliChainId){
          console.log('connected to the georli network');
        } else {
          try {
            await window.ethereum.request({
              method: 'wallet_switchEthereumChain',
              params: [{ chainId: goerliChainId}],
            });
          } catch (error) {
            if (error.code === 4902) {
            console.log("This network is not available in your metamask, please add it")
            try {
              await window.ethereum.request({
                method: 'wallet_addEthereumChain',
                params: [
                  {
                    chainId: '0x5',
                    rpcUrl: 'https://goerli.infura.io/v3/',
                    nativeCurrency: {
                      name: GoerliEtherem,
                      Symbol: GoerliETH,
                      decimals: 18
                    },
                    blockExplorerUrl: 'https://goerli.etherscan.io',
                  },
                ],
              });
            } catch (error) {
                console.log(error);
              }
            }
            console.log(error);
            console.log("Failed to switch to the network")
          }
          }
        
        
        setAddress(accounts[0])
        setFaucetContract(new ethers.Contract( faucetContractAddress , faucetAbi , provider ))
        const dexC = new ethers.Contract(dexContractAddress, dexAbi, provider)
        setDexContract (dexC)
        const dexWithSigner =  dexC.connect(_signer)
        const get = await (dexWithSigner.balanceOf(accounts[0]))
        setUserShares(get.toString())
        setUsdcContract (new ethers.Contract(usdcContractAddress , iErc20Abi ,  provider))
        setIstContract (new ethers.Contract(istContractAddress , iErc20Abi ,  provider))

        console.log(_signer.getAddress( ));
        console.log(accounts[0]);

        const istR = await dexWithSigner._getReserveMyToken()
        const usdcR = await dexWithSigner._getReserveUsdc()

        console.log(`ist reserve: ${istR} and usdc reserve : ${usdcR}`);

        setIstReserve(istR)
        setUsdcReserve(usdcR)

        // const lev = (usdcR * 10 ** 12) / (istR )
        const usdcOutPut = (( usdcR / (10**6)) * (1)) / ((istR / (10 ** 18)) + (1))
        const istUPOutPut = (( istR / (10**6)) * (1)) / ((usdcR / (10 ** 18)) + (1))
  
        setOutPutUsdc(usdcOutPut)
        setOutPutIst(istUPOutPut)

        setPairAmount(((usdcR * (10**12))/(istR)))

        window.ethereum.on('accountsChanged',async () =>{
          const newAccounts = await ethereum.request({method: "eth_accounts"})
          // window.ethereum.request({method: "eth_accounts"})
          // .then(handleAccountsChanged)
          setAddress(newAccounts[0])
          console.log("connected wallet changed to:",newAccounts[0]);
        })
      
        ethereum.on('chainChanged', async () => {
          const newChainId = await signer.getChainId()
          console.log(`chain id changed to :${newChainId}`);
          window.location.reload();
        })
        ethereum.on('disconnect', async () => {
        setIsConnected(false)
        const nowConnection = ethereum.isConnected()
        setIsConnected(nowConnection)
        
        console.log('user disconnected!');
      
      });
        
        }catch (e) {
        console.log(e);
      }
    } else {
      setIsConnected(false)
    }
  }

useEffect(() => {
  async function accountChanged () {
    window.ethereum.on("accountsChanged", async () =>{
        const accounts = await window.ethereum.request({
            method: 'eth_requestAccounts',
        })
        if (accounts.length) {
            setAddress(accounts[0])
        } else {
            window.location.reload()
        }
    })
  }
  accountChanged()
},[address])

  const getCurrentWalletConnected = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      try {

        const connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
        const accounts = await provider.send("eth_accounts", []);
        if (accounts.length > 0) {
          setSigner(connectedProvider.getSigner())
          setSignerAddress(signer.getAddress( ))
          setFaucetContract(new ethers.Contract( faucetContractAddress , faucetAbi , provider ))
        } else {
          console.log("Connect your wallet using the connect button");
        }
      } catch (e) {
        console.log(e);
      }
    }
  }

  const addWalletListener = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      window.ethereum.on("accounsChanged", (accounts) => {
        setAddress(accounts[0])
      })
  } else {
    setAddress("")
    console.log("please install metamask");
  }
  }
    
  // const { runContractFunction: getFaucet } = useWeb3Contract({
  //   abi: faucetAbi,
  //   contractAddress: faucetContractAddress, // specify the networkId
  //   functionName: "getFaucet",
  //   params: {inputValue1},
  // })

  const getFaucetToken = async () => {
    setGetFaucetError("")
    try {
      const contractWithSigner = faucetContract.connect(signer)
      const resp = await contractWithSigner.requestTokens()   
    } catch (err) {
      console.log(err.message);
      setGetFaucetError(err.message)
    }
  }

  const approveUSDC = async () => {
    const USDCSigner = usdcContract.connect(signer)
    console.log(USDCSigner);
    const approveUSDC = await USDCSigner.approve(dexContractAddress, (ethers.utils.parseUnits(inputValueUsdc.toString(), "mwei")))
    const valueNow = ethers.utils.parseUnits(inputValueUsdc.toString(), "mwei")
    setApprovedAmountUsdc(valueNow)
    // if (approveUSDC == true) {
      setIsUsdcApproved(true)
    // }
    
  }
  const approveIST = async () => {
    const ISTSigner = istContract.connect(signer)
    console.log(ISTSigner);
    const approveIST = await ISTSigner.approve(dexContractAddress,(ethers.utils.parseEther(inputValueIst)))
    const valueNow = ethers.utils.parseEther(inputValueIst)
    setApprovedAmountIST(valueNow)
    // if (approveIST == true) {
      setIsIstApproved(true)
    // }
  }

  const provideLiquidity = async () => {
    try {
        const _gasLimit = ethers.utils.hexlify(1000000)
        // const _gasPrice = provider.getGasPrice()
        const _gasPrice = ethers.utils.parseUnits("10.0", "gwei")

        const dexWithSigner = dexContract.connect(signer)
        const resp = await dexWithSigner._addLiquidity(ethers.utils.parseUnits(inputValueUsdc , "mwei"),ethers.utils.parseEther(inputValueIst), {
            gasLimit: _gasLimit,
            gasPrice: _gasPrice
        })
        // setApprovedAmountUsdc(0)
        // setApprovedAmountIST(0)
    } catch (err) {
        console.log(err.message);
    }
  }
  

  const withdrawLiquidity = async () => {
    try {
        const _gasLimit = ethers.utils.hexlify(1000000)
        // const _gasPrice = provider.getGasPrice()
        const _gasPrice = ethers.utils.parseUnits("10.0", "gwei")
        // const _gasPrice = BigNumber.from(1613539020)
        console.log(_gasPrice);
        const dexWithSigner = dexContract.connect(signer)
        console.log(dexWithSigner);
        const resp = await dexWithSigner._removeLiquidity(inputValueShares, {
            gasLimit: _gasLimit,
            gasPrice: _gasPrice
        })
    } catch (err) {
        console.log(err.message);
    }
  }

  const getBalance = async () => {
    const dexWithSigner = dexContract.connect(signer)
    const get = await (dexWithSigner.balanceOf(address))
    
    console.log(get.toString());
    setUserShares(get.toString())
    // setUserShares(get)
  }

  const swapIstToUsdc = async () => {
    const _gasLimit = ethers.utils.hexlify(1000000)
    const _gasPrice = ethers.utils.parseUnits("10.0", "gwei")

    const dexWithSigner = dexContract.connect(signer)
    const _swap = await (dexWithSigner._swap(istContractAddress,ethers.utils.parseEther(inputValueIst),{
        gasLimit: _gasLimit,
        gasPrice: _gasPrice 
    }))
  }
  const swapUsdcToIst = async () => {
    const _gasLimit = ethers.utils.hexlify(1000000)
    const _gasPrice = ethers.utils.parseUnits("10.0", "gwei")

    const dexWithSigner = dexContract.connect(signer)
    const _swap = await (dexWithSigner._swap(usdcContractAddress,ethers.utils.parseUnits(inputValueUsdc, "mwei"),{
        gasLimit: _gasLimit,
        gasPrice: _gasPrice 
    }))
  }

//   function getTotalSupply(props) {
//     return<h1>Amout Of Pair Must Be: {props.amount}</h1>
//   }

//   const handleSuccess = async function(tx) {
//     await tx.wait(1)
//     handleNewNotification(tx)
// }

// const handleNewNotification = function () {
//     dispatch ({
//         type: "info",
//         message: "Transaction Complete",
//         title: "Tx Notification",
//         position: "topR",
//         icon: "bell"
//     })
// }

  return (
    <div className={styles.container}>
      <Head>
        <title>Invesweet Pool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
        
      <Header conncetWalletHandler={conncetWalletHandler} isConnected={isConnected}/>
    
      <main className={styles.main}>
        <div className='box is-large'>
        <span className='navbar-end is-link has-text-grey'>
        {address && address.length > 0 ? `Connected to: ${address.substring(0,6)}...${address.substring(38)}` :"Please connect your wallet"}
      </span>
          <div className="  is-centered ">
            <Tab.Group>
              <Tab.List className='py-3'>
                <Tab className='button is-light is-normal mx-2'>Swap</Tab>
                <Tab className='button is-light is-normal mx-2'>Pool</Tab>
                <Tab className='button is-light is-normal mx-2'>Faucet</Tab>
              </Tab.List>
              <Tab.Panels>
                <Tab.Panel>
                  <div className='box'>
                  <div className="control">
                    <label className="label">Select Token:</label>
                    <div className={styles.topRight}>
                    <select className={styles.select} value={selectedToken} onChange={(e) =>setSelectedToken(e.target.value)}>
                      <option value={istContractAddress}>IST to USDC</option>
                      <option value={usdcContractAddress}>USDC to IST</option>
                    </select>
                    </div>
                      <div className="navbar-item is-hoverable navbar-end ">
                      </div>
                      <label>Enter your amount</label>
                      <input onChange={(selectedToken == istContractAddress) ? ((e) =>setInputvalueIst(e.target.value)) : ((e) => setInputvalueUsdc(e.target.value))} 
                      className="input mt-2" 
                      value={(selectedToken == istContractAddress) ? inputValueIst : inputValueUsdc} 
                      type="text" placeholder="Input amount..."  />
                      {selectedToken == istContractAddress && inputValueIst ? (<p className={styles.p}>{(selectedToken == istContractAddress) ? `You will receive ${outPutUsdc * inputValueIst } USDC` :`You will receive ${inputValueUsdc } IST`}</p>) : (<p></p>)}
                      {selectedToken == usdcContractAddress && inputValueUsdc ? (<p className={styles.p}>{(selectedToken == usdcContractAddress) ? `You will receive ${outPutIst * inputValueUsdc } IST` :`You will receive ${inputValueIst } USDC`}</p>) : (<p></p>)}
                      {/* <input className="input mt-2" value={""} type="text" placeholder={(selectedToken == istContractAddress) ? `You get ${inputValueIst } USDC` :`You get ${inputValueUsdc } IST`} /> */}

                      {selectedToken == istContractAddress ? (isIstApproved ? (<button onClick={async () => await approveIST()} className='button is-link mt-2 mr-2' disabled>Approve IST</button>)
                       : (<button onClick={async () => await approveIST()} className='button is-link mt-2 mr-2'>Approve IST</button>)) : (isUsdcApproved ? (<button onClick={async () => await approveUSDC()} className='button is-link mt-2 mr-2' disabled>Approve USDC</button>)
                       : (<button onClick={async () => await approveUSDC()} className='button is-link mt-2 mr-2'>Approve USDC</button>))}
                   
                      { selectedToken == istContractAddress ?(isIstApproved ?(<button onClick={async () => await swapIstToUsdc()} className='button is-link mt-2'>Swap to USDC</button>)
                      : (<button onClick={async () => await swapIstToUsdc()} className='button is-link mt-2' disabled>Swap to USDC</button>)) :
                      (isUsdcApproved ?(<button onClick={async () => await swapUsdcToIst()} className='button is-link mt-2'>Swap to IST</button>)
                      : (<button onClick={async () => await swapUsdcToIst()} className='button is-link mt-2' disabled>Swap to IST</button>))
                      }
                      <p className={styles.p}>Please make sure approve confirmed then try to swap</p>
                       </div>
                
                  </div>
                    </Tab.Panel>
                    <Tab.Panel>
                    <div className='box'>
              <label className="label">Deposit liquidity</label>
                {/* <div>
                    <getTotalSupply amount= "This amount"/>
                </div> */}
                
              {/* <div className='navbar-end has-text-grey-light'>Require this amout for pair: {inputValueIst}</div> */}
                <div className="control">
                  <div className="navbar-item is-hoverable navbar-end ">
                    {isUsdcApproved ? (<p>You must set <strong>{inputValueUsdc * pairAmount} IST</strong> as a pair token amount</p>) : (<p></p>)}
                  </div>
                  {isUsdcApproved ? (<input onChange={(e) => setInputvalueUsdc(e.target.value)} className="input mt-2"  type="text" placeholder="Input USDC amount..." value={inputValueUsdc} disabled/>) : (<input onChange={(e) => setInputvalueUsdc(e.target.value)} className="input mt-2"  type="text" placeholder="Input USDC amount..." value={inputValueUsdc}/>) }
                  {(isIstApproved == false && isUsdcApproved == true )? (<input onChange={(e) => setInputvalueIst(e.target.value)} className="input mt-2"  type="text" placeholder="Input IST amount..." value={inputValueIst}/>) : (<input onChange={(e) => setInputvalueIst(e.target.value)} className="input mt-2"  type="text" placeholder="Input IST amount..." disabled/>)}
                  {/* <input onChange={updateInputUsdc} className="input mt-2"  type="text" placeholder="Input USDC amount..." />
                  <input onChange={updateInputIst} className="input mt-2"  type="text" placeholder="Input IST amount..." disabled/> */}
                  {isUsdcApproved ?(<button onClick={async () => await approveUSDC()} className='button is-link mt-2 mr-2' disabled>Approve USDC</button>) :(<button onClick={async () => await approveUSDC()} className='button is-link mt-2 mr-2'>Approve USDC</button>)}
                  {(isIstApproved == false && isUsdcApproved == true) ?(<button onClick={async () => await approveIST()} className='button is-link mt-2 mr-2'>Approve IST</button>) : (<button onClick={async () => await approveIST()} className='button is-link mt-2 mr-2' disabled>Approve IST</button>)}
                  {(isIstApproved == true && isUsdcApproved == true) ?(<button onClick={async () => await provideLiquidity()} className='button is-link mt-2' >Deposit</button>) : (<button onClick={async () => await provideLiquidity()} className='button is-link mt-2' disabled>Deposit</button>)}
                </div>
              </div>
              <div className='box'>
              <label className="label">Withdraw liquidity</label>
                <div className="control">
                  <div className="navbar-item is-hoverable navbar-end ">
                  </div>
                  <div className='navbar-end has-text-grey-light'>Your shares: {userShares}</div>
                  <input onChange={(e) => setInputvalueShares(e.target.value)} className="input mt-2 has-text-grey" value={inputValueShares} type="text" placeholder="Input your shares..." />
                  {/* <input className="input mt-2" value={""} type="text" placeholder="Input IST amount..." /> */}
                  <button onClick={async () => await withdrawLiquidity()} className='button is-link mt-2 mr-2'>Withdraw</button>
                  {/* <button className='button is-link mt-2' disabled>Withdraw</button> */}
                </div>
              </div>
                    </Tab.Panel>
                    <Tab.Panel>
                    <div className='has-text-weight-semibold py-2'>
                <p>Testnet tokens once a day</p>
              </div>
              <p>These tokens hasn't any real value, you can use them for tesntnet transactions like Swap & Provide liquidity</p>
                <div className='box mt-4'>
                  <label className="label">Get testnet tokens</label>
                    <div className="control">
                      <div className="navbarzz-item is-hoverable navbar-end ">
                    </div>
                    {/* <input className="input mt-2" value={""} type="text" placeholder="Input your address..."  /> */}
                    <button onClick={async () => await getFaucetToken()} className='button is-link mt-2 mr-2'>Claim</button>
                  </div>
                </div>      
              
                    </Tab.Panel>
                </Tab.Panels>
            </Tab.Group>
           
          </div>
            <div className='is-hidden' id='faucet'>
              </div>
            </div>
        </main>
        <Footer/>
    </div>
  )
  }
  

'''
'''--- front-end/dex/pages/liquidity.js ---
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { useState, useEffect } from 'react'
// import {/*MoralisProvider,*/ useMoralis} from "react-moralis"
import { faucetAbi, faucetContractAddress, dexAbi, dexContractAddress } from '../constants'
import { Contract, ethers } from 'ethers'
import { Tab } from '@headlessui/react'

export default function lp() {

  const [isConnected, setIsConnected] = useState(false);
  const [provider, setProvider] = useState();
  const [signer, setSigner] = useState()
  const [faucetContract, setFaucetContract] = useState()
  const [getFaucetError, setGetFaucetError] = useState ('')
  const [address, setAddress] = useState()
  const [web3, setWeb3] = useState()
  const [bcContract, setBcContract] = useState()
  const [balance, setBalance] = useState("0")
  const [inputValue1, setInputvalue1] = useState()
  const [inputValue2, setInputvalue2] = useState()
  const [signerAddress, setSignerAddress] = useState()
  const [betPlayers, setBetPlayers] = useState([])
  const [totalValue, setTotalValue] = useState()
  const [toggleState, setToggleState] = useState(1)
  const [dexContract, setDexContract] = useState()
  const connect = async () => {
    if (typeof window !== "undefined" && typeof window.ethereum !== "undefined") {
      try {
        const accounts = await ethereum.request({method: "eth_requestAccounts"});
        setIsConnected(true)
        let connectedProvider = new ethers.providers.Web3Provider(window.ethereum)
        setProvider(connectedProvider)
        const _signer = connectedProvider.getSigner()
        setSigner(_signer)
        setSignerAddress(_signer.getAddress( ))
        setAddress(accounts[0])
        // setFaucetContract(new ethers.Contract( "0x12d6fa140cf5817393128e802e778c2ea3d30f26" , faucetAbi , provider ))
        // setDexContract(new ethers.Contract("0x51a78580a3d04c4fcf9f33c4ba6b611d467f55ab", dexAbi, provider))
        // console.log(`dex contract address: ${dexContract.getAddress()}`);
        setDexContract (new ethers.Contract("0x51a78580a3d04c4fcf9f33c4ba6b611d467f55ab", dexAbi, provider))
        console.log(_signer.getAddress( ));
        console.log(accounts[0]);
        
      } catch (e) {
        console.log(e);
      }
    } else {
      setIsConnected(false)
    }
  }

  return (
    <div className={styles.container}>
      <Head>
        <title>Invesweet Pool</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className='box'>
          <div className="tabs  is-centered ">
            <ul className=''>
              <li><Link href='/swap'>Swap</Link></li>
              <li className="is-active"><a>Pool</a></li>
              <li><Link href='/faucet'>Faucet</Link></li>
            </ul>
          </div>
          <div className='box'>
            <label className="label">Deposit liquidity</label>
            <div className="control">
              <div className="navbar-item is-hoverable navbar-end ">
              </div>
              <input className="input mt-2" value={""} type="text" placeholder="Input USDC amount..." />
              <input className="input mt-2" value={""} type="text" placeholder="Input IST amount..." />
              <button onClick={''} className='button is-link mt-2 mr-2'>Approve</button>
              <button className='button is-link mt-2' disabled>Deposit</button>
            </div>
          </div>
          <div className='box'>
            <label className="label">Withdraw liquidity</label>
            <div className="control">
              <div className="navbar-item is-hoverable navbar-end ">
              </div>
              <input className="input mt-2" value={""} type="text" placeholder="Input USDC amount..." />
              <input className="input mt-2" value={""} type="text" placeholder="Input IST amount..." />
              <button className='button is-link mt-2 mr-2'>Approve</button>
              <button className='button is-link mt-2' disabled>Withdraw</button>
            </div>
          </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

'''
'''--- front-end/dex/pages/near.js ---
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { React ,useState, useEffect } from 'react'
// import { ethers } from 'ethers'
import {/*MoralisProvider,*/ useMoralis, useWeb3Contract} from 'react-moralis'
import { faucetAbi, faucetContractAddress, dexAbi, dexContractAddress, iErc20Abi, dexNew } from '../constants'
import { BigNumber, Contract, ethers } from 'ethers'
import { Tab } from '@headlessui/react'
import { ConnectButton, useWallet } from "@mysten/wallet-kit";
// import { ethers } from 'hardhat'
// import faucetContract from '../blockchain/faucetAbi'
import * as nearAPI from "near-api-js";
// import { NearBindgen, near, call, view, initialize, UnorderedMap } from 'near-sdk-js'
import { setupWalletSelector } from "@near-wallet-selector/core";
import { setupNearWallet } from "@near-wallet-selector/near-wallet";
// import { Wallet } from './near-wallet';
import nearWalletIconUrl from "@near-wallet-selector/near-wallet/assets/near-wallet-icon.png";

// const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
// const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// const { connect, keyStores, WalletConnection} = nearAPI;

// const nearWallet = setupNearWallet({
//     walletUrl: "https://wallet.testnet.near.org",
//     iconUrl: nearWalletIconUrl
//   });

// const myKeyStore = new keyStores.BrowserLocalStorageKeyStore();
// const connectionConfig = {
//   networkId: "testnet",
//   keyStore: myKeyStore, // first create a key store 
//   nodeUrl: "https://rpc.testnet.near.org",
//   walletUrl: "https://wallet.testnet.near.org",
//   helperUrl: "https://helper.testnet.near.org",
//   explorerUrl: "https://explorer.testnet.near.org",
// };

// // connect to NEAR
// const nearConnection = await connect(connectionConfig);

// // create wallet connection
// const walletConnection = new WalletConnection(nearConnection);

// // const walletConnection = new WalletConnection(nearConnection);
// walletConnection.requestSignIn(
//     "example-contract.testnet", // contract requesting access
//     "Example App", // optional title
//     "http://YOUR-URL.com/success", // optional redirect URL on success
//     "http://YOUR-URL.com/failure" // optional redirect URL on failure
//   );

// create new WalletConnection instance
// const wallet = new WalletConnection(near, 'my-app');

// // If not signed in redirect to the NEAR wallet to sign in
// // keys will be stored in the BrowserLocalStorageKeyStore
// if(!wallet.isSignedIn()) return wallet.requestSignIn()

export default function NearWallet() {

    return (
        <div className={styles.container}>
          <Head>
            <title>Invesweet Pool</title>
            <meta name="description" content="Generated by create next app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
            
    
          
    
          <footer className={styles.footer}>
            <a
              href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
              target="_blank"
              rel="noopener noreferrer"
            >
              Powered by{' '}
              <span className={styles.logo}>
                <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
              </span>
            </a>
          </footer>
        </div>
      )
      }
    
'''
'''--- front-end/dex/pages/sui.js ---
// import { ConnectButton, useWallet } from "@mysten/wallet-kit";

// export default function SendTransaction() {
//   const { connected, getAccounts, signAndExecuteTransaction } = useWallet();

//   const handleClick = async () => {
//     await signAndExecuteTransaction({
//       kind: "moveCall",
//       data: {
//         packageObjectId: "0x2",
//         module: "devnet_nft",
//         function: "mint",
//         typeArguments: [],
//         arguments: [
//           "name",
//           "capy",
//           "https://cdn.britannica.com/94/194294-138-B2CF7780/overview-capybara.jpg?w=800&h=450&c=crop",
//         ],
//         gasBudget: 10000,
//       },
//     });
//   };

//   return (
//     <div>
//     <ConnectButton onClick={() => handleClick()} disabled={!connected}/>
//     </div>
//   );
// }
'''
'''--- front-end/dex/pages/swap.js ---
import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import 'bulma/css/bulma.css'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { useState } from 'react'

export default function swap() {

  const [error, setError] = useState ('')
  const [address, setAddress] = useState()
  const [web3, setWeb3] = useState()
  const [bcContract, setBcContract] = useState()
  const [balance, setBalance] = useState("0")
  const [inputValue1, setInputvalue1] = useState()
  const [inputValue2, setInputvalue2] = useState()
  const [inputValue3, setInputvalue3] = useState()
  const [betPlayers, setBetPlayers] = useState([])
  const [totalValue, setTotalValue] = useState()

  // const router = useRouter()

  // If i want to rout somewhere by button i hanlde it this way:
  // const handleClick = () => {
  //   console.log('input your amount');
  //   router.push('/liquidity')
  // }
  // Then i can use handleClick in: button/onClick

  // const connectWalletHandler = async () => {
  //   setError('')
  //   if (typeof window !== "undefined" && typeof window.ethereum !== "undefined"){
  //       try{
  //           const accounts = await ethereum.request({ method: 'eth_requestAccounts' });
  //           const account = accounts[0];
  //           setAddress(account)
  //           // const provider = new ethers.providers.Web3Provider(web3.currentProvider);
  //           // setWeb3(web3)
  //           // const accounts = await web3.eth.getAccounts();
            
  //           document.getElementById("connectButton").innerHTML = "Connected!"
            
  //       } catch (err) {
  //           setError(err.message)
  //       }
        
  //   } else {
  //       console.log("please install metamask")
  //   }
  // }

  // onChange={(e) => setInputvalue1(e.target.value)}

  return (
    <div className={styles.container}>
      <Head>
        <title>Invesweet Dex</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className='box'>
          <div className="tabs  is-centered ">
            <ul className=''>
              <li className="is-active"><a>Swap</a></li>
              <li><Link href='/liquidity'>Pool</Link></li>
              <li><Link href='/faucet'>Faucet</Link></li>
            </ul>
          </div>
        <div className='box'>
          <label className="label">IST to USDC</label>
          <div className="control">
            <div className="navbar-item is-hoverable navbar-end ">
            </div>
            <input className="input mt-2" value={""} type="text" placeholder="Input IST amount..."  />
            <input className="input mt-2" value={""} type="text" placeholder="0" />
            <button className='button is-link mt-2 mr-2'>Approve</button>
            <button className='button is-link mt-2' disabled>Swap</button>
          </div>
        </div>
        <div className='box'>
          <label className="label">USDC to IST</label>
          <div className="control">
            <div className="navbar-item is-hoverable navbar-end ">
            </div>
            <input className="input mt-2" value={""} type="text" placeholder="Input USDC amount..."  />
            <input className="input mt-2" value={""} type="text" placeholder="0" />
            <button className='button is-link mt-2 mr-2'>Approve</button>
            <button className='button is-link mt-2' disabled>Swap</button>
          </div>
        </div>
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{' '}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  )
}

'''
'''--- hardhat.config.js ---
require("@nomicfoundation/hardhat-toolbox");
require ("dotenv").config()
require ("./tasks/balance")
require("@nomiclabs/hardhat-ethers");

/** @type import('hardhat/config').HardhatUserConfig */

module.exports = {
  solidity: "0.8.17",
  defaultNetwork: "hardhat",
  networks: {
    // goerli: {
    //   url: process.env.INFURA_GOERLI_ENDPOINT,
    //   accounts: [process.env.PRIVATE_KEY],
    //   chainId: 5
    // },
    localhost: {
      url: "http://127.0.0.1:8545/",
      chainId: 31337,
    }
  },
};
'''
'''--- scripts/deploy.js ---
// We require the Hardhat Runtime Environment explicitly here. This is optional
// but useful for running the script in a standalone fashion through `node <script>`.
//
// You can also run a script with `npx hardhat run <script>`. If you do that, Hardhat
// will compile your contracts, add the Hardhat Runtime Environment's members to the
// global scope, and execute the script.
const hre = require("hardhat");
const {ethers, run, network} = require("hardhat")

async function main() {
 const Token = await hre.ethers.getContractFactory("MyToken")
 const token = await Token.deploy("Invesweet","IST");
 await token.deployed()

//  await mintContract.functions.mint(id, amount, {gasLimit: 40000000});

 console.log("Congratulations!! Your token deployed, Here's token address:", token.address);

 const Dex = await hre.ethers.getContractFactory("StableDex")
 const myDex = await Dex.deploy(token.address, 37, "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e")
 await myDex.deployed()

 console.log("Here's your dex contract address:", myDex.address);

 console.log(network.config);

 const Faucet = await hre.ethers.getContractFactory("Faucet")
 const faucet = await Faucet.deploy(token.address)
 await faucet.deployed()

 console.log("Faucet contract address:", faucet.address);

}

// We recommend this pattern to be able to use async/await everywhere
// and properly handle errors.
main().catch((error) => {
  console.error(error);
  process.exitCode = 1;
});

'''
'''--- tasks/balance.js ---
const {task} = require ("hardhat/config")

task("contract-balance", "show the current contract balance").setAction(
    async(taskArgs, hre) => {
        const currentBalance = await hre.ethers.provider.getBalance()
        console.log("current balance of contract:", currentBalance);
    }
)
module.exports = {}
'''
'''--- test/MyToken.js ---

const { anyValue } = require("@nomicfoundation/hardhat-chai-matchers/withArgs");
const { expect } = require("chai");
const hre = require("hardhat")

describe("MyToken contract", function () {

  let Token
  let myToken
  let owner
  let addr1
  let addr2

 
  beforeEach (async function () {

    Token = await ethers.getContractFactory("MyToken");
    [owner, addr1, addr2] = await hre.ethers.getSigners();

    myToken = await Token.deploy(100)
  })
  
  describe("Deployment", function () {
    it("Should set the right owner", async function() {
      expect(await myToken.owner()).to.equal(owner.address)
    })
    it("Should get 50 tokens because of constructor amount is 50",async function() {
      const ownerBalance = await myToken.balanceOf(owner.address)
      expect(await myToken.totalSupply()).to.equal(ownerBalance)
    })

    it("Should set the new minter that can mint token", async function() {
      // await owner.call(myToken._addMinter(addr1.address))
      await myToken.connect(owner)._addMinter(addr1.address)
      const checkMinter = await myToken._checkMinter(addr1.address)
      
      expect(checkMinter).to.equal(true)
      // expect(myToken.onlyMinter(addr1)).to.equal(true)
    })
    
  })
});
'''