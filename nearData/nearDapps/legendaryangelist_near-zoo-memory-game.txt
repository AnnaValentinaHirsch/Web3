*GitHub Repository "legendaryangelist/near-zoo-memory-game"*

'''--- .env ---
REACT_APP_CONTRACT_NAME=subaccount6.strongwolf.testnet
REACT_APP_WORLD_TIME_API_URL=https://worldtimeapi.org/api/timezone/Etc/UTC
'''
'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "zoo-landing",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.2.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "bootstrap": "^5.1.3",
    "bootstrap-icons": "^1.8.2",
    "buffer": "^6.0.3",
    "formik": "^2.2.9",
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-block-ui": "^1.3.3",
    "react-bootstrap": "^2.4.0",
    "react-dom": "^18.1.0",
    "react-icons": "^4.3.1",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "react-toastify": "^9.0.1",
    "sass": "^1.51.0",
    "scrollreveal": "^4.0.9",
    "uuid": "^8.3.2",
    "web-vitals": "^2.1.4",
    "yup": "^0.32.11",
    "zustand": "^4.0.0-rc.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/browserconfig.xml ---
<?xml version="1.0" encoding="utf-8"?>
<browserconfig>
    <msapplication>
        <tile>
            <square150x150logo src="/mstile-150x150.png"/>
            <TileColor>#da532c</TileColor>
        </tile>
    </msapplication>
</browserconfig>

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Web site created using create-react-app" />
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <link rel="apple-touch-icon" sizes="180x180" href="%PUBLIC_URL%/apple-touch-icon.png">
  <link rel="icon" type="image/png" sizes="32x32" href="%PUBLIC_URL%/favicon-32x32.png">
  <link rel="icon" type="image/png" sizes="16x16" href="%PUBLIC_URL%/favicon-16x16.png">
  <meta name="msapplication-TileColor" content="#da532c">
  <title>ZooMemory NFT</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
</body>

</html>
'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useEffect } from "react";
import { Route, Routes } from "react-router-dom";

// components and pages
import Navbar from "./components/Navbar";
import HomePage from "./pages/home-page/home-page";

// hooks
import { useTheme } from "./hooks/use-theme";
import { useInterval } from "./hooks/use-interval";

// global state
import useAccount from "./store/account.store";

// styles
import "./scss/index.scss";

// NEAR utils
import { accountBalance, initializeContract } from "./utils/near";
import GamePage from "./pages/game-page/game-page";
import { getWorldTime } from "./utils/date-time";
import Marketplace from "./pages/marketplace/marketplace";

export const App = () => {
  const [theme, changeTheme] = useTheme();

  const {
    setAccount,
    setBalance,
    setPoints,
    setTempPoints,
    setPermPoints,
    setCoins,
    timeRemaining,
    setTimeRemaining,
    accountLoading,
    setAccountLoading,
  } = useAccount();

  useEffect(() => {
    (async () => {
      try {
        await initializeContract();

        const acc = window.walletConnection.account();
        setAccount(acc);

        if (acc && acc.accountId) {
          const bal = await accountBalance();
          setBalance(bal);

          // TODO: Integrate with smart contract to get points owned by user, and remaining time for the points expiry, as well as coins owned by user
          const accountDetails = await window.contract.get_status({
            account_id: acc.accountId
          });
          
          // const accountDetails = JSON.parse(
          //   localStorage.getItem(acc.accountId)
          // );
          const tempPoints = accountDetails?.temp_points || 0;
          const permPoints = accountDetails?.perm_points || 0;
          const totalPoints = tempPoints + permPoints;
          const coins = localStorage.getItem("coins") ?? 5;
          // TODO: adding arbitrary time here, not storing for now, replace with API call values
          const currentTime = await getWorldTime();
          const timeRemaining =
            accountDetails?.last_updated_at
              ?
              (
                currentTime - accountDetails?.last_updated_at > 24 * 60 * 60
                  ?
                  0
                  :
                  24 * 60 * 60 - (currentTime - accountDetails?.last_updated_at)
              )
              : 24 * 60 * 60;

          setPoints(totalPoints);
          setTempPoints(tempPoints);
          setPermPoints(permPoints);
          setCoins(+coins);
          localStorage.setItem("coins", +coins);
          setTimeRemaining(timeRemaining);
        }

        setAccountLoading(false);
      } catch (err) {
        console.log(err);
      }
    })();
  }, []); /* eslint-disable-line */ /* fucking BS eslint error */

  useInterval(() => {
    if (accountLoading) {
      return;
    }

    setTimeRemaining(timeRemaining - 1);
  }, 1000);

  if (accountLoading) return;

  return (
    <div className="app-container" data-theme={theme}>
      <Navbar changeTheme={changeTheme} currentTheme={theme} />
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="game" element={<GamePage />} />
        <Route path="marketplace/*" element={<Marketplace />} />
      </Routes>
    </div>
  );
};

export default App;

'''
'''--- src/components/game-card/game-card.module.css ---
.card {
  position: relative !important;
  border: none !important;
  background: transparent !important;
  border-radius: 0 !important;
  outline: none !important;
}

.card img {
  width: 100%;
  height: 100%;
  display: block;
}

/* front card - picture */
.card .front {
  transform: rotateY(90deg);
  transition: all ease-in 0.2s;
  position: absolute;
  background: #74a7d6;
  border: 2px solid #fff;
  border-radius: 6px;
}

.flipped .front {
  transform: rotateY(0deg);
  transition-delay: 0.2s;
}

/* back card - cover */
.card .back {
  transition: all ease-in 0.2s;
  transition-delay: 0.2s;
}

.flipped .back {
  transform: rotateY(90deg);
  transition-delay: 0s;
}

'''
'''--- src/components/game-info/game-info.module.css ---
.info {
  display: flex;
  flex-direction: row;
  justify-content: space-between;
}

.info a {
  text-decoration: none;
  color: #fff;
}
.info a:hover {
  text-decoration: none;
  color: #fff;
}

.numWins {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 1.2em;
}

.win {
  border: 2px solid #fff;
  padding: 8px;
  border-radius: 50%;
}

'''
'''--- src/components/game-points/game-points.module.css ---
.pointsCounter {
  display: flex;
  flex-direction: column;
  gap: 0.3rem;
  font-size: 1.5rem;
  color: var(--accent-color3);
}

.points {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.imgContainer {
  width: 1.5rem;
  height: 2rem;
  position: relative;
  margin-right: 0.5rem;
}

.imgContainer img {
  position: "absolute";
  width: 100%;
  max-height: 100%;
  top: 0;
  left: 0;
}

'''
'''--- src/components/game-wins/game-wins.module.css ---
.numWins {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 1.2em;

  font-size: 2rem;
  height: 3rem;
}

@media screen and (max-width: 780px) {
  .numWins {
    font-size: 1.5rem;
  }
}

.win {
  border: 2px solid #fff;
  padding: 0.8rem;
  border-radius: 100%;
}

'''
'''--- src/components/points-counter/points-counter.module.css ---
.pointsCounter {
  position: absolute;

  bottom: -50px;
  right: 0;

  display: flex;
  flex-direction: column;

  font-size: 1.5rem;
  color: #fff;
}

.points {
  display: flex;
  flex-direction: row;
  align-items: center;
}

.imgContainer {
  width: 1.5rem;
  height: 2rem;
  position: relative;
  margin-right: 0.5rem;
}

.imgContainer img {
  position: "absolute";
  width: 100%;
  max-height: 100%;
  top: 0;
  left: 0;
}

'''
'''--- src/hooks/use-interval.js ---
import { useEffect, useRef } from "react";

export const useInterval = (callback, delay) => {
  const savedCallback = useRef();

  useEffect(() => {
    savedCallback.current = callback;
  }, [callback]);

  useEffect(() => {
    const tick = () => {
      savedCallback.current();
    };
    if (delay !== null) {
      let id = setInterval(tick, delay);
      return () => clearInterval(id);
    }
  }, [delay]);
};

export default useInterval;

'''
'''--- src/hooks/use-theme.js ---
import { useState } from "react";

export const useTheme = () => {
  const [theme, setTheme] = useState("dark");
  const changeTheme = () => {
    theme === "dark" ? setTheme("light") : setTheme("dark");
  };

  return [theme, changeTheme];
};

export default useTheme;

'''
'''--- src/hooks/use-update-effect.js ---
import { useEffect, useRef } from "react";

export const useUpdateEffect = (effect, deps) => {
  const isFirst = useRef(true);

  useEffect(() => {
    if (isFirst.current) {
      isFirst.current = false;
      return;
    }
    return effect();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, deps);
};

export default useUpdateEffect;

'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom/client";

import App from "./App";

import { BrowserRouter as Router } from "react-router-dom";

import * as buffer from "buffer";
window.Buffer = buffer.Buffer; // https://github.com/isaacs/core-util-is/issues/27#issuecomment-878969583

// import "bootstrap";
// import "bootstrap-icons/font/bootstrap-icons.css";
// import "bootstrap/dist/css/bootstrap.min.css";

const root = ReactDOM.createRoot(document.getElementById("root"));
root.render(
  <React.StrictMode>
    <Router>
      <App />
    </Router>
  </React.StrictMode>
);

'''
'''--- src/pages/game-page/game-page.module.css ---
.cardGrid {
  display: grid;
  margin: auto;
  width: 55%;
  grid-template-columns: 1fr 1fr 1fr 1fr;
  gap: 1.25rem;
}

.cardGrid.row5 {
  width: 65%;
  grid-template-columns: 1fr 1fr 1fr 1fr 1fr;
  gap: 1rem;
}

'''
'''--- src/store/account.store.js ---
import create from "zustand";

export const useAccount = create((set, get) => ({
  account: null,
  accountId: "",
  isWalletConnected: false,
  balance: "0",
  balanceNumber: 0,
  totalPoints: 0, // total of all points
  tempPoints: 0, // points acquired from game
  permPoints: 0, // permanent points from staking
  coins: 0, // ZCM/token
  timeRemaining: 0,
  accountLoading: true,

  setAccount(account) {
    set({
      account,
      accountId: account.accountId,
      isWalletConnected: Boolean(account.accountId),
    });
  },
  setBalance(balance) {
    set({ balance, balanceNumber: +balance });
  },

  // setting points/coins directly
  setPoints(totalPoints) {
    set({ totalPoints });
  },
  setPermPoints(permPoints) {
    set({ permPoints });
  },
  setTempPoints(tempPoints) {
    set({ tempPoints });
  },
  setCoins(coins) {
    set({ coins });
  },

  // adding points/coins (can take -ve values)(adds to totalPoints as well)
  addTempPoints(val) {
    set({
      tempPoints: get().tempPoints + val,
      totalPoints: get().totalPoints + val,
    });
  },
  addPermPoints(val) {
    set({
      permPoints: get().permPoints + val,
      totalPoints: get().totalPoints + val,
    });
  },
  addCoins(val) {
    set({ coins: get().coins + val });
  },

  setTimeRemaining(timeRemaining) {
    set({ timeRemaining });
  },

  // account loading status
  setAccountLoading(accountLoading) {
    set({ accountLoading });
  },
}));

export default useAccount;

'''
'''--- src/store/index.js ---
export * from "./account.store";

'''
'''--- src/utils/config.js ---
const CONTRACT_NAME = process.env.REACT_APP_CONTRACT_NAME; // line 1

function environment(env) {
    switch (env) {
        case "mainnet": // line 5
            return {
                networkId: "mainnet",
                nodeUrl: "https://rpc.mainnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.near.org",
                helperUrl: "https://helper.mainnet.near.org",
                explorerUrl: "https://explorer.mainnet.near.org",
            };
        case "testnet": // line 14
            return {
                networkId: "testnet",
                nodeUrl: "https://rpc.testnet.near.org",
                contractName: CONTRACT_NAME,
                walletUrl: "https://wallet.testnet.near.org",
                helperUrl: "https://helper.testnet.near.org",
                explorerUrl: "https://explorer.testnet.near.org",
            };
        default:
            throw Error(`Unknown environment '${env}'.`);
    }
}

export default environment;
'''
'''--- src/utils/date-time.js ---
import axios from 'axios';

export const convertToHours = (timeInSeconds) => {
  return new Date(timeInSeconds * 1000).toISOString().substr(11, 8);
};

export const getWorldTime = async () => {
  const { REACT_APP_WORLD_TIME_API_URL } = process.env;

  const currentTimeData = await axios.get(`${REACT_APP_WORLD_TIME_API_URL}`);
  const currentTime = currentTimeData.data.datetime;
  const secondTypeCurrentTime = Math.round(new Date(currentTime).getTime() / 1000);

  return secondTypeCurrentTime;
}

'''
'''--- src/utils/game-rules.js ---
export const getTimeForLevel = (level) => {
  switch (level) {
    case 0:
      return 130;
    case 1:
      return 120;
    case 2:
      return 110;
    case 3:
      return 100;
    case 4:
      return 90;
    case 5:
      return 80;
    case 6:
      return 70;
    case 7:
      return 60;
    case 8:
      return 50;
    case 9:
      return 40;
    case 10:
      return 30;
    default:
      return 0;
  }
};

export const getPointsForLevel = (level) => {
  switch (level) {
    case 0:
      return 100;
    case 1:
      return 120;
    case 2:
      return 140;
    case 3:
      return 160;
    case 4:
      return 180;
    case 5:
      return 200;
    case 6:
      return 220;
    case 7:
      return 240;
    case 8:
      return 260;
    case 9:
      return 280;
    case 10:
      return 300;
    default:
      return 0;
  }
};

export const shuffleArray = (array) => {
  let currentIndex = array.length,
    randomIndex;

  // While there remain elements to shuffle.
  while (currentIndex !== 0) {
    // Pick a remaining element.
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    // And swap it with the current element.
    [array[currentIndex], array[randomIndex]] = [
      array[randomIndex],
      array[currentIndex],
    ];
  }

  return array;
};

'''
'''--- src/utils/game.js ---
import { v4 as uuid4 } from "uuid";
import { parseNearAmount } from "near-api-js/lib/utils/format";

const GAS = 100000000000000;

export function createProduct(product) {
    product.id = uuid4();
    product.price = parseNearAmount(product.price + "");
    return window.contract.setProduct({ product });
}

export function getProducts() {
    return window.contract.getProducts();
}

export async function buyProduct({ id, price }) {
    await window.contract.buyProduct({ productId: id }, GAS, price);
}
'''
'''--- src/utils/near.js ---
import environment from "./config";
import { connect, Contract, keyStores, WalletConnection } from "near-api-js";
import { formatNearAmount } from "near-api-js/lib/utils/format";

const nearEnv = environment("testnet");

export async function initializeContract() {
  const near = await connect(
    Object.assign(
      { deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } },
      nearEnv
    )
  );
  window.walletConnection = new WalletConnection(near);
  window.accountId = window.walletConnection.getAccountId();
  window.contract = new Contract(
    window.walletConnection.account(),
    nearEnv.contractName,
    {
      viewMethods: ["get_status"],
      changeMethods: ["set_status"],
    }
  );
}

export async function accountBalance() {
  return formatNearAmount(
    (await window.walletConnection.account().getAccountBalance()).total,
    2
  );
}

export async function getAccountId() {
  return window.walletConnection.getAccountId();
}

export function login() {
  window.walletConnection.requestSignIn(nearEnv.contractName);
}

export function logout() {
  window.walletConnection.signOut();
  window.location.href = "/";
}

'''