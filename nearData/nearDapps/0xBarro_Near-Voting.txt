*GitHub Repository "0xBarro/Near-Voting"*

'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder â€“
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- src/AddGiftPane.js ---
import React, { useState } from "react";
import { insertGift } from "./utils";

export const AddGiftPane = props => {
    const [url, setUrl] = useState("")
    const [price, setPrice] = useState(0)

    return <div>
        <h1> Add Gift</h1>

        <form>
            <label htmlFor="url"> Gift URL </label><br></br>
            <input type="text" id="Url" onChange={(v) => setUrl(v.target.value)}></input><br></br>

            <label htmlFor="price"> Price (Near Tokens) </label><br></br>
            <input type="number" id="price" min={0}  onChange={(v) => setPrice(v.target.value)}></input><br></br>
            
            <label htmlFor="sub"></label><br></br>
        </form>
        <button onClick={() => {
            alert("Gift submitted")
            insertGift({url: url, n_tokens_needed: price})
        }}>Submit</button>
    </div>
}
'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, { useEffect, useState } from 'react'
import { logout } from './utils'
import { LoginPane } from './Login'
import { ContributeGiftPane } from './ContributeGIftPane'
import { AddGiftPane } from './AddGiftPane'
import { GiftsList } from './GiftsList'
import './global.css'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {

  const [mode, setMode] = useState('Add Item');

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) { return <LoginPane></LoginPane> }

  return <main>
    <div className="navbar">
      <button className={(mode === "My Wishlist") ? 'selected-button' : ""} onClick={() => setMode('My Wishlist')}>My Wishlist</button>
      <button className={(mode === "Add Item") ? 'selected-button' : ""} onClick={() => setMode('Add Item')}>Add Item</button>
      <button className={(mode === "Contribute") ? 'selected-button' : ""} onClick={() => setMode('Contribute')}>Contribute</button>
      <button className={(mode === "About") ? 'selected-button' : ""} onClick={() => setMode('About')}>About</button>
      <button className='salmon-bg' onClick={() => logout()}> Log Out</button>
    </div>

    <h3> Logged in as {window.accountId}</h3>

    {(mode === 'My Wishlist') && <GiftsList account={window.accountId}></GiftsList>}
    {(mode === 'Add Item') && <AddGiftPane></AddGiftPane>}
    {(mode === 'Contribute') && <ContributeGiftPane></ContributeGiftPane>}
    {(mode === 'About') && <div>
      <p> This app allows the users to create a wishlist of online shopping items. Users can then get contributions and contribute to other's wishlists. </p>
      </div>
      }

  </main  >
}
'''
'''--- src/ContributeGIftPane.js ---
import React, { useState, useEffect } from "react";
import { SelectAccount } from './SelectAccount'
import { Gift } from "./GiftsList";
import { getGifts } from "./utils";

export const ContributeGiftPane = props => {
    const [account, setAccount] = React.useState(undefined);
    const [giftsList, setGitfsList] = useState(undefined);

    useEffect(() => {
        if (account !== undefined) {

            console.log("Getting gifts for account: ", props.account)
            getGifts(account).then(g => setGitfsList(g))
            console.log(giftsList)

        }
    }, [account])

    if (account === undefined) { return <SelectAccount setAccount={setAccount}></SelectAccount> }

    else {
        return <div>
            <h1> Contribute Gift to {account}</h1>
            {(giftsList !== undefined) && giftsList.map(g => <Gift key={g.url} {...g}></Gift>)}
        </div>
    }
}
'''
'''--- src/GiftsList.js ---
import React from "react";
import { useEffect, useState } from "react";
import { getGifts, contribute_to_gift } from "./utils";
import './global.css'

export const Gift = props => {
    const [val, setVal] = useState(0)
    return <div className="gift">
        <a key={props.key} href={props.url}>URL</a> - Needed Tokens: {props.n_tokens_required} - Given: {props.current_tokens}<br></br> 
        <input type='number' min={0} onChange={(v) => setVal(v.target.value)}></input> <button onClick={v => contribute_to_gift(props.account, props.url, val)}> Contribute </button>
    </div>
}

export const GiftsList = props => {
    const [giftsList, setGitfsList] = useState(undefined);

    useEffect(()  => {
        console.log("Getting gifts for account: ", props.account)
        getGifts(props.account).then(g => {console.log("GIfts value: ", g); setGitfsList(g)})
        console.log(giftsList)
    }, [])

    return <div>
        <h3>  My Wishlist list  </h3>
        {(giftsList !== undefined) && giftsList.map(g => <Gift key={props.url} {...g} account={props.account}></Gift>)}
    </div>
}
'''
'''--- src/Login.js ---
import { login } from './utils'
import React, { useState } from 'react'

export const LoginPane = () => {
    return <main>
        <h1>Decentralized Voting</h1>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
            <p>Login to your wallet to vote!</p>
            <button onClick={login}>Sign in</button>
        </p>
    </main>
} 
'''
'''--- src/SelectAccount.js ---
import React, { useState } from 'react'

export const SelectAccount = props => {
    const [account, setAccount] = useState(undefined);

    const onChangeHandler = (v) => {
        const value = v.target.value;
        setAccount(value);
    }

    return <div>
        <h1>Please select an account to view the wishlist.</h1>
        <input type="text" onChange={onChangeHandler}></input>
        <button onClick={() => props.setAccount(account)}>Submit</button>
    </div>

}
'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'near-voting-system'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/favicon.ico" />
    <title>Decentralized Wishlist</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'
import { utils } from 'near-api-js'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_account_gifts'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['add_gift', 'contribute_to_gift'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

export const getGifts = accountId => {
  console.log('Getting gifts for account: ' + accountId)
  const gifts  = contract.get_account_gifts({account_id: accountId}).catch(e => e);
  return gifts
}

export const insertGift = inputsObj => {
  console.log("Saving gift ", inputsObj)
  contract.add_gift(inputsObj);
}

export const contribute_to_gift = (accountId, giftUrl, amount) => {
  const scaledAmount = utils.format.parseNearAmount(amount); 
  console.log("Sending: ", scaledAmount)
  const res = contract.contribute_to_gift({account_name: accountId, gift_url: giftUrl}, 30_000_000_000_000, scaledAmount)

  console.log(res);
}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''