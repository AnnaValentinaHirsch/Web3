*GitHub Repository "near-ndc/gwg-widgets"*

'''--- NDC/Elections/Activities.js ---
const { myVotes } = props;

const VoteRow = styled.a`
  text-decoration: none !important;
  padding: 10px 0;
  small {
    font-weight: 400;
    font-size: 12px;
  }
`;

const StyledLink = styled.a`
  color: black;
  text-decoration: none !important;
  font-size: 14px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const List = styled.div`
  overflow-y: scroll;
  height: 300px;
  width: 100%;
`;

const BPImg = styled.img`
  width: 32px;
  height: 32px;
  margin-right: 8px;
`;

const Tag = styled.div`
  margin-left: 10px;
`;

const AccountBlock = styled.div`
  width: 100%;
`;

const ImgContainer = styled.div`
  img {
    border-radius: 50%;
    height: 32px;
    max-height: "32px";
  }
`;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const housesMapping = {
  CouncilOfAdvisors:
    "https://bafkreidejnek5zzwlhd3lxnr7s3tvtrgul6jobfpikbs7zjkpuovxdz7je.ipfs.nftstorage.link",
  HouseOfMerit:
    "https://bafkreihoomeeaeyqerqftn3n7yb2jrnmqtpwgpsl3xpelek6qmly3qzob4.ipfs.nftstorage.link",
  TransparencyCommission:
    "https://bafkreihcog3rs2gj4wgwfixk6yqir7k3csyaqiqwcvm2gedlh6dlvr7ik4.ipfs.nftstorage.link",
  SetupPackage:
    "https://ipfs.near.social/ipfs/bafkreicljooupjpwmdlja2ocjg3sljvknlq5iriahqbqiwob635l2vszqa",
};

return (
  <List>
    {myVotes
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
      .map((vote) => (
        <VoteRow
          href={`https://explorer.mainnet.near.org/transactions/${vote.transaction_id}`}
          className="d-flex justify-content-between align-items-center"
        >
          <div className="d-flex align-items-center">
            <div>
              {vote.house !== "SetupPackage" ? (
                <Widget
                  src="mob.near/widget/ProfileImage"
                  props={{
                    accountId: vote.candidate,
                    imageClassName: "rounded-circle w-100 h-100",
                    style: { width: "32px", height: "32px", marginRight: 8 },
                  }}
                />
              ) : (
                <BPImg
                  className="rounded-circle"
                  src={housesMapping.SetupPackage}
                />
              )}
            </div>
            <AccountBlock className="d-flex flex-column">
              <StyledLink
                href={`https://near.org/near/widget/ProfilePage?accountId=${vote.candidate}`}
              >
                {vote.candidate}
              </StyledLink>

              <small className="text-secondary">
                {new Date(vote.timestamp).toLocaleDateString("en-US", {
                  day: "2-digit",
                  month: "short",
                })}
                &middot;
                {new Date(vote.timestamp).toLocaleTimeString("en-US", {
                  hour: "2-digit",
                })}
              </small>
            </AccountBlock>
          </div>
          <ImgContainer>
            <img src={housesMapping[vote.house]} />
          </ImgContainer>
        </VoteRow>
      ))}
  </List>
);

'''
'''--- NDC/Elections/BudgetPackage.js ---
const TextContainer = styled.div`
  overflow-y: scroll;
  overflow-x: hidden;
  max-height: 490px;
  width: 100%;
  padding: 15px;
  margin-top: 10px;
`;

const Budget = styled.div`
  text-align: justify;
  font-size: 14px;
  line-height: 20px;

  p {
    margin: 13px 0;
  }

  h3,
  h4 {
    margin: 17px 0;
  }

  h5,
  h6 {
    margin: 13px 0;
  }
`;

const Content = () => (
  <Budget>
    <h4 className="text-center">
      <b>House of Merit Setup Package for the Inaugural Congressional Term</b>
    </h4>
    <p>To the Trustees of the Community Treasury and the Voting Body,</p>
    <p>
      The Governance Working Group, on behalf of the House of Merit, presents
      the "Setup Package" as a formal request for funds for the upcoming
      Congressional term.
    </p>
    <p>
      <b>Background:</b>
    </p>
    <p>
      This package represents the collective effort of consultations and
      planning sessions with key stakeholders. With the dawn of the inaugural
      Congressional term, our primary objective is to ensure a strategic
      allocation of resources, emphasizing areas that align with our community's
      vision and growth. This process has been grounded in data, community
      feedback, and trend analysis to ensure that our priorities are both
      current and forward-looking.
    </p>
    <p>
      <b>Budget Overview:</b>
    </p>
    <p>
      The budgetary considerations are underpinned by three central pillars:
    </p>
    <ol>
      <li>
        <p>
          <b> Investment in Talent: Prioritizing </b>the acquisition and
          development of talent, recognizing that human capital is integral to
          our ecosystem's evolution.
        </p>
      </li>
      <li>
        <p>
          <b>Sustained Support: Allocating </b>resources to ongoing projects,
          especially those that have consistently demonstrated value and
          potential.
        </p>
      </li>
      <li>
        <p>
          <b>Innovation & Responsiveness: Allocating</b> funds for new
          initiatives, grounded in emerging trends identified from regular
          community feedback sessions and trend reports.
        </p>
      </li>
    </ol>
    <p>
      <b>Transparency Commitment:</b>
    </p>
    <p>
      The House of Merit commits to providing quarterly reports on fund
      utilization. These reports will be disseminated through the community's
      online portal and will be accessible to all members, ensuring transparency
      and providing an avenue for feedback.
    </p>
    <p>
      <b>Budget Review Process:</b>
    </p>
    <p>
      Every 3 months, a comprehensive budget review will be conducted by a panel
      consisting of members from the Eco Strategy & Advisory Panel. This review
      aims to assess the efficacy of the fund utilization and make necessary
      adjustments based on the ecosystem's performance, needs, and feedback.
    </p>
    <p>
      <b>Closing Note:</b>
    </p>
    <p>
      The allocation of these funds is not merely a procedural task but a
      collective responsibility that will shape our community's trajectory. We
      strongly believe in collaborative decision-making and, hence, request your
      thorough review and ratification. Your feedback and approval will ensure
      we move forward in alignment with our community's aspirations.
    </p>
    <p>Thank you for your diligent attention.</p>
    <p>Warm regards,</p>
    <p>The Governance Working Group, On Behalf of the House of Merit</p>
    <p>
      <hr />
    </p>
    <h4>
      <b>Budget Breakdown</b>
    </h4>
    <ol>
      <li>
        <h5>Budget and Cap Definitions</h5>
        <h6>
          <b>Congressional Term Duration : 6 Months</b>
        </h6>
        <ul>
          <li>
            The duration for each Congressional term is set at 6 months. This
            standardized period ensures a predictable timeframe for both
            planning and executing various initiatives and projects.
          </li>
        </ul>
        <h6>
          <b>Total Budget for the Congressional Term: $ 3M USD</b>
        </h6>
        <ul>
          <li>
            The proposed budget for the entire 6-month period is $3M USD. This
            cap is designed to encourage a focused and strategic allocation of
            resources, ensuring optimal impact.
          </li>
        </ul>
        <h6>
          <b>Individual Allocation Cap: $100k Maximum per Month</b>
        </h6>
        <ul>
          <li>
            Any single recipient can be allocated a maximum of $100k USD per
            month. This cap ensures that significant projects can receive ample
            funding while maintaining fiscal prudence.
          </li>
        </ul>
        <h6>
          <b>Unused Budget Provisions</b>
        </h6>
        <ul>
          <li>
            Any unused budget from a specific month will be rolled over to
            subsequent months, ensuring resources are optimally and flexibly
            utilized.
          </li>
        </ul>
        <h6>
          <b>Additional Treasury Funds</b>
        </h6>
        <ul>
          <li>
            It's crucial to note that any supplementary funds added to the
            community treasury will not automatically adjust the budget cap
            defined in this Setup Package. This policy ensures disciplined
            financial management independent of treasury influxes.
          </li>
        </ul>
      </li>
      <li>
        <h5>
          <b>Regular Budget Reviews</b>
        </h5>
        <h6>
          <b>Quarterly Assessments</b>
        </h6>
        <ul>
          <li>
            Every three months, a mandatory budget review will be undertaken.
            This review's purpose is to make data-driven adjustments to budget
            allocations, reflecting our community's changing needs and
            priorities. All findings and subsequent actions will be
            transparently communicated to the community.
          </li>
        </ul>
      </li>
      <li>
        <h5>
          <b>Definition of Big Budget Items</b>
        </h5>
        <ul>
          <li>
            A Big Budget Item is any single expenditure proposal that exceeds
            $75k. Such expenditures will undergo rigorous review to ensure
            alignment with the community's goals and the highest ROI.
          </li>
        </ul>
      </li>
      <li>
        <h5>
          <b>Recurring Budget Items</b>
        </h5>
        <ul>
          <li>
            A Recurring Budget Item refers to any monthly expenditure that
            doesn't exceed the 6-month term duration. For a project to be
            eligible for this, it must have previously secured approval for at
            least one budget request and must have met its Key Performance
            Indicators (KPIs).
          </li>
        </ul>
      </li>
      <li>
        <h5>
          <b>Detailed Budget Allocation Template to be filled in by the HoM</b>
        </h5>
        <p>
          The "Setup Package" requires the House of Merit (HoM) to provide a
          clear and detailed budget allocation, ensuring transparency and
          alignment with our strategic goals. The Council of Advisors (CoA) sets
          the overarching direction, while the HoM refines it into actionable
          financial plans.
        </p>
        <h6>
          <b>Guidance for HoM's Budget Allocation:</b>
        </h6>
        <ol>
          <li>
            <p>
              <b>Alignment with CoA: </b> Ensure all allocations align with the
              direction given by the Council of Advisors.
            </p>
          </li>
          <li>
            <p>
              <b>Main Categories vs. Subcategories:</b>
              <ul>
                <li>
                  Main Categories: Broad areas of focus or investment for the
                  term.
                </li>
                <li>
                  Subcategories: Specific areas within each main category.
                </li>
              </ul>
            </p>
          </li>
          <li>
            <p>
              <b>Criteria for Allocation:</b>
              <ul>
                <li>
                  Impact: Prioritize allocations that drive growth and
                  engagement.
                </li>
                <li>
                  Relevance: Address current needs and anticipate future trends.
                </li>
                <li>
                  Accountability: Every allocation should have clear
                  justification.
                </li>
              </ul>
            </p>
          </li>
        </ol>
      </li>
    </ol>
    <h6>
      <b>Budget Breakdown Template:</b>
    </h6>
    <p>
      The HoM should use the template below to detail the budget, providing
      clarity on the planned allocations for the term.
    </p>
    <img
      className="w-100"
      src="https://bafkreibqnu2m5izw3sf47462fqmp2ve4tfei67tzldbsuzcmpifrbossc4.ipfs.nftstorage.link/"
    />
    <p>
      It's vital for the community to have a clear understanding of how funds
      are intended to be used. This structured approach ensures the HoM's budget
      decisions align with the community's values and the strategic direction
      set by the CoA.
    </p>

    <h5>
      <b>Template: Budget Breakdown</b>
    </h5>
    <img
      className="w-100"
      src="https://bafybeiesmrpom3hf5s4h5w6syaxvet7cthg5egab2ocpimfzr2gpfubgwa.ipfs.nftstorage.link/"
    />
  </Budget>
);

return (
  <>
    <a href="https://bafybeifjibo3ygatrlpszzhqososzw3rlitrgdudkrc6fceo3musandgfm.ipfs.nftstorage.link/">
      View Budget Package
      <i className="ml-2 bi bi-box-arrow-up-right" />
    </a>
    <TextContainer>
      <Content />
    </TextContainer>
  </>
);

'''
'''--- NDC/Elections/Candidates.js ---
const {
  electionContract,
  registryContract,
  ndcOrganization,
  myVotes,
  ids,
  id,
  typ,
  ref_link,
  quorum,
  seats,
  voters_num,
  result,
  iahToken,
  candidateFilterId,
  blacklisted,
  greylisted,
  isBonded,
  hasPolicyNFT,
  hasIVotedNFT,
  electionStatus,
} = props;

const widgets = {
  voters: "election.ndctools.near/widget/NDC.Elections.Voters",
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  modal: "nomination.ndctools.near/widget/NDC.Modal",
  verifyHuman: "nomination.ndctools.near/widget/NDC.VerifyHuman",
  budget: "election.ndctools.near/widget/NDC.Elections.BudgetPackage",
  castVotes: "election.ndctools.near/widget/NDC.Elections.CastVotes",
};

const LocalStorageKeys = {
  Bookmarks: "Bookmarks",
};

const apiKey = "36f2b87a-7ee6-40d8-80b9-5e68e587a5b5";
const QUERY_API_ENDPOINT = "https://graph.mintbase.xyz/mainnet";
const POLICY_HASH =
  "99c19c7a4ea920bb2ae2c5a214b35f6c0393e518e7637b2d6dccf365dd62a047";
const FAIR_POLICY_DOC =
  "https://bafkreidwdxocdkfsv6srynw7ipnogfuw76fzncmxd5jv7furbsn5cp4bz4.ipfs.nftstorage.link";
const FAIR_POLICY_NFT =
  "https://ipfs.near.social/ipfs/bafkreiabsu7xhumhim4gxj5h7umopc3b5ekppeofwwizsf5loqs2vcntpm";
const I_VOTED_NFT =
  "https://ipfs.near.social/ipfs/bafkreiewiq4puwmcu7ciztsfqvmpl3gsumfgsm5r22g24abiynoeghsyey";
const SHARE_LINK =
  "https://twitter.com/intent/tweet?text=I%20minted%20%E2%80%9CI%20Voted%E2%80%9D%20NFT%20during%20NDC%20Elections!%20%F0%9F%8E%89%0A%0ACheck%20election%20here%3A%20https%3A//near.org/election.ndctools.near/widget/NDC.Elections.Main%0A%0A%23NDC%20%23NEAR%20https://pbs.twimg.com/media/F5gdVfyXYAECcjh?format=jpg&name=large";
const MINT_VOTING_POLICY_NFT = `https://shard.dog/fairvoting?ids=[${ids}]&accountId=${context.accountId}`;
const MINT_I_VOTED_NFT = `https://shard.dog/ivoted?ids=[${ids}]&accountId=${context.accountId}`;
const BLACKLIST_VERIFY_LINK =
  "https://docs.google.com/forms/d/e/1FAIpQLSdQYxiUcxpiCDVKnN55Q7T2fnUPt0VjRdzo46qEkV7ub5mWFw/viewform";
const GREYLIST_VERIFY_LINK =
  "https://airtable.com/appgHJzUuw1Kb2GJV/shrCdvjmWMzwaMEj8";
const MIN_BOND = 3; //3
const MAX_BOND = 300; //300;

const nearIdsWithName = props.result.map(([candidate, _vote]) => {
  return [candidate, _vote, Social.getr(`${candidate}/profile`)?.name];
});

const Container = styled.div`
  position: relative:
  font-family: Avenir;
  font-size: 16px;
`;

const StyledLink = styled.a`
  color: inherit !important;
  width: 215px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 14px;
  padding-top: 2px;

  @media (max-width: 400px) {
    width: 120px;
  }
`;

const UserIcons = styled.div`
  width: 20px;
  color: ${(props) => (props.selected && !props.winnerId ? "#fff" : "black")};
`;

const CandidateItemRow = styled.div`
  @media (max-width: 400px) {
    padding: 0 10px !important;
  }

  padding: 0 20px;
  height: 48px;
  border-radius: 12px;
  margin-bottom: 8px;
  border: 1px solid;
  background: ${(props) =>
    props.winnerId
      ? "rgb(206 233 207)"
      : props.disqualified
      ? "#ccc"
      : props.selected
      ? "#4aa6ee"
      : props.filtered
      ? "#d4e4f461"
      : "#F8F8F9"};
  border-color: ${(props) =>
    props.winnerId
      ? "rgb(137 201 139)"
      : props.selected || props.filtered
      ? "#4aa6ee"
      : "#F8F8F9"};
      color: ${(props) =>
        props.selected && !props.winnerId ? "#fff" : "inherit"};

  small span {
    color: ${(props) =>
      props.selected && !props.winnerId ? "#fff" : "inherit"};
  }

  &:hover {
    background: ${(props) =>
      props.winnerId
        ? "rgb(206 233 207)"
        : props.selected
        ? "#4aa6ee"
        : "#d4e4f461"};
  }

  .form-check-input:checked {
    background-color: ${(props) =>
      props.winnerId ? "#239f28" : "#0d6efd"} !important;
    border-color: ${(props) =>
      props.winnerId ? "#239f28" : "#0d6efd"} !important;
`;

const Candidates = styled.div`
  cursor: pointer;
`;

const Bookmark = styled.div`
  width: 40px;
  cursor: pointer;

  #bookmark.bi-bookmark-fill {
    color: ${(props) =>
      props.winnerId ? "#198754" : props.selected ? "#fff" : "#4498E0"};
  }

  @media (max-width: 400px) {
    width: auto;
    margin-right: 15px;
  }
`;

const BookmarkFilter = styled.div`
  width: 90px;
  cursor: pointer;

  @media (max-width: 400px) {
    width: auto;
    margin-right: 15px;
  }
`;

const Expand = styled.div`
  width: 35px;
  cursor: pointer;

  @media (max-width: 400px) {
    width: 20px;
    margin-right: 10px;
  }
`;

const ExpandFilter = styled.div`
  width: 35px;
  cursor: pointer;

  @media (max-width: 400px) {
    width: 0px;
    margin-right: 10px;
  }
`;

const Votes = styled.div`
  width: 15px;
`;

const VotesFilter = styled.div`
  width: 80px;
  @media (max-width: 400px) {
    width: 45px;
  }
`;

const Nomination = styled.div`
  width: 105px;

  @media (max-width: 400px) {
    width: 70px;
  }
`;

const NominationLink = styled.div`
  display: block;

  @media (max-width: 400px) {
    display: none;
  }
`;

const InfoRow = styled.div`
  gap: 45px;

  @media (max-width: 768px) {
    gap: 35px;
  }

  @media (max-width: 400px) {
    gap: 20px;
  }
`;

const NominationLinkMobile = styled.div`
  display: none;

  @media (max-width: 400px) {
    display: block;
  }
`;

const FilterRow = styled.div`
  padding: 15px 0px;
  font-size: 13px;
`;

const CandidatesContainer = styled.div`
  overflow-y: scroll;
  max-height: 490px;
  width: 100%;
`;

const StickyContainer = styled.div`
  position: "fixed",
  left: 0;
  bottom: 0;
  height: 60px;
  width: 100%;
`;

const Icon = styled.i`
  font-size: 14px;
`;

const Winner = styled.i`
  margin-left: 10px;
  font-size: 14px;
`;

const Section = styled.div`
  gap: 8px;
  margin-bottom: 10px;
`;

const VotingAlert = styled.small`
  color: rgb(206 43 112);
  font-weight: 600;
  text-aligh: center;
`;

const GraylistedAlert = styled.div`
  background: rgb(236 236 236);
`;

const Rules = styled.div`
  overflow-y: scroll;
  max-height: 300px;
`;

const Rule = styled.div`
  color: #f29bc0;
`;

const currentUser = context.accountId;

const housesMapping = {
  CouncilOfAdvisors: "Council Of Advisors",
  HouseOfMerit: "House of Merit",
  TransparencyCommission: "Transparency Commission",
  SetupPackage: "Budget Package",
};

const alreadyVoted = (candidateId) =>
  myVotes.some((voter) => voter.candidate === candidateId);

const alreadyVotedForHouse = () => myVotes.some((voter) => voter.house === typ);

const filteredCandidates = () => {
  let candidates = result;

  if (state.filterOption === "bookmark")
    candidates = state.filter.bookmark
      ? state.candidates.filter(([candidateId, _votes], _index) =>
          state.bookmarked.includes(candidateId)
        )
      : result;
  if (state.filterOption === "candidates")
    candidates = candidates.sort((a, b) =>
      state.filter.candidates
        ? a[0].localeCompare(b[0])
        : b[0].localeCompare(a[0])
    );
  if (state.filterOption === "votes")
    candidates = candidates.sort((a, b) =>
      state.filter.votes ? b[1] - a[1] : a[1] - b[1]
    );
  if (state.filterOption === "my_votes")
    candidates = state.filter.my_votes
      ? state.candidates.filter(([candidateId, _votes], _index) =>
          alreadyVoted(candidateId)
        )
      : result;

  if (candidateFilterId) {
    if (Array.isArray(candidateFilterId)) {
      const onlyFiltered = nearIdsWithName.filter(
        ([candidate, _v, name], _i) =>
          candidateFilterId.includes(name) ||
          candidateFilterId.includes(candidate)
      );
      const restCandidates = nearIdsWithName.filter(
        ([candidate, _v, _n], _i) =>
          !onlyFiltered.map((u) => u[0]).includes(candidate)
      );
      candidates = [...onlyFiltered, ...restCandidates];
    } else {
      candidates = nearIdsWithName.filter(
        ([candidate, _v, name], _i) =>
          name.toLowerCase().includes(candidateFilterId.toLowerCase()) ||
          candidate.toLowerCase().includes(candidateFilterId.toLowerCase())
      );
    }
  }
  return candidates;
};

const handleSelectCandidate = (candidateId) => {
  if (!state.acceptedPolicy) {
    State.update({ showToSModal: true });
    return;
  }
  if (!!state.acceptedPolicy && hasPolicyNFT === false) {
    State.update({ showMintPolicyModal: true });
    return;
  }

  const selectedItems = state.selectedCandidates.includes(candidateId)
    ? state.selectedCandidates.filter((el) => el !== candidateId)
    : [...state.selectedCandidates, candidateId];

  const currentVotes = seats - myVotesForHouse().length - selectedItems.length;
  if (currentVotes < 0) return;

  State.update({
    selectedCandidates: selectedItems,
    availableVotes: currentVotes,
    reload: false,
  });

  return true;
};

const handleCast = () =>
  !!state.acceptedPolicy && hasPolicyNFT
    ? State.update({ bountyProgramModal: true })
    : State.update({ showToSModal: true });

const handleResetSelection = () => {
  State.update({
    selectedCandidates: [],
    availableVotes: seats - myVotesForHouse().length,
  });
};

const selectedBookmarks = (candidateId) => {
  let selectedItems = state.bookmarked.includes(candidateId)
    ? state.bookmarked.filter((el) => el !== candidateId)
    : [...state.bookmarked, candidateId];
  return [...new Set(selectedItems)];
};

const handleBookmarkCandidate = (candidateId) => {
  let selectedItems = selectedBookmarks(candidateId);
  Storage.set(LocalStorageKeys.Bookmarks + id, JSON.stringify(selectedItems));
  State.update({ bookmarked: selectedItems });
};

const handleVote = () => {
  const bondDiff = greylisted ? MAX_BOND - isBonded : MIN_BOND - isBonded;

  const voteFunc = {
    contractName: electionContract,
    methodName: "vote",
    args: { prop_id: props.id, vote: state.selectedCandidates },
    gas: "110000000000000",
  };

  const bondFunc = {
    contractName: registryContract,
    methodName: "is_human_call",
    args: { ctr: electionContract, function: "bond", payload: "{}" },
    gas: "110000000000000",
    deposit: bondDiff * 1000000000000000000000000,
  };
  const arr = bondDiff <= 0 ? [voteFunc] : [bondFunc, voteFunc];

  Near.call(arr);
  State.update({
    bountyProgramModal: false,
    reload: true,
  });
};

const handleAcceptToS = () => {
  Near.call(
    electionContract,
    "accept_fair_voting_policy",
    { policy: POLICY_HASH },
    70000000000000,
    1000000000000000000000
  );
  State.update({
    showToSModal: false,
    reload: true,
  });
};

const handleFilter = (option) => {
  let filterOption = "";
  let filter = {};

  if (option.bookmark) {
    filterOption = "bookmark";
    filter = { bookmark: !state.filter.bookmark };
  }
  if (option.candidates) {
    filterOption = "candidates";
    filter = { candidates: !state.filter.candidates };
  }
  if (option.votes) {
    filterOption = "votes";
    filter = { votes: !state.filter.votes };
  }
  if (option.my_votes) {
    filterOption = "my_votes";
    filter = { my_votes: !state.filter.my_votes };
  }

  State.update({ filterOption, filter, reload: true });
};

const handleStateTransition = () => {
  if (state.filterOption !== "") return;

  switch (electionStatus) {
    case "ONGOING":
      if (!!state.acceptedPolicy)
        State.update({
          showMintPolicyModal: hasPolicyNFT === false,
          showMintIVotedModal:
            state.hasVotedOnAllProposals &&
            hasIVotedNFT === false &&
            hasPolicyNFT === true,
        });
      break;
    case "COOLDOWN":
      State.update({
        showReviewModal: true,
      });
      break;
    case "ENDED":
      State.update({ winnerIds });
      break;
    default:
      0;
  }
};

function loadSocialDBData() {
  let _bookmarked = Social.index(currentUser, `${ndcOrganization}/${typ}`);
  const bookmarked =
    _bookmarked && _bookmarked[_bookmarked.length - 1]
      ? _bookmarked[_bookmarked.length - 1].value
      : [];
  const LSItems = Storage.get(LocalStorageKeys.Bookmarks + id)
    ? JSON.parse(Storage.get(LocalStorageKeys.Bookmarks + id))
    : [];

  State.update({ bookmarked: bookmarked.concat(LSItems) });
}

function fetchGraphQL(series) {
  return asyncFetch(QUERY_API_ENDPOINT, {
    method: "POST",
    headers: { "mb-api-key": "anon", "x-hasura-role": electionContract },
    body: JSON.stringify({
      query: `
        query MyQuery {
          nft_tokens(
            where: {
              nft_contract_id: {
                _eq: "mint.sharddog.near"
              },
              token_id: {_regex: "^${series}:"},
              owner: {_eq: "${currentUser}"}}
            order_by: {minted_timestamp: asc}
          ) {
            last_transfer_timestamp
          }
        }
      `,
      variables: {},
      operationName: "MyQuery",
    }),
  });
}

const processNFTAvailability = (result, key) => {
  if (result.status === 200) {
    let data = result.body.data;
    if (data) {
      const tokens = data.nft_tokens;

      State.update({
        [key]: tokens.length > 0 && tokens[0].last_transfer_timestamp === null,
      });
    }
  }
};

const myVotesForHouse = () => myVotes.filter((vote) => vote.house === typ);
const isVisible = () =>
  myVotesForHouse().length > 0 || state.winnerIds.length > 0;

State.init({
  reload: true,
  loading: false,
  acceptedPolicy: false,
  hasVotedOnAllProposals: false,
  availableVotes: seats - myVotesForHouse().length,
  selected: null,
  bookmarked: [],
  tosAgreementInput: false,
  tosAgreement: false,
  selectedCandidates: [],
  voters: [],
  candidates: result,
  filter: {
    bookmark: false,
    candidates: false,
    votes: false,
    my_votes: false,
  },
  filterOption: "",
  showToSModal: false,
  bountyProgramModal: false,
  showReviewModal: false,
  blacklistedModal: true,

  showMintPolicyModal: false,
  showMintIVotedModal: false,
  hasPolicyNFT: null,
  hasIVotedNFT: null,
  winnerIds: [],
  disqualifiedIds: [],
});

const winnerIds = Near.view(electionContract, "winners_by_proposal", {
  prop_id: props.id,
});

const disqualifiedIds = Near.view(
  electionContract,
  "disqualified_candidates",
  {}
);

if (state.reload) {
  const hasVotedOnAllProposals = Near.view(
    electionContract,
    "has_voted_on_all_proposals",
    { user: currentUser }
  );

  const acceptedPolicy = Near.view(electionContract, "accepted_policy", {
    user: currentUser,
  });

  State.update({
    acceptedPolicy: acceptedPolicy === POLICY_HASH ?? acceptedPolicy,
    winnerIds: winnerIds ?? state.winnerIds,
    disqualifiedIds: disqualifiedIds ?? state.disqualifiedIds,
    candidates: filteredCandidates(),
    hasVotedOnAllProposals,
  });

  handleStateTransition();
  loadSocialDBData();
}

const UserLink = ({ title, src, selected, winnerId }) => (
  <div className="d-flex mr-3">
    <StyledLink href={src} target="_blank">
      <Widget
        src="mob.near/widget/Profile.ShortInlineBlock"
        props={{ accountId: title, tooltip: false }}
      />
    </StyledLink>
    <UserIcons
      selected={selected}
      winnerId={winnerId}
      className="d-flex align-items-center"
    >
      <Icon className="bi bi-arrow-up-right" />
      {state.winnerIds.includes(title) && (
        <Winner className="bi bi-trophy-fill p-1 text-success" />
      )}
    </UserIcons>
  </div>
);

const Loader = () => (
  <span
    className="spinner-grow spinner-grow-sm me-1"
    role="status"
    aria-hidden="true"
  />
);

const CandidateItem = ({ candidateId, votes }) => (
  <div>
    <CandidateItemRow
      className="d-flex align-items-center justify-content-between"
      selected={state.selected === candidateId}
      filtered={candidateFilterId.includes(candidateId)}
      disqualified={state.disqualifiedIds.includes(candidateId)}
      winnerId={state.winnerIds.includes(candidateId)}
    >
      <div className="d-flex w-100 align-items-center">
        {isVisible() && (
          <Expand>
            <i
              className={`${
                state.selected === candidateId
                  ? "bi bi-chevron-down"
                  : "bi bi-chevron-right"
              }`}
              onClick={(e) =>
                State.update({
                  selected: state.selected === candidateId ? null : candidateId,
                  reload: false,
                })
              }
            />
          </Expand>
        )}

        {iahToken && (
          <Bookmark
            selected={state.selected === candidateId}
            winnerId={state.winnerIds.includes(candidateId)}
          >
            {state.loading === candidateId ? (
              <Loader />
            ) : (
              <i
                id="bookmark"
                onClick={() => handleBookmarkCandidate(candidateId)}
                className={`bi ${
                  state.bookmarked.includes(candidateId)
                    ? "bi-bookmark-fill"
                    : "bi-bookmark"
                }`}
              />
            )}
          </Bookmark>
        )}
        <div className="d-flex align-items-center">
          <div className="d-flex justify-items-center">
            <UserLink
              selected={state.selected === candidateId}
              winnerId={state.winnerIds.includes(candidateId)}
              src={`https://near.org/near/widget/ProfilePage?accountId=${candidateId}`}
              title={candidateId}
            />
          </div>
        </div>
      </div>
      <InfoRow
        className={`d-flex w-100 align-items-center ${
          iahToken ? "justify-content-center" : "justify-content-end"
        }`}
      >
        <NominationLink>
          <Widget
            src={widgets.styledComponents}
            props={{
              Link: {
                size: "sm",
                className: state.winnerIds.includes(candidateId)
                  ? "secondary success"
                  : "secondary dark",
                text: "Nomination",
                icon: <i className="bi bi-box-arrow-up-right" />,
                href: `https://near.org/nomination.ndctools.near/widget/NDC.Nomination.Candidate.Page?house=${typ}&accountId=${candidateId}`,
                inverse: state.selected === candidateId,
              },
            }}
          />
        </NominationLink>
        <NominationLinkMobile>
          <Widget
            src={widgets.styledComponents}
            props={{
              Link: {
                size: "sm",
                className: state.winnerIds.includes(candidateId)
                  ? "secondary success"
                  : "secondary dark",
                text: "",
                icon: <i className="bi bi-box-arrow-up-right" />,
                href: `https://near.org/nomination.ndctools.near/widget/NDC.Nomination.Candidate.Page?house=HouseOfMerit&accountId=${candidateId}`,
                inverse: state.selected === candidateId,
              },
            }}
          />
        </NominationLinkMobile>
        {isVisible() && <Votes>{votes}</Votes>}
        {iahToken && (
          <Votes>
            <input
              id="input"
              disabled={
                alreadyVotedForHouse() ||
                blacklisted ||
                electionStatus !== "ONGOING"
              }
              onClick={() => handleSelectCandidate(candidateId)}
              className="form-check-input"
              type="checkbox"
              checked={
                state.selectedCandidates.includes(candidateId) ||
                alreadyVoted(candidateId)
              }
            />
          </Votes>
        )}
      </InfoRow>
    </CandidateItemRow>
    {state.selected === candidateId && isVisible() && (
      <Widget
        src={widgets.voters}
        props={{ candidateId, electionContract, iahToken, ids }}
      />
    )}
  </div>
);

const Filters = () => (
  <FilterRow className="d-flex align-items-center justify-content-between">
    <div className="d-flex align-items-center w-100">
      {isVisible() && <ExpandFilter />}
      {iahToken && (
        <BookmarkFilter
          role="button"
          className="text-secondary"
          onClick={() => handleFilter({ bookmark: true })}
        >
          <small>Bookmark</small>
          <i
            className={`bi ${
              state.filter.bookmark ? "bi-funnel-fill" : "bi-funnel"
            }`}
          />
        </BookmarkFilter>
      )}
      <Candidates
        className="text-secondary"
        onClick={() => handleFilter({ candidates: true })}
      >
        <small>Candidate</small>
        <i
          className={`bi ${
            state.filter.candidates ? "bi-arrow-down" : "bi-arrow-up"
          }`}
        />
      </Candidates>
    </div>
    <div className="d-flex w-100 align-items-center justify-content-end gap-1">
      <Nomination className="text-secondary text-start text-md-start">
        <small>Nomination</small>
      </Nomination>
      {isVisible() && (
        <VotesFilter
          role="button"
          className="text-secondary d-flex align-items-center"
          onClick={() => handleFilter({ votes: true })}
        >
          <small>Total votes</small>
          <i
            className={`bi ${
              state.filter.votes ? "bi-arrow-down" : "bi-arrow-up"
            }`}
          />
        </VotesFilter>
      )}
      {iahToken && (
        <VotesFilter
          role="button"
          className="text-secondary d-flex align-items-center"
          onClick={() => handleFilter({ my_votes: true })}
        >
          <small>My votes</small>
          <i
            className={`bi ${
              state.filter.my_votes ? "bi-funnel-fill" : "bi-funnel"
            }`}
          />
        </VotesFilter>
      )}
    </div>
  </FilterRow>
);

const ALink = ({ title, href }) => (
  <a href={href} target={"_blank"} rel={"noopener"}>
    {title}
  </a>
);

return (
  <>
    {state.showReviewModal && (
      <Widget
        src={widgets.modal}
        props={{
          title: (
            <div>
              <img src="https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/" />
              <div className="mt-4">Election results are under review</div>
            </div>
          ),
          description:
            "Election results are under review by Election integrity Councils. Please wait it may take a few days",
          Button: {
            title: "I understand",
            onCancel: () =>
              State.update({ showReviewModal: false, reload: false }),
            onSubmit: () =>
              State.update({ showReviewModal: false, reload: false }),
          },
        }}
      />
    )}
    {blacklisted && state.blacklistedModal && (
      <Widget
        src={widgets.modal}
        props={{
          title: (
            <div>
              <img src="https://bafkreignre4f27jsdgxt25pgnenjyqfw55pkhtnu5gkv7vhex3ttv45pbe.ipfs.nftstorage.link" />
              <div className="mt-4">You are on the election blacklist. </div>
            </div>
          ),
          description: (
            <>
              The community has voted to block blacklisted accounts from voting
              in the NDC general election. You have been blacklisted due
              previously violating the
              <ALink title="Fair Voting Policy." href={FAIR_POLICY_DOC} />.
            </>
          ),
          Button: {
            title: "I understand",
            onCancel: () => State.update({ blacklistedModal: false }),
            onSubmit: () => State.update({ blacklistedModal: false }),
          },
          SecondaryButton: {
            type: "Link",
            title: "Appeal the Decision",
            href: BLACKLIST_VERIFY_LINK,
          },
        }}
      />
    )}
    {state.showToSModal && (
      <Widget
        src={widgets.modal}
        props={{
          title: (
            <div>
              <img src="https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/" />
              <div className="mt-4">
                Before you vote, please review the Fair Voting Policy.
              </div>
            </div>
          ),
          description: (
            <>
              <div className="mt-4">
                Please make sure to read and understand the{" "}
                <ALink title="Fair Voting Policy." href={FAIR_POLICY_DOC} />
                which outlines the responsibilities of each voter.
              </div>
            </>
          ),
          content: (
            <Section className="d-flex justify-content-center w-100 my-4">
              <input
                type="checkbox"
                className="form-check-input"
                checked={state.tosAgreementInput}
                onClick={() =>
                  State.update({ tosAgreementInput: !state.tosAgreementInput })
                }
              />
              I agree with{" "}
              <ALink title="Fair Voting Policy." href={FAIR_POLICY_DOC} />
            </Section>
          ),
          Button: {
            title: state.loading ? (
              <Loader />
            ) : (
              <>Agree to Fair Voting Policy</>
            ),
            disabled: !state.tosAgreementInput,
            onCancel: () => State.update({ showToSModal: false }),
            onSubmit: handleAcceptToS,
          },
        }}
      />
    )}
    {state.showMintPolicyModal && (
      <Widget
        src={widgets.modal}
        props={{
          title: "Before you vote, mint Fair Voting Policy NFT.",
          description: (
            <>
              <img width={300} src={FAIR_POLICY_NFT} />
              <div className="mt-4 mb-4">
                Please make sure to read and understand the{" "}
                <ALink title="Fair Voting Policy." href={FAIR_POLICY_DOC} />
                which outlines the responsibilities of each voter.
              </div>
            </>
          ),
          Button: {
            type: "Link",
            title: "Mint Fair Voting NFT",
            onCancel: () =>
              State.update({ showMintPolicyModal: false, reload: false }),
            href: MINT_VOTING_POLICY_NFT,
            doNotOpenNew: true,
          },
        }}
      />
    )}
    {state.bountyProgramModal && (
      <Widget
        src={widgets.modal}
        props={{
          title: (
            <div>
              <img src="https://bafkreidmuyeawyqduaotd27jozw5czdrm7t7w5hlcx5nfjzjjxxzvyhkyi.ipfs.nftstorage.link/" />
              <div className="mt-4">
                {greylisted ? (
                  <>Additional Verification Required.</>
                ) : (
                  <>You are about to cast your votes.</>
                )}
              </div>
            </div>
          ),
          description: (
            <Rules>
              <Rule className="d-flex gap-2">
                <h3>1</h3>
                <p className="text-secondary text-start">
                  Don't sell your vote and risk being banned from governance.
                  Instead report bad actors and claim a bounty up to 2,500 NEAR.
                  Learn more about{" "}
                  <ALink
                    title="Whistleblower Bounty Program"
                    href="https://medium.com/@neardigitalcollective/introducing-ndc-whistleblower-bounty-program-d4fe1b9fc5a0"
                  />
                </p>
              </Rule>
              <Rule className="d-flex gap-2">
                <h3>2</h3>
                <p className="text-secondary text-start">
                  A bond of <b>{greylisted ? MAX_BOND : MIN_BOND} NEAR</b> is
                  required to vote. If you are a fair voter, this bond will
                  returned to you after the election results are reviewed and
                  rectified.
                </p>
              </Rule>
              <Rule className="d-flex gap-2">
                <h3>3</h3>
                <p className="text-secondary text-start">
                  You votes <b>cannot</b> be changed. You can only cast{" "}
                  <b>once</b> per house.
                </p>
              </Rule>
              {greylisted && (
                <GraylistedAlert className="p-3 mb-4 rounded">
                  <b>Voters without reputation need to be verified</b> by the
                  Election Integrity Council or place a substantial bond to
                  vote. If you are a fair voter, this bond will be returned to
                  you once the election results are reviewed and ratified.
                </GraylistedAlert>
              )}
            </Rules>
          ),
          Button: {
            title: `Cast ${
              state.selectedCandidates.length || ""
            } / ${seats} Vote${
              state.selectedCandidates.length === 1 ? "" : "s"
            }`,
            disabled:
              state.selectedCandidates.length === 0 || alreadyVotedForHouse(),
            onCancel: () =>
              State.update({ bountyProgramModal: false, reload: false }),
            onSubmit: handleVote,
          },
          SecondaryButton: {
            type: greylisted ? "Link" : "Button",
            title: greylisted ? "Apply to Verify" : "Cancel",
            href: GREYLIST_VERIFY_LINK,
            onSubmit: () =>
              State.update({ bountyProgramModal: false, reload: false }),
          },
          footer: state.selectedCandidates.length < seats && (
            <div class="w-100 pt-2 text-center">
              <VotingAlert>
                <i class="bi bi-exclamation-circle mr-2" />
                Warning! You'll loose{" "}
                {state.availableVotes -
                  (state.selectedCandidates.length || 0)}{" "}
                votes and don't have ability to vote again in current house!
              </VotingAlert>
            </div>
          ),
        }}
      />
    )}
    {state.showMintIVotedModal && (
      <Widget
        src={widgets.modal}
        props={{
          title: "Congratulations! Mint “I Voted” NFT",
          description: (
            <div>
              <img width={300} src={I_VOTED_NFT} />
              <div className="mt-4 mb-4">
                Celebrate voting in the inaugural NEAR election and mint your “I
                Voted” NFT! 🎉
              </div>
            </div>
          ),
          Button: {
            type: "Link",
            title: "Mint I voted NFT",
            onCancel: () =>
              State.update({ showMintIVotedModal: false, reload: false }),
            href: MINT_I_VOTED_NFT,
            doNotOpenNew: true,
          },
          SecondaryButton: {
            type: "Link",
            title: "Tweet I Voted",
            href: SHARE_LINK,
          },
        }}
      />
    )}

    <Container>
      <h2>{housesMapping[typ]}</h2>
      {typ === "SetupPackage" ? (
        <Widget src={widgets.budget} />
      ) : (
        <>
          <small className="text-secondary">{result.length} Candidates</small>
          {state.candidates.length > 0 ? (
            <>
              <Filters />
              <CandidatesContainer>
                {state.candidates.map(([candidateId, votes], index) => (
                  <CandidateItem
                    candidateId={candidateId}
                    votes={votes}
                    key={index}
                  />
                ))}
              </CandidatesContainer>
              {candidateFilterId && (
                <div className="d-flex p-2 justify-content-center align-items-center">
                  <Widget
                    src={widgets.styledComponents}
                    props={{
                      Link: {
                        className: "primary dark",
                        text: "Show All Candidates",
                        doNotOpenNew: true,
                        href: `https://near.org/election.ndctools.near/widget/NDC.Elections.Main?house=${id}`,
                      },
                    }}
                  />
                </div>
              )}
            </>
          ) : (
            <div className="d-flex p-5 justify-content-center align-items-center flex-column gap-2">
              <span>No candidates found.</span>
              {state.filterOption && (
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      className: "secondary dark",
                      text: "Clear Filters",
                      onClick: () =>
                        State.update({
                          filterOption: "",
                          filter: {
                            bookmark: false,
                            candidates: false,
                            votes: false,
                            my_votes: false,
                          },
                        }),
                    },
                  }}
                />
              )}
            </div>
          )}
        </>
      )}
      <div>
        {iahToken && (
          <Widget
            src={widgets.castVotes}
            props={{
              ...props,
              ...state,
              handleCast,
              handleVote,
              handleResetSelection,
              handleSelectCandidate,
            }}
          />
        )}
      </div>
    </Container>
  </>
);

'''
'''--- NDC/Elections/CastVotes.js ---
const {
  winnerIds,
  typ,
  result,
  seats,
  myVotes,
  blacklisted,
  selectedCandidates,
  handleCast,
  handleSelectCandidate,
  handleResetSelection,
  handleVote,
} = props;

const widgets = {
  voters: "election.ndctools.near/widget/NDC.Elections.Voters",
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  modal: "nomination.ndctools.near/widget/NDC.Modal",
  verifyHuman: "nomination.ndctools.near/widget/NDC.VerifyHuman",
  budget: "election.ndctools.near/widget/NDC.Elections.BudgetPackage",
};

const housesMapping = {
  CouncilOfAdvisors: "Council Of Advisors",
  HouseOfMerit: "House of Merit",
  TransparencyCommission: "Transparency Commission",
  SetupPackage: "Budget Package",
};

const CastVotesSection = styled.div`
  background: #fdfeff;
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 16px;

  @media (max-width: 400px) {
    flex-direction: column;
  }

  .wrapper {
    @media (max-width: 400px) {
      width: 100%;
    }
  }

  button {
    @media (max-width: 400px) {
      width: 100%;
    }
  }

  h3,
  h4 {
    margin: 0 3px;
  }

  h3 {
    font-weight: 900;
  }

  .text-secondary {
    margin: 0 10px;
  }

  &.not-verified {
    h4 {
      font-size: 16px;
      margin: 0 0 5px 0;
      font-weight: 600;
    }

    h5 {
      margin: 0;
      font-size: 12px;
    }
  }
`;

const Info = styled.i`
  font-size: 12px;
  margin: 0 !important;
`;

const ActionSection = styled.div`
  @media (max-width: 400px) {
    width: 100%;
  }
`;

const H4 = styled.h4`
  margin-bottom: 0;
`;

const H3 = styled.h3`
  margin-bottom: 0;
`;

function alreadyVotedForHouse() {
  return myVotes.some((voter) => voter.house === typ);
}

const alreadyVoted = (candidateId) =>
  myVotes.some((voter) => voter.candidate === candidateId);

const myVotesForHouse = () => myVotes.filter((vote) => vote.house === typ);

const CastVotes = () => (
  <CastVotesSection className="d-flex align-items-center justify-content-between gap-3">
    <div className="wrapper">
      <div className="d-flex align-items-end">
        <H3>
          {alreadyVotedForHouse()
            ? 0
            : seats - myVotesForHouse().length - selectedCandidates.length}
        </H3>
        <span>/</span>
        <H4>{seats}</H4>
        <span className="text-secondary">votes left</span>
      </div>
      <Info className="text-secondary">
        <i class="bi bi-info-circle"></i>
        {alreadyVotedForHouse() ? (
          <span>You've already voted for {housesMapping[typ]}</span>
        ) : blacklisted ? (
          <span>Your account is blacklisted</span>
        ) : (
          <span>
            Make sure you selected {seats} candidates. You can only vote once
            per house
          </span>
        )}
      </Info>
    </div>
    <ActionSection className="d-flex gap-2">
      {selectedCandidates.length > 0 && (
        <Widget
          src={widgets.styledComponents}
          props={{
            Button: {
              className: "secondary dark justify-content-center text-nowrap",
              text: "Reset Selection",
              onClick: handleResetSelection,
            },
          }}
        />
      )}
      <Widget
        src={widgets.styledComponents}
        props={{
          Button: {
            className:
              "justify-content-center " +
              (myVotesForHouse().length + selectedCandidates.length < seats
                ? "bg-secondary text-white"
                : "primary"),
            disabled: selectedCandidates.length === 0 || blacklisted,
            text: `Cast ${
              alreadyVotedForHouse()
                ? 0
                : myVotesForHouse().length + selectedCandidates.length
            } / ${seats} Vote${selectedCandidates.length === 1 ? "" : "s"} `,
            onClick: handleCast,
          },
        }}
      />
    </ActionSection>
  </CastVotesSection>
);
const CastBudgetVote = () => (
  <CastVotesSection className="d-flex align-items-center justify-content-between gap-3">
    <div className="wrapper">
      <div className="d-flex align-items-end">
        <H3>{alreadyVotedForHouse() ? 0 : 1}</H3>
        <span>/</span>
        <H4>{seats}</H4>
        <span className="text-secondary">votes left</span>
      </div>
      <Info className="text-secondary">
        {alreadyVotedForHouse() && (
          <>
            <i class="bi bi-info-circle"></i>
            <span>You've already voted for budget package</span>
          </>
        )}
      </Info>
    </div>
    <ActionSection className="d-flex gap-2">
      <Widget
        src={widgets.styledComponents}
        props={{
          Button: {
            text:
              winnerIds.length > 0
                ? `Yes - ${result.find((item) => item[0] === "yes")[1]}`
                : "Yes",
            className: "primary success justify-content-center",
            icon: winnerIds.length === 0 && (
              <i className="bi bi-hand-thumbs-up" />
            ),
            disabled:
              blacklisted || (alreadyVotedForHouse() && !alreadyVoted("yes")),
            onClick: () => {
              if (winnerIds.length > 0 || alreadyVoted("yes")) return;

              const res = handleSelectCandidate("yes");
              if (res) handleVote();
            },
          },
        }}
      />
      <Widget
        src={widgets.styledComponents}
        props={{
          Button: {
            text:
              winnerIds.length > 0
                ? `No - ${result.find((item) => item[0] === "no")[1]}`
                : "No",
            className: "primary danger justify-content-center",
            icon: winnerIds.length === 0 && (
              <i className="bi bi-hand-thumbs-down" />
            ),
            disabled:
              blacklisted || (alreadyVotedForHouse() && !alreadyVoted("no")),
            onClick: () => {
              if (winnerIds.length > 0 || alreadyVoted("no")) return;

              const res = handleSelectCandidate("no");
              if (res) handleVote();
            },
          },
        }}
      />
      <Widget
        src={widgets.styledComponents}
        props={{
          Button: {
            text:
              winnerIds.length > 0
                ? `Abstain - ${result.find((item) => item[0] === "abstain")[1]}`
                : "Abstain",
            className: "primary justify-content-center text-nowrap",
            icon: winnerIds.length === 0 && <i className="bi bi-x-lg" />,
            disabled:
              blacklisted ||
              (alreadyVotedForHouse() && !alreadyVoted("abstain")),
            onClick: () => {
              if (winnerIds.length > 0 || alreadyVoted("abstain")) return;

              const res = handleSelectCandidate("abstain");
              if (res) handleVote();
            },
          },
        }}
      />
    </ActionSection>
  </CastVotesSection>
);

return <>{typ === "SetupPackage" ? <CastBudgetVote /> : <CastVotes />}</>;

'''
'''--- NDC/Elections/Filter.js ---
const { handleFilter, candidateId, placeholder } = props;

const Container = styled.div`
  padding: 16px;
  border-radius: 8px;
  background: #f8f8f9;

  i {
    position: absolute;
    top: 8px;
    left: 16px;
    font-size: 14px;
  }

  input {
    padding: 8px;
    padding-left: 40px;
    font-size: 14px;
  }
`;

return (
  <Container>
    <div className="position-relative">
      <i className="bi bi-search text-secondary"></i>
      <input
        placeholder={placeholder}
        className="form-control w-100"
        value={candidateId}
        onChange={handleFilter}
      />
    </div>
  </Container>
);

'''
'''--- NDC/Elections/Header.js ---
const { startTime, endTime, type, isWhistleblower, cooldown } = props;

State.init({
  days: "-",
  hours: "-",
  minutes: "-",
  seconds: "-",
  title: "",
});

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const formatTime = (time) => (time < 10 ? `0${time}` : time);

const timer = setInterval(() => {
  const now = new Date().getTime();
  const start = new Date(parseInt(startTime)).getTime();
  const end = new Date(parseInt(endTime)).getTime();
  const coold = new Date(parseInt(cooldown)).getTime();
  let title = "";

  let diff;
  if (now < start) diff = start - now;
  else if (now > start && now < end) diff = end - now;
  else if (now > end && now < coold) diff = coold - now;
  else diff = 0;

  let days = Math.floor(diff / (1000 * 60 * 60 * 24));
  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  let seconds = Math.floor((diff % (1000 * 60)) / 1000);

  if (now < start) title = <>Time before {type} starts</>;
  else if (now > start && now < end)
    title =
      type === "Nomination" ? (
        <>TIME LEFT TO NOMINATE - ELECTIONS START SEPT 8</>
      ) : (
        <>Time remaining in current {type}</>
      );
  else if (now > end && now < coold) title = <>{type} is under review</>;
  else {
    title = <>{type} is ended</>;
    days = 0;
    hours = 0;
    minutes = 0;
    seconds = 0;
  }

  State.update({
    days: days,
    hours: hours,
    minutes: minutes,
    seconds: seconds,
    title: title,
  });

  clearInterval(timer);
}, 1000);

const Logo = styled.img`
  width: 60px;
  margin: ${(props) => (props.mobile ? "0 10px 0 0" : "0 20px 0 10px")};
`;

const H1 = styled.h1`
  font-size: ${(props) => (props.mobile ? "30px" : "40px")};
  font-weight: 500;
  margin-bottom: 0;
  text-transform: capitalize;
`;

const H6 = styled.h6`
  font-size: 12px;
  font-weight: 400;
  margin-right: 32px;
  margin-bottom: 0;
  line-height: 1.5;
  align-items: center;
  letter-spacing: 0.16em;
  text-transform: uppercase;
  width: ${(props) => (props.mobile ? "100%" : "130px")};
`;

const Timer = styled.div`
  .time {
    font-size: 48px;
    font-weight: 800;
    color: #ffd50d;
    width: 100px;
    line-height: 1;
  }
  small {
    margin-bottom: 0;
    align-items: center;
  }
`;

const TimerContainer = styled.div`
  .time {
    font-size: 48px;
    font-weight: 700;
    color: #ffd50d;
    width: 100px;
    line-height: 1;
  }
  small {
    margin-bottom: 0;
    align-items: center;
  }
`;

const SmallTimerContainer = styled.div`
  background: #ffd50d;

  .time {
    font-size: 36px;
    font-weight: 700;
    color: #000;
    width: 70px;
    line-height: 1;
  }
  small {
    margin-bottom: 0;
    align-items: center;
    color: grey;
  }
`;

const Info = styled.div`
  background: #ffd50d;
`;

const TitleContainer = ({ mobile }) => (
  <>
    <Logo
      mobile={mobile}
      src="https://pbs.twimg.com/profile_images/1622941553839816707/nmf3MWw1_400x400.jpg"
    />
    <H1 mobile={mobile}>NDC {type}s</H1>
  </>
);

const TimerContent = ({ mobile }) => {
  const TimeSlot = ({ time, title, mobile }) => (
    <div className={`${mobile ? "text-center" : ""}`}>
      <div className="time">{formatTime(time)}</div>
      <small>{title}</small>
    </div>
  );

  return (
    <>
      <H6 mobile={mobile} className={`${mobile ? "m-0 mb-3 text-center" : ""}`}>
        {state.title}
      </H6>
      <Timer className="d-flex" mobile={mobile}>
        <TimeSlot title="days" time={state.days} />
        <TimeSlot title="hours" time={state.hours} />
        <TimeSlot title="minutes" time={state.minutes} />
        <TimeSlot title="seconds" time={state.seconds} />
      </Timer>
    </>
  );
};

const InfoBlock = ({ mobile }) => (
  <Info
    className={`py-2 d-flex justify-content-center align-items-center gap-2 ${
      mobile ? "" : "rounded-bottom"
    }`}
  >
    <b className={`mb-0 ${mobile ? "w-50" : ""}`}>
      {isWhistleblower ? (
        <>LEARN ABOUT THE WHISTLEBLOWER BOUNTY PROGRAM</>
      ) : (
        <>NDC NOMINATION AND ELECTION EDUCATION</>
      )}
    </b>
    <div>
      <Widget
        src={widgets.styledComponents}
        props={{
          Link: {
            text: "Learn More",
            size: "sm",
            className: "primary dark",
            href: isWhistleblower
              ? "https://medium.com/@neardigitalcollective/introducing-ndc-whistleblower-bounty-program-d4fe1b9fc5a0"
              : "https://pages.near.org/blog/ndc-v1-governance-elections-faq",
          },
        }}
      />
    </div>
  </Info>
);

return (
  <div>
    <div className="d-none d-lg-flex flex-column">
      <div className="p-4 bg-black text-white d-lg-flex rounded-top justify-content-between align-items-center">
        <div className="d-flex align-items-center">
          <TitleContainer />
        </div>
        <TimerContainer className="d-flex align-items-center">
          <TimerContent />
        </TimerContainer>
      </div>
      <InfoBlock />
    </div>
    <div className="d-md-flex d-lg-none d-xl-none">
      <div className="row">
        <div className="d-flex bg-black align-items-center justify-content-center bg-black text-white">
          <TitleContainer mobile />
        </div>
        <SmallTimerContainer className="d-flex flex-column p-3 align-items-center justify-content-between">
          <TimerContent mobile />
        </SmallTimerContainer>
        <InfoBlock mobile />
      </div>
    </div>
  </div>
);

'''
'''--- NDC/Elections/Houses.js ---
let { houses, ids, electionContract, selectedHouse, votesLeft, urlProps } =
  props;
ids = ids ?? [1, 2, 3, 4];

State.init({ houses: houses ?? [] });

// for nominations (only 3 houses to display)
if (!houses && electionContract) {
  const contractHouses = [
    Near.view(electionContract, "proposal", { prop_id: ids[0] }),
    Near.view(electionContract, "proposal", { prop_id: ids[1] }),
    Near.view(electionContract, "proposal", { prop_id: ids[2] }),
  ];

  State.update({ houses: contractHouses });
}

const housesMapping = {
  CouncilOfAdvisors: {
    title: "Council Of Advisors",
    src: "https://bafkreidejnek5zzwlhd3lxnr7s3tvtrgul6jobfpikbs7zjkpuovxdz7je.ipfs.nftstorage.link",
  },
  HouseOfMerit: {
    title: "House of Merit",
    src: "https://bafkreihoomeeaeyqerqftn3n7yb2jrnmqtpwgpsl3xpelek6qmly3qzob4.ipfs.nftstorage.link",
  },
  TransparencyCommission: {
    title: "Transparency Commission",
    src: "https://bafkreihcog3rs2gj4wgwfixk6yqir7k3csyaqiqwcvm2gedlh6dlvr7ik4.ipfs.nftstorage.link",
  },
  SetupPackage: {
    title: "Budget Package",
    src: "https://ipfs.near.social/ipfs/bafkreicljooupjpwmdlja2ocjg3sljvknlq5iriahqbqiwob635l2vszqa",
  },
};

const Loader = () => (
  <span
    className="spinner-grow spinner-grow-sm me-1"
    role="status"
    aria-hidden="true"
  />
);

const Small = styled.small`
  margin-top: 10px;
  font-weight: 400;
`;

const H6 = styled.h6`
  margin-top: 5px;
  margin-bottom: 0;
`;

const ImgContainer = styled.div`
  margin-right: 20px;

  img {
    border-radius: 50%;
    height: 40px;
    max-height: "40px";
  }
`;

const CompletedIcon = styled.i`
  border-radius: 50%;
  padding-bottom: 0;
  color: #239f28;
  background: #cee9cf;

  &:before {
    vertical-align: -0.2rem;
  }
`;

const ItemContainer = styled.a`
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  background: ${(props) => (props.selected ? "#4BA6EE" : "#fff")};
  color: ${(props) => (props.selected ? "white" : "inherit")};
  text-decoration: none;

  &:hover {
    text-decoration: none;
    color: ${(props) => (props.selected ? "#fff" : "#000")};
    background: ${(props) => (props.selected ? "#4BA6EE" : "#fff")};
    box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.05);
  }
`;

const buildURL = (houseId) => {
  const arr = [];
  if (!urlProps) return "";

  if (urlProps.ids) arr.push(`ids=${urlProps.ids}`);
  if (urlProps.election_contract)
    arr.push(`election_contract=${urlProps.election_contract}`);
  if (urlProps.registry_contract)
    arr.push(`registry_contract=${urlProps.registry_contract}`);
  arr.push(`house=${houseId}`);

  return "?" + arr.join("&");
};

const HouseItem = ({ house }) => (
  <ItemContainer
    className="d-flex p-3 px-4 align-items-center mb-3 justify-content-between"
    href={buildURL(house.id)}
    selected={selectedHouse === house.id}
  >
    <div className="d-flex align-items-center">
      <ImgContainer>
        <img
          src={housesMapping[house.typ].src}
          alt={housesMapping[house.typ].title}
        />
      </ImgContainer>
      <div>
        <H6>{housesMapping[house.typ].title}</H6>
        {votesLeft && (
          <Small>
            {votesLeft(house)} / {house.seats} votes left
          </Small>
        )}
      </div>
    </div>
    {votesLeft && (
      <div>
        {votesLeft(house) < house.seats && (
          <CompletedIcon
            className="bi bi-check-circle fs-5"
            selected={selectedHouse === house.id}
          />
        )}
      </div>
    )}
  </ItemContainer>
);

return (
  <div>
    {state.houses.map((house) => (
      <HouseItem house={house} />
    ))}
  </div>
);

'''
'''--- NDC/Elections/Main.js ---
let { ids, election_contract, registry_contract } = props;

ids = ids ? JSON.parse(ids) : [1, 2, 3, 4];
const budgetId = ids[3];

const electionContract = election_contract ?? "elections.ndc-gwg.near";
const registryContract = registry_contract ?? "registry.i-am-human.near";
const apiKey = "36f2b87a-7ee6-40d8-80b9-5e68e587a5b5";

const NFT_SERIES = [205, 206];
const QUERY_API_ENDPOINT = "https://graph.mintbase.xyz/mainnet";

const widgets = {
  header: "election.ndctools.near/widget/NDC.Elections.Header",
  filter: "election.ndctools.near/widget/NDC.Elections.Filter",
  houses: "election.ndctools.near/widget/NDC.Elections.Houses",
  progress: "election.ndctools.near/widget/NDC.Elections.Progress",
  candidates: "election.ndctools.near/widget/NDC.Elections.Candidates",
  statistic: "election.ndctools.near/widget/NDC.Elections.Statistic",
  activities: "election.ndctools.near/widget/NDC.Elections.Activities",
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  stepper: "election.ndctools.near/widget/NDC.Stepper",
};

State.init({
  electionStatus: "NOT_STARTED",
  selectedHouse: props.house ? parseInt(props.house) : ids[0],
  myVotes: [],
  winnerIds: [],
  iahToken: null,
  humanToken: 0,
  blacklisted: false,
  greylisted: false,
  candidateFilterId: props.candidates ? JSON.parse(props.candidates) : "",
  isBonded: 0,
  reload: true,
  houses: [],
  acceptedPolicy: false,
  hasVotedOnAllProposals: false,
  hasPolicyNFT: null,
  hasIVotedNFT: null,
  iVotedToken: false,
  finishTime: false,
});

const currentUser = context.accountId;

const steps = [
  {
    title: "Accepted Policy",
    completed: state.acceptedPolicy || state.myVotes.length > 0,
  },
  {
    title: "Mint “Fair Voter” NFT",
    completed: state.hasPolicyNFT,
  },
  {
    title: "Voting Completed",
    completed: state.hasVotedOnAllProposals,
  },
  {
    title: 'Mint "I Voted" NFT',
    completed: state.hasIVotedNFT,
  },
  {
    title: 'Unbond & Mint "I Voted" SBT',
    completed: state.iVotedToken,
  },
];

function fetchGraphQL(series) {
  return asyncFetch(QUERY_API_ENDPOINT, {
    method: "POST",
    headers: { "mb-api-key": "anon", "x-hasura-role": electionContract },
    body: JSON.stringify({
      query: `
          query MyQuery {
            nft_tokens(
              where: {
                nft_contract_id: {
                  _eq: "mint.sharddog.near"
                },
                token_id: {_regex: "^${series}:"},
                owner: {_eq: "${currentUser}"}}
              order_by: {minted_timestamp: asc}
            ) {
              last_transfer_timestamp
            }
          }
        `,
      variables: {},
      operationName: "MyQuery",
    }),
  });
}

const processNFTAvailability = (result, key) => {
  if (result.status === 200) {
    let data = result.body.data;
    if (data) {
      const tokens = data.nft_tokens;

      State.update({
        [key]: tokens.length > 0 && tokens[0].last_transfer_timestamp === null,
      });
    }
  }
};

function loadHouses() {
  let houses = [
    Near.view(electionContract, "proposal", { prop_id: ids[0] }),
    Near.view(electionContract, "proposal", { prop_id: ids[1] }),
    Near.view(electionContract, "proposal", { prop_id: ids[2] }),
    Near.view(electionContract, "proposal", { prop_id: ids[3] }),
  ];

  State.update({ houses });
}

const findToken = (sbts, issuer) => {
  let token;
  if (sbts)
    token = sbts.find((token) => token[0] === issuer && token[1].length > 0);
  if (token) return token[1].find((t) => t.metadata.class === 1).token;
};

function loadSBTs() {
  const issuer = {
    fractal: "fractal.i-am-human.near",
    election: electionContract,
  };
  const sbts = Near.view(registryContract, "sbt_tokens_by_owner", {
    account: currentUser,
  });

  State.update({
    iahToken: findToken(sbts, issuer.fractal),
    iVotedToken: findToken(sbts, issuer.election),
  });
}

function loadBond() {
  asyncFetch(
    `https://api.pikespeak.ai/election/is-bonded?account=${currentUser}&registry=${registryContract}`,
    { headers: { "x-api-key": apiKey } }
  ).then((resp) => {
    if (resp.body) {
      const amount = resp.body.bond ? parseFloat(resp.body.bond) : 0;

      State.update({ isBonded: amount });
    }
  });
}

function loadFlagged() {
  const flagged = Near.view(registryContract, "account_flagged", {
    account: currentUser,
  });

  State.update({
    blacklisted: flagged === "Blacklisted",
    greylisted: flagged !== "Blacklisted" && flagged !== "Verified",
  });
}

function loadPolicy() {
  const acceptedPolicy = Near.view(electionContract, "accepted_policy", {
    user: currentUser,
  });

  State.update({ acceptedPolicy });
}

function loadWinners() {
  const finishTime = Near.view(electionContract, "finish_time", {});

  const winnerIds = Near.view(electionContract, "winners_by_proposal", {
    prop_id: state.selectedHouse,
    ongoing: true,
  });

  State.update({ winnerIds, finishTime });
}

function loadElectionStatus() {
  const electionStatus = Near.view(electionContract, "proposal_status", {
    prop_id: state.selectedHouse,
  });

  State.update({ electionStatus });
}

function loadMyVotes() {
  asyncFetch(
    `https://api.pikespeak.ai/election/votes-by-voter?voter=${currentUser}&contract=${electionContract}`,
    { headers: { "x-api-key": apiKey } }
  ).then((resp) => {
    if (resp.body) {
      const myVotes = resp.body.filter((vote) =>
        ids.includes(parseInt(vote.proposal_id))
      );

      const votes = ids
        .map((id) => myVotes.find((vote) => parseInt(vote.proposal_id) === id))
        .filter((el) => el);

      State.update({
        myVotes,
        reload: false,
        hasVotedOnAllProposals: votes.length === 4,
      });
    }
  });
}

function loadNFT(id, key) {
  fetchGraphQL(NFT_SERIES[id]).then((result) =>
    processNFTAvailability(result, key)
  );
}

loadHouses();
loadSBTs();
loadElectionStatus();
loadFlagged();
loadWinners();
loadPolicy();
loadNFT(0, "hasPolicyNFT");
loadNFT(1, "hasIVotedNFT");

if (state.reload) {
  loadMyVotes();
  loadBond();
}

const handleUnbond = () => {
  Near.call(
    registryContract,
    "is_human_call",
    { ctr: electionContract, function: "unbond", payload: "{}" },
    "110000000000000"
  ).then((data) => State.update({ isBonded: 0 }));
};

const handleFilter = (e) => State.update({ candidateFilterId: e.target.value });

const votesLeft = (house) =>
  house.seats - state.myVotes.filter((vote) => vote.house === house.typ).length;

const Container = styled.div`
  padding: 20px 0;
`;

const ActivityContainer = styled.div`
  overflow-y: scroll;
`;

const Left = styled.div`
  padding: 20px;
  background: #f8f8f9;
  border-radius: 8px;
`;

const Filter = styled.div`
  margin-top: 20px;
`;

const Stepper = styled.div`
  margin-top: 32px;
`;

const Right = styled.div`
  padding: 20px;
  margin-bottom: 20px;
  background: #f8f8f9;
  border-radius: 8px;
`;

const H5 = styled.h5`
  margin-bottom: 20px;
`;

const UnbondContainer = styled.div`
  background: #fdfeff;
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 16px;
  h3,
  h4 {
    margin: 0 3px;
  }
  h3 {
    font-weight: 900;
  }
  .text-secondary {
    margin: 0 10px;
  }
  &.not-verified {
    h4 {
      font-size: 16px;
      margin: 0 0 5px 0;
      font-weight: 600;
    }
    h5 {
      margin: 0;
      font-size: 12px;
    }
  }
`;

const rand = (array) => {
  for (var i = array.length - 1; i > 0; i--) {
    var j = Math.floor(Math.random() * (i + 1));
    var temp = array[i];
    array[i] = array[j];
    array[j] = temp;
  }

  return array;
};

return (
  <>
    <div>
      {state.houses.map((house) => (
        <>
          {house.id === state.selectedHouse && (
            <Widget
              key={i}
              src={widgets.header}
              props={{
                startTime: house.start,
                endTime: house.end,
                cooldown: state.finishTime,
                type: "Election",
                isWhistleblower: true,
                ids,
              }}
            />
          )}
        </>
      ))}
      <Stepper>
        <Widget src={widgets.stepper} props={{ steps }} />
      </Stepper>
      {state.selectedHouse !== budgetId && (
        <Filter>
          <Widget
            src={widgets.filter}
            props={{
              handleFilter,
              candidateId: state.candidateFilterId,
              placeholder: "Search by candidate name",
            }}
          />
        </Filter>
      )}
      <Container className="d-flex row">
        <Left className="h-screen col-lg-3 d-flex flex-column justify-content-between">
          <div>
            <H5>To Vote</H5>
            <Widget
              src={widgets.houses}
              props={{
                urlProps: props,
                selectedHouse: state.selectedHouse,
                houses: state.houses,
                ids,
                votesLeft: !!state.iahToken
                  ? (house) => votesLeft(house)
                  : null,
              }}
            />
          </div>

          {currentUser &&
          !!state.iahToken &&
          state.winnerIds.length > 0 &&
          !state.iVotedToken ? (
            <UnbondContainer className={`not-verified d-flex flex-column`}>
              <div>
                <h4>Unbond NEAR & Mint SBT</h4>
                <h5 className="text-secondary">
                  Congratulations! You can now unbond NEAR and mint the “I
                  Voted” SBT
                </h5>
              </div>
              <div className="mt-3">
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      className: "primary w-100 justify-content-center",
                      text: "Unbond & Mint I Voted SBT",
                      onClick: handleUnbond,
                    },
                  }}
                />
              </div>
            </UnbondContainer>
          ) : (
            <>
              {!!state.iahToken && (
                <Widget
                  src={widgets.progress}
                  props={{ houses: state.houses, votesLeft }}
                />
              )}
            </>
          )}
        </Left>

        <div className="col-lg-6 p-2 p-md-3">
          {state.houses.map((house) => (
            <>
              {house.id === state.selectedHouse && (
                <Widget
                  key={i}
                  src={widgets.candidates}
                  props={{
                    electionContract,
                    registryContract,
                    ndcOrganization: "NDC",
                    ids,
                    ...state,
                    ...house,
                    result:
                      state.winnerIds.length > 0
                        ? house.result.sort((a, b) => b[1] - a[1])
                        : rand(house.result),
                  }}
                />
              )}
            </>
          ))}
        </div>

        <div className="col-lg-3">
          <Right className="col">
            <H5>General</H5>
            <div className="d-flex justify-content-center">
              <Widget
                src={widgets.statistic}
                props={{
                  electionContract,
                  quorum: state.houses[state.selectedHouse - 1].quorum,
                }}
              />
            </div>
          </Right>
          {state.myVotes.length > 0 && (
            <Right className="col">
              <H5>My voting activity</H5>
              <ActivityContainer className="d-flex justify-content-center">
                <Widget
                  src={widgets.activities}
                  props={{ myVotes: state.myVotes }}
                />
              </ActivityContainer>
            </Right>
          )}
        </div>
      </Container>
    </div>
  </>
);

'''
'''--- NDC/Elections/Progress.js ---
const { houses, votesLeft } = props;

const Stepper = styled.div`
  background: #fdfeff;
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 16px;

  h3,
  h4 {
    margin: 0 3px;
  }
`;

const ProgressBar = styled.div`
  margin-top: 8px;
  border-radius: 100px;
  background: #f5f5f5;
  padding: 3px;
  height: 21px;
`;

const DoneBar = styled.div`
  border-radius: 100px;
  background: #239f28;
  height: 100%;
`;

const CompleteText = styled.span`
  color: #239f28;
  margin-bottom: 0px;
  font-weight: 900;
  font-size: 22px;
`;

State.init({ step: 0 });

const step = 0;
houses.map((house) => {
  step += votesLeft(house) === house.seats ? 0 : 1;
});
State.update({ step });

return (
  <Stepper>
    <div className="d-flex justify-content-between align-items-center">
      <div>Voting progress</div>
      <div>
        <CompleteText> {state.step}</CompleteText>/<span>{houses.length}</span>
        <span className="text-secondary">Houses</span>
      </div>
    </div>
    <ProgressBar className="position-relative">
      {state.step > 0 && <DoneBar className={`col-${state.step * 3}`} />}
      <div className="position-absolute top-0 start-50">
        <small>
          <b className={`${state.step > 1 ? "text-light" : "inherit"}`}>
            {state.step === 4 ? 100 : state.step * 25} %
          </b>
        </small>
      </div>
    </ProgressBar>
  </Stepper>
);

'''
'''--- NDC/Elections/Statistic.js ---
const { electionContract, quorum } = props;

const BLACKLISTED_COUNT = 911;

const Chart = styled.div`
  width: 150px;
  aspect-ratio: 1;
  position: relative;
  display: inline-grid;
  place-content: center;
  margin: 5px;
  font-size: 25px;
  font-weight: bold;

  &:before {
    content: "";
    position: absolute;
    border-radius: 50%;
    inset: 0;
    background: ${(props) =>
      `conic-gradient(#4ba6ee, calc(${props.voted}*1%), #d4e5f4 0)`};
    -webkit-mask: radial-gradient(
      farthest-side,
      #0000 calc(99% - 15px),
      #000 calc(100% - 15px)
    );
    mask: radial-gradient(
      farthest-side,
      #0000 calc(99% - 15px),
      #000 calc(100% - 15px)
    );
  }

  span {
    font-weight: 800;
    font-size: 32px;
    line-height: 120%;
    color: #4ba6ee;
  }
`;

const H5 = styled.h5`
  margin-top: 10px;
  b {
    font-weight: 800;
  }
  small {
    font-weight: 400;
    font-size: 14px;
  }
`;

const registryContract = "registry.i-am-human.near";
const apiKey = "36f2b87a-7ee6-40d8-80b9-5e68e587a5b5";

State.init({
  total: 0,
  voted: 0,
});

asyncFetch(`https://api.pikespeak.ai/election/iah-by-flag`, {
  headers: { "x-api-key": apiKey },
}).then((resp) => {
  if (resp.body)
    State.update({
      total: parseInt(resp.body.total_iah) - parseInt(resp.body.black_list),
    });
});

asyncFetch(
  `https://api.pikespeak.ai/election/total-voters?contract=${electionContract}`,
  { headers: { "x-api-key": apiKey } }
).then((resp) => {
  if (resp.body) State.update({ voted: resp.body });
});

const percent = state.total > 0 ? (state.voted / state.total) * 100 : 0;

return (
  <div>
    <Chart voted={percent}>
      <span>{percent.toFixed(1)}%</span>
    </Chart>
    <div className="text-center">
      <H5>
        <b>{state.voted}</b>/<small>{state.total} Humans Voted</small>
      </H5>
      <H5>
        <small>Quorum: {quorum}</small>
      </H5>
    </div>
  </div>
);

'''
'''--- NDC/Elections/Voters.js ---
const { candidateId, iahToken, electionContract, ids } = props;
const apiKey = api_key ?? "36f2b87a-7ee6-40d8-80b9-5e68e587a5b5";

State.init({
  voters: [],
});

asyncFetch(
  `https://api.pikespeak.ai/election/votes-by-candidate?contract=${electionContract}&candidate=${candidateId}`,
  { headers: { "x-api-key": apiKey } }
).then((resp) => {
  const voters = resp.body.filter((vote) =>
    ids.includes(parseInt(vote.proposal_id))
  );

  State.update({ voters, reload: false });
});

const VotersContainer = styled.div`
  padding: 5px 0;
`;

const Bookmark = styled.div`
  width: 90px;

  @media (max-width: 400px) {
    width: auto;
    margin-right: 15px;
  }
`;

const Expand = styled.div`
  width: 35px;

  @media (max-width: 400px) {
    width: 20px;
    margin-right: 10px;
  }
`;

const VoterItem = styled.div`
  font-size: 14px;
  padding: 0 20px;
  height: 44px;
  border-bottom: 1px solid #d0d6d9;

  &:last-child {
    border: 0;
  }
`;

const StyledLink = styled.a`
  color: inherit !important;
  width: 120px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 14px;
  padding-top: 2px;

  @media (max-width: 400px) {
    width: 60px;
  }
`;

const TxnSection = styled.div`
  white-space: nowrap;
  overflow: hidden;
`;

const TxnLink = styled.a`
  color: inherit !important;
  width: 235px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const UserLink = ({ title, src }) => (
  <div className="d-flex mr-3">
    <StyledLink href={src}>{title}</StyledLink>
    <span>
      <i class="bi bi-arrow-up-right" />
    </span>
  </div>
);

return (
  <VotersContainer>
    {state.voters.map((voter) => (
      <VoterItem className="d-flex align-items-center justify-content-between">
        <div className="d-flex align-items-center w-100">
          <Expand />
          {iahToken && <Bookmark />}
          <Widget
            src="mob.near/widget/ProfileImage"
            props={{
              accountId: voter.voter,
              imageClassName: "rounded-circle w-100 h-100",
              style: { width: "24px", height: "24px", marginRight: 5 },
            }}
          />
          <UserLink
            src={`https://near.org/near/widget/ProfilePage?accountId=${voter.voter}`}
            title={voter.voter}
          />
        </div>
        <TxnSection className="d-flex justify-content-end align-items-center w-100">
          <TxnLink
            role="button"
            target="_blank"
            href={`https://explorer.mainnet.near.org/transactions/${voter.transaction_id}`}
          >
            {voter.transaction_id}
          </TxnLink>
          <span>
            <i class="bi bi-arrow-up-right" />
          </span>
        </TxnSection>
      </VoterItem>
    ))}
  </VotersContainer>
);

'''
'''--- NDC/Kudos/AddComment.js ---
const { onHide, kudo, comment, edit } = props;

const kudosContract = "kudos.ndctools.near";
const socialContract = "social.near";
const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

State.init({
  message: edit ? comment.message : "",
});

const Modal = styled.div`
  position: fixed;
  display: flex;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const ModalContent = styled.div`
  background: #f8f8f9;
  margin: 20% auto;
  padding: 20px;
  border-radius: 10px;
  width: 50%;

  @media (max-width: 768px) {
    width: 90%;
  }

  .content {
    margin: 18px 0;

    h6 {
      margin-bottom: -10px;
    }
  }
`;

const InputField = styled.div`
  margin: 20px 0;
`;

const Section = styled.div`
  margin: 12px 0;
`;

const StyledLink = styled.a`
  color: inherit !important;
  width: 100px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: 16px;
  margin-left: 5px;
`;

const CreatedAt = styled.div`
  font-size: 12px;
  font-style: italic;
  font-weight: 300;

  b {
    font-weight: 500;
  }
`;

const Description = styled.div`
  max-height: 100px;
  white-space: pre-line;
  width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  font-weight: 400;
  font-size: 14px;
`;

const encryptComment = () => {
  let data = {
    m: state.message.slice(0, 1000),
    s: comment.owner_id.toString(),
    t: comment.created_at.toString(),
    p: comment.id.toString(),
  };

  let buff = new Buffer(JSON.stringify(data));

  console.log(buff.toString("base64"));
  return buff.toString("base64");
};

const handleAddComment = () => {
  const message = state.message.slice(0, 1000);
  const mentions = message.match(/@[\w][^\s]*/g);
  const mentionData =
    mentions.length > 0
      ? mentions.map((user) => {
          return {
            key: user.slice(1),
            value: { type: "mention" },
          };
        })
      : {};

  let data = [
    {
      contractName: kudosContract,
      methodName: "leave_comment",
      args: {
        parent_comment_id: comment.id,
        receiver_id: kudo.receiver_id,
        kudos_id: kudo.id,
        message,
      },
      gas: "250000000000000",
      deposit: 17000000000000000000000,
    },
  ];

  // if (mentionData.length > 0)
  //   data.push({
  //     contractName: socialContract,
  //     methodName: "set",
  //     args: {
  //       data: {
  //         index: {
  //           notify: JSON.stringify(mentionData),
  //         },
  //       },
  //     },
  //     gas: "30000000000000",
  //     deposit: 1000000000000000000000,
  //   });

  Near.call(data).then((data) => {
    onHide();
  });
};

const handleEditComment = () => {
  const targetComment = encryptComment();
  const comments = {
    ...kudo.comments,
    ...{ [comment.id.toString]: targetComment },
  };

  Social.set(
    {
      [kudosContract]: {
        kudos: {
          [kudo.receiver_id]: {
            [kudo.id]: {
              created_at: kudo.created_at,
              sender_id: kudo.sender_id,
              kind: kudo.kind,
              message: kudo.message,
              icon: kudo.icon,
              upvotes: kudo.upvotes,
              comments: comments,
              tags: JSON.stringify(kudo.tags),
            },
          },
        },
      },
    },
    {
      force: true,
      onCommit: onHide,
      onCancel: onHide,
    }
  ).then((_data) => onHide());
};

const UserLink = ({ title, src }) => (
  <StyledLink href={src}>{title}</StyledLink>
);

const getDateAgo = () => {
  const now = new Date().getTime();
  const current = new Date(parseInt(comment.created_at)).getTime();

  const diff = now - current;
  let days = Math.floor(diff / (1000 * 60 * 60 * 24));
  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  let seconds = Math.floor((diff % (1000 * 60)) / 1000);

  if (days > 0) return `${days} days ago`;
  if (hours > 0) return `${hours} hours ago`;
  if (minutes > 0) return `${minutes} minutes ago`;
  if (seconds > 0) return `${seconds} seconds ago`;

  return "";
};

return (
  <Modal>
    <ComponentWrapper>
      <ModalContent>
        <h4>{edit ? "Edit message" : "Comment to Reply"}</h4>
        <div className="content">
          <div className="d-flex justify-content-between align-items-center">
            <div>
              <Widget
                src="mob.near/widget/ProfileImage"
                props={{
                  accountId: comment.owner_id,
                  imageClassName: "rounded-circle w-100 h-100",
                  style: { width: "32px", height: "32px", marginRight: 5 },
                }}
              />
              <UserLink
                src={`https://near.org/near/widget/ProfilePage?accountId=${comment.owner_id}`}
                title={comment.owner_id}
              />
            </div>
            <CreatedAt>
              <i className="bi bi-clock" />
              {getDateAgo()}
            </CreatedAt>
          </div>
          <Description className="text-secondary">
            {comment.message}
          </Description>
          <hr className="text-secondary" />
          <Widget
            src={"rubycop.near/widget/Common.Compose"}
            props={{
              placeholder: "Left a comment",
              handleChange: (text) => {
                if (text.length > 1000) return;
                State.update({ message: text });
              },
            }}
          />
        </div>
        <div className="d-grid gap-3 d-flex align-items-center justify-content-end">
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Cancel",
                className: "secondary dark",
                onClick: onHide,
              },
            }}
          />
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Submit",
                onClick: () => handleAddComment(),
              },
            }}
          />
        </div>
      </ModalContent>
    </ComponentWrapper>
  </Modal>
);

'''
'''--- NDC/Kudos/AddKudo.js ---
const { onHide, kind } = props;

const kudosContract = "kudos.ndctools.near";
const socialContract = "social.near";
const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const Modal = styled.div`
  position: fixed;
  display: flex;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const ModalContent = styled.div`
  background: #f8f8f9;
  margin: 20% auto;
  padding: 20px;
  border-radius: 10px;
  width: 50%;

  @media (max-width: 768px) {
    width: 90%;
  }

  .content {
    margin: 18px 0;

    h6 {
      margin-bottom: -10px;
    }
  }
`;

const InputField = styled.div`
  margin: 20px 0;
`;

const Section = styled.div`
  margin: 12px 0;
`;

const handleAddKudo = () => {
  const mentions = state.message.match(/@[\w][^\s]*/g);
  const mentionData =
    mentions.length > 0
      ? mentions.map((user) => {
          return {
            key: user.slice(1),
            value: { type: "mention" },
          };
        })
      : {};

  let data = [
    {
      contractName: kudosContract,
      methodName: "give_kudos",
      args: {
        receiver_id: state.receiverId,
        message: state.message,
        icon_cid: state.img.cid,
        kind,
        hashtags: state.tags,
      },
      gas: "70000000000000",
      deposit: 100000000000000000000000,
    },
    // {
    //   contractName: socialContract,
    //   methodName: "set",
    //   args: {
    //     data: {
    //       index: {
    //         notify: JSON.stringify({
    //           key: state.receiverId,
    //           value: { type: "kudo_created" },
    //         }),
    //       },
    //     },
    //   },
    // },
  ];

  // if (mentionData.length > 0)
  //   data.push({
  //     contractName: socialContract,
  //     methodName: "set",
  //     args: {
  //       data: {
  //         index: {
  //           notify: JSON.stringify(mentionData),
  //         },
  //       },
  //     },
  //   });

  Near.call(data).then((data) => {
    onHide();
  });
};

State.init({
  receiverId: "",
  message: "",
  img: null,
  tags: "",
});

return (
  <Modal>
    <ComponentWrapper>
      <ModalContent>
        <h4>Give a {kind === "k" ? "Kudo" : "Ding"}</h4>
        <div className="content">
          <Section>
            <Widget
              src={"rubycop.near/widget/Common.Compose"}
              props={{
                type: "input",
                placeholder: "NEAR account",
                withoutSeparator: true,
                handleChange: (text) => State.update({ receiverId: text }),
              }}
            />
          </Section>
          <Section>
            <Widget
              src={"rubycop.near/widget/Common.Compose"}
              props={{
                placeholder: "Left a comment",
                handleChange: (text) => {
                  if (text.length > 1000) return;
                  State.update({ message: text });
                },
              }}
            />
          </Section>
          <Section>
            <div className="h-25">
              <IpfsImageUpload image={state.img} />
            </div>
          </Section>
          <Section>
            <Widget
              src={"sayalot.near/widget/TagsEditor"}
              props={{
                label: "Tags",
                placeholder: "Enter tags",
                setTagsObject: (tags) =>
                  State.update({ tags: Object.keys(tags) }),
              }}
            />
          </Section>
        </div>
        <div className="d-grid gap-3 d-flex align-items-center justify-content-end">
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Cancel",
                className: "secondary dark",
                onClick: onHide,
              },
            }}
          />
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Submit",
                onClick: handleAddKudo,
              },
            }}
          />
        </div>
      </ModalContent>
    </ComponentWrapper>
  </Modal>
);

'''
'''--- NDC/Kudos/Card.js ---
const {
  kudo,
  isIAmHuman,
  isKudoMinted,
  kudosContract,
  hideMintBtn,
  inverseColor,
} = props;

const MIN_UPVOTE = 3;
const IMPORTANT_DING_UPVOTES = 2;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  kudoPage: "#/kudos.ndctools.near/widget/NDC.Kudos.Kudo.Page",
  addComment: "kudos.ndctools.near/widget/NDC.Kudos.AddComment",
  mintSbt: "kudos.ndctools.near/widget/NDC.Kudos.Kudo.MintSbt",
};

const Container = styled.div`
  border-radius: 10px;
  background: ${(props) => (props.inverseColor ? "#fff" : "#f8f8f9")};
  border: ${(props) =>
    props.canMint
      ? "2px solid #9333EA"
      : props.ding
      ? "2px solid #DD5E56"
      : ""};

  @media (max-width: 768px) {
    background: #fff;
  }
`;

const InputField = styled.div`
  margin: 20px 0;
`;

const Mint = styled.div`
  padding: 10px 0;
  background: #4ba6ee;
  border-radius: 8px 8px 0 0;
  font-size: 14px;
  cursor: pointer;

  span.gift {
    font-size: 20px;
  }
  b {
    margin-left: 5px;
    font-size: 16px;
  }

  p {
    margin-bottom: 0;
  }
`;

const Ding = styled.div`
  padding: 10px 0;
  background: #c23f38;
  border-radius: 8px 8px 0 0;
  font-size: 14px;
  color: #fff;

  b {
    margin-left: 5px;
    font-size: 16px;
  }

  p {
    margin-bottom: 0;
  }
`;

const ViewButton = styled.button`
  padding: 2px 12px;
  border-radius: 8px;
  background: #fff;
  font-size: 12px;
  font-weight: 500;
  line-height: 24px;
  color: #9333ea;
  border: 1px solid #9333ea;
`;

const Description = styled.div`
  max-height: 100px;
  width: 100%;
  overflow: hidden;
  text-overflow: ellipsis;
  font-weight: 400;
  font-size: 14px;
  margin: 12px 0;
`;

const ImageTag = styled.div`
  height: 250px;
  width: 100%;
  background: url(${(props) => props.src}) no-repeat center center;
  background-size: cover;
  overflow: hidden;
  margin: 0 0 12px 0;
`;

const Tags = styled.div`
  font-size: 12px;
  margin-bottom: 12px;
`;

const CreatedAt = styled.div`
  font-size: 12px;
  font-style: italic;
  font-weight: 300;

  b {
    font-weight: 500;
  }
`;

const KudoLink = styled.a`
  color: black;

  &:hover {
    text-decoration: none !important;
  }

  span {
    color: inherit !important;
    width: 80%;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    font-size: 16px;
    margin-left: 5px;
  }
`;

const Modal = styled.div`
  position: fixed;
  z-index: 101;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100vh;
  background: rgba(128, 128, 128, 0.65);
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const ModalContent = styled.div`
  background: #f8f8f9;
  margin: 20% auto;
  padding: 20px;
  border-radius: 10px;
  width: 50%;

  @media (max-width: 768px) {
    width: 90%;
  }

  .content {
    margin: 18px 0;

    h6 {
      margin-bottom: -10px;
    }
  }
`;

const getDateAgo = () => {
  const now = new Date().getTime();
  const current = new Date(parseInt(kudo.created_at)).getTime();

  const diff = now - current;
  let days = Math.floor(diff / (1000 * 60 * 60 * 24));
  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  let seconds = Math.floor((diff % (1000 * 60)) / 1000);

  if (days > 0) return `${days} days ago`;
  if (hours > 0) return `${hours} hours ago`;
  if (minutes > 0) return `${minutes} minutes ago`;
  if (seconds > 0) return `${seconds} seconds ago`;

  return "";
};

const canMint =
  isIAmHuman &&
  !isKudoMinted &&
  kudo.kind === "k" &&
  kudo.upvotes.length >= MIN_UPVOTE &&
  kudo.receiver_id === context.accountId &&
  !hideMintBtn;

const importantDing =
  kudo.kind === "d" &&
  kudo.upvotes.length >= IMPORTANT_DING_UPVOTES &&
  kudo.receiver_id === context.accountId;

const handleUpvote = (kudo) => {
  Near.call(
    kudosContract,
    "upvote_kudos",
    {
      receiver_id: kudo.receiver_id,
      kudos_id: kudo.id,
    },
    "300000000000000",
    4000000000000000000000
  );
};

const handleShare = (e) => {
  e.preventDefault();
};

State.init({
  addCommentIsOpen: false,
  mintKudoIsOpen: false,
  comment: "",
});

const kudoTags = kudo.tags ? JSON.parse(kudo.tags).filter((el) => el) : [];

const formatMsg = (text) => {
  // String.fromCharCode doesn't work on Near Social
  // const newStr = text.replace(/\\u[\dA-F]{4}/gi, (match) => {
  //   return String.fromCharCode(parseInt(match.replace(/\\u/g, ""), 16));
  // });

  return text;
};

const utf2Html = (str) => {
  return [...newStr]
    .map((char) => {
      return char.codePointAt() > 127 ? `&#${char.codePointAt()};` : char;
    })
    .join("");
};

const trimText = (text, limit) => {
  if (!text) return "";

  const _limit = limit ?? 200;
  const ending = text.length > _limit ? "..." : "";
  const trimmed = text.slice(0, limit ?? 200);

  return `${trimmed}${ending}`;
};

return (
  <>
    <Container
      canMint={canMint}
      ding={importantDing}
      inverseColor={inverseColor}
    >
      {canMint ? (
        <Mint id="mint" onClick={() => State.update({ mintKudoIsOpen: true })}>
          <p className="text-white text-center align-items-center">
            <span className="gift">🎁</span>
            <b>Congratulations!</b>{" "}
          </p>
          <p className="text-white text-center align-items-center">
            <i>Click on the gift box to mint your Proof of Kudos</i>
          </p>
        </Mint>
      ) : (
        importantDing && (
          <Ding id="mint">
            <p className="text-white text-center align-items-center">
              <b>Attention!</b> <i>You have received a Ding</i>
            </p>
          </Ding>
        )
      )}
      <div className="p-3">
        <div className="d-flex justify-content-between align-items-center">
          <div className="d-flex justify-content-between align-items-center w-100">
            <div className="d-flex gap-2 align-items-center">
              <Widget
                src="near/widget/AccountProfileOverlay"
                props={{
                  accountId: kudo.receiver_id,
                  children: (
                    <KudoLink
                      href={`${widgets.kudoPage}?accountId=${kudo.receiver_id}&kudoId=${kudo.id}`}
                    >
                      <Widget
                        src="mob.near/widget/ProfileImage"
                        props={{
                          accountId: kudo.receiver_id,
                          imageClassName: "rounded-circle w-100 h-100",
                          style: {
                            width: "32px",
                            height: "32px",
                            marginRight: 5,
                          },
                        }}
                      />
                      <span>To {kudo.receiver_id}</span>
                    </KudoLink>
                  ),
                }}
              />
            </div>
            <Widget
              src={widgets.styledComponents}
              props={{
                Button: {
                  text: kudo.upvotes.length,
                  disabled:
                    !context.accountId ||
                    !isIAmHuman ||
                    kudo.upvotes.includes(context.accountId) ||
                    kudo.receiver_id === context.accountId ||
                    kudo.sender_id === context.accountId,
                  className:
                    kudo.kind === "k" ? "secondary dark" : "secondary danger",
                  onClick: (e) => handleUpvote(kudo),
                  image: {
                    url:
                      kudo.kind === "k"
                        ? isIAmHuman &&
                          kudo.receiver_id !== context.accountId &&
                          kudo.sender_id !== context.accountId &&
                          !kudo.upvotes.includes(context.accountId)
                          ? "https://bafkreicdwy5kpbid7qn2q4yt4lx6oo24kosa7t2ravqg54pmpb62mp64eq.ipfs.nftstorage.link"
                          : "https://bafkreidz6ybnsss2ulwg236fvp3cm5ksdqpsfziwhvnx4ee7maqpcl2jde.ipfs.nftstorage.link/"
                        : "https://bafkreia6ux4wzaktmwxxnkzd7tbhpuxhlp352twzsunc6vetza76u6clwy.ipfs.nftstorage.link/",
                  },
                },
              }}
            />
          </div>
        </div>
        <Description className="text-secondary">
          <Widget
            src="mob.near/widget/SocialMarkdown"
            props={{ text: trimText(kudo.message) }}
          />
        </Description>
        {kudo.icon && <ImageTag src={`https://ipfs.io/ipfs/${kudo.icon}`} />}
        {kudoTags.length > 0 && (
          <Tags className="d-flex gap-2">
            {kudoTags.map((tag) => (
              <Widget
                src={widgets.styledComponents}
                props={{
                  Tag: { title: tag },
                }}
              />
            ))}
          </Tags>
        )}

        <div className="d-flex justify-content-between align-items-center pt-2">
          <CreatedAt className="gap-1">
            <i className="bi bi-clock" />
            {getDateAgo()}
            {kudo.sender_id && (
              <div>
                by <b>{kudo.sender_id}</b>
              </div>
            )}
          </CreatedAt>
          <div className="d-flex justify-content-between align-items-center gap-2">
            {kudo.comments.length > 0 && (
              <Widget
                src={widgets.styledComponents}
                props={{
                  Link: {
                    className: "secondary dark",
                    text: kudo.comments.length,
                    size: "sm",
                    icon: <i className="bi bi-chat-dots-fill m-0" />,
                    href: `${widgets.kudoPage}?accountId=${kudo.receiver_id}&kudoId=${kudo.id}`,
                  },
                }}
              />
            )}
            <Widget
              src={widgets.styledComponents}
              props={{
                Button: {
                  text: "Reply",
                  disabled: !isIAmHuman,
                  size: "sm",
                  icon: <i className="bi bi-arrow-90deg-left" />,
                  onClick: () => State.update({ addCommentIsOpen: true }),
                },
              }}
            />
          </div>
        </div>
      </div>
    </Container>

    {state.addCommentIsOpen && (
      <Widget
        src={widgets.addComment}
        props={{
          kudo,
          comment: {
            id: null,
            owner_id: kudo.receiver_id,
            message: kudo.message,
            created_at: kudo.created_at,
          },
          onHide: () => State.update({ addCommentIsOpen: false }),
        }}
      />
    )}
    {state.mintKudoIsOpen && (
      <Widget
        src={widgets.mintSbt}
        props={{
          kudoId: kudo.id,
          onHide: () => State.update({ mintKudoIsOpen: false }),
        }}
      />
    )}
  </>
);

'''
'''--- NDC/Kudos/CommentCard.js ---
const { kudo, comment, isIAmHuman, kudosContract } = props;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  addComment: "kudos.ndctools.near/widget/NDC.Kudos.AddComment",
};

const Container = styled.div`
  border-radius: 10px;
  background: #fff;

  @media (max-width: 768px) {
    background: #fff;
  }
`;

const Description = styled.div`
  width: 100%
  font-weight: 400;
  font-size: ${(props) => (props.secondary ? "12px" : "14px")};
  margin: ${(props) => (props.secondary ? "5px 0 0 0" : "12px 0")};
`;

const CreatedAt = styled.div`
  font-size: 12px;
  font-style: italic;
  font-weight: 300;

  b {
    font-weight: 500;
  }
`;

const StyledLink = styled.a`
  color: ${(props) =>
    props.secondary ? "grey !important" : "black !important"};
  width: 80%;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
  font-size: ${(props) => (props.secondary ? "14px" : "16px")};
`;

const ReplyTo = styled.div`
  margin-bottom: 20px;
  background: #f8f8f9;
  padding: 10px;
  border-radius: 6px;
`;

const Hr = styled.div`
  background: #d0d6d9;
  border-radius: 3px;
  width: 2px;
  height: 40px;
  margin-right: 10px;
`;

const UserProfileDiv = styled.div`
  .userImg {
    width: ${(props) => (!props.secondary ? "32px" : "24px")};
    height: ${(props) => (!props.secondary ? "32px" : "24px")};
  }
`;

const getDateAgo = () => {
  const now = new Date().getTime();
  const current = new Date(parseInt(comment.created_at)).getTime();

  const diff = now - current;
  let days = Math.floor(diff / (1000 * 60 * 60 * 24));
  let hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
  let minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
  let seconds = Math.floor((diff % (1000 * 60)) / 1000);

  if (days > 0) return `${days} days ago`;
  if (hours > 0) return `${hours} hours ago`;
  if (minutes > 0) return `${minutes} minutes ago`;
  if (seconds > 0) return `${seconds} seconds ago`;

  return "";
};

const handleShare = (e) => e.preventDefault();

State.init({
  isOpen: false,
  isEdit: false,
});

const UserProfile = ({ secondary, ownerId }) => (
  <UserProfileDiv
    secondary={secondary}
    className="d-flex justify-content-between align-items-center"
  >
    <Widget
      src="near/widget/AccountProfileOverlay"
      props={{
        accountId: ownerId,
        children: (
          <div className="d-flex justify-content-between align-items-center w-100">
            <div className="d-flex gap-2 align-items-center">
              <Widget
                src="mob.near/widget/ProfileImage"
                props={{
                  accountId: ownerId,
                  imageClassName: "userImg rounded-circle",
                  style: {
                    width: secondary ? "24px" : "32px",
                    height: secondary ? "24px" : "32px",
                  },
                }}
              />
              <StyledLink
                secondary={secondary}
                href={`https://near.org/near/widget/ProfilePage?accountId=${ownerId}`}
              >
                {ownerId}
              </StyledLink>
            </div>
          </div>
        ),
      }}
    />
  </UserProfileDiv>
);

const trimMessage = (message) => {
  const postfix = message.length > 20 ? "..." : "";
  return `${message.slice(0, 20)}${postfix}`;
};

const base64decode = (encodedValue) => {
  let buff = Buffer.from(encodedValue, "base64");
  return JSON.parse(buff.toString("utf-8"));
};

return (
  <>
    <Container>
      <div className="p-3">
        {comment.parent_comment && (
          <ReplyTo className="d-flex align-items-center">
            <Hr />
            <div>
              <UserProfile
                secondary
                ownerId={base64decode(comment.parent_comment).s}
              />
              <Description secondary className="text-secondary">
                {trimMessage(base64decode(comment.parent_comment).m)}
              </Description>
            </div>
          </ReplyTo>
        )}
        <UserProfile ownerId={comment.owner_id} />
        <Description className="text-secondary">
          <Widget
            src="mob.near/widget/SocialMarkdown"
            props={{ text: comment.message }}
          />
        </Description>
        <div className="d-flex justify-content-between align-items-center">
          <CreatedAt className="gap-1">
            <i className="bi bi-clock" />
            {getDateAgo()}
          </CreatedAt>
          <div className="d-flex justify-content-between align-items-center gap-2">
            <Widget
              src={widgets.styledComponents}
              props={{
                Button: {
                  size: "sm",
                  className: "secondary dark",
                  icon: <i className="bi bi-share fs-6"></i>,
                },
              }}
            />
            {/* {context.accountId === comment.owner_id && (
              <Widget
                src={widgets.styledComponents}
                props={{
                  Button: {
                    size: "sm",
                    text: "Edit",
                    className: "primary dark",
                    icon: <i className="bi bi-pencil"></i>,
                    onClick: () => State.update({ isOpen: true, isEdit: true }),
                  },
                }}
              />
            )} */}
            <Widget
              src={widgets.styledComponents}
              props={{
                Button: {
                  text: "Reply",
                  disabled: !isIAmHuman,
                  size: "sm",
                  icon: <i className="bi bi-arrow-90deg-left" />,
                  onClick: () => State.update({ isOpen: true, isEdit: false }),
                },
              }}
            />
          </div>
        </div>
      </div>
    </Container>

    {state.isOpen && (
      <Widget
        src={widgets.addComment}
        props={{
          kudo,
          edit: false, //state.isEdit,
          comment: {
            id: comment.id,
            owner_id: comment.owner_id,
            message: comment.message,
            created_at: comment.created_at,
          },
          onHide: () => State.update({ isOpen: false }),
        }}
      />
    )}
  </>
);

'''
'''--- NDC/Kudos/CongratsMintModal.js ---
const { onHide } = props;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const Modal = styled.div`
  position: fixed;
  display: flex;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const ModalContent = styled.div`
  background: #f8f8f9;
  margin: 100px auto;
  padding: 20px;
  border-radius: 10px;
  width: 30%;

  @media (max-width: 1200px) {
    width: 50%;
  }

  @media (max-width: 768px) {
    width: 90%;
  }

  h3 {
    margin-bottom: 20px;
    font-weight: 700;
  }

  h6 {
    font-weight: 400;
  }
`;

const Gift = styled.div`
  font-size: 150px;
`;

const handleShare = () => {};

return (
  <Modal>
    <ComponentWrapper>
      <ModalContent>
        <div className="w-100 d-flex justify-content-end">
          <div className="pb-3" onClick={onHide}>
            <i class="bi bi-x-lg"></i>
          </div>
        </div>
        <h3 className="text-center">
          You have received “Proof of Kudos” Soul Bound Token!
        </h3>
        <h6 className="text-secondary text-center px-2">
          Congratulations, check out you new “Proof of Kudos” Soul Bound Token!
        </h6>
        <div className="w-100 d-flex justify-content-center">
          <img
            className="rounded my-4"
            src="https://bafkreiea7fbwne4k3e535ri2gw5tqqqnhmljdcyufat4d3r5alsev6pguu.ipfs.nftstorage.link/"
          />
        </div>
        <div className="d-flex justify-content-center w-100">
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Tweet and Share",
                icon: <i class="bi bi-twitter"></i>,
                onClick: handleShare,
              },
            }}
          />
        </div>
      </ModalContent>
    </ComponentWrapper>
  </Modal>
);

'''
'''--- NDC/Kudos/Header.js ---
const { isIAmHuman } = props;

const widget = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const Header = styled.div`
  background: black;
`;

return (
  <Header className="d-flex p-3 px-4 align-items-center rounded justify-content-between">
    <Widget
      src="mob.near/widget/Image"
      props={{
        image: {
          url: "https://bafkreicrlj3lgygabo37j6gelyamwvm5qj4vtd3sid62dlbr7s6wi3qjhm.ipfs.nftstorage.link/",
        },
        alt: "kudos",
        style: {
          height: "30px",
          objectFit: "cover",
        },
        fallbackUrl:
          "https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm",
      }}
    />
    {!isIAmHuman && (
      <Widget
        src={widget.styledComponents}
        props={{
          Link: {
            text: "Verify as Human",
            href: "https://i-am-human.app/",
          },
        }}
      />
    )}
  </Header>
);

'''
'''--- NDC/Kudos/Kudo/MintSbt.js ---
const { onHide, kudoId } = props;

const kudosContract = "kudos.ndctools.near";
const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const Modal = styled.div`
  position: fixed;
  display: flex;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const ModalContent = styled.div`
  background: #f8f8f9;
  margin: 100px auto;
  padding: 20px;
  border-radius: 10px;
  width: 30%;

  @media (max-width: 1200px) {
    width: 50%;
  }

  @media (max-width: 768px) {
    width: 90%;
  }

  h3 {
    margin-bottom: 20px;
    font-weight: 700;
  }

  h6 {
    font-weight: 400;
  }
`;

const Gift = styled.div`
  font-size: 150px;
`;

const handleMintSBT = () => {
  Near.call(
    kudosContract,
    "exchange_kudos_for_sbt",
    {
      kudos_id: kudoId,
    },
    "300000000000000",
    8000000000000000000000
  ).then((_data) => onHide());
};

return (
  <Modal>
    <ComponentWrapper>
      <ModalContent>
        <div className="w-100 d-flex justify-content-end">
          <div className="pb-3" onClick={onHide}>
            <i class="bi bi-x-lg"></i>
          </div>
        </div>
        <h3 className="text-center">
          You can now mint a “Proof of Kudos” Soul Bound Token
        </h3>
        <h6 className="text-secondary text-center px-2">
          Congratulations, you have received enough social proof to mint a
          “Proof of Kudos” Soul Bond Token. Don't wait!
        </h6>
        <Gift className="text-center">🎁</Gift>
        <div className="d-flex justify-content-center w-100">
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Mint your Proof of Kudos SBT!",
                onClick: handleMintSBT,
              },
            }}
          />
        </div>
      </ModalContent>
    </ComponentWrapper>
  </Modal>
);

'''
'''--- NDC/Kudos/Kudo/Page.js ---
const { kudoId, accountId } = props;

const kudosContract = "kudos.ndctools.near";
const registryContract = "registry.i-am-human.near";

const widgets = {
  header: "kudos.ndctools.near/widget/NDC.Kudos.Header",
  navigation: "kudos.ndctools.near/widget/NDC.Kudos.Navigation",
  card: "kudos.ndctools.near/widget/NDC.Kudos.Card",
  commentCard: "kudos.ndctools.near/widget/NDC.Kudos.CommentCard",
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  addKudo: "kudos.ndctools.near/widget/NDC.Kudos.AddKudo",
  back: "https://near.org/kudos.ndctools.near/widget/NDC.Kudos.Main",
};

State.init({
  isIAmHuman: false,
  isOpen: false,
  kind: "",
  loading: false,
  kudo: null,
});

const isHuman = Near.view(registryContract, "is_human", {
  account: context.accountId,
});

let kudo = Social.getr(`${kudosContract}/kudos/${accountId}/${kudoId}`);

kudo = {
  created_at: kudo.created_at,
  icon: kudo.icon || null,
  kind: kudo.kind,
  message: kudo.message,
  sender_id: kudo.sender_id,
  receiver_id: accountId,
  tags: kudo.tags,
  id: kudoId,
  comments: kudo.comments ? Object.entries(kudo.comments) : [],
  upvotes: kudo.upvotes ? Object.keys(kudo.upvotes) : [],
};

State.update({ isIAmHuman: isHuman[0][1].length > 0, kudo });

const BackLink = styled.a`
  color: black;
  font-weight: 600;

  &:hover {
    text-decoration: none;
    color: black;
  }
`;

const Container = styled.div`
  margin: 20px 0;
`;

const CenterSection = styled.div`
  padding: 0;
  @media (max-width: 768px) {
    margin: 20px 0;
  }
`;

const Section = styled.div`
  padding: 20px;
  background: #f8f8f9;
  border-radius: 10px;
`;

const H5 = styled.h5`
  margin-bottom: 20px;
`;

const FilterButtonContainer = styled.div`
  width: 340px;

  @media only screen and (max-width: 1061px) {
    width: 100%;
  }
`;

const Filter = styled.div`
  margin-top: 20px;
  padding: 16px;
  background: #f8f8f9;
  border-radius: 8px;

  @media only screen and (max-width: 1061px) {
    flex-direction: column;
  }
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const KudoTitle = styled.h5`
  padding-bottom: 10px;

  @media (max-width: 768px) {
    display: none;
  }
`;

const CommentTitle = styled.h5`
  padding-bottom: 10px;
`;

const base64decode = (encodedValue) => {
  let buff = Buffer.from(encodedValue, "base64");
  return JSON.parse(buff.toString("utf-8"));
};

const Loader = () => (
  <span
    className="spinner-grow spinner-grow-sm me-1"
    role="status"
    aria-hidden="true"
  />
);

return (
  <div>
    <Widget src={widgets.header} props={{ isIAmHuman: state.isIAmHuman }} />
    {state.isIAmHuman && (
      <Filter className="d-flex justify-content-end gap-2">
        <FilterButtonContainer className="d-flex gap-2">
          <Widget
            src={widgets.styledComponents}
            disabled={!state.isIAmHuman}
            props={{
              Button: {
                text: "Give a Kudo",
                className: "primary justify-content-center w-100",
                image: {
                  url: "https://bafkreieynbjyuycbo7naqp5dtiajcsmpiwyt7n2mk35746463nkcjte2yy.ipfs.nftstorage.link/",
                },
                onClick: () => State.update({ isOpen: true, kind: "k" }),
              },
            }}
          />
          <Widget
            src={widgets.styledComponents}
            disabled={!state.isIAmHuman}
            props={{
              Button: {
                text: "Give a Ding",
                className: "justify-content-center w-100 primary danger",
                image: {
                  url: "https://bafkreigkzvete56d25gwabrb3msxegxley4t6csppqdik4mh45amimjubq.ipfs.nftstorage.link/",
                },
                onClick: () => State.update({ isOpen: true, kind: "d" }),
              },
            }}
          />
        </FilterButtonContainer>

        {state.isOpen && (
          <Widget
            src={widgets.addKudo}
            props={{
              onHide: () => State.update({ isOpen: false }),
              kind: state.kind,
            }}
          />
        )}
      </Filter>
    )}
    <Container className="d-flex row">
      <CenterSection className="w-100">
        <BackLink href={widgets.back}>
          <i className="bi bi-chevron-left mr-2" />
          <span>Back</span>
        </BackLink>
        <div className="d-flex flex-wrap mt-4 gap-2">
          <Section className="col p-3">
            <KudoTitle>Kudo</KudoTitle>
            {state.kudo ? (
              <Widget
                src={widgets.card}
                props={{
                  isIAmHuman: state.isIAmHuman,
                  kudosContract,
                  kudo: state.kudo,
                  hideMintBtn: true,
                  inverseColor: true,
                }}
              />
            ) : (
              <Loader />
            )}
          </Section>
          <Section className="col p-3">
            <CommentTitle>Comments ({kudo.comments.length})</CommentTitle>
            <div className="d-flex flex-column gap-3">
              {kudo.comments.map(([id, comment]) => (
                <Widget
                  src={widgets.commentCard}
                  props={{
                    isIAmHuman: state.isIAmHuman,
                    kudosContract,
                    kudo: {
                      id: kudoId,
                      receiver_id: accountId,
                    },
                    comment: {
                      id,
                      parent_comment: kudo.comments.find(
                        ([id, _comment]) => id === base64decode(comment).p
                      )[1],
                      owner_id: base64decode(comment).s,
                      created_at: base64decode(comment).t,
                      message: base64decode(comment).m,
                    },
                  }}
                />
              ))}
            </div>
          </Section>
        </div>
      </CenterSection>
    </Container>
  </div>
);

'''
'''--- NDC/Kudos/Main.js ---
const { transactionHashes } = props;

const kudosContract = "kudos.ndctools.near";
const registryContract = "registry.i-am-human.near";

const widgets = {
  header: "kudos.ndctools.near/widget/NDC.Kudos.Header",
  filter: "election.ndctools.near/widget/NDC.Elections.Filter",
  navigation: "kudos.ndctools.near/widget/NDC.Kudos.Navigation",
  card: "kudos.ndctools.near/widget/NDC.Kudos.Card",
  addKudo: "kudos.ndctools.near/widget/NDC.Kudos.AddKudo",
  congratsMintModal: "kudos.ndctools.near/widget/NDC.Kudos.CongratsMintModal",
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

State.init({
  selectedItem: "Latest",
  searchAccId: "",
  emptyResult: false,
  isIAmHuman: false,
  kudos: [],
  isOpen: false,
  kind: "",
  congratsMintModal: false,
  init: true,
});

const getKudos = () => {
  let data = Social.getr(`${kudosContract}/kudos`);
  let formattedKudos = [];

  if (data && Object.entries(data).length > 0) {
    Object.entries(data).map(([receiverId, kudoObject], index) => {
      Object.entries(kudoObject).map(([id, kudo]) => {
        formattedKudos.push({
          id,
          created_at: kudo.created_at,
          icon: kudo.icon,
          kind: kudo.kind,
          message: kudo.message,
          sender_id: kudo.sender_id,
          receiver_id: receiverId,
          tags: kudo.tags,
          comments: kudo.comments ? Object.entries(kudo.comments) : [],
          upvotes: kudo.upvotes ? Object.keys(kudo.upvotes) : [],
        });
      });
    });
  }

  let filteredKudos = [];

  switch (state.selectedItem) {
    case "My":
      filteredKudos = formattedKudos.filter(
        (kudo) =>
          kudo.receiver_id === context.accountId ||
          kudo.sender_id === context.accountId
      );
      break;
    case "Trending":
      filteredKudos = formattedKudos.sort(
        (a, b) => b.upvotes.length - a.upvotes.length
      );
      break;
    case "Latest":
      filteredKudos = formattedKudos.sort(
        (a, b) => b.created_at - a.created_at
      );
      break;
  }

  if (state.searchAccId) {
    filteredKudos = filteredKudos.filter((kudo) =>
      kudo.receiver_id.includes(state.searchAccId)
    );
  }

  if (formattedKudos.length === 0)
    State.update({ kudos: [], emptyResult: false });
  else
    State.update({
      kudos: filteredKudos,
      emptyResult: filteredKudos.length === 0,
    });
};

const isHuman = Near.view(registryContract, "is_human", {
  account: context.accountId,
});
const sbts = Near.view(registryContract, "sbt_tokens", {
  issuer: kudosContract,
});

State.update({
  isKudoMinted: sbts && sbts.some((sbt) => sbt.owner === context.accountId),
  isIAmHuman: isHuman && isHuman[0][1].length > 0,
});

getKudos();

const checkTxnMethod = (res, name) => {
  const txn = res.body.result.transaction;

  return (
    res.body.result.status.SuccessValue &&
    txn.signer_id === context.accountId &&
    txn.actions[0].FunctionCall.method_name === name
  );
};

asyncFetch("https://rpc.testnet.near.org", {
  method: "POST",
  headers: {
    Accept: "application/json",
    "Content-Type": "application/json",
  },
  body: JSON.stringify({
    jsonrpc: "2.0",
    id: "dontcare",
    method: "tx",
    params: [transactionHashes, context.accountId],
  }),
}).then((res) => {
  if (checkTxnMethod(res, "exchange_kudos_for_sbt"))
    State.update({ congratsMintModal: true });

  console.log(res);
  // if (checkTxnMethod(res, "add_kudo"))
  //   State.update({ congratsMintModal: true });
});

const Container = styled.div`
  margin: 20px 0;
`;

const LeftSection = styled.div`
  padding: 20px;
  background: #f8f8f9;
  border-radius: 10px;

  @media (max-width: 768px) {
    background: #f8f8f9;
    padding: 16px;
    border-bottom-right-radius: 0;
    border-bottom-left-radius: 0;
  }
`;

const CenterSection = styled.div`
  background: #fff;
  min-height: 100%;

  @media (max-width: 768px) {
    background: #f8f8f9;
    border-top-right-radius: 0;
    border-top-left-radius: 0;
  }
`;

const H5 = styled.h5`
  padding-bottom: 10px;

  &.thin {
    font-weight: 400;
  }
`;

const H4 = styled.h5`
  padding-bottom: 10px;

  @media (max-width: 768px) {
    display: none;
  }
`;
const H3 = styled.h5`
  padding: 20px 0px 0 10px;

  @media (max-width: 768px) {
    display: none;
  }
`;

const FilterButtonContainer = styled.div`
  padding: 16px;
  width: 340px;
  border-radius: 8px;
  background: #f8f8f9;

  @media only screen and (max-width: 1061px) {
    width: 100%;
  }
`;

const Filter = styled.div`
  margin-top: 20px;

  @media only screen and (max-width: 1061px) {
    flex-direction: column;
  }
`;

const Toolbar = styled.div`
  margin-left: 20px;
  @media only screen and (max-width: 1061px) {
    margin: 10px 0 0 0;
  }
`;

return (
  <div>
    <Widget src={widgets.header} props={{ isIAmHuman: state.isIAmHuman }} />
    <Filter className="d-flex">
      <div className="w-100">
        <Widget
          src={widgets.filter}
          props={{
            handleFilter: (e) => State.update({ searchAccId: e.target.value }),
            candidateId: state.searchAccId,
            placeholder: "Search by account name",
          }}
        />
      </div>
      {state.isIAmHuman && (
        <Toolbar>
          <FilterButtonContainer className="d-flex gap-2">
            <Widget
              src={widgets.styledComponents}
              disabled={!state.isIAmHuman}
              props={{
                Button: {
                  text: "Give a Kudo",
                  className: "primary justify-content-center w-100",
                  image: {
                    url: "https://bafkreieynbjyuycbo7naqp5dtiajcsmpiwyt7n2mk35746463nkcjte2yy.ipfs.nftstorage.link/",
                  },
                  onClick: () => State.update({ isOpen: true, kind: "k" }),
                },
              }}
            />
            <Widget
              src={widgets.styledComponents}
              disabled={!state.isIAmHuman}
              props={{
                Button: {
                  text: "Give a Ding",
                  className: "justify-content-center w-100 primary danger",
                  image: {
                    url: "https://bafkreigkzvete56d25gwabrb3msxegxley4t6csppqdik4mh45amimjubq.ipfs.nftstorage.link/",
                  },
                  onClick: () => State.update({ isOpen: true, kind: "d" }),
                },
              }}
            />
          </FilterButtonContainer>
        </Toolbar>
      )}
      {state.isOpen && (
        <Widget
          src={widgets.addKudo}
          props={{
            onHide: () => State.update({ isOpen: false }),
            kind: state.kind,
          }}
        />
      )}
    </Filter>
    <Container className="d-flex row">
      <LeftSection className="col-lg-3">
        <H4>Home</H4>
        <Widget
          src={widgets.navigation}
          props={{
            selectedItem: state.selectedItem,
            handleSelect: (itemType) =>
              State.update({ selectedItem: itemType }),
          }}
        />
      </LeftSection>
      <CenterSection className="col-lg-9">
        <>
          <H3>{state.selectedItem} Kudos</H3>
          {state.emptyResult ? (
            <div className="w-100 h-100 d-flex justify-content-center align-items-center">
              <div className="text-center d-flex flex-column gap-2">
                <i className="bi bi-search fs-1"></i>
                <H5 className="text-secondary thin">
                  There are no kudos <br />
                  matches searching request
                </H5>
              </div>
            </div>
          ) : (
            <div className="d-flex flex-wrap">
              {state.kudos.length > 0 ? (
                state.kudos.map((kudo, index) => (
                  <div className="col col-lg-6 p-2">
                    <Widget
                      key={index}
                      src={widgets.card}
                      props={{
                        isIAmHuman: state.isIAmHuman,
                        isKudoMinted: state.isKudoMinted,
                        kudosContract,
                        kudo,
                      }}
                    />
                  </div>
                ))
              ) : (
                <div className="w-100 h-100 d-flex justify-content-center align-items-center">
                  <div className="text-center d-flex flex-column gap-2">
                    <i className="bi bi-search fs-1"></i>
                    <H5 className="text-secondary thin">There are no kudos</H5>
                  </div>
                </div>
              )}
            </div>
          )}
        </>
      </CenterSection>
    </Container>

    {state.congratsMintModal && state.init && (
      <Widget
        src={widgets.congratsMintModal}
        props={{
          onHide: () => State.update({ congratsMintModal: false, init: false }),
        }}
      />
    )}
  </div>
);

'''
'''--- NDC/Kudos/Navigation.js ---
const { selectedItem, handleSelect } = props;

const items = {
  Latest: {
    title: "Recent",
    src: "https://bafkreibyoqwxexke7agytjxvztsiezcfpkxkagbatqmp3tt6u4mv3ub7bi.ipfs.nftstorage.link/",
    srcSelected:
      "https://bafkreif4clvv3j4dyyxuowyosyklnh5c62emnh23e55gip3clsgkto3qi4.ipfs.nftstorage.link/",
  },
  Trending: {
    title: "Trending",
    src: "https://bafkreiekyoaz3zz6i6ietcudab47u5a7btdhco6srdg6sgbmtgjhaexr2q.ipfs.nftstorage.link",
    srcSelected:
      "https://bafkreieeoqtjoyp64oxwvzu2qtjdxzapbpug5l6kgwfsnb7y43mpjhm52e.ipfs.nftstorage.link",
  },
  My: {
    title: "My",
    src: "https://bafkreicdwy5kpbid7qn2q4yt4lx6oo24kosa7t2ravqg54pmpb62mp64eq.ipfs.nftstorage.link",
    srcSelected:
      "https://bafkreibchxu3obfelbn3dhwpucfvc4yqopodp2khlcnzyw2mcr7zpg2mpi.ipfs.nftstorage.link",
  },
};

const Title = styled.h6`
  margin-bottom: 0;
`;

const ImgContainer = styled.div`
  margin-right: ${(props) => (props.mobile ? "8px" : "20px")};
`;

const DesktopNav = styled.div`
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.05);
  border-radius: 8px;
  background: ${(props) => (props.selected ? "#4ba6ee" : "#FFFFFF")};
  color: ${(props) => (props.selected ? "white" : "inherit")};
`;

const MobileNav = styled.div`
  border-bottom: ${(props) =>
    props.selected ? "2px solid #4ba6ee" : "2px solid rgb(248, 248, 249)"};
  color: ${(props) => (props.selected ? "#4ba6ee" : "inherit")};
`;

const Desktop = styled.div`
  display: flex;

  @media (max-width: 768px) {
    display: none;
  }
`;

const Mobile = styled.div`
  display: none;

  @media (max-width: 768px) {
    display: flex;
  }
`;

const Nav = ({ itemType, mobile }) => (
  <div className="d-flex align-items-center">
    <ImgContainer mobile={mobile}>
      <Widget
        src="mob.near/widget/Image"
        props={{
          image: {
            url:
              selectedItem === itemType && !mobile
                ? items[itemType].srcSelected
                : items[itemType].src,
          },
          style: { height: "24px" },
          alt: items[itemType].title,
          fallbackUrl:
            "https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm",
        }}
      />
    </ImgContainer>
    <Title>
      {items[itemType].title} {mobile ? "" : "Kudos"}
    </Title>
  </div>
);

const GroupItem = ({ itemType, mobile }) => (
  <>
    {mobile ? (
      <MobileNav
        role="button"
        className="d-flex w-100 p-3 align-items-center justify-content-center"
        onClick={() => handleSelect(itemType)}
        selected={selectedItem === itemType}
      >
        <Nav itemType={itemType} mobile={mobile} />
      </MobileNav>
    ) : (
      <DesktopNav
        role="button"
        className="d-flex w-100 p-3 px-4 align-items-center justify-content-between mb-2"
        onClick={() => handleSelect(itemType)}
        selected={selectedItem === itemType}
      >
        <Nav itemType={itemType} mobile={mobile} />
      </DesktopNav>
    )}
  </>
);

return (
  <>
    <Desktop className="flex-column gap-1 justify-content-between">
      <GroupItem itemType="Latest" />
      <GroupItem itemType="Trending" />
      <GroupItem itemType="My" />
    </Desktop>

    <Mobile className="flex-row justify-content-between">
      <GroupItem mobile itemType="Latest" />
      <GroupItem mobile itemType="Trending" />
      <GroupItem mobile itemType="My" />
    </Mobile>
  </>
);

'''
'''--- NDC/Modal.js ---
const { title, description, content, Button, SecondaryButton } = props;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const Modal = styled.div`
  position: fixed;
  display: flex;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
  backdrop-filter: blur(3px);
`;

const ComponentWrapper = styled.div`
  position: absolute;
  width: 100%;
  z-index: 100;
  top: 55%;
  left: 50%;
  transform: translate(-50%, -50%);
`;

const ModalContent = styled.div`
  background: #f8f8f9;
  margin: 100px auto;
  padding: 20px;
  border-radius: 10px;
  width: 30%;

  @media (max-width: 1200px) {
    width: 50%;
  }

  @media (max-width: 768px) {
    width: 90%;
  }

  h3 {
    margin-bottom: 20px;
    font-weight: 700;
  }

  h6 {
    font-weight: 400;
    font-size: 14px;
    line-height: 120%;
  }
`;

return (
  <Modal>
    <ComponentWrapper>
      <ModalContent>
        <div className="w-100 d-flex justify-content-end">
          <div className="pb-3" onClick={Button.onCancel}>
            <i class="bi bi-x-lg"></i>
          </div>
        </div>
        <h3 className="text-center">{title}</h3>
        <h6 className="text-secondary text-center px-2">{description}</h6>
        {content}
        <div className="d-flex justify-content-center gap-2 w-100">
          {SecondaryButton ? (
            <Widget
              src={widgets.styledComponents}
              props={{
                [SecondaryButton.type ?? "Button"]: {
                  className: "secondary dark",
                  disabled: SecondaryButton.disabled,
                  text: SecondaryButton.title,
                  onClick:
                    SecondaryButton.type === "Link"
                      ? null
                      : SecondaryButton.onSubmit,
                  href:
                    SecondaryButton.type === "Link"
                      ? SecondaryButton.href
                      : null,
                  doNotOpenNew:
                    SecondaryButton.type === "Link"
                      ? SecondaryButton.doNotOpenNew
                      : null,
                },
              }}
            />
          ) : (
            <Widget
              src={widgets.styledComponents}
              props={{
                Button: {
                  className: "secondary dark",
                  text: "Cancel",
                  onClick: Button.onCancel,
                },
              }}
            />
          )}
          <Widget
            src={widgets.styledComponents}
            props={{
              [Button.type ?? "Button"]: {
                text: Button.title,
                disabled: Button.disabled,
                onClick: Button.type === "Link" ? null : Button.onSubmit,
                href: Button.type === "Link" ? Button.href : null,
                doNotOpenNew:
                  Button.type === "Link" ? Button.doNotOpenNew : null,
              },
            }}
          />
        </div>
      </ModalContent>
    </ComponentWrapper>
  </Modal>
);

'''
'''--- NDC/Nomination/AddComment.js ---
const ModalCard = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;
const CommentCard = styled.div`
  display: flex;
  width: 400px;
  padding: 20px;
  flex-direction: column;
  align-items: flex-start;
  gap: 16px;
  border-radius: 10px;
  background: #fff;
  border: 1px solid transparent;
  margin-left: auto;
  margin-right: auto;
  margin-buttom: 50%;
  @media only screen and (max-width: 480px) {
    width: 90%;
  }
`;
const H1 = styled.h1`
  color: black;
  font-size: 14px;
  font-weight: 500;
`;
const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-end;
  gap: 20px;
  align-self: stretch;
`;
const CommentBody = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 16px;
  align-self: stretch;
`;
const BComment = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
  align-self: stretch;
`;
const BCommentmessage = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
  align-self: stretch;
`;
const BCMHeader = styled.div`
  display: flex;
  width: 100%;
  align-items: center;
  gap: 8px;
`;
const BCMProfile = styled.div`
  width: 28px;
  height: 28px;
  flex-shrink: 0;
  flex-direction: row;
  border-radius: 29px;
  background: #d0d6d9;
  text-align: center;
`;
const BCMProfileimg = styled.img`
  width: 28px;
  height: 28px;
  flex-shrink: 0;
  vertical-align: initial;
`;
const BCMProfileUsername = styled.label`
  display: flex;
  width: 100%;
  flex-direction: column;
  justify-content: center;
  flex-shrink: 0;
  color: #000;
  font-size: 14px;

  font-style: normal;
  font-weight: 500;
  line-height: 120%;
`;
const BCMMessage = styled.div`
  display: flex;
  flex-direction: column;
  align-self: stretch;
  color: #686b6d;
  font-size: 14px;

  font-style: normal;
  font-weight: 400;
  line-height: 120%;
`;
const BFooter = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  gap: 4px;
  align-self: stretch;
`;
const BFootercont = styled.div`
  display: flex;
  align-items: center;
  align-self: stretch;
`;
const BFootercontTime = styled.div`
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1 0 0;
`;
const BFCTimetext = styled.div`
  display: flex;
  height: 19.394px;
  flex-direction: column;
  justify-content: center;
  flex: 1 0 0;
  color: #000;
  font-size: 14px;

  font-style: normal;
  font-weight: 300;
  line-height: normal;
`;
const BFCButton = styled.div`
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 4px;
`;
const BFCButtonitem = styled.button`
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  border-radius: 4px;
  border-width: 1px;
  border: solid 1px #9333ea;

  background-image: linear-gradient(#fff, #fff),
    radial-gradient(circle at top left, #f0e1ce, #f0e1ce);
  background-origin: border-box;
  background-clip: padding-box, border-box;
`;
const BFCBIText = styled.label`
  font-size: 12px;

  font-style: normal;
  font-weight: 500;
  line-height: 24px;
  color: #9333ea;
  cursor: pointer;
`;
const NewComment = styled.textarea`
  width: 100%;
  display: flex;
  height: 100px;
  padding: 9px 10px 0px 10px;
  align-items: flex-start;

  gap: 10px;
  align-self: stretch;
  border-radius: 8px;
  border: 1px solid #d0d6d9;
  background: #fff;

  font-size: 12px;

  font-style: normal;
  font-weight: 400;
  line-height: 120%;
`;
const CommentFooter = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-end;
  justify-content: end;
  gap: 16px;
  align-self: stretch;
`;
const CFCancel = styled.button`
  display: flex;
  width: 107px;
  padding: 8px 12px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  color: #9333ea;
  border-radius: 10px;
  border-width: 1px;
  border: solid 1px #9333ea;

  background-image: linear-gradient(#fff, #fff),
    radial-gradient(circle at top left, #f0e1ce, #f0e1ce);
  background-origin: border-box;
  background-clip: padding-box, border-box;
  @media only screen and (max-width: 480px) {
    width: 100%;
  }
`;

const CFSubmit = styled.button`
  display: flex;
  width: 107px;
  padding: 8px 12px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  color: #000;
  display: flex;
  width: 107px;
  padding: 8px 12px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  border-radius: 10px;
  border-width: 1px;
  border: solid 1px transparent;

  background-image: linear-gradient(#ffd50d, #ffd50d),
    radial-gradient(circle at top left, #f0e1ce, #f0e1ce);
  background-origin: border-box;
  background-clip: padding-box, border-box;
  @media only screen and (max-width: 480px) {
    width: 100%;
  }
`;

const {
  nomination_contract,
  candidateOrReplay,
  username,
  profile_picture,
  originalComment,
  originalCommentID,
  timeago,
  _share_url,
} = props;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const CommentCandidate = () => {
  //Validate the Data outPut
  if (state.reply === null) {
    State.update({ e_message: "Write a comment " });
    return;
  }
  if (state.reply != "") {
    // call the smart contract Self nominate comment

    Near.call(
      nomination_contract,
      "comment",
      {
        candidate: username,
        comment: state.reply,
      },
      300000000000000
    ).then(() => {
      props.onClickCancel();
    });
  } else {
    //The fields are incomplete
  }
};
const CommenttoReplay = () => {
  //Validate the Data outPut
  if (state.reply != null) {
    // call the smart contract Self nominate comment
    /*   Near.call(
      nomination_contract
        ? nomination_contract
        : "nominations.ndc-gwg.near",
      "comment",
      {
        candidate: username,
        comment: state.reply,
      }
    ).then(() => {
      props.onClickCancel();
    });*/
  } else {
    //The fields are incomplete
  }
};
// candidateOrReplay :true-Comment candidate  :false-Comment to reply

State.init({
  theme,
  reply: "",
  share_url: _share_url,
  cancel: false,
  e_message: "",
  shareText: "Copy to the clipboard ",
});

const SetText = (txt) => {
  console.log("cop");
  State.update({ shareText: txt });
};

return (
  <ModalCard>
    <CommentCard>
      <H1>{candidateOrReplay ? " Add a Comment" : "Replay to comment"}</H1>
      <Container>
        {!candidateOrReplay ? (
          <>
            <CommentBody>
              <BComment>
                <BCommentmessage>
                  <BCMHeader>
                    <BCMProfile>
                      {profile_picture ? (
                        <BCMProfileimg
                          style={{ "border-radius": "20px" }}
                          alt="pic"
                          src={
                            "https://nativonft.mypinata.cloud/ipfs/" +
                            profile_picture
                          }
                        />
                      ) : (
                        <BCMProfileimg
                          alt="pic"
                          src={
                            "https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmTKv1yHQKRDQcmc5Jkv2jkaTx2Q1jJE9srHEmyYPq53vJ?preview=1"
                          }
                        />
                      )}
                    </BCMProfile>
                    <BCMProfileUsername>
                      {username ? "@" + username : "@user.near"}
                    </BCMProfileUsername>
                  </BCMHeader>
                  <BCMMessage>
                    {" "}
                    {originalComment
                      ? originalComment
                      : "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integerquam enim, dignissim sed ante at, convallis maximus enim. Duis  condimentum aliquam nisl nec sagittis. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer quam enim, dignissim  sed ante at, convallis maximus enim. Duis condimentum aliquam nisl nec sagittis."}
                  </BCMMessage>
                </BCommentmessage>
              </BComment>
              <BFooter>
                <label>{state.e_message}</label>
                <BFootercont>
                  <BFootercontTime>
                    <img
                      alt="schedule"
                      src={
                        "https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmP3uRUgZtqV3HAgcZoYaDA6JSPpFcpqULvgenWUs3ctSP"
                      }
                      style={{ width: "14px", height: "14px" }}
                    />
                    <BFCTimetext>
                      {" "}
                      {timeago ? timeago : "2 hours ago"}
                    </BFCTimetext>
                  </BFootercontTime>
                  <BFCButton>
                    <OverlayTrigger
                      key={placement}
                      placement={placement}
                      overlay={
                        <Tooltip id={`tooltip-${placement}`}>
                          {state.shareText}
                        </Tooltip>
                      }
                    >
                      <BFCButtonitem
                        onClick={() => {
                          SetText("Copied to the clipboard");
                          clipboard.writeText(state.share_url);
                        }}
                      >
                        <BFCBIText>Share</BFCBIText>
                        <img
                          alt="share"
                          src={
                            "https://emerald-related-swordtail-341.mypinata.cloud/ipfs/QmdFMobsnCyj9USY2mHtLzhu58Mz6BFpMx7tKPQGoWmsHY?preview=1"
                          }
                        />
                      </BFCButtonitem>
                    </OverlayTrigger>
                  </BFCButton>
                </BFootercont>
              </BFooter>
            </CommentBody>
            <hr
              style={{
                width: "100%",
                height: "0px",
                border: "1px solid rgba(130, 134, 136, 0.20)",
                flex: "none",
                background: "rgba(130, 134, 136, 0.20)",
                margin: "0px",
                "flex-grow": "0",
              }}
            />
          </>
        ) : (
          <></>
        )}
        <div class="w-100 col">
          <Widget
            src={widgets.styledComponents}
            props={{
              TextArea: {
                placeholder: "Reply here",
                maxLength: 2000,
                value: state.reply,
                handleChange: (e) =>
                  State.update({
                    reply: e.target.value.substring(0, 1000),
                  }),
              },
            }}
          />
        </div>
        <CommentFooter>
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Cancel",
                className: "secondary dark",
                onClick: props.onClickCancel,
              },
            }}
          />
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Submit",
                onClick: () => {
                  candidateOrReplay ? CommentCandidate() : CommenttoReplay();
                },
              },
            }}
          />
        </CommentFooter>
      </Container>
    </CommentCard>
  </ModalCard>
);

'''
'''--- NDC/Nomination/Candidate/Comment.js ---
const { data, nomination_contract } = props;

State.init({
  showModal: false,
  hasReply: false,
  nominationData: Social.getr(`${data.commentator}/nominations`),
});

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  comment: "nomination.ndctools.near/widget/NDC.Nomination.Candidate.Comment",
};

function handleDeleteComment() {
  Near.call(nomination_contract, "remove_comment", {
    candidate: data.candidate,
    comment: data.id,
  });
}

const CommentCard = styled.div`
  width: 100%;
  display: flex;
  padding: 14px 16px;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
  border-radius: 10px;
  background: ${(props) => (props.owner ? "#4ba6ee17" : "#fff")};
  border: 1px solid ${(props) => (props.owner ? "#4BA6EE" : "#fff")};
`;

const CommentCardHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 8px;
`;

const CommentUserContent = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
`;

const ProfileImageComment = styled.img`
  width: 20px;
  height: 20px;
  flex-shrink: 0;
  border-radius: 20px;
`;

const CommentUser = styled.p`
  color: #000;
  font-size: 12px;
  font-weight: 500;
  line-height: 120%;
  margin: 0px;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const ReplyCounterDiv = styled.div`
  display: flex;
  align-items: center;
  gap: 4px;
`;

const ReplyIconPurple = styled.img`
  width: 14px;
  height: 14px;
`;

const ReplyCounterText = styled.p`
  color: #000;
  font-size: 10px;
  font-weight: 500;
  margin: 0px;
`;

const CommentCardContent = styled.p`
  color: #585b5c;
  font-size: 12px;
  line-height: 18px;
  display: flex;
  flex-direction: column;
  margin: 0px;
`;

const CommentCardLowerSection = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: space-between;
  align-items: center;
  gap: 4px;
  width: 100%;
`;

const TimestampCommentDiv = styled.div`
  display: flex;
  align-items: center;
  gap: 4px;
  flex: 1 0 0;
`;

const TimestampIconComment = styled.img`
  width: 12px;
  height: 12px;
`;

const TimestampTextComment = styled.p`
  color: #000;
  font-size: 10px;
  font-weight: 300;
  margin: 0px;
`;

const CommentButtonDiv = styled.div`
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 4px;
`;

const DeleteCommentButton = styled.button`
  display: flex;
  width: 28px;
  padding: 2px 12px;
  justify-content: center;
  align-items: center;
  gap: 6px;
  align-self: stretch;
  border-radius: 4px;
  border: 1px solid #c23f38;
  background: #f1d6d5;
`;

const DeleteCommentIcon = styled.img`
  width: 14px;
  height: 14px;
  flex-shrink: 0;
`;

const ShareCommentButton = styled.button`
  display: flex;
  width: 28px;
  height: 28px;
  padding: 2px 12px;
  justify-content: center;
  align-items: center;
  gap: 6px;
  border-radius: 4px;
  border: solid 1px transparent;
  background-image: linear-gradient(white, white),
    radial-gradient(circle at top left, #9333ea 0%, #4f46e5 100%);
  background-origin: border-box;
  background-clip: padding-box, border-box;
`;

const ShareCommentIcon = styled.img`
  width: 14px;
  height: 14px;
  flex-shrink: 0;
`;

const ReplyCommentButton = styled.div`
  cursor: pointer;
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  align-self: stretch;
  border-radius: 4px;
  background: var(--buttons-yellow-default, #ffd50d);
`;

const ReplyCommentText = styled.p`
  color: var(--primary-black, #000);
  font-size: 12px;
  font-weight: 500;
  line-height: 24px;
  margin: 0px;
`;

const ReplyCommentIcon = styled.img`
  width: 14px;
  height: 14px;
`;

const CommentReplySeparator = styled.hr`
  height: 0px;
  margin: 16px 0 16px 0;
  border: 1px solid rgba(208, 214, 217, 1);
`;

const ReplyContainer = styled.div`
  display: flex;
  width: 260px;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
  margin: 0 0 0 35px;
`;

const ReplyHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  align-self: stretch;
`;

const ReplyContent = styled.p`
  color: #828688;
  font-size: 12px;
  line-height: 120%;
  margin: 0px;
`;

const ReplyLowerSection = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  gap: 4px;
`;

const ReplyButtonSection = styled.div`
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 4px;
`;

const DeleteReplyButton = styled.button`
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  align-self: stretch;
  border-radius: 4px;
  border: 1px solid #c23f38;
  background: #f1d6d5;
`;

const DeleteReplyText = styled.p`
  color: #c23f38;
  font-size: 12px;
  font-weight: 500;
  line-height: 24px;
  margin: 0px;
`;

const formatName = (name) =>
  name.length === 64
    ? `${name.slice(0, 4)}..${name.slice(name.length - 4, name.length)}`
    : name;

const handleFlag = () => {};

return (
  <CommentCard owner={data.commentator === data.candidate}>
    <CommentCardHeader>
      <CommentUserContent>
        <Widget
          src="mob.near/widget/ProfileImage"
          props={{
            accountId: data.commentator,
            imageClassName: "rounded-circle w-100 h-100",
            style: { width: "25px", height: "25px" },
          }}
        />
        <CommentUser>
          {data.removed ? "@[deleted]" : formatName(data.commentator)}
        </CommentUser>
      </CommentUserContent>
    </CommentCardHeader>
    <CommentCardContent>
      {data.removed ? (
        "This comment was deleted"
      ) : (
        <Widget
          src="mob.near/widget/SocialMarkdown"
          props={{ text: data.comment }}
        />
      )}
    </CommentCardContent>
    <CommentCardLowerSection>
      <TimestampCommentDiv>
        <i className="bi bi-clock" />
        <TimestampTextComment>
          {new Date(data.timestamp).toDateString()}
        </TimestampTextComment>
      </TimestampCommentDiv>
      <CommentButtonDiv>
        {data.removed ? (
          <></>
        ) : data.flagged ? (
          <i className="bi bi-flag-fill" />
        ) : context.accountId == data.commentator ? (
          <Widget
            src={widgets.styledComponents}
            props={{
              Button: {
                text: "Delete",
                size: "sm",
                className: "primary danger",
                onClick: handleDeleteComment,
                icon: <i className="bi bi-trash"></i>,
              },
            }}
          />
        ) : (
          <i className="bi bi-flag" onClick={handleFlag} />
        )}
      </CommentButtonDiv>
    </CommentCardLowerSection>
  </CommentCard>
);

'''
'''--- NDC/Nomination/Candidate/DesktopView.js ---
const {
  data,
  house,
  accountId,
  nomination_contract,
  registry_contract,
  api_key,
} = props;

State.init({
  tabSelected: "comments",
  verified: false,
  start: true,
  voted: false,
});

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  comment: "nomination.ndctools.near/widget/NDC.Nomination.Candidate.Comment",
  addComment: "nomination.ndctools.near/widget/NDC.Nomination.AddComment",
};

function getVerifiedHuman() {
  asyncFetch(
    `https://api.pikespeak.ai/sbt/has-sbt?holder=${context.accountId}&class_id=1&issuer=fractal.i-am-human.near&with_expired=false&registry=${registry_contract}`,
    {
      headers: {
        "x-api-key": api_key,
      },
    }
  ).then((res) => {
    State.update({ verified: res.body });
  });
  asyncFetch(
    `https://api.pikespeak.ai/nominations/is-upvoted-by?candidate=${accountId}&upvoter=${context.accountId}&contract=${nomination_contract}`,
    {
      headers: {
        "x-api-key": api_key,
      },
    }
  ).then((res) => {
    State.update({ voted: res.body });
  });
}

if (state.start) {
  getVerifiedHuman();
  State.update({
    start: false,
  });
}

function handleUpVote() {
  Near.call(
    nomination_contract,
    state.voted ? "remove_upvote" : "upvote",
    {
      candidate: accountId,
    },
    300000000000000,
    state.voted ? 0 : 1000000000000000000000
  );
}

const tabs = [
  { id: "declaration", title: "Declaration", icon: "bi bi-trophy-fill" },
  { id: "comments", title: "Comments", icon: "bi bi-chat-square-dots-fill" },
];

const DetailContent = styled.div`
  display: inline-flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
`;

const DetailCard = styled.div`
  display: flex;
  width: 358px;
  padding: 16px;
  flex-direction: column;
  align-items: flex-start;
  gap: 16px;
  border-radius: 10px;
  background: #f8f8f9;
`;

const TagContainer = styled.div`
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
  gap: 4px;
`;

const HouseTagDiv = styled.div`
  display: flex;
  padding: 4px 8px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  border-radius: 100px;
  background: var(
    --gradient-purple-gradient,
    linear-gradient(90deg, #9333ea 0%, #4f46e5 100%)
  );
`;

const HouseTagText = styled.p`
  color: #fff;
  font-size: 7px;
  font-weight: 500;
  line-height: 120%;
  margin: 0px;
`;

const TagDiv = styled.div`
  display: flex;
  justify-content: center;
  padding: 4px 8px;
  align-items: center;
  gap: 10px;
  border-radius: 100px;
  border: solid 1px transparent;
  border-radius: 80px;
  background-image: linear-gradient(#eae5f7, #eae5f7),
    radial-gradient(circle at top left, #9333ea 0%, #4f46e5 100%);
  background-origin: border-box;
  background-clip: padding-box, border-box;
`;

const TagDivText = styled.p`
  font-size: 8px;
  margin: 0px;
  font-weight: 500;
  line-height: 120%;
  background: linear-gradient(90deg, #9333ea 0%, #4f46e5 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
`;

const NominationTitleContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
`;

const NominationTitle = styled.p`
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin: 7px 0 0 0;
  color: #000;
  font-size: 18px;
  font-weight: 500;
  line-height: 120%;
`;
const UserLink = styled.a`
  cursor: pointer;
  &:hover {
    text-decoration: none;
  }
`;
const NominationUser = styled.p`
  display: flex;
  flex-direction: column;
  justify-content: center;
  color: #828688;
  margin: 0 0 7px 0;
  font-size: 14px;
  line-height: 120%;
`;

const UpvoteButtonDisabled = styled.button`
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  border-radius: 4px;
  border: solid 1px transparent;
  background: var(--buttons-disable, #c3cace);
  cursor: default !important;
`;

const UpvoteButton = styled.button`
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  border-radius: 4px;
  border: solid 1px transparent;
  background-image: linear-gradient(#f8f8f9, #f8f8f9),
    radial-gradient(
      circle at left top,
      rgb(147, 51, 234) 0%,
      rgb(79, 70, 229) 100%
    );
  background-origin: border-box;
  background-clip: padding-box, border-box;
`;

const UpvoteCount = styled.p`
  font-size: 12px;
  font-weight: 500;
  line-height: 24px;
  margin: 0px;
  background: linear-gradient(90deg, #9333ea 0%, #4f46e5 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
`;

const Icon = styled.img`
  width: 17px;
  height: 17px;
`;

const PlatformCard = styled.div`
  display: flex;
  border-radius: 6px;
  background: background: "rgb(255 255 255 / 0%);
`;

const PlatformContent = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
  width: 100%;
`;

const PlatformInfoDiv = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
`;

const PlatformInfoHeader = styled.div`
  display: flex;
  width: 302px;
  flex-direction: column;
  align-items: flex-start;
  gap: 2px;
`;

const PlatInforHeadText = styled.p`
  margin: 0px;
  color: var(--000000, #000);
  font-size: 10px;
  font-weight: 500;
  line-height: 120%;
`;

const PlatInfoHeadSeparator = styled.hr`
  width: 302px;
  height: 0px;
  margin: 8px 0 0 0;

  border: 1px solid rgba(208, 214, 217, 1);
`;

const KeyIssuesContainer = styled.div`
  display: flex;
  width: 302px;
  flex-direction: column;
  align-items: flex-start;
  gap: 2px;
`;

const KeyIssueTitle = styled.p`
  font-size: 12px;
  line-height: 120%;
  margin: 0px;
  font-weight: 500;
  line-height: 18px;
  text-align: left;
  padding: 10px;
`;

const KeyIssueDescription = styled.p`
  color: #212427;
  font-size: 12px;
  line-height: 130%;
  margin: 0px;
  padding: 10px;
  line-height: 18px;
  text-align: justify;
`;

const CandidateCard = styled.div`
  display: flex;
  padding: 20px;
  align-items: center;
  align-self: stretch;
  border-radius: 6px;
  background: #fff;
`;

const CandidateContent = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  gap: 12px;
`;

const ContentHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  align-self: stretch;
`;

const ContentHeaderText = styled.p`
  font-size: 18px;
  font-weight: 500;
  margin: 0px;
`;

const CandidateInfoDiv = styled.div`
  width: 100%;
  padding: 16px;
  background: white;
  gap: 16px;
  border-radius: 8px;
`;

const CandidateInfoHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  align-self: stretch;
`;

const CandidateImage = styled.img`
  width: 32px;
  height: 32px;
`;

const CandidateInfoData = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  flex: 1 0 0;
`;

const CandidateTagDiv = styled.div`
  display: flex;
  height: 20px;
  padding: 4px 8px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  border-radius: 100px;
  border: 1px solid var(--secondary-warning, #f19d38);
  background: #f0e1ce;
`;

const CandidateTagText = styled.p`
  color: var(--secondary-warning, #f19d38);
  font-size: 10px;
  font-weight: 500;
  line-height: 120%;
  margin: 0px;
`;

const CandidateTime = styled.h6`
  margin: 3px 0 0 0;
  font-size: 10px;
  font-weight: 500;
  line-height: 120%;
  color: #828688;
`;

const CandidateTextInfo = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  align-self: stretch;
`;

const SectionTitle = styled.h5`
  font-size: 12px;
  font-weight: 500;
  line-height: 120%;
  margin: 16px 0 0 0;
`;

const SectionDescription = styled.p`
  font-size: 12px;
  line-height: 18px;
  margin: 0px;
  text-align: justify;
  color: #828688;
`;

const DeclarationCard = styled.div`
  padding: 0px;
`;

const CommentSection = styled.div`
  display: flex;
  padding: 16px;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
  border-radius: 10px;
  background: #f8f8f9;
`;

const Container = styled.div`
  display: flex;
  justify-content: center;
  @media only screen and (max-width: 600px) {
    display: none;
  }
`;

const H6 = styled.h6`
  font-size: 14px;
  margin-bottom: 0;
`;

const Tab = styled.div`
  font-weight: ${(props) => (props.active ? "600" : "500")};
  border-bottom: 2px solid;
  border-color: ${(props) => (props.active ? "#4BA6EE" : "#dee2e6")};
  color: ${(props) => (props.active ? "#4BA6EE" : "#ababab")};
  cursor: pointer;
  padding-bottom: 8px;
  font-size: 14px;

  i {
    &::before {
      color: ${(props) => (props.active ? "#4BA6EE" : "#ababab")};
    }
    margin-right: 5px;
  }
`;

const TH = styled.th`
  border: 1px solid rgba(208, 214, 217, 0.4) !important;
  width: ${(props) => props.width} !important;
  text-align: left !important;
  padding: 15px 20px !important;
`;

if (!data) return <Loader />;

const candidateProps = data.nominations;
if (!candidateProps) return <Loader />;

const badWords = [
  "arse",
  "arsehead",
  "arsehole",
  "ass",
  "asshole",
  "bastard",
  "bitch",
  "bloody",
  "bollocks",
  "brotherfucker",
  "bugger",
  "bullshit",
  "child-fucker",
  "Christ on a bike",
  "Christ on a cracker",
  "cock",
  "cocksucker",
  "crap",
  "cunt",
  "damn",
  "damn it",
  "dick",
  "dickhead",
  "dyke",
  "fatherfucker",
  "frigger",
  "fuc",
  "goddamn",
  "godsdamn",
  "hell",
  "holy shit",
  "horseshit",
  "in shit",
  "Jesus Christ",
  "Jesus fuck",
  "Jesus H. Christ",
  "Jesus Harold Christ",
  "Jesus, Mary and Joseph",
  "Jesus wept",
  "kike",
  "motherfucker",
  "nigga",
  "nigra",
  "pigfucker",
  "piss",
  "prick",
  "pussy",
  "shit",
  "shit ass",
  "shite",
  "sisterfucker",
  "slut",
  "son of a whore",
  "son of a bitch",
  "spastic",
  "sweet Jesus",
  "turd",
  "twat",
  "wanker",
];
const comments = data.comments[0] ? data.comments[0].comments : [];
const afilations = JSON.parse(candidateProps.afiliation);
if (!afilations) return <Loader />;

const afilationsSort = afilations.sort(
  (a, b) => parseInt(b.end_date) - parseInt(a.end_date)
);

const issues = [
  candidateProps.HAYInvolve,
  candidateProps.WIYStrategy,
  candidateProps.Key_Issue_1,
  candidateProps.Key_Issue_2,
  candidateProps.Key_Issue_3,
  candidateProps.addition_platform,
];

const titles = [
  "How are you involved with the NEAR ecosystem? Why are you a qualified candidate? Why should people vote for you?",
  "What is your strategy to develop the NEAR ecosystem?",
  "What’s your view and pledge on the issue of User Experience and Accessibility? This issue focuses on improving the user experience, developing the social layer, enhancing the developer experience, and making the Near platform accessible to all users, including those with little technical expertise. It also explores how Near can evoke positive emotions in its users.",
  "What’s your view and pledge on the issue of Economic Growth and Innovation? This issue emphasizes the need for economic growth within the NDC, the development of DeFi capabilities, the establishment of fiat ramps, and the support for founders, developers, creators, and builders. It also stresses the importance of launching useful products on the Near mainnet.",
  "What’s your view and pledge on the issue of Marketing and Outreach? This issue underscores the importance of marketing to make NEAR a household name, conducting research, participating in conferences and hackathons, integrating with Web 2.0 platforms, and promoting Near as a hub of innovation.",
  "Other Platform",
];

const houseMapping = {
  HouseOfMerit: 1,
  CouncilOfAdvisors: 2,
  TransparencyCommission: 3,
};

return (
  <Container class="row">
    <div class="" style={{ "margin-right": "5px", width: "950px" }}>
      <div class="row" style={{ "margin-inline": "5px" }}>
        <div
          class="col-12 p-0 w-100"
          style={{
            background: "#F8F8F9",
            "border-radius": "8px",
          }}
        >
          <div className="w-100 p-3 d-flex justify-content-between align-items-start">
            <div className="d-flex">
              <Widget
                src="mob.near/widget/ProfileImage"
                props={{
                  accountId,
                  imageClassName: "rounded-circle w-100 h-100",
                  style: {
                    width: "90px",
                    height: "90px",
                    marginRight: "15px",
                  },
                }}
              />
              <div className="d-flex flex-column">
                <TagContainer>
                  <Widget
                    src={widgets.styledComponents}
                    props={{
                      Tag: {
                        title:
                          house == "HouseOfMerit"
                            ? "House of Merit"
                            : house == "CouncilOfAdvisors"
                            ? "Council of Advisors"
                            : "Transparency Commission",
                        className: "dark",
                      },
                    }}
                  />
                </TagContainer>
                <NominationTitleContainer>
                  <UserLink
                    href={`https://near.org/near/widget/ProfilePage?accountId=${accountId}`}
                  >
                    <NominationTitle>{candidateProps.name}</NominationTitle>
                    <NominationUser>{accountId}</NominationUser>
                  </UserLink>
                  <TagContainer>
                    {candidateProps.tags
                      .trim()
                      .split(",")
                      .map((tag) => {
                        return tag && tag != "" ? (
                          <Widget
                            src={widgets.styledComponents}
                            props={{
                              Tag: { title: tag },
                            }}
                          />
                        ) : null;
                      })}
                  </TagContainer>
                </NominationTitleContainer>
              </div>
            </div>
            <div className="d-flex gap-3">
              {candidateProps.video.length > 0 && (
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Link: {
                      text: `Watch Video`,
                      className: "primary dark",
                      icon: <i class="bi bi-play-circle ml-2"></i>,
                      href: candidateProps.video,
                    },
                  }}
                />
              )}
              <Widget
                src={widgets.styledComponents}
                props={{
                  Link: {
                    text: "Vote Now",
                    disabled:
                      !context.accountId ||
                      !state.verified ||
                      context.accountId === accountId,
                    className: "primary dark",
                    href: `#/election.ndctools.near/widget/NDC.Elections.Main?house=${houseMapping[house]}&candidates=["${accountId}"]`,
                    icon: (
                      <img
                        style={{ "margin-bottom": "5px" }}
                        src="https://ipfs.near.social/ipfs/bafkreia4iqjdjqhwplrunkjvmri2c6egm2pmlt56f3n6qesmy5ofw27g3y"
                      />
                    ),
                  },
                }}
              />
            </div>
          </div>
        </div>
        <div className="d-flex mt-3 gap-3 w-100">
          <div className="w-25">
            <CandidateCard
              style={{
                "border-radius": "8px",
                background: "#F8F8F9",
              }}
            >
              <CandidateContent className="w-100">
                <ContentHeader>
                  <ContentHeaderText>Candidate Affiliations</ContentHeaderText>
                </ContentHeader>
                {afilations.map((data) => (
                  <CandidateInfoDiv>
                    <CandidateInfoHeader className="d-flex align-items-center">
                      <CandidateImage
                        src="https://apricot-straight-eagle-592.mypinata.cloud/ipfs/QmZBPPMKLdZG2zVpYaf9rcbtNfAp7c3BtsvzxzBb9pNihm?_gl=1*6avmrp*rs_ga*MzkyOTE0Mjc4LjE2ODY4NjgxODc.*rs_ga_5RMPXG14TE*MTY4NjkzMzM2NC4zLjEuMTY4NjkzMzM4Ni4zOC4wLjA."
                        alt="pic"
                      ></CandidateImage>
                      <CandidateInfoData>
                        <Widget
                          src={widgets.styledComponents}
                          props={{
                            Tag: { title: data.company_name },
                          }}
                        />
                        <CandidateTime>
                          {data.start_date} - {data.end_date}
                        </CandidateTime>
                      </CandidateInfoData>
                    </CandidateInfoHeader>
                    <CandidateTextInfo>
                      <SectionTitle>Role Description</SectionTitle>
                      <SectionDescription>
                        <Widget
                          src="mob.near/widget/SocialMarkdown"
                          props={{
                            text: data.role,
                          }}
                        />
                      </SectionDescription>
                    </CandidateTextInfo>
                  </CandidateInfoDiv>
                ))}
              </CandidateContent>
            </CandidateCard>
          </div>
          <div
            class="w-75"
            style={{
              "border-radius": "8px",
              background: "#F8F8F9",
              padding: "20px",
            }}
          >
            <PlatformCard>
              <PlatformContent>
                <ContentHeader>
                  <ContentHeaderText>Platform</ContentHeaderText>
                </ContentHeader>

                <table
                  className="table table-sm"
                  style={{
                    background: "white",
                    "border-collapse": "collapse",
                    "border-radius": "8px",
                    "border-style": "hidden",
                    overflow: "hidden",
                    "box-shadow": "0px 0px 2px #bfbfbfb3",
                  }}
                >
                  <thead>
                    <tr class="p-3 mb-2 rounded-5 text-center">
                      <TH width="35%">
                        <H6>Key Issues</H6>
                      </TH>
                      <TH width="65%">
                        <H6>Candidate's Positions</H6>
                      </TH>
                    </tr>
                  </thead>
                  <tbody>
                    {issues.map((data, key) => {
                      return (
                        <>
                          <tr
                            class="text-center"
                            style={{
                              height: "80px",
                              "vertical-align": "middle",
                            }}
                          >
                            <td
                              style={{
                                border: "1px solid rgba(208, 214, 217, 0.40)",
                                verticalAlign: "text-top",
                              }}
                            >
                              <KeyIssueTitle>{titles[key]}</KeyIssueTitle>
                            </td>
                            <td
                              style={{
                                background: "#F8F8F9",
                                verticalAlign: "text-top",
                                color: "#212427",
                              }}
                            >
                              <KeyIssueDescription className="text-seconodary">
                                <Widget
                                  src="mob.near/widget/SocialMarkdown"
                                  props={{ text: data }}
                                />
                              </KeyIssueDescription>
                            </td>
                          </tr>
                        </>
                      );
                    })}
                  </tbody>
                </table>
              </PlatformContent>
            </PlatformCard>
          </div>
        </div>
      </div>
    </div>
    <div
      class=""
      style={{
        width: "350px",
        background: "#F8F8F9",
        "border-radius": "8px",
        padding: "20px",
      }}
    >
      <>
        <ul className="nav nav-pills nav-fill">
          {tabs.map(({ id, title, icon }, i) => (
            <li className="nav-item" role="presentation" key={i}>
              <Tab
                active={state.tabSelected === id}
                onClick={() => State.update({ tabSelected: id })}
              >
                <i
                  class={`${icon} ${
                    state.tabSelected == "declaration" ? "text-secondary" : ""
                  }`}
                />
                {title}
              </Tab>
            </li>
          ))}
        </ul>
        <div>
          {state.tabSelected == "declaration" ? (
            <DeclarationCard>
              <SectionTitle className="mt-4 mb-3">
                Declaration of Transparency and Accountability
              </SectionTitle>

              <SectionDescription>
                I hereby declare my unwavering commitment to transparency,
                accountability, and the resolution of critical ecosystem
                challenges as a candidate seeking election to the NEAR Digital
                Collective. It is my utmost goal to instill faith and prosperity
                in our ecosystem. In the event of my election, I pledge to
                support and promote the operation and development of the NEAR
                Digital Collective.
                <br />
                <br />
                Transparency stands as the cornerstone of a thriving governance
                framework and as a candidate, I strongly believe in leading by
                example. I vow to disclose comprehensive information about my
                previous affiliations, partnerships, and associations that may
                influence my decision-making or impact the public interest. This
                includes openly sharing any conflicts of interest, financial
                relationships, or external influences that could compromise my
                ability to serve with impartiality and integrity.
                <br />
                <br />
                Moreover, I fully recognize the numerous challenges that our
                NEAR ecosystem currently faces, demanding immediate attention
                and effective solutions. As a responsible candidate, I am deeply
                committed to identifying, addressing, and resolving these issues
                to the best of my abilities. I acknowledge the gravity of these
                problems and understand that superficial fixes and empty
                promises are insufficient. Therefore, I pledge to conduct
                thorough research, seek input from experts, and engage with
                stakeholders to devise sustainable, equitable strategies. In the
                event of my election, my top priorities will be focused on
                addressing critical ecosystem challenges.
                <br />
                <br />
                I recognize that vote buying is considered a harmful practice
                because it undermines the fundamental principles of democracy
                and fair elections. Vote buying manipulates and influences
                voters by offering financial incentives or other material
                benefits in exchange for their votes. This undermines the free
                will and independent decision-making of individuals, as their
                choices become influenced solely by personal gain rather than
                informed judgment or shared values. Vote buying distorts the
                true preferences and opinions of the electorate, and reinforces
                inequality. Finally vote buying erodes trust and confidence. By
                engaging in vote buying, candidates and political actors are
                more likely to prioritize the interests of those who provided
                financial support over the interests of the wider public. This
                diminishes accountability and weakens the democratic principle
                of serving the common good. I promise that I will not engage in
                this and other nefarious acts during the election process.
                <br />
                <br />I recognize that this declaration is not merely a symbolic
                gesture, but a solemn commitment to the NEAR ecosystem. I
                understand the weight of the expectations. I pledge to honor the
                trust placed in me with unwavering dedication, determination,
                and integrity. Through this declaration, I affirm my commitment
                to transparency, accountability, and the resolve to actualize my
                pledges to the best of my abilities if elected. Together, let us
                embark on a journey towards a brighter future of the NEAR
                ecosystem.
              </SectionDescription>
            </DeclarationCard>
          ) : (
            <CommentSection style={{ padding: "0px" }}>
              {state.showModal && (
                <Widget
                  src={widgets.addComment}
                  props={{
                    candidateOrReplay: true,
                    username: accountId,
                    onClickConfirm: () => State.update({ showModal: false }),
                    onClickCancel: () => State.update({ showModal: false }),
                    nomination_contract,
                  }}
                />
              )}
              <Widget
                src={widgets.styledComponents}
                props={{
                  Button: {
                    text: "Add a Comment",
                    disabled: true,
                    className: "primary w-100 mt-4 mb-2 justify-content-center",
                    onClick: () => State.update({ showModal: true }),
                    icon: <i className="bi bi-plus-lg"></i>,
                  },
                }}
              />
              {comments
                .filter(
                  (data) => !badWords.some((w) => data.comment.includes(w))
                )
                .map((data) => (
                  <Widget
                    props={{ data, nomination_contract }}
                    src={widgets.comment}
                  />
                ))}
            </CommentSection>
          )}
        </div>
      </>
    </div>
  </Container>
);

'''
'''--- NDC/Nomination/Candidate/MobileView.js ---
const { nomination_contract, registry_contract, api_key, data, accountId } =
  props;

State.init({
  verified: false,
  start: true,
  voted: false,
  showDeclaration: false,
});

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  comment: "nomination.ndctools.near/widget/NDC.Nomination.Candidate.Comment",
  addComment: "nomination.ndctools.near/widget/NDC.Nomination.AddComment",
};

function getVerifiedHuman() {
  asyncFetch(
    `https://api.pikespeak.ai/sbt/has-sbt?holder=${context.accountId}&class_id=1&issuer=fractal.i-am-human.near&with_expired=false&registry=${registry_contract}`,
    { headers: { "x-api-key": api_key } }
  ).then((res) => {
    State.update({ verified: res.body });
  });
  asyncFetch(
    `https://api.pikespeak.ai/nominations/is-upvoted-by?candidate=${accountId}&upvoter=${context.accountId}&contract=${nomination_contract}`,
    { headers: { "x-api-key": api_key } }
  ).then((res) => {
    State.update({ voted: res.body });
  });
}

getVerifiedHuman();

const badWords = [
  "arse",
  "arsehead",
  "arsehole",
  "ass",
  "asshole",
  "bastard",
  "bitch",
  "bloody",
  "bollocks",
  "brotherfucker",
  "bugger",
  "bullshit",
  "child-fucker",
  "Christ on a bike",
  "Christ on a cracker",
  "cock",
  "cocksucker",
  "crap",
  "cunt",
  "damn",
  "damn it",
  "dick",
  "dickhead",
  "dyke",
  "fatherfucker",
  "frigger",
  "fuc",
  "goddamn",
  "godsdamn",
  "hell",
  "holy shit",
  "horseshit",
  "in shit",
  "Jesus Christ",
  "Jesus fuck",
  "Jesus H. Christ",
  "Jesus Harold Christ",
  "Jesus, Mary and Joseph",
  "Jesus wept",
  "kike",
  "motherfucker",
  "nigga",
  "nigra",
  "pigfucker",
  "piss",
  "prick",
  "pussy",
  "shit",
  "shit ass",
  "shite",
  "sisterfucker",
  "slut",
  "son of a whore",
  "son of a bitch",
  "spastic",
  "sweet Jesus",
  "turd",
  "twat",
  "wanker",
];

function handleUpVote() {
  Near.call(
    nomination_contract,
    state.voted ? "remove_upvote" : "upvote",
    {
      candidate: accountId,
    },
    300000000000000,
    state.voted ? 0 : 1000000000000000000000
  );
}
const DetailContent = styled.div`
  display: inline-flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
`;
const DetailCard = styled.div`
  display: flex;
  padding: 16px;
  flex-direction: column;
  gap: 16px;
  border-radius: 10px;
  background: #f8f8f9;
`;
const DetailHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
`;
const HeaderDetailContent = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  flex: 1 0 0;
  overflow: hidden;
`;
const TagContainer = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 4px;
`;
const HouseTagDiv = styled.div`
  width: 100%;
  display: flex;
  padding: 4px 8px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  border-radius: 100px;
  background: var(
    --gradient-purple-gradient,
    linear-gradient(90deg, #9333ea 0%, #4f46e5 100%)
  );
`;
const HouseTagText = styled.p`
  color: #fff;
  font-size: 8px;
  font-weight: 500;
  line-height: 120%;
  margin: 0px;
  display: inline-block;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
`;
const TagDiv = styled.div`
  display: flex;
  padding: 4px 8px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  border-radius: 100px;
  border: solid 1px transparent;
  border-radius: 80px;
  background-image: linear-gradient(#eae5f7, #eae5f7),
    radial-gradient(circle at top left, #9333ea 0%, #4f46e5 100%);
  background-origin: border-box;
  background-clip: padding-box, border-box;
`;
const TagDivText = styled.p`
  font-size: 8px;
  margin: 0px;
  font-weight: 500;
  line-height: 120%;
  background: linear-gradient(90deg, #9333ea 0%, #4f46e5 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
`;
const NominationTitleContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  margin: 5px 0;
`;

const UserLink = styled.a`
  cursor: pointer;
  &:hover {
    text-decoration: none;
  }
`;
const NominationTitle = styled.p`
  display: flex;
  flex-direction: column;
  justify-content: center;
  margin: 0px;
  color: #000;
  font-size: 14px;
  font-weight: 500;
  line-height: 120%;
`;
const NominationUser = styled.p`
  display: flex;
  flex-direction: column;
  justify-content: center;
  color: #828688;
  margin: 0px;
  font-size: 12px;
  line-height: 120%;
`;

const UpvoteButtonDisabled = styled.button`
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  border-radius: 4px;
  border: solid 1px transparent;
  background: var(--buttons-disable, #c3cace);
  cursor: default !important;
`;

const UpvoteButton = styled.button`
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  border-radius: 4px;
  border: solid 1px transparent;
  background-image: linear-gradient(#f8f8f9, #f8f8f9),
    radial-gradient(circle at top left, #9333ea 0%, #4f46e5 100%);
  background-origin: border-box;
  background-clip: padding-box, border-box;
`;
const UpvoteCount = styled.p`
  font-size: 12px;
  font-weight: 500;
  line-height: 24px;
  margin: 0px;
  background: linear-gradient(90deg, #9333ea 0%, #4f46e5 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
`;
const UpvoteIcon = styled.img`
  width: 14px;
  height: 14px;
`;
const PlatformCard = styled.div`
  display: flex;
  padding: 8px 12px;
  align-items: flex-start;
  gap: 12px;
  border-radius: 6px;
  background: #fff;
`;
const PlatformContent = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
`;
const PlatformHeaderDiv = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 12px;
`;
const PlatformHeaderText = styled.p`
  font-size: 18px;
  font-weight: 500;
  margin: 0px;
`;
const PlatformInfoDiv = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 8px;
`;
const PlatformInfoHeader = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 2px;
  width: 100%;
`;
const PlatInforHeadText = styled.p`
  font-size: 12px;
  line-height: 120%;
  margin: 0px;
  font-weight: 400;
  line-height: 18px;
  text-align: left;
`;
const HR = styled.div`
  height: 1px;
  width: 100%;
  margin: 8px 0 0 0;
  background: rgba(208, 214, 217, 1);
`;
const KeyIssuesContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 2px;
`;
const KeyIssueTitle = styled.h5`
  font-size: 13px;
  line-height: 16px;
  margin: 7px 0 3px 0;
`;
const KeyIssueDescription = styled.p`
  color: #828688;
  font-size: 12px;
  line-height: 18px;
  margin: 0px;
  text-align: justify;
`;
const CandidateCard = styled.div`
  display: flex;
  padding: 16px 12px;
  align-items: center;
  gap: 12px;
  align-self: stretch;
  border-radius: 6px;
  background: #fff;
`;
const CandidateContent = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  gap: 4px;
`;
const CandidateHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  align-self: stretch;
`;
const CandidateHeaderText = styled.p`
  color: #000;
  font-size: 12px;
  font-weight: 800;
  line-height: 120%;
  margin: 0px;
`;
const CandidateInfoDiv = styled.div`
  display: flex;
  padding: 8px;
  flex-direction: column;
  align-items: flex-start;
  gap: 16px;
`;
const CandidateInfoHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 8px;
  align-self: stretch;
`;
const CandidateImage = styled.img`
  width: 32px;
  height: 32px;
  border-radius: 20px;
`;
const CandidateInfoData = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  gap: 4px;
  flex: 1 0 0;
`;
const CandidateTagDiv = styled.div`
  display: flex;
  height: 20px;
  padding: 4px 8px;
  justify-content: center;
  align-items: center;
  gap: 10px;
  border-radius: 100px;
  border: 1px solid var(--secondary-warning, #f19d38);
  background: #f0e1ce;
`;
const CandidateTagText = styled.p`
  color: var(--secondary-warning, #f19d38);
  font-size: 10px;
  font-weight: 500;
  line-height: 120%;
  margin: 0px;
`;
const CandidateTime = styled.p`
  margin: 0px;
  color: var(--primary-828688, #828688);
  font-size: 10px;
  font-weight: 500;
  line-height: 120%;
`;
const DeclarationCard = styled.div`
  display: flex;
  padding: 16px 12px;
  align-items: center;
  gap: 12px;
  align-self: stretch;
  border-radius: 6px;
  background: #fff;
`;
const DeclarationContent = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  gap: 4px;
  width: 100%;
`;
const DeclarationHeader = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;
  align-self: stretch;
`;
const DeclarationHeaderText = styled.p`
  color: #000;
  font-size: 12px;
  font-weight: 800;
  line-height: 120%;
  margin-bottom: 0;
`;
const DeclarationInfo = styled.div`
  display: flex;
  padding: 8px 0px;
  flex-direction: column;
  align-items: flex-start;
  gap: 16px;
  border-radius: 8px;
  background: #fff;
`;
const DeclarationDescription = styled.p`
  color: var(--primary-828688, #828688);
  font-size: 12px;
  line-height: 130%;
  text-align: justify;
`;
const DeclarationImage = styled.img`
  height: 234px;
`;
const CommentSection = styled.div`
  display: flex;
  padding: 16px;
  flex-direction: column;
  align-items: flex-start;
  gap: 12px;
  border-radius: 10px;
  background: #f8f8f9;
`;
const CommentHeader = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 20px;
`;
const CommentHeaderText = styled.p`
  color: var(--000000, #000);
  font-size: 16px;
  font-weight: 500;
  line-height: 120%;
  margin: 0px;
`;
const SortButtonDiv = styled.button`
  display: flex;
  width: 20px;
  height: 20px;
  padding: 2px 12px;
  justify-content: center;
  align-items: center;
  gap: 6px;
  flex-shrink: 0;
  border-radius: 4px;
  background: var(
    --buttons-gradient-default,
    linear-gradient(90deg, #9333ea 0%, #4f46e5 100%)
  );
`;
const SortIcon = styled.img`
  width: 14px;
  height: 14px;
  flex-shrink: 0;
`;

const CommentButtonDisabled = styled.div`
  cursor: pointer;
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  align-self: stretch;
  border-radius: 4px;
  background: var(--buttons-disable, #c3cace);
  cursor: default !important;
`;

const CommentButton = styled.div`
  cursor: pointer;
  display: flex;
  padding: 2px 12px;
  align-items: center;
  gap: 6px;
  align-self: stretch;
  border-radius: 4px;
  background: var(--buttons-yellow-default, #ffd50d);
`;

const CommentText = styled.p`
  color: var(--primary-black, #000);
  font-size: 12px;
  font-weight: 500;
  line-height: 24px;
  margin: 0px;
`;

if (!data) return <Loader />;

const candidateProps = data.nominations;
if (!candidateProps) return <Loader />;

const comments = data.comments[0] ? data.comments[0].comments : [];
const afilations = JSON.parse(candidateProps.afiliation);
if (!afilations) return <Loader />;

const afilationsSort = afilations.sort(
  (a, b) => parseInt(b.end_date) - parseInt(a.end_date)
);

const issues = [
  {
    description: candidateProps.HAYInvolve,
    title:
      "How are you involved with the NEAR ecosystem? Why are you a qualified candidate? Why should people vote for you?",
  },
  {
    description: candidateProps.WIYStrategy,
    title: "What is your strategy to develop the NEAR ecosystem?",
  },
  {
    description: candidateProps.Key_Issue_1,
    title:
      "What’s your view and pledge on the issue of User Experience and Accessibility? This issue focuses on improving the user experience, developing the social layer, enhancing the developer experience, and making the Near platform accessible to all users, including those with little technical expertise. It also explores how Near can evoke positive emotions in its users.",
  },
  {
    description: candidateProps.Key_Issue_2,
    title:
      "What’s your view and pledge on the issue of Economic Growth and Innovation? This issue emphasizes the need for economic growth within the NDC, the development of DeFi capabilities, the establishment of fiat ramps, and the support for founders, developers, creators, and builders. It also stresses the importance of launching useful products on the Near mainnet.",
  },
  {
    description: candidateProps.Key_Issue_3,
    title:
      "What’s your view and pledge on the issue of Marketing and Outreach? This issue underscores the importance of marketing to make NEAR a household name, conducting research, participating in conferences and hackathons, integrating with Web 2.0 platforms, and promoting Near as a hub of innovation.",
  },
  { description: candidateProps.addition_platform, title: "Other Platform" },
];

const houseMapping = {
  HouseOfMerit: 1,
  CouncilOfAdvisors: 2,
  TransparencyCommission: 3,
};

return (
  <DetailContent>
    <DetailCard className="w-100 justify-content-center">
      <DetailHeader className="w-100">
        <Widget
          src="mob.near/widget/ProfileImage"
          props={{
            accountId,
            imageClassName: "rounded-circle w-100 h-100",
            style: { width: "70px", height: "70px" },
          }}
        />
        <HeaderDetailContent>
          <TagContainer>
            <HouseTagDiv>
              <HouseTagText style={{ "font-size": "10px" }}>
                {props.house == "HouseOfMerit"
                  ? "House of Merit"
                  : props.house == "CouncilOfAdvisors"
                  ? "Council of Advisors"
                  : "Transparency Commission"}
              </HouseTagText>
            </HouseTagDiv>
          </TagContainer>
          <NominationTitleContainer>
            <UserLink
              href={`https://near.org/near/widget/ProfilePage?accountId=${accountId}`}
            >
              <NominationTitle>{candidateProps.name}</NominationTitle>
              <NominationUser>{accountId}</NominationUser>
            </UserLink>
          </NominationTitleContainer>
        </HeaderDetailContent>
        {data.nominations.video.length > 0 && (
          <Widget
            src={widgets.styledComponents}
            props={{
              Link: {
                text: `Watch Video`,
                className: "primary dark",
                icon: <i class="bi bi-play-circle ml-2"></i>,
                href: data.nominations.video,
              },
            }}
          />
        )}
        <Widget
          src={widgets.styledComponents}
          props={{
            Link: {
              text: "Vote Now",
              disabled:
                !context.accountId ||
                !state.verified ||
                context.accountId === accountId,
              className: "primary dark",
              href: `#/election.ndctools.near/widget/NDC.Elections.Main?house=${houseMapping[house]}&candidates=["${accountId}"]`,
              icon: (
                <img
                  style={{ "margin-bottom": "5px" }}
                  src="https://ipfs.near.social/ipfs/bafkreia4iqjdjqhwplrunkjvmri2c6egm2pmlt56f3n6qesmy5ofw27g3y"
                />
              ),
            },
          }}
        />
      </DetailHeader>

      <TagContainer className="mt-2 flex-wrap">
        {candidateProps.tags
          .trim()
          .split(",")
          .map((tag) => {
            return tag && tag != "" ? (
              <Widget
                src={widgets.styledComponents}
                props={{
                  Tag: { title: tag },
                }}
              />
            ) : null;
          })}
      </TagContainer>

      <PlatformCard>
        <PlatformContent>
          <PlatformHeaderDiv>
            <PlatformHeaderText>Platform</PlatformHeaderText>
          </PlatformHeaderDiv>
          <PlatformInfoDiv>
            <PlatformInfoHeader>
              <KeyIssueTitle>Key Issues and Candidate's Position</KeyIssueTitle>
              <HR></HR>
            </PlatformInfoHeader>
            {issues.map((issue, i) => (
              <KeyIssuesContainer>
                <KeyIssueTitle>{issue.title}</KeyIssueTitle>
                <KeyIssueDescription>
                  <Widget
                    src="mob.near/widget/SocialMarkdown"
                    props={{
                      text: issue.description,
                    }}
                  />
                </KeyIssueDescription>
              </KeyIssuesContainer>
            ))}
          </PlatformInfoDiv>
        </PlatformContent>
      </PlatformCard>
      <CandidateCard>
        <CandidateContent>
          <CandidateHeader>
            <PlatformHeaderText>Candidate Affiliations</PlatformHeaderText>
          </CandidateHeader>
          {afilationsSort.map((affiliation) => {
            return (
              <CandidateInfoDiv>
                <CandidateInfoHeader>
                  <CandidateImage
                    src={
                      "https://apricot-straight-eagle-592.mypinata.cloud/ipfs/QmZBPPMKLdZG2zVpYaf9rcbtNfAp7c3BtsvzxzBb9pNihm?_gl=1*6avmrp*rs_ga*MzkyOTE0Mjc4LjE2ODY4NjgxODc.*rs_ga_5RMPXG14TE*MTY4NjkzMzM2NC4zLjEuMTY4NjkzMzM4Ni4zOC4wLjA."
                    }
                    alt="pic"
                  ></CandidateImage>
                  <CandidateInfoData>
                    <Widget
                      src={widgets.styledComponents}
                      props={{
                        Tag: { title: affiliation.company_name },
                      }}
                    />
                    <CandidateTime>
                      {affiliation.start_date} - {affiliation.end_date}
                    </CandidateTime>
                  </CandidateInfoData>
                </CandidateInfoHeader>
                <KeyIssuesContainer>
                  <KeyIssueTitle>Role Description</KeyIssueTitle>
                  <KeyIssueDescription>
                    <Widget
                      src="mob.near/widget/SocialMarkdown"
                      props={{
                        text: affiliation.role,
                      }}
                    />
                  </KeyIssueDescription>
                </KeyIssuesContainer>
              </CandidateInfoDiv>
            );
          })}
        </CandidateContent>
      </CandidateCard>
      <DeclarationCard>
        <DeclarationContent>
          <DeclarationHeader className="d-flex justify-content-between">
            <DeclarationHeaderText>
              Declaration of Transparency and Accountability
            </DeclarationHeaderText>
            <Widget
              src={widgets.styledComponents}
              props={{
                Button: {
                  text: "View",
                  size: "sm",
                  disabled: !state.verified,
                  className: "secondary dark justify-content-center",
                  onClick: () =>
                    State.update({ showDeclaration: !state.showDeclaration }),
                  icon: <i className="bi bi-eye"></i>,
                },
              }}
            />
          </DeclarationHeader>
          {state.showDeclaration && (
            <DeclarationInfo>
              <DeclarationDescription>
                I hereby declare my unwavering commitment to transparency,
                accountability, and the resolution of critical ecosystem
                challenges as a candidate seeking election to the NEAR Digital
                Collective. It is my utmost goal to instill faith and prosperity
                in our ecosystem. In the event of my election, I pledge to
                support and promote the operation and development of the NEAR
                Digital Collective.
                <br />
                <br />
                Transparency stands as the cornerstone of a thriving governance
                framework and as a candidate, I strongly believe in leading by
                example. I vow to disclose comprehensive information about my
                previous affiliations, partnerships, and associations that may
                influence my decision-making or impact the public interest. This
                includes openly sharing any conflicts of interest, financial
                relationships, or external influences that could compromise my
                ability to serve with impartiality and integrity.
                <br />
                <br />
                Moreover, I fully recognize the numerous challenges that our
                NEAR ecosystem currently faces, demanding immediate attention
                and effective solutions. As a responsible candidate, I am deeply
                committed to identifying, addressing, and resolving these issues
                to the best of my abilities. I acknowledge the gravity of these
                problems and understand that superficial fixes and empty
                promises are insufficient. Therefore, I pledge to conduct
                thorough research, seek input from experts, and engage with
                stakeholders to devise sustainable, equitable strategies. In the
                event of my election, my top priorities will be focused on
                addressing critical ecosystem challenges.
                <br />
                <br />
                I recognize that vote buying is considered a harmful practice
                because it undermines the fundamental principles of democracy
                and fair elections. Vote buying manipulates and influences
                voters by offering financial incentives or other material
                benefits in exchange for their votes. This undermines the free
                will and independent decision-making of individuals, as their
                choices become influenced solely by personal gain rather than
                informed judgment or shared values. Vote buying distorts the
                true preferences and opinions of the electorate, and reinforces
                inequality. Finally vote buying erodes trust and confidence. By
                engaging in vote buying, candidates and political actors are
                more likely to prioritize the interests of those who provided
                financial support over the interests of the wider public. This
                diminishes accountability and weakens the democratic principle
                of serving the common good. I promise that I will not engage in
                this and other nefarious acts during the election process.
                <br />
                <br />I recognize that this declaration is not merely a symbolic
                gesture, but a solemn commitment to the NEAR ecosystem. I
                understand the weight of the expectations. I pledge to honor the
                trust placed in me with unwavering dedication, determination,
                and integrity. Through this declaration, I affirm my commitment
                to transparency, accountability, and the resolve to actualize my
                pledges to the best of my abilities if elected. Together, let us
                embark on a journey towards a brighter future of the NEAR
                ecosystem.
              </DeclarationDescription>
            </DeclarationInfo>
          )}
        </DeclarationContent>
      </DeclarationCard>
    </DetailCard>
    <CommentSection className="w-100">
      {state.showModal && (
        <Widget
          src={widgets.addComment}
          props={{
            candidateOrReplay: true,
            username: accountId,
            onClickConfirm: () => State.update({ showModal: false }),
            onClickCancel: () => State.update({ showModal: false }),
            nomination_contract,
          }}
        />
      )}
      <CommentHeader className="w-100">
        <CommentHeaderText>Comments</CommentHeaderText>
        <Widget
          src={widgets.styledComponents}
          props={{
            Button: {
              text: "Add a Comment",
              size: "sm",
              disabled: true,
              className: "primary justify-content-center",
              onClick: () => State.update({ showModal: true }),
              icon: <i className="bi bi-plus-lg"></i>,
            },
          }}
        />
      </CommentHeader>
      {comments
        .filter((data) => !badWords.some((w) => data.comment.includes(w)))
        .map((data) => {
          return (
            <Widget
              props={{ data, nomination_contract }}
              src={widgets.comment}
            />
          );
        })
        .reverse()}
    </CommentSection>
  </DetailContent>
);

'''
'''--- NDC/Nomination/Candidate/Page.js ---
let { ids, dev, house, accountId } = props;
ids = ids ? ids : [1, 2, 3]; // for testing purposes

const registryContract = dev
  ? "registry-v1.gwg-testing.near"
  : "registry.i-am-human.near";
const nominationContract = dev
  ? "nominations-v1.gwg-testing.near"
  : "nominations.ndc-gwg.near";
const apiKey = "36f2b87a-7ee6-40d8-80b9-5e68e587a5b5";

const widgets = {
  header: "election.ndctools.near/widget/NDC.Elections.Header",
  mobile: "nomination.ndctools.near/widget/NDC.Nomination.Candidate.MobileView",
  desktop:
    "nomination.ndctools.near/widget/NDC.Nomination.Candidate.DesktopView",
  back: `#/nomination.ndctools.near/widget/NDC.Nomination.Page${
    dev ? "?dev=true" : ""
  }`,
};

const time = Near.view(nominationContract, "active_time", {});

State.init({
  selectedHouse: ids[0],
  comments: [],
  profile: {},
  nominations: {},
});

const BackLink = styled.a`
  color: black;

  &:hover {
    text-decoration: none;
    color: black;
  }
`;

asyncFetch(
  `https://api.pikespeak.ai/nominations/candidates-comments-and-upvotes?candidate=${accountId}&contract=${nominationContract}`,
  { headers: { "x-api-key": apiKey } }
).then((res) => {
  State.update({ comments: res.body });
});

let profile = Social.getr(`${accountId}/profile`);
let nominations = Social.getr(`${accountId}/nominations`);
State.update({ profile: profile });
State.update({ nominations: nominations });

const Mobile = styled.div`
  @media only screen and (min-width: 601px) {
    display: none !important;
  }
`;

const Desktop = styled.div`
  @media only screen and (max-width: 600px) {
    display: none !important;
  }
`;

return (
  <div>
    <Mobile className="d-flex justify-content-center">
      <Mobile>
        <Widget
          src={widgets.header}
          props={{
            startTime: time ? time[0] : 0,
            endTime: time ? time[1] : 0,
            type: "Nomination",
          }}
        />
      </Mobile>
    </Mobile>
    <Mobile class="row">
      <div className="my-3">
        <BackLink href={widgets.back}>
          <i className="bi bi-chevron-left mr-2"></i>
          Back
        </BackLink>
      </div>
    </Mobile>
    <Mobile>
      <Widget
        props={{
          data: state,
          house: props.house,
          accountId,
          nomination_contract: nominationContract,
          registry_contract: registryContract,
          api_key: apiKey,
        }}
        src={widgets.mobile}
      />
    </Mobile>
    <Desktop className="w-100">
      <Widget
        src={widgets.header}
        props={{
          startTime: time ? time[0] : 0,
          endTime: time ? time[1] : 0,
          type: "Nomination",
        }}
      />
    </Desktop>
    <Desktop class="row">
      <div className="my-3">
        <BackLink href={widgets.back}>
          <i className="bi bi-chevron-left mr-2"></i>
          Back
        </BackLink>
      </div>
    </Desktop>
    <Desktop class="row">
      <Widget
        props={{
          data: state,
          house: props.house,
          accountId,
          nomination_contract: nominationContract,
          registry_contract: registryContract,
          api_key: apiKey,
        }}
        src={widgets.desktop}
      />
    </Desktop>
  </div>
);

'''
'''--- NDC/Nomination/Card.js ---
const {
  data,
  registry_contract,
  nomination_contract,
  election_contract,
  api_key,
  dev,
} = props;

State.init({
  verified: false,
  start: true,
  voted: false,
  shareText: "Copy link to the clipboard",
});

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  candidatePage:
    "#/nomination.ndctools.near/widget/NDC.Nomination.Candidate.Page",
  addComment: "nomination.ndctools.near/widget/NDC.Nomination.AddComment",
};

const isHuman = Near.view(registry_contract, "is_human", {
  account: context.accountId,
});
State.update({ verified: isHuman[0][1].length > 0 });

const httpRequestOpt = {
  headers: { "x-api-key": api_key },
};

asyncFetch(
  `https://api.pikespeak.ai/nominations/is-upvoted-by?candidate=${data.indexerData.nominee}&upvoter=${context.accountId}&contract=${nomination_contract}`,
  httpRequestOpt
).then((res) => {
  State.update({ voted: res.body });
});

function handleUpVote() {
  Near.call(
    nomination_contract,
    state.voted ? "remove_upvote" : "upvote",
    {
      candidate: data.indexerData.nominee,
    },
    300000000000000,
    state.voted ? 0 : 1000000000000000000000
  );
}

function handleShare() {
  State.update({ shareText: "Copied" });
  clipboard.writeText(
    "https://near.org/#/nomination.ndctools.near/widget/NDC.Nomination.Candidate.Page?house=" +
      data.indexerData.house +
      "&candidate=" +
      data.indexerData.nominee
  );
}

function getComponentURL() {
  const url =
    "https%3A%2F%2Fnear.org%2F%23%2Fnomination.ndctools.near%2Fwidget%2FNDC.Nomination.Candidate.Page%3Fhouse%3D" +
    data.indexerData.house +
    "%26candidate%3D" +
    data.indexerData.nominee;
  return url;
}

const Card = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 16px;
  gap: 16px;
  background: #f8f8f9;
  border-radius: 10px;
`;
const HeaderCard = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 0px;
  width: 100%;
`;
const ProfilePicture = styled.img`
  width: 45px;
  height: 45px;
  border-radius: 50%;
`;
const HeaderContent = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 0px;
  gap: 4px;
  width: 56%;
`;
const HeaderTag = styled.div`
  display: flex;
  flex-direction: row;
  justify-content: center;
  align-items: center;
  padding: 4px 8px;
  height: 18px;
  background: linear-gradient(90deg, #9333ea 0%, #4f46e5 100%);
  border-radius: 100px;
`;
const HeaderTagP = styled.p`
  height: 10px;
  font-style: normal;
  font-weight: 500;
  font-size: 11px;
  display: flex;
  align-items: center;
  color: white;
  margin: 0;
`;
const UserLink = styled.a`
  width: 100%;
  cursor: pointer;
  &:hover {
    text-decoration: none;
  }
`;
const NominationName = styled.p`
  font-weight: 500;
  font-size: 14px;
  margin: 0;
  align-items: center;
  color: #000000;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;
const NominationUser = styled.p`
  font-style: normal;
  font-weight: 400;
  font-size: 12px;
  margin: 0px;
  line-height: 120%;
  display: flex;
  align-items: center;
  color: #828688;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
`;

const Icon = styled.img`
  width: 17px;
  height: 17px;
`;
const CollapseCandidate = styled.div`
  padding: 12px;
  background: #ffffff;
  border-radius: 6px;
`;
const CollapseCandidateContent = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  padding: 0px;
  gap: 5px;
`;
const CollapseCandidateText = styled.p`
  width: 274px;
  font-style: normal;
  font-weight: 700;
  font-size: 12px;
  line-height: 120%;
  margin: 0px;
  margin-bottom: 3px;
  color: #000000;
`;
const DownArrow = styled.img`
  width: 16px;
  height: 16px;
`;
const CandidateTagContainer = styled.div`
  gap: 4px;
`;

const KeyIssues = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  padding: 12px;
  gap: 12px;
  background: #ffffff;
  border-radius: 6px;
  width: 100%;
`;
const KeyIssuesContent = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 0px;
  gap: 12px;
  width: 100%;
`;
const KeyIssuesHeader = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  padding: 0px;
  gap: 12px;
`;
const KeyIssuesTitle = styled.p`
  font-style: normal;
  font-weight: 700;
  font-size: 14px;
  line-height: 120%;
  margin-bottom: 0;
`;
const KeyIssuesContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  padding: 0px;
  gap: 8px;
  overflow-y: scroll;
  height: 140px;
  width: 100%;
`;
const KeyIssueTitle = styled.p`
  font-weight: 500;
  font-size: 12px;
  margin-bottom: 5px;
  white-space: pre-wrap;
`;
const KeyIssueDescription = styled.p`
  font-weight: 400;
  font-size: 11px;
  margin-bottom: 0;
`;
const KeyIssueSeparator = styled.div`
  height: 1px;
  margin: 7px 0 2px 0;
  background: rgba(208, 214, 217, 0.4);
`;
const LowerSection = styled.div`
  display: flex;
  width: 100%;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  gap: 8px;
`;
const LowerSectionContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: flex-start;
  gap: 12px;
  align-self: stretch;
`;
const ButtonsLowerSection = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 0px;
  width: 100%;
  height: 28px;
`;
const TextLowerSectionContainer = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 0px;
  gap: 4px;
  width: 239px;
  height: 24px;

  flex-grow: 1;
`;
const ClockIcon = styled.img`
  width: 12px;
  height: 12px;
`;
const TimestampText = styled.div`
  font-style: italic;
  font-weight: 300;
  font-size: 11px;
  line-height: 14px;
  margin: 0px;
  gap: 2px;
  color: #000000;

  b {
    font-weight: 600;
  }
`;
const CommentsCounter = styled.p`
  width: 96px;
  height: 24px;
  font-style: normal;
  font-weight: 500;
  font-size: 12px;
  line-height: 24px;
  margin: 0px;
  text-align: right;
  background: linear-gradient(90deg, #9333ea 0%, #4f46e5 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-fill-color: transparent;
`;
const ButtonsContainer = styled.div`
  display: flex;
  flex-direction: row;
  align-items: center;
  padding: 0px;
  gap: 4px;
  width: 87px;
  height: 28px;
`;
const TagSection = styled.div`
  display: flex;
  align-items: flex-start;
  gap: 4px;
  flex-wrap: wrap;
  overflow: hidden;
`;
const DropdownContainer = styled.div`
  position: relative;
  display: inline-block;
`;

const DropdownContent = styled.div`
  display: none;
  left: 0;
  font-size: 12px;
  flex-direction: column;
  align-items: flex-start;
  position: absolute;
  border-radius: 8px;
  background: #ffffff;
  box-shadow: 0px 0px 30px 0px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  z-index: 1;
  padding: 8px;
`;

const Element = styled.div`
  width: 150px;
  display: flex;
  justify-content: space-between;
  align-items: center;
  cursor: pointer;
  padding: 10px;

  &:hover {
    border-radius: 6px;
    background: #f8f8f9;
  }
`;

const ShareLink = styled.a`
  color: black;
  margin-right: 8px 12px;
  text-decoration: none;
  display: block;
  text-align: start;
`;

const ShareIcon = styled.img`
  width: 20px;
`;

const DropdownContainerHover = styled.div`
  width: fit-content;
  float: right;

  &:hover ${DropdownContent} {
    display: flex;
    margin-top: -165px;
  }
`;

const Separation = styled.div`
    position: absolute;
  }
`;

const Wrapper = styled.div`
    @media only screen and (max-width: 610px) {
      width: 100%;
    }
  }
`;

const canUpvote = () =>
  state.verified &&
  context.accountId &&
  context.accountId != data.indexerData?.nominee;

const trimText = (text, limit) => {
  if (!text) return "";

  const _limit = limit ?? 200;
  const ending = text.length > _limit ? "..." : "";
  const trimmed = text.slice(0, limit ?? 200);

  return `${trimmed}${ending}`;
};

const keyIssues = [
  {
    title:
      "Involvement in the NEAR ecosystem, qualifications to be a candidate and reasons for being voted",
    desc: data.nominationData.HAYInvolve,
  },
  {
    title: "Strategy to develop the NEAR ecosystem",
    desc: data.nominationData.WIYStrategy,
  },
  {
    title: "View and pledge on the issue of User Experience and Accessibility",
    desc: data.nominationData.Key_Issue_1,
  },
  {
    title: "View and pledge on the issue of Economic Growth and Innovation",
    desc: data.nominationData.Key_Issue_2,
  },
  {
    title: "View and pledge on the issue of Marketing and Outreach",
    desc: data.nominationData.Key_Issue_3,
  },
  {
    title: "Other Platform",
    desc: data.nominationData.addition_platform,
  },
];

const houseMapping = {
  HouseOfMerit: 1,
  CouncilOfAdvisors: 2,
  TransparencyCommission: 3,
};

return (
  <Wrapper className="p-2 col-lg-4 col-md-6 col-sm-12">
    <Card>
      {state.showModal && (
        <Widget
          src={widgets.addComment}
          props={{
            candidateOrReplay: true,
            username: data.indexerData.nominee,
            onClickConfirm: () => State.update({ showModal: false }),
            onClickCancel: () => State.update({ showModal: false }),
            nomination_contract,
          }}
        />
      )}
      <HeaderCard className="d-flex justify-content-between w-100">
        <div className="d-flex align-items-center gap-2 w-100 justify-content-between">
          <Widget
            src="mob.near/widget/ProfileImage"
            props={{
              accountId: data.nominationData?.profileAccount.substring(1),
              imageClassName: "rounded-circle w-100 h-100",
              style: { minWidth: "45px", height: "45px" },
            }}
          />
          <HeaderContent>
            <div className="mw-100">
              <Widget
                src={widgets.styledComponents}
                props={{
                  Tag: {
                    title:
                      data.indexerData.house == "HouseOfMerit"
                        ? "House of Merit"
                        : data.indexerData.house == "CouncilOfAdvisors"
                        ? "Council of Advisors"
                        : "Transparency Commission",
                    className: "dark",
                  },
                }}
              />
            </div>
            <UserLink
              href={`${widgets.candidatePage}?house=${
                data.indexerData.house
              }&accountId=${data.indexerData.nominee}${dev ? "&dev=true" : ""}`}
            >
              <NominationName>{data.profileData?.name}</NominationName>
              <NominationUser>{data.indexerData.nominee}</NominationUser>
            </UserLink>
          </HeaderContent>

          <Widget
            src={widgets.styledComponents}
            props={{
              Link: {
                disabled: !canUpvote(),
                text: "Vote",
                className: "primary dark",
                size: "sm",
                href: `#/election.ndctools.near/widget/NDC.Elections.Main?house=${
                  houseMapping[data.indexerData.house]
                }&candidates=["${data.indexerData.nominee}"]`,
                icon: (
                  <img
                    style={{ "margin-bottom": "5px" }}
                    src="https://ipfs.near.social/ipfs/bafkreia4iqjdjqhwplrunkjvmri2c6egm2pmlt56f3n6qesmy5ofw27g3y"
                  />
                ),
              },
            }}
          />
        </div>
      </HeaderCard>
      <CollapseCandidate className="w-100">
        <CollapseCandidateContent>
          <CollapseCandidateText>Candidate Affiliations</CollapseCandidateText>
          <CandidateTagContainer className="w-100 d-flex flex-wrap">
            {JSON.parse(data.nominationData?.afiliation).map((data) => (
              <>
                {data.company_name && (
                  <Widget
                    src={widgets.styledComponents}
                    props={{
                      Tag: { title: data.company_name },
                    }}
                  />
                )}
              </>
            ))}
          </CandidateTagContainer>
        </CollapseCandidateContent>
      </CollapseCandidate>
      <KeyIssues>
        <KeyIssuesContent>
          <KeyIssuesHeader>
            <KeyIssuesTitle>Platform</KeyIssuesTitle>
          </KeyIssuesHeader>
          <KeyIssuesContainer>
            {keyIssues.map((issue, i) => (
              <div className="w-100" key={i}>
                <KeyIssueTitle>{issue.title}</KeyIssueTitle>
                <KeyIssueDescription className="text-secondary">
                  <Widget
                    src="mob.near/widget/SocialMarkdown"
                    props={{ text: trimText(issue.desc) }}
                  />
                </KeyIssueDescription>
                <KeyIssueSeparator />
              </div>
            ))}
          </KeyIssuesContainer>
        </KeyIssuesContent>
      </KeyIssues>
      <LowerSection>
        <LowerSectionContainer>
          {data.nominationData.tags.length > 0 && (
            <KeyIssues>
              <KeyIssuesContent>
                <KeyIssuesHeader>
                  <KeyIssuesTitle>Tags</KeyIssuesTitle>
                </KeyIssuesHeader>
                <div className="d-flex w-100">
                  <TagSection>
                    {data.nominationData.tags
                      .trim()
                      .split(",")
                      .map((data) => (
                        <>
                          {data && (
                            <Widget
                              src={widgets.styledComponents}
                              props={{
                                Tag: { title: data },
                              }}
                            />
                          )}
                        </>
                      ))}
                  </TagSection>
                </div>
              </KeyIssuesContent>
            </KeyIssues>
          )}
          <ButtonsLowerSection>
            <TextLowerSectionContainer className="align-items-center">
              <i className="bi bi-clock"></i>
              {data.indexerData.timestamp && (
                <TimestampText>
                  <span>
                    {new Date(data.indexerData.timestamp).toDateString()}
                  </span>
                  <span>by</span>
                  <b>{data.indexerData.nominee}</b>
                </TimestampText>
              )}
            </TextLowerSectionContainer>
          </ButtonsLowerSection>
          <div className="d-flex w-100 align-items-center">
            {!data.preview && (
              <div className="d-flex w-100 gap-2 justify-content-between">
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      text: `+${data.upVoteData.comments.length ?? 0} Comments`,
                      disabled: true,
                      size: "sm",
                      className:
                        "secondary dark w-100 justify-content-center text-nowrap",
                      onClick: () => {
                        !data.preview ? State.update({ showModal: true }) : "";
                      },
                      icon: <i className="bi bi-chat-square-text-fill"></i>,
                    },
                  }}
                />
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Link: {
                      text: "View",
                      size: "sm",
                      className: "primary w-100 justify-content-center",
                      href: `${widgets.candidatePage}?house=${
                        data.indexerData.house
                      }&accountId=${data.indexerData.nominee}${
                        dev ? "&dev=true" : ""
                      }`,
                      icon: <i className="bi bi-eye fs-6"></i>,
                    },
                  }}
                />
              </div>
            )}
          </div>
        </LowerSectionContainer>
      </LowerSection>
    </Card>
  </Wrapper>
);

'''
'''--- NDC/Nomination/Compose.js ---
const { handleClose, nomination_contract } = props;

let Socialcontract = "social.near";

let profileInfo = Social.getr(`${context.accountId}/profile`);

let imageIsNFT = profileInfo.image.nft ? true : false;
let imageIsIpfs_cid = profileInfo.image.ipfs_cid ? true : false;
let imageIsUrl = profileInfo.image.url ? true : false;
let RealProfileImageAsURL = "";

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  affiliations:
    "nomination.ndctools.near/widget/NDC.Nomination.Compose.Affiliations",
  platform: "nomination.ndctools.near/widget/NDC.Nomination.Compose.Platform",
  page: "nomination.ndctools.near/widget/NDC.Nomination.Page",
  tags: "nomination.ndctools.near/widget/NDC.Nomination.Compose.Tags",
};

State.init({
  name: profileInfo.name ? profileInfo.name : "",
  profileAccount: context.accountId ? "@" + context.accountId : "",
  house_intended: 0,
  HAYInvolve: "",
  WIYStrategy: "",
  Key_Issue_1: "",
  Key_Issue_2: "",
  Key_Issue_3: "",
  addition_platform: "",
  afiliation: [
    {
      company_name: "",
      start_date: "",
      end_date: "",
      role: "",
    },
  ],
  agreement: "false",
  error_msg: "",
  video: "",
  tags: [],
});

const CardStyled = styled.div`
  width: 100%;
  height: 100%;
  background: #f8f8f9;
  gap: 10px;
  padding: 25px;
  margin: 0 auto;
  border-radius: 10px;
  overflow-y: scroll;
`;

const CardForm = styled.div`
  display: flex;
  flex-direction: column;
  width: 100%;
  height: auto;
`;

const H1 = styled.h1`
  margin-bottom: 10px;
  font-style: normal;
  font-weight: 500;
  font-size: 16px;
`;

const Submitcontainer = styled.div`
  display: flex;
  justify-content: flex-end;
  align-items: center;
  gap: 8px;
  margin-bottom: 16px;
  @media only screen and (max-width: 480px) {
    margin-top: 10px;
  }
`;

const HiddeableWidget = styled.div`
  display: none;
  @media (max-width: 480px) {
    display: block;
  }
`;

const Modal = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;

const ComponentWrapper = styled.div`
  display: flex;
  width: 80%;
  height: 80%;
  flex-direction: column;
  align-items: flex-start;
  border-radius: 10px;
  background: #fff;
  border: 1px solid transparent;
  margin: 140px auto auto auto;
  @media only screen and (max-width: 480px) {
    width: 90%;
  }
`;

const ErrorBlock = styled.div`
  color: #c23f38;
  font-size: 14px;
  margin: 10px 0;

  label {
    white-space: pre-line;
  }
`;

const Hr = styled.div`
  height: 1px;
  margin: 15px 0;
  width: 100%;
  background: rgba(208, 214, 217, 0.4);
`;

const Section = styled.div`
  margin: 12px 0;
`;

const validatedInputs = () => {
  const {
    img,
    name,
    profileAccount,
    house_intended,
    HAYInvolve,
    WIYStrategy,
    Key_Issue_1,
    Key_Issue_2,
    Key_Issue_3,
    afiliation,
    agreement,
  } = state;

  const isEmpty = (str) => str.trim() === "";
  const isFalse = (check) => check === "false";
  let isValid = true;
  let error_msg = [];

  if (house_intended === 0) {
    State.update({ error_msg: "Select a house" });
    isValid = false;
  }

  if (img.cid === null) {
    isValid = false;
    error_msg.push("Image CID is empty");
  }
  if (isEmpty(name)) {
    isValid = false;
    error_msg.push("Name is empty");
  }
  if (isEmpty(profileAccount)) {
    isValid = false;
    error_msg.push("Account is empty");
  }
  if (isEmpty(HAYInvolve)) {
    isValid = false;
    error_msg.push("Involve field is empty");
  }
  if (isEmpty(WIYStrategy)) {
    isValid = false;
    error_msg.push("Strategy field is empty");
  }
  if (isEmpty(Key_Issue_1)) {
    isValid = false;
    error_msg.push("First key issue is empty");
  }
  if (isEmpty(Key_Issue_2)) {
    isValid = false;
    error_msg.push("Second key issue is empty");
  }
  if (isEmpty(Key_Issue_3)) {
    isValid = false;
    error_msg.push("Third key issue is empty");
  }
  if (isFalse(agreement)) {
    isValid = false;
    error_msg.push("Aggreement is not checked");
  }
  if (afiliation.length == 0) {
    isValid = false;
    error_msg.push("Affiliation is empty");
  }

  if (afiliation.length > 0) {
    afiliation.forEach((element) => {
      if (isEmpty(element.company_name)) {
        isValid = false;
        error_msg.push("Affiliation company name is empty");
      }
      if (isEmpty(element.start_date)) {
        isValid = false;
        error_msg.push("Affiliation start date is empty");
      }
      if (isEmpty(element.end_date)) {
        isValid = false;
        error_msg.push("Affiliation end date is empty");
      }
      if (isEmpty(element.role)) {
        isValid = false;
        error_msg.push("Affiliation company role is empty");
      }
    });
  } else {
    isValid = false;
  }

  State.update({
    error_msg: isValid ? null : error_msg.join("\n"),
  });

  return isValid;
};

const uploadFileUpdateState = (body) => {
  asyncFetch("https://ipfs.near.social/add", {
    method: "POST",
    headers: { Accept: "application/json" },
    body,
  }).then(async (res) => {
    const _cid = res.body.cid;
    const _name = body.name;
    State.update({ img: { uploading: "true", cid: _cid, name: _name } });
  });
};

const filesOnChange = (files) => {
  if (files) {
    State.update({ error_msg: null });
    uploadFileUpdateState(files[0]);
  }
};

const handleName = (item) => State.update({ name: item, error_msg: null });

const handleProfile = (item) =>
  State.update({ profileAccount: item, error_msg: null });

const handleChangeHouse = (item) => {
  if (item === "HouseOfMerit") Storage.privateSet("Houseselected", 1);
  if (item === "CouncilOfAdvisors") Storage.privateSet("Houseselected", 2);
  if (item === "TransparencyCommission") Storage.privateSet("Houseselected", 3);

  State.update({ house_intended: item, error_msg: null });
};

const addFields = () => {
  var temp = state.afiliation;
  let object = {
    company_name: "",
    start_date: "",
    end_date: "",
    role: "",
  };

  if (temp.length === 6) return;

  temp.push(object);
  State.update({ afiliation: temp, error_msg: null });
};

const removeField = (index) => {
  State.update({
    afiliation: state.afiliation.splice(index, 1),
    error_msg: null,
  });
};

const validate = (key, item, limit) =>
  State.update({ [key]: item.substring(0, limit ?? 2000), error_msg: null });

const validateAffiliations = (params, key, limit) => {
  let data = state.afiliation;
  let error_msg = null;

  if (params.event.target.value === "") error_msg = `"${key}" is empty`;

  data[params.index][key] = params.event.target.value.substring(0, limit);
  State.update({ afiliation: data, error_msg });
};

const handleDeclaration = (agreement) => {
  State.update({ agreement: agreement.toString, error_msg: null });
};

const handleNominate = () => {
  if (!validatedInputs()) return;

  let newstate = Object.assign({}, state);
  newstate.afiliation = JSON.stringify(newstate.afiliation);
  newstate.tags = newstate.tags.join(",");
  const stateAsString = JSON.stringify(newstate);
  const data = ` {"data":{ "${context.accountId}": {"nominations":${stateAsString}} }}`;
  const SocialArgs = JSON.parse(data);

  let SelfNominate_Payload = {
    contractName: nomination_contract,
    methodName: "self_nominate",
    args: {
      house: state.house_intended,
      comment: context.accountId,
      link: "",
    },
    gas: 300000000000000,
    deposit: 100000000000000000000000,
  };

  let Social_Payload = {
    contractName: Socialcontract,
    methodName: "set",
    args: SocialArgs,
    gas: 300000000000000,
    deposit: 100000000000000000000000,
  };

  Near.call([Social_Payload, SelfNominate_Payload]).then(() => handleClose());
};

return (
  <Modal>
    <ComponentWrapper>
      <CardStyled name="compose">
        <div className="d-flex flex-column ">
          <H1>Self Nominate</H1>

          <CardForm name="cardform">
            <Widget
              src={widgets.styledComponents}
              props={{
                Dropdown: {
                  label: "House",
                  value: state.house_intended,
                  handleChange: (item) => handleChangeHouse(item),
                  options: [
                    { title: "Select house", value: 0, default: true },
                    { title: "House Of Merit", value: "HouseOfMerit" },
                    {
                      title: "Council Of Advisors",
                      value: "CouncilOfAdvisors",
                    },
                    {
                      title: "Transparency Commission",
                      value: "TransparencyCommission",
                    },
                  ],
                },
              }}
            />
            <Hr />
            <Widget
              src={widgets.platform}
              props={{
                inputs: [
                  {
                    label:
                      "How are you involved with the NEAR ecosystem? Why are you a qualified candidate? Why should people vote for you? *",
                    placeholder: "Elaborate on your candidacy",
                    value: state.HAYInvolve,
                    handleChange: (e) => validate("HAYInvolve", e.target.value),
                  },
                  {
                    label:
                      "What is your strategy to develop the NEAR ecosystem? *",
                    placeholder: "Elaborate on your strategy",
                    value: state.WIYStrategy,
                    handleChange: (e) =>
                      validate("WIYStrategy", e.target.value),
                  },
                  {
                    label:
                      "What’s your view and pledge on the issue of User Experience and Accessibility? This issue focuses on improving the user experience, developing the social layer, enhancing the developer experience, and making the Near platform accessible to all users, including those with little technical expertise. It also explores how Near can evoke positive emotions in its users. *",
                    placeholder: "Elaborate on your position and pledge",
                    value: state.Key_Issue_1,
                    handleChange: (e) =>
                      validate("Key_Issue_1", e.target.value),
                  },
                  {
                    label:
                      "What’s your view and pledge on the issue of Economic Growth and Innovation? This issue emphasizes the need for economic growth within the NDC, the development of DeFi capabilities, the establishment of fiat ramps, and the support for founders, developers, creators, and builders. It also stresses the importance of launching useful products on the Near mainnet. *",
                    placeholder: "Elaborate on your position and pledge",
                    value: state.Key_Issue_2,
                    handleChange: (e) =>
                      validate("Key_Issue_2", e.target.value),
                  },
                  {
                    label:
                      "What’s your view and pledge on the issue of Marketing and Outreach? This issue underscores the importance of marketing to make NEAR a household name, conducting research, participating in conferences and hackathons, integrating with Web 2.0 platforms, and promoting Near as a hub of innovation. *",
                    placeholder: "Elaborate on your position and pledge",
                    value: state.Key_Issue_3,
                    handleChange: (e) =>
                      validate("Key_Issue_3", e.target.value),
                  },
                  {
                    label: "Additional Platform",
                    placeholder:
                      "Elaborate on your position and your pledge on additional issues and topics *",
                    value: state.addition_platform,
                    handleChange: (e) =>
                      validate("addition_platform", e.target.value),
                  },
                ],
              }}
            />
            <Widget
              src={widgets.affiliations}
              props={{
                affiliations: state.afiliation,
                addFields,
                removeField,
                handleAFFCompanyName: (params) =>
                  validateAffiliations(params, "company_name", 500),
                handleAFFStartdate: (params) =>
                  validateAffiliations(params, "start_date"),
                handleAFFEnddate: (params) =>
                  validateAffiliations(params, "end_date"),
                handleAFFRole: (params) =>
                  validateAffiliations(params, "role", 500),
              }}
            />

            <Section>
              <Widget
                src={widgets.styledComponents}
                props={{
                  Input: {
                    label: "Video Link (optional)",
                    placeholder:
                      "Add a Youtube video link that describes your candidacy",
                    value: state.video,
                    handleChange: (e) =>
                      State.update({ video: e.target.value }),
                  },
                }}
              />
            </Section>

            <Widget
              src={widgets.tags}
              props={{
                agreement: state.agreement,
                tags: state.tags,
                handleTags: (tags) => State.update({ tags: Object.keys(tags) }),
                handleDeclaration,
              }}
            />

            {state.error_msg && (
              <ErrorBlock>
                <label className="text-danger">{state.error_msg}</label>
              </ErrorBlock>
            )}

            <div className="col-sm-12 px-4 w-100">
              <Submitcontainer>
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      className: "secondary dark",
                      text: "Cancel",
                      onClick: handleClose,
                    },
                  }}
                />
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      text: "Submit",
                      onClick: handleNominate,
                    },
                  }}
                />
              </Submitcontainer>
            </div>
          </CardForm>
        </div>
      </CardStyled>
    </ComponentWrapper>
  </Modal>
);

'''
'''--- NDC/Nomination/Compose/Affiliations.js ---
const {
  affiliations,
  addFields,
  removeField,
  handleAFFCompanyName,
  handleAFFStartdate,
  handleAFFEnddate,
  handleAFFRole,
} = props;

const H2 = styled.h2`
  font-size: 14px;
`;
const Separator = styled.div`
  width: 100%;
  height: 1px;
  margin: 5px 0 12px 0;
  background-color: #d0d6d966;
`;
const Section = styled.div`
  margin-bottom: 12px;
`;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

const getCurrDate = () => {
  let year = new Date().getFullYear().toString();

  let month = new Date().getMonth();
  month = month < 10 ? "0" + (month + 1) : month + 1;

  let day = new Date().getDate();
  day = day < 10 ? "0" + day.toString() : day.toString();

  return year + "-" + month + "-" + day;
};

return (
  <div className="w-100">
    <div className="d-flex justify-content-between pt-2">
      <H2>Afiliations</H2>
      <Widget
        src={widgets.styledComponents}
        props={{
          Button: {
            size: "sm",
            text: "Add More Affiliations",
            icon: <i className="bi bi-lg-plus" />,
            onClick: addFields,
          },
        }}
      />
    </div>
    <Separator />

    <div className="w-100">
      {affiliations.map((form, index) => {
        return (
          <div className="bg-white rounded p-4">
            <div>
              <Section>
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Input: {
                      label: "Organization Name *",
                      placeholder: "Company Name",
                      value: form.company_name,
                      handleChange: (event) =>
                        handleAFFCompanyName({ index, event }),
                    },
                  }}
                />
              </Section>
              <Section className="d-flex">
                <div className="w-100">
                  <Widget
                    src={widgets.styledComponents}
                    props={{
                      Input: {
                        type: "date",
                        label: "Start date *",
                        value: form.start_date ?? getCurrDate(),
                        handleChange: (event) =>
                          handleAFFStartdate({ index, event }),
                      },
                    }}
                  />
                </div>
                <div className="px-2" />
                <div className="w-100">
                  <Widget
                    src={widgets.styledComponents}
                    props={{
                      Input: {
                        type: "date",
                        label: "End date *",
                        value: form.end_date ?? getCurrDate(),
                        handleChange: (event) =>
                          handleAFFEnddate({ index, event }),
                      },
                    }}
                  />
                </div>
              </Section>

              <Section>
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    TextArea: {
                      label: "Role Description *",
                      placeholder:
                        "Please describe your role at the organization",
                      value: form.role,
                      limit: 2000,
                      handleChange: (event) => handleAFFRole({ index, event }),
                    },
                  }}
                />
              </Section>

              <div className="d-flex justify-content-end">
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      size: "sm",
                      className: "danger",
                      text: "Delete Affiliation",
                      icon: <i className="bi bi-trash" />,
                      onClick: () => removeField(index),
                    },
                  }}
                />
              </div>
            </div>
          </div>
        );
      })}
    </div>
  </div>
);

'''
'''--- NDC/Nomination/Compose/Platform.js ---
const { inputs } = props;

const Section = styled.div`
  margin-bottom: 5px;
`;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

return (
  <>
    {inputs.map((input, i) => (
      <Section key={i}>
        <Widget
          src={widgets.styledComponents}
          props={{
            TextArea: {
              label: input.label,
              placeholder: input.placeholder,
              maxLength: 2000,
              value: input.value,
              handleChange: input.handleChange,
            },
          }}
        />
      </Section>
    ))}
  </>
);

'''
'''--- NDC/Nomination/Compose/Tags.js ---
const H2 = styled.h1`
  font-weight: 500;
  font-size: 14px;
  margin: 15px 0 10px 0;
`;
const Section = styled.div`
  gap: 8px;
  margin-bottom: 10px;
`;
const Checkbox = styled.input`
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  align-items: flex-start;
  padding: 0px 0px;
  gap: 10px;
  width: 16px;
  height: 16px;
  background: #ffffff;
  border: 1px solid #d0d6d9;
  border-radius: 4px;
  flex: none;
  order: 0;
  flex-grow: 0;
`;

const P = styled.p`
  font-weight: 400;
  font-size: 12px;
  margin: 0;
`;

const A = styled.a`
  margin-left: 4px;
  font-weight: 600;
  font-size: 12px;
  color: #000000;
`;

State.init({
  agreement: false,
  tags: "",
  error_msg: "",
});

const { tags, handleTags, handleDeclaration } = props;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

return (
  <div>
    <Widget
      src={"sayalot.near/widget/TagsEditor"}
      props={{
        label: "Tags",
        placeholder: "Enter tags",
        setTagsObject: handleTags,
      }}
    />

    <div>
      <H2>{"Declaration of transparency "}</H2>
      <Section className="d-flex">
        <Checkbox
          type="checkbox"
          value={state.agreement}
          onChange={() => {
            handleDeclaration(!state.agreement);
            State.update({ agreement: !state.agreement });
          }}
        />
        <P>
          I agree to the
          <A
            href="https://bafkreid3vx2tivdlwkivezalhkscxnxakirw5nuunxce3b6ivtx4j6ac44.ipfs.nftstorage.link/"
            target={"_blank"}
            rel={"noopener"}
          >
            Declaration of Transparency and Accountability.
          </A>
        </P>
      </Section>
    </div>
  </div>
);

'''
'''--- NDC/Nomination/DeleteNomination.js ---
const { handleClose, house, nomination_contract } = props;

const ModalCard = styled.div`
  position: fixed;
  z-index: 1;
  left: 0;
  top: 0;
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  background: rgba(0, 0, 0, 0.7);
`;
const CommentCard = styled.div`
  width: 305px;
  padding: 20px;
  border-radius: 10px;
  background: #fff;
  border: 1px solid transparent;
  margin: 0 auto;
  @media only screen and (max-width: 480px) {
    width: 90%;
  }
`;

const ExitContainer = styled.div`
  display: flex;
  flex-direction: row;
  align-items: flex-end;
  justify-content: end;
`;

const IconContainer = styled.div`
  display: flex;
  justify-content: center;
`;

const widgets = {
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
};

function handleSelfRevoke() {
  Storage.privateSet("Houseselected", house);
  Near.call(nomination_contract, "self_revoke").then(() => handleClose());
}

return (
  <ModalCard>
    <CommentCard>
      <ExitContainer>
        <i role="button" className="fs-3 bi bi-x" onClick={handleClose} />
      </ExitContainer>
      <IconContainer>
        <i className="fs-1 bi bi-trash" />
      </IconContainer>
      <h5 className="text-center py-3">
        Are you sure you’d like to delete your nomination? You will lose the
        current upvotes and comments.
      </h5>
      <div className="d-flex justify-content-between align-items-center">
        <Widget
          src={widgets.styledComponents}
          props={{
            Button: {
              text: "Cancel",
              className: "dark primary",
              onClick: handleClose,
            },
          }}
        />

        <Widget
          src={widgets.styledComponents}
          props={{
            Button: {
              text: "Delete nomination",
              className: "danger secondary",
              onClick: handleSelfRevoke,
            },
          }}
        />
      </div>
    </CommentCard>
  </ModalCard>
);

'''
'''--- NDC/Nomination/Page.js ---
let { ids, dev } = props;
ids = props.ids ? ids : [1, 2, 3];

const electionContract = "elections-v1.gwg-testing.near";
const registryContract = dev
  ? "registry-v1.gwg-testing.near"
  : "registry.i-am-human.near";
const issuer = dev ? "fractal.i-am-human.near" : "community.i-am-human.near";
const nominationContract = dev
  ? "nominations-v1.gwg-testing.near"
  : "nominations.ndc-gwg.near";
const apiKey = "36f2b87a-7ee6-40d8-80b9-5e68e587a5b5";

function handleSelfRevoke() {
  Near.call(nominationContract, "self_revoke");
}

const widgets = {
  header: "election.ndctools.near/widget/NDC.Elections.Header",
  card: "nomination.ndctools.near/widget/NDC.Nomination.Card",
  houses: "nomination.ndctools.near/widget/NDC.Nomination.Houses",
  filter: "election.ndctools.near/widget/NDC.Elections.Filter",
  styledComponents: "nomination.ndctools.near/widget/NDC.StyledComponents",
  verifyHuman: "nomination.ndctools.near/widget/NDC.VerifyHuman",
  compose: "nomination.ndctools.near/widget/NDC.Nomination.Compose",
  deleteNomination:
    "nomination.ndctools.near/widget/NDC.Nomination.DeleteNomination",
};

State.init({
  selectedHouse: ids[0],
  house: "HouseOfMerit",
  start: true,
  nominations: [],
  sbt: false,
  og: false,
  selfNomination: false,
  search: false,
  candidateId: "",
  originNominations: [],
  notFound: "There are no active nominations at the moment",
  loading: false,
});

const time = Near.view(nominationContract, "active_time", {});

const httpRequestOpt = {
  headers: { "x-api-key": apiKey },
};

const baseApi = "https://api.pikespeak.ai";

const endpoints = {
  candidateComments: `${baseApi}/nominations/candidates-comments-and-upvotes?candidate=${context.accountId}&contract=${nominationContract}`,
  houseNominations: (house) =>
    `${baseApi}/nominations/house-nominations?house=${house}&contract=${nominationContract}`,
};

const getVerifiedHuman = () => {
  const isHuman = Near.view(registryContract, "is_human", {
    account: context.accountId,
  });
  const ogTokens = Near.view(registryContract, "sbt_tokens", {
    issuer,
  });

  asyncFetch(endpoints.candidateComments, httpRequestOpt).then((res) => {
    if (res.body.length > 0) {
      State.update({ selfNomination: true, start: false });
    }
  });

  State.update({
    og: ogTokens.some((sbt) => sbt.owner === context.accountId),
    sbt: isHuman[0][1].length > 0,
    start: false,
  });
};

const getNominationInfo = (house) => {
  let nominationsArr = [];

  State.update({ loading: true, start: false });

  asyncFetch(endpoints.houseNominations(house), httpRequestOpt).then((res) => {
    if (res.body.length <= 0) {
      State.update({ nominations: [], loading: false, start: false });
      return;
    }

    for (const [i, data] of res.body.entries()) {
      let objCard = { indexerData: data };
      let nominee = data.nominee;

      asyncFetch(
        `${baseApi}/nominations/candidates-comments-and-upvotes?candidate=${data.nominee}&contract=${nominationContract}`,
        httpRequestOpt
      ).then((info) => {
        let upVoteInfo = info.body[0];
        let profileData;
        let nominationData;
        Social.getr(`${nominee}/profile`);
        Social.getr(`${nominee}/nominations`);
        setTimeout(() => {
          profileData = Social.getr(`${nominee}/profile`);
          nominationData = Social.getr(`${nominee}/nominations`);
        }, 2000);

        setTimeout(() => {
          if (data.is_revoked || !profileData || !nominationData) {
            State.update({ loading: false, start: false });
            return;
          }

          objCard = {
            profileData: profileData,
            nominationData: nominationData,
            upVoteData: upVoteInfo,
            ...objCard,
          };

          nominationsArr.push(objCard);
          nominationsArr = nominationsArr.sort(
            (a, b) =>
              new Date(b.indexerData.timestamp).getTime() -
              new Date(a.indexerData.timestamp).getTime()
          );

          State.update({
            nominations: nominationsArr,
            originNominations: nominationsArr,
            loading: false,
            start: false,
          });
        }, 2000);
      });
    }
  });
};

const handleSelect = (item) => {
  switch (item.id) {
    case 1:
      getNominationInfo("HouseOfMerit");
      break;
    case 2:
      getNominationInfo("CouncilOfAdvisors");
      break;
    case 3:
      getNominationInfo("TransparencyCommission");
      break;
  }
  State.update({ selectedHouse: item.id });
};

const handleFilter = (e) => {
  const text = e.target.value;

  State.update({ candidateId: text });

  if (text.length > 0) {
    let filtered = state.originNominations.filter((data) => {
      const affiliations = JSON.parse(data.nominationData.afiliation);
      const companyNames =
        affiliations?.length > 0 &&
        affiliations.map((af) => af.company_name.toLowerCase());

      return (
        data.profileData.name.toLowerCase().includes(text.toLowerCase()) ||
        (companyNames &&
          companyNames.some((c) => c.includes(text.toLowerCase())))
      );
    });

    if (filtered.length > 0) State.update({ nominations: filtered });
    else
      State.update({
        notFound: "There are no such candidates or affiliations",
        nominations: [],
      });
  } else {
    State.update({ nominations: state.originNominations });
  }
};

if (state.start) {
  getVerifiedHuman();
  getNominationInfo("HouseOfMerit");

  State.update({ start: false });
}

const Container = styled.div`
  padding: 30px 0;
  margin: 0;
`;

const ActivityContainer = styled.div`
  overflow-y: scroll;
`;

const Left = styled.div`
  padding: 20px;
  background: #f8f8f9;
  border-radius: 8px;
`;

const Center = styled.div``;

const H5 = styled.h5`
  margin-bottom: 20px;
`;

const ButtonNominateContainer = styled.div`
  padding: 16px;
  border-radius: 8px;
  background: #f8f8f9;
`;

const Filter = styled.div`
  margin-top: 32px;

  @media only screen and (max-width: 1061px) {
    flex-direction: column;
  }
`;

const Toolbar = styled.div`
  margin-left: 20px;
  @media only screen and (max-width: 1061px) {
    margin: 10px 0 0 0;
  }
`;

const Loader = () => (
  <span
    className="spinner-grow spinner-grow-sm me-1"
    role="status"
    aria-hidden="true"
  />
);

return (
  <>
    <div>
      <Widget
        src={widgets.header}
        props={{
          startTime: time ? time[0] : 0,
          endTime: time ? time[1] : 0,
          type: "Nomination",
          isWhistleblower: true,
        }}
      />
      <Filter className="d-flex">
        <div className="w-100">
          <Widget
            src={widgets.filter}
            props={{
              handleFilter,
              candidateId: state.candidateId,
              placeholder: "Search by candidate name and affiliation",
            }}
          />
        </div>
        {state.og && (
          <Toolbar>
            <ButtonNominateContainer>
              {state.selfNomination ? (
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      className: "danger primary",
                      text: "Delete Self Nomination",
                      onClick: () => State.update({ showModalDelete: true }),
                      icon: <i class="bi bi-trash"></i>,
                      disabled: true,
                    },
                  }}
                />
              ) : (
                <Widget
                  src={widgets.styledComponents}
                  props={{
                    Button: {
                      text: "Self Nominate",
                      onClick: () => State.update({ showModal: true }),
                      icon: <i class="bi bi-plus-lg"></i>,
                      disabled: true,
                    },
                  }}
                />
              )}
            </ButtonNominateContainer>
          </Toolbar>
        )}
      </Filter>
      <Container className="d-flex row justify-content-between w-100">
        <Left className="col-lg">
          <H5>Houses</H5>
          <Widget
            src={widgets.houses}
            props={{
              selectedHouse: state.selectedHouse,
              electionContract,
              handleSelect: (item) => handleSelect(item),
            }}
          />
          <div>
            {!state.sbt && (
              <div className="mt-5">
                <Widget
                  src={widgets.verifyHuman}
                  props={{
                    title: "To Comment or to Upvote",
                    description: "Verify as a Human to comment or to Upvote",
                    small: true,
                  }}
                />
              </div>
            )}
          </div>
        </Left>
        <Center className="col-lg-9 px-2 px-md-3 d-flex flex-row flex-wrap">
          {state.loading ? (
            <Loader />
          ) : state.nominations.length > 0 ? (
            state.nominations.map((data) => (
              <Widget
                src={widgets.card}
                props={{
                  data,
                  registry_contract: registryContract,
                  nomination_contract: nominationContract,
                  election_contract: electionContract,
                  api_key: apiKey,
                  dev,
                }}
              />
            ))
          ) : (
            <div className="flex mt-10 container-fluid align-self-center">
              <H5 className="text-center">{state.notFound}</H5>
            </div>
          )}
        </Center>
      </Container>
    </div>

    <>
      {state.showModal && (
        <Widget
          src={widgets.compose}
          props={{
            handleClose: () => State.update({ showModal: false }),
            nomination_contract: nominationContract,
          }}
        />
      )}
      {state.showModalDelete && (
        <Widget
          src={widgets.deleteNomination}
          props={{
            house: state.house,
            handleClose: () => State.update({ showModalDelete: false }),
            nomination_contract: nominationContract,
          }}
        />
      )}
    </>
  </>
);

'''
'''--- NDC/Stepper.js ---
const Step = styled.li`
  display: flex;
  flex-direction: column;
  position: relative;
  flex: 1;
  text-align: center;

  &:before {
    content: "";
    display: block;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    border: 1.5px solid;
    border-color: ${(props) => (props.completed ? "#5bc65f" : "#4BA6EE")};
    background-color: ${(props) => (props.completed ? "#5bc65f" : "#fff")};
    margin: 0 auto 10px;
  }

  &:not(:last-child) {
    &:after {
      content: "";
      position: relative;
      top: calc(20px / 2);
      width: calc(100% - 20px - calc(clamp(0.25rem, 2vw, 0.5rem) * 2));
      left: calc(50% + calc(20px / 2 + clamp(0.25rem, 2vw, 0.5rem)));
      height: 1.5px;
      background-color: #e0e0e0;
      order: -1;
    }
  }

  i {
    color: #fff;
    position: absolute;
    left: calc(50% - calc(16px / 2));
  }

  h6 {
    font-size: 12px;
  }

  small {
    @media (max-width: 400px) {
      font-size: 12px;
      padding: 5px;
    }
  }
`;

return (
  <div className="d-flex">
    {props.steps.map((step) => (
      <Step completed={step.completed}>
        <small className={step.completed ? "fw-bolder" : "text-secondary"}>
          {step.title}
        </small>
        <h6 className="text-secondary">{step.description}</h6>
        {step.completed && <i className="bi bi-check" />}
      </Step>
    ))}
  </div>
);

'''
'''--- NDC/StyledComponents.js ---
const { Button, Dropdown, TextArea, Input, Link, Tag, _contract } = props;

const contract = _contract ?? "nomination.ndctools.near";

State.init({ textArea: "", input: "" });

const Styled = {
  Button: styled.button`
    width: max-content;
    padding: ${(props) => (Button.size === "sm" ? "4px 12px" : "8px 20px")};
    height: ${(props) => (Button.size === "sm" ? "28px" : "")};
    font-size: ${(props) => (Button.size === "sm" ? "12px" : "14px")};
    border-radius: ${(props) => (Button.size === "sm" ? "6px" : "10px")};
    font-weight: 500;
    line-height: 24px;
    text-align: center;
    border: 0;

    &.primary {
      background: #ffd50d;

      &:hover {
        background: #e7c211;
      }

      &.dark {
        color: #fff;
        background: #4ba6ee;

        &:hover {
          background: #3b86cb;
        }
      }

      &.danger {
        background: #dd5e56;
        color: #fff;

        &:hover {
          background: #c23f38;
        }
      }

      &.success {
        background: #5bc65f;
        color: #fff;

        &:hover {
          background: #239f28;
        }
      }

      &:disabled {
        cursor: not-allowed;
        background: #c3cace;
        color: #828688;
        border: 0;

        &:hover {
          background: #c3cace;
          color: #828688;
        }
      }
    }

    &.secondary {
      background: transparent;
      border: 1px solid;
      border-color: ${(props) => (Button.inverse ? "#fff" : "#ffd50d")};
      color: ${(props) => (Button.inverse ? "#fff" : "#ffd50d")};

      &:hover {
        border-color: ${(props) => (Button.inverse ? "#fff" : "#e7c211")};
        color: ${(props) => (Button.inverse ? "#fff" : "#e7c211")};
      }

      &.dark {
        border-color: ${(props) => (Button.inverse ? "#fff" : "#4BA6EE")};
        color: ${(props) => (Button.inverse ? "#fff" : "#4BA6EE")};

        &:hover {
          border-color: ${(props) => (Button.inverse ? "#fff" : "#3B86CB")};
          color: ${(props) => (Button.inverse ? "#fff" : "#3B86CB")};
        }
      }

      &.danger {
        border: 1px solid #dd5e56;
        color: #dd5e56;

        &:hover {
          border-color: #c23f38;
          color: #c23f38;
        }
      }

      &:disabled {
        border-color: #c3cace;
        color: #828688;
        cursor: not-allowed;

        &:hover {
          border-color: #c3cace;
          color: #828688;
        }
      }
    }

    i {
      margin: 0;
    }
  `,

  Link: styled.a`
    width: max-content;
    padding: ${(props) => (Link.size === "sm" ? "4px 12px" : "8px 20px")};
    height: ${(props) => (Link.size === "sm" ? "28px" : "")};
    font-size: ${(props) => (Link.size === "sm" ? "12px" : "14px")};
    border-radius: ${(props) => (Link.size === "sm" ? "6px" : "10px")};
    font-weight: 500;
    line-height: 24px;
    text-align: center;
    border: 0;
    color: black;

    &:hover {
      text-decoration: none;
      color: black;
    }

    &.primary {
      background: #ffd50d;

      &:hover {
        background: #e7c211;
      }

      &.dark {
        color: #fff;
        background: #4ba6ee;

        &:hover {
          background: #3b86cb;
        }
      }

      &.danger {
        background: #dd5e56;
        color: #fff;

        &:hover {
          background: #c23f38;
        }
      }

      &:disabled {
        background: #c3cace;
        color: #828688;
        border: 0;
      }
    }

    &.secondary {
      background: transparent;
      border: 1px solid;
      border-color: ${(props) => (Link.inverse ? "#fff" : "#ffd50d")};
      color: ${(props) => (Link.inverse ? "#fff" : "#ffd50d")};

      &:hover {
        border-color: ${(props) => (Link.inverse ? "#fff" : "#e7c211")};
        color: ${(props) => (Link.inverse ? "#fff" : "#e7c211")};
      }

      &.dark {
        border-color: ${(props) => (Link.inverse ? "#fff" : "#4BA6EE")};
        color: ${(props) => (Link.inverse ? "#fff" : "#4BA6EE")};

        &:hover {
          border-color: ${(props) => (Link.inverse ? "#fff" : "#3B86CB")};
          color: ${(props) => (Link.inverse ? "#fff" : "#3B86CB")};
        }
      }

      &.danger {
        border: 1px solid #dd5e56;
        color: #dd5e56;

        &:hover {
          border-color: #c23f38;
          color: #c23f38;
        }
      }

      &.success {
        border: 1px solid rgb(35, 159, 40);
        color: rgb(35, 159, 40);
      }

      &:disabled {
        border-color: #c3cace;
        color: #828688;
      }
    }

    i {
      margin: 0;
      margin-left: ${(props) => (Link.text ? "5px" : "0")};
    }
  `,

  Select: styled.select`
    padding: 8px 10px;
    width: 100%;
    height: 40px;
    background: #ffffff;
    border: 1px solid #d0d6d9;
    border-radius: 8px;
    font-size: 14px;
    color: #828688;
  `,
  TextArea: styled.textarea`
    padding: 8px 10px;
    width: 100%;
    background: #ffffff;
    border: 1px solid #d0d6d9;
    border-radius: 8px;
    font-size: 14px;
    color: #828688;
  `,
  Input: styled.input`
    padding: 8px 10px;
    width: 100%;
    background: #ffffff;
    border: 1px solid #d0d6d9;
    border-radius: 8px;
    font-size: 14px;
    color: #828688;
  `,
  Tag: styled.div`
    display: flex;
    flex-direction: row;
    justify-content: center;
    align-items: center;
    padding: 4px 8px;
    border: 1px solid #4ba6ee;
    color: #4ba6ee;
    border-radius: 100px;

    &.dark {
      color: #fff;
      background: #4ba6ee;
    }

    p {
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      max-width: 150px;
      font-style: normal;
      font-weight: 500;
      font-size: 11px;
      line-height: 120%;
      margin-bottom: 0;
    }
  `,
};

const Container = styled.div`
  h4 {
    margin: 10px 0;
  }
`;

const Label = styled.label`
  font-size: 14px;
  font-style: normal;
  font-weight: 500;
  margin-bottom: 5px;
`;

if (Link)
  return (
    <Styled.Link
      size={Link.size}
      className={`align-items-center d-flex ${
        Link.className ?? "primary"
      } gap-1`}
      href={Link.href}
      target={Link.doNotOpenNew ? "" : "_blank"}
      disabled={Link.disabled}
      inverse={Link.inverse}
    >
      {Link.text && <div>{Link.text}</div>}
      {Link.icon && (
        <div className={`${Link.size === "sm" ? "fs-7" : "fs-6"}`}>
          {Link.icon}
        </div>
      )}
    </Styled.Link>
  );

if (Button)
  return (
    <Styled.Button
      size={Button.size}
      className={`align-items-center d-flex ${
        Button.className ?? "primary"
      } gap-1`}
      onClick={Button.onClick}
      disabled={Button.disabled}
      text={Button.text}
      inverse={Button.inverse}
    >
      {Button.text && <div>{Button.text}</div>}
      {Button.icon && (
        <div className={`${Button.size === "sm" ? "fs-7" : "fs-6"}`}>
          {Button.icon}
        </div>
      )}
      {Button.image && (
        <Widget
          src="mob.near/widget/Image"
          props={{
            image: { url: Button.image.url },
            alt: Button.image.alt ?? "",
            style: {
              height: "20px",
              objectFit: "cover",
              margin: "0 0 3px 3px",
            },
            fallbackUrl:
              "https://ipfs.near.social/ipfs/bafkreibmiy4ozblcgv3fm3gc6q62s55em33vconbavfd2ekkuliznaq3zm",
          }}
        />
      )}
    </Styled.Button>
  );

if (Tag)
  return (
    <Styled.Tag className={Tag.className}>
      <p title={Tag.title}>{Tag.title}</p>
    </Styled.Tag>
  );

if (Dropdown)
  return (
    <div>
      <Label>{Dropdown.label}</Label>
      <Styled.Select
        value={Dropdown.value}
        onChange={(e) => Dropdown.handleChange(e.target.value)}
      >
        {Dropdown.options.map((opt) => (
          <>
            {opt.default ? (
              <option default value={opt.value}>
                {opt.title}
              </option>
            ) : (
              <option value={opt.value}>{opt.title}</option>
            )}
          </>
        ))}
      </Styled.Select>
    </div>
  );

if (TextArea)
  return (
    <div>
      {TextArea.label && <Label>{TextArea.label}</Label>}
      <Styled.TextArea
        placeholder={TextArea.placeholder}
        onChange={(e) => {
          State.update({ textArea: e.target.value });
          TextArea.handleChange(e);
        }}
        rows={5}
      />
      {TextArea.maxLength && (
        <div className="d-flex justify-content-end">
          <small style={{ fontSize: 12 }} className="text-secondary">
            {state.textArea.length ?? 0} / {parseInt(TextArea.maxLength)}
          </small>
        </div>
      )}
    </div>
  );

if (Input)
  return (
    <div>
      <Label>{Input.label}</Label>
      <Styled.Input
        value={state.value}
        type={Input.type ?? "text"}
        placeholder={Input.placeholder}
        onChange={(e) => {
          State.update({ input: e.target.value });
          Input.handleChange(e);
        }}
        maxLength={Input.maxLength}
        min={Input.min}
        max={Input.max}
      />

      {Input.maxLength && (
        <div className="d-flex justify-content-end">
          <small style={{ fontSize: 12 }} className="text-secondary">
            {parseInt(Input.maxLength) - Input.value.length ?? 0} left
          </small>
        </div>
      )}
    </div>
  );

'''
'''--- NDC/VerifyHuman.js ---
const { title, description, small } = props;

const Container = styled.div`
  background: #fdfeff;
  box-shadow: 0px 0px 30px rgba(0, 0, 0, 0.2);
  border-radius: 8px;
  padding: 16px;
  h3,
  h4 {
    margin: 0 3px;
  }
  h3 {
    font-weight: 900;
  }
  .text-secondary {
    margin: 0 10px;
  }
  &.not-verified {
    h4 {
      font-size: 16px;
      margin: 0 0 5px 0;
      font-weight: 600;
    }
    h5 {
      margin: 0;
      font-size: 12px;
    }
  }
`;
const PrimaryLink = styled.a`
  width: ${(p) => (p.small ? "100%" : "max-content")};
  padding: 8px 20px;
  font-size: 14px;
  border-radius: 10px;
  font-weight: 500;
  text-align:center;
  line-height: 24px;
  border: 0;
  background: #ffd50d;
  color: black;
  &:hover {
    background: #e7c211;
    text-decoration: none;
    color: inherit;
  }
`;
const VerifyHuman = () => (
  <Container
    className={`not-verified d-flex ${
      small ? "flex-column" : "align-items-center justify-content-between"
    }`}
  >
    <div className={`${small ? "pb-3" : ""}`}>
      <h4>{title}</h4>
      <h5 className="text-secondary">{description}</h5>
    </div>
    <PrimaryLink small={small} href="https://i-am-human.app/">
      Verify as Human
    </PrimaryLink>
  </Container>
);
return <VerifyHuman />;

'''
'''--- README.md ---
# gwg-widgets
Monorepo for BOS widgets.

File structure represented widget in BOS (`Folder.Subfolder`).
e.g. `NDC.Elections.Main` represented by `NDC/Elections/Main.js` file. 

## Usage

1. Copy codebase from  target file
2. Go to https://near.org/sandbox and paste it
3. Watch Component Preview or  directly save it on near social smart contruct. Just click on `Publish` button and confirm transaction.

'''