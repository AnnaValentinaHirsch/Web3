*GitHub Repository "Hsien-HsiuLiao/near-dapp-musician"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: |
      rustup target add wasm32-unknown-unknown
      yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- .vscode/settings.json ---
{
    
    "terminal.integrated.letterSpacing": 2

}
'''
'''--- README.md ---
NEAR dapp for Musicians
==================

This [React] app was initialized with [create-near-app]

      npx create-near-app --contract=rust --frontend=react my-project

Resources used for developing this dapp: 
* https://dacade.org/communities/near/courses/near-101
* https://www.near-sdk.io/ 
* https://www.near-sdk.io/zero-to-hero/basics/overview
* https://docs.near.org/docs/api/naj-quick-reference

Troubleshooting: (not initialized, etc)

- remove neardev folder and run `yarn dev` again (see https://www.near-sdk.io/upgrading/prototyping)

To do:

- create user catalog to show songs after purchase under username
- finish scripts
- record loom video https://www.loom.com/signup
- write tests
- assert statements (assert(env::caller == window.currentid))

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/assets/js/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "music_dapp"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/src/lib.rs ---
pub mod songs_purchased;

//use crate::songs_purchased::add_song_to_user_dashboard;
//use crate::songs_purchased;
/*
 * Learn more about writing NEAR smart contracts with Rust:
 * https://near-docs.io/develop/Contract
 *
 */
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{collections::*, Promise};
use near_sdk::{
    env, log, near_bindgen,
    serde::{Deserialize, Serialize},
    AccountId,
};

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, Debug)]
//#[serde(crate = "near_sdk::serde")]

//type ArtistId = AccountId;
pub struct Contract {
    songs_by_artist: UnorderedMap<AccountId, SongList>,
}

//#[derive(BorshDeserialize, BorshSerialize, Debug)]
#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct SongList {
    songs: Vec<SongInfo>,
}

impl Default for SongList {
    fn default() -> Self {
        SongList { songs: Vec::new() }
    }
}

#[derive(BorshDeserialize, BorshSerialize, Deserialize, Serialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct SongInfo {
    song_name: String,
    price: f32,
}

// 1 Ⓝ in yoctoNEAR
// const YOCTO_AMOUNT: u128 = 1_000_000_000_000_000_000_000_000;

// Define the default, which automatically initializes the contract

impl Default for Contract {
    fn default() -> Self {
        log!("default!");
        Self {
            songs_by_artist: UnorderedMap::new(b"s".to_vec()),
        }
    }
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    /*
    #[init]
    pub fn new() -> Self {
        log!("#[init]");
        Self {
            songs_by_artist: UnorderedMap::new(b"s"),
        }
    }
    */

    //Public method - accepts song name and price, and adds aong to artist's catalog
    pub fn add_song_info(&mut self, song_name: String, price: f32) {
        let get_songinfo = self
            .songs_by_artist
            .get(&env::predecessor_account_id())
            .unwrap_or_default();
        log!("songinfo: {:?}", &get_songinfo);
        let get_song_list = get_songinfo.songs;
        let mut song_list = get_song_list;
        song_list.push(SongInfo {
            song_name: song_name,
            price,
        });
        self.songs_by_artist.insert(
            &env::predecessor_account_id(),
            &SongList { songs: song_list },
        );
        log!(
            "songlist: {:?}",
            self.songs_by_artist
                .get(&env::predecessor_account_id())
                .unwrap()
                .songs
        );
    }
    //Public method - returns entire song catalog
    //pub fn get_song_catalog(&self, account_id: AccountId) -> SongList {
    pub fn get_song_catalog(&self) -> Vec<(AccountId, SongList)> {
        log!("get_song_catalog called");
        self.songs_by_artist.to_vec()
    }

    #[payable]
    pub fn buy_song(artist: AccountId, song_name: String, price: f32) {
        // if user songlist == null, create new default empty list
        // other wise , get user list by env::id
        Promise::new(artist).transfer(env::attached_deposit());
        log!("song purchased {} {}", song_name, env::attached_deposit());
        add_song_to_user_dashboard(&env::predecessor_account_id(), song_name);
    }

    /*
    pub fn remove_song_info(&mut self, account_id:AccountId, key:u8) {
        assert(caller==same_acct_that added_song)
        let get_songinfo = self.songs_by_artist.get(&account_id).unwrap_or_default();
        log!("songinfo: {:?}", &get_songinfo);
        let mut get_song_list = get_songinfo.songs;
        let mut song_list = get_song_list;
        remove by key?
        song_list.remove(key)
    }
     */
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use super::*;
    /*
    #[test]
    #[ignore]
    fn get_default_greeting() {
        let contract = Contract::default();
        // this test did not call set_greeting so should return the default "Hello" greeting
        assert_eq!(
            contract.get_greeting(),
            "Hello".to_string()
        );
    }

    #[test]
    #[ignore = "not yet implemented"]
    fn set_then_get_greeting() {
        let mut contract = Contract::default();
        contract.set_greeting("howdy".to_string());
        assert_eq!(
            contract.get_greeting(),
            "howdy".to_string()
        );
    }
    */
}

'''
'''--- contract/src/songs_purchased.rs ---
use near_sdk::AccountId;
use near_sdk::{collections::*, env};

//contains code for storing and retrieving song info a user has purchased
use near_sdk::log;

use crate::{SongList, SongInfo};

//user songlist struct, vec<songs>
//hashmap
type UserId = AccountId;

pub struct UserSongList {
    songs_purchased_by_user: UnorderedMap<UserId, SongList>,
}

impl UserSongList {
    pub fn add_song_to_user_dashboard(&mut self, user_id: &AccountId, song_name: String) {
        log!("{} {}", user_id, song_name);
    //hashmap add songs by user
    //hashmap key: user_id, value: Vec <songs>
        self.songs_purchased_by_user.get(&env::predecessor_account_id()).unwrap_or_default();
        
        //let mut getSongInfo = self
        // .songs_purchased_by_user
        // .get(&env::predecessor_account_id())
        // .unwrap_or_default();
        //let get_song_list = getSongInfo.songs;
        //let mut song_list = get_song_list;
        self.songs_purchased_by_user
            .get(&env::predecessor_account_id())
            .unwrap_or_default()
            .songs
            .push(SongInfo {
                song_name,
                    price: 0.0
            });

    }
}

//pub fn get_user_purchases(user_id) -> vec<songs> {}

'''
'''--- frontend/App.js ---
import 'regenerator-runtime/runtime'
import React, { useState, useCallback, useEffect } from 'react'

import './assets/css/global.css'

import { login, logout, add_song_info, get_song_catalog, accountBalance } from './assets/js/near/utils';
import Header from './assets/js/Header.js';
import SongList from './assets/js/SongList.js';
import AddSong from './assets/js/AddSong';
import TopBar from './assets/js/TopBar';

export default function App() {
  const [songCatalog, setSongCatalog] = useState([]);
  const [balance, setBalance] = useState("0");

  //@ts-ignore
  const getBalance = useCallback(async () => {
    if (window.walletConnection.account().accountId) {
      setBalance(await accountBalance());
    }
  });

  useEffect(() => {
    getBalance();
  }, [getBalance]);

  React.useEffect(
    () => {
      const init = async () => {
        try {
          let song_catalog = await get_song_catalog(window.accountId);
          setSongCatalog(song_catalog);
        } catch (e) {
          console.log(e)
        }
      };
      init()
    },

    []
  )

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <main>
        <h1>
          Welcome to NEAR!
        </h1>
        <p>
          Please sign in using the NEAR Wallet. Click the Sign In button below.
        </p>
        <p>
          This app runs in the test network ("testnet").
        </p>
        <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
          <button onClick={login}>Sign in</button>
        </p>
      </main>
    )
  }

  const addSongInfo = async (songInfo) => {
    const newSong = songname.value
    const parsedPrice = parseFloat(songInfo.price)
    try {
      // make an update call to the smart contract
      await add_song_info(songInfo.songname, parsedPrice)
    } catch (e) {
      alert(
        'Something went wrong! ' +
        'Maybe you need to sign out and back in? ' +
        'Check your browser console for more info.'
      )
      throw e
    }
    let song_catalog = await get_song_catalog(window.accountId);
    setSongCatalog(song_catalog);
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <TopBar balance={balance} logout={logout}/>
      <main>
        
        <Header />
        <AddSong add_song_info={add_song_info} get_song_catalog={get_song_catalog} addSongInfo={addSongInfo} />
        <hr />
        <SongList song_catalog={songCatalog} />
      </main>
    </>
  )
}

'''
'''--- frontend/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- frontend/assets/css/global.css ---
* {
  box-sizing: border-box;
}

html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
  max-width: 50em;
  text-align: justify;
}

h1 {
  background-image: url(../img/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 2.3em 0 0.5em;
  text-align: center;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}

button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover, button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button, button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
}
@keyframes loader {
  0% { transform: rotate(0deg) }
  100% { transform: rotate(360deg) }
}

fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
}
@keyframes notify {
  0% { transform: translateY(10em) }
  5% { transform: translateY(0) }
  95% { transform: translateY(0) }
  100% { transform: translateY(10em) }
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  h1 {
    background-image: url(../img/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

'''
'''--- frontend/assets/img/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/assets/img/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/assets/js/AddSong.js ---
import React, {useState} from 'react';
import Notification from './Notification.js';

function AddSong ({addSongInfo}) {
    const [buttonDisabled, setButtonDisabled] = useState(true);
    const [song, setSong] = useState();
    const [songInfo, setSongInfo] = useState(undefined);
    const [showNotification, setShowNotification] = useState(false);
    //const[songCatalog, setSongCatalog] = useState(undefined);

    const submit = async event => {
      event.preventDefault()
            // get elements from the form using their id attribute
            const { fieldset, song } = event.target.elements
            // hold onto new user-entered value from React's SynthenticEvent for use after `await` call
            // disable the form while the value gets updated on-chain
            fieldset.disabled = true
            await addSongInfo(songInfo)
           {/*  
             finally {}
             */}
              // re-enable the form, whether the call succeeded or failed
              fieldset.disabled = false;
              document.getElementById("songname").value = "";
              document.getElementById("price").value = "";

            // show Notification
            setShowNotification(true)
  
            // remove Notification again after css animation completes
            // this allows it to be shown again next time the form is submitted
            setTimeout(() => {
              setShowNotification(false)
            }, 11000)
    }

    const updateSongInfo = (e, field) => {
      setButtonDisabled(false);
      const value = e.target.value;
      setSongInfo({...songInfo, [field]: value});
    }

    return (
        <>
{/*        {songCatalog} */}
        <form onSubmit={(e) => submit(e)}>
            <fieldset id="fieldset">
            Musicians, input your song for sale
            <p></p>
              <div style={{ display: 'flex' }}>
              <label
                htmlFor="songname"
                style={{
                  display: 'block',
                  color: 'white',
                  marginBottom: '0.5em'
                }}
              >Song Name: </label>
                <input
                  autoComplete="off"
                  defaultValue=""
                  id="songname"
                  onChange={e => updateSongInfo(e, 'songname')}
                  style={{ flex: 1, backgroundColor: '#88AA88' }}
                />
              <label htmlFor="price">Price: </label>
                <input
                  autoComplete="off"
                  defaultValue=""
                  id="price"
                  type="text"
                  onChange={e => updateSongInfo(e, 'price')}
                  style={{ flex: 1, backgroundColor: '#88AA88' }}
                />
                <button
                  disabled={buttonDisabled}
                  style={{ borderRadius: '0 5px 5px 0' }}
                >
                  Submit
                </button>
              </div>
            </fieldset>
          </form>
            {showNotification && <Notification />}
        </>
    )
}
        
export default AddSong;
'''
'''--- frontend/assets/js/Header.js ---
import React from 'react';
import SongsPurchased from './SongsPurchased';

function Header() {
    return (
        <header style={headerstyle}>
            <h1>
                Hello,
                {' '/* React trims whitespace around tags; insert literal space character when needed */}
                {window.accountId}!
            </h1>
            <SongsPurchased />
        </header>

    );
}
const headerstyle = {
    background: '#333',
    color: '#fff',
    textAlign: 'left',
    padding: '10px'
}

export default Header;
'''
'''--- frontend/assets/js/Notification.js ---
import React from 'react';
import getConfig from './near/config';

function Notification() {
    const { networkId } = getConfig(process.env.NODE_ENV || 'development')
    const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
  
    return (
      <aside>
        <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
          {window.accountId}
        </a>
        {' '/* React trims whitespace around tags; insert literal space character when needed */}
        called method in contract:
        {' '}
        <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
          {window.contract.contractId}
        </a>
        <footer>
          <div>✔ Succeeded</div>
          <div>Just now</div>
        </footer>
      </aside>
    )
}
const notificationstyle = {
    background: '#333',
    color: '#fff',
    textAlign: 'left',
    padding: '10px'
}

export default Notification;
'''
'''--- frontend/assets/js/SongList.js ---
import React from 'react';
import {buy_song} from './near/utils'

function SongList({song_catalog}) {
    const buySong = async (songinfo, artist) => {
        console.log(artist, " songname: ",songinfo.song_name, "| price: ", songinfo.price);
        await buy_song(artist, songinfo.song_name, songinfo.price);
    }
    //? setAccountId(catalog[0])
    //? setSongList(catalog[1])
   // let song_catalog= await get_song_catalog();
   console.log("song_catalog passsed to SongList component", song_catalog);
   //console.log(song_catalog[0][1].songs[0].song_name);
    return (
        <div style={songListStyle}>
            <table style={tableStyle}>
                <thead style={tableStyle}>
                    <tr>
                        <th>Artist</th>
                     {/*    <th>Song Number</th> */}
                        <th>Song Name</th>
                        <th>Price (NEAR)</th>
                    </tr>
                </thead>
                <tbody>
                    {song_catalog.map(catalog => (
                        <tr>
                            <td>{catalog[0]}</td>{/*let AccountId = catalog[0], on line 31 add key? <td key=catalog[1].id>*/}
                            <td>{catalog[1].songs.map(songinfo =>(
                                <div>
                                {songinfo.song_name}
                                </div>
                            ))}</td>
                            <td>{catalog[1].songs.map(songinfo => (
                                <div>{songinfo.price}</div>
                            ))}</td>
                            <td>{catalog[1].songs.map(songinfo => (
                                <button style={{display:'block'}} onClick={() => buySong(songinfo, catalog[0])}>Buy</button>
                                
                            ))}</td>
                            <td>{catalog[1].songs.map(songinfo => (
                                <div>{window.accountId == catalog[0] && <button>delete</button>}</div>
                            ))}</td>
                            {/* 
                            delete button only for song owner
                            {
                                window.accountId == catalog[0]
                                &&<button>delete</button>
                            }
                            catalog[0] = accountId (key)
                            catalog[1] = songList   (value)
                            <td>{catalog[1].songs[0].song_name}</td>
                            <td>{catalog[1].songs[0].price}</td>
                            */}
                            
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>   
    );
}
const songListStyle = {
    background: '#000',
    color: '#fff',
    padding: '10px'
}

const tableStyle = {
    width: '100%',
    border: '1px solid white'
}

export default SongList;
'''
'''--- frontend/assets/js/SongsPurchased.js ---
import React from 'react';

function SongsPurchased() {
    return (
        <div>Songs Purchased:</div>
    );
}
const style = {
    background: '#333',
    color: '#fff',
    textAlign: 'left',
    padding: '10px'
}

export default SongsPurchased;
'''
'''--- frontend/assets/js/TopBar.js ---
import React from 'react';

function TopBar({balance, logout}) {
    return (
        <div style={barstyle}>
            <div>wallet balance: {balance} (NEAR)
            <button className="link" style={{ float: 'right' }} onClick={logout}>
                Sign out
            </button>
            </div>
        </div>
    );
}
const barstyle = {
    color: '#fff',
    textAlign: 'left',
    padding: '10px'
}

export default TopBar;
'''
'''--- frontend/assets/js/near/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'new-awesome-project'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- frontend/assets/js/near/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js';
import { formatNearAmount } from 'near-api-js/lib/utils/format';
import { parseNearAmount } from 'near-api-js/lib/utils/format';
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_song_catalog'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['add_song_info', 'buy_song'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

export async function add_song_info(songname, price) {
  let response = await window.contract.add_song_info({
    args:{song_name: songname, price}
  })
  return response
}

export async function get_song_catalog(account_id){
  let song_catalog = await window.contract.get_song_catalog({
    account_id: account_id
  });
  return song_catalog
}

export async function accountBalance() {
  return formatNearAmount(
    //@ts-ignore
    (await window.walletConnection.account().getAccountBalance()).total,
    6
  );
}

export async function buy_song(account_id, songname, price) {
  //let yoctoNEAR = 100000000000000000000000;
  let response = await window.contract.buy_song({
    artist: account_id, song_name: songname, price
  }, "300000000000000", // attached GAS
  parseNearAmount(price.toString()) // attached deposit in yoctoNEAR
  )
  return response
}
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/img/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/img/favicon.ico" />
    <title>NEAR dapp for musicians </title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import { initContract } from './assets/js/near/utils'

const container = document.querySelector('#root')
const root = createRoot(container) // createRoot(container!) if you use TypeScript

window.nearInitPromise = initContract()
  .then(() => {
    <App />
    root.render(<App tab="home" />)
  })
  .catch(console.error)

'''
'''--- integration-tests/rs/Cargo.toml ---
[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.2.1"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"

'''
'''--- integration-tests/rs/src/tests.rs ---
use near_units::parse_near;
use serde_json::json;
use workspaces::prelude::*;
use workspaces::{network::Sandbox, Account, Contract, Worker};

const WASM_FILEPATH: &str = "../../out/main.wasm";

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(WASM_FILEPATH)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let owner = worker.root_account();
    let alice = owner
        .create_subaccount(&worker, "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
  //  test_default_message(&alice, &contract, &worker).await?;
  //  test_changes_message(&alice, &contract, &worker).await?;
    Ok(())
}
/* 
async fn test_default_message(
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    let message: String = user
        .call(&worker, contract.id(), "get_greeting")
        .args_json(json!({}))?
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
    worker: &Worker<Sandbox>,
) -> anyhow::Result<()> {
    user.call(&worker, contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))?
        .transact()
        .await?;

    let message: String = user
        .call(&worker, contract.id(), "get_greeting")
        .args_json(json!({}))?
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
    
}
*/
'''
'''--- integration-tests/ts/package.json ---
{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava --verbose"
  },
  "devDependencies": {
    "ava": "^4.2.0",
    "near-workspaces": "^2.0.0",
    "typescript": "^4.7.2",
    "ts-node": "^10.8.0",
    "@types/bn.js": "^5.1.0"
  },
  "dependencies": {}
}

'''
'''--- integration-tests/ts/src/main.ava.ts ---
import { Worker, NEAR, NearAccount } from 'near-workspaces'
import anyTest, { TestFn } from 'ava'

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>

test.beforeEach(async (t) => {
  // Init the worker and start a Sandbox server
  const worker = await Worker.init()

  // deploy contract
  const root = worker.rootAccount
  const contract = await root.createAndDeploy(
    root.getSubAccount('greeter').accountId,
    './out/main.wasm',
    { initialBalance: NEAR.parse('30 N').toJSON() }
  )

  // Save state for test runs, it is unique for each test
  t.context.worker = worker
  t.context.accounts = { root, contract }
})

test.afterEach(async (t) => {
  // Stop Sandbox server
  await t.context.worker.tearDown().catch((error) => {
    console.log('Failed to stop the Sandbox:', error)
  })
})

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts
  const message: string = await contract.view('get_greeting', {})
  t.is(message, 'Hello')
})

test('changes the message', async (t) => {
  const { root, contract } = t.context.accounts
  await root.call(contract, 'set_greeting', { message: 'Howdy' })
  const message: string = await contract.view('get_greeting', {})
  t.is(message, 'Howdy')
})
'''
'''--- package.json ---
{
  "name": "greeter",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
      "build:contract": "mkdir -p out && cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release && rm -f ./out/main.wasm && cp ./target/wasm32-unknown-unknown/release/*.wasm ../out/main.wasm",
      "build:web": "parcel build frontend/index.html --public-url ./",
    "deploy": "npm run build:contract && near dev-deploy",
    "start": "npm run deploy && echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "test": "npm run build:contract && npm run test:unit && npm run test:integration",
      "test:unit": "cd contract && cargo test",
      "test:integration": "npm run test:integration:ts && npm run test:integration:rs",
        "test:integration:ts": "cd integration-tests/ts && npm run test",
        "test:integration:rs": "cd integration-tests/rs && cargo run --example integration-tests"
  },
  "devDependencies": {
    "@babel/core": "~7.18.2",
    "@babel/preset-env": "~7.18.2",
    "@babel/preset-react": "~7.17.12",
    "ava": "^4.2.0",
    "env-cmd": "~10.1.0",
    "near-cli": "~3.3.0",
    "near-workspaces": "^2.0.0",
    "nodemon": "~2.0.16",
    "parcel": "^2.6.0",
    "process": "^0.11.10",
    "react-test-renderer": "~18.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {
    "near-api-js": "~0.44.2",
    "near-sdk-as": "^3.2.3",
    "react": "~18.1.0",
    "react-dom": "~18.1.0",
    "regenerator-runtime": "~0.13.9"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- scripts/add_song.sh ---
#!/usr/bin/env bash

# runs a bash script to add a song to the music catalog
'''
'''--- scripts/buy_song.sh ---
#!/usr/bin/env bash

# runs a bash script to buy a song from the musi catalog
'''