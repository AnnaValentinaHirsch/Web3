*GitHub Repository "lSelectral/near-shopping-crud"*

'''--- README.md ---
# NEAR SHOPPING WEB3 API

This project provides a decentralized Web3 api interface for online shopping. App runs fully on the Near blockchain with smart contracts. Users can create account, from that account can login/logout. Can create different carts for specific purpose like, breakfast, dinner, technology etc. Users can add specific product to this carts and manage their shopping experience seamlessly.

[LOOM DEMO VIDEO](https://www.loom.com/share/a38053636dc740d38ddbe04e695c0574)

[![Near Shopping App](https://cdn.loom.com/sessions/thumbnails/a38053636dc740d38ddbe04e695c0574-with-play.gif)](https://www.loom.com/share/a38053636dc740d38ddbe04e695c0574)

1. [ FEATURES ](#features)
2. [ NEAR SPECS ](#near-specs)
3. [ HOW TO RUN](#how-to-run)
4. [ File Breakdown](#project-filefolder-breakdown)
5. [ Scripts Breakdown](#scripts-breakdown)
	-	[Product Scripts](#product-scripts)
	-	[User Scripts](#user-scripts)
	-	[Cart Scripts](#cart-scripts)
6. [Function Breakdown](#function-breakdown)
7. [MODEL.TS File Explanation](#modelts)
	-	[User Class](#user-class)
	-	[Product Class](#product-class)
	-	[Cart Product Class](#cart-product-class)
	-	[Cart Class](#cart-class)

> ## Features

- Product --> view
- Product --> create/update/delete (ADMIN ONLY)
- User -----> account register/login/logout/view/delete
- Cart -----> create/update/delete/view
- Buy ------> products in the cart

---

> ## Near Specs 

- All data store in the  Near Blockchain persistent storage. (Models are marked as `@nearBindgen` for serialization)
- All scripts run as smart contract.
- Assert statements protect the contracts from invalid inputs.
- Only admin privileged users, can **create/update/delete** product

---

> This project is the derivative work of my previous project [Teleperformance Shopping App](https://github.com/lSelectral/Teleperformance_Shopping_App) which is made by ASP.NET Web API, EF Core, MSSQL, React and Redux. I recreated the most of the API in the blockchain.

---

## How to Run

1. Clone the repo
```
gh repo clone lSelectral/near-shopping-crud
```
2. Open the `bash` terminal in the project main directory.
3. Run `yarn` or `npm install` for installing required node modules from `package.json`
4. Run `yarn build:release` or `npm run build:release`
5. For deploying the contract, run `production-deploy.sh` script, which located in the **`./scripts/production-deploy.sh`**.
6. After step 5, command line will show the how to export **CONTRACT** environment variable for different OS.
7. If all above steps completed, you can run scripts from `./scripts/product`,  `./scripts/user` and  `./scripts/cart`.
8. For running scripts, in the bash terminal, run `sh [SCRIPT]`
Ex: `sh scripts/product/create-product.sh` 

---

## Project File/Folder Breakdown

> scripts

- Contains the scripts for running the contracts from **Near CLI**

> src/singleton/assembly/index.ts

- Contains the smart contract implemantation of the models and its methods

Index file needs no explanation. It just implements the methods and classes in model.ts file which explained later.

> src/singleton/assembly/model.ts

- Contains the serializable models and their methods for **CRUD** operations

```txt
near-shopping-crud
├── src                       
│   ├── singleton
│   │   ├─assembly
│   │   ├── index.ts    --> Entry point for smart contracts
│   │   └── model.ts    --> Models and CRUD functions used in index.ts
│   scripts
│   │── cart							--> Cart smart contract near-cli shell script
│   │   │── add-product-to-cart.sh			
│   │   │── buy-cart-products.sh
│   │   │── get-carts.sh
│   │   │── remove-product-from-cart.sh
│   │── product  						--> Product smart contract near-cli shell script
│   │   │── show-products.sh
│   │   │── get-product-by-id.sh
│   │   │── create-product.sh
│   │   │── update-product.sh
│   │   │── delete-product.sh
│   │── user  							--> User smart contract near-cli shell script
│   │   │── create-cart-for-user.sh
│   │   │── delete-user.sh
│   │   │── get-users.sh
│   │   │── login-user.sh
│   │   │── logout-user.sh
│   │   │── register-user.sh
│   │── dev-deploy.sh  
│   │── production-deploy.sh  
│   │── UNIFIED_SCRIPTS.sh  			--> Includes all smart contract view and call near-cli scripts
│─────────────────────────────────────────────────────────
```

---

## Scripts Breakdown

near command has `$` prefix because, in windows, it doesn't recognized as global variable. So it defined as environment variable by its path.

- Ex: `export near="C:\Users\Administrator\AppData\Roaming\npm\near.cmd"`

### Product Scripts

---

> **show-products.sh**

- Description: **Display all products**
- Function Type: `View`
- Returns: `All products as Product[]`
- Args: `{}`

- Ex: `$near view $CONTRACT showProducts`

---

> **get-product-by-id.sh**

- Description: **Retrieve single products by its id**
- Function Type: `View`
- Returns: `Product as <Product>`
- Args:
	- id : `u32`

- Ex: `$near view $CONTRACT getProductById '{"id": 538052379}'`

---

> **create-product.sh**

- Description: **Create a new product**
- Function Type: `Call`
- Returns: `Product as <Product>`
- Args:
	- userId : `u32` : Id of the user for authentication
	- name : `string` : Name of product
	- price : `i16` : Price of product

- Ex: `$near call $CONTRACT createProduct '{"userId": 4282263961, "name": "Bread", "price": 36}' --account_id $CONTRACT`

---

> **update-product.sh**

- Description: **Update an existing product**
- Function Type: `Call`
- Returns: `Product as <Product>`
- Args:
	- userId : `u32` : Id of the user for authentication
	- productId : `u32` : Id of the product for update
	- name : `string` : Name of product
	- price : `i16` : Price of product

- Ex: `$near call $CONTRACT updateProduct '{"userId": 4282263961, "productId": 538052379, "name": "CAKE", "price": 9}' --account_id $CONTRACT`

---

> **delete-product.sh**

- Description: **Delete an existing product**
- Function Type: `Call`
- Returns: `Delete statu as <string>`
- Args:
	- userId : `u32` : Id of the user for authentication
	- productId : `u32` : Id of the product for delete

- Ex: `$near call $CONTRACT deleteProduct '{"userId": 4282263961, "productId": 538052379}' --account_id $CONTRACT`

---

### User Scripts

> **create-cart-for-user.sh**

- Description: **Create a cart for the user**
- Function Type: `Call`
- Returns: `Cart as <Cart>`
- Args:
	- userId : `u32` : Id of the user for assigning the cart
	- cartName : `string` : Name of the shopping cart

- Ex: `$near call $CONTRACT createCartForUser '{"userId": 4282263961, "cartName": "lunch"}' --account_id $CONTRACT`

---

> **delete-user.sh**

- Description: **Delete an existing user**
- Function Type: `Call`
- Returns: `Delete statu as <string>`
- Args:
	- userId : `u32` : Id of the user to delete

- Ex: `$near call $CONTRACT deleteUser '{"userId": 4282263961}' --account_id $CONTRACT`

---

> **get-users.sh**

- Description: **Display all the users**
- Function Type: `View`
- Returns: `All users as <User[]>`
- Args: `{}`

- Ex: `$near view $CONTRACT getUsers`

---

> **login-user.sh**

- Description: **Login with user credentials and change login statu to `true`**
- Function Type: `Call`
- Returns: `User as <User>`
- Args:
	- email : `string` : Email address of the user
	- password : `string` : Password of the user

- Ex: `$near call $CONTRACT loginUser '{"email":"dev.selectra@gmail.com", "password": "neardevselectra"}' --account_id $CONTRACT`

---

> **logout-user.sh**

- Description: **Logout and change login statu to `false`**
- Function Type: `Call`
- Returns: `Logout statu as <string>`
- Args:
	- userId : `u32` : Id of user to logout

- Ex: `$near call $CONTRACT logoutUser '{"userId": 4282263961}' --account_id $CONTRACT`

- Logout and change login statu to **false**

---

> **register-user.sh**

- Description: **Register and create new user in the persistent storage**
- Function Type: `Call`
- Returns: `User as <User>`
- Args:
	- name : `string` : Name of the user
	- email : `string` : Email of the user
	- password : `string` : Password of the user
	- isAdmin : `bool` : Assign, if the user should be admin or not

- Ex: `$near call $CONTRACT registerUser '{"name":"Recep Çiftçi", "email":"dev.selectra@gmail.com", "password": "neardevselectra", "isAdmin": true}' --account_id $CONTRACT`

---

### Cart Scripts

> **add-product-to-cart.sh**

- Description: **Add a product to the user cart**
- Function Type: `Call`
- Returns: `Cart as <Cart>`
- Args:
	- userId : `u32` : Id of the user
	- cartId : `u32` : Id of the cart
	- productId : `u32` : Id of product to add
	- amount : `i64` : Amount of product to add

- Ex: `$near call $CONTRACT addProductToCart '{"userId": 4282263961, "cartId": 4089149924, "productId": 538052379, "amount": "100"}' --account_id $CONTRACT`

---

> **buy-cart-products.sh**

- Description: **Buy all the products from user list. Retrieve total amount**
- Function Type: `Call`
- Returns: `Cart total price as <string>`
- Args:
	- userId : `u32` : Id of the user
	- cartId : `u32` : Id of the cart

- Ex: `$near call $CONTRACT buyCartProducts '{"userId": 4282263961, "cartId": 4089149924}' --account_id $CONTRACT`

---

> **get-carts.sh**

- Description: **Display all the carts from all users**
- Function Type: `View`
- Returns: `All carts as <Cart[]>`
- Args:
	- userId : `u32` : Id of the user

- Ex: `$near view $CONTRACT getCarts '{"userId": 4282263961}'`

---

> **remove-product-from-cart.sh**

- Description: **Remove a product from cart**
- Function Type: `Call`
- Returns: `Statu update as <string>`
- Args:
	- userId : `u32` : Id of the user
	- cartId : `u32` : Id of the cart
	- productId : `u32` : Id of the product

- Ex: `$near call $CONTRACT removeProductFromCart '{"userId": 4282263961, "cartId": 4089149924, "productId": 538052379}' --account_id $CONTRACT `

---

## FUNCTION BREAKDOWN

This sections describes the each function, what it does, how it works.

> ### model.ts

Model file, contains the classes and their respective methods for crud operation for usage in the smart contracts in the `index.ts` file.

---

Model class has 3 class level variable exported that stores data in the blockchain.

```
// Store users
export const userMap: PersistentUnorderedMap<u32, User>
// Store products
export const productMap: PersistentUnorderedMap<u32, Product>
// Store carts
export const cartMap: PersistentUnorderedMap<u32, Cart>
```

---

---

> ### User Class

User class defined for managing the users in application. Users have access to login, logout, register, creating new cart and adding/removing product to cart. Users divided to 2 as Standard and Admin. Only admin priveledged users can create/delete/update product(s).

```
public id: u32;
public name: string;
public email: string;
public password: string;
public isAdmin: bool;
public isLoggedIn: bool;
```

---

Register user class, creates a new user with given values. Admin access can be obtained by parameter for demo purposes.

```
static registerUser(name: string, email: string, password: string, isAdmin: bool):User{}
```

---

Login user, provides user to login and use functionalities available.
This method updates the user `isLoggedIn` statu to `true`.

```
static loginUser(email: string, password: string): User{}
```

---

Logout, change to user `isLoggedIn` statu to `false`

```
static logoutUser(userId: u32):string{}
```

---

Delete user function is only accessible to admin for deleting user from the blockchain storage permanently.
>[ADMIN ONLY]

```
static deleteUser(userId: u32):string{}
```

---

Retrieve all users from the persistent storage

```
static getUsers():User[]{}
```

---

Create a new cart for the user, with given name.

```
static createCartForUser(userId:u32, cartName: string):Cart{}
```

---

---

> #### Product Class

Product class defined for storing, creating, updating and deleting the products by admin. Users can only view products and add this product to the cart.

```
public productName : string;
public price : u128;
public id: u32;
```

---

Create a new product.
>[ADMIN ONLY]

```
static createProduct(userId:u32, name: string, price: i16):Product{}
```

---

Update the existing product.
>[ADMIN ONLY]

```
static updateProduct(userId:u32, productId:u32, name: string, price: i16):Product{}
```

---

Delete the existing product.
>[ADMIN ONLY]

```
static deleteProduct(userId:u32, productId: u32):string{}
```

---

Retrieve the all products.

```
static showProducts():Product[]{
```

---

Retrieve a product by its id

```
static getProductById(id: u32):Product{}
```

---

---

> ### Cart Product Class

Cart product class used for defining product and its amount in the cart

```
public product: Product;
public amount: i64;
public id: u32;
```

---

---

> ### Cart Class

Cart class defines a cart created by user and holds the content in the blockchain.

```
public id: u32;
public name: string;
public userId: u32;
public cartProducts: CartProduct[];
```

---

Add a product to the cart by given amount

```
static addProductToCart(userId:u32, cartId:u32, productId:u32, amount: i64):Cart{}
```

---

Remove a product from the cart

```
static removeProductFromCart(userId:u32, cartId:u32, productId:u32):string{}
```

---

Retrieve all the carts for the user

```
static getCarts(userId: u32):Cart[]{}
```

---

Get the total price of products in the cart.
> [ONLY USED IN METHOD! NOT A SMART CONTRACT]

```
static getCartTotalPrice(cartId: u32):u128{}
```

---

Buy the products in the cart, and transfer the money from user.

```
static buyCartProducts(userId: u32, cartId: u32):string{}
```
---

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/singleton"
  ]
}

'''
'''--- package.json ---
{
  "name": "near-shopping-crud",
  "version": "0.0.1",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "selectra",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

```sh
# set your terminal up to have 2 windows, A and B like this:
┌─────────────────────────────────┬─────────────────────────────────┐
│                                 │                                 │
│                                 │                                 │
│                A                │                B                │
│                                 │                                 │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  ```

- Commands

  _helper scripts_
  ```sh
  1.dev-deploy.sh                # helper: build and deploy contracts
  2.use-contract.sh              # helper: call methods on ContractPromise
  3.cleanup.sh                   # helper: delete build and deploy artifacts
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=               # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- scripts/UNIFIED_SCRIPTS.sh ---
# Bash doesn't recognize near globally in my windows
export near="C:\Users\Administrator\AppData\Roaming\npm\near.cmd" 

# Deploy contract from debug
$near dev-deploy build/debug/singleton.wasm 
# Deploy contract from release
$near dev-deploy build/release/singleton.wasm 

# -------------------- PRODUCTS ----------------------------
$near call $CONTRACT createProduct '{"userId": 4282263961, "name": "Pasta", "price": 36}' --account_id $CONTRACT

$near call $CONTRACT updateProduct '{"userId": 4282263961, "productId": 1368278929, "name": "CAKE", "price": 9}' --account_id $CONTRACT

$near call $CONTRACT deleteProduct '{"userId": 4282263961, "productId": 538052379}' --account_id $CONTRACT

$near view $CONTRACT showProducts

$near view $CONTRACT getProductById '{"id": 538052379}'

# -------------------- PRODUCTS ----------------------------

# -------------------- USER ----------------------------

$near call $CONTRACT registerUser '{"name":"Recep Çiftçi", "email":"dev.selectra@gmail.com", "password": "neardevselectra", "isAdmin": true}' --account_id $CONTRACT

$near call $CONTRACT loginUser '{"email":"dev.selectra@gmail.com", "password": "neardevselectra"}' --account_id $CONTRACT

$near call $CONTRACT logoutUser '{"userId": 4282263961}' --account_id $CONTRACT

$near call $CONTRACT deleteUser '{"userId": 4282263961}' --account_id $CONTRACT

$near view $CONTRACT getUsers

$near call $CONTRACT createCartForUser '{"userId": 4282263961, "cartName": "lunch"}' --account_id $CONTRACT

# -------------------- USER ----------------------------

# -------------------- CART ----------------------------

$near call $CONTRACT addProductToCart '{"userId": 4282263961, "cartId": 4076446589, "productId": 1368278929, "amount": "100"}' --account_id $CONTRACT

$near call $CONTRACT removeProductFromCart '{"userId": 4282263961, "cartId": 4089149924, "productId": 538052379}' --account_id $CONTRACT 

$near view $CONTRACT getCarts '{"userId": 4282263961}'

$near call $CONTRACT buyCartProducts '{"userId": 4282263961, "cartId": 4076446589}' --account_id $CONTRACT

# -------------------- CART ----------------------------
'''
'''--- scripts/cart/add-product-to-cart.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Adding product to the cart with static parameters"
echo ---------------------------------------------------------
echo

$near call $CONTRACT addProductToCart '{"userId": 4282263961, "cartId": 4089149924, "productId": 538052379, "amount": "100"}' --account_id $CONTRACT
'''
'''--- scripts/cart/buy-cart-products.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Buying the products in the cart"
echo ---------------------------------------------------------
echo

$near call $CONTRACT buyCartProducts '{"userId": 4282263961, "cartId": 4089149924}' --account_id $CONTRACT
'''
'''--- scripts/cart/get-carts.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Retrieving all the carts from all users"
echo ---------------------------------------------------------
echo

$near view $CONTRACT getCarts '{"userId": 4282263961}'

'''
'''--- scripts/cart/remove-product-from-cart.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Removing product from cart"
echo ---------------------------------------------------------
echo

$near call $CONTRACT removeProductFromCart '{"userId": 4282263961, "cartId": 4089149924, "productId": 538052379}' --account_id $CONTRACT 

'''
'''--- scripts/dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
# near dev-deploy ./build/debug/simple.wasm

# comment the line below to deploy the other example contract
near dev-deploy ./build/debug/singleton.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
# uncomment this line for a useful hint when using the singleton style
# echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/product/create-product.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Creating product with static parameters"
echo ---------------------------------------------------------
echo

$near call $CONTRACT createProduct '{"userId": 4282263961, "name": "Bread", "price": 36}' --account_id $CONTRACT
'''
'''--- scripts/product/delete-product.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Deleting the existing product"
echo ---------------------------------------------------------
echo

$near call $CONTRACT deleteProduct '{"userId": 4282263961, "productId": 538052379}' --account_id $CONTRACT
'''
'''--- scripts/product/get-product-by-id.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Retrieving the product by its id"
echo ---------------------------------------------------------
echo

$near view $CONTRACT getProductById '{"id": 538052379}'
'''
'''--- scripts/product/show-products.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Retrieving all products"
echo ---------------------------------------------------------
echo

$near view $CONTRACT showProducts
'''
'''--- scripts/product/update-product.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Updating product with static parameters"
echo ---------------------------------------------------------
echo

$near call $CONTRACT updateProduct '{"userId": 4282263961, "productId": 538052379, "name": "CAKE", "price": 9}' --account_id $CONTRACT
'''
'''--- scripts/production-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build:release

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
# near dev-deploy ./build/debug/simple.wasm

# comment the line below to deploy the other example contract
near dev-deploy ./build/release/singleton.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below"
echo
echo ---------------------------------------------------------
echo "FOR LINUX:"
echo 'export CONTRACT=<dev-123-456>'
echo
echo "FOR WINDOWS:"
echo '$CONTRACT="<dev-123-456>"'
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/user/create-cart-for-user.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Creating cart for user"
echo ---------------------------------------------------------
echo

$near call $CONTRACT createCartForUser '{"userId": 4282263961, "cartName": "lunch"}' --account_id $CONTRACT
'''
'''--- scripts/user/delete-user.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Deleting user"
echo ---------------------------------------------------------
echo

$near call $CONTRACT deleteUser '{"userId": 4282263961}' --account_id $CONTRACT

'''
'''--- scripts/user/get-users.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Retrieving all users"
echo ---------------------------------------------------------
echo

$near view $CONTRACT getUsers

'''
'''--- scripts/user/login-user.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Login with user credentials"
echo ---------------------------------------------------------
echo

$near call $CONTRACT loginUser '{"email":"dev.selectra@gmail.com", "password": "neardevselectra"}' --account_id $CONTRACT

'''
'''--- scripts/user/logout-user.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Logging out"
echo ---------------------------------------------------------
echo

$near call $CONTRACT logoutUser '{"userId": 4282263961}' --account_id $CONTRACT

'''
'''--- scripts/user/register-user.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Checking environment variable $CONTRACT"
echo ---------------------------------------------------------
echo
[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
echo
echo ---------------------------------------------------------
echo "Registering new user"
echo ---------------------------------------------------------
echo

$near call $CONTRACT registerUser '{"name":"Recep Çiftçi", "email":"dev.selectra@gmail.com", "password": "neardevselectra", "isAdmin": true}' --account_id $CONTRACT
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/singleton/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/singleton/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";

let contract: Contract

beforeEach(() => {
  contract = new Contract()
})

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/singleton/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/singleton/assembly/index.ts ---
import { Context, PersistentUnorderedMap, u128, math } from "near-sdk-core";
import {CartProduct, Product, User, Cart} from "./model";

@nearBindgen
export class Contract {
  /**
   * Register a new user to the system.
   * @param name User Name
   * @param email User Email
   * @param password User Password
   * @param isAdmin Define if user is admin user
   * @returns Created user model
   */
  @mutateState()
  registerUser(name: string, email: string, password: string, isAdmin: bool):User{
    return User.registerUser(name, email, password, isAdmin);
  }
  
  /**
   * Login as previously created user
   * @param email User email address
   * @param password User password
   * @returns Logged in user model
   */
  @mutateState()
  loginUser(email: string, password: string): User{
    return User.loginUser(email, password);
  }

  /**
   * @param userId Id of user to logout
   * @returns info about process
   */
  @mutateState()
  logoutUser(userId: u32):string{
    return User.logoutUser(userId);
  }

  /**
   * 
   * @param userId Id of the user
   * @returns Statu of the process
   */
  @mutateState()
  deleteUser(userId: u32):string{
    return User.deleteUser(userId);
  }

  /**
   * 
   * @param userId User ID
   * @param cartName Cart name
   * @returns Cart created for user
   */
  @mutateState()
  createCartForUser(userId:u32, cartName: string):Cart{
    return User.createCartForUser(userId, cartName);
  }

  /**
   * 
   * @param userId Id of the user
   * @param cartId Id of the cart
   * @param productId Id of the product to add
   * @param amount Amount of product
   * @returns Cart with latest state
   */
  @mutateState()
  addProductToCart(userId:u32, cartId:u32, productId:u32, amount: i64):Cart{
    return Cart.addProductToCart(userId, cartId, productId, amount);
  }

  /**
   * 
   * @param userId Id of the user
   * @param cartId Id of the cart
   * @param productId Id of product to remove
   * @returns 
   */
  @mutateState()
  removeProductFromCart(userId:u32, cartId:u32, productId:u32):string{
    return Cart.removeProductFromCart(userId, cartId, productId);
  }
  
  /**
   * @returns All users
   */
  getUsers():User[]{
    return User.getUsers();
  }

  /**
   * @returns All carts from all users
   */
  getCarts(userId: u32):Cart[]{
    return Cart.getCarts(userId);
  }

  /**
   * @param userId Id of the user
   * @param cartId Id of the cart
   * @returns Info about total price and transaction statu
   */
  @mutateState()
  buyCartProducts(userId:u32, cartId:u32):string{
    return Cart.buyCartProducts(userId, cartId);
  }

  /**
   * Create a new product with given parameters
   * @param userId Id of the user for authentication
   * @param name Name of product
   * @param price Price of product with calculated u128(price,1)
   * @returns Created product
   */
  @mutateState()
  createProduct(userId:u32, name: string, price: i16):Product{
    return Product.createProduct(userId, name, price);
  }

  /**
   * Update the product with given data
   * @param userId Id of the user for authentication
   * @param productId Id of product that should be update
   * @param name New name of product
   * @param price New price of product
   * @returns Updated product
   */
  @mutateState()
  updateProduct(userId:u32, productId:u32, name: string, price: i16):Product{
    return Product.updateProduct(userId, productId, name, price);
  }

  /**
   * Delete an existing product
   * @param userId Id of the user for authentication
   * @param productId Product Id to delete
   * @returns Info about process
   */
  @mutateState()
  deleteProduct(userId:u32, productId: u32):string{
    return Product.deleteProduct(userId, productId);
  }

  /**
   * @returns All products
   */
  showProducts():Product[]{
    return Product.showProducts();
  }

  /**
   * @param id Id of the product
   * @returns Product with given ID
   */
  getProductById(id: u32):Product{
    return Product.getProductById(id);
  }
}
'''
'''--- src/singleton/assembly/model.ts ---
import { u128, math, PersistentUnorderedMap, Context, ContractPromiseBatch } from "near-sdk-as";

export const userMap: PersistentUnorderedMap<u32, User> = new PersistentUnorderedMap<u32, User>("usersMappppp");
export const productMap: PersistentUnorderedMap<u32, Product> = new PersistentUnorderedMap<u32, Product>("productsMappppp");
export const cartMap: PersistentUnorderedMap<u32, Cart> = new PersistentUnorderedMap<u32, Cart>("cartsMappppp");

@nearBindgen
export class User{
  public id: u32;
  public name: string;
  public email: string;
  public password: string;
  public isAdmin: bool;
  public isLoggedIn: bool;

  constructor(
    name: string,
    email: string,
    password: string,
    isAdmin: bool
  ){
    this.id = math.hash32(name);
    this.name = name;
    this.email = email;
    this.password = password;
    this.isAdmin = isAdmin;
    this.isLoggedIn = false;
  }

  static registerUser(name: string, email: string, password: string, isAdmin: bool):User{
    assert(name.length > 3 && name.length < 24, "Name length should be between 3 and 24");
    assert(password.length > 7 && password.length <= 24, "Password length should be between 8 and 24");

    const user = new User(name, email, password, isAdmin);
    userMap.set(user.id, user);
    return user;
  }

  static loginUser(email: string, password: string): User{
    assert(password.length > 7 && password.length <= 24, "Password length should be between 8 and 24");
    const userValues = userMap.values(0, userMap.length);

    for (let i = 0; i < userValues.length; i++) {
      const data = userValues[i];
      if (data.email == email && data.password == password){
        data.isLoggedIn = true;
        userMap.set(data.id, data);
        return data;
      }
    }
    throw new Error("Validation failed");
  }

  static logoutUser(userId: u32):string{
    const user = userMap.getSome(userId);
    user.isLoggedIn = false;
    userMap.set(userId, user);
    return `User with ${user.name} name and ${user.id} ID logged out`
  }

  static deleteUser(userId: u32):string{
    const user = userMap.getSome(userId);
    assert(user.isAdmin, "Only admin users can delete user");

    assert(userMap.contains(userId),"User with given id doesn't exist");
    userMap.delete(userId);
    return `User with ${userId} ID deleted`;
  }

  static getUsers():User[]{
    return userMap.values(0,userMap.length);
  }

  static createCartForUser(userId:u32, cartName: string):Cart{
    const cart = new Cart(userId, cartName);
    cartMap.set(cart.id, cart);
    return cart;
  }
}

@nearBindgen
export class Product{
  public productName : string;
  public price : u128;
  public id: u32;

  constructor(
    productName : string,
    price: u128,
  ){
    this.productName = productName;
    this.price = price;
    this.id = math.hash32<string>(productName);
  }

  static createProduct(userId:u32, name: string, price: i16):Product{
    const user = userMap.getSome(userId);
    assert(!productMap.contains(math.hash32(name)),"There is already a product with given name");
    assert(price > 0, "Price should be positive");
    assert(name.length > 3 && name.length < 24, "Name length should be between 3 and 24");
    assert(user.isAdmin, "Only admin users can create product");

    const product = new Product(name, new u128(price,1));
    productMap.set(product.id,product);
    return product;
  }

  static updateProduct(userId:u32, productId:u32, name: string, price: i16):Product{
    const user = userMap.getSome(userId);
    assert(price > 0, "Price should be positive");
    assert(name.length > 3 && name.length < 24, "Name length should be between 3 and 24");
    assert(productMap.contains(productId), "Given product id isn't exist");
    assert(user.isAdmin, "Only admin users can update product");

    const product = productMap.getSome(productId);
    product.productName = name;
    product.price = new u128(price,1);
    productMap.set(productId, product);

    return product;
  }

  static deleteProduct(userId:u32, productId: u32):string{
    const user = userMap.getSome(userId);
    assert(productMap.contains(productId), "Given product id isn't exist");
    assert(user.isAdmin, "Only admin users can delete product");
    productMap.delete(productId);
    return `Product with ${productId} ID deleted successfully`;
  }

  static showProducts():Product[]{
    return productMap.values(0,productMap.length);
  }

  static getProductById(id: u32):Product{
    return productMap.getSome(id);
  }
}

@nearBindgen
export class CartProduct{
  public product: Product;
  public amount: i64;
  public id: u32;

  constructor(
    product: Product,
    amount: i64
  ){
    this.product = product;
    this.amount = amount;
    this.id = product.id
  }
}

@nearBindgen
export class Cart{
  public id: u32;
  public name: string;
  public userId: u32;
  public cartProducts: CartProduct[];

  constructor(userId: u32, name: string){
    this.id = math.hash32(name) + userId;
    this.name = name;
    this.userId = userId;
    this.cartProducts = []
  }

  static addProductToCart(userId:u32, cartId:u32, productId:u32, amount: i64):Cart{
    assert(userMap.contains(userId), "User with given id isn't exist");
    assert(productMap.contains(productId), "Given product id isn't exist");
    assert(amount > 0 && amount < i64.MAX_VALUE, "Amount value should be positive and not exceed max i64 value");

    let cart = cartMap.getSome(cartId);
    const product = productMap.getSome(productId);

    cart.cartProducts.push(new CartProduct(product, amount));

    cartMap.set(cartId, cart);
    return cart;
  }

  static removeProductFromCart(userId:u32, cartId:u32, productId:u32):string{
    let cart = cartMap.getSome(cartId);

    for (let i = 0; i < cart.cartProducts.length; i++) {
      const cp = cart.cartProducts[i];
      if (cp.product.id === productId){
        cart.cartProducts.splice(cart.cartProducts.indexOf(cp),1);
        cartMap.set(cartId, cart);

        return `Cart with ${cartId} ID deleted successfully`;
      }
      throw new Error("Cart doesn't have a product with given id");
    }
    throw new Error("There is no product in the cart");
  }

  static getCarts(userId: u32):Cart[]{

    const carts = cartMap.values(0,cartMap.length);
    let userCarts: Cart[] = [];

    for (let i = 0; i < carts.length; i++) {
      const cart = carts[i];
      if (cart.userId === userId) userCarts.push(cart);
    }

    return userCarts;
  }

  static getCartTotalPrice(cartId: u32):u128{
    const cart = cartMap.getSome(cartId);
    let totalPrice:u128 = new u128(0,0);

    for (let i = 0; i < cart.cartProducts.length; i++) {
      const cp = cart.cartProducts[i];
      let price = new u128(cp.product.price.hi*cp.amount,cp.product.price.lo);
      totalPrice = new u128(price.hi+totalPrice.hi,price.lo+totalPrice.lo);
    }
    return totalPrice;
  }

  static buyCartProducts(userId: u32, cartId: u32):string{
    const cart = cartMap.getSome(cartId);
    const promise = ContractPromiseBatch.create(Context.sender);
    promise.transfer(this.getCartTotalPrice(cartId));
    return `Cart total is: ${this.getCartTotalPrice(cartId)}`;
  }
}

class CartProductArray extends Array<CartProduct> {
  getCartProductFromProductId(productId: u32): CartProduct{
    for (let i = 0; i < this.length; i++) {
      const e = this[i];
      if (e.product.id === productId) return e;
    }
    throw new Error("Cart product couldn't be found");
  }
}
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''