*GitHub Repository "NovaBloq/Bubble-Plugin-NEAR-API"*

'''--- README.md ---
This is a repository based on the [Bubble](https://bubble.io) plugin 'NEAR API'. This lets you use Github's functionality in terms of version control, forks and pull requests. Note that the the plugin code is stored on Bubble's servers, and you need to synchronize your repository in the Bubble Plugin Editor. 

 This plugin can be used in [Bubble applications](https://bubble.io).
'''
'''--- elements/AAD-850m8/element_actions/AAE-850ma/params.json ---
{
    "caption": "Connect",
    "doc": "Action to connect wallet to network",
    "fields": {
        "AAF": {
            "caption": "Contract Address",
            "editor": "DynamicValue",
            "name": "contract_address",
            "rank": 0,
            "value": "text"
        },
        "AAG": {
            "caption": "App Tite",
            "editor": "DynamicValue",
            "name": "app_tite",
            "optional": true,
            "rank": 1,
            "value": "text"
        },
        "AAH": {
            "caption": "Redirect URL on Success",
            "editor": "DynamicValue",
            "name": "redirect_url_on_success",
            "optional": true,
            "rank": 2,
            "value": "text"
        },
        "AAI": {
            "caption": "Redirect URL on Failure",
            "editor": "DynamicValue",
            "name": "redirect_url_on_failure",
            "optional": true,
            "rank": 3,
            "value": "text"
        }
    }
}
'''
'''--- elements/AAD-850m8/element_actions/AAE-850ma/run.js ---
function(instance, properties, context) {
	const { contract_address, app_tite, redirect_url_on_success, redirect_url_on_failure } = properties
    
    instance.data.walletConnection.requestSignIn(
        contract_address, 			// contract requesting access
        app_tite, 					// optional title
        redirect_url_on_success, 	// optional redirect URL on success
        redirect_url_on_failure 	// optional redirect URL on failure
    )
}
'''
'''--- elements/AAD-850m8/element_actions/AAJ-850mm/params.json ---
{
    "caption": "Disconnect",
    "doc": "Action to disconnect wallet from network"
}
'''
'''--- elements/AAD-850m8/element_actions/AAJ-850mm/run.js ---
function(instance, properties, context) {
	instance.data.walletConnection.signOut()		// Sign out call
    instance.data.checkSignedIn()					// Check for signed in to refresh state
    instance.triggerEvent('disconnected')
}
'''
'''--- elements/AAD-850m8/element_actions/AAY-850nj/params.json ---
{
    "caption": "Send Money",
    "doc": "Action to transfer funds",
    "fields": {
        "AAZ": {
            "caption": "Receiver Address",
            "editor": "DynamicValue",
            "name": "receiver_address",
            "rank": 0,
            "value": "text"
        },
        "AAa": {
            "caption": "Amount",
            "editor": "DynamicValue",
            "name": "amount",
            "rank": 1,
            "value": "number"
        }
    }
}
'''
'''--- elements/AAD-850m8/element_actions/AAY-850nj/run.js ---
function(instance, properties, context) {
    const { utils } = nearApi
	const { receiver_address, amount } = properties
    
    instance.publishState('tpending', true)
    
    // Transfer funds
    instance.data.account.sendMoney(receiver_address, utils.format.parseNearAmount(amount.toString())).then(response => {
        const { transaction: { hash, receiver_id }, transaction_outcome: { outcome: { executor_id, receipt_ids } } } = response
        instance.publishState('trxid', hash)
        instance.publishState('executor_id', executor_id)
        instance.publishState('receipt_id', receipt_ids[0])
        instance.publishState('receiver_id', receiver_id)
        instance.data.getAccountBalance()
        instance.publishState('tpending', false)
        instance.triggerEvent('money_sent')
    }).catch(e => {
        instance.publishState('tpending', false)
    })
}
'''
'''--- elements/AAD-850m8/element_actions/AAn-850pw/params.json ---
{
    "caption": "Deploy Contract",
    "doc": "Action to deploy smart contracts",
    "fields": {
        "AAo": {
            "caption": "Contract File",
            "editor": "DynamicValue",
            "name": "contract",
            "rank": 0,
            "value": "file"
        }
    }
}
'''
'''--- elements/AAD-850m8/element_actions/AAn-850pw/run.js ---
function(instance, properties, context) {
	const { contract } = properties
    
    instance.publishState('dpending', true)
    
    // Fetching contract content as ArrayBuffer
    fetch(contract).then(c => c.arrayBuffer()).then(async (c) => {
        // Deploy contract
        const response = await instance.data.account.deployContract(new Uint8Array(c))
        const { transaction: { hash }, transaction_outcome: { outcome: { executor_id, receipt_ids } } } = response
        instance.publishState('dtrxid', hash)
        instance.publishState('dexecutor_id', executor_id)
        instance.publishState('dreceipt_id', receipt_ids[0])
        instance.publishState('dpending', false)
        instance.triggerEvent('contract_deployed')
    }).catch(e => {
        instance.publishState('dpending', false)
    })
}
'''
'''--- elements/AAD-850m8/element_actions/AAu-850qa/params.json ---
{
    "caption": "Call Method",
    "doc": "Action to interact with contract's methods",
    "fields": {
        "AAv": {
            "caption": "Name",
            "doc": "Contract method name",
            "editor": "DynamicValue",
            "name": "name",
            "rank": 2,
            "value": "text"
        },
        "AAw": {
            "caption": "Arguments",
            "doc": "Argument name and value",
            "editor": "key_value_list",
            "name": "arguments",
            "rank": 3,
            "value": "text"
        },
        "AAx": {
            "caption": "GAS",
            "doc": "Attached GAS (optional)",
            "editor": "DynamicValue",
            "name": "gas",
            "optional": true,
            "rank": 4,
            "value": "number"
        },
        "AAy": {
            "caption": "NEAR Amount",
            "doc": "Attached deposit in NEAR (optional)",
            "editor": "DynamicValue",
            "name": "amount",
            "optional": true,
            "rank": 5,
            "value": "number"
        },
        "AAz": {
            "caption": "Callback URL",
            "doc": "Callback URL for redirect after the transaction approved (optional)",
            "editor": "DynamicValue",
            "name": "callback_url",
            "optional": true,
            "rank": 6,
            "value": "text"
        },
        "ABA": {
            "caption": "Meta",
            "doc": "Meta information NEAR Wallet will send back to the application. \"Meta\" will be attached to the \"Callback URL\" as a url search param",
            "editor": "DynamicValue",
            "name": "meta",
            "optional": true,
            "rank": 7,
            "value": "text"
        },
        "ABB": {
            "caption": "Method Type",
            "default_val": "View",
            "doc": "Method type",
            "editor": "Dropdown",
            "name": "method_type",
            "options": "View,Change",
            "rank": 1
        },
        "ABG": {
            "caption": "Contract Address",
            "doc": "Smart contract address",
            "editor": "DynamicValue",
            "name": "contract_address",
            "rank": 0,
            "value": "text"
        }
    }
}
'''
'''--- elements/AAD-850m8/element_actions/AAu-850qa/run.js ---
function(instance, properties, context) {
    const { utils, Contract } = nearApi
	const { contract_address, method_type, name, arguments, gas, amount, callback_url, meta } = properties
    
    const methodTypeAndName = {
        viewMethods: [], 		// view methods do not change state but usually return a value
        changeMethods: [],		// change methods modify state
    }
    
    // Define used method
    if (method_type === "Change") {
        methodTypeAndName.changeMethods = [name]
    } else {
        methodTypeAndName.viewMethods = [name]
    }
    
    // Initiate contract object
    const contract = new Contract(
        instance.data.account, 					// the account object that is connected
        contract_address,						// smart contract address
        methodTypeAndName
    )
    
    // Adding needed properties
    const callObject = { args: {} }
    if (gas) callObject.gas = utils.format.parseNearAmount(gas.toString())
    if (amount) callObject.amount = utils.format.parseNearAmount(amount.toString())
    if (callback_url) callObject.callbackUrl = callback_url
    if (meta) callObject.meta = meta
    arguments.forEach(arg => {
        callObject.args[arg.key] = instance.data.isJSON(arg.value) ? JSON.parse(arg.value) : arg.value
    })
    
    instance.publishState('mpending', true)
    
    // Call contract method with method type and arguments
    contract[name](callObject).then(response => {
        instance.publishState('response', JSON.stringify(response))
        instance.publishState('mpending', false)
        instance.triggerEvent('method_executed')
    }).catch(e => {
        instance.publishState('mpending', false)
    })
}
'''
'''--- elements/AAD-850m8/initialize.js ---
function(instance, context) {
	const { keyStores, connect, WalletConnection, utils } = nearApi
	const myKeyStore = new keyStores.BrowserLocalStorageKeyStore()
    
    instance.data.round = (value, decimals) => Number(Math.round(value + 'e' + decimals) + 'e-' + decimals)
    
    instance.data.initApi = async (network) => {
        const connectionConfig = {
            networkId: network,										// Network
            keyStore: myKeyStore,									// first create a key store 
            nodeUrl: `https://rpc.${network}.near.org`,				// Node URL
            walletUrl: `https://wallet.${network}.near.org`,		// Wallet URL
            helperUrl: `https://helper.${network}.near.org`,		// Helper URL
            explorerUrl: `https://explorer.${network}.near.org`,	// Explorer URL
        }
        instance.data.nearConnection = await connect(connectionConfig)
        instance.data.walletConnection = new WalletConnection(instance.data.nearConnection)
    }
    
    instance.data.checkSignedIn = () => {
        if (instance.data.walletConnection && instance.data.walletConnection.isSignedIn()) {
            instance.publishState('is_signed_in', true)
            instance.triggerEvent('connected')
        } else {
            instance.publishState('is_signed_in', false)
        }
    }
    instance.data.getAccountId = () => instance.data.walletConnection && instance.publishState('account_id', instance.data.walletConnection.getAccountId())
    
    instance.data.loadAccount = async () => {
        if (instance.data.nearConnection && instance.data.walletConnection) {
            instance.data.account = await instance.data.nearConnection.account(instance.data.walletConnection.getAccountId())
        }
    }
    
    instance.data.getAccountBalance = async () => {
        if (instance.data.account) {
            instance.data.balance = await instance.data.account.getAccountBalance()
            const { available, staked, total, stateStaked } = instance.data.balance
            instance.publishState('available', instance.data.round(utils.format.formatNearAmount(available), 4))
            instance.publishState('staked', instance.data.round(utils.format.formatNearAmount(staked), 4))
            instance.publishState('state_staked', instance.data.round(utils.format.formatNearAmount(stateStaked), 4))
            instance.publishState('total', instance.data.round(utils.format.formatNearAmount(total), 4))
        }
    }
    
    instance.data.isJSON = (s) => {
        try {
            JSON.parse(s)
        } catch (e) {
            return false
        }
        return isNaN(s)
    }
}
'''
'''--- elements/AAD-850m8/params.json ---
{
    "add_is_visible": true,
    "can_fit_height": true,
    "can_fit_width": true,
    "category": "visual elements",
    "default_dim": {
        "height": 10,
        "width": 10
    },
    "display": "NEAR Wallet T",
    "events": {
        "AAk": {
            "caption": "Connected",
            "doc": "Trigger on wallet connect",
            "name": "connected"
        },
        "AAl": {
            "caption": "Disconnected",
            "doc": "Trigger on wallet disconnect",
            "name": "disconnected"
        },
        "AAm": {
            "caption": "Money Sent",
            "doc": "Trigger on money sent",
            "name": "money_sent"
        },
        "AAq": {
            "caption": "Contract Deployed",
            "doc": "Trigger on contract deploy",
            "name": "contract_deployed"
        },
        "ABE": {
            "caption": "Method Executed",
            "doc": "Trigger on method call",
            "name": "method_executed"
        }
    },
    "fields": {
        "AAL": {
            "caption": "Network",
            "default_val": "testnet",
            "editor": "Dropdown",
            "name": "networkId",
            "options": "testnet,mainnet,betanet",
            "rank": 0
        }
    },
    "icon": "ion-cash",
    "property_applications": {
        "MinWidth": true,
        "resizable": true
    },
    "states": {
        "AAK": {
            "caption": "Is Signed In",
            "doc": "",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "is_signed_in",
            "value": "boolean"
        },
        "AAQ": {
            "caption": "Account ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "account_id",
            "value": "text"
        },
        "AAU": {
            "caption": "[Balance] Available",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "available",
            "value": "number"
        },
        "AAV": {
            "caption": "[Balance] Staked",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "staked",
            "value": "number"
        },
        "AAW": {
            "caption": "[Balance] State Staked",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "state_staked",
            "value": "number"
        },
        "AAX": {
            "caption": "[Balance] Total",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "total",
            "value": "number"
        },
        "AAc": {
            "caption": "[Transaction] ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "trxid",
            "value": "text"
        },
        "AAd": {
            "caption": "[Transaction] Executor ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "executor_id",
            "value": "text"
        },
        "AAf": {
            "caption": "[Transaction] Receipt ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "receipt_id",
            "value": "text"
        },
        "AAi": {
            "caption": "[Transaction] Receiver ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "receiver_id",
            "value": "text"
        },
        "AAj": {
            "caption": "[Transaction] Pending",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "tpending",
            "value": "boolean"
        },
        "AAp": {
            "caption": "[Deploy] Pending",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "dpending",
            "value": "boolean"
        },
        "AAr": {
            "caption": "[Deploy] ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "dtrxid",
            "value": "text"
        },
        "AAs": {
            "caption": "[Deploy] Executor ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "dexecutor_id",
            "value": "text"
        },
        "AAt": {
            "caption": "[Deploy] Receipt ID",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "dreceipt_id",
            "value": "text"
        },
        "ABD": {
            "caption": "[Method] Response",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "response",
            "value": "text"
        },
        "ABF": {
            "caption": "[Method] Pending",
            "initialization_code": {
                "fn": "function(properties, context) { return undefined }"
            },
            "name": "mpending",
            "value": "boolean"
        }
    }
}
'''
'''--- elements/AAD-850m8/preview.js ---
function(instance, properties) {}
'''
'''--- elements/AAD-850m8/reset.js ---
function(instance, context) {

}
'''
'''--- elements/AAD-850m8/states/AAK-850mp/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAQ-850n2/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAU-850na/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAV-850nc/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAW-850ne/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAX-850ng/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAc-850p6/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAd-850p8/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAf-850pc/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAi-850pj/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAj-850pm/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAp-850q0/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAr-850q4/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAs-850q6/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/AAt-850q8/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/ABD-85148/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/states/ABF-8514c/initialization.js ---
function(properties, context) { return undefined }
'''
'''--- elements/AAD-850m8/update.js ---
function(instance, properties, context) {
    const { networkId } = properties
    
    // Initiate api
    instance.data.initApi(networkId).then(() => {
        instance.data.checkSignedIn()							// Check if signed in to refresh state
        instance.data.getAccountId()							// Check account id to refresh state
        instance.data.loadAccount()								// Save account reference
        instance.data.getAccountBalance()						// Read account balance
    })
}
'''
'''--- html_headers.html ---
<script src="https://cdn.jsdelivr.net/npm/near-api-js@0.41.0/dist/near-api-js.js"></script>
'''
'''--- meta_data.json ---
{
    "categories": {
        "0": "technical",
        "1": "productivity",
        "2": "analytics",
        "3": "payment"
    },
    "description": "",
    "image": "//s3.amazonaws.com/appforest_uf/f1665059563061x621428171936429600/near.png",
    "license": "private",
    "name": "NEAR API"
}
'''
'''--- shared_tech_params.json ---
{
    "dependencies": {
        "plugin_api_version": 3,
        "use_jquery": false
    }
}
'''