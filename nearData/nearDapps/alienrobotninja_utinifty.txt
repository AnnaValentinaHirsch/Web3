*GitHub Repository "alienrobotninja/utinifty"*

'''--- niftiqet-v2/composables/use-wallet.js ---
import { Chain, Network, Wallet } from 'mintbase'

export default async function (props) {
  const runtimeConfig = useRuntimeConfig()
    const { apiKey } = props

    async function initWallet () {
      const { data: walletData, error } = await new Wallet().init({
        networkName: runtimeConfig.public.PUBLIC_MINTBASEJS_NETWORK ?? Network.testnet,
        chain: Chain.near,
        apiKey
      })

      if (error) {
        return 'no data'
      }
      let details
      const { wallet, isConnected } = walletData
      if (isConnected) {
        try {
          const { data } = await wallet.details()
          details = data
        } catch (err) {
          return err
        }
      }
      return {
        wallet,
        isConnected,
        details
      }
    }

    const { wallet, details, isConnected } = await initWallet()
    return {
      wallet,
      isConnected,
      details
    }
}

'''
'''--- niftiqet-v2/tailwind.config.js ---
module.exports = {
    plugins: [require('daisyui')],
    theme: {},
    content: [
        `components/**/*.{vue,js}`,
        `layouts/**/*.vue`,
        `pages/**/*.vue`,
        `composables/**/*.{js,ts}`,
        `plugins/**/*.{js,ts}`,
        `App.{js,ts,vue}`,
        `app.{js,ts,vue}`
    ]
};

'''
'''--- niftiqet/.eslintrc.js ---
module.exports = {
  root: true,
  env: {
    browser: true,
    node: true
  },
  parserOptions: {
    parser: '@babel/eslint-parser',
    requireConfigFile: false
  },
  extends: ['@nuxtjs', 'plugin:nuxt/recommended'],
  plugins: [],
  // add your custom rules here
  rules: {}
}

'''
'''--- niftiqet/apollo/queries/queries.js ---
import { gql } from 'nuxt-graphql-request'

export const minterStores = gql`
    query FetchMinterStores($minter: String!) {
    store(where: { minters: { account: { _eq: $minter } } }) {
      id
      name
    }
  }
`

export const fetchStore = gql`
  query FetchStore($storeId: String!, $limit: Int = 20, $offset: Int = 0) {
    store(where: { id: { _eq: $storeId } }) {
      id
      name
      symbol
      baseUri
      owner
      minters {
        account
        enabled
      }

      tokens(
        order_by: { thingId: asc }
        where: { storeId: { _eq: $storeId }, burnedAt: { _is_null: true }, thing: {metadata: {id: {_is_null: false}}} }
        limit: $limit
        offset: $offset
        distinct_on: thingId
      ) {
        id
        thingId
        list {
          acceptedOfferId
          autotransfer
          contractId
          createdAt
          id
          price
          ownerId
          thingId
        }
        thing {
          id
          metaId
          memo
          storeId
          tokens {
            minter
            id
            thingId
            ownerId
            royaltyPercent
            burnedAt
            splits {
              id
              percent
            }
            thing {
              storeId
              metadata {
                thing_id
                media
                id
                title
                type
                description
                extra
              }
            }
            list {
              acceptedOfferId
              autotransfer
              contractId
              createdAt
              id
              price
              ownerId
              thingId
            }
          }
          metadata {
            thing_id
            media
            id
            title
            type
            description
            extra
          }
        }
      }
    }
  }
`

'''
'''--- niftiqet/nuxt.config.js ---
export default {
  // Global page headers: https://go.nuxtjs.dev/config-head
  head: {
    title: 'Niftiqet',
    meta: [{
      charset: 'utf-8'
    },
    {
      name: 'viewport',
      content: 'width=device-width, initial-scale=1'
    },
    {
      hid: 'description',
      name: 'description',
      content: ''
    },
    {
      name: 'format-detection',
      content: 'telephone=no'
    }
    ],
    link: [{
      rel: 'icon',
      type: 'image/x-icon',
      href: '/favicon.ico'
    },
    {
      rel: 'stylesheet',
      href: 'https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@400;500;700&display=swap'
    }
    ]
  },
  // Global CSS: https://go.nuxtjs.dev/config-css
  css: [
    '~/assets/scss/style.scss',
    '~/assets/style.css',
    '~/assets/cryptofont.min.css'
  ],
  publicRuntimeConfig: {
    apiKey: process.env.PUBLIC_MINTBASEJS_API_KEY
  },

  target: 'static',
  // Plugins to run before rendering page: https://go.nuxtjs.dev/config-plugins
  plugins: [{
    src: '~/plugins/services.plugin.js'
  }],
  generate: {
    fallback: true
  },
  // Auto import components: https://go.nuxtjs.dev/config-components
  components: true,

  // Modules for dev and build (recommended): https://go.nuxtjs.dev/config-modules
  buildModules: [
    // https://go.nuxtjs.dev/eslint
    '@nuxtjs/eslint-module',
    '@nuxtjs/composition-api/module',
    'nuxt-graphql-request',
    [
      '@pinia/nuxt',
      {
        disableVuex: false,
        autoImports: [
          // automatically imports `usePinia()`
          'defineStore',
          // automatically imports `usePinia()` as `usePiniaStore()`
          ['defineStore', 'definePiniaStore']
        ]
      }
    ]
  ],

  // Modules: https://go.nuxtjs.dev/config-modules
  modules: [
    // https://go.nuxtjs.dev/buefy
    'nuxt-buefy',
    // https://go.nuxtjs.dev/pwa
    '@nuxtjs/pwa'
  ],
  graphql: {
    /**
     * An Object of your GraphQL clients
     */
    clients: {
      default: {
        /**
         * The client endpoint url
         */
        endpoint: process.env.PUBLIC_MINTBASEJS_NETWORK === 'testnet'
          ? process.env.GRAPH_TESTNET_HTTPS_URI
          : process.env.GRAPH_MAINNET_HTTPS_URI,
        /**
         * Per-client options overrides
         * See: https://github.com/prisma-labs/graphql-request#passing-more-options-to-fetch
         */
        options: {}
      }
      // ...your other clients
    },

    /**
     * Options
     * See: https://github.com/prisma-labs/graphql-request#passing-more-options-to-fetch
     */
    options: {},

    /**
     * Optional
     * default: true (this includes cross-fetch/polyfill before creating the graphql client)
     */
    useFetchPolyfill: true,

    /**
     * Optional
     * default: false (this includes graphql-tag for node_modules folder)
     */
    includeNodeModules: true
  },
  // PWA module configuration: https://go.nuxtjs.dev/pwa
  pwa: {
    manifest: {
      lang: 'en'
    }
  },

  // Build Configuration: https://go.nuxtjs.dev/config-build
  build: {},
  router: {
    linkActiveClass: 'is-active'
  }
}

'''
'''--- niftiqet/plugins/apollo-config.js ---
export default (context) => {
  return {
    httpEndpoint:
      process.env.PUBLIC_MINTBASEJS_NETWORK === 'testnet'
        ? process.env.GRAPH_TESTNET_HTTPS_URI
        : process.env.GRAPH_MAINNET_HTTPS_URI,

    // See https://www.apollographql.com/docs/link/links/http.html#options
    httpLinkOptions: {
      credentials: 'same-origin',
      headers: {
        'x-hasura-role': 'anonymous'
      }
    },

    // You can use `wss` for secure connection (recommended in production)
    // Use `null` to disable subscriptions
    wsEndpoint:
      process.env.PUBLIC_MINTBASEJS_NETWORK === 'testnet'
        ? process.env.GRAPH_TESTNET_WSS_URI
        : process.env.GRAPH_MAINNET_WSS_URI,
    // LocalStorage token
    tokenName: 'nift-token',

    // Enable Automatic Query persisting with Apollo Engine
    persisting: true,

    // Use websockets for everything (no HTTP)
    // You need to pass a `wsEndpoint` for this to work
    websocketsOnly: false
  }
}

'''
'''--- niftiqet/plugins/services.plugin.js ---
import { WalletService } from '@/wallet.service'

export default ({ app }, inject) => {
  // new Instance of Api class.
  const walletService = new WalletService()
  // injects imported api class into vue instance and nuxt root context
  inject('walletService', walletService)
}

'''
'''--- niftiqet/store/index.js ---
import { defineStore } from 'pinia'
import { minterStores, fetchStore } from '@/apollo/queries/queries'

export const useStore = defineStore('main', {
  state: () => ({
    wallet: undefined,
    details: {
      accountId: '',
      balance: '',
      allowance: '',
      contractName: ''
    },
    isConnected: false,
    loading: false,
    creator: true,
    stores: [],
    niftyStore: {},
    myStore: {},
    activeThing: {}
  }),
  actions: {
    setupWallet () {
      return new Promise((resolve) => {
        this.loading = true
        this.$nuxt.$walletService
          .walletProvider({ apiKey: this.$nuxt.$config.apiKey })
          .then(({ details, wallet, isConnected }) => {
            this.wallet = wallet
            this.isConnected = isConnected
            if (isConnected) {
              this.details = details
            }
            this.loading = false
            return resolve(wallet)
          })
      })
    },
    async logout ({ commit, dispatch }) {
      await this.wallet?.disconnect()
      await this.setupWallet()
    },
    fetchMinterStores () {
      this.setupWallet().then(async () => {
        const query = minterStores
        const variables = { minter: `${this.details.accountId}` }
        const data = await this.$nuxt.$graphql.default.request(query, variables)
        this.stores = data.store
        console.log('accountId is', await this.wallet)
        await console.log('wallet is', this.wallet)
      })
    },
    fetchNiftyStore () {
      this.setupWallet().then(async () => {
        const query = fetchStore
        const variables = {
          storeId: 'niftiqet.mintspace2.testnet',
          limit: 10,
          offset: 0
        }
        const data = await this.$nuxt.$graphql.default.request(query, variables)
        this.niftyStore = data.store
      })
    },
    async fetchUserStore (storeId) {
      await console.log('this is', this.$nuxt.$graphql)
      const query = fetchStore
      const variables = {
        storeId,
        limit: 10,
        offset: 0
      }
      const data = await this.$nuxt.$graphql.default.request(query, variables)
      this.myStore = data.store
    }
  }
})

'''
'''--- niftiqet/wallet.service.js ---
import { Chain, Network, Wallet } from 'mintbase'
export class WalletService {
  async walletProvider (props) {
    const { apiKey } = props

    async function initWallet () {
      const { data: walletData, error } = await new Wallet().init({
        networkName: process.env.PUBLIC_MINTBASEJS_NETWORK ?? Network.testnet,
        chain: Chain.near,
        apiKey
      })

      if (error) {
        return 'no data'
      }
      let details
      const { wallet, isConnected } = walletData
      if (isConnected) {
        try {
          const { data } = await wallet.details()
          details = data
        } catch (err) {
          return err
        }
      }
      return {
        wallet,
        isConnected,
        details
      }
    }

    const { wallet, details, isConnected } = await initWallet()
    return {
      wallet,
      isConnected,
      details
    }
  }
}

'''