*GitHub Repository "ilyar/near-lab"*

'''--- contract/upload/.rustfmt.toml ---
# https://rust-lang.github.io/rustfmt/
newline_style = "unix"
hard_tabs = false
tab_spaces = 4
imports_layout = "Vertical"
# unstable... should we require `rustup run nightly cargo fmt` ?
# or just update the style guide when they are stable?
#fn_single_line = true
#format_code_in_doc_comments = true
#overflow_delimited_expr = true
#reorder_impl_items = true
#struct_field_align_threshold = 20
#struct_lit_single_line = true
#report_todo = "Always"

'''
'''--- contract/upload/Cargo.toml ---
[package]
name = "upload"
version = "0.1.0"
edition = "2018"
license = "UNLICENSED"

[package.metadata.scripts]
fmt = "cargo +nightly fmt"
build = "cargo wasm && mkdir -p out && cp target/wasm32-unknown-unknown/release/*.wasm out/"
build-in-docker = """
docker run --rm \
  --volume cache:/usr/local/cargo/registry \
  --volume $(pwd):/code \
  --workdir /code \
  nearprotocol/contract-builder cargo wasm && mkdir -p out && cp target/wasm32-unknown-unknown/release/*.wasm out/
"""

[lib]
name = "main"
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.2"
hex = "0.4.3"

'''
'''--- contract/upload/README.md ---
# Near upload

```shell
cargo install cargo-run-script
cargo run-script build # or build-in-docker
near dev-deploy
source neardev/dev-account.env
near --accountId $CONTRACT_NAME call $CONTRACT_NAME upload "$(printf '{"data": "%s"}' "$(head -c 98292 </dev/urandom | base64 -w0)")" --gas 300000000000000
near delete $CONTRACT_NAME $NEAR_DEV_ACCOUNT
```

'''
'''--- contract/upload/src/lib.rs ---
use near_sdk::{
    env,
    json_types::Base64VecU8,
    serde::Deserialize,
    serde_json,
};

#[derive(Deserialize)]
#[serde(crate = "near_sdk::serde")]
struct Param {
    pub data: Base64VecU8,
}

#[no_mangle]
pub extern "C" fn upload() {
    env::setup_panic_hook();
    let input = env::input().unwrap();
    let param: Param = serde_json::from_slice(&input).unwrap();
    env::log_str(&format!("size: {}", param.data.0.len()));
    let checksum = hex::encode(env::sha256(&param.data.0));
    env::log_str(&format!("hash: {}", checksum));
}

'''
'''--- package.json ---
{
  "name": "near-lab",
  "version": "1.0.0-beta.0",
  "main": "index.js",
  "license": "UNLICENSED",
  "scripts": {
    "concurrency-deploy": "node deploy",
    "concurrency-local-setup": "yarn local-env && node script/setup/test-env && yarn script/concurrency/deploy",
    "concurrency-delete-accounts": "node script/concurrency/delete-accounts",
    "concurrency-create-accounts": "node script/concurrency/create-accounts",
    "local-env": "cp .env.local .env"
  },
  "dependencies": {
    "@4ire-labs/near-sdk": "^1.0.0-beta.8",
    "@supercharge/promise-pool": "^1.7.0",
    "dotenv": "^10.0.0"
  }
}

'''
'''--- readme.md ---
# NEAR Lab

## Setup

```shell
yarn
```

## Labs

- [concurrency](report/concurrency)

'''
'''--- report/concurrency/lab001.md ---
# lab 001

`npx near state sybil.testnet`
```shell
Account sybil.testnet
{
  amount: '788702943481822180700000000',
  block_hash: 'C7CeUW8aD1sHrAjxe2RgWv8qs8rzvhx5h8TpmoYsuH97',
  block_height: 54994902,
  code_hash: '11111111111111111111111111111111',
  storage_usage: 346,
  formattedAmount: '788.7029434818221807'
}
```
`yarn concurrency-deploy`
```shell
[NEAR testnet] DEPLOY IN PROGRESS
[NEAR testnet] Created helper account: {
  accountId: 'sybil.testnet',
  transactionId: 'sybil.testnet:5QYdUKrxjBGs5nEZRxcMm1Pc1wVikvefzAcpXu1hghQs'
}
[NEAR testnet] DEPLOY DONE
```
`npx near state sybil.testnet`
```shell
Account sybil.testnet
{
  amount: '788702610728990025500000000',
  block_hash: 'H6WpYevxbXS5bnow1JFWkZAe2aN1HRMPU9S4fKZJuGVf',
  block_height: 54995189,
  code_hash: '9oZX7AaMKA7ieyEPm3ab7JKvyY5NthwBfziS6XjYivSU',
  storage_usage: 201570,
  formattedAmount: '788.7026107289900255'
}
```
`yarn concurrency-create-accounts`
```shell
...
[NEAR testnet] create 1000 accounts
[NEAR testnet] DONE
Done in 377.39s
```
`npx near state sybil.testnet`
```shell
Account sybil.testnet
{
  amount: '783994316646766200084953610',
  block_hash: 'FDcwbfeHHNYrQp9Gsc557QxwosTMe9coBSK27ru2bE7m',
  block_height: 54996130,
  code_hash: '9oZX7AaMKA7ieyEPm3ab7JKvyY5NthwBfziS6XjYivSU',
  storage_usage: 201670,
  formattedAmount: '783.99431664676620008495361'
}
```
`yarn concurrency-delete-accounts`
```shell
...
[NEAR testnet] delete 924 accounts
[NEAR testnet] DONE
Done in 906.15s.
```
`yarn concurrency-delete-accounts`
```shell
...
[NEAR testnet] delete 76 accounts
[NEAR testnet] DONE
Done in 275.67s.
```
`npx near state sybil.testnet`
```shell
Account sybil.testnet
{
  amount: '786898570434266200084953610',
  block_hash: 'C3scscaThWUihXnCkZVKPqZqQzQ9g2ZmMVCwBY4eqR7B',
  block_height: 54999356,
  code_hash: '9oZX7AaMKA7ieyEPm3ab7JKvyY5NthwBfziS6XjYivSU',
  storage_usage: 201670,
  formattedAmount: '786.89857043426620008495361'
}
```

'''
'''--- report/concurrency/lab002.md ---
# lab 002

`.env`
```shell
NEAR_ENV=testnet
NEAR_NODE_URL=https://near-testnet--rpc.datahub.figment.io/apikey/<YOUR_API_KEY>
NEAR_SENDER_ID=sybil.testnet
NEAR_SENDER_PRIVATE_KEY=ed25519:<secret-data>
NEAR_INIT_BALANCE=0.003
NEAR_COUNT=100
NEAR_CONCURRENCY=4
NEAR_CREDENTIALS_PATH=.key
```

`yarn concurrency-create-accounts`
```shell
...
errors: []
[NEAR testnet] create 100 accounts errors: 0
[NEAR testnet] DONE
Done in 383.60s
```
`yarn concurrency-delete-accounts`
```shell
...
[NEAR testnet] delete 100 accounts errors: 0
[NEAR testnet] DONE
Done in 123.62s
```

'''
'''--- report/concurrency/lab003.md ---
# lab 003

`.env`
```shell
NEAR_ENV=testnet
NEAR_SENDER_ID=sybil.testnet
NEAR_SENDER_PRIVATE_KEY=ed25519:<secret-data>
NEAR_COUNT=100
NEAR_CONCURRENCY=10
NEAR_CREDENTIALS_PATH=.key
```

`yarn concurrency-create-accounts`
```shell
...
errors: []
[NEAR testnet] create 100 accounts errors: 0
[NEAR testnet] DONE
Done in 93.32s.
```
`yarn concurrency-delete-accounts`
```shell
...
[NEAR testnet] delete 100 accounts errors: 0
[NEAR testnet] DONE
Done in 165.34s
```

'''
'''--- report/concurrency/readme.md ---
# NEAR Concurrency Lab

## Only for local net
```shell
yarn concurrency-local-setup
yarn concurrency-create-accounts
yarn concurrency-delete-accounts
```

## For test net
create file `.env`
```ini
NEAR_ENV=testnet
NEAR_SENDER_ID=<account-name>.testnet
NEAR_SENDER_PRIVATE_KEY=ed25519:<secret-data>
NEAR_INIT_BALANCE=0.003
NEAR_COUNT=1000
NEAR_CONCURRENCY=4
NEAR_CREDENTIALS_PATH=.key
```
> optional `NEAR_NODE_URL=https://near-testnet--rpc.datahub.figment.io/apikey/<YOUR_API_KEY>`

run:
```shell
yarn concurrency-deploy
yarn concurrency-create-accounts
yarn concurrency-delete-accounts
```

'''
'''--- report/contract/lab001.md ---
# lab 001 â€” contract upload

```shell
near --accountId $CONTRACT_NAME call --gas 30000000000000 \
  $CONTRACT_NAME upload \
  "$(printf '{"data":"%s"}' "$(head -c 63765 </dev/urandom | base64 -w0)")"
```

it turned out to load **63765** bytes and check the `length`
https://explorer.testnet.near.org/transactions/2Vz7CFva3WUGuF8BmVB3oqvdxM8BND2EXELyzKGD3zrq

added another `sha256` calculation there was not enough gas
https://explorer.testnet.near.org/transactions/BB59cQNanTXKPNs1wWRXGUmrd4J1Dm34Jzetdf5LN7XV

noticed that I set a small gas limit of **30TGas** and increased it to a maximum of **300TGas**

```shell
near --accountId $CONTRACT_NAME call --gas 300000000000000 \
  $CONTRACT_NAME upload \
  "$(printf '{"data":"%s"}' "$(head -c 98292 </dev/urandom | base64 -w0)")" 
```

it turned out to load **98292** bytes and check the `length` and calculation of `sha256`
https://explorer.testnet.near.org/transactions/7TA9GAMEiVwDeHtRKQLqm2Qd7iYDjsmU8fyqJyhvc6Ro

**98292** bytes this limit is already on `near-cli` or `node.js` or `rpc`: Argument list too long

another time I'll try to make a request directly through `rpc`

'''
'''--- script/concurrency/create-accounts.js ---
require('dotenv/config')
const near = require('@4ire-labs/near-sdk')
const {
  resultToString,
  helperContract,
  now,
} = require('../util')
const PromisePool = require('@supercharge/promise-pool')
const NEAR_CONCURRENCY = parseInt(process.env.NEAR_CONCURRENCY || 1)
const NEAR_INIT_BALANCE = process.env.NEAR_INIT_BALANCE || '0.003'
const NEAR_COUNT = parseInt(process.env.NEAR_COUNT || 100)

async function main() {
  const sender = near.parseAccountNetwork()
  console.log(`[NEAR ${sender.networkId}] IN PROGRESS`)
  const helper = await helperContract(sender)
  const list = Array.from(Array(NEAR_COUNT).keys())
  const {results, errors} = await PromisePool
    .for(list)
    .withConcurrency(NEAR_CONCURRENCY)
    .process(async (i) => {
      const newAccount = near.custodianAccount(`${i}-${now()}.${sender.accountId}`)
      const status = await helper.create_account(
        newAccount.accountId,
        newAccount.keyPair.publicKey.toString(),
        NEAR_INIT_BALANCE,
      ).then(async (trx) => {
        await near.writeUnencryptedFileSystemKeyStore(newAccount)
        return {
          accountId: newAccount.accountId,
          transactionId: trx.transactionId,
          status: trx.value,
        }
      })
      console.log(status)
      return status
    })
  console.log('errors:', errors)
  console.log(`[NEAR ${sender.networkId}] ${resultToString(results, errors)}`)
  console.log(`[NEAR ${sender.networkId}] DONE`)
}

main().catch((error) => {
  console.error(error)
  process.exit(1)
})

'''
'''--- script/concurrency/delete-accounts.js ---
require('dotenv/config')
const near = require('@4ire-labs/near-sdk')
const path = require('path')
const fs = require('fs')
const PromisePool = require('@supercharge/promise-pool')
const {
  resultToString,
} = require('../util')
const NEAR_CONCURRENCY = parseInt(process.env.NEAR_CONCURRENCY || 1)

async function main() {
  const sender = near.parseAccountNetwork()
  console.log(`[NEAR ${sender.networkId}] IN PROGRESS`)
  const directoryPath = path.join(__dirname, process.env.NEAR_CREDENTIALS_PATH, sender.networkId)
  const deleteList = fs.readdirSync(directoryPath)
    .filter((file) => file.includes(sender.accountId))
    .map((file) => file.slice(0, file.length - 5))
  const {results, errors} = await PromisePool
    .for(deleteList)
    .withConcurrency(NEAR_CONCURRENCY)
    .process(async accountId => {
      const account = await near.readUnencryptedFileSystemKeyStore(accountId)
      const out = {
        accountId: account.accountId,
        status: false,
        isExistAccount: true,
      }
      if (await near.isExistAccount(account)) {
        const trx = await near.deleteAccount(account, sender);
        out.transactionId = trx.transactionId
        out.status = true
      } else {
        out.isExistAccount = false
      }
      if (out.isExistAccount === false || out.status === true) {
        const keyPath = path.join(directoryPath, `${account.accountId}.json`)
        fs.unlinkSync(keyPath)
      }
      console.log(out)
      return out
    })
  console.log('errors:', errors)
  console.log(`[NEAR ${sender.networkId}] ${resultToString(results, errors)}`)
  console.log(`[NEAR ${sender.networkId}] DONE`)
}

main().catch((error) => {
  console.error(error)
  process.exit(1)
})

'''
'''--- script/concurrency/deploy.js ---
require('dotenv/config')
const near = require('@4ire-labs/near-sdk')

async function main() {
  console.log('[NEAR] DEPLOY IN PROGRESS')
  const helperCode = await near.fetchContract('near', 'mainnet')
  const sender = near.parseAccountNetwork()
  const deployResult = await near.deployContract(sender, helperCode)
  console.log('[NEAR] Created helper account:', {
    accountId: deployResult.account.accountId,
    transactionId: deployResult.outcome.transactionId,
  })
  console.log('[NEAR] DEPLOY DONE')
}

main().catch((error) => {
  console.error(error)
  process.exit(1)
})

'''
'''--- script/setup/test-env.js ---
require('dotenv/config')
const BN = require('bn.js')
const near = require('@4ire-labs/near-sdk')
const {
  printAccount,
} = require('./util')

const NEAR_CLONE_ID = process.env.NEAR_CLONE_ID
const NEAR_CLONE_ENV = process.env.NEAR_CLONE_ENV || 'testnet'

async function createSender(sender, local) {
  if (await near.isExistAccount(sender)) {
    await near.deleteAccount(sender, local)
  }
  let amount = '100'
  const source = near.parseAccountNetwork(NEAR_CLONE_ID, null, NEAR_CLONE_ENV)
  if (await near.isExistAccount(source)) {
    const state = await near.stateAccount(source)
    amount = (new BN(state.amount)).div(new BN(10).pow(new BN(24))).toString() // TODO use near.toNear(state.amount) after fix https://github.com/4IRE-Labs/near-sdk/issues/16
  }
  const trx = await near.createAccount(local, sender, amount)
  printAccount(sender, trx)
}

async function main() {
  const local = near.parseAccountNetwork('local');
  console.log(`[NEAR ${local.networkId}] SETUP IN PROGRESS`)
  const sender = near.parseAccountNetwork()
  await createSender(sender, local);
  console.log(`[NEAR ${local.networkId}] ${sender.networkId}:`, await near.stateAccount(sender))
  console.log(`[NEAR ${local.networkId}] SETUP DONE`)
}

main().catch((error) => {
  console.error(error)
  process.exit(1)
})

'''
'''--- script/util.js ---
const near = require('@4ire-labs/near-sdk')

class Helper extends near.Contract {
  create_account(new_account_id, new_public_key, attachedDeposit) {
    return this.callRaw({
      methodName: 'create_account',
      args: {
        new_account_id,
        new_public_key,
      },
      attachedDeposit
    })
  }
}

function helperContract(sender, contractAddress) {
  contractAddress = contractAddress || sender.accountId
  return near.Contract.connect(Helper, contractAddress, sender)
}

function printAccount(account, trx) {
  const out = {
    accountId: account.accountId,
  }
  if (trx) {
    out.transactionId = trx.transactionId
  }
  console.log(out)
}

const now = (unit) => {
  const hrTime = process.hrtime();
  switch (unit) {
    case 'milli':
      return hrTime[0] * 1000 + hrTime[1] / 1000000
    case 'micro':
      return hrTime[0] * 1000000 + hrTime[1] / 1000
    case 'nano':
    default:
      return hrTime[0] * 1000000000 + hrTime[1]
  }
}

const resultToString = (results = [], errors = []) => {
  const percentErrors = errors.length > 0 ? Math.round(1 / results.length * errors.length * 10000) / 100 : 0
  return `result ${results.length} error: ${errors.length} (${percentErrors}%)`
}

module.exports = {
  resultToString,
  printAccount,
  helperContract,
  now,
}

'''