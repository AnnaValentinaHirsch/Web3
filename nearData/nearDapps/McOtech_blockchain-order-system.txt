*GitHub Repository "McOtech/blockchain-order-system"*

'''--- README.md ---
# ORDER SYSTEM

This project draws its concept from web2 online order processing systems. It utilizes Near protocol, a layer one blockchain technology, to implement a demo of the online order processing system in web3.

[`Youtube Video Demo`](https://www.youtube.com/watch?v=nmh248_0UJs)

# Challenges Adressed

1. `Trust without assurity`: Buyers' checkout `(transfer their cash)` trusting that the sellers will deliver the commodities they have ordered. On the other hand, sellers hope that those doing deliveries will definitely deliver the commidities to their customers without any inconvenience.

# What-if statement

What if any of the party disappears before the order is completely processed?

# Scenario of the project concept

`Alice` owns an online store selling various computer items and accessories. `Bob` is a potential buyer who wants the commodities he will order to be delivered to him. `Fred` owns a motocycle which he uses to make deliveries to various clients.

Bob then decides to purchase an accessory. He visits Alice's website and selects the accessories he need adding each to his cart with their respective quantities. On checking out, he selects Fred as the delivery guy and the amount due is calculated by summing up the cost of accessories in their respective quantities and the shipping fee. This amount is deducted from his active account balance and locked until he confirms to have received the accessories.

Fred then goes to pick the accessories from Alice for delivery. He acknowledges picking the accessories by providing the order reference [id] during which the cost of accessories in their respective quantities is deducted from his active balance and locked until he either makes the delivery to Bob or returns the accessories in the event Bob is not found.

Fred is a man of integrity, he delivers the accessories to Bob and eventually Bob confirms the delivery by providing order reference [id] and Fred's account reference [id]. This is when the actual transfer of money which was initially locked transfered to their respective recipient accounts.

Let's see how:
Bob's locked amount implied that the order's amount due will all be cashed into the Fred's [delivery] account ONLY if he [Bob] confirms that he has received his products.
Fred's locked amount implied that the total cost of accessories in their respective quantities `minus` the shipping fee, will all be cashed into Alice's [seller] account ONLY if Bob confirms that the accessories have reached him. In the event that Fred returns the accessories for whatever reason, Fred's locked amount will be credited back into his account plus the order shipping fee ONLY if Alice [seller] confirms the return.

In this scenario you don't have to trust any party in transacting the business.

# Prerequisites

To successfully execute this project's code, ensure you have the following.

1. Install `node` v14.16.0 or switch to the version if you use node version manager `nvm`
2. Install `near-cli` globally for contract deployment and function calls.
3. Install `assemblyscript` globally for compilation to web assembly files and other related tasks.
4. Login to atleast three testnet accounts from your terminal for each of the three accounts to have their credential files for various function calls
5. Ensure you have `git` installed as well.
6. Ensure `yarn` is installed in your environment.

# PROJECT SETUP

Clone the project:

     git clone https://github.com/McOtech/blockchain-order-system.git

cd into the project directory and proceed with rest of operation from the root folder.

Install necessary packages:

     yarn

Navigate to the `./scripts/config.conf` file from the root directory and open it in you favourite editor.

Provide the values of the uncommented variables with placeholder statement replacing the placeholders with the correct values.

     # Deployment variables
     CREDENTIALS_ROOT_DIR=<credentials-root-directory>
     CONTRACT_NAME=<contract-accountId>
     BENEFICIARY_ACCOUNT_ID=<beneficiary-accountId>
     MASTER_ACCOUNT_ID=<master-accountId>

     # Accounts
     BUYER_ACCOUNT_ID=<buyer-accountId>
     SELLER_ACCOUNT_ID=<seller-accountId>
     DELIVERY_ACCOUNT_ID=<delivery-accountId>

NOTE: The contract name `<contract-accountId>` must be a sub account of the master account `<master-accountId>`

Navigate to the `./assembly/index.ts` file from the root directory and open it in you favourite editor.

Provide the seller account id:

       seller: string = '<seller-accountId>';

NOTE: Ensure the `SELLER_ACCOUNT_ID` value provided in the `./scripts/config.conf` is strictly equal to that provided in `./assembly/index.ts`

# RUNNING SCRIPTS

Fire up your terminal from the project's root directory and proceed. You may need to grant permission to run the scripts.

     chmod 755 ./scripts/*

Run test:

     ./scripts/0.test.sh

Generate web assembly file `build file`:

     ./scripts/1.build.sh

Deploy the contract:

     ./scripts/2.deploy.sh

Add product for sale and view the list of product in the collection:

     ./scripts/3.product.sh

Edit `./scripts/3.product.sh` to add other products.
To remove a product from the list, uncomment the `PRODUCT_ID_TO_REMOVE_FROM_COLLECTION` variable and provide the id of product to be removed as it value.

     PRODUCT_ID_TO_REMOVE_FROM_COLLECTION=

Add product to cart:

Uncomment the following line in `./scripts/config.conf` file and provide the id of the product to be added to cart as the value. You can as well change the value of the `QUANTITY` variable of the product.

     # PRODUCT_ID_TO_ADD_TO_CART=

Then run:

     ./scripts/4.cart.sh

To remove item from cart, uncomment the following line in `./scripts/config.conf` file and provide the id of the product to be removed from cart as the value of `PRODUCT_ID_TO_REMOVE_FROM_CART`.

     # PRODUCT_ID_TO_REMOVE_FROM_CART=

View Account Balances:

     ./scripts/5.accounts.sh

Place order:

    ./scripts/6.order-placement.sh

NOTE: copy the `order id` displayed after running the script, uncomment the line in `./scripts/config.conf` as illustrated below and paste it as the value to `ORDER_ID`. This is required for further scripts.

    ORDER_ID=<order-id>

Clear order for delivery:

    ./scripts/7.order-clearance.sh

Confirm Delivery:

    ./scripts/8.order-delivery.sh

Confirm Order Return:

    ./scripts/9.order-return.sh

Thank you. Let's build on near #nearprotocol. Let's liberate the web.

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/example.spec.ts ---
import { VMContext, VM, u128, context } from 'near-sdk-as';
import { Contract } from '..';
import {
  ActiveAccounts,
  Carts,
  LockedAccounts,
  Orders,
  ProductIds,
  Products,
} from '../constants';
import { Cart } from '../models/Cart';
import { Product } from '../models/Product';

const seller = 'amazon';
const buyer = 'alice';
const delivery = 'bob';

var contract: Contract;

describe('Order System', () => {
  beforeAll(() => {
    contract = new Contract();
    contract.seller = seller;
  });

  afterEach(() => {
    if (ProductIds.length > 0) {
      const pIds = ProductIds.pop();
      const ids = pIds.showIds();
      for (let i = 0; i < ids.length; i++) {
        Products.delete(ids[i]);
      }
    }
  });

  it('should add one product in Products storage', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('phone', 20, 1);
    expect(Products.contains(pId)).toStrictEqual(true);
    expect(ProductIds).toHaveLength(1);
    expect(ProductIds[0].showIds()[0]).toStrictEqual(pId);
  });

  it('should remove one product in Products storage', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('Charger', 10, 2);
    const pId2 = contract.addProduct('Tablet', 50, 1);
    expect(Products.contains(pId)).toStrictEqual(true);
    expect(Products.contains(pId2)).toStrictEqual(true);
    expect(ProductIds[0].showIds()).toHaveLength(2, 'Should contain two ids.');

    contract.removeProduct(pId);
    expect(Products.contains(pId)).toStrictEqual(false);
    expect(ProductIds).toHaveLength(1);
  });

  it("should add a product to buyers's cart", () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('charger', 25, 2);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 2);

    expect(Carts.contains(buyer)).toStrictEqual(true);
    expect(Carts.getSome(buyer).getProductsOrdered()[0].getId()).toStrictEqual(
      ProductIds[0].showIds()[0]
    );
    expect(
      Carts.getSome(buyer).getProductsOrdered()[0].getQuantity()
    ).toStrictEqual(2);
    expect(
      Carts.getSome(buyer).getProductsOrdered()[0].getPrice()
    ).toStrictEqual(Products.getSome(ProductIds[0].showIds()[0]).getPrice());
    Carts.delete(buyer);
    expect(Carts.contains(buyer)).toStrictEqual(false);
  });

  it("should remove an item from the buyer's cart", () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('phone', 26, 2);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 3);

    expect(Carts.contains(buyer)).toStrictEqual(true);
    expect(Carts.getSome(buyer).getProductsOrdered()[0].getId()).toStrictEqual(
      ProductIds[0].showIds()[0]
    );
    // Remove item from cart
    contract.removeFromCart(ProductIds[0].showIds()[0]);

    expect(Carts.getSome(buyer).getProductsOrdered()).toHaveLength(0);
    expect(Carts.getSome(buyer).getSubTotal()).toStrictEqual(u128.fromU64(0));
  });

  it("should view buyer's cart content", () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('phone', 27, 2);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 4);
    const myCart = <Cart>contract.viewCart();
    log(`============================================================
          SHOWING CART CONTENT
        =============================================================
    `);
    log(myCart);
    expect(myCart).not.toBeNull();
    expect(myCart.getBuyer()).toStrictEqual(buyer);

    Carts.delete(buyer);
    expect(contract.viewCart()).toBeNull();
  });

  it('should show products being sold', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('Laptop', 28, 3);
    const pId2 = contract.addProduct('Charger', 7, 5);
    const products = contract.showProducts();
    log(`============================================================
          SHOWING PRODUCTS ON SALE
        =============================================================
    `);
    log(products);
    expect<Product[]>(products).toHaveLength(2);
    expect(products[0].getId()).toStrictEqual(pId);
    expect(products[1].getId()).toStrictEqual(pId2);
  });

  it("should return user's active account balance myBalance() and test deposit()", () => {
    VMContext.setSigner_account_id(buyer);
    let balance = contract.myBalance();
    expect(balance).toStrictEqual(u128.fromU64(0));
    log(`${buyer}'s active balance before deposit: ${balance}`);

    const deposit = u128.fromU64(10);

    VMContext.setAttached_deposit(deposit);
    contract.deposit();
    balance = contract.myBalance();
    log(`${buyer}'s active balance after deposit: ${balance}`);

    expect(balance).toStrictEqual(deposit);
    ActiveAccounts.delete(buyer);
  });
});

var orderId: string = '';
describe('Order Processing', () => {
  beforeAll(() => {
    contract = new Contract();
    contract.seller = seller;
  });

  afterAll(() => {
    if (ProductIds.length > 0) {
      const pIds = ProductIds.pop();
      const ids = pIds.showIds();
      for (let i = 0; i < ids.length; i++) {
        Products.delete(ids[i]);
      }
    }

    if (ActiveAccounts.contains(seller)) {
      ActiveAccounts.delete(seller);
    }
    if (ActiveAccounts.contains(buyer)) {
      ActiveAccounts.delete(buyer);
    }
    if (ActiveAccounts.contains(delivery)) {
      ActiveAccounts.delete(delivery);
    }

    const buyerDeliveryKey = buyer + ':' + delivery;
    if (LockedAccounts.contains(buyerDeliveryKey)) {
      LockedAccounts.delete(buyerDeliveryKey);
    }
  });

  it('should successfully execute placeOrder()', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('Laptop', 25, 5);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 2);

    expect(Carts.contains(buyer)).toStrictEqual(true);

    const amountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(amountDeposited);
    contract.deposit();

    expect(contract.myBalance()).toStrictEqual(amountDeposited);

    const key = buyer + ':' + delivery;
    const balanceBefore = contract.myBalance();

    const orderId = contract.placeOrder(delivery);
    const balanceAfter = contract.myBalance();

    expect(Carts.contains(buyer)).toStrictEqual(false);
    expect(Orders.contains(orderId)).toStrictEqual(true);
    expect(balanceAfter).toStrictEqual(
      u128.sub(
        balanceBefore,
        Orders.getSome(orderId).getCart().getTotalAmount()
      )
    );
    expect(LockedAccounts.contains(key)).toStrictEqual(true);
    expect(LockedAccounts.getSome(key)).toStrictEqual(
      Orders.getSome(orderId).getCart().getTotalAmount()
    );

    if (Orders.contains(orderId)) {
      Orders.delete(orderId);
    }
  });

  it('should successfully execute clearShipment()', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('Laptop', 25, 5);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 2);
    const buyerAmountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(buyerAmountDeposited);
    contract.deposit();
    const orderId = contract.placeOrder(delivery);

    VMContext.setSigner_account_id(delivery);
    const order = Orders.getSome(orderId);
    const deliveryAmountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(deliveryAmountDeposited);
    contract.deposit();
    const balanceBefore = contract.myBalance();
    contract.clearShipment(orderId);
    const balanceAfter = contract.myBalance();

    expect(balanceBefore).toStrictEqual(
      u128.add(balanceAfter, order.getCart().getSubTotal())
    );
    expect(Orders.getSome(orderId).getIsCleared()).toStrictEqual(true);
    expect(
      LockedAccounts.getSome(delivery + ':' + seller)
    ).toBeGreaterThanOrEqual(order.getCart().getSubTotal());

    if (Orders.contains(orderId)) {
      Orders.delete(orderId);
    }
  });

  it('should successfully execute confirmDelivery()', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('Laptop', 25, 5);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 2);
    const buyerAmountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(buyerAmountDeposited);
    contract.deposit();
    const orderId = contract.placeOrder(delivery);

    VMContext.setSigner_account_id(delivery);
    const order = Orders.getSome(orderId);
    const deliveryAmountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(deliveryAmountDeposited);
    contract.deposit();
    contract.clearShipment(orderId);

    VMContext.setSigner_account_id(buyer);
    const balanceBefore = contract.myBalance();
    contract.confirmDelivery(orderId, delivery);
    const balanceAfter = contract.myBalance();

    expect(Orders.getSome(orderId).getIsDelivered()).toStrictEqual(true);
    expect(LockedAccounts.contains(buyer + ':' + delivery)).toStrictEqual(
      false
    );
    expect(LockedAccounts.contains(delivery + ':' + seller)).toStrictEqual(
      false
    );
    expect(ActiveAccounts.getSome(delivery)).toBeGreaterThanOrEqual(
      order.getCart().getTotalAmount()
    );
    expect(ActiveAccounts.getSome(seller)).toBeGreaterThanOrEqual(
      order.getCart().getSubTotal()
    );
  });

  it('should successfully execute confirmReturn()', () => {
    VMContext.setSigner_account_id(seller);
    const pId = contract.addProduct('Laptop', 25, 5);

    VMContext.setSigner_account_id(buyer);
    contract.addToCart(ProductIds[0].showIds()[0], 2);
    const buyerAmountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(buyerAmountDeposited);
    contract.deposit();
    const orderId = contract.placeOrder(delivery);

    VMContext.setSigner_account_id(delivery);
    const order = Orders.getSome(orderId);
    const deliveryAmountDeposited = u128.fromU64(70);
    VMContext.setAttached_deposit(deliveryAmountDeposited);
    contract.deposit();
    contract.clearShipment(orderId);

    VMContext.setSigner_account_id(seller);
    contract.confirmReturn(orderId, delivery);

    expect(Orders.getSome(orderId).getIsDelivered()).toStrictEqual(true);
    expect(LockedAccounts.contains(buyer + ':' + delivery)).toStrictEqual(
      false
    );
    expect(LockedAccounts.contains(delivery + ':' + seller)).toStrictEqual(
      false
    );
    expect(ActiveAccounts.getSome(delivery)).toBeGreaterThanOrEqual(
      order.getCart().getTotalAmount()
    );
    expect(ActiveAccounts.getSome(buyer)).toBeGreaterThanOrEqual(
      order.getCart().getSubTotal()
    );
  });
});

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/constants.ts ---
import { PersistentMap, PersistentVector, u128 } from 'near-sdk-as';
import { Cart } from './models/Cart';
import { Order } from './models/Order';
import { Product } from './models/Product';
import { ProductId } from './models/ProductId';

export const KEY_LENGTH = 22;

export const Orders = new PersistentMap<string, Order>('orders');
export const Products = new PersistentMap<string, Product>('products');
export const ProductIds = new PersistentVector<ProductId>('productIds');
export const Carts = new PersistentMap<string, Cart>('carts');
export const ActiveAccounts = new PersistentMap<string, u128>('aacc');
export const LockedAccounts = new PersistentMap<string, u128>('lacc');

'''
'''--- assembly/index.ts ---
import { context, PersistentDeque, u128 } from 'near-sdk-as';
import { Carts, Orders, ProductIds, Products } from './constants';
import { Accounts } from './models/Accounts';
import { Cart } from './models/Cart';
import { Order } from './models/Order';
import { Product } from './models/Product';
import { ProductId } from './models/ProductId';
import { ProductOrdered } from './models/ProductOrdered';

export class Contract {
  seller: string = '<seller-accountId>';

  // ================================================================
  // SELLER FUNCTIONS
  // ================================================================

  /**
   * This is a call function that changes the state by adding a single product.
   * @param name : Name of the product.
   * @param price : Price of the product.
   * @param sFee : Product's shipping fee.
   * @returns product id.
   */
  addProduct(name: string, price: u64, sFee: u64): string {
    assert(
      context.sender == this.seller,
      'You are Unauthorized to perform this transaction.'
    );
    const product = new Product(
      ProductIds.length,
      name,
      u128.fromU64(price),
      sFee
    );
    Products.set(product.getId(), product);

    if (ProductIds.length > 0) {
      const idStorage = ProductIds.pop();
      idStorage.add(product.getId());
      ProductIds.push(idStorage);
    } else {
      const idStorage = new ProductId();
      idStorage.add(product.getId());
      ProductIds.push(idStorage);
    }
    return product.getId();
  }

  /**
   * A call function.
   * It removes a single product from the Products collection.
   * @param id product id to be removed from Products collection
   */
  removeProduct(id: string): void {
    assert(
      context.sender == this.seller,
      'You are Unauthorized to perform this transaction.'
    );
    assert(Products.contains(id), 'Invalid product reference!');
    const product = Products.getSome(id);
    Products.delete(id);

    const idStorage = ProductIds.pop();
    idStorage.remove(product.getId());
    ProductIds.push(idStorage);
  }

  /**
   * A call function that changes order delivery state to true then initiates cash transactions of the involved parties.
   * @param orderId : id of the order to be confirmed.
   * @param delivery : the account-id of the delivery account.
   */
  confirmReturn(orderId: string, delivery: string): void {
    assert(
      context.sender == this.seller,
      'You are Unauthorized to perform this transaction.'
    );
    assert(Orders.contains(orderId), 'Invalid order id!');
    const order = Orders.getSome(orderId);
    assert(order.getDelivery() == delivery, 'Delivery id mismatch!');
    assert(
      !order.getIsDelivered(),
      'Order is already delivered! Invalidating return process.'
    );
    Accounts.transfer(delivery, this.seller);
    Accounts.transfer(order.getCart().getBuyer(), delivery);
    Accounts.activeTransfer(
      order.getCart().getBuyer(),
      delivery,
      order.getCart().getShippingFee()
    );
    order.setIsDelivered(true);
    Orders.set(order.getId(), order);
  }

  // ================================================================
  // BUYER FUNCTIONS
  // ================================================================

  /**
   * A call function to add item to cart.
   * @param id of the product to be added to cart.
   * @param qty : quantity of the product to be added to cart.
   */
  addToCart(id: string, qty: u64): void {
    if (Carts.contains(context.sender)) {
      const myCart: Cart = Carts.getSome(context.sender);
      myCart.addToCart(id, qty);
    } else {
      const myCart = new Cart(context.sender);
      myCart.addToCart(id, qty);
    }
  }

  /**
   * A call function to remove item from cart.
   * @param id of the product to be removed from cart.
   */
  removeFromCart(id: string): void {
    if (Carts.contains(context.sender)) {
      const myCart: Cart = Carts.getSome(context.sender);
      myCart.removeFromCart(id);
    }
  }

  /**
   * A call function to list items in cart
   * @returns a list of items in the cart, null otherwise.
   */
  viewCart(): Cart | null {
    if (Carts.contains(context.sender)) {
      return Carts.getSome(context.sender);
    }
    return null;
  }

  /**
   * A call function to change cart items into sales.
   * It initiates locking of money in buyer's account for further order processing stages.
   * @param delivery account id of the delivery person
   * @returns order id of the just placed order.
   */
  placeOrder(delivery: string): string {
    assert(
      Carts.contains(context.sender),
      'Empty cart! To proceed, select products to order.'
    );
    assert(delivery.length > 0, 'Valid delivery id required to proceed!');
    const myOrder = new Order(delivery);
    const amountPayable = <u128>myOrder.getCart().getTotalAmount();
    const aBalance = Accounts.activeBalance(context.sender);
    assert(
      u128.ge(aBalance, amountPayable),
      'Insufficient funds in your account. \nBalance: ' +
        aBalance.toString() +
        '\nAmount Required: ' +
        amountPayable.toString()
    );
    Accounts.lock(context.sender, delivery, amountPayable);
    Orders.set(myOrder.getId(), myOrder);
    Carts.delete(context.sender);
    return myOrder.getId();
  }

  /**
   * A call function to confirm that products ordered have reached the intended buyer.
   * @param orderId : id of the order whose delivery is to be confirmed.
   * @param delivery : delivery person's account id.
   */
  confirmDelivery(orderId: string, delivery: string): void {
    assert(Orders.contains(orderId), 'Invalid order id! Check and try again.');
    const myOrder = Orders.getSome(orderId);
    assert(!myOrder.getIsDelivered(), 'Order delivery confirmed already!');
    Accounts.unlock(context.sender, delivery);
    Accounts.unlock(delivery, this.seller);
    myOrder.setIsDelivered(true);
    Orders.set(myOrder.getId(), myOrder);
  }

  // ================================================================
  // DELIVERY FUNCTIONS
  // ================================================================

  /**
   * A call function to change the status of the order to have been cleared.
   * @param orderId is the id of the order to be cleared for shipment
   */
  clearShipment(orderId: string): void {
    assert(
      Orders.contains(orderId),
      'Order not found! check order id and try again.'
    );
    const aBalance = Accounts.activeBalance(context.sender);
    const order = Orders.getSome(orderId);
    assert(!order.getIsCleared(), 'Order cleared already!');
    assert(!order.getIsDelivered(), 'Order delivery confirmed already!');
    assert(order.getDelivery() == context.sender, 'Unauthorized operation!');
    assert(
      u128.ge(aBalance, order.getCart().getSubTotal()),
      'Insufficient funds in your account. \nBalance: ' +
        aBalance.toString() +
        '\nAmount Required: ' +
        order.getCart().getSubTotal().toString()
    );
    Accounts.lock(context.sender, this.seller, order.getCart().getSubTotal());
    order.setIsCleared(true);
    Orders.set(order.getId(), order);
  }

  // ================================================================
  // UNIVERSAL FUNCTIONS
  // ================================================================

  /**
   * A call function that retreives and displays all products' information in the collection.
   * @returns a list of products being sold.
   */
  showProducts(): Product[] {
    const products = new Array<Product>();
    const pIds = ProductIds[0].showIds();
    for (let i = 0; i < pIds.length; i++) {
      products[i] = Products.getSome(pIds[i]);
    }
    return products;
  }

  /**
   * A call function to check user's active balance.
   * @returns figure of money in user's account.
   */
  myBalance(): u128 {
    return Accounts.activeBalance(context.sender);
  }

  /**
   * A call function to deposit money into user's active account depending on the figure of context.attachedDeposit.
   */
  deposit(): void {
    const amount = context.attachedDeposit;
    Accounts.deposit(context.sender, amount);
  }
}

'''
'''--- assembly/models/Accounts.ts ---
import { context, u128 } from 'near-sdk-as';
import { ActiveAccounts, LockedAccounts } from '../constants';

@nearBindgen
export class Accounts {
  static deposit(owner: string, amount: u128): void {
    assert(
      u128.gt(amount, u128.fromU64(0)),
      'Invalid figure! Only figures above zero are accepted.'
    );
    const balance: u128 = Accounts.activeBalance(owner);
    ActiveAccounts.set(owner, u128.add(balance, amount));
  }

  static lock(benefactor: string, beneficiary: string, amount: u128): void {
    const key = benefactor + ':' + beneficiary;
    assert(
      u128.gt(amount, u128.fromU64(0)),
      'Invalid figure! Only figures above zero are accepted.'
    );
    const lBalance: u128 = Accounts.lockedBalance(benefactor, beneficiary);
    const aBalance: u128 = Accounts.activeBalance(benefactor);
    assert(
      u128.ge(aBalance, amount),
      'Insuficient funds! Top up and try again.'
    );
    LockedAccounts.set(key, u128.add(lBalance, amount));
    ActiveAccounts.set(benefactor, u128.sub(aBalance, amount));
  }

  static unlock(benefactor: string, beneficiary: string): void {
    const key = benefactor + ':' + beneficiary;
    const lBalance: u128 = Accounts.lockedBalance(benefactor, beneficiary);
    assert(
      u128.gt(lBalance, u128.fromU64(0)),
      'Insuficient funds to transact!'
    );
    const aBalance: u128 = Accounts.activeBalance(beneficiary);
    ActiveAccounts.set(beneficiary, u128.add(aBalance, lBalance));
    LockedAccounts.delete(key);
  }

  static transfer(benefactor: string, beneficiary: string): void {
    const key = benefactor + ':' + beneficiary;
    const lBalance: u128 = Accounts.lockedBalance(benefactor, beneficiary);
    assert(
      u128.gt(lBalance, u128.fromU64(0)),
      'Insuficient funds to transact!'
    );
    const aBalance: u128 = Accounts.activeBalance(benefactor);
    ActiveAccounts.set(benefactor, u128.add(aBalance, lBalance));
    LockedAccounts.delete(key);
  }

  static activeTransfer(sender: string, recipient: string, amount: u128): void {
    const senderBalance = Accounts.activeBalance(sender);
    assert(u128.ge(senderBalance, amount), 'Insufficient funds!');
    const recipientBalance = Accounts.activeBalance(recipient);
    const intendedSenderBalance = u128.sub(senderBalance, amount);
    const intendedRecipientBalance = u128.add(recipientBalance, amount);
    ActiveAccounts.set(sender, intendedSenderBalance);
    ActiveAccounts.set(recipient, intendedRecipientBalance);
  }

  static activeBalance(owner: string): u128 {
    return <u128>ActiveAccounts.get(owner, u128.fromU64(0));
  }

  static lockedBalance(benefactor: string, beneficiary: string): u128 {
    const key = benefactor + ':' + beneficiary;
    return <u128>LockedAccounts.get(key, u128.fromU64(0));
  }
}

'''
'''--- assembly/models/Cart.ts ---
import { context, logging, u128 } from 'near-sdk-as';
import { Carts, Products } from '../constants';
import { Product } from './Product';
import { ProductOrdered } from './ProductOrdered';

@nearBindgen
export class Cart {
  productsOrdered: ProductOrdered[];
  subTotal: u128;
  shippingFee: u128;
  buyer: string;

  constructor(buyer: string) {
    this.cartInit(buyer);
  }

  addToCart(productId: string, quantity: u64): void {
    assert(
      Products.contains(productId),
      'Invalid product id! Please check and try again.'
    );
    const product: Product = Products.getSome(productId);
    const productOrdered = new ProductOrdered(
      product.getId(),
      product.getPrice(),
      quantity,
      product.getShippingFee()
    );
    this.productsOrdered.push(productOrdered);
    logging.log(product.getName() + ' successfully added.');
    this.setAmountPaid();
    this.updateCart();
  }

  removeFromCart(productId: string): void {
    assert(
      Products.contains(productId),
      'Invalid product id! Please check and try again.'
    );
    const remainingProducts = new Array<ProductOrdered>();
    for (let i = 0; i < this.productsOrdered.length; i++) {
      const pOrdered = this.productsOrdered[i];
      if (pOrdered.getId() != productId) {
        remainingProducts.push(pOrdered);
      }
    }
    assert(
      this.productsOrdered.length != remainingProducts.length,
      'Product not in cart!'
    );
    this.productsOrdered = remainingProducts;
    logging.log('Product successfully removed.');
    this.setAmountPaid();
    this.updateCart();
  }

  getBuyer(): string {
    return this.buyer;
  }

  setBuyer(buyer: string): void {
    this.buyer = buyer;
  }

  private setAmountPaid(): void {
    let newAmount = u128.fromU64(0);
    let newShippingFee = u128.fromU64(0);
    if (this.productsOrdered.length > 0) {
      for (let i = 0; i < this.productsOrdered.length; i++) {
        const pOrdered = this.productsOrdered[i];
        newAmount = u128.add(newAmount, pOrdered.getAmount());
        newShippingFee = u128.add(newShippingFee, pOrdered.getShippingFee());
      }
    }
    this.subTotal = u128.fromU128(newAmount);
    this.shippingFee = u128.fromU128(newShippingFee);
  }

  getSubTotal(): u128 {
    return this.subTotal;
  }

  static setSubTotal(amount: u128): void {
    this.su;
  }

  getShippingFee(): u128 {
    return this.shippingFee;
  }

  getTotalAmount(): u128 {
    return u128.add(this.getSubTotal(), this.getShippingFee());
  }

  getProductsOrdered(): ProductOrdered[] {
    return this.productsOrdered;
  }

  private cartInit(buyer: string): void {
    this.productsOrdered = [];
    this.subTotal = u128.fromU64(0);
    this.shippingFee = u128.fromU64(0);
    this.setBuyer(buyer);
  }

  private updateCart(): void {
    Carts.set(this.getBuyer(), this);
  }
}

'''
'''--- assembly/models/Order.ts ---
import { context } from 'near-sdk-as';
import { Carts, KEY_LENGTH, Orders } from '../constants';
import { generateRandomKey } from '../utils';
import { Cart } from './Cart';

@nearBindgen
export class Order {
  private id: string;
  private delivery: string;
  private cart: Cart;
  private isCleared: bool;
  private isDelivered: bool;

  constructor(delivery: string) {
    this.setId();
    this.setDelivery(delivery);
    this.setCart();
    this.setIsCleared(false);
    this.setIsDelivered(false);
  }

  private setId(): void {
    let flag: bool = false;
    while (flag == false) {
      let id = generateRandomKey(KEY_LENGTH);
      if (!Orders.contains(id)) {
        this.id = id;
        flag = true;
      }
    }
  }

  getId(): string {
    return this.id;
  }

  private setDelivery(id: string): void {
    this.delivery = id;
  }

  getDelivery(): string {
    return this.delivery;
  }

  private setCart(): void {
    this.cart = Carts.getSome(context.sender);
  }

  getCart(): Cart {
    return this.cart;
  }

  setIsCleared(flag: bool): void {
    this.isCleared = flag;
  }

  getIsCleared(): bool {
    return this.isCleared;
  }

  setIsDelivered(flag: bool): void {
    this.isDelivered = flag;
  }

  getIsDelivered(): bool {
    return this.isDelivered;
  }
}

'''
'''--- assembly/models/Product.ts ---
import { u128 } from 'near-sdk-as';
import { KEY_LENGTH, Products } from '../constants';
import { generateRandomKey } from '../utils';

@nearBindgen
export class Product {
  id: string;
  price: u128;
  name: string;
  shippingFee: u128;
  index: u64;

  constructor(index: u64, name: string, price: u128, shippingFee: u64) {
    this.setIndex(index);
    this.setId();
    this.setName(name);
    this.setPrice(price);
    this.setShippingFee(shippingFee);
  }

  getId(): string {
    return this.id;
  }

  getPrice(): u128 {
    return this.price;
  }

  getName(): string {
    return this.name;
  }

  getShippingFee(): u128 {
    return this.shippingFee;
  }

  getIndex(): u64 {
    return this.index;
  }

  private setId(): void {
    let flag: bool = false;
    while (flag == false) {
      let id = generateRandomKey(KEY_LENGTH);
      if (!Products.contains(id)) {
        this.id = id;
        flag = true;
      }
    }
  }

  setName(name: string): void {
    this.name = name;
  }

  setPrice(price: u128): void {
    this.price = price;
  }

  setShippingFee(amount: u64): void {
    this.shippingFee = u128.fromU64(amount);
  }

  setIndex(index: u64): void {
    this.index = index;
  }
}

'''
'''--- assembly/models/ProductId.ts ---
@nearBindgen
export class ProductId {
  ids: string[];

  constructor() {
    this.ids = new Array<string>();
  }

  add(item: string): void {
    this.ids.push(item);
  }

  remove(item: string): void {
    const arr = new Array<string>();
    for (let i = 0; i < this.ids.length; i++) {
      if (this.ids[i] != item) {
        arr.push(this.ids[i]);
      }
    }
    this.ids = arr;
  }

  showIds(): string[] {
    return this.ids;
  }
}

'''
'''--- assembly/models/ProductOrdered.ts ---
import { u128 } from 'near-sdk-as';

@nearBindgen
export class ProductOrdered {
  id: string;
  price: u128;
  quantity: u64;
  shippingFee: u128;
  amount: u128;

  constructor(id: string, price: u128, qty: u64, sFee: u128) {
    this.setId(id);
    this.setPrice(price);
    this.setQuantity(qty);
    this.setShippingFee(sFee);
    this.setAmount();
  }

  private setId(id: string): void {
    this.id = id;
  }

  private setPrice(price: u128): void {
    this.price = price;
  }

  private setQuantity(qty: u64): void {
    this.quantity = qty;
  }

  private setShippingFee(fee: u128): void {
    this.shippingFee = u128.fromU128(fee);
  }

  private setAmount(): void {
    const mul = u128.mul(this.getPrice(), u128.fromU64(this.getQuantity()));
    this.amount = u128.fromU128(mul);
  }

  getId(): string {
    return this.id;
  }

  getPrice(): u128 {
    return this.price;
  }

  getQuantity(): u64 {
    return this.quantity;
  }

  getShippingFee(): u128 {
    return this.shippingFee;
  }

  getAmount(): u128 {
    return this.amount;
  }
}

'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json"
}

'''
'''--- assembly/utils.ts ---
import { base64, math } from 'near-sdk-as';

export function generateRandomKey(len: u32): string {
  let buf = math.randomBuffer(len);
  let b64 = base64.encode(buf);
  return b64.replaceAll('=', '');
}

'''
'''--- package.json ---
{
  "name": "order-system",
  "version": "1.0.0",
  "description": "This is an ecommerce order system employing blockchain concept right from placement of the order to delivery of the product. ",
  "main": "index.js",
  "scripts": {
    "test": "asp",
    "build": "asb"
  },
  "keywords": [
    "blockchain",
    "Near",
    "protocol",
    "ecommerce"
  ],
  "author": "Paul Otieno",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''
'''--- scripts/0.test.sh ---
#!/usr/bin/env bash

yarn test
'''
'''--- scripts/1.build.sh ---
#!/usr/bin/env bash

echo "============================================================"
echo "-----------------BUILDING PROJECT---------------------------"
echo "============================================================="

yarn build

'''
'''--- scripts/2.deploy.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

echo "==========================================================="
echo "------------ Deleting Contract Account Set -------------"
echo "==========================================================="

near delete $CONTRACT_NAME $BENEFICIARY_ACCOUNT_ID

echo "============================================================"
echo "---------- Deleting Contract Account Credentials ----------"
echo "============================================================"

rm $CREDENTIALS_ROOT_DIR/$CONTRACT_NAME.json

echo "============================================================"
echo "-------------------- Creating Contract Account ------------"
echo "============================================================"

near create-account $CONTRACT_NAME --masterAccount $MASTER_ACCOUNT_ID

echo "============================================================="
echo "------------------- Deploying Contract ----------------------"
echo "=============================================================="

near deploy --wasmFile=./build/release/order-system.wasm --contractName=$CONTRACT_NAME --keyPath=$CREDENTIALS_ROOT_DIR/$CONTRACT_NAME.json
'''
'''--- scripts/3.product.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

# Adds a product to the collection
near call $CONTRACT_NAME addProduct '{"name":"HP folio", "price":"50", "sFee":"3"}' --accountId $SELLER_ACCOUNT_ID

# Displays available products
near call $CONTRACT_NAME showProducts --accountId $SELLER_ACCOUNT_ID

# Removes Product of the given id
# Uncomment below to remove product

# near call $CONTRACT_NAME removeProduct "{\"id\": \"$PRODUCT_ID_TO_REMOVE_FROM_COLLECTION\"}" --accountId $SELLER_ACCOUNT_ID

# Displays available products
# near view $CONTRACT_NAME showProducts --accountId $SELLER_ACCOUNT_ID

'''
'''--- scripts/4.cart.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

# Adds the product of the specified Id to the cart with the given quantity

near call $CONTRACT_NAME addToCart "{\"id\": \"$PRODUCT_ID_TO_ADD_TO_CART\", \"qty\":\"$QUANTITY\"}" --accountId $BUYER_ACCOUNT_ID

# Removes from cart the product of the specified id

# near call $CONTRACT_NAME removeFromCart "{\"id\": \"$PRODUCT_ID_TO_REMOVE_FROM_CART\"}" --accountId $BUYER_ACCOUNT_ID

near call $CONTRACT_NAME viewCart --accountId $BUYER_ACCOUNT_ID

'''
'''--- scripts/5.accounts.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

echo "============================================================="
echo "-------------- Seller Active Balance -----------------------"
echo "============================================================="

near call $CONTRACT_NAME myBalance --accountId $SELLER_ACCOUNT_ID

echo "============================================================="
echo "-------------- Buyer Active Balance -----------------------"
echo "============================================================="

near call $CONTRACT_NAME myBalance --accountId $BUYER_ACCOUNT_ID

echo "============================================================="
echo "-------------- Delivery Active Balance -----------------------"
echo "============================================================="

near call $CONTRACT_NAME myBalance --accountId $DELIVERY_ACCOUNT_ID
'''
'''--- scripts/6.order-placement.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

# Deposit Near to buyer's account
near call $CONTRACT_NAME deposit --amount=20 --accountId $BUYER_ACCOUNT_ID

# Checks buyer's account balance
near call $CONTRACT_NAME myBalance --accountId $BUYER_ACCOUNT_ID

# Places Order
near call $CONTRACT_NAME placeOrder "{\"delivery\": \"$DELIVERY_ACCOUNT_ID\"}" --accountId $BUYER_ACCOUNT_ID

# Checks buyer's cart content [should be null]
near call $CONTRACT_NAME viewCart --accountId $BUYER_ACCOUNT_ID

'''
'''--- scripts/7.order-clearance.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

# Depositing Near into delivery account
near call $CONTRACT_NAME deposit --amount=10 --accountId $DELIVERY_ACCOUNT_ID

# Clearing order of the provided order id for shipment.

near call $CONTRACT_NAME clearShipment "{\"orderId\": \"$ORDER_ID\"}" --accountId $DELIVERY_ACCOUNT_ID
'''
'''--- scripts/8.order-delivery.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

# Confirms order delivery
near call $CONTRACT_NAME confirmDelivery "{\"orderId\": \"$ORDER_ID\", \"delivery\":\"$DELIVERY_ACCOUNT_ID\"}" --accountId $BUYER_ACCOUNT_ID 
'''
'''--- scripts/9.order-return.sh ---
#!/usr/bin/env bash

source ./scripts/config.conf

# Confirms order delivery
near call $CONTRACT_NAME confirmReturn "{\"orderId\": \"$ORDER_ID\", \"delivery\":\"$DELIVERY_ACCOUNT_ID\"}" --accountId $SELLER_ACCOUNT_ID 
'''