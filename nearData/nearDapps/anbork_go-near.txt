*GitHub Repository "anbork/go-near"*

'''--- .github/workflows/main.yml ---
name: Build and deploy master
on:
  push:
    branches:
      - master
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v2.3.1

      - name: Install and Build 🔧
        run: |
          yarn install
          yarn build

      - name: Deploy 🚀
        uses: JamesIves/github-pages-deploy-action@4.1.5
        with:
          branch: master
          folder: build
          repository-name: Kikimora-Labs/go-near-name-pages
          ssh-key: ${{ secrets.SSH_KEY_MASTER }}
'''
'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

test.

'''
'''--- package.json ---
{
  "name": "near-bet",
  "version": "0.1.0",
  "private": true,
  "homepage": "https://kikimora-labs.github.io/go-near-name-pages",
  "dependencies": {
    "@types/node": "^12.0.0",
    "@types/react": "^17.0.0",
    "@types/react-dom": "^17.0.0",
    "@types/react-router-dom": "^5.3.1",
    "@types/styled-components": "^5.1.15",
    "moment": "^2.29.1",
    "near-api-js": "^0.43.1",
    "near-seed-phrase": "^0.2.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-moment": "^1.1.1",
    "react-router-dom": "^5.3.0",
    "react-scripts": "4.0.3",
    "react-spinners": "^0.11.0",
    "styled-components": "^5.3.1",
    "styled-normalize": "^8.0.7",
    "swr": "^1.0.1",
    "typescript": "^4.1.2"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject",
    "deploy": "gh-pages -d build",
    "predeploy": "react-scripts build"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <title>Near Bet</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/robots.txt ---
User-agent: *
Disallow: /
'''
'''--- src/assets/fonts/Poppins/OFL.txt ---
Copyright 2020 The Poppins Project Authors (https://github.com/itfoundry/Poppins)

This Font Software is licensed under the SIL Open Font License, Version 1.1.
This license is copied below, and is also available with a FAQ at:
http://scripts.sil.org/OFL

-----------------------------------------------------------
SIL OPEN FONT LICENSE Version 1.1 - 26 February 2007
-----------------------------------------------------------

PREAMBLE
The goals of the Open Font License (OFL) are to stimulate worldwide
development of collaborative font projects, to support the font creation
efforts of academic and linguistic communities, and to provide a free and
open framework in which fonts may be shared and improved in partnership
with others.

The OFL allows the licensed fonts to be used, studied, modified and
redistributed freely as long as they are not sold by themselves. The
fonts, including any derivative works, can be bundled, embedded, 
redistributed and/or sold with any software provided that any reserved
names are not used by derivative works. The fonts and derivatives,
however, cannot be released under any other type of license. The
requirement for fonts to remain under this license does not apply
to any document created using the fonts or their derivatives.

DEFINITIONS
"Font Software" refers to the set of files released by the Copyright
Holder(s) under this license and clearly marked as such. This may
include source files, build scripts and documentation.

"Reserved Font Name" refers to any names specified as such after the
copyright statement(s).

"Original Version" refers to the collection of Font Software components as
distributed by the Copyright Holder(s).

"Modified Version" refers to any derivative made by adding to, deleting,
or substituting -- in part or in whole -- any of the components of the
Original Version, by changing formats or by porting the Font Software to a
new environment.

"Author" refers to any designer, engineer, programmer, technical
writer or other person who contributed to the Font Software.

PERMISSION & CONDITIONS
Permission is hereby granted, free of charge, to any person obtaining
a copy of the Font Software, to use, study, copy, merge, embed, modify,
redistribute, and sell modified and unmodified copies of the Font
Software, subject to the following conditions:

1) Neither the Font Software nor any of its individual components,
in Original or Modified Versions, may be sold by itself.

2) Original or Modified Versions of the Font Software may be bundled,
redistributed and/or sold with any software, provided that each copy
contains the above copyright notice and this license. These can be
included either as stand-alone text files, human-readable headers or
in the appropriate machine-readable metadata fields within text or
binary files as long as those fields can be easily viewed by the user.

3) No Modified Version of the Font Software may use the Reserved Font
Name(s) unless explicit written permission is granted by the corresponding
Copyright Holder. This restriction only applies to the primary font name as
presented to the users.

4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font
Software shall not be used to promote, endorse or advertise any
Modified Version, except to acknowledge the contribution(s) of the
Copyright Holder(s) and the Author(s) or with their explicit written
permission.

5) The Font Software, modified or unmodified, in part or in whole,
must be distributed entirely under this license, and must not be
distributed under any other license. The requirement for fonts to
remain under this license does not apply to any document created
using the Font Software.

TERMINATION
This license becomes null and void if any of the above conditions are
not met.

DISCLAIMER
THE FONT SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT
OF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE
COPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
INCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL
DAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
FROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM
OTHER DEALINGS IN THE FONT SOFTWARE.

'''
'''--- src/assets/images/light.svg ---
<svg width="500" height="500" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
    <ellipse cx="250" cy="250" rx="250" ry="250" fill="url(#gradient)" />
    <defs>
        <radialGradient id="gradient">
            <stop offset="0%" stop-color="#FFFFFF" stop-opacity="0.06" />
            <stop offset="100%" stop-color="#FFFFFF" stop-opacity="0" />
        </radialGradient>
    </defs>
</svg>

'''
'''--- src/helpers/api.ts ---
import { Near, Account, Contract, utils } from 'near-api-js'
import { ExtendWalletConnection } from 'helpers/walletConnection'
import { mapBidInfo, mapProfile, mapStats, IBid, IProfile, IBidSafety, IStat } from 'helpers/mappers'
import { config } from './config'

export const fromNear = (amount: string): number => parseFloat(utils.format.formatNearAmount(amount || '0'))
export const toYoctoNear = (amount: number): string => utils.format.parseNearAmount(String(amount)) || '0'

export interface NearContract extends Contract {
  bet?(params: { bid_id: string }, gas: string, amount: string): void
  claim?(params: { bid_id: string }, gas: string, amount: string): void
  finalize?(params: { bid_id: string }, gas: string, amount: string): void
  get_bid?(params: { bid_id: string }): any
  acquire?(params: { bid_id: string, new_public_key: string }, gas: string, amount: string): void
  get_profile?(params: { profile_id: string }): any
  get_global_stats?(): any
  get_top_bets?(params: { from_key: string | null, limit: number }): [string, string][]
  get_top_claims?(params: { from_key: string | null, limit: number }): [string, string][]
  offer?(params: { profile_id: string }, gas: string, amount: string): boolean
  collect_rewards?(params: object, gas: string, amount: string): void
}

class NearApi {
  readonly near: Near;
  readonly contract: NearContract;
  readonly walletConnection: ExtendWalletConnection;

  constructor(near: Near) {
    this.near = near;
    this.walletConnection = new ExtendWalletConnection(near, config.contractName)
    this.contract = this.getContract(this.walletConnection.account())
  }

  getContract(account: Account): NearContract {
    return new Contract(account, config.contractName, {
      viewMethods: [
        'get_profile',
        'get_bid',
        'get_top_bets',
        'get_top_claims',
        'get_global_stats'
      ],
      changeMethods: [
        'offer',
        'bet',
        'claim',
        'finalize',
        'acquire',
        'collect_rewards'
      ]
    })
  }

  signIn(): void {
    let successUrl = window.location.href
    if (window.location.hash.indexOf('offer-processing') >= 0) {
      successUrl = window.location.origin
    }
    this.walletConnection.requestSignIn(config.contractName, undefined, successUrl)
  }

  signOut(): void {
    this.walletConnection.signOut()
  }

  async get_account_id(): Promise<string> {
    return await this.walletConnection.getAccountId()
  }

  async account(bid_id: string): Promise<Account> {
    return await this.near.account(bid_id)
  }

  async get_balance(bid_id: string): Promise<number | null> {
    const account = await this.account(bid_id)
    let balance = null
    try {
      const b = await account.getAccountBalance()
      balance = fromNear(b.total)
    } catch (e) {
      console.error('Account not exist')
    }
    return balance
  }

  async bet(bid_id: string, amount: number): Promise<void> {
    await this.contract.bet?.({ bid_id }, '200000000000000', toYoctoNear(amount))
  }

  async claim(bid_id: string, amount: number): Promise<void> {
    await this.contract.claim?.({ bid_id }, '200000000000000', toYoctoNear(amount))
  }

  async finalize(bid_id: string): Promise<void> {
    await this.contract.finalize?.({ bid_id }, '200000000000000', '0')
  }

  async get_bid(bid_id: string): Promise<IBid> {
    let bid = await this.contract.get_bid?.({ bid_id })
    if (bid) bid = mapBidInfo({ id: bid_id, ...bid })
    return bid
  }

  async get_bid_safety(bid_id: string): Promise<IBidSafety> {
    const account = await this.account(bid_id)
    try {
      const codeHash = (await account.state()).code_hash
      const accessKeysLen = (await account.getAccessKeys()).length
      const lockerContract: any = await new Contract(account, bid_id, {
        viewMethods: ['get_owner'],
        changeMethods: []
      })
      const lockerOwner = await lockerContract.get_owner({})
      const balance = (await account.getAccountBalance()).total
      return { codeHash, accessKeysLen, lockerOwner, balance: fromNear(balance) }
    } catch (e) {
      console.log('check safety error', e)
    }
    return { codeHash: '(unknown)', accessKeysLen: '(unknown)', lockerOwner: '(not found)', balance: 0 }
  }

  async acquire(bid_id: string, new_public_key: string ): Promise<void> {
    await this.contract.acquire?.({ bid_id, new_public_key }, '200000000000000', '0')
  }

  async collect_rewards(): Promise<void> {
    await this.contract.collect_rewards?.({}, '200000000000000', '0')
  }

  async get_profile(profile_id: string | null): Promise<IProfile> {
    const profile = profile_id ? await this.contract.get_profile?.({ profile_id }) : null
    return mapProfile(profile)
  }

  async get_global_stats(): Promise<IStat> {
    return mapStats(await this.contract.get_global_stats?.())
  }

  async get_top_bets(from_key: string | null, limit: number): Promise<[string, string][]> {
    if (!this.contract.get_top_bets) return []
    return await this.contract.get_top_bets?.({ from_key, limit })
  }

  async get_top_claims(from_key: string | null, limit: number): Promise<[string, string][]> {
    if (!this.contract.get_top_claims) return []
    return await this.contract.get_top_claims?.({ from_key, limit })
  }

  async addFullAccessKey({ account_id, successUrl, failureUrl }: { account_id: string, successUrl?: string, failureUrl?: string }): Promise<void> {
    const walletConnection = new ExtendWalletConnection(this.near, config.contractName)
    await walletConnection.addFullAccessKey(account_id, successUrl, failureUrl)
  }

  async deleteAllKeys(offer: string, deleteLastKey?: boolean): Promise<void> {
    const account = await this.near.account(offer)
    const accessKeys = await account.getAccessKeys()
    const currentKey = (await account.connection.signer.getPublicKey(offer, config.networkId)).toString()
    for (let index = 0; index < accessKeys.length; index++) {
      const { public_key } = accessKeys[index]
      if (currentKey === public_key) continue
      await account.deleteKey(public_key)
    }
    if (deleteLastKey) await account.deleteKey(currentKey)
  }

  async offer(offer: string, beneficiar: string): Promise<void> {
    const account = await this.near.account(offer)
    const contract = this.getContract(account)
    try {
      await contract.offer?.({ profile_id: beneficiar }, '200000000000000', toYoctoNear(0.3))
    } catch (e) {
      console.error(e)
    }
  }

  async createContract(accountId: string): Promise<void> {
    const account = await this.near.account(accountId);
    const data = await fetch(config.wasmCode)
    const buf = await data.arrayBuffer()
    await account.deployContract(new Uint8Array(buf))

  }

  async lockContract(accountId: string): Promise<void> {
    const account = await this.near.account(accountId);
    const contract: any = await new Contract(account, accountId, {
      viewMethods: [],
      changeMethods: ['lock']
    })
    await contract.lock(Buffer.from('{"owner_id":"' + config.contractName + '"}'))

  }

  async addMarketKeyToAccount(accountId: string): Promise<void> {
    const account = await this.near.account(accountId);
    try {
      await account.addKey(config.marketPublicKey, accountId);
    } catch(e) {
      console.error(e);
    }
  }

  deleteKeyFromLocalStorage(accountId: string): void {
    this.walletConnection._keyStore.removeKey(config.networkId, accountId)
  }
}

export default NearApi
'''
'''--- src/helpers/config.ts ---
export interface INearConfig {
  accountSuffix: string,
  networkId: string,
  nodeUrl: string,
  contractName: string,
  walletUrl: string,
  marketPublicKey: string,
  wasmCode: string,
  claimPeriod: number
}

export const config = getConfig()

function getConfig(): INearConfig {
  const env = process.env.REACT_APP_ENVIRONMENT || 'development';
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        accountSuffix: 'near',
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: 'c.nearbet.near',
        walletUrl: 'https://wallet.near.org',
        marketPublicKey: 'ed25519:5mgNVstFy67S469tG2j8MjRchPuKqJFYsydghKRteR42',
        wasmCode: 'https://near.bet/bin',
        claimPeriod: 72 * 60 * 60
      }
    case 'development':
    case 'testnet':
    default:
      return {
        accountSuffix: 'testnet',
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: 'dev-1616355537428-9726228',
        walletUrl: 'https://wallet.testnet.near.org',
        marketPublicKey: 'ed25519:EgmA4v9E2SjFVu31bmJKJtNW6cjkx2cbM3HyXprsYvrA',
        wasmCode: 'https://near.bet/bin',
        claimPeriod: 15 * 60
      }
  }
}

'''
'''--- src/helpers/hooks.ts ---
import {useEffect} from 'react'

export const useTopScroll = () => {
  useEffect(() => {
    window.scrollTo(0, 0)
  }, [])
}

'''
'''--- src/helpers/mappers.ts ---
import { fromNear } from 'helpers/api'

export interface IStat {
  numProfiles: number;
  numBids: number;
  numBidsOnClaim: number;
  totalCommission: number;
  numOffers: number;
  numBets: number;
  numClaims: number;
  numAcquisitions: number;
}

export const mapStats = (s: any[]): IStat => {
  return {
    numProfiles: s[0],
    numBids: s[1],
    numBidsOnClaim: s[2],
    totalCommission: fromNear(s[3]),
    numOffers: s[4],
    numBets: s[5],
    numClaims: s[6],
    numAcquisitions: s[7]
  }
}

export interface IBid {
  id: string;
  isAtMarket: boolean;
  numClaims: number;
  claimedBy: string | null;
  claimedTime: number;
  bets: string[] | null;
  betPrice: number;
  claimPrice: number;
  forfeit: number;
  isOnAcquisition: boolean;
}

export const mapBidInfo = (b: any): IBid => {
  return b && b.bet_price ? {
    id: b.id,
    isAtMarket: true,
    numClaims: b.num_claims,
    claimedBy: b.claim_status ? b.claim_status[0] : null,
    claimedTime: b.claim_status ? parseInt(b.claim_status[1]) / 1000000 : 0,
    bets: b.bets,
    betPrice: fromNear(b.bet_price),
    claimPrice: fromNear(b.claim_price),
    forfeit: fromNear(b.forfeit),
    isOnAcquisition: b.on_acquisition
  } : {
    id: b.id || '',
    isAtMarket: false,
    numClaims: 0,
    claimedBy: null,
    claimedTime: 0,
    bets: null,
    betPrice: 0,
    claimPrice: 0,
    forfeit: 0,
    isOnAcquisition: false
  }
}

export interface IProfile {
  participation: string[];
  acquisitions: string[];
  betsVolume: number;
  availableRewards: number;
  profitTaken: number;
  numOffers: number;
  numBets: number;
  numClaims: number;
  numAcquisitions: number;
}

export const mapProfile = (p: any): IProfile => {
  return p ? ({
    participation: p.participation,
    acquisitions: p.acquisitions,
    betsVolume: fromNear(p.bets_volume),
    availableRewards: fromNear(p.available_rewards),
    profitTaken: fromNear(p.profit_taken),
    numOffers: p.num_offers,
    numBets: p.num_bets,
    numClaims: p.num_claims,
    numAcquisitions: p.num_acquisitions
  }) : ({
    participation: [],
    acquisitions: [],
    betsVolume: fromNear('0'),
    availableRewards: fromNear('0'),
    profitTaken: fromNear('0'),
    numOffers: 0,
    numBets: 0,
    numClaims: 0,
    numAcquisitions: 0
  })
}

export interface IBidSafety {
  codeHash: string;
  accessKeysLen: any;
  lockerOwner: any;
  balance: number;
}
'''
'''--- src/helpers/media.ts ---
export const
  break_up = '1000px',
  break_down = '999px'

'''
'''--- src/helpers/near.ts ---

import * as nearAPI from 'near-api-js'
import { createContext } from 'react';
import { config, INearConfig } from './config'
import NearApi from './api'
const nearSeedPhrase = require('near-seed-phrase')

export const { generateSeedPhrase, parseSeedPhrase } = nearSeedPhrase

export interface INearProps {
  connected: boolean;
  api: NearApi;
  config: INearConfig;
  signedIn: boolean;
  signedAccountId: string | null;
}

export const NearContext = createContext<any>(null);

export const connectNear = async (): Promise<INearProps> => {
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore()
  const near = await nearAPI.connect(Object.assign({ deps: { keyStore } }, config))
  const api = new NearApi(near)

  return {
    connected: true,
    config: config,
    api: api,
    signedIn: false,
    signedAccountId: null
  }
}

'''
'''--- src/helpers/routes.ts ---
import {useState, useEffect} from 'react'
import {useLocation, useHistory} from 'react-router-dom'

export interface CheckState {
  isMarket: boolean;
  isOffer: boolean;
  isRules: boolean;
  isProfile: boolean;
}

const checkState: CheckState = {
  isMarket: false,
  isOffer: false,
  isRules: false,
  isProfile: false
}

const market = ['/', '/market']

export const useRouteCheck = (): CheckState => {
  const [check, setCheck] = useState<CheckState>(checkState)
  const location = useLocation()
  
  useEffect(() => {
    const {pathname} = location
    const state: CheckState = {
      isMarket: market.includes(pathname) || pathname.indexOf('/bid') >= 0,
      isOffer: pathname.indexOf('/offer') >= 0,
      isRules: pathname === '/rules',
      isProfile: pathname === '/profile'
    }
    setCheck(state)
  }, [location])
  return check
}

const hideScroll = (open: boolean) =>
  document.body.style.overflowY = open ? 'hidden' : 'auto'

export const useOpen = (): [boolean, (_: boolean) => void] => {
  const [open, setOpen] = useState<boolean>(false)

  useEffect(() => {
    hideScroll(open)
  }, [open])
  return [open, setOpen]
}

export const useToBid = (bidId: string) => {
  const history = useHistory()
  
  return () => {
    history.push(`/bid/${bidId}`)
  }
}

export const useToProfile = (accountId?: string) => {
  const history = useHistory()
  
  return () => {
    if (accountId) {
      history.push(`/profile/${accountId}`)
    } else {
      history.push(`/profile`)
    }
    
  }
}

export const useToAcquire = (bidId: string) => {
  const history = useHistory()

  return () => {
    history.push(`/acquire/${bidId}`)
  }
}

export const useToMarket = () => {
  const history = useHistory()
  
  return () => {
    history.push(`/`)
  }
}

'''
'''--- src/helpers/walletConnection.ts ---
import { WalletConnection, utils } from 'near-api-js'
const LOGIN_WALLET_URL_SUFFIX = '/login/'

export class ExtendWalletConnection extends WalletConnection {
  async addFullAccessKey(accountId: string, successUrl?: string, failureUrl?: string): Promise<void> {
    const currentUrl = new URL(window.location.href);
    const newUrl = new URL(this._walletBaseUrl + LOGIN_WALLET_URL_SUFFIX);
    newUrl.searchParams.set('success_url', successUrl || currentUrl.href);
    newUrl.searchParams.set('failure_url', failureUrl || currentUrl.href);
    newUrl.searchParams.set('contract_id', '');
    const accessKey = utils.KeyPair.fromRandom('ed25519');
    const publicKey = accessKey.getPublicKey().toString();
    newUrl.searchParams.set('public_key', publicKey);
    await this._keyStore.setKey(this._networkId, accountId, accessKey);
    window.location.assign(newUrl.toString());
  }
}

'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "baseUrl": "src",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src"
  ]
}

'''