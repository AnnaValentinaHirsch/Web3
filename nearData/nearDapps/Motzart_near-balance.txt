*GitHub Repository "Motzart/near-balance"*

'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `yarn start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in the browser.

The page will reload if you make edits.\
You will also see any lint errors in the console.

### `yarn test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `yarn build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `yarn eject`

**Note: this is a one-way operation. Once you `eject`, you can’t go back!**

If you aren’t satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you’re on your own.

You don’t have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn’t feel obligated to use this feature. However we understand that this tool wouldn’t be useful if you couldn’t customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

'''
'''--- declaration.d.ts ---
declare module '*.scss' {
  const content: Record<string, string>;
  export default content;
}

declare module "*.svg" {
  const img: any;
  export = img;
}

'''
'''--- package.json ---
{
  "name": "app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.14.1",
    "@testing-library/react": "^12.0.0",
    "@testing-library/user-event": "^13.2.1",
    "bn.js": "^5.2.0",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-router-dom": "^6.2.2",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.0",
    "parcel": "^2.3.2"
  },
  "scripts": {
    "start": "parcel src/index.html",
    "build": "parcel build src/index.html",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/core": "^7.17.5",
    "@babel/preset-env": "^7.16.11",
    "@babel/preset-react": "^7.16.7",
    "@babel/preset-typescript": "^7.16.7",
    "@types/bn.js": "^5.1.0",
    "@types/jest": "^27.4.1",
    "@types/node": "^17.0.21",
    "@types/react": "^17.0.39",
    "@types/react-dom": "^17.0.13",
    "@types/react-router-dom": "^5.3.3",
    "typescript": "^4.5.5",
    "typescript-plugin-css-modules": "3.4.0",
    "buffer": "^6.0.3",
    "parcel-bundler": "^1.12.5",
    "postcss-modules": "1.4.1",
    "autoprefixer": "9.6.1",
    "sass": "^1.49.9"
  },
  "postcss": {
    "modules": true,
    "plugins": {
      "autoprefixer": {
        "grid": true
      }
    }
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <title>Near balance App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/config.ts ---
const defaultEnv = process.env.NEAR_ENV || 'testnet';

export default function getConfig(env: string = defaultEnv) {
  switch (env) {
    case 'mainnet':
      return  {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
        LOCKUP_CONTRACT_ID: 'lockup.pembrock.near',
        TOKEN_CONTRACT_ID: 'token.pembrock.near',
        USER_ACCOUNTS: [
          'yaigor.near',
          'valeriiya.near',
          'dimidar.near',
          'olhamin.near',
          'dashamin.near',
          'elainili.near',
          'evamama.near',
          'ivannili.near',
          'urahan.near',
          'jazzmini.near',
          'beornottobe.near',
          'oyaniuk-pem.near',
          'lp.pembrock.near',
          'pembrock.near',
          'treasury.pembrock.near',
          'token.pembrock.near',
          'ido.pembrock.near',
          'pembrock-ido.near',
          'lockup.pembrock.near',
          'pembrock-lp.near',
          'dao.pembrock.near',
          'labs.pembrock.near',
          'lp-incent.pembrock.near',
          'lockup-lp.pembrock.near',
        ],
        headers: {}
      }
    default:
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
        TOKEN_CONTRACT_ID: 'token.pembrock.testnet',
        USER_ACCOUNTS: [
          'motzart2.testnet',
        ],
        headers: {}
      }
  }
}

'''
'''--- src/hooks/useSortableData.ts ---
import { useMemo, useState } from 'react';

type SortConfig = {
  key: string;
  direction: string | undefined;
} | null;

export const useSortableData = (items: any[], config: SortConfig = null) => {
  const [sortConfig, setSortConfig] = useState(config);

  const sortedItems = useMemo(() => {
    let sortableItems = [...items];
    if (sortConfig !== null) {
      sortableItems.sort((a, b) => {
        if (+a[sortConfig.key] < +b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (+a[sortConfig.key] > +b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }
    return sortableItems;
  }, [items, sortConfig]);

  const requestSort = (key: string) => {
    let direction = 'ascending';
    if (
      sortConfig &&
      sortConfig.key === key &&
      sortConfig.direction === 'ascending'
    ) {
      direction = 'descending';
    }
    setSortConfig({ key, direction });
  };

  return { items: sortedItems, requestSort, sortConfig };
};

'''
'''--- src/hooks/useUsersBalance.ts ---
import { useEffect, useState } from 'react';
import { getUsersBalance } from '~state/user';

export interface UserLockupsView {
  account_id: string,
  schedule: [],
  claimed_balance: string,
  termination_config: null,
  timestamp: number,
  total_balance: string,
  unclaimed_balance: string,
}

export const useUsersBalance = () => {
  const [usersBalance, setUsersBalance] = useState<any>();

  useEffect(() => {
    getUsersBalance()
      .then((data: any) => {
        return setUsersBalance(data);
      })
      .catch(() => setUsersBalance([]));
  }, []);

  return usersBalance;
};

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <link
    rel="stylesheet"
    href="../src/assets/styles/index.scss"
    type="text/css"
  />
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.ico" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"
    />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="balance Data" />
    <link rel="apple-touch-icon" href="./assets/logo192.png" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css"
    />
    <link rel="stylesheet" href="/assets/styles/index.scss" />
    <title>Balance Data</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.tsx"></script>
  </body>
</html>

'''
'''--- src/services/NearWallet.ts ---
import { baseDecode } from 'borsh';
import { ConnectedWalletAccount, WalletConnection } from 'near-api-js';
import { Action, createTransaction } from 'near-api-js/lib/transaction';
import { PublicKey } from 'near-api-js/lib/utils';

export default class NearWallet extends WalletConnection {
  _connectedAccount: SpecialWalletAccount;

  account() {
    if (!this._connectedAccount) {
      this._connectedAccount = new SpecialWalletAccount(
        this,
        this._near.connection,
        this._authData.accountId
      );
    }
    return this._connectedAccount;
  }

  createTransaction({
    receiverId,
    actions,
    nonceOffset = 1,
  }: {
    receiverId: string;
    actions: Action[];
    nonceOffset?: number;
  }) {
    return this._connectedAccount.createTransaction({
      receiverId,
      actions,
      nonceOffset,
    });
  }
}

class SpecialWalletAccount extends ConnectedWalletAccount {
  async sendTransactionWithActions(receiverId: string, actions: Action[]) {
    return this.signAndSendTransaction(receiverId, actions);
  }

  async createTransaction({
    receiverId,
    actions,
    nonceOffset = 1,
  }: {
    receiverId: string;
    actions: Action[];
    nonceOffset?: number;
  }) {
    const localKey = await this.connection.signer.getPublicKey(
      this.accountId,
      this.connection.networkId
    );
    let accessKey = await this.accessKeyForTransaction(
      receiverId,
      actions,
      localKey
    );
    if (!accessKey) {
      throw new Error(
        `Cannot find matching key for transaction sent to ${receiverId}`
      );
    }

    const block = await this.connection.provider.block({ finality: 'final' });
    const blockHash = baseDecode(block.header.hash);

    const publicKey = PublicKey.from(accessKey.public_key);
    const nonce = accessKey.access_key.nonce + nonceOffset;

    return createTransaction(
      this.accountId,
      publicKey,
      receiverId,
      nonce,
      actions,
      blockHash
    );
  }
}

'''
'''--- src/services/account.ts ---
import { wallet } from '~utils/near-utils';
import { ftViewFunction } from '~services/ft-contract';

export interface AccountStorageView {
  total: string;
  available: string;
}

export const currentStorageBalance = (): Promise<AccountStorageView> => {
  return ftViewFunction({
    methodName: 'storage_balance_of',
    args: { account_id: wallet.getAccountId() },
  });
};

'''
'''--- src/services/api.ts ---

'''
'''--- src/services/ft-contract.ts ---
import { wallet } from '~utils/near-utils';
import getConfig from '~config';

const config = getConfig();

const TOKEN_CONTRACT_ID = config.TOKEN_CONTRACT_ID;

export interface IViewFunctionOptions {
  methodName: string;
  args?: object;
}

export interface IFunctionCallOptions extends IViewFunctionOptions {
  gas?: string;
  amount?: string;
}

export const ftViewFunction = ({
  methodName,
  args
}: IFunctionCallOptions ) => {
  return wallet.account().viewFunction(TOKEN_CONTRACT_ID, methodName, args);
};

export const ftGetBalance = (accountId: string) => {
  return ftViewFunction({
    methodName: 'ft_balance_of',
    args: { account_id: accountId },
  }).catch((e) => console.log('ERROR', e));
};

'''
'''--- src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/state/app.ts ---
import { State } from '~utils/state';
import { initNear } from './near';

export interface IInitialState {
  app: Object,
  near: Object,
  views: Object
}

const initialState: IInitialState = {
  app: {
    loading: true,
    mounted: false,
  },
  near: {
    initialized: false,
    account: false,
  },
  views: {
  }
};

export const { appStore, AppProvider } = State(initialState, 'app');

export const onAppMount = () => async ({ update, dispatch }) => {
  update('app', { mounted: true });
  dispatch(initNear());
};

'''
'''--- src/state/near.ts ---
import * as nearAPI from 'near-api-js';
import { wallet, near } from '~utils/near-utils';

export const {
  utils: {
    format: {
      formatNearAmount,
    }
  }
} = nearAPI;

type Store = {
  update: Function,
  dispatch: Function,
  state: Object
}

type InitNear = {
  near: Object,
  wallet: Object,
  account: Object
}

export const initNear = () => async ({ update }: Store): Promise<InitNear> => {
  console.log('initNear');

  wallet.signIn = () => wallet.requestSignIn();
  const signOut = wallet.signOut;

  wallet.signOut = () => {
    signOut.call(wallet);
    update('wallet.signedIn', false);
    update('', { account: null });
  };

  wallet.signedIn = wallet.isSignedIn();

  let account;

  if (wallet.signedIn) {
    account = wallet.account();
    wallet.balance = formatNearAmount((await wallet.account().getAccountBalance()).available, 4);
    await update('', { near, wallet, account });
  } else {
    await update('', { near, wallet });
  }

  return { near, wallet, account };
};

'''
'''--- src/state/user.ts ---
import getConfig from '~config';
import { ftGetBalance } from '~services/ft-contract';

const config = getConfig();

const USER_ACCOUNTS = config.USER_ACCOUNTS;

export const getUsersBalance = async () => {
  const tasks = USER_ACCOUNTS.map(async(userId) => {
    return {
      userId,
      balance: await ftGetBalance(userId)
    }
  })
  return Promise.all(tasks);
}

'''
'''--- src/utils/near-utils.ts ---
import { Near, keyStores } from 'near-api-js';
import NearWallet from '~services/NearWallet';

import getConfig from '../config';
const config = getConfig();

export const near = new Near({
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  ...config,
});

export const wallet = new NearWallet(near, 'vesting-app');

'''
'''--- src/utils/numbers.ts ---
export const separation = (num: number | string) => {
  if (typeof(num) === 'string') {
     return Number(num).toLocaleString('ru')
  }
  return num.toLocaleString('ru');
}

export const toReadableNumber = (
  decimals: number,
  number: string = '0'
): string => {
  if (!decimals) return number;

  const wholeStr = number.substring(0, number.length - decimals) || '0';
  const fractionStr = number
    .substring(number.length - decimals)
    .padStart(decimals, '0')
    .substring(0, decimals);

  return `${wholeStr}.${fractionStr}`.replace(/\.?0+$/, '');
};

export const toPrecision = (
  number: string,
  precision: number,
  withCommas: boolean = false,
  atLeastOne: boolean = true
): string => {
  const [whole, decimal = ''] = number.split('.');

  let str = `${withCommas ? formatWithCommas(whole) : whole}.${decimal.slice(
    0,
    precision
  )}`.replace(/\.$/, '');
  if (atLeastOne && Number(str) === 0 && str.length > 1) {
    var n = str.lastIndexOf('0');
    str = str.slice(0, n) + str.slice(n).replace('0', '1');
  }

  return str;
};

export function formatWithCommas(value: string): string {
  const pattern = /(-?\d+)(\d{3})/;
  while (pattern.test(value)) {
    value = value.replace(pattern, '$1,$2');
  }
  return value;
}

'''
'''--- src/utils/time.ts ---
export const formattedTime = (timestamp: number) => {
  const date = new Date(timestamp * 1000);
  const hours = date.getHours();
  const minutes = "0" + date.getMinutes();
  const seconds = "0" + date.getSeconds();
  return  hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "baseUrl": "./src",
    "paths": {
      "~*": ["./*"]
    },
    "plugins": [{ "name": "typescript-plugin-css-modules" }],
    "noEmit": true,
    "target": "es6",
    "lib": ["ES2020", "DOM"],
    "module": "commonjs",
    "noImplicitAny": true,
    "removeComments": true,
    "preserveConstEnums": true,
    "esModuleInterop": true,
    "jsx": "react",
    "moduleResolution": "Node",
    "sourceMap": true,
    "forceConsistentCasingInFileNames": true,
    "downlevelIteration": true,
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "suppressImplicitAnyIndexErrors": true,
    "declaration": true
  },
  "include": ["src/", "./declaration.d.ts"],
  "exclude": ["node_modules", "**/*.spec.ts", "src/index.tsx"]
}

'''