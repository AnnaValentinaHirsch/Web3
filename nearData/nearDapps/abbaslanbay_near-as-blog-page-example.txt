*GitHub Repository "abbaslanbay/near-as-blog-page-example"*

'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports')

'''
'''--- frontend/public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Near Blog Page</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- frontend/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/src/App.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import PropTypes from 'prop-types';
import Header from './components/Header';
import { Container,Row,Col } from 'react-bootstrap';
import CreateBlog from './Views/Blog/CreateBLog';
import ViewBlog from './Views/Blog/View';

const App = ({ contract, currentUser, nearConfig, wallet }) => {

  return (
    <>

      <Header currentUser={currentUser} wallet={wallet} nearConfig={nearConfig}/>
      <Container>
        <Row>
          <Col md={3}>
            <CreateBlog contract={contract}  currentUser={currentUser}/>
          </Col>
          <Col md={9}>
          <ViewBlog contract={contract}  currentUser={currentUser}/>
          </Col>
        </Row>
      </Container>
    </>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    createBlog: PropTypes.func.isRequired,
    getAll: PropTypes.func.isRequired,
    del: PropTypes.func.isRequired,
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired
  }).isRequired
};

export default App;
'''
'''--- frontend/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- frontend/src/Views/Blog/CreateBLog.js ---
import 'regenerator-runtime/runtime';
import React,{useState} from 'react';
import {Form,Button} from 'react-bootstrap';

const CreateBlog = ({contract, currentUser }) => {
   

      const [title, setTitle] = useState("");
      const [url, setUrl] = useState("");
      const [desc, setDesc] = useState("");
      const [loading, setLoading] = useState(false);

      const handleSubmit =async  (event) => {
        event.preventDefault();

          if(!currentUser){
              alert("Please Login");
              return false;
            }
        setLoading(true);
        if(title == "" && url == "" && desc == ""){
            alert("Please all filled are required");
            setLoading(false);
            return false;
        }

        console.log(currentUser)
        console.log({ title,url,desc,author:currentUser.accountId })
        const todo = await contract.createBlog({ title,url,desc,author:currentUser.accountId });
        setTitle("")
        setUrl("")
        setDesc("")
        setLoading(false);
        console.log(todo)
      };
     
  return (
    <>
   <Form onSubmit={handleSubmit} >
        <Form.Group className="mb-3" >
            <Form.Label>Title</Form.Label>
            <Form.Control type="text"
             name="title"
             onChange={ (event) => setTitle(event.target.value) }
             value={title}
            placeholder="Title" />
        </Form.Group>
        <Form.Group className="mb-3" >
            <Form.Label>Image URL</Form.Label>
            <Form.Control type="url" placeholder="Image"
             name="url"
             onChange={ (event) => setUrl(event.target.value) }
             value={url}
            />
        </Form.Group>
        <Form.Group className="mb-3" >
            <Form.Label>Description</Form.Label>
            <Form.Control as="textarea" rows={3} 
             name="desc"
             onChange={ (event) => setDesc(event.target.value) }
             value={desc}
            />
        </Form.Group>
        <Button variant="primary" type="submit" disabled={loading}>
            Submit
        </Button>
    </Form>
    </>
  );
};

export default CreateBlog;
'''
'''--- frontend/src/Views/Blog/View.js ---
import 'regenerator-runtime/runtime';
import React,{useState,useEffect} from 'react';
import {Row} from 'react-bootstrap';
import BlogItem from '../../components/Item';

const ViewBlog = ({ contract, currentUser}) => {
   const limit = 10;
   let num;

    const [getAllBlogs,setBlogs] = useState([]);
    const [page,setPage] = useState(1);

    useEffect(() => {
        if(page < 1){
            setPage(1);
            num = 0;
        }else{
            num = (page - 1)* limit
        }
        const checkSetInterval = setInterval(() => {
            getBlogs()
        }, 1000);
    return () => clearInterval(checkSetInterval);

     
    }, [page, contract])

    const getBlogs = () => {
        contract.getAll({ offset:num, limit: limit })
        .then((arr) => {
            setBlogs(arr)
        });
    }
  return (
    <>
    <Row>
        {getAllBlogs.map((item,index) => {
                return( <BlogItem key={index} item={item} contract={contract} currentUser={currentUser} />)
            })
        }
    </Row>
    </>
  );
};

export default ViewBlog;
'''
'''--- frontend/src/components/Header.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import {Navbar,Container,Nav,Button} from 'react-bootstrap';

const Header = ({ currentUser,nearConfig, wallet }) => {
    const login = () => {
        wallet.requestSignIn(
          nearConfig.contractName,
          'Blog List'
        );
      };
    
      const logout = () => {
        wallet.signOut();
        window.location.replace(window.location.origin + window.location.pathname);
      };
  return (
    <>
     <Navbar bg="light" expand="lg">
        <Container >
            <Navbar.Brand href="#">
            <svg height="20" viewBox="0 0 76 20" width="76" xmlns="http://www.w3.org/2000/svg" fill="currentColor">
                <path d="m38.0449 4.17778v11.66662c0 .0889-.0666.1778-.1777.1778h-1.2223c-.5555 0-1.0888-.2889-1.4-.7555l-5.5111-8.51114.1778 4.24444v4.8667c0 .0889-.0667.1777-.1778.1777h-1.6c-.0889 0-.1777-.0666-.1777-.1777v-11.68892c0-.08889.0666-.17778.1777-.17778h1.2c.5556 0 1.0889.28889 1.4.75556l5.5111 8.48884-.1777-4.2444v-4.82222c0-.08889.0666-.17778.1777-.17778h1.6c.1334 0 .2.06667.2.17778z"></path>
                <path d="m54.444 16h-1.6889c-.1111 0-.2-.1111-.1555-.2222l4.4889-11.62224c.0444-.08889.1333-.15556.2222-.15556h2.1333c.1111 0 .2.06667.2223.15556l4.5111 11.62224c.0444.1111-.0445.2222-.1556.2222h-1.6889c-.0666 0-.1333-.0444-.1555-.1111l-3.6223-9.55557c-.0444-.13333-.2666-.13333-.3111 0l-3.6222 9.55557c-.0444.0667-.1111.1111-.1778.1111z"></path>
                <path d="m75.9557 15.7333-3.3778-4.3111c1.9111-.3555 3.0222-1.64442 3.0222-3.6222 0-2.26667-1.4667-3.8-4.0889-3.8h-4.7111c-.1333 0-.2444.11111-.2444.24444 0 .88889.7111 1.6 1.6 1.6h3.1777c1.5778 0 2.3334.8 2.3334 1.97778s-.7334 1.97778-2.3334 1.97778h-4.4889c-.1333 0-.2444.11111-.2444.2444v5.7778c0 .0889.0667.1778.1778.1778h1.6c.0889 0 .1778-.0667.1778-.1778v-4.2889h1.8444l2.9333 3.8223c.3111.4222.8.6444 1.3334.6444h1.2222c.0889 0 .1555-.1556.0667-.2667z"></path>
                <path d="m49.3776 4h-7.4444c-.1334 0-.2223.08889-.2223.22222 0 .88889.7334 1.62222 1.6223 1.62222h6.0444c.0889 0 .1778-.06666.1778-.17777v-1.51111c-.0222-.08889-.0889-.15556-.1778-.15556zm0 10.1556h-5.5555c-.0889 0-.1778-.0667-.1778-.1778v-3c0-.0889.0666-.1778.1778-.1778h5.1333c.0889 0 .1778-.0667.1778-.1778v-1.51109c0-.08889-.0667-.17778-.1778-.17778h-7c-.1333 0-.2445.11111-.2445.24445v6.55552c0 .1334.1112.2445.2445.2445h7.4222c.0889 0 .1778-.0667.1778-.1778v-1.5111c-.0222-.0667-.0889-.1333-.1778-.1333z"></path>
                <path d="m16.0444 1.02222-4.1777 6.2c-.2889.42222.2666.93334.6666.57778l4.1111-3.57778c.1112-.08889.2667-.02222.2667.13334v11.17774c0 .1556-.2.2223-.2889.1111l-12.44442-14.888844c-.4-.488889-.97778-.755556-1.62222-.755556h-.44445c-1.155554 0-2.11111.955556-2.11111 2.13333v15.73337c0 1.1777.955556 2.1333 2.13333 2.1333.73334 0 1.42223-.3778 1.82223-1.0222l4.17777-6.2c.28889-.4222-.26666-.9334-.66666-.5778l-4.11111 3.5556c-.11112.0888-.26667.0222-.26667-.1334v-11.15553c0-.15556.2-.22223.28889-.11111l12.44442 14.88884c.4.4889 1 .7556 1.6222.7556h.4445c1.1778 0 2.1333-.9556 2.1333-2.1333v-15.73337c-.0222-1.177774-.9778-2.13333-2.1555-2.13333-.7334 0-1.4223.377778-1.8223 1.02222z"></path>
            </svg>
            </Navbar.Brand>
            <Navbar.Toggle aria-controls="navbarScroll" />
            <Navbar.Collapse id="navbarScroll">
            <Nav
                className="me-auto my-2 my-lg-0 justify-content-end"
                style={{ maxHeight: '100px' }}
                navbarScroll
            >
            
            </Nav>
            <Nav className="justify-content-end">
                {currentUser ? 
                <>
                <Nav.Link eventKey={2} href="#memes">
                    Account Id: {currentUser.accountId}
                </Nav.Link>
                <Button variant="outline-danger" onClick={logout}>Logout</Button>
                </>
                :
                <Button variant="outline-primary" onClick={login}>Login</Button>
                }
            </Nav>
            </Navbar.Collapse>
        </Container>
    </Navbar>
    </>
  );
};

export default Header;
'''
'''--- frontend/src/components/Item.js ---
import 'regenerator-runtime/runtime';
import React,{useState} from 'react';
import {Card,Col,Nav,Button} from 'react-bootstrap';
const BlogItem = ({ contract,item ,currentUser}) => {
  const [loading, setLoading] = useState(false);
 
  const remove = (item) => {
    setLoading(true)
    if(item.author != currentUser.accountId){
      alert("You are not authorized for deleting this item");
      setLoading(false)
      return;
    }
    

    contract.del({id:item.id});
    setLoading(false)

  }

  return (
    <>
    <Col md={4} key={item.id} style={{marginTop:20}}>
      <Card >
          <Card.Img variant="top" src={item.url} />
          <Card.Body>
            <Card.Title>{item.title}</Card.Title>
            <Card.Text  >
              {item.desc}
            </Card.Text>
          </Card.Body>
          <Card.Footer>
            <small className="text-muted">@{item.author}</small>
            {currentUser ?
            <Button variant="danger" style={{float:'right'}}
            onClick={() => remove(item)}
            disabled={loading}
            >Remove</Button>
            :null}
          </Card.Footer>
          
        </Card>
    </Col>

    </>
  );
};

export default BlogItem;
'''
'''--- frontend/src/config.js ---
const CONTRACT_NAME ='dev-1648989551008-59087570003653';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;
'''
'''--- frontend/src/index.js ---
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';

import 'bootstrap/dist/css/bootstrap.min.css';
import { Buffer } from "buffer";
Buffer.from("anything", "base64");

window.Buffer = window.Buffer || require("buffer").Buffer;

// Initializing contract
async function initContract() {
  const nearConfig = getConfig("testnet");

  // Initializing connection to the NEAR TestNet
  const near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  });

  // Needed to access wallet
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in account data
  let currentUser;
  if(walletConnection.getAccountId()) {
    currentUser = {
      accountId: walletConnection.getAccountId(),
      balance: (await walletConnection.account().state()).amount
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only – they don't modify the state, but usually return some value
    viewMethods: ["getAll"],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: ["createBlog", "update", "del"],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: walletConnection.getAccountId()
  });

  return { contract, currentUser, nearConfig, walletConnection };
}
window.nearInitPromise = initContract()
  .then(({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById('root')
    );
  });
'''
'''--- frontend/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- frontend/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- index.js ---
const fs = require("fs");
const loader = require("@assemblyscript/loader");
const imports = { /* imports go here */ };
const wasmModule = loader.instantiateSync(fs.readFileSync(__dirname + "/build/optimized.wasm"), imports);
module.exports = wasmModule.exports;

'''
'''--- tests/index.js ---
const assert = require("assert");
const myModule = require("..");
assert.strictEqual(myModule.add(1, 2), 3);
console.log("ok");

'''