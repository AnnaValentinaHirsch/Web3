*GitHub Repository "andresguerrerdev/ncd_team_15_soccer_amateur"*

'''--- .gitpod.yml ---
tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
near-blank-project
==================

This app was initialized with [create-near-app]

Quick Start
===========

If you haven't installed dependencies during setup:

    npm install

Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run `npm start`. This will run a dev server.

Exploring The Code
==================

1. The smart-contract code lives in the `/contract` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/index.js`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE

Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "champions_amateur_league"
version = "1.0.0"
authors = ["Near Inc <team_15@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- contract/README.md ---
# Hello NEAR Contract

The smart contract exposes two methods to enable storing and retrieving a greeting in the NEAR network.

```rust
const DEFAULT_GREETING: &str = "Hello";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    greeting: String,
}

impl Default for Contract {
    fn default() -> Self {
        Self{greeting: DEFAULT_GREETING.to_string()}
    }
}

#[near_bindgen]
impl Contract {
    // Public: Returns the stored greeting, defaulting to 'Hello'
    pub fn get_greeting(&self) -> String {
        return self.greeting.clone();
    }

    // Public: Takes a greeting, such as 'howdy', and records it
    pub fn set_greeting(&mut self, greeting: String) {
        // Record a log permanently to the blockchain!
        log!("Saving greeting {}", greeting);
        self.greeting = greeting;
    }
}
```

<br />

# Quickstart

1. Make sure you have installed [rust](https://rust.org/).
2. Install the [`NEAR CLI`](https://github.com/near/near-cli#setup)

<br />

## 1. Build and Deploy the Contract
You can automatically compile and deploy the contract in the NEAR testnet by running:

```bash
./deploy.sh
```

Once finished, check the `neardev/dev-account` file to find the address in which the contract was deployed:

```bash
cat ./neardev/dev-account
# e.g. dev-1659899566943-21539992274727
```

<br />

## 2. Retrieve the Greeting

`get_greeting` is a read-only method (aka `view` method).

`View` methods can be called for **free** by anyone, even people **without a NEAR account**!

```bash
# Use near-cli to get the greeting
near view <dev-account> get_greeting
```

<br />

## 3. Store a New Greeting
`set_greeting` changes the contract's state, for which it is a `change` method.

`Change` methods can only be invoked using a NEAR account, since the account needs to pay GAS for the transaction.

```bash
# Use near-cli to set a new greeting
near call <dev-account> set_greeting '{"message":"howdy"}' --accountId <dev-account>
```

**Tip:** If you would like to call `set_greeting` using your own account, first login into NEAR using:

```bash
# Use near-cli to login your NEAR account
near login
```

and then use the logged account to sign the transaction: `--accountId <your-account>`.
'''
'''--- contract/build.sh ---
#!/bin/sh

echo ">> Building contract"

rustup target add wasm32-unknown-unknown
cargo build --all --target wasm32-unknown-unknown --release

'''
'''--- contract/deploy.sh ---
#!/bin/sh

./build.sh

if [ $? -ne 0 ]; then
  echo ">> Error building contract"
  exit 1
fi

echo ">> Deploying contract"

# https://docs.near.org/tools/near-cli#near-dev-deploy
near dev-deploy --wasmFile ./target/wasm32-unknown-unknown/release/champions_amateur_league.wasm

'''
'''--- contract/src/lib.rs ---
use std::vec;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{log, near_bindgen};
use serde::{Serialize, Deserialize};
use near_sdk::{json_types::U128, AccountId, Promise};

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize,Clone,Serialize, Deserialize)]

pub struct Player {
    first_name: String,
    last_name: String,
    year: u64,
    price: u128, 
    number :u64,
    position: String
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize,Clone,Serialize, Deserialize)]

pub struct TeamClub {
    uid: u64,
    name: String,
    address: String,
    category: u64,
    icon : String,
    list_players: Vec<Player>
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize,Clone,Serialize, Deserialize)]
pub struct Contract {
    team_list: Vec<TeamClub>,
    // storage_deposits: u64
}

// Define the default, which automatically initializes the contract
impl Default for Contract{
    fn default() -> Self{
        Self{         
        team_list: vec![
            
        TeamClub{ uid:1, name: "Tigres FC".to_string(), address: "Monterrey".to_string(), category:1,icon: "https://1.bp.blogspot.com/--OwYCGTphYA/XtaPmBYbnJI/AAAAAAABcHw/OMmcERRLQcAFue_F0UaUL2S7rkmddWyzACK4BGAsYHg/Tigres%2BUANL256x.png".to_string(), list_players:vec![] }.to_owned(),
        TeamClub{ uid:2, name: "America".to_string(), address: "CDMX".to_string(), category:1, icon: "http://cdn.shopify.com/s/files/1/0453/2083/1126/collections/Club-America-icon_1200x1200.png?v=1599717847".to_string(),list_players:vec![] }.to_owned(),
        TeamClub{ uid:3, name: "Toluca".to_string(), address: "Toluca".to_string(), category:1,icon:"https://futhead.cursecdn.com/static/img/14/clubs/1882.png".to_string(), list_players:vec![] }.to_owned(),
        TeamClub{ uid:4, name: "Chivas".to_string(), address: "Guadalajara".to_string(), category:1, icon: "https://futhead.cursecdn.com/static/img/14/clubs/1880.png".to_string(),list_players:vec![]}.to_owned(),
        TeamClub{ uid:5, name: "Cruz Azul".to_string(), address: "CDMX".to_string(), category:1, icon: "https://seeklogo.com/images/C/cruz-azul-nuevo-logo-EEF889CA67-seeklogo.com.png".to_string(),list_players:vec![] }.to_owned(),
        ] 
    }
    }
}

#[near_bindgen]
impl Contract {

    pub fn get_all_teams(&self) -> Vec<TeamClub> {
        return self.team_list.clone()
    }
    pub fn add_team(&mut self, uid: u64,name: String,address: String, category: u64, icon:String) {
        let mut is_exist = false;
        if self.team_list.iter().any(|team| team.uid == uid) {
            is_exist = true;
        }
        assert!( is_exist == false,"Ya existe");
        let aux =  TeamClub{uid: uid,name: name.to_string(), address: address.to_string(), category : category, list_players:vec![],icon: icon.to_string()};
        self.team_list.push(aux);
    }
    pub fn get_team_players(&self, index: usize ) -> Vec<Player> {
        return self.team_list[index].list_players.clone();
    }
    
    pub fn add_player(&mut self, first_name: String, last_name: String, year: u64, price: u128, number:u64, position: String, index:usize) {
        
        self.pay_register_player();
        let aux =  Player{first_name: first_name.to_string(), last_name: last_name.to_string(),year:year,price : price, number:number,position:position.to_string()};
        // self.list_players.push(aux);
        self.team_list[index].list_players.push(aux);
    }    
    pub fn pay_register_player(&mut self) -> Promise {
        // let recipient: AccountId =  "devandres.testnet".parse().unwrap();
        let recipient: AccountId =  "jontiveros.testnet".parse().unwrap();
        // let amountInYocto = utils.format.parseNearAmount("1");
        let amount:u128 = 1_000_000_000_000_000_000_000_000;
        return Promise::new(recipient).transfer(amount);
    }

}

#[cfg(test)]
mod tests {
    use super::*;

}
'''
'''--- frontend/App.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import * as ReactDOM from 'react-dom/client';
import './assets/global.css';
import { SignInPrompt, SignOutButton, Players } from './ui-components';
import { HelloNEAR } from './near-interface';

export default function App({ isSignedIn, helloNEAR, wallet }) {
  const [greetingVar, setGreetingVar] = React.useState();
  const [listTeam, setListTeam] = React.useState([]);  
  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);
  const [showPlayers,setTeam] = React.useState();
  const [selectedTeam,selectTeam] = React.useState();

  console.log(showPlayers);  
  // Get blockchian state once on component load
  React.useEffect(() => {

    helloNEAR.getAllTeams()
        .then(result => {
          setListTeam(result);
          console.log(listTeam);
       }, function(error) {
          alert('error')
       }).catch(alert)
        .finally(() => {
          setUiPleaseWait(false);
        });

  }, []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={greetingVar} onClick={() => wallet.signIn()}/>;
  }

  if (showPlayers != undefined){
    return <Players helloNEAR={helloNEAR} team_uid={showPlayers} team_name={selectedTeam} setTeam={setTeam}/>;
  }

  function addTeam(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    
    const team_input  = e.target.elements;
    let isExist = false;
    listTeam.forEach(async (team) => {
      if(team['uid'] == parseInt(team_input.team_index.value)){
        isExist= true;
      }
    });
    if(isExist === false){
      setUiPleaseWait(false);
      helloNEAR.addTeam(parseInt(team_input.team_index.value),team_input.team_name.value,team_input.team_address.value,parseInt(team_input.team_category.value), team_input.url_avatar.value)
       .then(async () => {return helloNEAR.getAllTeams();})
       .then(result => {
         setListTeam(result);
         console.log(listTeam);
      })
       .finally(() => {
         setUiPleaseWait(false);
       }); 
    }else{
      alert('Error, Equipo ya existe.');
      setUiPleaseWait(false);
    }

  }

  return (
    <>
      <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>Liga Latino de Futbol</h1>
        <div className='row'>
        <div className='col-md-3'>&nbsp;</div>
        <div className='col-md-6'>
          <div className='card'>
            <div className='card-header'>
              <h4>Agrega un equipo:</h4>
            </div>
           <div className='card-body'>
           <form onSubmit={addTeam} className="add">
             <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Identificador Equipo
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"
                      id="team_index"
                      type="number"
                      min={1}
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Nombre Equipo
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"     
                      id="team_name"
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Ubicacion Equipo
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"     
                      id="team_address"
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
            <div className='row'>
                  <div className='col-md-6'>
                    Url Icono
                  </div>
                  <div className='col-md-6'>
                <input 
                  className='form-control'
                    autoComplete="off"   
                    placeholder='Url de Ícono'  
                    id="url_avatar"
                    required
                  />
              </div>
              </div>
            </div>            
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Categoria
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"
                      id="team_category"
                      type="number"
                      min={1}
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12'>
            <div className="d-grid gap-2">
              <button className='btn btn-lg btn-primary'>
              <div className="loader"></div>
                <span>Guardar</span>
                
              </button>
            </div>
            </div>
            </form>
            </div>
            </div>
            </div>
            </div>
        <div className='section'>
          <div className='container'>
            
        {
        <ol>
          <div className='row'>
          {listTeam.map((team,index) => (
              <>
              <div className='col-md-3'>
              
              <div className='card border-dark bg-light mb-3 team' >

                <div className='card-header' >
                    {team.uid} : {team.name}
                </div>
                <div className='card-body'>
                  <ul>
                  <li> <img src= {team.icon} className='avatar' w/> </li>
                    <li>De: {team.address}</li>
                    <li>Categoria: {team.category}</li>
                     
                  </ul>
                  <button className='btn btn-lg btn-success' 
                    onClick={() => {setTeam(index); selectTeam(team.name);}} >
                    Ver Equipo</button>
                </div>
              </div>
              </div>
              </>

          )) }
          </div>
        </ol>
        
        }
        
        </div>
        </div>
          
      </main>
      </>
  );
}
'''
'''--- frontend/assets/global.css ---
* {
  box-sizing: border-box;
}
html {
  --bg: #efefef;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #FF585D;
  --secondary: #0072CE;
  color: var(--fg);
  font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
  padding: 1em;
}

main {
  margin: 0 auto;
}

main.please-wait {
}

h1 {
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  text-align: center;
}
.greeting {
  color: var(--secondary);
  text-decoration: underline;
}
h2 {
  text-align: center;
}

.card{
  margin-bottom: 10px;
}
.team{
  margin-bottom: 10px;
  height: 480px;
}
.avatar{
  height: 70px;
  /* width: 70px; */
}
.please-wait .change {
  pointer-events: none;
}

ul.information  {
  margin: 2em 0 2em 0;
  padding: 0;
  text-align: left;
  font-size: 0.8em;

}
.information li:first-child {
  border-top: 1px solid var(--light-gray);
}
.information li {
  padding: 0.5em 0;
  border-bottom: 1px solid var(--light-gray);
  list-style: none;
}

.change {
  display: flex;
  flex-direction: column;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
  font-size: 1em;
  border: 2px solid var(--light-gray);
  padding: 0.5em;
}
.change > div {
  display: flex;
  align-content: stretch;
  justify-content: space-evenly;
  align-items: stretch;
}
.change input {
  flex: 1;
  border-bottom-right-radius: 0;
  border-top-right-radius: 0;
}
.change label {
  display: block;
  text-align: left;
  margin-right: 10px;
  padding-bottom: 0.5em;
}
.change button {
  border-bottom-left-radius: 0;
  border-top-left-radius: 0;
}

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: underline;
}
a:active,
.link:active {
  color: var(--secondary);
}

button, input {
  font: inherit;
  outline: none;
}
main.please-wait .change button {
  position: relative;
  pointer-events: none;
  background-color: white;
}
main.please-wait .change button span {
  visibility: hidden;
}

input {
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 0.5em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

@media (prefers-color-scheme: dark) {
  html {
    --bg: #1e1e1e;
    --fg: #efefef;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

main.please-wait .loader,
main.please-wait .loader:after{
  display: inline-block;
}
.loader,
.loader:after {
  display: none;
  border-radius: 50%;
  width: 20px;
  height: 20px;
}
.loader {
  font-size: 10px;
  position: absolute;
  top: calc(50% - 10px);
  left: calc(50% - 10px);
  text-indent: -9999em;
  border-top: 3px solid var(--secondary);
  border-right: 3px solid var(--secondary);
  border-bottom: 3px solid var(--secondary);
  border-left: 3px solid #ffffff;
  -webkit-transform: translateZ(0);
  -ms-transform: translateZ(0);
  transform: translateZ(0);
  -webkit-animation: load8 1.1s infinite linear;
  animation: load8 1.1s infinite linear;
}
@-webkit-keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
@keyframes load8 {
  0% {
    -webkit-transform: rotate(0deg);
    transform: rotate(0deg);
  }
  100% {
    -webkit-transform: rotate(360deg);
    transform: rotate(360deg);
  }
}
'''
'''--- frontend/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>

    <title>Liga Latino</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>
'''
'''--- frontend/index.js ---
// React
import React from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './App';
// NEAR
import { HelloNEAR } from './near-interface';
import { Wallet } from './near-wallet';

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: process.env.CONTRACT_NAME })

// Abstract the logic of interacting with the contract to simplify your flow
const helloNEAR = new HelloNEAR({ contractId: process.env.CONTRACT_NAME, walletToUse: wallet });

// Setup on page load
window.onload = async () => {
  const container = document.getElementById('root');

// Create a root.
const root = ReactDOM.createRoot(container);
  const isSignedIn = await wallet.startUp()
 
  root.render(
    <App isSignedIn={isSignedIn} helloNEAR={helloNEAR} wallet={wallet} />,
    container
  );
}
'''
'''--- frontend/near-interface.js ---
export class HelloNEAR {
  constructor({ contractId, walletToUse }) {
    this.contractId = contractId;
    this.wallet = walletToUse;
  }

  async getAllTeams() {
    return await this.wallet.viewMethod({ contractId: this.contractId, method: 'get_all_teams' });
  }

  async addTeam(uid, name, address, category, icon) {
    return await this.wallet.callMethod({ contractId: this.contractId, method: 'add_team', args: { uid:uid, name: name, address: address, category: category,icon:icon} });
  }

  async getAllPlayersFromTeam(uid) {
    return await this.wallet.viewMethod({ contractId: this.contractId, method: 'get_team_players', args: {index:uid} });
  }

  async addPlayerToTeam(first_name, last_name, year, price, number, position, index) {
    return await this.wallet.callMethod(
    { contractId: this.contractId, method: 'add_player', 
      args: { first_name: first_name, last_name: last_name, year: year, price: price, number: number, position: position, index: index} 
    });
  }

}
'''
'''--- frontend/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}
'''
'''--- frontend/package.json ---
{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "./start.sh",
    "build": "parcel build index.html --public-url ./"
  },
  "devDependencies": {
    "@babel/core": "^7.18.2",
    "@babel/preset-env": "^7.18.2",
    "@babel/preset-react": "^7.17.12",
    "@types/node": "^18.6.2",
    "react-test-renderer": "^18.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2",
    "nodemon": "^2.0.16",
    "parcel": "^2.6.0",
    "process": "^0.11.10",
    "env-cmd": "^10.1.0"
  },
  "dependencies": {
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "regenerator-runtime": "^0.13.9",
    "@near-wallet-selector/core": "^7.0.0",
    "@near-wallet-selector/ledger": "^7.0.0",
    "@near-wallet-selector/math-wallet": "^7.0.0",
    "@near-wallet-selector/meteor-wallet": "^7.0.0",
    "@near-wallet-selector/modal-ui": "^7.0.0",
    "@near-wallet-selector/my-near-wallet": "^7.0.0",
    "@near-wallet-selector/near-wallet": "^7.0.0",
    "@near-wallet-selector/nightly": "^7.0.0",
    "@near-wallet-selector/nightly-connect": "^7.0.0",
    "@near-wallet-selector/sender": "^7.0.0",
    "@near-wallet-selector/wallet-connect": "^7.0.0"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
'''
'''--- frontend/start.sh ---
#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\033[1;32m'
  NC='\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run ${GREEN}'npm run deploy'${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi

'''
'''--- frontend/ui-components.js ---
import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>Liga Latino Futbol</h1>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick} className='btn btn-primary'>Inicia Sesion con NEAR</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{float: 'right'},{ position: 'fixed' }} className='btn btn-secondary' onClick={onClick}>
      Cerrar Sesion {accountId}
    </button>
  );
}

export function Players({helloNEAR, team_uid, team_name, setTeam}) {
  // const [listTeam, setListTeam] = React.useState([]);
  const [listPlayers, setPlayersTeam] = React.useState([]); 
  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

 console.log(team_uid);
  // Get blockchian state once on component load
  React.useEffect(() => {

    helloNEAR.getAllPlayersFromTeam(parseInt(team_uid))
        .then(result => {
          setPlayersTeam(result);
          console.log(result);
       }, function(error) {
         console.log(error);
          alert('error team not found');
       }).catch(alert)
        .finally(() => {
          setUiPleaseWait(false);
        });

  }, []);

    function addPlayer(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const player_input  = e.target.elements;

    helloNEAR.addPlayerToTeam(player_input.player_firstname.value,player_input.player_lastname.value,parseInt(player_input.player_year.value),parseInt(player_input.player_price.value),parseInt(player_input.player_number.value),player_input.player_position.value,parseInt(team_uid))
      .then(async () => {return helloNEAR.getAllPlayersFromTeam(parseInt(team_uid));})
      .then(result => {
        setPlayersTeam(result);
        console.log(listPlayers);
     })
      .finally(() => {
        setUiPleaseWait(false);
      }); 
  }

  return (
    <>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>Jugadores </h1>
        <div className='row'>
        <div className='col-md-3'>&nbsp;</div>
        <div className='col-md-6'>
          <button className='btn btn-secondary' onClick={() => setTeam()}>Regresar a Equipos</button>
          <div className='card'>
            <div className='card-header'>
              <h1>{team_name}</h1>
              <h4>Agrega un jugador:</h4>
            </div>
           <div className='card-body'>
           <form onSubmit={addPlayer} className="add">
             <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Primer Nombre
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"
                      id="player_firstname"
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Apellido
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"     
                      id="player_lastname"
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Año Nacimiento
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"     
                      id="player_year"
                      type="number"
                      min={1900}
                      max={2010}
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Precio
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"
                      id="player_price"
                      type="number"
                      min={1}
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Numero Jugador
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"
                      id="player_number"
                      type="number"
                      min={1}
                      max={99}
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
                <div className='row'>
                  <div className='col-md-6'>
                    Posicion
                  </div>
                <div className='col-md-6'>
                  <input 
                    className='form-control'
                      autoComplete="off"
                      id="player_position"
                      required
                    />
                </div>
              </div>
            </div>
            <div className='col-md-12 mb-2'>
            <div className="d-grid gap-2">
              <button className='btn btn-lg btn-primary'>
              <div className="loader"></div>
                <span>Guardar</span>
                
              </button>
            </div>
            </div>
            </form>
            </div>
            </div>
            </div>
            </div>
        <div className='section'>
          <div className='container'>
            
        {
        <ol>
          <div className='row'>
          {listPlayers.map((player) => (
              <>
              <div className='col-md-3' >
              <div className='card'>
                <div className='card-header'>
                    {player.first_name} {player.last_name}
                </div>
                <div className='card-body'>
                  <ul>
                    <li>Numero: {player.number}</li>
                    <li>Posicion: {player.position}</li>
                    <li>Precio: {player.price}</li>
                    <li>Año: {player.year}</li>
                  </ul>
                </div>
              </div>
              </div>
              </>

          )) }
          </div>
        </ol>
        
        }
        
        </div>
        </div>
          
      </main>
      </>
  );
}

export function EducationalText() {
  return (
    <>
     
    </>
  );
}

'''
'''--- integration-tests/Cargo.toml ---
[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"

'''
'''--- integration-tests/src/tests.rs ---
use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}
'''
'''--- package.json ---
{
  "name": "soccer_amateur",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "cd integration-tests && cargo run --example integration-tests \"../contract/target/wasm32-unknown-unknown/release/hello_near.wasm\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {}
}
'''