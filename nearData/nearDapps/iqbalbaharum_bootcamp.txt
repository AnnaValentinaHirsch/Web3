*GitHub Repository "iqbalbaharum/bootcamp"*

'''--- .gitpod.yml ---
tasks:
  - init: npm dev
    command: npm run dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
near-blank-project
==================

This app was initialized with [create-near-app]

Quick Start
===========

If you haven't installed dependencies during setup:

    npm install

Build and deploy your contract to TestNet with a temporary dev account:

    npm run deploy

Test your contract:

    npm test

If you have a frontend, run `npm start`. This will run a dev server.

Exploring The Code
==================

1. The smart-contract code lives in the `/contract` folder. See the README there for
   more info. In blockchain apps the smart contract is the "backend" of your app.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/index.js`,
   this is your entrypoint to learn how the frontend connects to the NEAR blockchain.
3. Test your contract: `npm test`, this will run the tests in `integration-tests` directory.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. 
When you run `npm run deploy`, your smart contract gets deployed to the live NEAR TestNet with a temporary dev account.
When you're ready to make it permanent, here's how:

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: deploy the contract
---------------------------

Use the CLI to deploy the contract to TestNet with your account ID.
Replace `PATH_TO_WASM_FILE` with the `wasm` that was generated in `contract` build directory.

    near deploy --accountId near-blank-project.YOUR-NAME.testnet --wasmFile PATH_TO_WASM_FILE

Step 3: set contract name in your frontend code
-----------------------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/concepts/basics/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- frontend/.env ---
CONTRACT_NAME=seed.bonebon.testnet
BE_API=https://goldfish-app-xsljf.ondigitalocean.app
GLORY_BADGE_CONTRACT=sordgom_3_nft.testnet
ENDORSEMENT_CONTRACT=sordgom_2_endorsement.testnet
THIRTY_TGAS=30000000000000
DEPOSIT=100000000000000000000000
IPFS_GATEWAY=https://seedweb3.infura-ipfs.io/ipfs
'''
'''--- frontend/App.css ---
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

'''
'''--- frontend/App.js ---
import "regenerator-runtime/runtime";
import React, { useEffect, useState } from "react";

import "./assets/index.css";

import { Routes, Route } from "react-router-dom";

import "./App.css";

// context
import { ConfigContext } from "./src/context/config.context";
// Component
import Navbar from "./src/components/Navbar";
// Pages
import Profile from "./src/pages/profileForm";
import IndexJobListing from "./src/pages/JobList/IndexJobListing";
import ListJobDisplay from "./src/pages/JobList/ListJobDisplay";
import { NearWalletContext } from "./src/context/wallet.context";
import useIpfsFactory from "./src/hooks/useIpfsFactory";
import NavbarLayout from "./src/components/Layout/NavbarLayout";
import ProtectedLayout from "./src/components/Layout/ProtectedLayout";
import Tutorials from "./src/pages/Tutorials";
import TutorialSingle from "./src/pages/TutorialSingle";
import Hackathons from "./src/pages/Hackathons";
import Dashboard from "./src/pages/Dashboard";
import Event from "./src/pages/Event";
import EventProject from "./src/pages/Event/Project";
import SeedLandingPage from "./src/pages/Landingpage/Seed";
import Login from './src/pages/authentication/Login'

export default function App({ isSignedIn, wallet }) {
  const [config, setConfig] = useState({
    isAuthEnabled: true,
    isNavsEnabled: true,
  });

  const near = {
    isSignedIn,
    wallet,
  };

  const { ipfs, ipfsInitError } = useIpfsFactory({ commands: ["id"] });
  // const id = useIpfs(ipfs, 'id')
  const [version, setVersion] = useState();

  useEffect(() => {
    if (!ipfs) return;

    const getVersion = async () => {
      const nodeId = await ipfs.version();
      setVersion(nodeId);
    };

    getVersion();
  }, [ipfs]);

  return (
    <ConfigContext.Provider value={{ config, setConfig }}>
      <NearWalletContext.Provider value={near}>
        <div className="App">
          <div className="w-full h-screen flex flex-col justify-start ">
            <Routes>

              <Route exact path="/login" element={<Login />} />

              <Route
                path="/"
                element={
                  <NavbarLayout
                    isNavEnabled={config.isNavsEnabled}
                    isAuthEnabled={config.isAuthEnabled}
                  />
                }
              >
                {/* Job Listing */}
                <Route exact path="/jobs" element={<ListJobDisplay />} />
                <Route exact path="/job/create" element={<IndexJobListing />} />
              </Route>

              <Route path="/user" element={<ProtectedLayout />}>
                <Route path="profile/form" element={<Profile />} />
                <Route path="dashboard" element={<Dashboard />} />
              </Route>

              <Route path="/" element={<ProtectedLayout />}>
                <Route index element={<SeedLandingPage />} />
                <Route exact path="tutorials" element={<Tutorials />} />
                <Route exact path="tutorial/:id" element={<TutorialSingle />} />
                <Route exact path="hackathons" element={<Hackathons />} />
                <Route exact path="event/:id/home" element={<Event />} />
                <Route exact path="event/:id/project" element={<EventProject />} />
                <Route exact path="*" element={<SeedLandingPage />} />
              </Route>
            </Routes>
          </div>
        </div>
      </NearWalletContext.Provider>
    </ConfigContext.Provider>
  );
}

'''
'''--- frontend/assets/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Poppins:wght@100&display=swap');
@tailwind base;
@tailwind components;
@tailwind utilities;

#root {
  --primary: #0abab5;
  --secondary: #0ce6df;
  --accent: #718096;
  --background: #fff;
  --main: #0d0106;
  --header: #2d3748;
}

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", "Oxygen",
    "Ubuntu", "Cantarell", "Fira Sans", "Droid Sans", "Helvetica Neue",
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, "Courier New",
    monospace;
}

.pop{
  font-family: 'Poppins';
}

.boxShadow{
  box-shadow: rgba(0, 0, 0, 0.16) 0px 3px 4px;
}

'''
'''--- frontend/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/assets/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- frontend/assets/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <!-- <link href="./index.css" rel="stylesheet" /> -->
    <title>Seed Web3 Academy</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
// React
import React from 'react';
import App from './App';
import { HashRouter } from 'react-router-dom';
import { createRoot } from 'react-dom/client';
import { WalletProvider } from './src/hooks/useWallet';
// import { FluenceProvider } from './src/hooks/useFluence';

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
// const wallet = new Wallet({ createAccessKeyFor: process.env.CONTRACT_NAME })

// Setup on page load
window.onload = async () => {
  // const isSignedIn = await wallet.startUp()
  const root = createRoot(document.getElementById("root"));

  root.render(
    <React.StrictMode>
      <HashRouter>
        <WalletProvider>
          <App />
        </WalletProvider>
      </HashRouter>
    </React.StrictMode>
  );
};

'''
'''--- frontend/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const DEPOSIT = '100000000000000000000000'; //We can change this accordingly

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    console.log(Buffer.from(JSON.stringify(args)).toString('base64'))
    
    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });

    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    //I changed this because it returns nothing
    // return providers.getTransactionLastResult(transaction);

    //This is some mind gymnastics 
    let result = transaction?.receipts_outcome[0]?.outcome?.logs[0] 
    result = result.replace('EVENT_JSON:', '');
    return JSON.parse(result);
  }
}
'''
'''--- frontend/package.json ---
{
  "name": "my-near-app",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "homepage": ".",
  "scripts": {
    "start": "env-cmd -f ./.env parcel index.html --open",
    "build": "npx parcel build index.html --public-url ./",
    "compile-aqua": "aqua -i ./aqua/ -o ./src/_aqua",
    "watch-aqua": "chokidar \"**/*.aqua\" -c \"npm run compile-aqua\""
  },
  "devDependencies": {
    "@babel/core": "^7.18.2",
    "@babel/preset-env": "^7.18.2",
    "@babel/preset-react": "^7.17.12",
    "@eslint/create-config": "^0.3.0",
    "@types/node": "^18.6.2",
    "@types/regenerator-runtime": "^0.13.1",
    "assert": "^2.0.0",
    "autoprefixer": "^10.4.13",
    "constants-browserify": "^1.0.0",
    "env-cmd": "^10.1.0",
    "eslint": "^7.32.0 || ^8.2.0",
    "eslint-config-airbnb": "^19.0.4",
    "eslint-config-prettier": "^8.5.0",
    "eslint-plugin-import": "^2.25.3",
    "eslint-plugin-jsx-a11y": "^6.5.1",
    "eslint-plugin-prettier": "^4.2.1",
    "eslint-plugin-react": "^7.28.0",
    "eslint-plugin-react-hooks": "^4.3.0",
    "nodemon": "^2.0.16",
    "os-browserify": "^0.3.0",
    "parcel": "^2.6.0",
    "path-browserify": "^1.0.1",
    "postcss": "^8.4.18",
    "postcss-import": "^15.0.0",
    "prettier": "^2.7.1",
    "process": "^0.11.10",
    "react-test-renderer": "^18.1.0",
    "stream-browserify": "^3.0.0",
    "tailwindcss": "^3.2.1",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2",
    "util": "^0.12.5",
    "vm-browserify": "^1.1.2"
  },
  "dependencies": {
    "@headlessui/react": "^1.6.6",
    "@heroicons/react": "^1.0.6",
    "@near-wallet-selector/core": "^7.1.0",
    "@near-wallet-selector/ledger": "^7.1.0",
    "@near-wallet-selector/math-wallet": "^7.0.0",
    "@near-wallet-selector/meteor-wallet": "^7.0.0",
    "@near-wallet-selector/modal-ui": "^7.1.0",
    "@near-wallet-selector/my-near-wallet": "^7.1.0",
    "@near-wallet-selector/near-wallet": "^7.1.0",
    "@near-wallet-selector/nightly": "^7.0.0",
    "@near-wallet-selector/nightly-connect": "^7.0.0",
    "@near-wallet-selector/sender": "^7.1.0",
    "@near-wallet-selector/wallet-connect": "^7.0.0",
    "@tailwindcss/forms": "^0.5.3",
    "@tailwindcss/line-clamp": "^0.4.2",
    "@tailwindcss/typography": "^0.5.8",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.3.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.1.3",
    "dot-prop": "^7.2.0",
    "ipfs-http-client": "^33.0.1",
    "markdown-to-jsx": "^7.1.8",
    "near-api-js": "^0.44.2",
    "prop-types": "^15.8.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-dropzone": "^14.2.3",
    "react-markdown": "^8.0.3",
    "react-modal": "^3.16.1",
    "react-router-dom": "^6.4.3",
    "react-scripts": "5.0.1",
    "react-syntax-highlighter": "^15.5.0",
    "react-type-animation": "^2.1.2",
    "regenerator-runtime": "^0.13.10",
    "remark-breaks": "^3.0.2",
    "remark-gfm": "^3.0.1",
    "remark-rehype": "^10.1.0"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- frontend/src/_aqua/main.ts ---
/**
 *
 * This file is auto-generated. Do not edit manually: changes may be erased.
 * Generated by Aqua compiler: https://github.com/fluencelabs/aqua/.
 * If you find any bugs, please write an issue on GitHub: https://github.com/fluencelabs/aqua/issues
 * Aqua version: 0.7.4-332
 *
 */
import { Fluence, FluencePeer } from '@fluencelabs/fluence';
import {
    CallParams,
    callFunction,
    registerService,
} from '@fluencelabs/fluence/dist/internal/compilerSupport/v3';

// Services

// Functions
 

export function get_live_events(
    config?: {ttl?: number}
): Promise<{ end_date: string; err_msg: string; event_type: string; id: number; logo: string; start_date: string; status: number; success: boolean; title: string; }[]>;

export function get_live_events(
    peer: FluencePeer,
    config?: {ttl?: number}
): Promise<{ end_date: string; err_msg: string; event_type: string; id: number; logo: string; start_date: string; status: number; success: boolean; title: string; }[]>;

export function get_live_events(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("academy_backend" "get_live_events") [] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_live_events",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "array",
                    "type" : {
                        "tag" : "struct",
                        "name" : "Event",
                        "fields" : {
                            "success" : {
                                "tag" : "scalar",
                                "name" : "bool"
                            },
                            "start_date" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "err_msg" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "title" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "logo" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "id" : {
                                "tag" : "scalar",
                                "name" : "i64"
                            },
                            "end_date" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "event_type" : {
                                "tag" : "scalar",
                                "name" : "string"
                            },
                            "status" : {
                                "tag" : "scalar",
                                "name" : "i64"
                            }
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

 
export type Get_eventResult = { end_date: string; err_msg: string; event_type: string; id: number; logo: string; start_date: string; status: number; success: boolean; title: string; }
export function get_event(
    id: number,
    config?: {ttl?: number}
): Promise<Get_eventResult>;

export function get_event(
    peer: FluencePeer,
    id: number,
    config?: {ttl?: number}
): Promise<Get_eventResult>;

export function get_event(...args: any) {

    let script = `
                    (xor
                     (seq
                      (seq
                       (seq
                        (seq
                         (call %init_peer_id% ("getDataSrv" "-relay-") [] -relay-)
                         (call %init_peer_id% ("getDataSrv" "id") [] id)
                        )
                        (call -relay- ("op" "noop") [])
                       )
                       (xor
                        (seq
                         (call "12D3KooWFEwNWcHqi9rtsmDhsYcDbRUCDXH84RC4FW6UfsFWaoHi" ("academy_backend" "get_event") [id] res)
                         (call -relay- ("op" "noop") [])
                        )
                        (seq
                         (call -relay- ("op" "noop") [])
                         (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 1])
                        )
                       )
                      )
                      (xor
                       (call %init_peer_id% ("callbackSrv" "response") [res])
                       (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 2])
                      )
                     )
                     (call %init_peer_id% ("errorHandlingSrv" "error") [%last_error% 3])
                    )
    `
    return callFunction(
        args,
        {
    "functionName" : "get_event",
    "arrow" : {
        "tag" : "arrow",
        "domain" : {
            "tag" : "labeledProduct",
            "fields" : {
                "id" : {
                    "tag" : "scalar",
                    "name" : "i64"
                }
            }
        },
        "codomain" : {
            "tag" : "unlabeledProduct",
            "items" : [
                {
                    "tag" : "struct",
                    "name" : "Event",
                    "fields" : {
                        "success" : {
                            "tag" : "scalar",
                            "name" : "bool"
                        },
                        "start_date" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "err_msg" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "title" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "logo" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "id" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        },
                        "end_date" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "event_type" : {
                            "tag" : "scalar",
                            "name" : "string"
                        },
                        "status" : {
                            "tag" : "scalar",
                            "name" : "i64"
                        }
                    }
                }
            ]
        }
    },
    "names" : {
        "relay" : "-relay-",
        "getDataSrv" : "getDataSrv",
        "callbackSrv" : "callbackSrv",
        "responseSrv" : "callbackSrv",
        "responseFnName" : "response",
        "errorHandlingSrv" : "errorHandlingSrv",
        "errorFnName" : "error"
    }
},
        script
    )
}

'''
'''--- frontend/src/context/config.context.js ---
import react, { createContext } from 'react'

export const ConfigContext = createContext()
'''
'''--- frontend/src/context/wallet.context.js ---
import { createContext } from 'react'

export const NearWalletContext = createContext({
  isSignedIn: false,
  signIn: () => {},
  signOut: () => {}
})
'''
'''--- frontend/src/data/schedules.json ---
{
  "08 Dec 2022": [
    {
      "title": "Bootcamp Briefing",
      "speakers": [
        { "pic": "", "name": "Iqbal Baharum" },
        { "pic": "", "name": "Constance" }
      ],
      "time": "3:30 PM - 4:30 PM"
    }
  ],
  "09 Dec 2022": [
    {
      "title": "Hackathon Opening & Briefing",
      "speakers": [
        { "pic": "", "name": "Iqbal Baharum" },
        { "pic": "", "name": "Ann Liew" },
        { "pic": "", "name": "Constance" }
      ],
      "time": "3:30 PM - 4:30 PM"
    }
  ],
  "12 Dec 2022": [
    {
      "title": "Idea Brainstorming Session",
      "speakers": [{ "pic": "", "name": "Iqbal Baharum" }],
      "time": "8:30 PM"
    },
    {
      "title": "Team Formation",
      "speakers": [{ "pic": "", "name": "Iqbal Baharum" }],
      "time": "9:00 PM"
    }
  ],
  "14 Dec 2022": [
    {
      "title": "Web3 = Decentralised Applications?",
      "speakers": [
        { "pic": "", "name": "Jon Hook" },
        { "pic": "", "name": "Riqi" },
        { "pic": "", "name": "EY" }
      ],
      "time": "8:00 PM - 9:00 PM"
    }
  ],
  "16 Dec 2022": [
    {
      "title": "Submission Due",
      "speakers": [],
      "time": "2:00 PM"
    },
    {
      "title": "Voting start",
      "speakers": [],
      "time": "6:00 PM"
    }
  ],
  "17 Dec 2022": [
    {
      "title": "Voting end",
      "speakers": [],
      "time": "6:00 PM"
    }
  ],
  "18 Dec 2022": [
    {
      "title": "Taking off in Web3",
      "speakers": [
        { "pic": "", "name": "Jay (Leonis Capital)" },
        { "pic": "", "name": "Kyle (McKinsey)" },
        { "pic": "", "name": "Danish (AWS)" }
      ],
      "time": "11:00 AM - 12:00 PM"
    },
    {
      "title": "Demo day",
      "speakers": [{ "pic": "", "name": "Ann Liew" }],
      "time": "2:00 PM - 5:00 PM"
    }
  ]
}

'''
'''--- frontend/src/data/tutorials.json ---
[
  {
    "id": 1,
    "chain": "NEAR",
    "title": "Hello World!",
    "difficulty": "beginner",
    "description": "A simple tutorial to familiar yourself with NEAR",
    "content": "QmbevhwqRxQFUTFxyFqPAHqippHHhJM4ynePJ5D7uAMTdU"
  },
  {
    "id": 2,
    "chain": "NEAR",
    "title": "Count",
    "difficulty": "beginner",
    "description": "Decentralized app that stores a number and exposes methods to increment, decrement, and reset it",
    "content": "QmXYGGZcBqFgTfzkYTybVqs2VT8jqd8DK2AK7P7V7RuQNz"
  },
  {
    "id": 3,
    "chain": "NEAR",
    "title": "P2P Crowdfunding DAPP",
    "difficulty": "beginner",
    "description": "P2P Crowdfunding DAPP",
    "content": "QmYxd8u7QWBksSRC57s2kxjht7KCviWA2rHPbqZsmdBVJq"
  }
]

'''
'''--- frontend/src/hooks/useFluence.js ---
import { useContext, createContext, useState, useEffect } from "react";

import { Fluence } from "@fluencelabs/fluence";
import { krasnodar } from "@fluencelabs/fluence-network-environment";

const FluenceContext = createContext()

export const FluenceProvider = ({ children }) => {
  const [isConnected, setIsConnected] = useState(false);

  useEffect(() => {
    if(!isConnected) {
      connect(krasnodar[0])
    }
  }, [])

  const connect = async(relayPeerId) => {
    // try {
    //   await Fluence.start({ connectTo: relayPeerId });
    //   setIsConnected(true);
    // } catch (err) {
    //   console.log("Peer initialization failed", err);
    // }
  }

  const value = {
  }

  return <FluenceContext.Provider value={value}>{children}</FluenceContext.Provider>;
}

export const useFluence = () => {
  return useContext(FluenceContext)
}
'''
'''--- frontend/src/hooks/useIpfs.js ---
import { useState, useEffect } from 'react'
import { getProperty } from 'dot-prop'

export default function useIpfs (ipfs, cmd, opts) {
  const [res, setRes] = useState(null)
  useEffect(() => {
    callIpfs(ipfs, cmd, setRes, opts)
    initIpfs(defaultB)
  }, [ipfs, cmd, opts])
  return res
}

async function callIpfs (ipfs, cmd, setRes, ...opts) {
  if (!ipfs) return null
  console.log(`Call ipfs.${cmd}`)
  const ipfsCmd = getProperty(ipfs, cmd)
  console.log(ipfsCmd)
  const res = await ipfsCmd(...opts)
  console.log(`Result ipfs.${cmd}`, res)
  setRes(res)
}
'''
'''--- frontend/src/hooks/useIpfsFactory.js ---
import ipfsClient from "ipfs-http-client";
import { useEffect, useState } from "react";

let ipfs = null;

export default function useIpfsFactory() {
  const [isIpfsReady, setIpfsReady] = useState(Boolean(ipfs));
  const [ipfsInitError, setIpfsInitError] = useState(null);

  useEffect(() => {
    startIpfs();
    return function cleanup() {
      if (ipfs && ipfs.stop) {
        console.log("Stopping IPFS");
        ipfs.stop().catch((err) => console.error(err));
        ipfs = null;
        setIpfsReady(false);
      }
    };
  }, []);

  async function startIpfs() {
    if (ipfs) {
      console.log("IPFS already started");
    } else if (window.ipfs && window.ipfs.enable) {
      console.log("Found window.ipfs");
      ipfs = await window.ipfs.enable();
    } else {
      try {
        console.log("IPFS Started");

        const projectId = "2HDrQBzBA6e4Elmdwhpa6Mjg1Qs";
        const projectSecret = "a8a2d7f469b2e8dbfc4dece05bdde035";

        const auth =
          "Basic " +
          Buffer.from(projectId + ":" + projectSecret).toString("base64");
        ipfs = await ipfsClient({
          host: "ipfs.infura.io",
          port: 5001,
          protocol: "https",
          headers: {
            authorization: auth,
          },
        });
      } catch (error) {
        console.error("IPFS init error:", error);
        ipfs = null;
        setIpfsInitError(error);
      }
    }

    setIpfsReady(Boolean(ipfs));
  }

  return { ipfs, isIpfsReady, ipfsInitError };
}

'''
'''--- frontend/src/hooks/useLocalStorage.js ---
import { useState } from "react";

export const useLocalStorage = (keyName, defaultValue) => {
  const [storedValue, setStoredValue] = useState(() => {
    try {
      const value = window.localStorage.getItem(keyName);

      if (value) {
        return JSON.parse(value);
      } else {
        window.localStorage.setItem(keyName, JSON.stringify(defaultValue));
        return defaultValue;
      }
    } catch (err) {
      return defaultValue;
    }
  });

  const setValue = (newValue) => {
    try {
      window.localStorage.setItem(keyName, JSON.stringify(newValue));
    } catch (err) {}
    setStoredValue(newValue);
  };

  return [storedValue, setValue];
};

'''
'''--- frontend/src/hooks/useWallet.js ---
import { createContext, useContext, useEffect, useMemo, useState } from "react";
import { useNavigate } from "react-router-dom";

// near api js
import { keyStores, providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';
import { beApi } from "../services/api";

const WalletContext = createContext()

export const WalletProvider = ({ children }) => {
  const [wallet, setWallet] = useState()
  const [accountId, setAccountId] = useState('')
  const [profile, setProfile] = useState()
  const [walletSelector, setWalletSelector] = useState()
  const [contractId, setContractId] = useState(null)

  useEffect(() => {
    if(!walletSelector) {
      startUp()
    }
  }, [walletSelector])

  const startUp = async (network = 'testnet') => {
    const walletSelector = await setupWalletSelector({
      network: network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    setWalletSelector(walletSelector)

    const isSignedIn = walletSelector.isSignedIn();

    if (isSignedIn) {
      const wallet = await walletSelector.wallet();
      const accountId = walletSelector.store.getState().accounts[0].accountId;
      

      const keystore = new keyStores.BrowserLocalStorageKeyStore()
      const keyPair = await keystore.getKey(network, accountId)

      // get nonce
      const nonce = await getNonce(accountId)

      if(nonce.data) {
        const msg = Buffer.from(nonce.data);
        const { signature } = keyPair.sign(msg)

        const data = {
          account: accountId,
          publicAddress: keyPair.publicKey.toString(),
          signature: Buffer.from(signature).toString('base64')
        }

        // try {
        //   const response = await beApi({
        //     method: 'POST',
        //     url: '/auth/near',
        //     data
        //   })

        //   window.localStorage.setItem('token', response.data.jwt || '')

        // } catch(e) {
        //   console.log(e)
        // }
        
        setWallet(wallet)
        setAccountId(accountId)
      }
    }

    return isSignedIn;
  }

  // Sign-in method
  const signIn = (contractId) => {

    setContractId(contractId)
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(walletSelector, { contractId, description });
    modal.show();
  }

  const getNonce = async (accountId) => {
    return beApi({
      method: 'GET',
      url: `/auth/nonce?address=${accountId}`
    })
  }

  // Sign-out method
  const signOut = () => {
    wallet.signOut();

    setWallet(null)
    setAccountId(null)
    setContractId(null)
    
    window.location.replace(window.location.origin + window.location.pathname);
  }

  const viewMethod = async (contractId, method, args = {}) => {
    if(!walletSelector) { return }

    const { network } = walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });

    return JSON.parse(Buffer.from(res.result).toString());
  }

  const callMethod = async ({ contractId, method, args = {}, gas = process.env.THIRTY_TGAS, deposit = process.env.DEPOSIT }) => {
    // Sign a transaction with the "FunctionCall" action
    console.log(args, JSON.stringify(args))
    return await wallet.signAndSendTransaction({
      signerId: accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  const value = {
    wallet,
    accountId,
    contractId,
    startUp,
    signIn,
    signOut,
    viewMethod,
    callMethod
  }

  return <WalletContext.Provider value={value}>{children}</WalletContext.Provider>;
}

export const useWallet = () => {
  return useContext(WalletContext);
};
'''
'''--- frontend/src/nft_contracts/endorsement.js ---
export class Endorsement {
    constructor({ contractId, walletToUse }) {
      this.contractId = contractId;
      this.wallet = walletToUse;    
    }
    
    async nft_token(tokenId) {
        return await this.wallet.viewMethod({ contractId: this.contractId, method: 'nft_token' , args:{ tokenid : tokenId}});
    }

    async nft_metadata() {
        return await this.wallet.viewMethod({ contractId: this.contractId, method: 'nft_metadata' });
    }

    async nft_mint(Metadata, receiverId) {
        return await this.wallet.callMethod({ contractId: this.contractId, method: 'nft_mint', args: { metadata: Metadata, receiver_id: receiverId } });
    }

    async owner_tokens(account_id) {
        return await this.wallet.viewMethod({ contractId: this.contractId, method: 'nft_tokens_for_owner' , args:{ account_id : account_id, from_index:"0", limit:"200"}});
    }
}
'''
'''--- frontend/src/nft_contracts/glory-badge.js ---
export class GloryBadge {
    constructor({ contractId, walletToUse }) {
      this.contractId = contractId;
      this.wallet = walletToUse;    
    }
    
    async nft_token(tokenId) {
        return await this.wallet.viewMethod({ contractId: this.contractId, method: 'nft_token' , args:{ token_id : tokenId}});
    }

    async nft_metadata() {
        return await this.wallet.viewMethod({ contractId: this.contractId, method: 'nft_metadata' });
    }

    async nft_mint(Metadata, receiverId) {
        return await this.wallet.callMethod({ contractId: this.contractId, method: 'nft_mint', args: { metadata: Metadata, receiver_id: receiverId } });
    }

    async bulk_nft_mint(Metadata, list) {
        return await this.wallet.callMethod({ contractId: this.contractId, method: 'bulk_nft_mint', args: { metadata: Metadata, list: list } });
    }

    async owner_tokens(account_id) {
        return await this.wallet.viewMethod({ contractId: this.contractId, method: 'nft_tokens_for_owner' , args:{ account_id : account_id, from_index:"0", limit:"200"}});
    }
}
'''
'''--- frontend/src/pages/IssueNFT/BatchMint.js ---
import React ,{useEffect, useState} from "react";
import { Link } from "react-router-dom";
import bg from "../../../assets/img/globe2.png";
import { GloryBadge } from "../../nft_contracts/glory-badge";
import { useNavigate } from 'react-router-dom';
import { check } from "prettier";

var addresses = [
  {
    address: "sordgom_1.testnet",
    date: "09 Nov 2022 06:35:47 GMT",
  },
  {
    address: "sordgom_2.testnet",
    date: "09 Nov 2022 06:35:47 GMT",
  },
];

/*TODO
* Fetch list of addresses...
* Fetch token information
*/
function BatchMint({wallet}) {
  const navigate = useNavigate();
  const contract = new GloryBadge({contractId: process.env.GLORY_BADGE_CONTRACT, walletToUse: wallet });

  //States of the components
  const [list, setList] = useState([]);
  const [log, setLog] = useState();
  const [isClicked, setIsClicked] = useState();
  const [address, setAddress] = useState();

  //State that tracks whether checkboxes are ;clicked or not
  const [checkedState, setCheckedState] = useState(
    new Array(addresses.length).fill(false) //Change 4 to the number of address we fetch 
  );

   // Check if there is a transaction hash in the URL
   const urlParams = new URLSearchParams(window.location.search);
   const logs = { txh : urlParams.get("transactionHashes"), errorCode: urlParams.get("errorCode"), errorMessage: urlParams.get("errorMessage")};
   async function checkTxh() {
     if(logs.errorCode){
       console.log(`Error: ${logs.errorCode}`);
       return ; 
     }
     if(logs.txh == null){
      return ; 
     }
     // Get result from the transactions
     let result =await wallet.getTransactionResult(logs.txh);
     setLog(result)
     navigate('/'); //Not sure we navigate to where after this
   }

  //Creates a boolean state for each address(returns checked)
  const handleOnClick = (index) => {
    const updatedCheckedState = checkedState.map((val, key) =>{
      if (key === index) {
        return !val;
      } else {
        return val;
      }
    });
    setCheckedState(updatedCheckedState);
  };

  //Upload wallet address
  const upload = (e) => {
    addresses.push(e.target.value);
  }
  
  //The data is supposed to be fetched from db
  async function handleSubmit(){
    try{
      await contract.bulk_nft_mint(
        {
            title: "Test",
            description: "Test",
            media : "https://media.giphy.com/media/6SZ5iwN70lJyOdLZZH/giphy.gif",
            issued_at : new Date().toISOString() ,
            expires_at : "" ,
            starts_at : "" ,
            extra: "1" //This is supposed to reference who's minting (1 for owner, 2 for claimers  or something)
        },  
        list
      )     
    }catch(error){
      console.log(error)
    }
  }

  useEffect(()=> {
    wallet.createAccessKeyFor = process.env.GLORY_BADGE_CONTRACT
    checkTxh();
    console.log(addresses)
  },[])

  //Add the checked address to a list of total addresses
  useEffect(() => {
    let newlist = [];
    checkedState.map((val, key) =>{
      if (val){
        newlist.push(addresses[key].address)
      }
    });
    setList(newlist);
  },[checkedState]);

  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="mx-[20rem] p-[5rem]">
          <div className="bg-[#DAFF3E] rounded-[10px] p-[3rem] px-[4rem] font-robotoMono">
            <form>
              <div className="flex flex-row justify-between">
                <div className="flex flex-col">
                  <button
                    type="button"
                    className="block w-full px-4 py-2 mt-2 text-center text-gray-700 bg-white border rounded-md"
                    onClick={() => setIsClicked(!isClicked)}
                  >
                    Upload Wallet Address
                  </button>
                </div>
                <div className="flex flex-col">
                  <button
                    type="button"
                    className="block w-full px-4 py-2 mt-2 text-center text-gray-700 bg-white border rounded-md"
                  >
                    <Link to="/indexissuenft">Create New Badges</Link>
                  </button>
                </div>
              </div>
              <div className="block w-full px-[3rem] py-2 mt-2 text-center text-gray-700 bg-white border rounded-md">
                <div className="flex flex-row text-2xl font-bold justify-center m-[1rem]">
                  Select and Mint in Batch
                </div>
                { isClicked ? 
                <div className="flex flex-row my-[2rem]">
                  <input type="text" className="bg-white rounded-md border-2 text-xs p-1"  onChange={(e) => setAddress(e.target.value)}/>
                  <button
                    type="button"
                    className="bg-white rounded-md border-2 text-xs p-1"
                    onClick={() => {addresses.push({
                      address: address,
                      date: new Date().toUTCString(),
                    },);
                  setIsClicked(!isClicked)}}
                  >
                    Add Address
                  </button>
                </div>
                :
                <div className="flex flex-row my-[2rem]">
                  <button
                    type="button"
                    className="bg-white rounded-md border-2 text-xs p-1"
                  >
                    Select All
                  </button>
                </div>
                }
                <div className="flex flex-col text-sm">
                  <div className="flex flex-row justify-between mb-4">
                    <div className="ml-[1rem]">Wallet Address</div>
                    <div className="mr-[5rem]">Request Time</div>
                  </div>
                  {
                    addresses.map((val,key) => {
                      return (
                        <div className="flex flex-row justify-between" key={key}>
                          <div>
                              <input type="checkbox" className="mr-2" onClick={() => handleOnClick(key)}/>
                              {val.address}
                          </div>
                          <div>{val.date}</div>
                        </div>
                      );
                    })
                  }
                </div>

                <div className="flex flex-row my-[2rem]">
                  <button
                    type="button"
                    className="bg-black text-[#DAFF3E] rounded-full px-3 py-1 text-sm"
                    onClick={handleSubmit}
                  >
                    Mint and Distribute Badges
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}

export default BatchMint;

'''
'''--- frontend/src/pages/IssueNFT/IndexIssueNft.js ---
import React from "react";
import IssueNftForm from "./IssueNftForm";

function IndexIssueNft({wallet}) {
  return (
    <div>
      <IssueNftForm wallet={wallet}/>
    </div>
  );
}

export default IndexIssueNft;

'''
'''--- frontend/src/pages/IssueNFT/IssueNftForm.js ---
import React, { useEffect, useState } from "react";
import { Link } from "react-router-dom";
import bg from "../../../assets/img/globe2.png";
import { GloryBadge } from "../../nft_contracts/glory-badge";
import { useNavigate } from "react-router-dom";

/*TODO
 * GENERATE TOKEN IDS
 */

function IssueNftForm({ wallet }) {
  const navigate = useNavigate();
  const contract = new GloryBadge({contractId: process.env.GLORY_BADGE_CONTRACT, walletToUse: wallet });

  const [log, setLog] = useState();
  const [name, setName] = useState();
  const [description, setDescription] = useState();
  const [artwork, setArtwork] = useState();
  const [startDate, setStartDate] = useState();
  const [endDate, setEndDate] = useState();

  /*
  * This method will check for params in the link that near-wallet-selector returns 
  * If the transaction is successful (i.e the only param is transaction hash), then it'll push a post request to our BE
  */
  const urlParams = new URLSearchParams(window.location.search);
  const logs = {
    txh: urlParams.get("transactionHashes"),
    errorCode: urlParams.get("errorCode"),
    errorMessage: urlParams.get("errorMessage"),
  };
  async function checkTxh() {
    if (logs.errorCode) {
      console.log(`Error: ${logs.errorCode}`);
      return;
    }
    if (logs.txh == null) {
      return;
    }
    
    // Get result from the transactions
    let result =await wallet.getTransactionResult(logs.txh);
    setLog(result)

    let data = await getMetadata(result?.data[0].token_ids[0])
    //We only have issued date for now, so I'm sending it twice
    await createEvent(data.metadata?.title, data.metadata?.description, data.metadata?.Date, data.metadata?.Date) 
    .then(navigate(`/nftlink?link=${logs.txh}`));
  }

  const createEvent = async (name,description, startDate, endDate) => {
    await fetch('https://goldfish-app-xsljf.ondigitalocean.app/event',{
      method: 'POST',
      body: JSON.stringify(
      {
        "name": name,
        "description": description,
        "startDate": startDate,
        "expiryDate": endDate
      }),
      headers: {
        'Content-type': 'application/json',
      },
    }).then((res) => {console.log(res)})
  }

  //Get token metadata
  async function getMetadata(token_id) {
    return await contract.nft_token(token_id);
  }

  //Mint nft
  async function handleSubmit(){
    try{
      // if(!name || !artwork || !startDate || !endDate) {
      //   console.log('Somethings missing');
      //   return ; 
      // }
      await contract.nft_mint(
        'http://localhost:1234/indexissuenft?status=success',
        {
          title: name,
          description: description,
          media: artwork,
          issued_at: new Date().toISOString(),
          expires_at: endDate,
          starts_at: startDate,
          extra: "Creator", //This is supposed to reference who's minting (1 for owner, 2 for claimers  or something)
        },
        wallet.accountId
      )
    }catch(error){
      console.log(error)
    }
  }

  useEffect(()=> {
    wallet.createAccessKeyFor = process.env.GLORY_BADGE_CONTRACT //Change contract address for the current wallet
    checkTxh();
  }, []);

  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="mx-[20rem] p-[5rem]">
          <div className="bg-[#DAFF3E] rounded-[10px] font-robotoMono p-[2rem] px-[6rem]">
            <p className="text-[4vh] font-bold text-center text-black font-robotoMono mb-[2rem]">
              Issue a New Glory Badge
            </p>
            <div className="text-sm">
              <form>
                <div className="mb-3 text-left">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-bold text-[#000000]"
                  >
                    Name of the Badge
                  </label>
                  <input
                    type=""
                    onChange={(e) => setName(e.target.value)}
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                </div>
                <div className="my-2 text-left">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-bold text-[#000000]"
                  >
                    Description (What’s so special about this Badge?)
                  </label>
                  <input
                    type=""
                    onChange={(e) => setDescription(e.target.value)}
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                </div>
                <div className="mb-2 text-left">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-semibold text-black"
                  >
                    Artwork
                  </label>
                  <input
                    type="" //Changed "file" to "" temporarily till we implement IPFS
                    onChange={(e) => setArtwork(e.target.value)}
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                  <div className="text-sm">
                    Mandatory: PNG or GIF format <br />
                    Recommended: size less than 200KB (Max. 4MB)
                  </div>
                </div>
                <div className="mt-[2rem] text-left flex flex-row justify-between">
                  <div className="flex flex-col">
                    <label
                      htmlFor="endorsing"
                      className="block text-sm font-semibold text-black"
                    >
                      Start Date
                    </label>
                    <input
                      type="date"
                      onChange={(e) => setStartDate(e.target.value)}
                      className=" block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                    />
                  </div>
                  <div className="flex flex-col">
                    <label
                      htmlFor="endorsing"
                      className="block text-sm font-semibold text-black"
                    >
                      Expiry Date
                    </label>
                    <input
                      type="date"
                      onChange={(e) => setEndDate(e.target.value)}
                      className=" block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                    />
                  </div>
                </div>
                <div className="mt-8">
                  <button
                    type="button"
                    onClick={handleSubmit}
                    className="bg-white px-4 py-1 rounded-full font-bold  text-gray-700 border  focus:border-blue-400 focus:ring-blue-400 focus:outline-none focus:ring focus:ring-opacity-60"
                  >
                    SUBMIT
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default IssueNftForm;

'''
'''--- frontend/src/pages/IssueNFT/NftLink.js ---
import React, { useEffect, useState } from "react";
import bg from "../../../assets/img/globe2.png";
import { useSearchParams } from "react-router-dom";

function NftLink() {
  const [searchParams, setSearchParams] = useSearchParams();

  const [copyText, setCopyText] = useState("");
  const onCopy = () => {
    navigator.clipboard.writeText(copyText);
  };

  useEffect(() => {
    let txh = searchParams.get("link")
    setCopyText(`http://localhost:1234/claim?txh=${txh}`)
    console.log(navigator)
  },[])

  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="mx-[20rem] p-[5rem]">
          <div className="bg-[#DAFF3E] rounded-[10px] font-robotoMono p-[3rem] px-[6rem]">
            <p className="text-[4vh] font-bold text-center text-black font-robotoMono ">
              Issue a New Glory Badge
            </p>
            <div>
              <form>
                <div className="my-[10rem]">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-bold text-[#000000] mb-3"
                  >
                    Here’s your Glory Badge Link, share with your audience :D
                  </label>
                  <div>
                    <input
                      type="text"
                      className="block w-full px-4 py-2 mt-2 text-center text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                      value={copyText}
                      onChange={(e) => setCopyText(e.target.value)}
                    />
                  </div>
                  <button
                    type="button"
                    className="text-sm mt-3 js-copy-to-clip"
                    onClick={onCopy}
                  >
                    Click to Copy
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default NftLink;

'''
'''--- frontend/src/pages/JobList/Article/index.js ---
import React, { useState } from "react";

export default function ArticleCard({ job }) {
  const [applied, setApply] = useState(false);

  function onClickApply() {
    if (job.status === 0) {
      setApply(true);
    }
  }
  const [refered, setRefer] = useState(false);

  function onClickRefer() {
    if (job.refer === 0) {
      setRefer(true);
    }
  }

  return (
    <article className="rounded-lg border border-gray-100 p-4 shadow-sm transition hover:shadow-lg sm:p-6">
      {applied && (
        <div className="absolute w-[303px] h-[229px] bg-[#DAFF3E] rounded-2xl flex justify-center items-center">
          <p className="text-3xl font-semibold">Applied 🥳</p>
        </div>
      )}
      {refered && (
        <form className="absolute bg-[#DAFF3E] boxShadow rounded-2xl p-8 w-[auto] h-[350px] ">
          <div className="mb-2 text-left mt-4">
            <label
              htmlFor="email"
              className="block text-2xl font-semibold text-black "
            >
              What do you have in mind
            </label>
            <input
              type=""
              required
              placeholder="Paste Profile Link"
              className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            />
          </div>
          <div className="mb-2 text-left mt-4">
            <label
              htmlFor="email"
              className="block text-base font-medium text-black "
            >
              No Profile Yet?
            </label>
            <input
              type=""
              required
              placeholder="Enter Email"
              className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            />
          </div>
          <div className="mt-8 flex justify-center items-center">
            <button
              type="button"
              className="bg-black border-black rounded-full px-4 py-1 font-bold text-[#DAFF3E] text-base"
            >
              Submit
            </button>
          </div>
        </form>
      )}
      <div className="flex flex-row justify-between text-left">
        <div>
          <p className="text-[#797979] text-base font-medium mb-2">
            {job.company}
          </p>
          <p className="text-black text-xl font-medium">{job.title}</p>
        </div>
        <div>
          <img src={job.logo} alt="" />
        </div>
      </div>

      <div className="flex flex-row justify-between my-4 text-left">
        <p className="text-[#D7F050] text-base font-medium">
          ${job.salary_min} - ${job.salary_max}
        </p>
        <p className="text-black text-base font-medium mr-3">REMOTE</p>
      </div>

      <p className="mt-2 text-left text-sm leading-relaxed text-gray-500 line-clamp-3">
        {job.description}
      </p>

      <div className="mt-8 justify-between flex">
        <button
          type="button"
          onClick={onClickApply}
          className="border-2 rounded-full px-4 py-2 font-bold bg-[#DAFF3E] border-black text-black hover:bg-[#DAFF3E]"
        >
          {job.status === 0 ? "FAST APPLY" : "Check Status"}
        </button>
        <a className="border-2 rounded-full px-4 py-2 font-bold bg-black text-[#DAFF3E]">
          REFER & GET {job.bounty_amount} {job.bounty_currency}
        </a>
      </div>
    </article>
  );
}

'''
'''--- frontend/src/pages/JobList/IndexJobListing.js ---
import React, { createContext, useState } from "react";
import ListJobForm from "./ListJobForm";
import Testimonial from "./Testimonial";
import JobFormbg from "../../../assets/img/jobformbg2.png";
import useIpfsFactory from "../../hooks/useIpfsFactory";
import { useWallet } from "../../hooks/useWallet";

export const JobCreationFormContext = createContext()

function IndexJobListing() {

  const { ipfs } = useIpfsFactory()
  const { callMethod } = useWallet()

  const [logoImg, setLogoImg] = useState()
  
  const [form, setForm] = useState({
    position: '',
    description: '',
    company: '',
    skills: '',
    salary_max: 0,
    salary_min: 0,
    salary_currency: 'USD',
    bounty_amount: 0,
    bounty_currency: 'NEAR',
    location: '',
    email: '',
    website: '',
    logo: '',
    expired: 1671337675,
  })

  const handleChange = (evt) => {
    const { type, name, value } = evt.target

    switch(name) {
      default:
        setForm({
          ...form,
          [name]: type === 'number' ? parseInt(value) : value
        })
        break
    }
  }

  const onHandleSubmit = async (evt) => {
    evt.preventDefault();
    try {

      if(logoImg) {
        const cid = await ipfs.add(logoImg)
        setForm({
          ...form,
          logo: `ipfs://${cid[0].hash}`
        })

        if(logoImg) {
          const res = await callMethod({
            contractId: process.env.CONTRACT_NAME,
            method: 'new_job',
            args: {
              detail: form
            }
          })

          console.log(res)
        }
      }
      
    } catch(e) {
      console.log(e)
    }
  }

  const onFileChange = (e) => {
    setLogoImg(e.target.files[0])
  }
  
  return (
    <JobCreationFormContext.Provider value={{form, setForm, handleChange, onFileChange}}>
      <div className="relative min-h-screen overflow-x-hidden bg-[#DAFF3E]">
        <div
          className="w-full h-full"
        >
          <div className="mx-[16rem] py-[3rem] font-robotoMono">
            <div className="text-[50px] font-bold text-center py-3 px-3">
              <p>List A Web3 Job</p>
            </div>

            <div className="mt-[3rem]">
                <div className="flex flex-row">
                  <div className="basis-3/4">
                    <ListJobForm />
                  </div>
                  <div className="basis-1/4">
                    <Testimonial />
                  </div>
                </div>
                {/* <div className="w-full -mt-[11rem] ml-[25rem]">
                  <img src={JobFormbg} alt="" className="scale-[0.8]" />
                </div> */}

                <div className="flex  justify-center">
                  <div>
                    <button
                      type="button"
                      className="bg-black text-[#DAFF3E] px-5 py-1 rounded-full"
                      onClick={onHandleSubmit}
                    >
                      SUBMIT
                    </button>
                  </div>
                </div>
            </div>
          </div>
        </div>
      </div>
    </JobCreationFormContext.Provider>
  );
}

export default IndexJobListing;

'''
'''--- frontend/src/pages/JobList/ListJobDisplay.js ---
import React, { useContext, useEffect, useState } from "react";
// import { Link } from "react-router-dom";
import Navbar from "../../components/Navbar";

import ArticleCard from "./Article/index";
import Graphic1 from "../../../assets/img/bowl2.png";
import Graphic2 from "../../../assets/img/graphic.png";
import Search from "../../../assets/img/search.png";
import { ConfigContext } from "../../context/config.context";
import { useWallet } from "../../hooks/useWallet";
import { useNavigate } from "react-router-dom";

function classNames(...classes) {
  return classes.filter(Boolean).join(" ");
}

function ToggleFilter(props) {
  return (
    <>
      <label htmlFor={props.label} className="relative h-6 w-14 cursor-pointer">
        <input type="checkbox" id={props.label} className="peer sr-only" />

        <span className="absolute inset-0 rounded-full bg-gray-300 transition peer-checked:bg-black" />

        <span className="absolute inset-0 m-1 h-4 w-6 rounded-full bg-white transition peer-checked:translate-x-6" />
      </label>
      <span className="px-2 text-sm">{props.label}</span>
    </>
  );
}

function SearchTag(prop) {
  return (
    <a
      className={classNames(
        prop.tag.selected
          ? "bg-black text-[#DAFF3E]"
          : "border-black text-black hover:bg-[#DAFF3E]",
        "border-2 rounded-full px-2 py-1 font-bold"
      )}
      key={prop.tag.name}
      href="#"
    >
      {prop.tag.name}
    </a>
  );
}

function JobsList() {

  const { viewMethod } = useWallet()
  const navigate = useNavigate()

  const goToJobCreationPage = () => {
    navigate('/job/create')
  }

  const goToRentalPage = () => {
    navigate('/user/rental')
  }

  const [tags] = useState([
    { name: "Full Stack Dev", selected: false },
    { name: "Solidity", selected: false },
    { name: "Rust", selected: false },
    { name: "Tokenomics", selected: false },
    { name: "Javascript", selected: false },
    { name: "Product Manager", selected: false },
  ]);

  const [jobs, setJobs] = useState([]);

  useEffect(() => {
    
    const getAllJobs = async () => {
      const respond = await viewMethod('seed.bonebon.testnet', 'get_all_jobs')
      if(respond) {
        setJobs(respond.map((e) => e.detail))
      } else {
        setJobs([])
      }
    }

    getAllJobs()

  }, [setJobs, viewMethod])

  return (
    <>
      <div className="mx-8 font-robotoMono">
        <div className="flex flex-row justify-center w-full mt-[2rem]">
          <a onClick={goToJobCreationPage} href="" className="flex flex-col bg-[#DAFF3E] text-black w-[1077px]  md:h-[200px] justify-center items-center  mr-4 rounded-3xl">
            <p className="font-bold text-4xl">LIST JOB</p>
            <p className="font-bold text-normal">Unlock 7+ million talents</p>

            <img
              src={Graphic1}
              alt=""
              className="absolute scale-[0.3] mt-[3.7rem]"
            />
          </a>

          <a href="#" onClick={goToRentalPage}  className="static flex flex-col bg-black text-[#DAFF3E] w-[1077px]  md:h-[200px] justify-center items-center rounded-3xl">
            <p className="font-bold text-4xl">RENT TALENT</p>
            <p className="font-bold text-normal">
              Rent our dev team to churn out your dream project
            </p>
            <img
              src={Graphic2}
              alt=""
              className="absolute scale-[0.3] mt-[3.7rem] ml-[13.8rem]"
            />
          </a>
        </div>
        <div className="flex flex-row w-full mt-8">
          <div className="relative flex justify-start w-[50%]">
            <input
              type="search"
              name="Search"
              placeholder="Skill or Location"
              className="text-left w-full py-2 pl-10 text-sm rounded-md border-solid border-2 border-black focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            />
            <span className="absolute inset-y-0 left-0 flex items-center py-4">
              <button
                type="submit"
                className="p-2 focus:outline-none focus:ring"
              >
                <img src={Search} alt="" className="w-5 h-5" />
              </button>
            </span>
          </div>
          <div className="flex flex-row pl-4 justify-between">
            <div className="flex flex-row items-center px-1">
              <ToggleFilter label="Remote" />
            </div>
            <div className="flex flex-row items-center px-1">
              <ToggleFilter label="Full Time" />
            </div>
            <div className="flex flex-row items-center px-1">
              <ToggleFilter label="Freelance" />
            </div>
            <div className="flex flex-row items-center px-1">
              <ToggleFilter label="Internship" />
            </div>
          </div>
        </div>
        <div className="flex items-center gap-1 font-robotoMono mt-4">
          {tags.map((tag) => (
            <SearchTag tag={tag} key={tag.name} />
          ))}
        </div>
        <div className="my-4 text-[#EDEDED]">
          <hr />
        </div>

        <div className="grid grid-cols-3 gap-4 w-full mt-8 mb-4">
          {jobs.map((job) => (
            <ArticleCard job={job} key={job.name} />
          ))}
        </div>
      </div>
    </>
  );
}
export default JobsList;

'''
'''--- frontend/src/pages/JobList/ListJobForm.js ---
import React, { useContext } from "react";
import { JobCreationFormContext } from "./IndexJobListing";
import {setProperty} from 'dot-prop'

function ListJobForm() {

  const jobCreationFormContext = useContext(JobCreationFormContext)

  return (
    <form>
      <div className="mr-[3rem] px-[3rem] text-left">
        {/* -------------------------------------------------------- 1 ----------------------------------------------------------- */}
        <div className="mb-3 ">
          <label
            htmlFor="position"
            className="block font-semibold text-left text-lg  text-gray-800 px-2"
          >
            Position
          </label>
          <input
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="position"
            value={jobCreationFormContext.form.position}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* -------------------------------------------------------- 2 ----------------------------------------------------------*/}
        <div className=" mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Description
          </label>
          <div>
            <textarea 
              name="description"
              className="resize-y rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              value={jobCreationFormContext.form.description}
              onChange={jobCreationFormContext.handleChange}
            />
          </div>
        </div>
        {/* ------------------------------------------------------- 3 ----------------------------------------------------------*/}
        <div className="mb-[5rem]">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Company
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="company"
            value={jobCreationFormContext.form.company}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* ------------------------------------------------------- 4 ----------------------------------------------------------*/}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Skill Required (choose from the list)
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="skills"
            value={jobCreationFormContext.form.skills}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* ------------------------------------------------------- 5 ----------------------------------------------------------*/}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Other Skills Required
          </label>
          <input
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="otherskills"
            value={jobCreationFormContext.form.otherskills}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* ------------------------------------------------------ 6 ----------------------------------------------------------*/}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Salary Range
          </label>
          <div className="flex flex-row">
            <div className="basis-2/4 mr-3">
              <input
                type="number"
                className="rounded-md text-sm block w-full px-5 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                placeholder="Min Yearly Salary in USD"
                name="salary_min"
                value={jobCreationFormContext.form.salary_min}
                onChange={jobCreationFormContext.handleChange}
              />
            </div>
            <div className="basis-2/4">
              <input
                type="number"
                className="rounded-md text-sm block w-full px-5 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                placeholder="Max Yearly Salary in USD"
                name="salary_max"
                value={jobCreationFormContext.form.salary_max}
                onChange={jobCreationFormContext.handleChange}
              />
            </div>
          </div>
        </div>
        {/* ----------------------------------------------------- 7 ---------------------------------------------------------- */}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Location
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="location"
            value={jobCreationFormContext.form.location}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* ----------------------------------------------------- 8 ---------------------------------------------------------- */}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Your Email
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="email"
            value={jobCreationFormContext.form.email}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* ---------------------------------------------------- 9 ------------------------------------------------------------- */}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
          >
            Company Twitter/Website URL
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
            name="website"
            value={jobCreationFormContext.form.website}
            onChange={jobCreationFormContext.handleChange}
          />
        </div>
        {/* ---------------------------------------------------- 10 ---------------------------------------------------------- */}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-lg  font-semibold text-left text-gray-800 px-2"
            name="logo"
          >
            Company Logo
          </label>
          <input
            type="file"
            onChange={jobCreationFormContext.onFileChange}
            className="rounded-md block w-full px-5 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
          <div className="text-sm m-2 mb-[3rem]">
            Mandatory: PNG or GIF format <br />
            Recommended: size less than 200KB (Max. 4MB)
          </div>
        </div>
        {/* --------------------------------------------------- 11 ---------------------------------------------------------- */}
        <div>
          <div className="mb-3">
            <label
              htmlFor="email"
              className="block text-lg  font-semibold text-left text-gray-800 px-2"
            >
              Listing Period
              <span className="text-sm font-normal ml-[4rem]">
                Select one from below
              </span>
            </label>
          </div>
          {/* ----------------------------------- Radio button ----------------------------------------------- */}
          <div>
            <div>
              <input
                type="radio"
                id="24hours"
                name="duration"
                className="peer hidden"
              />

              <label
                htmlFor="24hours"
                className="rounded-md block text-sm w-full px-5 py-3 mb-2 text-gray-700  bg-white peer-checked:bg-gray-300 border focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              >
                <div className="flex flex-row justify-between">
                  <div className="flex flex-col">24 Hours</div>
                  <div className="flex flex-col">FREE for this month!</div>
                </div>
              </label>
            </div>
            <div>
              <input
                type="radio"
                id="3days"
                name="duration"
                className="peer hidden "
              />
              <label
                htmlFor="3days"
                className="rounded-md block text-sm w-full px-5 py-3 mb-2  text-gray-700 bg-white peer-checked:bg-gray-300 border focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              >
                <div className="flex flex-row justify-between">
                  <div className="flex flex-col">3 Days</div>
                  <div className="flex flex-col">FREE for this month!</div>
                </div>
              </label>
            </div>
            <div>
              <input
                type="radio"
                id="7days"
                name="duration"
                className="peer hidden"
              />
              <label
                htmlFor="7days"
                className="rounded-md block text-sm w-full px-5 py-3 mb-2 text-gray-700 bg-white peer-checked:bg-gray-300 border focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              >
                <div className="flex flex-row justify-between">
                  <div className="flex flex-col">7 Days</div>
                  <div className="flex flex-col">FREE for this month!</div>
                </div>
              </label>
            </div>
            <div>
              <input
                type="radio"
                id="14days"
                name="duration"
                className="peer hidden"
              />
              <label
                htmlFor="14days"
                className="rounded-md block  text-sm w-full px-5 py-3 mb-2 text-gray-700 bg-white peer-checked:bg-gray-300 border focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              >
                <div className="flex flex-row justify-between">
                  <div className="flex flex-col">14 Days</div>
                  <div className="flex flex-col">FREE for this month!</div>
                </div>
              </label>
            </div>
          </div>
        </div>
        {/* ------------------------------- End Radio button -------------------------------------------- */}
        {/* ---------------------------------------------------- 10 ---------------------------------------------------------- */}
        <div className="my-[5rem]">
          <label
            htmlFor="email"
            className="block text-lg font-semibold text-left text-gray-800 px-2"
          >
            Referal Bounty
          </label>
          <input
            type="text"
            value={jobCreationFormContext.form.bounty_amount}
            onChange={jobCreationFormContext.handleChange}
            className="rounded-md block w-full px-5 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
          <div className="text-sm mx-[1rem] my-[1rem]">
            Referral Bounty rewards referer, to be paid when hired <br />
            Highly increases exposure of the job listed <br />
            Highly leverage on insider’s network <br />
            Average bounty: 1 month salary
          </div>
        </div>
      </div>
    </form>
  );
}

export default ListJobForm;

'''
'''--- frontend/src/pages/JobList/Testimonial.js ---
import React from "react";

function Testimonial() {
  return (
    <div className="text-sm text-left ">
      <div>
        <div className="mb-3">The gateway to the largest Web3 talent pool.</div>
        <div>
          This job will reach to all partnered web3/dev community across the
          globe.
        </div>
        <div className="py-[10rem]  mt-4 bg-[#D9D9D9] border rounded-[20px]" />
      </div>

      <div className="flex flex-col mt-[2rem]">
        <div className="flex flex-row my-[1rem]">
          Testimonial 1 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
        <div className="flex flex-row my-[1rem]">
          Testimonial 2 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
        <div className="flex flex-row my-[1rem]">
          Testimonial 3 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
        <div className="flex flex-row my-[1rem]">
          Testimonial 4 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
      </div>
    </div>
  );
}

export default Testimonial;

'''
'''--- frontend/src/pages/JobManagement/JobMgmt.js ---
import { Fragment, useEffect, useState } from "react";
import { Disclosure } from "@headlessui/react";
import { useNavigate } from "react-router-dom";
// import { Down, Up } from "@icon-park/react";

function JobMgmt() {
  const calculateTimeLeft = () => {
    const difference = +new Date("2022-11-15T03:21:27+08:00") - +new Date();

    let timeLeft = {};
    if (difference > 0) {
      timeLeft = {
        days: Math.floor(difference / (1000 * 60 * 60 * 24)),
        hours: Math.floor(difference / (1000 * 60 * 60)),
        minutes: Math.floor((difference / 1000 / 60) % 60),
        seconds: Math.floor((difference / 1000) % 60),
      };
    }
    return timeLeft;
  };

  const [timeLeft, setTimeLeft] = useState(calculateTimeLeft());

  useEffect(() => {
    setTimeout(() => {
      setTimeLeft(calculateTimeLeft());
    }, 1000);
  });

  const navigate = useNavigate()

  return (
    <div className="relative overflow-x-hidden bg-[#DAFF3E] w-full h-screen">
      <div className="mx-[8rem] my-8 font-robotoMono">
        <div className="flex flex-row w-full">
          <div className="flex flex-col w-1/3">
            <button
              type="button"
              className="bg-black border-solid text-[#DAFF3E] px-16 py-3 rounded-lg font-bold mb-4"
            >
              Job Listing
            </button>
            <button
              type="button"
              className="bg-white border-solid text-black px-16 py-3 rounded-lg font-bold mb-4"
            >
              My Application
            </button>
            <button
              type="button"
              className="bg-white border-solid text-black px-16 py-3 rounded-lg font-bold"
            >
              Referrals
            </button>
            <button
              type="button"
              className="bg-black border-solid text-[#DAFF3E] px-16 py-3 rounded-lg font-bold mb-4 bottom-4 fixed"
              onClick={() => navigate('/user/profile/form')}
            >
              Back to Profile
            </button>
          </div>
          <div className="bg-[#F2F2F2] rounded-lg ml-8 w-full py-5">
            <div className="px-8">
              <div className="py-6 text-center font-bold text-2xl">
                Manage Job Listing
              </div>
              <Disclosure as="div">
                {({ open }) => (
                  <>
                    <Disclosure.Button as={Fragment}>
                      <button
                        type="button"
                        className="flex p-2 w-full bg-[#DAFF3E] px-4 justify-between rounded-lg"
                      >
                        <span className="text-black pl-2 font-bold text-lg">
                          Database Programmer
                        </span>
                        {/* <Down
                          size="24"
                          className={`${
                            open ? "rotate-180 transform ml-2" : ""
                          }  text-black ml-2`}
                        /> */}
                      </button>
                    </Disclosure.Button>
                    <Disclosure.Panel as="ul">
                      <div>
                        <div className="bg-black my-4 rounded-lg">
                          <div className="px-4 py-2 flex flex-row items-center w-full justify-between">
                            <div className="flex flex-row items-center">
                              <div className="px-13 py-13 bg-gray-500 rounded-full"></div>
                              <div className="flex flex-col text-[#DAFF3E] text-left font-semibold ml-4 text-lg">
                                <div>
                                  Candidate: {""}
                                  <span className="underline underline-offset-2">
                                    Constance @11x11
                                  </span>
                                </div>
                                <div>Referer: Direct</div>
                              </div>
                            </div>
                            <button
                              type="button"
                              className="bg-[#DAFF3E] border-solid text-black rounded-xl font-bold px-8 py-1 flex justify-end"
                            >
                              Hire
                            </button>
                          </div>
                        </div>
                        <div className="bg-black my-4 rounded-lg">
                          <div className="px-4 py-2 flex flex-row items-center w-full justify-between">
                            <div className="flex flex-row items-center">
                              <div className="px-13 py-13 bg-gray-500 rounded-full"></div>
                              <div className="flex flex-col text-[#DAFF3E] text-left font-semibold ml-4 text-lg">
                                <div>
                                  Candidate: {""}
                                  <span className="underline underline-offset-2">
                                    Constance @11x11
                                  </span>
                                </div>
                                <div>Referer: Direct</div>
                              </div>
                            </div>
                            <button
                              type="button"
                              className="bg-[#DAFF3E] border-solid text-black rounded-xl font-bold px-8 py-1 flex justify-end"
                            >
                              Hire
                            </button>
                          </div>
                        </div>
                        <div className="bg-black my-4 rounded-lg">
                          <div className="px-4 py-2 flex flex-row items-center w-full justify-between">
                            <div className="flex flex-row items-center">
                              <div className="px-13 py-13 bg-gray-500 rounded-full"></div>
                              <div className="flex flex-col text-[#DAFF3E] text-left font-semibold ml-4 text-lg">
                                <div>
                                  Candidate: {""}
                                  <span className="underline underline-offset-2">
                                    Constance @11x11
                                  </span>
                                </div>
                                <div>Referer: Direct</div>
                              </div>
                            </div>
                            <button
                              type="button"
                              className="bg-[#DAFF3E] border-solid text-black rounded-xl font-bold px-8 py-1 flex justify-end"
                            >
                              Hire
                            </button>
                          </div>
                        </div>

                        <div className="bg-[#797979] my-4 rounded-lg">
                          <div className="px-4 py-4 flex flex-row items-center w-full justify-between">
                            {timeLeft.days ||
                            timeLeft.hours ||
                            timeLeft.minutes ||
                            timeLeft.seconds ? (
                              <div className="text-black text-left font-semibold text-lg">
                                <span>Validity</span>{" "}
                                <span>{timeLeft.days} Day</span>{" "}
                                <span>{timeLeft.hours} Hour</span>{" "}
                                <span>{timeLeft.minutes} Minute</span>
                              </div>
                            ) : (
                              <p>Time is up 🔥</p>
                            )}
                            <button
                              type="button"
                              className="bg-black border-solid text-white rounded-xl font-bold px-8 py-1 flex justify-end"
                            >
                              Unlist
                            </button>
                          </div>
                        </div>
                      </div>
                    </Disclosure.Panel>
                  </>
                )}
              </Disclosure>
              <Disclosure as="div">
                {({ open }) => (
                  <>
                    <Disclosure.Button as={Fragment}>
                      <button
                        type="button"
                        className="flex p-2 w-full bg-white px-4 justify-between rounded-lg my-4"
                      >
                        <span className="text-black pl-2 font-normal text-lg">
                          Intern Programmer
                        </span>
                        {/* <Up
                          size="24"
                          className={`${
                            open
                              ? "rotate-180 transform ml-2"
                              : "rotate-90 transform ml-2"
                          }  text-[#D7F050] ml-2`}
                        /> */}
                      </button>
                    </Disclosure.Button>
                    <Disclosure.Panel as="ul">
                      <div>
                        <div className="bg-black my-4 rounded-lg">
                          <div className="px-4 py-2 flex flex-row items-center w-full justify-between">
                            <div className="flex flex-row items-center">
                              <div className="px-13 py-13 bg-gray-500 rounded-full"></div>
                              <div className="flex flex-col text-[#DAFF3E] text-left font-semibold ml-4 text-lg">
                                <div>
                                  Candidate: {""}
                                  <span className="underline underline-offset-2">
                                    Constance @11x11
                                  </span>
                                </div>
                                <div>Referer: Direct</div>
                              </div>
                            </div>
                            <button
                              type="button"
                              className="bg-[#DAFF3E] border-solid text-black rounded-xl font-bold px-8 py-1 flex justify-end"
                            >
                              Hire
                            </button>
                          </div>
                        </div>
                      </div>
                    </Disclosure.Panel>
                  </>
                )}
              </Disclosure>
              <div className="flex p-2 w-full bg-white px-4 justify-between rounded-lg my-4">
                <span className="text-black pl-2 font-normal text-lg">
                  Rust Developer
                </span>
                <button
                  type="button"
                  className="bg-[#DAFF3E] border-solid text-black rounded-xl font-bold px-8 py-1 flex justify-end"
                >
                  Re-list
                </button>
              </div>
              <div className="flex p-2 w-full bg-white px-4 justify-between rounded-lg my-4">
                <span className="text-black pl-2 font-normal text-lg">
                  Community Manager
                </span>
                <button
                  type="button"
                  className="bg-[#DAFF3E] border-solid text-black rounded-xl font-bold px-8 py-1 flex justify-end"
                >
                  Re-list
                </button>
              </div>
              <div className="flex justify-center mt-12">
                <button
                  type="button"
                  className="bg-[#DAFF3E] border-solid text-black rounded-full font-bold px-8 py-1 "
                >
                  List New Job
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
export default JobMgmt;

'''
'''--- frontend/src/pages/Landingpage/FirstSection.js ---
import React from "react";
import { TypeAnimation } from "react-type-animation";
// import bg from "../../assets/img/globe.png";
// import logo from "../../assets/img/logo.png";
import cursor from "../../../assets/img/cursor.png";

function FirstSection() {
  return (
    <div className="container mx-auto flex flex-col md:flex-row items-center my-12 md:my-24">
      <section className="text-black h-screen font-robotoMono flex flex-col w-full items-center p-8">
        <ul className="text-left font-bold text-xl max-w-2xl">
          <li className="text-red-500">
            <TypeAnimation sequence={["01 hello world.", 1000]} />
          </li>
          <li>02 welcome to the (web3 career hub)</li>
          <li>03 join 7 million to kickstart your web3 journey _</li>
        </ul>
        <div>
          <a
            className="inline-flex text-[60px] my-8 items-center bg-black font-bold w-full text-[#DAFF3E] rounded border px-12 py-3 text-white hover:bg-[#FF5733] hover:text-black focus:bg-black focus:text-[#DAFF3E] active:bg-blue-500 sm:w-auto"
            href="/jobs"
          >
            <span className="text-3xl"> CAREER HUB </span>

            <svg
              className="ml-3 h-5 w-5"
              xmlns="http://www.w3.org/2000/svg"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth="2"
                d="M17 8l4 4m0 0l-4 4m4-4H3"
              />
            </svg>
          </a>
          <div className="flex flex-row justify-end">
            <img
              src={cursor}
              alt=""
              className="relative left-10 bottom-5 h-[120px] justify-right"
            />
          </div>
          </div>
        </section>
      
    </div>
  );
}

export default FirstSection;

'''
'''--- frontend/src/pages/Landingpage/IndexLandingPage.js ---
import React from "react";
import FirstSection from "./FirstSection";
import SecondSection from "./SecondSection";
import ThirdSection from "./ThirdSection";

function IndexLandingPage() {
  return (
    <div className="relative min-h-screen overflow-x-hidden bg-[#DAFF3E]">
      <FirstSection />
      <SecondSection />
      <ThirdSection />
    </div>
  );
}

export default IndexLandingPage;

'''
'''--- frontend/src/pages/Landingpage/SecondSection.js ---
import React from "react";
import web3careerlogo from "../../../assets/img/web3careerlogo.png";
import academylogo from "../../../assets/img/academylogo.png";
import web3profilelogo from "../../../assets/img/web3profilelogo.png";

function SecondSection() {
  return (
    <div className="relative min-h-screen overflow-x-hidden bg-black">
      <div className="px-[10rem] py-[11rem] text-[#DAFF3E] my-[10rem]">
        <div className="flex flex-row justify-between mb-5">
          <div className="pl-[3rem]">
            <img src={academylogo} alt="" className="w-[150px] h-auto" />
          </div>
          <div className="pl-[2rem]">
            <img src={web3profilelogo} alt="" className="w-[100px] h-auto" />
          </div>
          <div className="pr-[3rem]">
            <img src={web3careerlogo} alt="" className="w-[150px] h-auto" />
          </div>
        </div>
        <div className="flex flex-row justify-between">
          <div className="text-4xl font-bold mt-4">Web3 Academy</div>

          <div className="text-4xl font-bold mt-4">Web3 Profile</div>

          <div className="text-4xl font-bold mt-4">Web3 Career</div>
        </div>
      </div>
    </div>
  );
}

export default SecondSection;

'''
'''--- frontend/src/pages/Landingpage/ThirdSection.js ---
import React from "react";
import cursor from "../../../assets/img/cursor.png";

function ThirdSection() {
  return (
    <div className="relative overflow-hidden bg-[#DAFF3E]">
      <div className="container mx-auto flex flex-col md:flex-row items-center md:my-48 ">
        <section className="text-black h-full font-robotoMono flex flex-col w-full items-center p-12">
          <ul className="text-left font-bold text-xl max-w-2xl">
            <li>def SEED():</li>
            <li className="ml-4">print(“learn, build, hire”)</li>
            <li className="ml-4">print(“find us on SEED profile“)</li>
            <li>if __name__ == “__main__”:</li>
            <li>SEED()</li>
          </ul>
          <div>
            <a
              className="inline-flex text-[60px] my-8 items-center bg-black font-bold w-full rounded border px-12 py-3 text-white hover:bg-white hover:text-black focus:bg-black focus:text-[#DAFF3E] active:bg-white-100 sm:w-auto"
              href="/login"
            >
              <span className="text-3xl"> ENTER WEB3 </span>

              <svg
                className="ml-3 h-5 w-5"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth="2"
                  d="M17 8l4 4m0 0l-4 4m4-4H3"
                />
              </svg>
            </a>
            <div className="flex flex-row justify-end">
              <img
                src={cursor}
                alt=""
                className="relative left-10 bottom-5 h-[50px] justify-right"
              />
            </div>
          </div>
        </section>
      </div>
    </div>
  );
}

export default ThirdSection;

'''
'''--- frontend/src/pages/ProfileDisplay/BasicDetails.js ---
import { useContext } from "react";
import image from "../../../assets/img/image.png";
import share from "../../../assets/img/shareIcon.png";
import { UserProfileContext } from "./display";

function Basicdetails() {
  const {profile} = useContext(UserProfileContext)

  console.log(profile)
  return (
    <>
      <div>
        <img src={image} className="mx-auto" alt="" />
        <div className="flex items-center justify-center sm:py-1">
          <p className="font-bold text-2xl sm:pr-3 xs:text-lg">{profile.full_name}</p>
          <img
            src={share}
            className="w-[30px] h-[30px] xs:scale-[0.8]"
            alt=""
          />
        </div>
        <div className="font-bold text-xl xs:text-lg">@{profile.handler}</div>
      </div>
      <div className="flex flex-row justify-center items-center sm:my-8 my-4 sm:text-xl font-bold xs:text-sm">
        <div>0 friends</div>
        {/* <button
          type="button"
          className="mx-6 bg-black text-[#DAFF3E] px-5 py-2 rounded-full font-bold "
        >
          Add
        </button> */}
        <div>Joined 2022</div>
      </div>
    </>
  );
}

export default Basicdetails;

'''
'''--- frontend/src/pages/ProfileDisplay/CareerCredentials.js ---
import React ,{useEffect, useState} from "react";
import logo from "../../../assets/img/companyLogo.png";
import rec from "../../../assets/img/Rectangle.png";
import { useWallet } from "../../hooks/useWallet";
import { GloryBadge } from "../../nft_contracts/glory-badge";

function Career() {
  const [nfts, setNfts] = useState([]);
  const { accountId, viewMethod } = useWallet()

  const getTokens = async () => {
    const res = await viewMethod(process.env.GLORY_BADGE_CONTRACT, 'nft_tokens_for_owner', { account_id: accountId, from_index:"0", limit:"200"})
    setNfts(res)
  }

  useEffect(()=> {
    if(accountId) {
      getTokens()
    }
  },[accountId, nfts, getTokens])

  return (
    <div className="px-[10rem] mt-10 font-robotoMono pb-10">
      <div className="flex flex-col justify-center px-[6rem]">
        <p className="text-left text-[40px] font-bold">Career Credentials</p>
        <div className="bg-black text-[#DAFF3E] text-left h-[180px] w-[950px] text-xl pl-10 py-6 font-bold rounded-2xl">
          <p>Senior Architect at Google</p>
        </div>
        <div className="grid grid-cols-3 gap-4 mt-8">
          {
            nfts.length > 0 && 
            nfts.map((val,key) => {
              return (
                <div className="bg-black  rounded-2xl" key={key}>
                  <div className="relative px-3 pt-3">
                    <img src={val.metadata.media} alt="" />
                    <div className="absolute -mt-14 ml-2">
                      <img src={logo} alt="" />
                    </div>
                  </div>
                  <div className="text-[#DAFF3E] text-left px-5 mt-5">
                    <p className="font-bold text-[24px]">{val.metadata.title}</p>
                    <p className="font-normal text-[16px]">
                    {val.metadata.description}
                    </p>
                    <p className="font-bold text-[20px] py-4">{val.metadata.issued_at}</p>
                  </div>
                </div>
              )})
          }
          
          
        </div>
      </div>
    </div>
  );
}

export default Career;

'''
'''--- frontend/src/pages/ProfileDisplay/Education.js ---
import React from "react";
import logo from "../../../assets/img/companyLogo.png";
import rec from "../../../assets/img/Rectangle.png";

export default function Education(badge) {
  // return (
  //   <div className="sm:mx-[2rem]">
  //     <div className="sm:text-2xl text-left font-bold text-xl">Education</div>
  //     <div className="text-left block sm:px-[4rem] sm:py-[3rem] mt-4 px-[2rem] py-[1rem] text-[#DAFF3E] bg-black rounded-[20px] focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40">
  //       <ul className="text-left font-bold sm:text-xl max-w-2xl text-[1.8vh]">
  //         <li>Senior Architect at Google</li>
  //         <li>Senior Architect at Google</li>
  //         <li>Senior Architect at Google</li>
  //       </ul>
  //     </div>
  //     {/* <div className="grid sm:grid-cols-3 gap-3 mt-8 grid-cols-2">
  //       <div className="bg-black  rounded-2xl ">
  //         <div className="relative sm:px-3 px-2 pt-3">
  //           <img className="" src={rec} alt="" />
  //           <div className="absolute -mt-14 ml-2 xs:scale-[0.9]">
  //             <img src={logo} alt="" />
  //           </div>
  //         </div>
  //         <div className="text-[#DAFF3E] text-left sm:px-5 mt-5 px-2">
  //           <p className="font-bold sm:text-xl text-[1.2vh]">{badge.name}</p>
  //           <p className="font-normal sm:text-base text-xs text-[1vh] mt-1">
  //             Created a web3 job portal that implement NFT credential
  //           </p>
  //           <p className="font-bold sm:text-lg text-[1vh] py-4">12-OCT-2022</p>
  //         </div>
  //       </div>
  //       <div className="bg-black  rounded-2xl ">
  //         <div className="relative sm:px-3 px-2 pt-3">
  //           <img className="" src={rec} alt="" />
  //           <div className="absolute -mt-14 ml-2 xs:scale-[0.9]">
  //             <img src={logo} alt="" />
  //           </div>
  //         </div>
  //       </div>
  //     </div> */}

  //   </div>
  // );

  if (badge.badgetype == "education") {
    return (
      <>
        <div>
          <div className="bg-black  rounded-2xl ">
            <div className="relative sm:px-3 px-2 pt-3">
              <img className="" src={rec} alt="" />
              <div className="absolute -mt-14 ml-2 xs:scale-[0.9]">
                <img src={logo} alt="" />
              </div>
            </div>
            <div className="text-[#DAFF3E] text-left sm:px-5 mt-5 px-2">
              <p className="font-bold sm:text-xl text-[1.2vh]">{badge.name}</p>
              <p className="font-normal sm:text-base text-xs text-[1vh] mt-1">
                {badge.description}
              </p>
              <p className="font-bold sm:text-lg text-[1vh] py-4">
                {badge.date}
              </p>
            </div>
          </div>
        </div>
      </>
    );
  }
}

'''
'''--- frontend/src/pages/ProfileDisplay/Endorsement.js ---
import React ,{useEffect, useState} from "react";
import { Link } from "react-router-dom";
import image from "../../../assets/img/image.png";
import logoBig from "../../../assets/img/logoBig.png";
import { useWallet } from "../../hooks/useWallet";

function Endorsements() {
  const [nfts, setNfts] = useState([]);

  const { accountId, viewMethod } = useWallet()

  const getTokens = async () => {
    const res = await viewMethod(process.env.ENDORSEMENT_CONTRACT, 'nft_tokens_for_owner', { account_id: accountId, from_index:"0", limit:"200"})
    setNfts(res)
  }

  useEffect(()=> {
    if(accountId) {
      getTokens()
    }
  },[accountId, getTokens])

  return (
    <div className="sm:mt-[15rem] mt-[5rem] font-robotoMono">
      <form>
        <div className="mb-2 text-left sm:px-[6rem]">
          <div className="flex flex-row justify-between">
            <div className="flex flex-col">
              <div className="sm:text-2xl text-lg font-bold">Endorsement</div>
            </div>

            <div className="flex flex-col items-center">
              <a
                type="button"
                className="bg-black border-2 border-black text-[#DAFF3E] px-5 py-1 rounded-full sm:text-base text-[1.5vh]"
                href="/indexissuenft"
              >
                ISSUE NEW
              </a>
            </div>
          </div>
        
         {
           nfts.length > 0 && 
           nfts.map((val,key) => {
             return (
              <div className="flex flex-col" key={key}>
                <div className="flex text-left">
                  <img src={image} alt="" className="w-[50px] h-[50px]" />
                  <div className="px-[2rem]">
                    <b>{val.metadata.title}</b> <br />
                    {val.metadata.description}
                  </div>
                </div>
              </div>
             )
           })
         }
            
          {/* ------------------------------------------------ logo & button ---------------------------------------------------------------- */}
          <div className="mb-2 text-left px-[6rem] py-[7rem]">
            <div className="flex flex-row justify-center">
              <div className="flex flex-col">
                <div className="flex">
                  <div>
                    <img
                      src={logoBig}
                      alt=""
                      className="w-auto h-[41px] pr-4"
                    />
                  </div>
                  <div>
                    <button
                      type="button"
                      className="bg-black border-2 border-black text-[#DAFF3E] mt-1 px-4 py-1 rounded-full"
                    >
                      CREATE MY WEB3 PROFILE
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}

export default Endorsements;

'''
'''--- frontend/src/pages/ProfileDisplay/IndexProfileDisplay.js ---
import React, { useState } from "react";
import Basicdetails from "./BasicDetails";
// import JobListing from "./JobListing";
import Skills from "./skills";
import Endorsements from "./Endorsement";
import Career from "./CareerCredentials";
import Education from "./Education";
import IntHobby from "./InterestHobby";
import Socialmedia from "./SocialMedia";

//NFT fetching is implemented in CareerCredentials 
function IndexProfileDisplay() {

  return (
    <div>
        <div className="relative min-h-screen overflow-x-hidden p-[2rem] bg-[#DAFF3E]">
          {accountId && (<div>
            <Basicdetails />
            <Socialmedia />
            <Skills />
            {/* <JobListing /> */}
            <Career/>
            <Education />
            <IntHobby />
            <div className="flex justify-center items-center mb-[10rem]">
              <Endorsements />
            </div>
          </div>)}
        </div>
    </div>
  );
}

export default IndexProfileDisplay;

'''
'''--- frontend/src/pages/ProfileDisplay/InterestHobby.js ---
import React from "react";
import logo from "../../../assets/img/companyLogo.png";
import rec from "../../../assets/img/Rectangle.png";

export default function IntHobby(badge) {
  if (badge.badgetype == "education") {
    return (
      <>
        <div>
          <div className="bg-black  rounded-2xl ">
            <div className="relative sm:px-3 px-2 pt-3">
              <img className="" src={rec} alt="" />
              <div className="absolute -mt-14 ml-2 xs:scale-[0.9]">
                <img src={logo} alt="" />
              </div>
            </div>
            <div className="text-[#DAFF3E] text-left sm:px-5 mt-5 px-2">
              <p className="font-bold sm:text-xl text-[1.2vh]">{badge.name}</p>
              <p className="font-normal sm:text-base text-xs text-[1vh] mt-1">
                {badge.description}
              </p>
              <p className="font-bold sm:text-lg text-[1vh] py-4">
                {badge.date}
              </p>
            </div>
          </div>
        </div>
      </>
    );
  }
}

'''
'''--- frontend/src/pages/ProfileDisplay/MyJob.js ---
import React, { useState } from "react";
// import imagesquare from "../../../assets/img/imagesquare.png";
// import lightning from "../../../assets/img/lightning.png";
import dollarbag from "../../../assets/img/dollarbag.png";

function MyJob(job) {
  const [applied, setApply] = useState(false);

  function onClickApply() {
    if (job.status === 0) {
      setApply(true);
    }
  }

  return (
    <article className="rounded-lg border border-gray-100 p-4 shadow-sm transition bg-white hover:shadow-lg sm:p-6">
      {applied && (
        <div className="absolute w-[303px] h-[229px] bg-[#DAFF3E] rounded-2xl flex justify-center items-center">
          <p className="text-3xl font-semibold">Applied 🥳</p>
        </div>
      )}
      <div className="flex flex-row justify-between text-left">
        <div>
          <p className="text-[#797979] mb-2 font-normal sm:text-base text-xs text-[1vh] mt-1">
            {job.company}
          </p>
          <p className="text-black font-normal sm:text-base text-xs text-[1vh] mt-1">
            {job.title}
          </p>
        </div>
        <div>
          <img src={job.logo} alt="" />
        </div>
      </div>

      <div className="flex flex-row justify-between my-4 text-left">
        <p className="text-[#D7F050] font-normal sm:text-base text-xs text-[1vh] mt-1">
          ${job.salary.min} - ${job.salary.max}
        </p>
        <p className="text-black font-normal sm:text-base text-xs text-[1vh] mt-1 mr-3">
          REMOTE
        </p>
      </div>

      <p className="text-left leading-relaxed text-gray-500 line-clamp-3 font-normal sm:text-base text-xs text-[1vh] mt-1">
        {job.description}
      </p>

      <div className="mt-8 justify-between flex xs:flex-col">
        <button
          type="button"
          onClick={onClickApply}
          className="border-2 rounded-full py-1 font-bold bg-[#DAFF3E] border-black text-black hover:bg-[#DAFF3E] sm:text-base text-xs text-[1vh] mt-1"
        >
          {job.status === 0 ? "FAST APPLY" : "Check Status"}
        </button>
        <a className="border-2 rounded-full py-1 font-bold bg-black text-[#DAFF3E] flex sm:text-base text-xs text-[1vh] mt-1 justify-center">
          <img src={dollarbag} alt="" className="w-auto h-5" />
          REFER & GET
          {job.bounty.min} {job.bounty.max}
        </a>
      </div>
    </article>
  );
}

export default MyJob;

'''
'''--- frontend/src/pages/ProfileDisplay/SocialMedia.js ---
import React, { useContext } from "react";
import github from "../../../assets/img/githubIcon.png";
import website from "../../../assets/img/websiteIcon.png";
import twitter from "../../../assets/img/twitter.png";
import { UserProfileContext } from "./display";

function Socialmedia() {

  const {profile} = useContext(UserProfileContext)

  return (
    <div>
      <form>
        <div className="flex flex-row justify-center pb-[2rem]">
          <div>
            <img src={twitter} alt="" className="w-[auto] h-[40px]" />
          </div>
          <div>
            <img src={github} alt="" className="w-[auto] h-[40px]" />
          </div>
          <div>
            <img src={website} alt="" className="w-[auto] h-[40px]" />
          </div>
        </div>

        <div className="text-left sm:text-base text-[1.2vh] sm:mx-[2rem] block sm:px-[4rem] sm:py-[3rem] mt-2 p-[1rem]  text-[#DAFF3E] bg-black rounded-[20px] focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40">
          {profile.bio}
        </div>
      </form>
    </div>
  );
}

export default Socialmedia;

'''
'''--- frontend/src/pages/ProfileDisplay/display.js ---
import React, { useState, useEffect, createContext } from "react";
import Basicdetails from "./BasicDetails";
// import JobListing from "./JobListing";
import Skills from "./skills";
import Endorsements from "./Endorsement";
import Career from "./CareerCredentials";
import Education from "./Education";
import IntHobby from "./InterestHobby";
import Socialmedia from "./SocialMedia";
import { useParams } from "react-router-dom"
import { useWallet } from "../../hooks/useWallet";
//NFT fetching is implemented in CareerCredentials

export const UserProfileContext = createContext()

const ProfileDisplay = () => {

  const { account } = useParams()
  const { viewMethod } = useWallet()
  
  const [profile, setProfile] = useState({
    bio: '',
    country: '',
    email: '',
    full_name: '',
    github: '',
    handler: '',
    is_open_for_remote: false,
    is_open_for_work: false,
    is_subscribe: false,
    linkedin: '',
    otherskills: [],
    skills: [],
    twitter: '',
    website: ''
  })

  const getProfile = async (account) => {
    const res = await viewMethod(process.env.CONTRACT_NAME, 'view_profile', { account_id: account})

    if(res) {
      setProfile(res.profile)
    }
  }

  useEffect(()=> {
    if(account && !profile.handler) {
      getProfile(account)
    }
  },[profile, getProfile])

  return (
    <div>
        <div className="relative min-h-screen overflow-x-hidden p-[2rem] bg-[#DAFF3E]">
          {profile && (
            <UserProfileContext.Provider value={{profile}}>
              <div>
                <Basicdetails />
                <Socialmedia />
                <Skills />
                {/* <JobListing /> */}
                <Career />
                <Education />
                <IntHobby />
                <div className="flex justify-center items-center mb-[10rem]">
                  <Endorsements />
                </div>
              </div>
            </UserProfileContext.Provider>
          )}
        </div>
    </div>
  )
}

export default ProfileDisplay;

'''
'''--- frontend/src/pages/ProfileDisplay/skills.js ---
import React, { useContext } from "react";
import { UserProfileContext } from "./display";
// import image from "../../assets/img/image.png";

const SkillTag = ({skill}) => {
  console.log(skill)
  return (
    <div className="flex justify-center capitalize items-center bg-black border-solid border-2 border-black text-[#DAFF3E] rounded-full font-semibold">
      {skill}
    </div>
  )
}

const OtherSkillTag = ({ skill }) => {
  return (
    <div className=" flex justify-center capitalize items-center bg-white border-solid border-2 border-black text-[#000000] rounded-full font-bold">
      {skill}
    </div>
  )
}
function Skills() {

  const {profile} = useContext(UserProfileContext)

  return (
    <div className="my-[2rem] text-left sm:mx-4">
      <form>
        <div className="flex flex-row justify-between xs:text-sm">
          <div className="flex flex-col w-[50%] mr-3">
            <div className="pb-[1rem]">Main Skills</div>
            <div className="grid sm:grid-cols-3 grid-flow-row-dense auto-rows-auto gap-1 xs:text-[1.5vh]">
              {profile.skills.map((skill) => {
                return (
                  <SkillTag skill={skill} />
                )
              })}
            </div>
          </div>
          <div className="flex flex-col w-[50%]">
            <div className="pb-[1rem]">Other Skills</div>
            <div className="grid sm:grid-cols-3 grid-flow-row-dense auto-rows-auto gap-1 xs:text-[1.5vh]">
              {profile.otherskills.map((skill) => {
                return (<OtherSkillTag skill={skill} key={skill} />)
              })}
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}

export default Skills;

'''
'''--- frontend/src/pages/RentTalent/IndexRentTalent.js ---
import React from "react";
import ListJobForm from "./RentTalentForm";

import logo from "../../../assets/img/logoSmall.png";
import rentbg from "../../../assets/img/rentbg2.png";
import Testimonial from "./Testimonial";

function IndexRentTalent() {
  return (
    <div className="relative min-h-screen overflow-x-hidden bg-[black] text-[#DAFF3E]">
      <div>
        <div className="mx-[16rem] py-[3rem] font-robotoMono">
          <div className="text-[50px] font-bold text-center py-3 px-2">
            <p>Rent Talent</p>
          </div>
          <span className="font-normal text-lg">From our Product Lab</span>

          <div className="mt-[3rem]">
            <form>
              <div className="flex flex-row">
                <div className="basis-3/4">
                  <ListJobForm />
                </div>
                <div className="basis-1/4">
                  <Testimonial />
                </div>
              </div>
              <div className="w-full -mt-[3rem] ml-[25rem]">
                <img src={rentbg} alt="" className="scale-[0.8]" />
              </div>
              <div className="flex  justify-center">
                <div>
                  <button
                    type="button"
                    className="text-black bg-[#DAFF3E] px-5 py-1 rounded-full"
                  >
                    SUBMIT
                  </button>
                </div>
              </div>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
}

export default IndexRentTalent;

'''
'''--- frontend/src/pages/RentTalent/RentTalentForm.js ---
import React from "react";

function RentTalentForm() {
  return (
    <form>
      <div className="mr-[3rem] px-[3rem] text-left">
        {/* -------------------------------------------------------- 1 ----------------------------------------------------------- */}
        <div className="mb-3 ">
          <label
            htmlFor="email"
            className="block font-semibold text-left text-base px-2"
          >
            Position
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* -------------------------------------------------------- 2 ----------------------------------------------------------*/}
        <div className=" mb-3">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Description
          </label>
          <div>
            <textarea className="resize-y rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40" />
          </div>
        </div>
        {/* ------------------------------------------------------- 3 ----------------------------------------------------------*/}
        <div className="mb-[5rem]">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Company
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ------------------------------------------------------- 4 ----------------------------------------------------------*/}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Skill Required (choose from the list)
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ------------------------------------------------------- 5 ----------------------------------------------------------*/}
        <div className="my-5">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Other Skills Required
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ------------------------------------------------------ 6 ----------------------------------------------------------*/}
        <div className="my-5">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Duration of Project
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ----------------------------------------------------- 7 ---------------------------------------------------------- */}
        <div className="my-5">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Location
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ----------------------------------------------------- 8 ---------------------------------------------------------- */}
        <div className="my-5">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Your Email
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ---------------------------------------------------- 9 ------------------------------------------------------------- */}
        <div className="my-5">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Company Twitter/Website
          </label>
          <input
            type=""
            className="rounded-md block w-full px-1 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
        {/* ---------------------------------------------------- 10 ---------------------------------------------------------- */}
        <div className="mb-3">
          <label
            htmlFor="email"
            className="block text-base  font-semibold text-left  px-2"
          >
            Project Deck/Briefing
          </label>
          <input
            type="file"
            className="rounded-md block w-full px-5 py-2 mt-2 text-gray-700 bg-white border  focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
          />
        </div>
      </div>
    </form>
  );
}

export default RentTalentForm;

'''
'''--- frontend/src/pages/RentTalent/Testimonial.js ---
import React from "react";

function Testimonial() {
  return (
    <div className="text-sm text-left ">
      <div>
        <div className="mb-3">The gateway to the largest Web3 talent pool.</div>
        <div>
          This job will reach to all partnered web3/dev community across the
          globe.
        </div>
        <div className="py-[10rem]  mt-4 bg-[#D9D9D9] border rounded-[20px]" />
      </div>

      <div className="flex flex-col mt-[2rem]">
        <div className="flex flex-row my-[1rem]">
          Testimonial 1 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
        <div className="flex flex-row my-[1rem]">
          Testimonial 2 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
        <div className="flex flex-row my-[1rem]">
          Testimonial 3 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
        <div className="flex flex-row my-[1rem]">
          Testimonial 4 <br />
          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do
          eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad
          minim veniam
        </div>
      </div>
    </div>
  );
}

export default Testimonial;

'''
'''--- frontend/src/pages/authentication/EmailLogin.js ---
import React from "react";

import bg from "../../../assets/img/globe.png";

function EmailLogin(props) {
  props.funcNav(false);

  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed mt-[15em]"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="flex flex-col justify-center items-center-center text-[#DAFF3E] font-robotoMono -mt-[10%]">
          <p className="text-[5vh] font-bold">WELCOME TO WEB3_CAREER HUB</p>
          <div className="w-[30%] pt-[rem] m-auto">
            <div className="flex flex-col justify-center items-center mt-10 mx-[6rem] text-black">
              <input
                type="text"
                className="bg-[#DAFF3E] px-4 py-3 w-[300px] mb-4 rounded-lg"
                placeholder="Email"
              />

              <input
                type="password"
                className="bg-[#DAFF3E]  px-4 py-3 w-[300px] mb-4 rounded-lg"
                placeholder="Password"
              />
            </div>
          </div>
        </div>
        <div className="text-[#DAFF3E] text-xs mt-5 w-full">
          By signing in, you are agree to our terms of services
        </div>
      </div>
    </div>
  );
}

export default EmailLogin;

'''
'''--- frontend/src/pages/authentication/Login.js ---
import React from "react";
import { Link, useNavigate } from "react-router-dom";
import near from "../../../assets/img/near.png";
import bg from "../../../assets/img/globe.png";
import email from "../../../assets/img/email.png";
import google from "../../../assets/img/google.png";
import { useWallet } from "../../hooks/useWallet";

function Login() {
  const { accountId, signIn } = useWallet();
  const navigate = useNavigate();

  if (accountId) {
    navigate("/jobs");
  }

  const onHandleNearButton = () => {
    signIn("seed.bonebon.testnet");
  };

  return (
    <div className="container mx-auto mt-10 text-left">
      <div
        className="relative block rounded-xl border border-gray-100 p-8 shadow-lg"
      >

        <div class="mt-4 text-gray-500 sm:pr-8">
          <div className="grid grid-cols-2 gap-4 mt-5">
            <div className="flex items-center">
              <div>
                <h2 className="my-1 text-4xl font-medium text-gray-900">
                  Login
                </h2>
                <p>Let`s build something amazing.</p>
                <div className="block mt-10">
                  <button
                    type="button"
                    className="bg-[#DAFF3E] mx-auto px-6 py-2 w-3/4 mb-4 rounded-2xl"
                    onClick={onHandleNearButton}
                  >
                    <div className="flex justify-between">
                      <div className="uppercase font-bold text-[3vh] text-black">
                        <p>near</p>
                      </div>
                      <div>
                        <img
                          src={near}
                          alt=""
                          className="w-[28px] h-[28px] mt-1"
                        />
                      </div>
                    </div>
                  </button>
                </div>
                <div className="text-md mt-1 w-full">
                  By signing in, you are agree to our terms of services
                </div>
              </div>
            </div>
            <div className="bg-black rounded-md p-1">
              <img src={bg} />
            </div>
          </div>
        </div>
      </div>
    </div>
    // <div className="relative min-h-screen overflow-hidden bg-black">
    //   <div
    //     className="w-full h-full fixed mt-[15em]"
    //     style={{
    //       background: `url(${bg}) no-repeat bottom`,
    //       backgroundSize: "cover",
    //       backgroundOrigin: "content-box",
    //     }}
    //   >
    //     <div className="flex flex-col justify-center items-center-center text-[#DAFF3E] font-robotoMono -mt-[10%]">
    //       <p className="text-[5vh] font-bold">WELCOME TO WEB3_CAREER HUB</p>
    //       <div className="w-[15%] pt-[rem] m-auto">
    //         <div className="flex flex-col justify-center items-center mt-10 mx-[6rem]">
    //           <div>
    //             
    //           </div>
    //         </div>
    //       </div>
    //       <div className="text-[#DAFF3E] text-xs mt-5 w-full">
    //         By signing in, you are agree to our terms of services
    //       </div>
    //     </div>
    //   </div>
    // </div>
  );
}

export default Login;

'''
'''--- frontend/src/pages/authentication/Register.js ---
import React from "react";
import { Link } from "react-router-dom";
import near from "../../../assets/img/near.png";
import bg from "../../../assets/img/globe.png";
import email from "../../../assets/img/email.png";
import google from "../../../assets/img/google.png";

const RegisterPage = () => {
  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed mt-[15em]"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="flex flex-col justify-center items-center-center text-[#DAFF3E] font-robotoMono -mt-[10%]">
          <p className="text-[5vh] font-bold">WELCOME TO WEB3_CAREER HUB</p>
          <div className="w-[15%] pt-[rem] m-auto">
            <div className="flex flex-col justify-center items-center mt-10 mx-[6rem]">
              <div>
                <Link to="/emailogin">
                  <button
                    type="button"
                    className="bg-[#DAFF3E] px-6 py-3 w-[230px] mb-4 rounded-2xl"
                  >
                    <div className="flex justify-between">
                      <div className="uppercase font-bold text-[3vh] text-black">
                        <p>email</p>
                      </div>
                      <div>
                        <img
                          src={email}
                          alt=""
                          className="w-[28px] h-[28px] mt-1"
                        />
                      </div>
                    </div>
                  </button>
                </Link>
                <Link to="/profileForm">
                  <button
                    type="button"
                    className="bg-[#DAFF3E]  px-6 py-3 w-[230px] mb-4 rounded-2xl"
                  >
                    <div className="flex justify-between">
                      <div className="uppercase font-bold text-[3vh] text-black">
                        <p>google</p>
                      </div>
                      <div>
                        <img
                          src={google}
                          alt=""
                          className="w-[28px] h-[28px] mt-1"
                        />
                      </div>
                    </div>
                  </button>
                </Link>
                <Link to="/profileForm">
                  <button
                    type="button"
                    className="bg-[#DAFF3E]  px-6 py-3 w-[230px] mb-4 rounded-2xl"
                  >
                    <div className="flex justify-between">
                      <div className="uppercase font-bold text-[3vh] text-black">
                        <p>near</p>
                      </div>
                      <div>
                        <img
                          src={near}
                          alt=""
                          className="w-[28px] h-[28px] mt-1"
                        />
                      </div>
                    </div>
                  </button>
                </Link>
              </div>
            </div>
          </div>
          <div className="text-[#DAFF3E] text-xs mt-5 w-full">
            By signing in, you are agree to our terms of services
          </div>

          {/* <div className="w-[30%] px-8 py-[7rem] m-auto bg-[#DAFF3E] rounded-3xl font-robotoMono">
            <p className="text-[5vh] font-bold text-center text-black uppercase font-robotoMono">
              CONNECT WALLET TO ENDORSE
            </p>
            <div className="flex flex-col justify-center items-center mt-28 mx-[6rem]">
              <div>
                <button
                  type="button"
                  className="bg-white px-6 py-3 w-[230px] mb-4 rounded-2xl"
                >
                  <div className="flex justify-between">
                    <div className="uppercase font-bold text-[3vh]">
                      <p>near</p>
                    </div>
                    <div>
                      <img
                        src={near}
                        alt=""
                        className="w-[28px] h-[28px] mt-1"
                      />
                    </div>
                  </div>
                </button>
              </div>
            </div>
          </div> */}
        </div>
      </div>
    </div>
  );
}

export default RegisterPage;

'''
'''--- frontend/src/pages/error/NotFound.js ---
import React from "react";

function NotFound() {
  return (
    <div className="flex flex-col items-center h-[100vh]">
      <div className="flex flex-col items-center justify-center mt-10 h-full gap-10">
        <div className="text-6xl">404</div>
        <div className="text-4xl">Page Not Found!</div>
        <a
          href="/"
          className="px-6 py-3 rounded-md text-white hover:shadow-xl bg-primary"
        >
          Back to MainPage
        </a>
      </div>
    </div>
  );
}

export default NotFound;

'''
'''--- frontend/src/pages/home/index.js ---
import React from "react";
import Navbar from "../../components/Navbar";

function Home() {
  return (
    <div className="w-full h-screen flex flex-col justify-start ">
      <Navbar isNavEnabled={false} isAuthEnabled={true} />
      <div className="flex flex-col justify-center items-center h-full">
        <div className="text-6xl text-primary">Home Page</div>
      </div>
    </div>
  );
}

export default Home;

'''
'''--- frontend/src/pages/profileConnect/ConnectWallet.js ---
import React from "react";
import { Link } from "react-router-dom";
import near from "../../../assets/img/near.png";
import bg from "../../../assets/img/globe.png";

function Wallet() {
  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed mt-[12rem]"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="flex flex-col justify-center items-center-center text-[#DAFF3E] font-robotoMono -mt-[10%]">
          <p className="text-[5vh] font-bold">WELCOME TO WEB3_CAREER HUB</p>
          <div className="w-[15%] pt-[5rem] m-auto">
            <p className="text-[4vh] font-bold text-center uppercase font-robotoMono">
              CONNECT WALLET TO ENDORSE
            </p>
            <Link to="/issue">
              <button
                type="button"
                className="bg-[#DAFF3E]  px-6 py-3 w-[230px] rounded-2xl mt-10"
              >
                <div className="flex justify-between">
                  <div className="uppercase font-bold text-[3vh] text-black">
                    <b>near</b>
                  </div>
                  <div>
                    <img src={near} alt="" className="w-[28px] h-[28px] mt-1" />
                  </div>
                </div>
              </button>
            </Link>
          </div>

          {/* <div className="w-[30%] px-8 py-[7rem] m-auto bg-[#DAFF3E] rounded-3xl font-robotoMono">
            <p className="text-[5vh] font-bold text-center text-black uppercase font-robotoMono">
              CONNECT WALLET TO ENDORSE
            </p>
            <div className="flex flex-col justify-center items-center mt-28 mx-[6rem]">
              <div>
                <button
                  type="button"
                  className="bg-white px-6 py-3 w-[230px] mb-4 rounded-2xl"
                >
                  <div className="flex justify-between">
                    <div className="uppercase font-bold text-[3vh]">
                      <p>near</p>
                    </div>
                    <div>
                      <img
                        src={near}
                        alt=""
                        className="w-[28px] h-[28px] mt-1"
                      />
                    </div>
                  </div>
                </button>
              </div>
            </div>
          </div> */}
        </div>
      </div>
    </div>
  );
}

export default Wallet;

'''
'''--- frontend/src/pages/profileConnect/IssueEndors.js ---
import React , {useEffect} from "react";
import { Link } from "react-router-dom";
import bg from "../../../assets/img/globe2.png";
import { Endorsement } from "../../nft_contracts/endorsement";
import { useNavigate } from 'react-router-dom';

/*TODO
* GENERATE TOKEN IDS
*/

function IssueEndors({wallet}) {
  const navigate = useNavigate();

  const contract = new Endorsement({contractId: process.env.ENDORSEMENT_CONTRACT, walletToUse: wallet });

  const [receiverId, setReceiverId] = React.useState();
  const [text, setText] = React.useState();
  const [name, setName] = React.useState();

  const [log, setLog] = React.useState();

   // Check if there is a transaction hash in the URL
   const urlParams = new URLSearchParams(window.location.search);
   const logs = { txh : urlParams.get("transactionHashes"), errorCode: urlParams.get("errorCode"), errorMessage: urlParams.get("errorMessage")};
   async function checkTxh() {
     if(logs.errorCode){
       console.log(`Error: ${logs.errorCode}`);
       return ; 
     }
     if(logs.txh == null){
      return ; 
     }
     // Get result from the transactions
     let result =await wallet.getTransactionResult(logs.txh);
     setLog(result)
     navigate('/mintSuccess');
   }

  async function handleSubmit(){
    try{
      if(!receiverId || !text) {
        console.log('Somethings missing');
        return ; 
      }
      // argument name and value - pass empty object if no args required
      await contract.nft_mint(
        {
            title: name,
            description:text,
            text : text
        },
        receiverId
      );
    }catch(error){
      console.log(error)
    }
  }

  useEffect(()=> {
    console.log(process.env.ENDORSEMENT_CONTRACT)
    wallet.createAccessKeyFor = process.env.ENDORSEMENT_CONTRACT //Change contract address for the current wallet
    checkTxh();
  },[])

  return (
    <div className="relative min-h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="flex flex-col justify-center items-center w-full mt-20">
          <div className="w-[50%] px-8 py-[6rem] m-auto bg-[#DAFF3E] rounded-3xl font-robotoMono">
            <p className="text-[4vh] font-bold text-center text-black uppercase font-robotoMono">
              Issue an Endorsement NFT
            </p>
            <div className="mt-10 px-20">
              <form >
                <div className="mb-2 text-left">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-bold text-[#000000]"
                  >
                    Who are you endorsing? (his/her wallet address)
                  </label>
                  <input
                    type="text"
                    onChange={(e) => setReceiverId(e.target.value)}
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                </div>
                <div className="mb-2 text-left">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-bold text-[#000000]"
                  >
                    Name (Project/Your Name)
                  </label>
                  <input
                    type="text"
                    onChange={(e) => setName(e.target.value)}
                    className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                </div>
                <div className="mb-2 text-left">
                  <label
                    htmlFor="endorsing"
                    className="block text-sm font-semibold text-black"
                  >
                    Endorsement
                  </label>
                  <input
                    type="text"
                    onChange={(e) => setText(e.target.value)}
                    className="h-20 block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  />
                </div>
                <div className="mt-20">
                    <button
                      type="button"
                      className="bg-white px-4 py-2 rounded-full font-bold"
                      onClick={handleSubmit}
                    >
                      Mint and Transfer
                    </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default IssueEndors;

'''
'''--- frontend/src/pages/profileConnect/MintSuccess.js ---
import React from "react";
import { Link } from "react-router-dom";
import bg from "../../../assets/img/globe2.png";

function MintSuccess() {
  return (
    <div className="relative h-screen overflow-hidden bg-black">
      <div
        className="w-full h-full fixed"
        style={{
          background: `url(${bg}) no-repeat bottom`,
          backgroundSize: "cover",
          backgroundOrigin: "content-box",
        }}
      >
        <div className="flex flex-col justify-center items-center w-full mt-20">
          <div className="w-[50%] px-8 py-[6rem] m-auto bg-[#DAFF3E] rounded-3xl font-robotoMono">
            <div className="font-bold mt-[10rem] text-[5vh]">
              Minting is Successful!
            </div>
            <div className="mt-[10rem]">
              <Link to="/profiledisplay">
                <button
                  type="button"
                  className="bg-black px-4 py-2 rounded-full font-bold text-[#DAFF3E]"
                >
                  Back To Your Profile
                </button>
              </Link>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default MintSuccess;

'''
'''--- frontend/src/pages/profileForm/Bio.js ---
import React, { useContext, useEffect, useState } from "react";
import { ProfileFormContext } from ".";

import image from "../../../assets/img/image.png";

function Bio() {

  const profileFormContext = useContext(ProfileFormContext)
  const [preview, setPreview] = useState()

  const onFileChange = (e) => {
    profileFormContext.setProfileImg(e.target.files[0])
  }

  useEffect(() => {
    if (!profileFormContext.profileImg) {
      setPreview(undefined)
      return
    }

    const objectUrl = URL.createObjectURL(profileFormContext.profileImg)
    setPreview(objectUrl)

    return () => URL.revokeObjectURL(objectUrl)
  }, [profileFormContext.profileImg])

  return (
    <div className="py-[3rem] mt- font-robotoMono">
      <div className="text-4xl font-bold text-left py-3 px-3">
        <p>MY WEB3 PROFILE</p>
      </div>

      <div className="bg-[#DAFF3E] rounded-xl shadow-md">
        <div className="mx-[5rem] py-[2rem]">
          <div className="text-xl">
            <b>BIO</b>
          </div>
          <div>
            <div className="mt-5 mb-2">
              <div className="flex justify-center">
                <img src={preview} alt="" />
              </div>
              <div className="py-[1rem]">
                <input id="avatar" type="file" onChange={onFileChange} hidden />
                <label
                  htmlFor="avatar"
                  className="bg-black text-[#DAFF3E] rounded-full px-4 py-2 cursor-pointer"
                >
                  UPLOAD
                </label>
              </div>
            </div>
            <div className="flex flex-row">
              <div className="w-full mb-2 text-left">
                <label
                  htmlFor="email"
                  className="block text-sm font-semibold text-gray-800 px-4"
                >
                  FULL NAME *
                </label>
                <input
                  required
                  className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                  name="full_name"
                  value={profileFormContext.form.full_name}
                  onChange={profileFormContext.handleChange}
                />
              </div>
            </div>
            <div className="mb-2 text-left">
              <label
                htmlFor="handler"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                SEED HANDLER *
              </label>
              <input
                required
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                name="handler"
                value={profileFormContext.form.handler}
                onChange={profileFormContext.handleChange}
              />
            </div>
            <div className="mb-2 text-left">
              <label
                htmlFor="email"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                ONE-LINER BIO
              </label>
              <textarea
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                name="bio"
                value={profileFormContext.form.bio}
                onChange={profileFormContext.handleChange}
              />
            </div>
            <div className="mb-2 text-left">
              <label
                htmlFor="email"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                EMAIL*
              </label>
              <input
                type="email"
                required
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
                name="email"
                value={profileFormContext.form.email}
                onChange={profileFormContext.handleChange}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default Bio;

'''
'''--- frontend/src/pages/profileForm/Form.js ---
import React from "react";

import Bio from "./Bio";
import Skill from "./Skill";
import Social from "./Social";
import Buttons from "./buttons";
import OtherForm from "./OtherForm";

function ProfileForm() {
  return (
    <div className="relative min-h-screen overflow-x-hidden">
      <form>
        <div className="mx-[16rem] py-[3rem] font-robotoMono">
          <div className="flex flex-row">
            <div className="text-4xl font-bold text-left px-2">
              <p>MY Job</p>
            </div>
            <a
              type="button"
              className="bg-black border-solid border-2 border-black hover:bg-[#DAFF3E] hover:text-black text-[#DAFF3E] py-2 px-10 rounded-lg font-bold"
              href="/user/job/manage"
            >
              MANAGE
            </a>
          </div>
          <div className="flex flex-row">
            <div className="basis-3/4">
              <Bio />
              <Skill />
              <Social />
              <OtherForm />
            </div>
            <div className="basis-1/4">
              <Buttons />
            </div>
          </div>
        </div>
      </form>
    </div>
  );
}

export default ProfileForm;

'''
'''--- frontend/src/pages/profileForm/Social.js ---
import React, { useContext } from "react";
import { ProfileFormContext } from ".";

const Social = () => {
  const profileFormContext = useContext(ProfileFormContext);

  return (
    <div className="mt-[2rem] font-robotoMono">
      <div className="bg-[#DAFF3E] rounded-xl shadow-md">
        <div className="mx-[5rem] py-[2rem]">
          <div className="text-xl py-sm">
            <b>SOCIAL</b>
          </div>
          <div>
            <div className="mb-2 text-left">
              <label
                htmlFor="email"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                TWITTER
              </label>
              <input
                name="twitter"
                value={profileFormContext.form.twitter}
                onChange={profileFormContext.handleChange}
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              />
            </div>
            <div className="mb-2 text-left">
              <label
                htmlFor="email"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                GITHUB
              </label>
              <input
                name="github"
                value={profileFormContext.form.github}
                onChange={profileFormContext.handleChange}
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              />
            </div>
            <div className="mb-2 text-left">
              <label
                htmlFor="email"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                LINKEDIN
              </label>
              <input
                name="linkedin"
                value={profileFormContext.form.linkedin}
                onChange={profileFormContext.handleChange}
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              />
            </div>
            <div className="mb-2 text-left">
              <label
                htmlFor="email"
                className="block text-sm font-semibold text-gray-800 px-4"
              >
                WEBSITE
              </label>
              <input
                name="website"
                value={profileFormContext.form.website}
                onChange={profileFormContext.handleChange}
                className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-blue-400 focus:ring-blue-300 focus:outline-none focus:ring focus:ring-opacity-40"
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Social;

'''
'''--- frontend/src/pages/profileForm/buttons.js ---
import React, { useContext } from "react";
import { useNavigate } from "react-router-dom";
import { ProfileFormContext } from ".";
import { useWallet } from "../../hooks/useWallet";

const Buttons = () => {

  const profileFormContext = useContext(ProfileFormContext)

  const { accountId } = useWallet()

  const openPreviewPage = () => {
    window.open(`/profile/preview/${accountId}`)
  }
  
  return (
    <div className="py-[7rem]">
      <div className="py-3">
        <button
          type="button"
          className="bg-black border-solid border-2 border-black text-[#DAFF3E] px-16 py-3 rounded-lg font-bold"
          onClick={profileFormContext.onSubmit}
        >
          SAVE
        </button>
      </div>

      <div className="py-3">
        <button
          type="button"
          className="bg-transparent border-solid border-2 border-black hover:bg-[#DAFF3E] text-[#000000] px-14 py-3 rounded-lg font-bold"
        >
          DISCARD
        </button>
      </div>
      <div className="py-3">
        <button
          type="button"
          className="bg-transparent border-solid border-2 border-black hover:bg-[#DAFF3E] text-[#000000] px-14 py-3 rounded-lg font-bold"
          onClick={() => openPreviewPage()}
        >
          PREVIEW
        </button>
      </div>
    </div>
  );
};

export default Buttons;

'''
'''--- frontend/src/pages/profileForm/webcredential.js ---
import React from "react";

function WebCredential() {
  return (
    <div className="px-[10rem] py-[1rem] mt-12 font-robotoMono">
      <div className="bg-[#DAFF3E] rounded-[30px]">
        <div className="mx-[5rem] py-[2rem]">
          <div className="text-xl py-[1rem]">
            <b>WEB3 CREDENTIAL</b>
          </div>
          <div>
            <div className="mb-2 px-[1rem] py-[2rem]">
              <div className="grid grid-rows-1 grid-flow-col gap-1 rounded-lg">
                <div>
                  <b>
                    Don't have a wallet?
                    <br /> Create one here
                  </b>
                </div>
                <div>
                  <button
                    type="button"
                    className="bg-black border-solid border-2 border-black text-[#DAFF3E] px-5 py-3 rounded-lg font-bold"
                  >
                    CONNECT WALLET
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default WebCredential;

'''
'''--- frontend/src/services/api.js ---
import axios from 'axios'

export const beApi = axios.create({
  baseURL: process.env.BE_API
})

'''
'''--- frontend/src/utils/index.js ---

'''
'''--- frontend/start.sh ---
#!/bin/sh

CONTRACT_DIRECTORY=../contract
DEV_ACCOUNT_FILE="${CONTRACT_DIRECTORY}/neardev/dev-account.env"

start () {
  echo The app is starting!
  env-cmd -f $DEV_ACCOUNT_FILE parcel index.html --open
}

alert () {
  GREEN='\033[1;32m'
  NC='\033[0m' # No Color

  echo "======================================================"
  echo "It looks like you didn't deploy your contract"
  echo ">> Run ${GREEN}'npm run deploy'${NC} from the your project's root directory"
  echo "This frontend template works with contracts deployed to NEAR TestNet"
  echo "======================================================"
}

if [ -f "$DEV_ACCOUNT_FILE" ]; then
  start
else
  alert
fi

'''
'''--- frontend/tailwind.config.js ---
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: ["./src/**/*.{js,jsx}"],
  theme: {
    extend: {
      fontFamily: {
        robotoRegular: ["Roboto"],
        robotoMono: ["Roboto", "monospace"],
      },
      colors: {
        primary: "var(--primary)",
        secondary: "var(--secondary)",
        main: "var(--main)",
        background: "var(--background)",
        header: "var(--header)",
        accent: "var(--accent)",
        btnPrimary: "var(--btnPrimary)",
      },
      screens: {
        xs: { max: "639px" },
        sm: { min: "640px" }, // large mobiles
        md: { min: "768px" }, // iPads, Tablets
        lg: { min: "1024px" }, // Small screens, laptops
        xl: { min: "1280px" }, // Desktops, large screens
        "2xl": { min: "1536px" }, // Extra large screens, TV
      },
    },
    container: {
      center: true,
    },
  },
  plugins: [
    require('@tailwindcss/typography')
  ],
};

'''
'''--- frontend/ui-components.js ---
import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>
        The contract says: <span className="greeting">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{ float: 'right' }} onClick={onClick}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>frontend/App.js</code> - you'll see <code>getGreeting</code> and <code>setGreeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>./contract</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
        <li>
          When you run <code>npm run deploy</code>, the code in <code>./contract</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code>.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
      </p>
    </>
  );
}

'''
'''--- integration-tests/Cargo.toml ---
[package]
name = "integration-tests"
version = "1.0.0"
publish = false
edition = "2018"

[dev-dependencies]
anyhow = "1.0"
borsh = "0.9"
maplit = "1.0"
near-units = "0.2.0"
# arbitrary_precision enabled for u128 types that workspaces requires for Balance types
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.18.1", features = ["full"] }
tracing = "0.1"
tracing-subscriber = { version = "0.3.11", features = ["env-filter"] }
workspaces = "0.6.0"
pkg-config = "0.3.1"

[[example]]
name = "integration-tests"
path = "src/tests.rs"

'''
'''--- integration-tests/src/tests.rs ---
use std::{env, fs};
use near_units::parse_near;
use serde_json::json;
use workspaces::{Account, Contract};

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let wasm_arg: &str = &(env::args().nth(1).unwrap());
    let wasm_filepath = fs::canonicalize(env::current_dir()?.join(wasm_arg))?;

    let worker = workspaces::sandbox().await?;
    let wasm = std::fs::read(wasm_filepath)?;
    let contract = worker.dev_deploy(&wasm).await?;

    // create accounts
    let account = worker.dev_create_account().await?;
    let alice = account
        .create_subaccount( "alice")
        .initial_balance(parse_near!("30 N"))
        .transact()
        .await?
        .into_result()?;

    // begin tests
    test_default_message(&alice, &contract).await?;
    test_changes_message(&alice, &contract).await?;
    Ok(())
}

async fn test_default_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    let message: String = user
        .call( contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Hello".to_string());
    println!("      Passed ✅ gets default message");
    Ok(())
}

async fn test_changes_message(
    user: &Account,
    contract: &Contract,
) -> anyhow::Result<()> {
    user.call(contract.id(), "set_greeting")
        .args_json(json!({"message": "Howdy"}))
        .transact()
        .await?
        .into_result()?;

    let message: String = user
        .call(contract.id(), "get_greeting")
        .args_json(json!({}))
        .transact()
        .await?
        .json()?;

    assert_eq!(message, "Howdy".to_string());
    println!("      Passed ✅ changes message");
    Ok(())
}
'''
'''--- package.json ---
{
  "name": "seed-metabuild",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "start": "cd frontend && npm run start",
    "deploy": "cd contract && ./deploy.sh",
    "build": "npm run build:contract && npm run build:web",
    "build:web": "cd frontend && npm run build",
    "build:contract": "cd contract && ./build.sh",
    "test": "npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "cd integration-tests && cargo run --example integration-tests \"../contract/target/wasm32-unknown-unknown/release/seed_contract.wasm\"",
    "postinstall": "cd frontend && npm install && cd .. && echo rs tests && echo rs contract"
  },
  "devDependencies": {
    "near-cli": "^3.3.0"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.4",
    "@icon-park/react": "^1.4.2",
    "@parcel/transformer-css": "^2.7.0",
    "ipfs-core": "^0.17.0",
    "ipfs-http-client": "^33.0.1",
    "react-icons": "^4.6.0"
  }
}

'''