*GitHub Repository "Lyons800/ethdenver2024"*

'''--- .eslintrc.json ---
{
  "extends": [
    "sznm/react",
    "plugin:react/jsx-runtime",
    "plugin:@next/next/recommended"
  ],
  "rules": {
    "react/prop-types": "off"
  }
}

'''
'''--- .github/workflows/release-please.yml ---
on:
  workflow_dispatch:

name: release-please
jobs:
  release-please:
    runs-on: ubuntu-latest
    steps:
      - uses: google-github-actions/release-please-action@v3
        with:
          release-type: node
          package-name: release-please-action

'''
'''--- .github/workflows/release.yml ---
name: Release

on:
  push:
    tags:
      - "v*"

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v3
        with:
          node-version: 16.x

      - run: npx changelogithub
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

'''
'''--- .github/workflows/update-license.yml ---
name: Update License

on:
  workflow_dispatch:
  schedule:
    # Update the license once a year on January 1
    - cron: '0 0 1 1 *'

jobs:
  update-license:
    uses: sozonome/workflows/.github/workflows/update-license.yml@main

'''
'''--- .lintstagedrc.json ---
{
  "src/**/*.{js,jsx,ts,tsx}": [
    "eslint --fix --max-warnings=0",
    "prettier --write"
  ],
  "src/**/*.{json,css,scss,md}": ["prettier --write"]
}

'''
'''--- .prettierrc.json ---
{
  "endOfLine": "lf",
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "plugins": ["prettier-plugin-tailwindcss"],
  "tailwindFunctions": ["clsx", "cn", "cva"]
}

'''
'''--- .vscode/extensions.json ---
{
  "recommendations": [
    "dbaeumer.vscode-eslint",
    "dsznajder.es7-react-js-snippets",
    "mhutchie.git-graph",
    "oderwat.indent-rainbow"
  ]
}
'''
'''--- README.md ---
<img src="https://og.sznm.dev/api/generate?heading=nextarter-tailwind&text=Next.js+(App+Router)+template+with+TailwindCSS+and+TypeScript+setup.&template=color&center=true&height=320" />

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/import/git?s=https://github.com/sozonome/nextarter-tailwind) [![Deploy to Netlify](https://www.netlify.com/img/deploy/button.svg)](https://app.netlify.com/start/deploy?repository=https://github.com/sozonome/nextarter-tailwind)

[![Open in StackBlitz](https://developer.stackblitz.com/img/open_in_stackblitz.svg)](https://stackblitz.com/github/sozonome/nextarter-tailwind)

This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app), added with [**TailwindCSS**](https://tailwindcss.com) and [**TypeScript**](https://www.typescriptlang.org) setup.
Start developing right away!

## üîã‚ö° Super Battery Packed template

- üöÄ **Next.js 13 (App Router)** - **React 18**
- ‚õìÔ∏è **TypeScript**
- **TailwindCSS** v3
  - recommended to extend with one of these:
    - [shadcn/ui](https://ui.shadcn.com/)
    - [tremor](https://www.tremor.so/)
    - [flowbite-react](https://www.flowbite-react.com/)
    - [daisyUI](https://daisyui.com/)
    - [Headless UI](https://headlessui.com/)
    - [Mantine](https://mantine.dev)
    - [NextUI v2](https://github.com/nextui-org/nextui/discussions/1035)
- ‚úîÔ∏è **toolings** for linting, formatting, and conventions configured
  - `eslint`, `prettier`, `husky`, `lint-staged`, `commitlint`, `commitizen`, and `standard-version`
  - `pre-commit`, `pre-push`, `commit-msg`, `prepare-commit-msg` hook configured
- üì± **PWA-ready** - `next-pwa` configured, enabled by default, just disable it through `next.config.js`
- üîé SEO optimization configured - with `next-seo` and `next-sitemap`.
  - you'll need to reconfigure or tinker with it to get it right according to your needs, but it's there if you need it.
- üé® basic responsive layout configured - don't need it? just remove it üòÉ
- ü§ñ **Automatic Dependency Update** with [Renovate](https://renovatebot.com/)
- üèéÔ∏è **Turbo** setup

[![Quality Gate Status](https://sonarcloud.io/api/project_badges/measure?project=sozonome_nextarter-tailwind&metric=alert_status)](https://sonarcloud.io/dashboard?id=sozonome_nextarter-tailwind) [![Maintainability Rating](https://sonarcloud.io/api/project_badges/measure?project=sozonome_nextarter-tailwind&metric=sqale_rating)](https://sonarcloud.io/dashboard?id=sozonome_nextarter-tailwind) [![Bugs](https://sonarcloud.io/api/project_badges/measure?project=sozonome_nextarter-tailwind&metric=bugs)](https://sonarcloud.io/dashboard?id=sozonome_nextarter-tailwind) [![Code Smells](https://sonarcloud.io/api/project_badges/measure?project=sozonome_nextarter-tailwind&metric=code_smells)](https://sonarcloud.io/dashboard?id=sozonome_nextarter-tailwind) [![Duplicated Lines (%)](https://sonarcloud.io/api/project_badges/measure?project=sozonome_nextarter-tailwind&metric=duplicated_lines_density)](https://sonarcloud.io/dashboard?id=sozonome_nextarter-tailwind)

## Getting Started

You can either click `Use this template` button on this repository and clone the repo or directly from your terminal:

```bash
npx degit sozonome/nextarter-tailwind <APP_NAME>
```

Install packages:

```bash
pnpm i
```

Then, run the development server:

```bash
pnpm dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `src/pages/index.tsx`. The page auto-updates as you edit the file.

## References

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.
- [TailwindCSS](https://tailwindcss.com)
- [TypeScript](https://www.typescriptlang.org)

'''
'''--- commitlint.config.js ---
/** @type {import('@commitlint/types').UserConfig} */
const CommitLintConfiguration = {
  extends: ["@commitlint/config-conventional"],
  // add your own scope here if needed
  // "scope-enum": [2, "always", ["components", "pages", "utils"]],
  "scope-case": [2, "always", "kebab-case"],
};

module.exports = CommitLintConfiguration;

'''
'''--- components.json ---
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/lib/styles/globals.css",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/lib/components",
    "utils": "@/lib/utils"
  }
}
'''
'''--- netlify.toml ---
[build]
  command = 'pnpm build'

[build.environment]
  NODE_VERSION="18"

'''
'''--- next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

'''
'''--- next-sitemap.config.js ---
/** @type {import('next-sitemap').IConfig} */
const NextSitemapConfig = {
  siteUrl: "https://nextarter-tailwind.sznm.dev",
  generateRobotsTxt: true,
};

module.exports = NextSitemapConfig;

'''
'''--- next.config.js ---
const withPWA = require('next-pwa')({
  dest: 'public',
  disable: process.env.NODE_ENV === 'development',
  // add your own icons to src/app/manifest.ts
  // to re-generate manifest.json, you can visit https://tomitm.github.io/appmanifest/
});

/** @type {import('next').NextConfig} */
module.exports = withPWA({
  reactStrictMode: true,
  eslint: {
    dirs: ['src'],
  },
  images: {
    domains: [
      'images.unsplash.com',
      'via.placeholder.com',
      'cdn.eventyco.com',
    ],
  },
  // webpack: (config, options) => {
  //   config.experiments = {
  //     asyncWebAssembly: true,
  //     syncWebAssembly: true,
  //     layers: true,
  //   };
  //   return config;
  // },
});

'''
'''--- package.json ---
{
  "name": "nextarter-tailwind",
  "version": "0.1.0",
  "private": true,
  "author": "sozonome",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "build-contract": "cd src/contracts && bash build.sh && cd ../..",
    "build:turbo": "pnpm dlx turbo@latest build",
    "postbuild": "next-sitemap --config next-sitemap.config.js",
    "start": "next start",
    "lint": "next lint",
    "lint:fix": "eslint src --fix && pnpm format",
    "type-check": "tsc --noEmit",
    "check:turbo": "pnpm dlx turbo@latest lint type-check",
    "format": "prettier --write src",
    "up-interactive": "pnpm up -i",
    "up-latest": "pnpm up-interactive -L",
    "release": "cross-env HUSKY=0 standard-version",
    "push-release": "git push --follow-tags origin main",
    "prepare": "husky"
  },
  "dependencies": {
    "@headlessui/react": "^1.7.18",
    "@heroicons/react": "^1.0.6",
    "@hookform/resolvers": "^3.3.4",
    "@keypom/core": "1.0.2",
    "@mapbox/search-js-react": "1.0.0-beta.18",
    "@near-js/accounts": "0.1.3",
    "@near-js/signers": "0.0.4",
    "@near-js/transactions": "0.2.0",
    "@near-wallet-selector/core": "^8.9.5",
    "@near-wallet-selector/modal-ui": "^8.9.5",
    "@near-wallet-selector/my-near-wallet": "^8.9.5",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-scroll-area": "^1.0.5",
    "@radix-ui/react-select": "^2.0.0",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-toast": "^1.1.5",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@tanstack/react-query": "^5.24.1",
    "@types/lodash.debounce": "^4.0.9",
    "@vercel/kv": "^1.0.1",
    "@walletconnect/web3-provider": "^1.8.0",
    "@xmtp/react-sdk": "^5.1.0",
    "@xmtp/xmtp-js": "^11.4.1",
    "ai": "^3.0.2",
    "axios": "^1.6.7",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cookies-next": "^4.1.1",
    "date-fns": "^3.3.1",
    "embla-carousel-react": "^8.0.0",
    "ethers": "^5.7.2",
    "framer-motion": "^11.0.8",
    "lodash.debounce": "^4.0.8",
    "lucide-react": "^0.316.0",
    "mapbox-gl": "^3.2.0",
    "nanoid": "^5.0.6",
    "near-api-js": "^3.0.3",
    "near-wallet-selector": "^2.1.0",
    "next": "^14.1.1",
    "next-pwa": "^5.6.0",
    "next-seo": "^6.5.0",
    "next-themes": "^0.2.1",
    "offline-plugin": "^5.0.7",
    "openai": "^4.28.4",
    "prism": "link:react-syntax-highlighter/dist/cjs/styles/prism",
    "react": "18.2.0",
    "react-blockies": "^1.4.1",
    "react-dom": "18.2.0",
    "react-emoji-render": "^2.0.1",
    "react-hook-form": "^7.51.0",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.0.1",
    "react-infinite-scroll-component": "^6.1.0",
    "react-intersection-observer": "^9.8.1",
    "react-map-gl": "^7.1.7",
    "react-mapbox-gl": "^5.1.1",
    "react-markdown": "^9.0.1",
    "react-qr-reader": "3.0.0-beta-1",
    "react-qrcode-logo": "^2.9.0",
    "react-syntax-highlighter": "^15.5.0",
    "react-textarea-autosize": "^8.5.3",
    "remark-gfm": "^4.0.0",
    "remark-math": "^6.0.0",
    "sharp": "^0.33.2",
    "sonner": "^1.4.3",
    "styles.css": "link:@near-wallet-selector/modal-ui/styles.css",
    "tailwind-merge": "^2.2.1",
    "tailwindcss-animate": "^1.0.7",
    "vaul": "^0.9.0",
    "walletlink": "^2.5.0",
    "web3modal": "^1.9.12",
    "zod": "^3.22.4",
    "zustand": "^4.5.2"
  },
  "packageManager": "pnpm@7.26.0",
  "devDependencies": {
    "@commitlint/cli": "^18.6.1",
    "@commitlint/config-conventional": "^18.6.2",
    "@commitlint/cz-commitlint": "^18.6.1",
    "@tailwindcss/typography": "^0.5.10",
    "@types/react": "18.2.48",
    "@types/react-blockies": "^1.4.4",
    "@types/react-syntax-highlighter": "^15.5.11",
    "@typescript-eslint/eslint-plugin": "^7.1.0",
    "@typescript-eslint/parser": "^7.1.0",
    "autoprefixer": "^10.4.18",
    "commitizen": "^4.3.0",
    "cross-env": "^7.0.3",
    "eslint": "^8.57.0",
    "eslint-config-next": "^14.1.1",
    "eslint-config-sznm": "^2.0.2",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.2",
    "next-sitemap": "^4.2.3",
    "postcss": "^8.4.35",
    "prettier": "3.2.4",
    "prettier-plugin-tailwindcss": "^0.5.11",
    "standard-version": "^9.5.0",
    "tailwindcss": "^3.4.1",
    "typescript": "5.3.3"
  },
  "engines": {
    "node": ">=16.8.x"
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
'''
'''--- public/assets/404 Error-amico.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500"><g id="freepik--Floor--inject-15"><ellipse id="freepik--floor--inject-15" cx="250.56" cy="365.12" rx="240.31" ry="124.36" style="fill:#f5f5f5"></ellipse></g><g id="freepik--Clouds--inject-15"><g id="freepik--clouds--inject-15"><path d="M106.08,45.13l-9.18,5.3c0-.41.08-.81.08-1.21V46.56c0-4.73-3.33-6.65-7.42-4.28a14.14,14.14,0,0,0-4.42,4.25c-.68-6-5.34-8.17-11-4.89C68,45.17,63,53.78,63,60.86v4A10.5,10.5,0,0,0,64,69.45l-7.63,4.4A9.09,9.09,0,0,0,52.23,81c0,2.62,1.84,3.68,4.11,2.37l49.74-28.71a9.11,9.11,0,0,0,4.11-7.13C110.19,44.89,108.35,43.82,106.08,45.13Z" style="fill:#ebebeb"></path><path d="M150.24,65l-6.93,4a7.22,7.22,0,0,0,.06-.92v-2c0-3.57-2.5-5-5.6-3.23a10.78,10.78,0,0,0-3.33,3.21c-.51-4.49-4-6.16-8.31-3.69-4.63,2.67-8.38,9.16-8.38,14.51v3a8,8,0,0,0,.71,3.48l-5.75,3.32a6.86,6.86,0,0,0-3.11,5.38c0,2,1.39,2.78,3.11,1.79l37.53-21.67a6.86,6.86,0,0,0,3.11-5.38C153.35,64.83,152,64,150.24,65Z" style="fill:#ebebeb"></path></g></g><g id="freepik--Shadows--inject-15"><ellipse id="freepik--Shadow--inject-15" cx="398.11" cy="403.67" rx="49.29" ry="28.46" style="fill:#e0e0e0"></ellipse><path id="freepik--shadow--inject-15" d="M79.49,431.39,35.75,406.13c-2.47-1.42-2.47-3.73,0-5.15L280.51,259.83a9.89,9.89,0,0,1,8.93,0l43.75,25.26c2.46,1.42,2.46,3.73,0,5.15L88.42,431.39A9.89,9.89,0,0,1,79.49,431.39Z" style="fill:#e0e0e0"></path><path id="freepik--shadow--inject-15" d="M314.39,341.39,309,338.25c-12.35-7.13-31.85-7.48-43.46-.78L245.18,349.2a1.5,1.5,0,1,0,1.5,2.6L267,340.07c10.78-6.23,28.94-5.88,40.46.77l5.44,3.15c5.3,3.06,8.22,7,8.22,11.2s-2.92,8.14-8.22,11.2l-74.49,43c-11.53,6.66-30.28,6.65-41.81,0L174.9,396.88c-12.35-7.13-32.45-7.13-44.8,0L124.66,400c-6.53,3.77-10.13,8.79-10.13,14.12,0,4.92,3.12,9.43,8.79,12.7l19.42,11.22-8,4.71c-3.65,2.15-3.63,5.64,0,7.76L149.39,459a.66.66,0,0,1,0,1.25l-1.22.69c-.6.34-.6.9,0,1.25l1.89,1.09a2.37,2.37,0,0,0,2.17,0l6.62-3.8a2.44,2.44,0,0,1,2.17,0l12,7a2.41,2.41,0,0,0,2.16,0l1.9-1.1c.6-.34.6-.9,0-1.25l-12-7c-.6-.35-.6-.91,0-1.25l4.62-2.67a2.35,2.35,0,0,1,2.16,0l12.06,6.95a2.35,2.35,0,0,0,2.16,0L188,459a.66.66,0,0,0,0-1.25l-12-7a.66.66,0,0,1,0-1.25l6-3.44a.66.66,0,0,0,0-1.25l-1.9-1.09a2.37,2.37,0,0,0-2.17,0l-1.89,1.09a2.44,2.44,0,0,1-2.17,0l-18.53-10.7a6.54,6.54,0,0,0-5.95,0l-3.69,2.17a1.65,1.65,0,0,0-.46-.41l-20.31-11.72c-4.7-2.72-7.29-6.3-7.29-10.11,0-4.16,3.15-8.36,8.63-11.52l5.44-3.15c11.53-6.65,30.28-6.65,41.8,0L195.09,412c12.36,7.13,32.45,7.13,44.81,0l74.49-43c6.27-3.62,9.72-8.52,9.72-13.8S320.66,345,314.39,341.39Z" style="fill:#e0e0e0"></path></g><g id="freepik--Plant--inject-15"><g id="freepik--Plants--inject-15"><path d="M416.43,402.36c-.39-19.29,7.18-36.72,13.66-45.3s17.35-17,24.91-14.6c7,2.2,6.53,11.37-1.77,17.67S432.42,374.39,429,385l-8.38,19.48Z" style="fill:#99A2C0"></path><path d="M416.43,402.36c-.39-19.29,7.18-36.72,13.66-45.3s17.35-17,24.91-14.6c7,2.2,6.53,11.37-1.77,17.67S432.42,374.39,429,385l-8.38,19.48Z" style="opacity:0.15"></path><path d="M418.73,400.52a.48.48,0,0,0,.41-.4c1.8-10.68,5.38-23,11.46-32.72,6.54-10.44,16-16.85,21.54-19.06a.47.47,0,0,0,.26-.61.47.47,0,0,0-.62-.26c-5.63,2.26-15.37,8.91-22.07,19.63-6.11,9.76-9.69,22.13-11.5,32.87a.47.47,0,0,0,.39.54Z" style="fill:#fff"></path><path d="M423.4,406.55c.94-3.66,5.22-9.78,12.26-14.93,7.79-5.69,17.77-8.48,20-12.81,2.65-5.2-1.8-9.92-9.93-8.69s-23.36,12.95-26.49,34Z" style="fill:#99A2C0"></path><path d="M421.72,402.78a.47.47,0,0,0,.4-.32c6.25-19.09,20.49-26.12,27.15-27.17a.47.47,0,1,0-.15-.93c-7.36,1.16-21.52,8.32-27.9,27.8a.48.48,0,0,0,.3.6A.47.47,0,0,0,421.72,402.78Z" style="fill:#fff"></path></g></g><g id="freepik--Device--inject-15"><g id="freepik--Plug--inject-15"><path d="M144.38,434.11a1.53,1.53,0,0,1-.75-.2l-20.31-11.73c-5.67-3.27-8.79-7.78-8.79-12.7,0-5.34,3.6-10.35,10.13-14.12l5.44-3.15c12.35-7.13,32.45-7.13,44.8,0l21.69,12.53c11.53,6.65,30.28,6.65,41.81,0l74.49-43c5.3-3.06,8.22-7,8.22-11.21s-2.92-8.14-8.22-11.2l-5.44-3.14c-11.53-6.65-29.68-7-40.46-.77l-20.31,11.72a1.5,1.5,0,0,1-1.5-2.6l20.31-11.72c11.61-6.71,31.11-6.36,43.46.77l5.44,3.15c6.27,3.61,9.72,8.51,9.72,13.79s-3.45,10.19-9.72,13.8l-74.49,43c-12.36,7.14-32.45,7.14-44.81,0L173.4,394.81c-11.52-6.65-30.27-6.65-41.8,0L126.16,398c-5.48,3.17-8.63,7.37-8.63,11.53,0,3.8,2.59,7.39,7.29,10.1l20.31,11.73a1.5,1.5,0,0,1-.75,2.8Z" style="fill:#37474f"></path><path d="M131.76,437.36v1.73a9.59,9.59,0,0,0,4.33,7.5l16,9.22,16.24-9.38V432.36l-15.78-7.28a10.81,10.81,0,0,0-8.87.4l-7.59,4.38A9.58,9.58,0,0,0,131.76,437.36Z" style="fill:#37474f"></path><path d="M152.55,425.08a10.81,10.81,0,0,0-8.87.4l-7.59,4.38c-2.39,1.38-2.29,3.44.21,4.6l15.77,7.28,16.26-9.38Z" style="fill:#455a64"></path><path d="M150.54,438.35a4.78,4.78,0,0,0-2.16,3.75v11.58l3.7,2.13,16.24-9.38V432.36l-4.12-1.9Z" style="opacity:0.1"></path><path d="M169.71,429.94a1.53,1.53,0,0,0-1.52.15l-16,9.23a4.78,4.78,0,0,0-2.17,3.75v13.76a1.51,1.51,0,0,0,.64,1.4l2,1.17a1.5,1.5,0,0,0,1.53-.15l16-9.22a4.8,4.8,0,0,0,2.16-3.75V432.51a1.54,1.54,0,0,0-.63-1.4Z" style="fill:#37474f"></path><path d="M154.24,440.49l16-9.23c1.19-.69,2.16-.13,2.16,1.25v13.77a4.8,4.8,0,0,1-2.16,3.75l-16,9.22c-1.2.69-2.17.13-2.17-1.25V444.24A4.78,4.78,0,0,1,154.24,440.49Z" style="fill:#455a64"></path><path d="M170.79,450.89l-13.22-7.63-1.43.83v9.38l13.21,7.63a2.14,2.14,0,0,0,2.15.2l1.44-.83a2.1,2.1,0,0,0,.88-2v-2.38A6.69,6.69,0,0,0,170.79,450.89Zm-2.43,2.51a4.47,4.47,0,0,1,2,3.51,2.38,2.38,0,0,1-.07.56,2.46,2.46,0,0,1-.52-.21,4.51,4.51,0,0,1-2-3.52,2.47,2.47,0,0,1,.07-.57A2.13,2.13,0,0,1,168.36,453.4Z" style="fill:#99A2C0"></path><path d="M170.79,450.89l-13.22-7.63-1.43.83,13.21,7.63a6.69,6.69,0,0,1,3,5.25v2.38a2.09,2.09,0,0,1-.95,2l.07,0,1.44-.84a2.09,2.09,0,0,0,.88-2v-2.38A6.72,6.72,0,0,0,170.79,450.89Z" style="fill:#fff;opacity:0.85"></path><path d="M173.82,456.14v2.38a2.09,2.09,0,0,1-.88,2l-1.44.84-.06,0a2.09,2.09,0,0,0,.94-2V457a6.21,6.21,0,0,0-.89-3l1.44-.83A6.18,6.18,0,0,1,173.82,456.14Z" style="fill:#99A2C0"></path><path d="M173.82,456.14v2.38a2.09,2.09,0,0,1-.88,2l-1.44.84-.06,0a2.09,2.09,0,0,0,.94-2V457a6.21,6.21,0,0,0-.89-3l1.44-.83A6.18,6.18,0,0,1,173.82,456.14Z" style="fill:#fff;opacity:0.6000000000000001"></path><path d="M173.82,456.14v2.38a2.09,2.09,0,0,1-.88,2l-1.44.84-.06,0a2.09,2.09,0,0,0,.94-2V457a6.21,6.21,0,0,0-.89-3l1.44-.83A6.18,6.18,0,0,1,173.82,456.14Z" style="opacity:0.05"></path><path d="M167.77,453.74a2.4,2.4,0,0,1,.07-.57h0c-.87-.24-1.51.31-1.51,1.4a4.49,4.49,0,0,0,2,3.52c.94.55,1.74.26,2-.62a1.72,1.72,0,0,1-.52-.21A4.49,4.49,0,0,1,167.77,453.74Z" style="fill:#fff;opacity:0.6000000000000001"></path><path d="M167.77,453.74a2.4,2.4,0,0,1,.07-.57h0c-.87-.24-1.51.31-1.51,1.4a4.49,4.49,0,0,0,2,3.52c.94.55,1.74.26,2-.62a1.72,1.72,0,0,1-.52-.21A4.49,4.49,0,0,1,167.77,453.74Z" style="opacity:0.1"></path><path d="M169.35,451.72l-13.21-7.63v9.38l13.21,7.63c1.68,1,3,.18,3-1.75V457A6.66,6.66,0,0,0,169.35,451.72Zm-1,6.37a4.51,4.51,0,0,1-2-3.52c0-1.3.91-1.82,2-1.17a4.47,4.47,0,0,1,2,3.51C170.39,458.21,169.48,458.73,168.36,458.09Z" style="fill:#fff;opacity:0.7000000000000001"></path><path d="M181.54,444.68l-13.21-7.63-1.44.83v9.38l13.21,7.63a2.12,2.12,0,0,0,2.15.21l1.44-.84a2.09,2.09,0,0,0,.88-1.95v-2.38A6.69,6.69,0,0,0,181.54,444.68Zm-2.43,2.51a4.47,4.47,0,0,1,2,3.52,2.23,2.23,0,0,1-.07.55,1.72,1.72,0,0,1-.52-.21,4.49,4.49,0,0,1-2-3.52,2.31,2.31,0,0,1,.07-.56A2.07,2.07,0,0,1,179.11,447.19Z" style="fill:#99A2C0"></path><path d="M181.54,444.68l-13.22-7.63-1.43.83,13.21,7.63a6.69,6.69,0,0,1,3,5.25v2.38a2.09,2.09,0,0,1-.95,2l.07,0,1.44-.84a2.09,2.09,0,0,0,.88-1.95v-2.38A6.72,6.72,0,0,0,181.54,444.68Z" style="fill:#fff;opacity:0.85"></path><path d="M184.57,449.93v2.38a2.09,2.09,0,0,1-.88,1.95l-1.44.84-.06,0a2.09,2.09,0,0,0,.94-2v-2.38a6.21,6.21,0,0,0-.89-3l1.44-.83A6.18,6.18,0,0,1,184.57,449.93Z" style="fill:#99A2C0"></path><path d="M184.57,449.93v2.38a2.09,2.09,0,0,1-.88,1.95l-1.44.84-.06,0a2.09,2.09,0,0,0,.94-2v-2.38a6.21,6.21,0,0,0-.89-3l1.44-.83A6.18,6.18,0,0,1,184.57,449.93Z" style="fill:#fff;opacity:0.6000000000000001"></path><path d="M184.57,449.93v2.38a2.09,2.09,0,0,1-.88,1.95l-1.44.84-.06,0a2.09,2.09,0,0,0,.94-2v-2.38a6.21,6.21,0,0,0-.89-3l1.44-.83A6.18,6.18,0,0,1,184.57,449.93Z" style="opacity:0.05"></path><path d="M178.52,447.53a2.31,2.31,0,0,1,.07-.56h0c-.86-.24-1.51.3-1.51,1.39a4.49,4.49,0,0,0,2,3.52c.94.55,1.74.26,2-.62a1.72,1.72,0,0,1-.52-.21A4.49,4.49,0,0,1,178.52,447.53Z" style="fill:#fff;opacity:0.6000000000000001"></path><path d="M178.52,447.53a2.31,2.31,0,0,1,.07-.56h0c-.86-.24-1.51.3-1.51,1.39a4.49,4.49,0,0,0,2,3.52c.94.55,1.74.26,2-.62a1.72,1.72,0,0,1-.52-.21A4.49,4.49,0,0,1,178.52,447.53Z" style="opacity:0.1"></path><path d="M180.11,445.51l-13.22-7.63v9.38l13.21,7.63c1.68,1,3,.19,3-1.75v-2.38A6.72,6.72,0,0,0,180.11,445.51Zm-1,6.37a4.49,4.49,0,0,1-2-3.52c0-1.29.91-1.82,2-1.17a4.47,4.47,0,0,1,2,3.52C181.14,452,180.23,452.53,179.11,451.88Z" style="fill:#fff;opacity:0.7000000000000001"></path></g><g id="freepik--device--inject-15"><path d="M227.05,392.14l37.6-21.75c3.88-2.23,5.82-5.17,5.82-8.1s0-5.23,0-5.23l-39-22a8.29,8.29,0,0,1-3.75-6.49V282.21l-65.68,38v46.37a8.25,8.25,0,0,0,3.74,6.48L199,392.14C206.73,396.61,219.3,396.61,227.05,392.14Z" style="fill:#99A2C0"></path><g style="opacity:0.6000000000000001"><path d="M227.05,392.14l37.6-21.75c3.88-2.23,5.82-5.17,5.82-8.1s0-5.23,0-5.23l-39-22a8.29,8.29,0,0,1-3.75-6.49V282.21l-65.68,38v46.37a8.25,8.25,0,0,0,3.74,6.48L199,392.14C206.73,396.61,219.3,396.61,227.05,392.14Z"></path></g><path d="M177.81,374.74V380l-12-6.94a8.3,8.3,0,0,1-3.74-6.48V320.17L174.55,313c.25,3.17.54,6.46.8,9.66l-8.78,5.08v36.22a8.19,8.19,0,0,0,3.74,6.48Z" style="opacity:0.30000000000000004"></path><path d="M166.57,363.92a8.25,8.25,0,0,0,3.74,6.48L199,386.91c7.75,4.47,20.32,4.48,28.08,0l37.62-21.74c7.75-4.47,7.75-11.73,0-16.21L236,332.45a8.28,8.28,0,0,1-3.74-6.49V289.73l-65.68,38Z" style="fill:#99A2C0"></path><path d="M166.57,363.92a8.25,8.25,0,0,0,3.74,6.48L199,386.91c7.75,4.47,20.32,4.48,28.08,0l37.62-21.74c7.75-4.47,7.75-11.73,0-16.21L236,332.45a8.28,8.28,0,0,1-3.74-6.49V289.73l-65.68,38Z" style="opacity:0.30000000000000004"></path><path d="M243.62,336.85h0l-7.62-4.4a8.28,8.28,0,0,1-3.74-6.49V289.73l-65.68,38v36.23a8.25,8.25,0,0,0,3.74,6.48l7.5,4.33Z" style="opacity:0.5"></path><path d="M270.48,357.06v5.23c0,2.94-2,5.86-5.82,8.11l-37.61,21.73a28.17,28.17,0,0,1-13.4,3.33v-5.21a28.17,28.17,0,0,0,13.4-3.33l37.61-21.75C268.53,362.94,270.48,360,270.48,357.06Z" style="fill:#99A2C0"></path><path d="M270.48,357.06v5.23c0,2.94-2,5.86-5.82,8.11l-37.61,21.73a28.17,28.17,0,0,1-13.4,3.33v-5.21a28.17,28.17,0,0,0,13.4-3.33l37.61-21.75C268.53,362.94,270.48,360,270.48,357.06Z" style="opacity:0.5"></path><path d="M61.1,409a10,10,0,0,0,9.07-.17l254-146.66c2.58-1.49,4.67-5.12,4.67-4.1V26.72c0-7-2-10.54-4.39-11.94a10,10,0,0,0-9.06.17L61.4,161.61a10.32,10.32,0,0,0-4.68,8.1V401A10,10,0,0,0,61.1,409Z" style="fill:#99A2C0"></path><path d="M70.17,408.78l254-146.66c2.58-1.49,4.68-5.12,4.68-4.11V26.71c0-7-2.1-8.19-4.68-6.7l-254,146.66a10.32,10.32,0,0,0-4.68,8.1v231.3C65.49,409.06,67.59,410.27,70.17,408.78Z" style="fill:#99A2C0"></path><path d="M70.17,408.78l254-146.66c2.58-1.49,4.68-5.12,4.68-4.11V26.71c0-7-2.1-8.19-4.68-6.7l-254,146.66a10.32,10.32,0,0,0-4.68,8.1v231.3C65.49,409.06,67.59,410.27,70.17,408.78Z" style="opacity:0.5"></path><path d="M69.48,414.12a10.09,10.09,0,0,1-8.38-.18A10,10,0,0,1,56.71,406V391.28l8.78,5.08v14.71C65.49,413.79,67.22,415,69.48,414.12Z" style="fill:#99A2C0"></path><path d="M69.48,414.12a10.09,10.09,0,0,1-8.38-.18A10,10,0,0,1,56.71,406V391.28l8.78,5.08v14.71C65.49,413.79,67.22,415,69.48,414.12Z" style="opacity:0.5"></path><path d="M65.49,396.36v14.7c0,3,2.1,4.2,4.68,2.7l254-146.65a10.35,10.35,0,0,0,4.68-8.11V244.26Z" style="fill:#99A2C0"></path><path d="M65.49,396.32v14.74c0,3,2.1,4.2,4.68,2.7l254-146.65a10.35,10.35,0,0,0,4.68-8.11V244.26Z" style="opacity:0.30000000000000004"></path><path d="M74.27,377.88V177.69a6.23,6.23,0,0,1,2.81-4.87L317.28,34.14c1.55-.89,2.81-.17,2.81,1.62V236a6.21,6.21,0,0,1-2.81,4.86L77.08,379.51C75.53,380.4,74.27,379.67,74.27,377.88Z" style="fill:#99A2C0"></path><path d="M74.27,377.88V177.69a6.23,6.23,0,0,1,2.81-4.87L317.28,34.14c1.55-.89,2.81-.17,2.81,1.62V236a6.21,6.21,0,0,1-2.81,4.86L77.08,379.51C75.53,380.4,74.27,379.67,74.27,377.88Z" style="fill:#263238"></path><path d="M66.87,170.14a10,10,0,0,0-1.38,4.63V396.36l-8.78-5.08V169.71a9.69,9.69,0,0,1,1.37-4.62Z" style="opacity:0.7000000000000001"></path><path d="M328.83,21.94c-.33-2.41-2.28-3.28-4.64-1.93l-254,146.66a9.5,9.5,0,0,0-3.31,3.48l-8.78-5.07a9.66,9.66,0,0,1,3.31-3.48L315.42,15a10,10,0,0,1,9.07-.17A10.1,10.1,0,0,1,328.83,21.94Z" style="opacity:0.30000000000000004"></path></g></g><g id="freepik--Window--inject-15"><g id="freepik--window--inject-15"><path d="M98.4,390.08a4,4,0,0,1-1.83.55,4.55,4.55,0,0,1-2.68-.47,5,5,0,0,1-2.18-4l0-181.6,4.39,2.53V388.73c0,1.06.53,1.67,1.29,1.67A2.37,2.37,0,0,0,98.4,390.08Z" style="fill:#f0f0f0"></path><path d="M339.83,248a5.14,5.14,0,0,1-2.33,4L98.4,390.08c-1.28.74-2.32.14-2.32-1.35V192l6.41-3.7c1.28-.74,3.37-12,4.66-12.79l55.6-32.1c1.29-.74,4.32,7.61,5.6,6.86l171.48-99V248Z" style="fill:#fafafa"></path><path d="M338.75,53.1V248a4.1,4.1,0,0,1-1.79,3.1L97.86,389.15a1.13,1.13,0,0,1-.49.17c-.22,0-.22-.56-.22-.59V192.61l5.88-3.4c.93-.54,1.51-2.35,2.82-7a34.79,34.79,0,0,1,1.92-5.82l55.1-31.81a21.61,21.61,0,0,1,1.75,2.79c1.5,2.64,2.34,4,3.56,4a1.36,1.36,0,0,0,.71-.2L338.75,53.1M163.28,144.33h0M339.83,51.24l-171.48,99a.34.34,0,0,1-.17.05c-1.3,0-4-7-5.26-7a.33.33,0,0,0-.17,0l-55.6,32.1c-1.29.75-3.38,12-4.66,12.79L96.08,192V388.73c0,1.06.52,1.67,1.29,1.67a2,2,0,0,0,1-.32L337.5,252a5.14,5.14,0,0,0,2.33-4V51.24Z" style="fill:#e0e0e0"></path><path d="M93.89,199.15a5,5,0,0,1-2.19-4V177A5.15,5.15,0,0,1,94,173l239.1-138a4.36,4.36,0,0,1,6.69,3.87V57a5.12,5.12,0,0,1-2.33,4L98.4,199.07A5,5,0,0,1,93.89,199.15Z" style="fill:#99A2C0"></path><path d="M339.8,38.41c-.16-1.21-1.14-1.65-2.3-1L98.4,175.49a5.07,5.07,0,0,0-1.65,1.75l-4.37-2.53A4.86,4.86,0,0,1,94,173l239.1-138a4.34,4.34,0,0,1,6.67,3.49Z" style="fill:#fff;opacity:0.4"></path><path d="M96.75,177.24a4.72,4.72,0,0,0-.67,2.29v27.61l-4.39-2.53V177a2.62,2.62,0,0,1,0-.28,4.71,4.71,0,0,1,.09-.58,5.57,5.57,0,0,1,.58-1.44Z" style="opacity:0.1"></path><path d="M339.82,38.78V51.24l-171.48,99c-1.28.75-2.32.14-2.32-1.34v-4.72c0-1.48-1-2.09-2.34-1.34l-56.54,32.64a5.15,5.15,0,0,0-2.33,4v4.71a5.17,5.17,0,0,1-2.33,4L96.08,192V179.53a5.17,5.17,0,0,1,2.32-4l239.1-138C338.78,36.69,339.82,37.3,339.82,38.78Z" style="fill:#99A2C0"></path><path d="M328.9,46.59c1.62-.93,2.93-.17,2.93,1.7a6.49,6.49,0,0,1-2.93,5.08c-1.62.93-2.94.17-2.94-1.7A6.5,6.5,0,0,1,328.9,46.59Z" style="fill:#fff"></path><path d="M318.34,52.68c1.62-.93,2.93-.18,2.93,1.69a6.47,6.47,0,0,1-2.93,5.08c-1.62.94-2.93.18-2.93-1.69A6.49,6.49,0,0,1,318.34,52.68Z" style="fill:#fff"></path><path d="M307.78,58.77c1.62-.94,2.93-.18,2.93,1.69a6.49,6.49,0,0,1-2.93,5.08c-1.62.93-2.93.18-2.93-1.69A6.47,6.47,0,0,1,307.78,58.77Z" style="fill:#fff"></path><path d="M339.83,51.24V66.39L96.08,207.14V192l4.79-2.77c1.28-.74,1.71-1.87,2.32-4l1.63-5.64c.51-2,1-3.29,2.33-4l55.6-32.1c1.29-.74,2.3-.82,3.28.8l2,3.62c.73,1.26,1.1,2,2.38,1.26Z" style="fill:#e6e6e6"></path><polygon points="96.08 191.98 96.08 207.14 91.69 204.61 91.69 189.47 96.08 191.98" style="fill:#e0e0e0"></polygon><path d="M106.77,193.08l-3.66,2.11,1.39-2.68a.68.68,0,0,0,0-.66c-.11-.13-.29,0-.42.2l-2,3.81v0s0,.09-.05.14,0,0,0,0a1.23,1.23,0,0,0,0,.19.72.72,0,0,0,0,.17s0,0,0,0a.56.56,0,0,0,.05.08h0l2,1.52a.16.16,0,0,0,.2,0,.55.55,0,0,0,.22-.28c.11-.25.09-.53,0-.62l-1.39-1.08,3.66-2.11a.77.77,0,0,0,.29-.62C107.06,193.11,106.93,193,106.77,193.08Z" style="fill:#455a64;opacity:0.5"></path><path d="M109.82,191.31l3.66-2.11-1.4-1.07a.59.59,0,0,1,0-.63c.1-.25.29-.37.41-.28l2,1.53h0a.18.18,0,0,1,.06.08s0,0,0,0a.47.47,0,0,1,0,.17.69.69,0,0,1,0,.2s0,0,0,0l-.06.15h0l-2,3.82a.47.47,0,0,1-.19.22.16.16,0,0,1-.22,0,.65.65,0,0,1,0-.65l1.4-2.68-3.66,2.11c-.16.09-.29,0-.29-.28A.79.79,0,0,1,109.82,191.31Z" style="fill:#455a64;opacity:0.5"></path><path d="M121.82,180.78c0-.22-.21-.2-.31,0l-.5,1.23c-.86-.09-1.89.74-2.59,2.22-.91,1.92-.91,4.19,0,5.06a1.29,1.29,0,0,0,1.64.1,4.56,4.56,0,0,0,1.65-2,.65.65,0,0,0,0-.64c-.12-.11-.3,0-.42.24-.68,1.43-1.78,2.07-2.45,1.42s-.68-2.35,0-3.78c.48-1,1.17-1.62,1.77-1.66l-.37.93c-.1.24,0,.46.14.36l1.49-1a.43.43,0,0,0,.17-.4Z" style="fill:#455a64;opacity:0.5"></path><path d="M161.14,150.31l1.34-2.82a.9.9,0,0,0,0-.88c-.16-.15-.42,0-.57.33l-1.34,2.82-1.33-1.28c-.16-.15-.41,0-.57.33a.85.85,0,0,0,0,.88L160,151l-1.33,2.82a.85.85,0,0,0,0,.88.21.21,0,0,0,.28,0,.75.75,0,0,0,.29-.35l1.33-2.82,1.34,1.28a.21.21,0,0,0,.28,0,.75.75,0,0,0,.29-.35.9.9,0,0,0,0-.88Z" style="fill:#455a64;opacity:0.5"></path><path d="M126.68,184.25v-4.72a5.14,5.14,0,0,1,2.33-4L324.38,62.74c1.29-.75,2.33-.14,2.33,1.34V68.8a5.14,5.14,0,0,1-2.33,4L129,185.59C127.72,186.34,126.68,185.73,126.68,184.25Z" style="fill:#fafafa"></path><path d="M321.21,73.2a.65.65,0,0,1-.21,0,.63.63,0,0,1-.35-.71l.23-1.91-.9-.65a.63.63,0,0,1-.24-.52,1,1,0,0,1,.38-.81l1.37-1.06a.32.32,0,0,0,.06-.11l.61-2a.85.85,0,0,1,.69-.65.52.52,0,0,1,.54.32h0l.51,1.09,1.16-.44a.52.52,0,0,1,.61.14.83.83,0,0,1,0,.94l-1,1.86a.45.45,0,0,0,0,.11l.24,1.68a1,1,0,0,1-.3.84.61.61,0,0,1-.54.21L323,71.36l-1.21,1.54A.69.69,0,0,1,321.21,73.2Zm-.66-3.9.9.65a.68.68,0,0,1,.24.64l-.16,1.28.81-1a.71.71,0,0,1,.62-.3l1.12.14a.38.38,0,0,0,0-.13l-.24-1.68a1.08,1.08,0,0,1,.12-.6l.87-1.63L324,67a.55.55,0,0,1-.71-.28l-.4-.86-.55,1.79a1,1,0,0,1-.34.51l-1.37,1A.29.29,0,0,0,320.55,69.3Zm.42,1.3Zm1.69-5.2Z" style="fill:#e0e0e0"></path><g style="opacity:0.5"><path d="M329.46,62.16a.8.8,0,0,1-.41-1.5l6.56-3.79a.81.81,0,1,1,.81,1.4l-6.56,3.78A.73.73,0,0,1,329.46,62.16Z" style="fill:#455a64"></path><path d="M329.46,66a.8.8,0,0,1-.7-.4.82.82,0,0,1,.29-1.11l6.56-3.78a.81.81,0,0,1,1.11.29.8.8,0,0,1-.3,1.1l-6.56,3.79A.73.73,0,0,1,329.46,66Z" style="fill:#455a64"></path><path d="M329.46,69.74a.81.81,0,0,1-.41-1.51l6.56-3.79a.82.82,0,0,1,1.11.3.8.8,0,0,1-.3,1.1l-6.56,3.79A.83.83,0,0,1,329.46,69.74Z" style="fill:#455a64"></path></g><g id="freepik--Search--inject-15"><g style="opacity:0.5"><path d="M103.27,211.38a.8.8,0,0,1-.41-1.5l6.56-3.79a.81.81,0,0,1,.81,1.4l-6.56,3.78A.76.76,0,0,1,103.27,211.38Z" style="fill:#455a64"></path><path d="M103.27,215.17a.8.8,0,0,1-.7-.4.81.81,0,0,1,.29-1.11l6.56-3.78a.8.8,0,0,1,1.1.29.81.81,0,0,1-.29,1.11l-6.56,3.78A.76.76,0,0,1,103.27,215.17Z" style="fill:#455a64"></path><path d="M103.27,219a.81.81,0,0,1-.41-1.51l6.56-3.78a.79.79,0,0,1,1.1.29.8.8,0,0,1-.29,1.1l-6.56,3.79A.86.86,0,0,1,103.27,219Z" style="fill:#455a64"></path></g><path d="M161.45,178v5.81c0,1.19.84,1.67,1.87,1.08l77.93-45.06V129.69l-77.92,45.06A4.14,4.14,0,0,0,161.45,178Z" style="fill:#e6e6e6"></path><path d="M251.07,124c1-.6,1.87-.11,1.87,1.08v5.81a4.15,4.15,0,0,1-1.87,3.24l-9.82,5.67V129.69Z" style="fill:#99A2C0"></path><path d="M250.34,132l-1.09-.35a6.11,6.11,0,0,0,.17-1.41,2.57,2.57,0,0,0-1-2.34,1.55,1.55,0,0,0-1.59.08,5.6,5.6,0,0,0-2.19,4.56,2.57,2.57,0,0,0,1,2.34,1.39,1.39,0,0,0,.69.18,1.75,1.75,0,0,0,.9-.26,4.58,4.58,0,0,0,1.77-2.37l1.1.34a.25.25,0,0,0,.12,0,.4.4,0,0,0,.12-.79Zm-3.51,2.1a.77.77,0,0,1-.79.07,1.9,1.9,0,0,1-.59-1.63,4.92,4.92,0,0,1,1.78-3.86,1.05,1.05,0,0,1,.5-.15.51.51,0,0,1,.29.08,1.9,1.9,0,0,1,.59,1.63A4.92,4.92,0,0,1,246.83,134.09Z" style="fill:#fafafa"></path><path d="M129.06,194.53,117.81,201a4.1,4.1,0,0,0-1.87,3.22v5.79c0,1.19.84,1.67,1.87,1.08l11.25-6.51a4.11,4.11,0,0,0,1.86-3.23V195.6C130.92,194.42,130.09,193.93,129.06,194.53Z" style="fill:#99A2C0"></path><path d="M324.71,81.56a9.7,9.7,0,0,0-4.38,7.59c0,2.8,2,3.93,4.38,2.54a9.71,9.71,0,0,0,4.39-7.6C329.1,81.29,327.13,80.16,324.71,81.56Z" style="fill:#99A2C0"></path><path d="M324.2,86a.76.76,0,0,1-.39-.1,1,1,0,0,1-.42-.88,2.52,2.52,0,0,1,1.15-2h0a.87.87,0,0,1,1.4.81,2.54,2.54,0,0,1-1.16,2A1.23,1.23,0,0,1,324.2,86Z" style="fill:#fff"></path><path d="M326.44,86.31a1.5,1.5,0,0,0-1.54.12l-.64.37a4.32,4.32,0,0,0-2,3.41v.46a2.47,2.47,0,0,0,2.42-.26,7,7,0,0,0,2.42-2.54v-.11A1.59,1.59,0,0,0,326.44,86.31Z" style="fill:#fff"></path><path d="M309.2,95.12V93.57c0-1.76-1.07-2.57-2.39-1.81h0a5.74,5.74,0,0,0-2.4,4.58v1.39a5.52,5.52,0,0,1-.81,2.7h0a1.48,1.48,0,0,0-.2.7h0c0,.45.27.65.6.46l5.61-3.23a1.47,1.47,0,0,0,.6-1.16h0a.59.59,0,0,0-.18-.47h0A1.63,1.63,0,0,1,309.2,95.12Z" style="fill:#99A2C0"></path><path d="M308,99.8a2.77,2.77,0,0,1-1.15,2.2c-.64.36-1.16,0-1.16-.87Z" style="fill:#99A2C0"></path><path d="M288.52,102.48a2.57,2.57,0,0,1,1-.34,1.32,1.32,0,0,1,.8.16,1.34,1.34,0,0,1,.53.61A2.54,2.54,0,0,1,291,104a4.21,4.21,0,0,1-.11,1,6.17,6.17,0,0,1-.28.86,7.85,7.85,0,0,1-.37.77l-.4.72c-.12.23-.24.47-.34.7a3.19,3.19,0,0,0-.21.69,1.14,1.14,0,0,1-.08.33.47.47,0,0,1-.16.2l-1.13.65c-.07,0-.13,0-.17,0a.3.3,0,0,1-.08-.23,3.13,3.13,0,0,1,.13-.91,6.61,6.61,0,0,1,.3-.85c.13-.27.26-.54.41-.79s.27-.5.4-.72.22-.45.31-.66a1.68,1.68,0,0,0,.12-.59c0-.28-.07-.46-.2-.53s-.35,0-.63.12a1.57,1.57,0,0,0-.59.54,2.9,2.9,0,0,0-.27.57l-.14.5a.54.54,0,0,1-.23.33l-1.13.65a.12.12,0,0,1-.14,0,.27.27,0,0,1-.06-.2,4.91,4.91,0,0,1,.18-1.15,7.62,7.62,0,0,1,.5-1.29,6.26,6.26,0,0,1,.8-1.22A4.14,4.14,0,0,1,288.52,102.48Zm.8,9.24a.73.73,0,0,1-.07.31.48.48,0,0,1-.18.21l-1.16.67a.12.12,0,0,1-.17,0,.3.3,0,0,1-.08-.23v-1.43a.71.71,0,0,1,.08-.31.44.44,0,0,1,.17-.22l1.16-.67a.14.14,0,0,1,.18,0,.28.28,0,0,1,.07.22Z" style="fill:#99A2C0"></path></g></g></g><g id="freepik--404--inject-15"><g id="freepik--404--inject-15"><g id="freepik--shadow--inject-15"><path d="M161.56,282.63a3.52,3.52,0,0,1-2.46-1,4.84,4.84,0,0,1-1.36-3.64v-7.4L138,282a3.82,3.82,0,0,1-2,.55,3.47,3.47,0,0,1-2.45-1,4.83,4.83,0,0,1-1.37-3.65V265.7a17.85,17.85,0,0,1,1.14-6.41L155.67,203a13,13,0,0,1,1.58-3,7.67,7.67,0,0,1,2.26-1.93l11.28-6.51a3.82,3.82,0,0,1,2-.55,3.5,3.5,0,0,1,2.45,1,4.84,4.84,0,0,1,1.37,3.64v39.83l2.67-1.54a3.8,3.8,0,0,1,2-.55,3.54,3.54,0,0,1,2.45,1A4.92,4.92,0,0,1,185,238.1v12.19a8.27,8.27,0,0,1-.84,3.59,6.22,6.22,0,0,1-2.43,2.84l-5.17,3V270a8.35,8.35,0,0,1-.84,3.6,6.23,6.23,0,0,1-2.43,2.84l-9.78,5.65A4,4,0,0,1,161.56,282.63Zm-6.88-34.47,3.43-2v-6.65Z" style="fill:#e0e0e0"></path><path d="M203.29,257.63l-.6,0a12.05,12.05,0,0,1-8.35-3.68,19.46,19.46,0,0,1-4.59-8.77,53.37,53.37,0,0,1-1.61-11.56c-.1-3.09-.15-6.49-.15-10.12s0-7.17.15-10.52a81.08,81.08,0,0,1,1.58-13.21A58.16,58.16,0,0,1,193.86,187a50.16,50.16,0,0,1,7-11.2,38,38,0,0,1,10.31-8.66c3.94-2.28,7.34-3.38,10.41-3.38h.6a12.14,12.14,0,0,1,8.35,3.68,19.57,19.57,0,0,1,4.59,8.77,53.55,53.55,0,0,1,1.61,11.56c.1,3.31.15,6.79.15,10.36s0,7-.15,10.28a82.2,82.2,0,0,1-1.58,13.21A58.88,58.88,0,0,1,231,234.38a50.07,50.07,0,0,1-7,11.2,38.2,38.2,0,0,1-10.31,8.67C209.76,256.52,206.35,257.63,203.29,257.63ZM215.82,189a4.69,4.69,0,0,0-2.12.81,10.4,10.4,0,0,0-3,2.57,13.88,13.88,0,0,0-2,3.56,22.43,22.43,0,0,0-1.2,4.48,36.54,36.54,0,0,0-.49,5.24c-.25,6.45-.25,12.88,0,19.16a29.78,29.78,0,0,0,.45,4.64,5.77,5.77,0,0,0,.88,2.38.94.94,0,0,0,.72.44h0a4.57,4.57,0,0,0,2.18-.8,10.57,10.57,0,0,0,3-2.58,14.37,14.37,0,0,0,2.07-3.6,20.29,20.29,0,0,0,1.2-4.43,43.14,43.14,0,0,0,.45-5.25c.2-6.55.2-13,0-19.17a34.47,34.47,0,0,0-.52-4.59,6.49,6.49,0,0,0-.89-2.46.81.81,0,0,0-.63-.4Z" style="fill:#e0e0e0"></path><path d="M271.23,219.31a3.52,3.52,0,0,1-2.46-1,4.84,4.84,0,0,1-1.36-3.64v-7.4l-19.78,11.42a3.79,3.79,0,0,1-1.94.55,3.48,3.48,0,0,1-2.46-1,4.83,4.83,0,0,1-1.36-3.64V202.37A17.62,17.62,0,0,1,243,196l22.34-56.27a13,13,0,0,1,1.57-3,7.8,7.8,0,0,1,2.26-1.93l11.28-6.51a3.85,3.85,0,0,1,2-.55,3.47,3.47,0,0,1,2.45,1,4.84,4.84,0,0,1,1.37,3.64v39.83l2.68-1.54a3.76,3.76,0,0,1,1.94-.55,3.54,3.54,0,0,1,2.45,1,4.88,4.88,0,0,1,1.37,3.66V187a8.42,8.42,0,0,1-.83,3.6,6.28,6.28,0,0,1-2.43,2.84l-5.18,3v10.28a8.48,8.48,0,0,1-.83,3.6,6.24,6.24,0,0,1-2.44,2.84l-9.78,5.65A3.92,3.92,0,0,1,271.23,219.31Zm-6.87-34.47,3.43-2v-6.65Z" style="fill:#e0e0e0"></path></g><g id="freepik--404--inject-15"><path d="M190.48,241.3a1.1,1.1,0,0,0-.25-.19l-7.59-4.38v-36a2.47,2.47,0,0,0-.6-1.84l-.24-.18L173.69,194a1.13,1.13,0,0,0-1.19.08l-11.28,6.51a5.23,5.23,0,0,0-1.53,1.29,9.91,9.91,0,0,0-1.23,2.38l-22.34,56.25a15.06,15.06,0,0,0-1,5.5v12.19a2.44,2.44,0,0,0,.6,1.84,1.1,1.1,0,0,0,.25.19l8.11,4.69a1.11,1.11,0,0,0,1.18-.09L160.7,276v2.35a2.51,2.51,0,0,0,.59,1.84l.24.18,8.13,4.69a1.11,1.11,0,0,0,1.18-.08l9.78-5.65a3.82,3.82,0,0,0,1.42-1.74,5.83,5.83,0,0,0,.6-2.53V263.31l6.42-3.71a3.72,3.72,0,0,0,1.42-1.74,5.83,5.83,0,0,0,.6-2.53V243.14A2.47,2.47,0,0,0,190.48,241.3Z" style="fill:#99A2C0"></path><path d="M167.76,206.6l0,.14a11.47,11.47,0,0,0-1.14,2.25l-22.33,56.25a12.76,12.76,0,0,0-.66,2.31l-8.18-4.72a14.23,14.23,0,0,1,.65-2.28l22.33-56.25a10.46,10.46,0,0,1,1.24-2.38h0Z" style="opacity:0.15"></path><path d="M144,284.9c-.92-.53-7.69-4.44-8-4.62a1.46,1.46,0,0,1-.25-.2,2.44,2.44,0,0,1-.6-1.84V266.06a16.53,16.53,0,0,1,.32-3.2l8.12,4.69a15.72,15.72,0,0,0-.31,3.2v12.19a2.47,2.47,0,0,0,.59,1.83Z" style="opacity:0.30000000000000004"></path><polygon points="169.2 231.52 169.2 252.68 162.36 248.73 169.2 231.52" style="opacity:0.30000000000000004"></polygon><polygon points="169.2 252.68 158.29 258.97 162.36 248.73 169.2 252.68" style="opacity:0.4"></polygon><path d="M169.42,284.86l.14.12-8-4.62a.88.88,0,0,1-.24-.19,2.45,2.45,0,0,1-.6-1.84V276l8.12-4.69V283A2.45,2.45,0,0,0,169.42,284.86Z" style="opacity:0.30000000000000004"></path><path d="M190.14,241.07a1.14,1.14,0,0,0-1.07.13l-6.43,3.71v-8.17Z" style="opacity:0.15"></path><path d="M181.75,198.7a1.14,1.14,0,0,0-1.13.11l-11.27,6.51a5.34,5.34,0,0,0-1.53,1.28l-8.12-4.69a5.29,5.29,0,0,1,1.52-1.28l11.28-6.51a1.1,1.1,0,0,1,1.19-.07Z" style="fill:#fff;opacity:0.4"></path><path d="M170.84,285a1.08,1.08,0,0,1-1.42-.1,2.45,2.45,0,0,1-.6-1.84V271.29l-23.53,13.58a1.07,1.07,0,0,1-1.42-.1,2.44,2.44,0,0,1-.6-1.84V270.74a15.07,15.07,0,0,1,1-5.5L166.58,209a10.94,10.94,0,0,1,1.23-2.38,5.5,5.5,0,0,1,1.53-1.29l11.28-6.51a1.08,1.08,0,0,1,1.42.1,2.47,2.47,0,0,1,.6,1.84v44.16l6.42-3.71a1.1,1.1,0,0,1,1.42.1,2.47,2.47,0,0,1,.6,1.84v12.19a5.83,5.83,0,0,1-.6,2.53,3.72,3.72,0,0,1-1.42,1.74l-6.42,3.71V275a5.83,5.83,0,0,1-.6,2.53,3.82,3.82,0,0,1-1.42,1.74Zm-1.65-32.29V231.51L158.29,259Z" style="fill:#99A2C0"></path><path d="M242.84,192.9a50.6,50.6,0,0,0-1.53-11,17,17,0,0,0-4-7.66,9.41,9.41,0,0,0-2-1.6c-1.35-.8-7.39-4.27-8.13-4.7a10,10,0,0,0-4.64-1.31q-4-.21-9.63,3a35.25,35.25,0,0,0-9.64,8.09,47.36,47.36,0,0,0-6.68,10.65,55.55,55.55,0,0,0-4,12.23,78.4,78.4,0,0,0-1.53,12.79q-.15,5-.15,10.43c0,3.61.05,6.95.15,10a50.42,50.42,0,0,0,1.53,11,17,17,0,0,0,4,7.67,9.56,9.56,0,0,0,2,1.59c1.36.8,7.48,4.33,8.26,4.77a10.06,10.06,0,0,0,4.53,1.25c2.68.14,5.9-.87,9.63-3a35.6,35.6,0,0,0,9.64-8.09,47.72,47.72,0,0,0,6.68-10.65,55.55,55.55,0,0,0,4-12.23,78.4,78.4,0,0,0,1.53-12.79q.15-4.8.15-10.2T242.84,192.9Zm-29.51,40.87A32.16,32.16,0,0,1,213,230q-.37-9.56,0-19.32a40,40,0,0,1,.52-5.59,25,25,0,0,1,1.35-5,16.14,16.14,0,0,1,2.39-4.2,12.85,12.85,0,0,1,3.24-2.88c.17,1.14.29,2.38.36,3.73q.3,9.38,0,19.32a42.74,42.74,0,0,1-.49,5.57,22.56,22.56,0,0,1-1.34,5,16.94,16.94,0,0,1-2.43,4.22A12.78,12.78,0,0,1,213.33,233.77Z" style="fill:#99A2C0"></path><path d="M206.66,258.79l-8-4.64a9.88,9.88,0,0,1-2-1.6,17,17,0,0,1-4-7.66,50.52,50.52,0,0,1-1.53-11q-.15-4.63-.15-10t.15-10.44a78.4,78.4,0,0,1,1.53-12.79,55,55,0,0,1,2.52-8.75l8.11,4.7a56,56,0,0,0-2.5,8.74,77.35,77.35,0,0,0-1.54,12.79q-.15,5-.15,10.44t.15,10a49.89,49.89,0,0,0,1.54,11,16.93,16.93,0,0,0,4,7.66A9.56,9.56,0,0,0,206.66,258.79Z" style="opacity:0.15"></path><path d="M235,172.45a10.38,10.38,0,0,0-4.34-1.15q-4-.2-9.64,3a35.56,35.56,0,0,0-9.63,8.1,47.69,47.69,0,0,0-6.69,10.64c-.27.58-.52,1.17-.77,1.77s-.45,1.14-.67,1.72h0l-8.11-4.7c.19-.51.39-1,.6-1.52.27-.66.54-1.31.84-2a48.31,48.31,0,0,1,6.68-10.65,35.75,35.75,0,0,1,9.64-8.09c3.73-2.16,7-3.16,9.64-3a10.07,10.07,0,0,1,4.63,1.31C227.88,168.33,233.22,171.4,235,172.45Z" style="fill:#fff;opacity:0.4"></path><path d="M229,220.78a44.55,44.55,0,0,1-.49,5.57,22.42,22.42,0,0,1-1.34,5,16.47,16.47,0,0,1-.93,1.94l-8.12-4.69a18.16,18.16,0,0,0,.92-1.94,23,23,0,0,0,1.35-5,44.59,44.59,0,0,0,.48-5.57q.3-9.94,0-19.32c-.07-1.35-.19-2.59-.35-3.73,0,0,.21-.15.48-.31a6.24,6.24,0,0,1,3.74-1.12,3.33,3.33,0,0,1,2.39,1.44,8.77,8.77,0,0,1,1.31,3.44,38.72,38.72,0,0,1,.56,5Q229.32,210.84,229,220.78Z" style="opacity:0.30000000000000004"></path><path d="M226.27,233.26a16,16,0,0,1-1.5,2.28,12.77,12.77,0,0,1-3.74,3.19,6.29,6.29,0,0,1-3.73,1.12,3.39,3.39,0,0,1-2.43-1.41,8.18,8.18,0,0,1-1.34-3.42c-.08-.4-.14-.82-.2-1.25a12.61,12.61,0,0,0,3.31-2.92,16.08,16.08,0,0,0,1.51-2.28Z" style="opacity:0.4"></path><path d="M221,174.33q5.61-3.24,9.64-3a9.66,9.66,0,0,1,6.68,2.92,17,17,0,0,1,4,7.66,50.6,50.6,0,0,1,1.53,11q.15,4.86.15,10.27t-.15,10.2a78.4,78.4,0,0,1-1.53,12.79,55.55,55.55,0,0,1-4,12.23A48.08,48.08,0,0,1,230.67,249a35.6,35.6,0,0,1-9.64,8.09c-3.73,2.16-6.95,3.17-9.63,3a9.66,9.66,0,0,1-6.69-2.92,17,17,0,0,1-4-7.67,50.42,50.42,0,0,1-1.53-11c-.1-3.09-.15-6.43-.15-10s.05-7.08.15-10.43a78.4,78.4,0,0,1,1.53-12.79,55.55,55.55,0,0,1,4-12.23,47.76,47.76,0,0,1,6.69-10.65A35.2,35.2,0,0,1,221,174.33Zm8,46.45q.3-9.94,0-19.32a37,37,0,0,0-.56-5,8.78,8.78,0,0,0-1.3-3.44,3.26,3.26,0,0,0-2.39-1.44,6.39,6.39,0,0,0-3.74,1.12,12.73,12.73,0,0,0-3.73,3.19,16.14,16.14,0,0,0-2.39,4.2,25,25,0,0,0-1.35,5,40,40,0,0,0-.52,5.59q-.37,9.76,0,19.32a32.28,32.28,0,0,0,.48,5,8.07,8.07,0,0,0,1.35,3.42,3.4,3.4,0,0,0,2.43,1.42,6.38,6.38,0,0,0,3.73-1.12,13.06,13.06,0,0,0,3.74-3.19,17.22,17.22,0,0,0,2.42-4.22,22.58,22.58,0,0,0,1.35-5A44.59,44.59,0,0,0,229,220.78Z" style="fill:#99A2C0"></path><path d="M300.16,178a1.15,1.15,0,0,0-.26-.19l-7.59-4.38v-36a2.49,2.49,0,0,0-.59-1.84,1.25,1.25,0,0,0-.24-.18l-8.12-4.69a1.13,1.13,0,0,0-1.19.08l-11.28,6.51a5.19,5.19,0,0,0-1.53,1.29,10.7,10.7,0,0,0-1.23,2.38L245.8,197.23a15.06,15.06,0,0,0-1,5.5v12.19a2.45,2.45,0,0,0,.59,1.84,1.15,1.15,0,0,0,.26.19l8.11,4.69a1.11,1.11,0,0,0,1.18-.09l15.4-8.89V215a2.47,2.47,0,0,0,.6,1.84l.24.18,8.12,4.69a1.13,1.13,0,0,0,1.18-.08L290.3,216a3.89,3.89,0,0,0,1.42-1.74,6,6,0,0,0,.59-2.53V200l6.43-3.71a3.78,3.78,0,0,0,1.42-1.74,6,6,0,0,0,.59-2.53V179.82A2.51,2.51,0,0,0,300.16,178Z" style="fill:#99A2C0"></path><path d="M277.43,143.28l0,.14a11.47,11.47,0,0,0-1.14,2.25l-22.33,56.25a12.76,12.76,0,0,0-.66,2.31l-8.18-4.72a14.23,14.23,0,0,1,.65-2.28L268.06,141a10.46,10.46,0,0,1,1.24-2.38h0Z" style="opacity:0.15"></path><path d="M253.69,221.58c-.92-.53-7.69-4.44-8-4.62a1.46,1.46,0,0,1-.25-.2,2.44,2.44,0,0,1-.6-1.84V202.74a16.53,16.53,0,0,1,.32-3.2l8.12,4.69a15.72,15.72,0,0,0-.31,3.2v12.19a2.47,2.47,0,0,0,.59,1.83Z" style="opacity:0.30000000000000004"></path><polygon points="278.87 168.2 278.87 189.36 272.03 185.41 278.87 168.2" style="opacity:0.30000000000000004"></polygon><polygon points="278.87 189.36 267.96 195.65 272.03 185.41 278.87 189.36" style="opacity:0.4"></polygon><path d="M279.09,221.54l.14.12-8-4.62a.88.88,0,0,1-.24-.19,2.45,2.45,0,0,1-.6-1.84v-2.35l8.12-4.69V219.7A2.45,2.45,0,0,0,279.09,221.54Z" style="opacity:0.30000000000000004"></path><path d="M299.81,177.75a1.14,1.14,0,0,0-1.07.13l-6.43,3.71v-8.17Z" style="opacity:0.15"></path><path d="M291.42,135.38a1.14,1.14,0,0,0-1.13.11L279,142a5.34,5.34,0,0,0-1.53,1.28l-8.12-4.69a5.29,5.29,0,0,1,1.52-1.28l11.28-6.51a1.1,1.1,0,0,1,1.19-.07Z" style="fill:#fff;opacity:0.4"></path><path d="M280.51,221.64a1.08,1.08,0,0,1-1.42-.1,2.47,2.47,0,0,1-.59-1.84V208L255,221.55a1.07,1.07,0,0,1-1.42-.1,2.44,2.44,0,0,1-.6-1.84V207.42a15.06,15.06,0,0,1,1-5.5l22.33-56.25a10.24,10.24,0,0,1,1.24-2.38A5.08,5.08,0,0,1,279,142l11.28-6.51a1.09,1.09,0,0,1,1.42.1,2.49,2.49,0,0,1,.59,1.84v44.16l6.43-3.71a1.09,1.09,0,0,1,1.42.1,2.51,2.51,0,0,1,.59,1.84V192a6,6,0,0,1-.59,2.53,3.78,3.78,0,0,1-1.42,1.74L292.31,200v11.73a6,6,0,0,1-.59,2.53A3.89,3.89,0,0,1,290.3,216Zm-1.64-32.29V168.19L268,195.65Z" style="fill:#99A2C0"></path></g><path d="M201.22,292.43a.25.25,0,0,1,.32,0,.57.57,0,0,1,.14.42v2.76a1.41,1.41,0,0,1-.14.58.81.81,0,0,1-.32.39l-8,4.63a.25.25,0,0,1-.32,0,.57.57,0,0,1-.13-.42V284a1.31,1.31,0,0,1,.13-.57.86.86,0,0,1,.32-.39l7.89-4.56a.24.24,0,0,1,.32,0,.53.53,0,0,1,.13.41v2.77a1.31,1.31,0,0,1-.13.57.86.86,0,0,1-.32.39l-5.21,3v2.81l4.83-2.79a.27.27,0,0,1,.33,0,.57.57,0,0,1,.13.42v2.76a1.31,1.31,0,0,1-.13.57.91.91,0,0,1-.33.4l-4.83,2.79v2.92Z" style="fill:#455a64"></path><path d="M209.09,273.83a5.94,5.94,0,0,1,2-.79,2.12,2.12,0,0,1,1.5.23,2.33,2.33,0,0,1,.95,1.31,7.61,7.61,0,0,1,.33,2.46,11.24,11.24,0,0,1-.53,3.54,9.08,9.08,0,0,1-1.48,2.83l2.09,5a.56.56,0,0,1,.05.25,1,1,0,0,1-.11.47.72.72,0,0,1-.26.32l-2.3,1.33c-.22.13-.38.14-.48,0a1.23,1.23,0,0,1-.23-.33L208.73,286l-1.55.89v5.58a1.33,1.33,0,0,1-.14.57,1,1,0,0,1-.32.4l-2.22,1.27a.23.23,0,0,1-.32,0,.54.54,0,0,1-.13-.42V277.44a1.31,1.31,0,0,1,.13-.57.9.9,0,0,1,.32-.4Zm-1.91,9,1.91-1.1a3.62,3.62,0,0,0,1.17-1.1,3.1,3.1,0,0,0,.47-1.78c0-.73-.16-1.14-.47-1.24a1.5,1.5,0,0,0-1.17.26L207.18,279Z" style="fill:#455a64"></path><path d="M221.27,266.79a6.12,6.12,0,0,1,2-.79,2.21,2.21,0,0,1,1.49.23,2.4,2.4,0,0,1,1,1.32A7.59,7.59,0,0,1,226,270a11.61,11.61,0,0,1-.52,3.55,9.27,9.27,0,0,1-1.49,2.82l2.09,5a.62.62,0,0,1,.06.26,1.15,1.15,0,0,1-.11.47.8.8,0,0,1-.27.32l-2.3,1.33c-.22.13-.38.14-.48,0a1.13,1.13,0,0,1-.23-.34L220.91,279l-1.55.9v5.58a1.33,1.33,0,0,1-.14.57.86.86,0,0,1-.32.39l-2.22,1.28a.24.24,0,0,1-.32,0,.57.57,0,0,1-.13-.42V270.41a1.36,1.36,0,0,1,.13-.58.86.86,0,0,1,.32-.39Zm-1.91,9,1.91-1.11a3.39,3.39,0,0,0,1.17-1.09,3.12,3.12,0,0,0,.47-1.78c0-.73-.16-1.14-.47-1.24a1.51,1.51,0,0,0-1.17.26l-1.91,1.1Z" style="fill:#455a64"></path><path d="M228,269.69a14.63,14.63,0,0,1,.41-3,14.12,14.12,0,0,1,1-2.84,12,12,0,0,1,1.63-2.45,8.43,8.43,0,0,1,2.21-1.83,4.44,4.44,0,0,1,2.2-.71,2.44,2.44,0,0,1,1.63.57,3.56,3.56,0,0,1,1,1.64,8.84,8.84,0,0,1,.41,2.51c0,.73,0,1.51,0,2.32s0,1.59,0,2.32a14.63,14.63,0,0,1-.41,3,13.82,13.82,0,0,1-1,2.85,11.48,11.48,0,0,1-1.63,2.45,8.65,8.65,0,0,1-2.2,1.82,4.61,4.61,0,0,1-2.21.73,2.44,2.44,0,0,1-1.63-.57,3.84,3.84,0,0,1-1-1.66,8.84,8.84,0,0,1-.41-2.51c0-.7,0-1.46,0-2.27S228,270.45,228,269.69Zm7.43.22c0-.32,0-.67,0-1.06s0-.78,0-1.18,0-.78,0-1.15,0-.69,0-1a5.26,5.26,0,0,0-.18-1.1,1.67,1.67,0,0,0-.41-.72,1,1,0,0,0-.65-.26,1.79,1.79,0,0,0-.91.3,3.37,3.37,0,0,0-.92.76,4.59,4.59,0,0,0-.65,1,5.74,5.74,0,0,0-.4,1.19,6.9,6.9,0,0,0-.18,1.3c0,.31,0,.65,0,1s0,.77,0,1.17,0,.79,0,1.16,0,.72,0,1a2.9,2.9,0,0,0,.58,1.83c.35.37.87.36,1.57-.05a3.63,3.63,0,0,0,1.55-1.75A7.39,7.39,0,0,0,235.45,269.91Z" style="fill:#455a64"></path><path d="M246,252.5a6.12,6.12,0,0,1,2-.79,2.21,2.21,0,0,1,1.49.23,2.4,2.4,0,0,1,1,1.32,7.59,7.59,0,0,1,.33,2.45,11.61,11.61,0,0,1-.52,3.55,9.44,9.44,0,0,1-1.49,2.83l2.09,5a.62.62,0,0,1,.06.26,1.15,1.15,0,0,1-.11.47.8.8,0,0,1-.27.32l-2.3,1.33c-.22.13-.38.14-.48,0a1.13,1.13,0,0,1-.23-.34l-1.88-4.49-1.55.9v5.58a1.33,1.33,0,0,1-.14.57.86.86,0,0,1-.32.39l-2.22,1.28a.24.24,0,0,1-.32,0,.57.57,0,0,1-.13-.42V256.12a1.39,1.39,0,0,1,.13-.58.86.86,0,0,1,.32-.39Zm-1.91,9,1.91-1.11a3.51,3.51,0,0,0,1.18-1.09,3.12,3.12,0,0,0,.46-1.78c0-.73-.15-1.14-.46-1.24a1.52,1.52,0,0,0-1.18.26l-1.91,1.1Z" style="fill:#455a64"></path><path d="M170.71,321.23c1-.6,1.86-.69,2.44-.26s.87,1.36.87,2.83a8.16,8.16,0,0,1-.87,3.85,6.24,6.24,0,0,1-2.44,2.57l-2.07,1.19v4.46a1,1,0,0,1-.11.43.66.66,0,0,1-.24.31l-1,.6a.18.18,0,0,1-.25,0,.4.4,0,0,1-.1-.31V324a1,1,0,0,1,.1-.44.69.69,0,0,1,.25-.3Zm-2.07,7.69,2-1.16a3.12,3.12,0,0,0,1.62-2.95c0-.75-.15-1.18-.44-1.3a1.42,1.42,0,0,0-1.18.26l-2,1.16Z" style="fill:#e0e0e0"></path><path d="M179.48,316.18c.13-.08.24-.09.31,0a.88.88,0,0,1,.18.4l3.18,10.78s0,.08,0,.13a1.13,1.13,0,0,1-.1.44.65.65,0,0,1-.25.3l-.93.54c-.18.1-.3.12-.37,0a.56.56,0,0,1-.14-.25l-.56-1.89L176.72,329l-.56,2.53a2.85,2.85,0,0,1-.14.41.8.8,0,0,1-.37.38l-.93.54a.19.19,0,0,1-.25,0,.44.44,0,0,1-.1-.32.71.71,0,0,1,0-.15L177.56,318a2.82,2.82,0,0,1,.18-.61.71.71,0,0,1,.31-.35Zm.71,8.35-1.43-4.87-1.42,6.51Z" style="fill:#e0e0e0"></path><path d="M184.16,318.64a11.36,11.36,0,0,1,.28-2.35,10.31,10.31,0,0,1,.75-2.13,8.27,8.27,0,0,1,1.22-1.8,7,7,0,0,1,1.68-1.36,3.7,3.7,0,0,1,1.86-.62,1.84,1.84,0,0,1,1.16.4,2,2,0,0,1,.61,1,3.9,3.9,0,0,1,.2,1,.87.87,0,0,1-.09.45.68.68,0,0,1-.26.29l-1,.61c-.09.05-.17.06-.22,0a.34.34,0,0,1-.13-.16,2.57,2.57,0,0,0-.13-.27,1,1,0,0,0-.35-.36,1.18,1.18,0,0,0-.63-.15,2.06,2.06,0,0,0-1,.33,4,4,0,0,0-1.56,1.71,5.72,5.72,0,0,0-.62,2.52c0,.52,0,1.07,0,1.64s0,1.12,0,1.61c0,1.09.23,1.78.62,2a1.41,1.41,0,0,0,1.56-.15,4.66,4.66,0,0,0,.88-.67,3.76,3.76,0,0,0,.69-.92,4.22,4.22,0,0,0,.45-1.21,6.54,6.54,0,0,0,.17-1.54v-.16l-1.59.92a.19.19,0,0,1-.24,0,.42.42,0,0,1-.1-.32v-1.42a1,1,0,0,1,.1-.44.76.76,0,0,1,.24-.3l3-1.72a.17.17,0,0,1,.24,0,.41.41,0,0,1,.11.32v2.19a11.5,11.5,0,0,1-.25,2.35,9,9,0,0,1-.74,2.16,8.28,8.28,0,0,1-1.23,1.85,6.9,6.9,0,0,1-1.72,1.41,3.87,3.87,0,0,1-1.72.59,1.63,1.63,0,0,1-1.2-.43,2.71,2.71,0,0,1-.73-1.3,7.61,7.61,0,0,1-.28-2c0-.25,0-.53,0-.83s0-.62,0-.94,0-.63,0-.94S184.15,318.9,184.16,318.64Z" style="fill:#e0e0e0"></path><path d="M200,315.79a.18.18,0,0,1,.25,0,.41.41,0,0,1,.11.32v1.41a1,1,0,0,1-.11.44.59.59,0,0,1-.25.3l-5.69,3.29a.18.18,0,0,1-.24,0,.41.41,0,0,1-.11-.32V308.34a1,1,0,0,1,.11-.44.63.63,0,0,1,.24-.3l5.59-3.23a.19.19,0,0,1,.25,0,.42.42,0,0,1,.1.32v1.42a1,1,0,0,1-.1.43.67.67,0,0,1-.25.31l-4.19,2.41v3.18l3.91-2.26a.19.19,0,0,1,.24,0,.43.43,0,0,1,.11.32V312a1,1,0,0,1-.11.44.76.76,0,0,1-.24.3L195.73,315v3.32Z" style="fill:#e0e0e0"></path><path d="M211.47,311.67c-.15.09-.26.09-.33,0l-.17-.18-3.63-6.21v8.22a1,1,0,0,1-.11.44.63.63,0,0,1-.24.3l-1.05.61a.18.18,0,0,1-.25,0,.41.41,0,0,1-.1-.32V301.64a1,1,0,0,1,.1-.44.59.59,0,0,1,.25-.3l.9-.53c.15-.08.26-.09.34,0a1.26,1.26,0,0,1,.17.18l3.63,6.21v-8.22a1,1,0,0,1,.1-.44.65.65,0,0,1,.25-.3l1-.61a.18.18,0,0,1,.25,0,.45.45,0,0,1,.1.32v12.89a1.21,1.21,0,0,1-.1.44.65.65,0,0,1-.25.3Z" style="fill:#e0e0e0"></path><path d="M214.77,301a12.56,12.56,0,0,1,.27-2.27,10,10,0,0,1,.71-2.12,7.92,7.92,0,0,1,1.17-1.83,6,6,0,0,1,1.66-1.39,3.31,3.31,0,0,1,1.64-.53,1.64,1.64,0,0,1,1.17.48,3,3,0,0,1,.71,1.31,7.86,7.86,0,0,1,.29,1.95c0,.25,0,.52,0,.83v1.89c0,.31,0,.59,0,.85a13.41,13.41,0,0,1-.28,2.27,9.78,9.78,0,0,1-.71,2.12,7.92,7.92,0,0,1-1.17,1.83,6.22,6.22,0,0,1-1.65,1.37,3.33,3.33,0,0,1-1.66.54,1.67,1.67,0,0,1-1.17-.47,3,3,0,0,1-.71-1.31,8.05,8.05,0,0,1-.27-1.95c0-.24,0-.52,0-.82s0-.62,0-.95,0-.64,0-.95S214.76,301.27,214.77,301Zm5.87-3.29a2.64,2.64,0,0,0-.6-1.88,1.21,1.21,0,0,0-1.46.05,3.74,3.74,0,0,0-1.46,1.64,6,6,0,0,0-.6,2.57c0,.52,0,1.08,0,1.7s0,1.18,0,1.67a2.5,2.5,0,0,0,.6,1.87c.37.31.85.29,1.46-.06a3.8,3.8,0,0,0,1.46-1.62,6.36,6.36,0,0,0,.6-2.57c0-.51,0-1.08,0-1.7S220.65,298.22,220.64,297.72Z" style="fill:#e0e0e0"></path><path d="M230.28,286.84a.19.19,0,0,1,.25,0,.42.42,0,0,1,.1.32v1.42a1,1,0,0,1-.1.44.69.69,0,0,1-.25.3L228,290.68v10.94a1.13,1.13,0,0,1-.1.44.65.65,0,0,1-.25.3l-1,.61a.19.19,0,0,1-.25,0,.41.41,0,0,1-.1-.32V291.7L223.87,293a.18.18,0,0,1-.25,0,.4.4,0,0,1-.1-.31v-1.42a1,1,0,0,1,.1-.44.59.59,0,0,1,.25-.3Z" style="fill:#e0e0e0"></path><path d="M241.1,280.6a.18.18,0,0,1,.24,0,.41.41,0,0,1,.11.32v1.41a1,1,0,0,1-.11.44.63.63,0,0,1-.24.3L237,285.48v3.87l3.88-2.23a.18.18,0,0,1,.24,0,.44.44,0,0,1,.11.32v1.42a1,1,0,0,1-.11.44.63.63,0,0,1-.24.3L237,291.85v4.57a1,1,0,0,1-.1.44.59.59,0,0,1-.25.3l-1.05.61a.19.19,0,0,1-.25,0,.42.42,0,0,1-.1-.32V284.54a1,1,0,0,1,.1-.44.59.59,0,0,1,.25-.3Z" style="fill:#e0e0e0"></path><path d="M242.86,284.79a12.58,12.58,0,0,1,.28-2.27,9.77,9.77,0,0,1,.7-2.12,8.27,8.27,0,0,1,1.17-1.83,6.18,6.18,0,0,1,1.66-1.39,3.32,3.32,0,0,1,1.65-.53,1.63,1.63,0,0,1,1.16.48,3.15,3.15,0,0,1,.72,1.31,7.88,7.88,0,0,1,.28,1.95c0,.25,0,.52,0,.83s0,.62,0,.94,0,.64,0,.95,0,.6,0,.85a12.47,12.47,0,0,1-.28,2.27,9.77,9.77,0,0,1-.7,2.12,8,8,0,0,1-1.18,1.83,6.22,6.22,0,0,1-1.65,1.37,3.3,3.3,0,0,1-1.66.54,1.69,1.69,0,0,1-1.17-.47,2.92,2.92,0,0,1-.7-1.31,8,8,0,0,1-.28-1.95c0-.24,0-.52,0-.82s0-.62,0-1,0-.64,0-.95S242.85,285.05,242.86,284.79Zm5.87-3.29a2.55,2.55,0,0,0-.6-1.88c-.37-.31-.86-.29-1.46.06a3.77,3.77,0,0,0-1.46,1.63,6,6,0,0,0-.6,2.57c0,.52,0,1.08,0,1.7s0,1.18,0,1.67a2.5,2.5,0,0,0,.6,1.87c.37.31.86.29,1.46-.06a3.8,3.8,0,0,0,1.46-1.62,6,6,0,0,0,.6-2.57c0-.51,0-1.08,0-1.7S248.75,282,248.73,281.5Z" style="fill:#e0e0e0"></path><path d="M259.53,270a.19.19,0,0,1,.25,0,.44.44,0,0,1,.1.32v8.19a12.21,12.21,0,0,1-.23,2.37A9.77,9.77,0,0,1,259,283a7.41,7.41,0,0,1-1.17,1.78,6.43,6.43,0,0,1-1.62,1.32,3.41,3.41,0,0,1-1.63.55,1.59,1.59,0,0,1-1.16-.43,2.75,2.75,0,0,1-.69-1.32,8.47,8.47,0,0,1-.23-2.1v-8.19a1.06,1.06,0,0,1,.11-.44.68.68,0,0,1,.24-.3l1-.61a.19.19,0,0,1,.25,0,.44.44,0,0,1,.1.32v8.08a4.7,4.7,0,0,0,.15,1.32,1.38,1.38,0,0,0,.4.72.83.83,0,0,0,.62.18,2.26,2.26,0,0,0,.79-.29,3.63,3.63,0,0,0,1.43-1.53,5,5,0,0,0,.4-1.19,6.67,6.67,0,0,0,.15-1.48V271.3a1,1,0,0,1,.11-.44.73.73,0,0,1,.24-.31Z" style="fill:#e0e0e0"></path><path d="M268.05,279c-.15.08-.26.09-.34,0a1.31,1.31,0,0,1-.17-.18l-3.63-6.2v8.22a1,1,0,0,1-.1.44.64.64,0,0,1-.25.3l-1.05.61a.18.18,0,0,1-.24,0,.43.43,0,0,1-.11-.32V269a1,1,0,0,1,.11-.43.73.73,0,0,1,.24-.31l.91-.52c.15-.08.26-.09.34,0l.17.18,3.63,6.2v-8.22a1,1,0,0,1,.1-.44.76.76,0,0,1,.24-.3l1.06-.61a.19.19,0,0,1,.24,0,.44.44,0,0,1,.11.32v12.89a1,1,0,0,1-.11.44.73.73,0,0,1-.24.31Z" style="fill:#e0e0e0"></path><path d="M275.2,260.91a3.79,3.79,0,0,1,1.67-.58,1.6,1.6,0,0,1,1.18.43,2.86,2.86,0,0,1,.72,1.32,8.64,8.64,0,0,1,.31,2.1c0,1,0,1.95,0,2.95a13.56,13.56,0,0,1-.31,2.45,9.36,9.36,0,0,1-.71,2.15,7.8,7.8,0,0,1-1.16,1.78,6.55,6.55,0,0,1-1.63,1.33L272,276.73a.18.18,0,0,1-.24,0,.43.43,0,0,1-.11-.32V263.5a1,1,0,0,1,.11-.44.58.58,0,0,1,.24-.3Zm2.13,4.28a4.92,4.92,0,0,0-.16-1.1,1.66,1.66,0,0,0-.4-.72.89.89,0,0,0-.67-.25,1.93,1.93,0,0,0-1,.32l-1.74,1v9l1.8-1a3.22,3.22,0,0,0,.92-.76,4.19,4.19,0,0,0,.65-1,5.55,5.55,0,0,0,.4-1.19,7.84,7.84,0,0,0,.16-1.29C277.36,267.14,277.36,266.15,277.33,265.19Z" style="fill:#e0e0e0"></path></g></g><g id="freepik--speech-bubble--inject-15"><g id="freepik--speech-bubble--inject-15"><g id="freepik--speech-bubble--inject-15"><path d="M421.33,48.71l-50.21,29a2.85,2.85,0,0,0-1.3,2.24v64.2a2.82,2.82,0,0,0,1.3,2.23l4.64,2.6a2.88,2.88,0,0,0,2.59,0l50.22-29a2.89,2.89,0,0,0,1.29-2.24V53.52a2.8,2.8,0,0,0-1.3-2.22l-4.63-2.6A2.9,2.9,0,0,0,421.33,48.71Z" style="fill:#99A2C0"></path><path d="M377.06,148.22V84a2.86,2.86,0,0,1,1.29-2.24l50.22-29c.71-.41,1.29-.08,1.29.74v64.21a2.89,2.89,0,0,1-1.29,2.24l-50.22,29C377.63,149.38,377.06,149,377.06,148.22Z" style="fill:#99A2C0"></path><path d="M378.35,149a3,3,0,0,1-2.6,0l-4.63-2.6a2.83,2.83,0,0,1-1.3-2.22V80a2.68,2.68,0,0,1,.41-1.32l7.21,4.11a2.56,2.56,0,0,0-.38,1.27v64.2C377.06,149,377.59,149.41,378.35,149Z" style="opacity:0.2"></path><path d="M429.84,53.29c-.1-.65-.63-.88-1.27-.51l-50.22,29a2.66,2.66,0,0,0-.91,1l-7.21-4.11a2.54,2.54,0,0,1,.89-.92l50.22-29a2.88,2.88,0,0,1,2.59,0l4.63,2.59A2.86,2.86,0,0,1,429.84,53.29Z" style="fill:#fff;opacity:0.4"></path><path d="M369.82,99.3l-10.4,10.58a1.14,1.14,0,0,0,.19,1.77c.22.14,7.2,4.15,7.2,4.15l10.25-12.33Z" style="fill:#99A2C0"></path><path d="M369.82,99.3l-10.4,10.58a1.14,1.14,0,0,0,.19,1.77c.22.14,7.2,4.15,7.2,4.15l10.25-12.33Z" style="opacity:0.1"></path><path d="M377.06,103.47l-10.41,10.58a1.15,1.15,0,0,0,1,1.94l9.43-1.36C378.07,114.63,378.07,103.47,377.06,103.47Z" style="fill:#99A2C0"></path></g><g id="freepik--dead-emoji--inject-15"><path d="M395,101a1,1,0,0,1-.69-.28l-7.46-7.18a1,1,0,1,1,1.38-1.44l7.47,7.18a1,1,0,0,1,0,1.42A1,1,0,0,1,395,101Z" style="fill:#455a64"></path><path d="M387.54,105.34a1.11,1.11,0,0,1-.43-.09,1,1,0,0,1-.47-1.33l7.46-15.8a1,1,0,0,1,1.33-.48,1,1,0,0,1,.48,1.33l-7.46,15.8A1,1,0,0,1,387.54,105.34Z" style="fill:#455a64"></path><path d="M419.38,87a1,1,0,0,1-.7-.28l-7.46-7.18a1,1,0,0,1,0-1.41,1,1,0,0,1,1.42,0l7.46,7.18a1,1,0,0,1-.69,1.72Z" style="fill:#455a64"></path><path d="M411.91,91.27a1,1,0,0,1-.42-.09,1,1,0,0,1-.48-1.34l7.46-15.79a1,1,0,1,1,1.81.85l-7.46,15.8A1,1,0,0,1,411.91,91.27Z" style="fill:#455a64"></path><path d="M387.21,123.24a1,1,0,0,1-.87-.5,1,1,0,0,1,.37-1.36l32.5-18.77a1,1,0,0,1,1,1.74l-32.5,18.76A1,1,0,0,1,387.21,123.24Z" style="fill:#455a64"></path><path d="M409.86,123.77a3.13,3.13,0,0,1-1.56-.41,4.16,4.16,0,0,1-1.78-3.77v-9.07a1,1,0,1,1,2,0v9.07a2.3,2.3,0,0,0,.78,2,1.83,1.83,0,0,0,1.78-.25,8.34,8.34,0,0,0,3.56-6.48v-9.07a1,1,0,0,1,2,0v9.07a10.26,10.26,0,0,1-4.56,8.21A4.48,4.48,0,0,1,409.86,123.77Z" style="fill:#455a64"></path><path d="M411.58,117.93a1,1,0,0,1-1-1v-8.76a1,1,0,0,1,2,0v8.76A1,1,0,0,1,411.58,117.93Z" style="fill:#455a64"></path></g></g></g><g id="freepik--Character--inject-15"><g id="freepik--character--inject-15"><path d="M381.29,379.6c0-1.53-.4-10-.88-17.8-.5-8.21-.49-15.72-.49-15.72l13.88,10.36c-3,18.44-3.31,22.51-3.36,25.53l-.34.28a2.53,2.53,0,0,1,.08.77c0,3.58-4,5.52-7.17,7.92a58.2,58.2,0,0,1-8.5,5.6c-2.29,1.16-6.94,1.28-7.52-.19,4.42-2.77,9.7-6.28,12.74-9.64C381.18,385.11,381.19,382.74,381.29,379.6Z" style="fill:#ffa8a7"></path><path d="M361.58,400.9a2.79,2.79,0,0,0,.78,2.84,12.85,12.85,0,0,0,9.66,1.82c4.75-.84,7.27-2.31,9.11-4s4.41-4.08,6.55-4.66a13,13,0,0,0,4.73-2.2c.61-.65.39-3.4.39-3.4Z" style="fill:#263238"></path><path d="M390.48,380.69a.84.84,0,0,1,.67.69c.18.76.45,3,.82,4.19a22.27,22.27,0,0,1,.79,6.68c-.2,1.43-3.42,2.56-5.48,3.46a26.79,26.79,0,0,0-6.57,4.6,19.22,19.22,0,0,1-9.9,4.23c-3.68.14-7.89-.85-8.92-2.51-1.28-2.06-.41-3.33,4.93-6.12,1-.53,4.54-2.85,5.74-3.69,3.25-2.26,6.43-5.35,7.8-9.16a2,2,0,0,1,.73-1.17,1.71,1.71,0,0,1,1.05-.15,8.81,8.81,0,0,1,2.67.67c.75.31,1.81.67,1.84,1.61a3.12,3.12,0,0,1-.16,1c-.06.2-.1.46.07.56s.37,0,.51-.17a14,14,0,0,0,1.39-1.83,5.51,5.51,0,0,1,.82-.92c.28-.25.66-.38.91-.65A1.79,1.79,0,0,0,390.48,380.69Z" style="fill:#99A2C0"></path><path d="M390.48,380.69a.84.84,0,0,1,.67.69c.18.76.45,3,.82,4.19a22.27,22.27,0,0,1,.79,6.68c-.2,1.43-3.42,2.56-5.48,3.46a26.79,26.79,0,0,0-6.57,4.6,19.22,19.22,0,0,1-9.9,4.23c-3.68.14-7.89-.85-8.92-2.51-1.28-2.06-.41-3.33,4.93-6.12,1-.53,4.54-2.85,5.74-3.69,3.25-2.26,6.43-5.35,7.8-9.16a2,2,0,0,1,.73-1.17,1.71,1.71,0,0,1,1.05-.15,8.81,8.81,0,0,1,2.67.67c.75.31,1.81.67,1.84,1.61a3.12,3.12,0,0,1-.16,1c-.06.2-.1.46.07.56s.37,0,.51-.17a14,14,0,0,0,1.39-1.83,5.51,5.51,0,0,1,.82-.92c.28-.25.66-.38.91-.65A1.79,1.79,0,0,0,390.48,380.69Z" style="opacity:0.30000000000000004"></path><path d="M374.08,396.25c-3.33,1.52-1.85,2.08-.9,2.18s6.52-3.52,9.88-6.45,5.64-6.3,6.94-7.42c.49-.42,1-.93,1.47-1.4-.13-.74-.23-1.42-.32-1.78a.84.84,0,0,0-.67-.69,1.79,1.79,0,0,1-.29,1.28c-.25.27-.63.4-.91.65a5.51,5.51,0,0,0-.82.92,14,14,0,0,1-1.39,1.83C384.28,389.28,377.41,394.73,374.08,396.25Z" style="opacity:0.2"></path><path d="M373.4,397.91a.32.32,0,0,0,.21-.08.35.35,0,0,0,0-.48,8.12,8.12,0,0,0-6.34-2.16.34.34,0,0,0,.1.67,7.54,7.54,0,0,1,5.74,1.94A.3.3,0,0,0,373.4,397.91Z" style="fill:#ebebeb"></path><path d="M376.28,396a.34.34,0,0,0,.21-.08.34.34,0,0,0,0-.48,8.09,8.09,0,0,0-6.34-2.16.34.34,0,0,0-.28.39.35.35,0,0,0,.39.28,7.5,7.5,0,0,1,5.73,1.94A.32.32,0,0,0,376.28,396Z" style="fill:#ebebeb"></path><path d="M379.16,394.08a.34.34,0,0,0,.21-.08.34.34,0,0,0,0-.48,8.12,8.12,0,0,0-6.33-2.16.34.34,0,0,0-.28.39.33.33,0,0,0,.38.28,7.5,7.5,0,0,1,5.73,1.94A.32.32,0,0,0,379.16,394.08Z" style="fill:#ebebeb"></path><path d="M381.81,392a.32.32,0,0,0,.21-.08.35.35,0,0,0,0-.48,8.12,8.12,0,0,0-6.34-2.16.33.33,0,0,0-.28.39.34.34,0,0,0,.38.28,7.54,7.54,0,0,1,5.74,1.94A.3.3,0,0,0,381.81,392Z" style="fill:#ebebeb"></path><path d="M384.41,389.88a.32.32,0,0,0,.2-.08.33.33,0,0,0,0-.47,8.25,8.25,0,0,0-6.92-2.17.33.33,0,1,0,.11.66,7.65,7.65,0,0,1,6.3,1.95A.32.32,0,0,0,384.41,389.88Z" style="fill:#ebebeb"></path><path d="M409.29,359.54l15.18-.33c-.19,10.13-1.76,21.39-2,30.9-.05,1.79.09,13.9-.57,17.59-1,5.54-7.56,4.81-7.92,1.5s.35-17.46.33-18.91c0-6.1-2.86-16.39-4.4-27.33C409.85,362.43,409.36,360.06,409.29,359.54Z" style="fill:#ffa8a7"></path><path d="M411.53,411.52c-.12,3.25.17,5.44,1.14,7.45a4.78,4.78,0,0,0,5.31,2.47c2.25-.34,5.2-1.56,6.1-4.29a17.91,17.91,0,0,0,.75-7.7Z" style="fill:#263238"></path><path d="M422.52,388.94c.9.16.74,4.53.84,8.93.11,4.71,1.32,6.77,1.44,10.64.15,4.42-.27,6.35-2.05,8.84s-7.45,4.56-9.75.52c-1.88-3.29-1.64-6.72-1-11.06a108.91,108.91,0,0,0,1.27-11.07c.15-3.29.23-6.48,1.05-6.76,0,.48,0,1.1,0,1.57s-.07,2.15.44,2.21a7.12,7.12,0,0,0,.12-1.23,1.55,1.55,0,0,1,.35-1,1.74,1.74,0,0,1,1.05-.35A25,25,0,0,1,419,390a12.21,12.21,0,0,1,1.35.07,3.35,3.35,0,0,1,1.13.28.78.78,0,0,1,.45.49,1.4,1.4,0,0,1,0,.5,3.47,3.47,0,0,0,0,.91c0,.13.09.29.22.28s.16-.15.17-.25c.06-.53,0-.92.06-1.54,0-.28,0-.67,0-.95S422.51,389.23,422.52,388.94Z" style="fill:#99A2C0"></path><path d="M422.52,388.94c.9.16.74,4.53.84,8.93.11,4.71,1.32,6.77,1.44,10.64.15,4.42-.27,6.35-2.05,8.84s-7.45,4.56-9.75.52c-1.88-3.29-1.64-6.72-1-11.06a108.91,108.91,0,0,0,1.27-11.07c.15-3.29.23-6.48,1.05-6.76,0,.48,0,1.1,0,1.57s-.07,2.15.44,2.21a7.12,7.12,0,0,0,.12-1.23,1.55,1.55,0,0,1,.35-1,1.74,1.74,0,0,1,1.05-.35A25,25,0,0,1,419,390a12.21,12.21,0,0,1,1.35.07,3.35,3.35,0,0,1,1.13.28.78.78,0,0,1,.45.49,1.4,1.4,0,0,1,0,.5,3.47,3.47,0,0,0,0,.91c0,.13.09.29.22.28s.16-.15.17-.25c.06-.53,0-.92.06-1.54,0-.28,0-.67,0-.95S422.51,389.23,422.52,388.94Z" style="opacity:0.30000000000000004"></path><path d="M421.65,410.35c-.14,1.58,1.47,1.2,1.76-1s-.43-7.63-.05-11.46c-.1-4.4.06-8.77-.84-8.93,0,.06,0,.11,0,.17l-.09,2.22c0,.32,0,.61-.05.95-.28,3.22-.43,9.48-.44,12.45A54,54,0,0,1,421.65,410.35Z" style="opacity:0.2"></path><path d="M415.32,410.38a54.08,54.08,0,0,1-.32-5.62c0-2.95-.22-9.14-.53-12.38a8.07,8.07,0,0,1-.14-1.83c0-.44,0-1,0-1.47a.38.38,0,0,1,0-.1c-.59.22-.8,2-.92,4.15,0,1.28,0,2.86.14,4.78.42,3.82-.26,9.27,0,11.49S415.47,412,415.32,410.38Z" style="opacity:0.2"></path><path d="M414.73,410.49l.13,0a10.63,10.63,0,0,1,7-.05.35.35,0,0,0,.43-.2.34.34,0,0,0-.2-.43,11.25,11.25,0,0,0-7.52,0,.34.34,0,0,0-.18.44A.34.34,0,0,0,414.73,410.49Z" style="fill:#ebebeb"></path><path d="M414.31,407a.2.2,0,0,0,.11,0,13.35,13.35,0,0,1,7.87-.05.33.33,0,0,0,.43-.21.34.34,0,0,0-.21-.43,13.73,13.73,0,0,0-8.32.06.34.34,0,0,0-.2.43A.33.33,0,0,0,414.31,407Z" style="fill:#ebebeb"></path><path d="M422.39,403.65a.33.33,0,0,0,.3-.2.34.34,0,0,0-.16-.45,11.51,11.51,0,0,0-8.3,0,.33.33,0,0,0-.18.43.34.34,0,0,0,.43.19s4.12-1.64,7.77,0A.32.32,0,0,0,422.39,403.65Z" style="fill:#ebebeb"></path><path d="M422.45,400.56a.34.34,0,0,0,.15-.64,10.43,10.43,0,0,0-8.46-.06.34.34,0,0,0-.16.45.34.34,0,0,0,.45.15,9.92,9.92,0,0,1,7.88.07A.32.32,0,0,0,422.45,400.56Z" style="fill:#ebebeb"></path><path d="M422.51,397.08a.34.34,0,0,0,.3-.18.33.33,0,0,0-.15-.45c-4-2-8.35-.06-8.53,0a.34.34,0,0,0-.16.45.33.33,0,0,0,.44.17s4.22-1.87,7.95,0A.27.27,0,0,0,422.51,397.08Z" style="fill:#ebebeb"></path><path d="M418.1,261c5.41,14.8,5.51,24,4.65,39.56-.79,14.25-2.08,26.8-2.08,26.8.22,2.53,3.76,7.45,4.25,18.63a181.77,181.77,0,0,1-1,23.55s-7,2.58-12.92.05c0,0-6.17-26.72-7.87-39.79-1.48-11.41-3.65-24.88-3.65-24.88l-3.87,24.88a61.62,61.62,0,0,1,.6,11.37c-.5,6.08-3.46,22.41-3.46,22.41s-7.35,2.65-12.35-1.75c0,0-1.52-24.48-2.25-33.74-1-12.41-.77-46.43,2.14-63.86Z" style="fill:#455a64"></path><path d="M399.49,304.89l-2.65-20.61S387,283,382.56,278.84a16.11,16.11,0,0,0,11.59,7.27l3.62,19.24-2.15,24.42Z" style="fill:#263238"></path><path d="M402.1,229.12l.2-.09c12.65-6,17.73-20,17.11-33.3a35,35,0,0,0-2.59-12.32,20.88,20.88,0,0,0-8-9.57,20,20,0,0,0-9.15-2.75c-2.93-.19-6.72-.14-9.48,1a3.28,3.28,0,0,1-2.71.09,9.21,9.21,0,0,0-3-.18,10.43,10.43,0,0,0-6.88,4c-2.33,2.87-2.61,7.16-1.81,10.64.38,1.61,2.62,4,2.53,5.49-.14,2.23-1.76,4-3.54,5.92s-3.75,3.36-4.61,6.19c-.74,2.43-.87,7.58,4.57,9.56-7.92,10.47-.11,16.15,4.21,17.65a20.89,20.89,0,0,0,9,1.09C392.78,232,397.68,231.18,402.1,229.12Z" style="fill:#37474f"></path><path d="M374.75,246.9c4.66-4.79,13.07-15.64,13.07-15.64l4.76-16.48c.12,0-2.42.05-3.19,0-5.14.34-6.66.78-9.86,4.28-2.54,2.78-12.23,16-15.6,20.47L355,228.15c-2.14-3.24-1.8-6.87-2.91-9.51s-2.91-3.82-4.35-6.21-1.78-4-3-2.73.18,4.52.36,5.27,2,3-1,1.83-7.67-6.67-8.87-7.8-1.83.62-1.56,2-1,4.49-.55,6.77a9.28,9.28,0,0,0,3.18,5.87c2.18,2.19,7.49,4.87,9.57,7.74s6.51,11.79,9.23,17.17c3.44,6.83,6.38,9.08,10.25,6.78S373,248.67,374.75,246.9Z" style="fill:#ffa8a7"></path><path d="M363.93,239.54a10.9,10.9,0,0,1,3.25,6s1-3.3-2.48-7Z" style="fill:#f28f8f"></path><path d="M380.8,243.85c-6.32-5.2-4.24-12-1.93-16.55,4.62-9.13,9.42-12.72,11.42-12.68l12.59.11c6,.82,10.67.41,12.12.76,3.7.87,3.78,3.92,3.92,7.86.16,4.32.62,3.86-.51,11,0,0-1.71,5.53-2.38,8s-1.93,6.31-.91,10.31c.39,1.54,1.43,3,3,7.31a62.59,62.59,0,0,1,3.21,10.82s-8.63,8-26.56,5.42C381.59,274.33,379,270,379,270l2.47-15.39C381.14,249.2,381.05,247.25,380.8,243.85Z" style="fill:#99A2C0"></path><path d="M389,242.49s5.17,4.16,11.19,2.14a10.23,10.23,0,0,0,7-7.23s.51,6.85-7.07,9A9.89,9.89,0,0,1,389,242.49Z" style="opacity:0.1"></path><path d="M434.15,202.06c-2.68-3.34-10-11.69-11.35-13.36a7.74,7.74,0,0,0-3.16-2.38,8.11,8.11,0,0,1-2.94-1.87c-.52-.51-1.65-2.68-2.11-3.25a20.5,20.5,0,0,0-4.81-4.48c-2.12-1.49-4.13-2.18-6.31-3.59-1.28-.83-2.84-1.66-1.44-3.06a3.12,3.12,0,0,1,1.6-.87c3-.56,6.18.38,9.9,1.35a45.75,45.75,0,0,1,4.71,1.47,9.15,9.15,0,0,1,2.49,1.27,10.69,10.69,0,0,1,2.22,3c1.74,2.84,5.72,4.74,8.2,6.91,2.9,2.55,5.76,4.68,9.07,7.49a62.42,62.42,0,0,1,9,8.95c2,2.7,1.43,4.32.61,5.52-4.13,6.09-13.33,13-16.6,15.7-3.49,2.88-5.94,4.68-9.06,7.47a78,78,0,0,0-6.2,6.59,1.37,1.37,0,0,1-1.7.39c-3.61-2-6-12-3.22-18.21.71-1.59,1.45-1.65,1.45-1.65,5.7-4,19.65-13.35,19.65-13.35" style="fill:#ffa8a7"></path><path d="M434.15,202.06a14.24,14.24,0,0,0,6.51,4.65s-3.45.82-8.08-3.49Z" style="fill:#f28f8f"></path><path d="M382.73,195.55c.06,9.93,3.23,12.44,4.83,13.17s4.73.36,7.76-.09l-.1,6s-3.56,3.59-3.34,6.32,5.43,3.14,9.39.54a30.11,30.11,0,0,0,5.89-5.13,2.14,2.14,0,0,0,.52-1.37l.24-14s1.63,1.79,4.6-.17a5.4,5.4,0,0,0,1.52-7.83,4,4,0,0,0-6.08.62c-.91,1.7-.83,2.89-2,2.69s-1.28-1.53-1.36-2.49-.05-1.26-.12-2.51c-2.94-.63-6-4.72-6.31-7.7a14,14,0,0,1-6.39,1.44c-3.28-.23-5-.88-6.59-3.26a6.64,6.64,0,0,0-.92,1.77,21.87,21.87,0,0,0-1,3.89A51.76,51.76,0,0,0,382.73,195.55Z" style="fill:#ffa8a7"></path><path d="M395.32,208.63c3.2-.36,9.8-2.13,10.87-4.71a6.74,6.74,0,0,1-2.36,3.27c-2,1.65-8.54,3.43-8.54,3.43Z" style="fill:#f28f8f"></path><path d="M392.1,203.28a1.31,1.31,0,1,0,1.33-1.28A1.31,1.31,0,0,0,392.1,203.28Z" style="fill:#b16668"></path><path d="M393.77,193.51a1.37,1.37,0,1,0,1.47-1.33A1.4,1.4,0,0,0,393.77,193.51Z" style="fill:#263238"></path><path d="M384.5,192.92a1.26,1.26,0,0,0,1.16,1.37,1.2,1.2,0,0,0,1.33-1.21,1.25,1.25,0,1,0-2.49-.16Z" style="fill:#263238"></path><polygon points="390.91 191.63 389.92 199.92 385.67 198.16 390.91 191.63" style="fill:#f28f8f"></polygon><path d="M398.74,189.93l-2.47-2.35a1.78,1.78,0,0,0,.07,2.47A1.67,1.67,0,0,0,398.74,189.93Z" style="fill:#263238"></path><path d="M386.38,186.82l-2.74,2.07a1.66,1.66,0,0,0,2.37.39A1.81,1.81,0,0,0,386.38,186.82Z" style="fill:#263238"></path></g></g></svg>
'''
'''--- public/up-arrow-green.svg ---
<svg viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M13 25.7999C20.0693 25.7999 25.8 20.0692 25.8 13C25.8 5.93071 20.0693 0.199951 13 0.199951C5.93077 0.199951 0.200012 5.93071 0.200012 13C0.200012 20.0692 5.93077 25.7999 13 25.7999ZM18.9314 11.8686L14.1314 7.06858C13.5065 6.44374 12.4935 6.44374 11.8686 7.06858L7.06864 11.8686C6.4438 12.4934 6.4438 13.5065 7.06864 14.1313C7.69348 14.7562 8.70654 14.7562 9.33138 14.1313L11.4 12.0627L11.4 17.8C11.4 18.6836 12.1164 19.4 13 19.4C13.8837 19.4 14.6 18.6836 14.6 17.8V12.0627L16.6686 14.1313C17.2935 14.7562 18.3065 14.7562 18.9314 14.1313C19.5562 13.5065 19.5562 12.4934 18.9314 11.8686Z" fill="#2EC053"/>
</svg>

'''
'''--- public/up-arrow-grey.svg ---
<svg viewBox="0 0 26 26" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M13 25.7999C20.0693 25.7999 25.8 20.0692 25.8 13C25.8 5.93071 20.0693 0.199951 13 0.199951C5.93077 0.199951 0.200012 5.93071 0.200012 13C0.200012 20.0692 5.93077 25.7999 13 25.7999ZM18.9314 11.8686L14.1314 7.06858C13.5065 6.44374 12.4935 6.44374 11.8686 7.06858L7.06864 11.8686C6.4438 12.4934 6.4438 13.5065 7.06864 14.1313C7.69348 14.7562 8.70654 14.7562 9.33138 14.1313L11.4 12.0627V17.7999C11.4 18.6836 12.1164 19.4 13 19.4C13.8837 19.4 14.6 18.6836 14.6 17.7999V12.0627L16.6686 14.1313C17.2935 14.7562 18.3065 14.7562 18.9314 14.1313C19.5562 13.5065 19.5562 12.4934 18.9314 11.8686Z" fill="#989CA7"/>
</svg>

'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- renovate.json ---
{
  "$schema": "https://docs.renovatebot.com/renovate-schema.json",
  "extends": ["config:base", "group:all"],
  "major": {
    "enabled": false
  },
  "updatePinnedDependencies": false,
  "stabilityDays": 2,
  "timezone": "Asia/Jakarta",
  "schedule": ["before 1am on Monday"]
}

'''
'''--- src/app/(application)/actions.ts ---
'use server';

import { kv } from '@vercel/kv';
import { revalidatePath } from 'next/cache';
import { redirect } from 'next/navigation';

// import { auth } from '@/auth'
import { type Chat } from '@/lib/types';

// export async function getChats(userId?: string | null) {
//   if (!userId) {
//     return []
//   }

//   try {
//     const pipeline = kv.pipeline()
//     const chats: string[] = await kv.zrange(`user:chat:${userId}`, 0, -1, {
//       rev: true
//     })

//     for (const chat of chats) {
//       pipeline.hgetall(chat)
//     }

//     const results = await pipeline.exec()

//     return results as Chat[]
//   } catch (error) {
//     return []
//   }
// }

// export async function getChat(id: string, userId: string) {
//   const chat = await kv.hgetall<Chat>(`chat:${id}`)

//   if (!chat || (userId && chat.userId !== userId)) {
//     return null
//   }

//   return chat
// }

// export async function removeChat({ id, path }: { id: string; path: string }) {
//   // const session = await auth()

//   // if (!session) {
//   //   return {
//   //     error: 'Unauthorized'
//   //   }
//   // }

//   const uid = await kv.hget<string>(`chat:${id}`, 'userId')

//   // if (uid !== session?.user?.id) {
//   //   return {
//   //     error: 'Unauthorized'
//   //   }
//   // }

//   await kv.del(`chat:${id}`)
//   // await kv.zrem(`user:chat:${session.user.id}`, `chat:${id}`)

//   revalidatePath('/')
//   return revalidatePath(path)
// }

// export async function clearChats() {
//   // const session = await auth()

//   // if (!session?.user?.id) {
//   //   return {
//   //     error: 'Unauthorized'
//   //   }
//   // }

//   // const chats: string[] = await kv.zrange(`user:chat:${session.user.id}`, 0, -1)
//   if (!chats.length) {
//     return redirect('/')
//   }
//   const pipeline = kv.pipeline()

//   for (const chat of chats) {
//     pipeline.del(chat)
//     // pipeline.zrem(`user:chat:${session.user.id}`, chat)
//   }

//   await pipeline.exec()

//   revalidatePath('/')
//   return redirect('/')
// }

// export async function getSharedChat(id: string) {
//   const chat = await kv.hgetall<Chat>(`chat:${id}`)

//   if (!chat || !chat.sharePath) {
//     return null
//   }

//   return chat
// }

// export async function shareChat(id: string) {
//   // const session = await auth()

//   // if (!session?.user?.id) {
//   //   return {
//   //     error: 'Unauthorized'
//   //   }
//   // }

//   const chat = await kv.hgetall<Chat>(`chat:${id}`)

//   // if (!chat || chat.userId !== session.user.id) {
//   //   return {
//   //     error: 'Something went wrong'
//   //   }
//   // }

//   const payload = {
//     ...chat,
//     sharePath: `/share/${chat.id}`
//   }

//   await kv.hmset(`chat:${chat.id}`, payload)

//   return payload
// }

'''
'''--- src/app/(application)/api/chat/route.ts ---
// import { kv } from '@vercel/kv'
import { OpenAIStream, StreamingTextResponse } from 'ai';
import OpenAI from 'openai';

// import { auth } from '@/auth'
import { nanoid } from '@/lib/utils';

export const runtime = 'edge';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

interface VercelChatMessage {
  content: string;
  role: string;
}

export async function POST(req: Request) {
  const json = await req.json();
  const { messages, previewToken } = json;
  // const userId = (await auth())?.user.id
  console.log('messages: chat ', messages);
  // const systemMessage = {
  //   content:
  //     'You are a helpful Ai Coach. Ask the user about what three goals they have for this week. Ask them to' +
  //     ' set goals that fall into the SMART criteria. This means Specific, Measurable, Achievable, Relevant and Time-Bound.' +
  //     ' If the goals are not fitting into this criteria then respond with feedback guiding the user to make them follow SMART criteria. ' +
  //     ' If the Goals is not specific enough, then ask the user questions to get them to be more specific. ' +
  //     ' Be helpful and encouraging. Dont be too insistent on following the categories. Dont ask more than 2 questions. '
  //     + `Accept the user goal and when it is set, include the text: Goal number {goal number here} has been set.`,
  //   role: 'system'
  // }
  const systemMessage = {
    content: `Help the user set three goals for this week. Ask them for the three goals and encourage them to be
      specific. When they set a goal, ask for the next one until you set all three.
      `,
    role: 'system',
  };

  // if (!userId) {
  //   return new Response('Unauthorized', {
  //     status: 401
  //   })
  // }
  const messagesWithPrompt = [systemMessage, ...messages];

  if (previewToken) {
    openai.apiKey = previewToken;
  }

  const res = await openai.chat.completions.create({
    model: 'gpt-3.5-turbo',
    messages: messagesWithPrompt,
    temperature: 0.7,
    stream: true,
  });

  const stream = OpenAIStream(res, {
    async onCompletion(completion) {
      const title = json.messages[0].content.substring(0, 100);
      const id = json.id ?? nanoid();
      const createdAt = Date.now();
      const path = `/chat/${id}`;
      const payload = {
        id,
        title,
        // userId,
        createdAt,
        path,
        messages: [
          ...messages,
          {
            content: completion,
            role: 'assistant',
          },
        ],
      };
      // await kv.hmset(`chat:${id}`, payload)
      // await kv.zadd(`user:chat:${userId}`, {
      //   score: createdAt,
      //   member: `chat:${id}`
      // })
      const msgArray = [
        ...messages,
        {
          content: completion,
          role: 'assistant',
        },
      ];
      const formatMessage = (message: any) => {
        return `${message.role}: ${message.content}`;
      };

      const allMessages = formatMessage(msgArray);
      const agentHelperPrompt = `You are a helpful assistant. Your job is to look at the current 
        conversation between a client and a coach. If the message from the coach Assistant
        says that one of 3 goals has been set, then you need to return a JSON object that says:
        goal_set: if the goal was set or not; true or false
        goal_description: the whole content description of what the goal is, a string.
        goal_number: Which goal this is of 1 to three; a number.
        If the goal is not set, then you can return goal_set: false.

        Coach Message:
        <coach message>
        ${completion}
        <coach message/>

        JSON_FORMAT:
        { goal_set: <boolean>, goal_description: <string description of the goal>', goal_number: <number one to three> }
      `;
      console.log('agentHelperPrompt: ', agentHelperPrompt);
      console.log('completion: ', completion);

      const goalAgentResponse = await openai.chat.completions.create({
        messages: [
          {
            role: 'system',
            content: agentHelperPrompt,
          },
          { role: 'user', content: 'Who won the world series in 2020?' },
        ],
        model: 'gpt-3.5-turbo-0125',
        response_format: { type: 'json_object' },
      });
      console.log('goalAgentResponse: ', goalAgentResponse);

      // if (goalAgentResponse.finish_reason !== 'stop') {
      //   console.log('unable to get the json response')
      //   return
      // }
      const chatId = 'AidgokA';
      // NkgXMlr
      const categoryResponse = JSON.parse(
        goalAgentResponse.choices[0].message?.content ?? ''
      );
      console.log('categoryResponse: ', categoryResponse);

      if (categoryResponse.goal_set) {
        const goalPayload = {
          goal_description: categoryResponse.goal_description,
          goal_number: categoryResponse.goal_number,
        };
        console.log('setting goalPayload: ', goalPayload);

        // const setResp = await kv.hmset(`goal:${id}`, goalPayload)
        // console.log('kv setResp', setResp)
      } else {
        console.log('goal not set');
      }
    },
  });

  return new StreamingTextResponse(stream);
}

'''
'''--- src/app/(application)/api/hello/route.ts ---
export const GET = async () => {
  return new Response(JSON.stringify({ name: 'John Doe' }), {
    headers: { 'Content-Type': 'application/json' },
  });
};

'''
'''--- src/app/(application)/manifest.ts ---
import type MetadataRoute from 'next';

//@ts-ignore
const manifest = (): MetadataRoute.Manifest => ({
  short_name: 'nextarter-tailwind',
  name: 'Next.js App Template',
  lang: 'en',
  start_url: '/',
  background_color: '#FFFFFF',
  theme_color: '#FFFFFF',
  dir: 'ltr',
  display: 'standalone',
  prefer_related_applications: false,
  icons: [
    {
      src: '/vercel.svg',
      purpose: 'any',
      sizes: '48x48 72x72 96x96 128x128 256x256',
    },
  ],
});

export default manifest;

'''
'''--- src/app/(application)/not-found.ts ---
import Page404 from '@/lib/pages/404';

export default Page404;

'''
'''--- src/components/Conversation/index.ts ---
export { default as RecipientControl } from './RecipientControl'
export { default as MessagesList } from './MessagesList'
export { default as MessageComposer } from './MessageComposer'
export { default as Conversation } from './Conversation'

'''
'''--- src/components/Views/index.ts ---
export { default as NavigationView } from './NavigationView'
export { default as ConversationView } from './ConversationView'

'''
'''--- src/components/helpers/appVersion.ts ---
import packageJson from '../../../package.json'

export const getAppVersion = () => {
  const { name, version } = packageJson
  return name + '/' + version
}

'''
'''--- src/components/helpers/classNames.ts ---
export default function classNames(...classes: (string | null)[]) {
  return classes.filter(Boolean).join(' ')
}

'''
'''--- src/components/helpers/constants.ts ---
export const MESSAGE_LIMIT = 20

'''
'''--- src/components/helpers/env.ts ---
export const getEnv = (): 'dev' | 'production' | 'local' => {
  const envVar = process.env.NEXT_PUBLIC_XMTP_ENVIRONMENT
  if (envVar === 'production') {
    return envVar
  }
  if (envVar === 'local') {
    return envVar
  }
  return 'dev'
}

export const tagStr = (): string | null => {
  return getEnv() === 'production' ? null : getEnv().toLocaleUpperCase()
}

'''
'''--- src/components/helpers/getUniqueMessages.ts ---
import type { DecodedMessage } from '@xmtp/xmtp-js'

const getUniqueMessages = (msgObj: DecodedMessage[]): DecodedMessage[] => {
  const uniqueMessages = [
    ...Array.from(new Map(msgObj.map((item) => [item['id'], item])).values()),
  ]
  uniqueMessages.sort((a, b) => {
    return (b.sent?.getTime() ?? 0) - (a.sent?.getTime() ?? 0)
  })

  return uniqueMessages ?? []
}

export default getUniqueMessages

'''
'''--- src/components/helpers/index.ts ---
export { default as classNames } from './classNames'
export * from './string'
export * from './env'
export * from './appVersion'
export * from './keys'
export * from './constants'

'''
'''--- src/components/helpers/keys.ts ---
import { getEnv } from './env'

const ENCODING = 'binary'

export const buildLocalStorageKey = (walletAddress: string) =>
  `xmtp:${getEnv()}:keys:${walletAddress}`

export const loadKeys = (walletAddress: string): Uint8Array | null => {
  const val = localStorage.getItem(buildLocalStorageKey(walletAddress))
  return val ? Buffer.from(val, ENCODING) : null
}

export const storeKeys = (walletAddress: string, keys: Uint8Array) => {
  localStorage.setItem(
    buildLocalStorageKey(walletAddress),
    Buffer.from(keys).toString(ENCODING)
  )
}

export const wipeKeys = (walletAddress: string) => {
  localStorage.removeItem(buildLocalStorageKey(walletAddress))
}

'''
'''--- src/components/helpers/string.ts ---
import { Conversation } from '@xmtp/xmtp-js'
import { NextRouter } from 'next/router'

export const truncate = (
  str: string | undefined,
  length: number
): string | undefined => {
  if (!str) {
    return str
  }
  if (str.length > length) {
    return `${str.substring(0, length - 3)}...`
  }
  return str
}

export const formatDate = (d: Date | undefined): string =>
  d ? d.toLocaleDateString('en-US') : ''

export const formatTime = (d: Date | undefined): string =>
  d
    ? d.toLocaleTimeString(undefined, {
        hour12: true,
        hour: 'numeric',
        minute: '2-digit',
      })
    : ''

export const checkPath = () => {
  return window.location.pathname !== '/' && window.location.pathname !== '/dm'
}

export const isEns = (address: string): boolean => {
  return address.endsWith('eth') || address.endsWith('.cb.id')
}

export const is0xAddress = (address: string): boolean =>
  address.startsWith('0x') && address.length === 42

export const shortAddress = (addr: string): string =>
  addr.length > 10 && addr.startsWith('0x')
    ? `${addr.substring(0, 6)}...${addr.substring(addr.length - 4)}`
    : addr

export const getConversationKey = (conversation?: Conversation): string => {
  return conversation?.context?.conversationId
    ? `${conversation?.peerAddress}/${conversation?.context?.conversationId}`
    : conversation?.peerAddress ?? ''
}

export const getAddressFromPath = (router: NextRouter): string => {
  return Array.isArray(router.query.recipientWalletAddr)
    ? router.query.recipientWalletAddr[0]
    : (router.query.recipientWalletAddr as string)
}

'''
'''--- src/components/hooks/useEns.ts ---
import { useState, useEffect } from 'react'
import { is0xAddress, isEns } from '../helpers/string'
import useWalletProvider from './useWalletProvider'

const useEns = (addressOrName: string | undefined) => {
  const { resolveName, lookupAddress, getAvatarUrl } = useWalletProvider()
  const [address, setAddress] = useState<string>('')
  const [name, setName] = useState<string>('')
  const [avatarUrl, setAvatarUrl] = useState<string>('')
  const [loading, setLoading] = useState<boolean>(true)
  const probableAddress =
    addressOrName && is0xAddress(addressOrName) ? addressOrName : undefined
  const probableName =
    addressOrName && isEns(addressOrName) ? addressOrName : undefined

  useEffect(() => {
    if (!resolveName || !lookupAddress || !getAvatarUrl) {
      return
    }
    const initAvatarUrl = async (name: string) => {
      setAvatarUrl((await getAvatarUrl(name)) as string)
    }
    const initName = async (probableAddress: string) => {
      setLoading(true)
      setName((await lookupAddress(probableAddress)) as string)
      if (name) {
        await initAvatarUrl(name)
      }
      setLoading(false)
    }
    const initAddress = async (probableName: string) => {
      setLoading(true)
      setAddress((await resolveName(probableName)) as string)
      await initAvatarUrl(probableName)
      setLoading(false)
    }
    if (probableAddress) {
      initName(probableAddress)
    }
    if (probableName) {
      initAddress(probableName)
    }
  }, [
    probableName,
    probableAddress,
    name,
    resolveName,
    lookupAddress,
    getAvatarUrl,
  ])

  return {
    address: probableAddress || (address as string | undefined),
    name: probableName || (name as string | undefined),
    avatarUrl: avatarUrl as string | undefined,
    loading,
  }
}

export default useEns

'''
'''--- src/components/hooks/useGetMessages.ts ---
import { SortDirection } from '@xmtp/xmtp-js'
import { useEffect, useState } from 'react'
import { MESSAGE_LIMIT } from '../helpers'
import { useAppStore } from '../store/app'

const useGetMessages = (conversationKey: string, endTime?: Date) => {
  const convoMessages = useAppStore((state) =>
    state.convoMessages.get(conversationKey)
  )
  const conversation = useAppStore((state) =>
    state.conversations.get(conversationKey)
  )
  const addMessages = useAppStore((state) => state.addMessages)
  const [hasMore, setHasMore] = useState<Map<string, boolean>>(new Map())

  useEffect(() => {
    if (!conversation) {
      return
    }

    const loadMessages = async () => {
      const newMessages = await conversation.messages({
        direction: SortDirection.SORT_DIRECTION_DESCENDING,
        limit: MESSAGE_LIMIT,
        endTime: endTime,
      })
      if (newMessages.length > 0) {
        addMessages(conversationKey, newMessages)
        if (newMessages.length < MESSAGE_LIMIT) {
          hasMore.set(conversationKey, false)
          setHasMore(new Map(hasMore))
        } else {
          hasMore.set(conversationKey, true)
          setHasMore(new Map(hasMore))
        }
      } else {
        hasMore.set(conversationKey, false)
        setHasMore(new Map(hasMore))
      }
    }
    loadMessages()
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [conversation, conversationKey, endTime])

  return {
    convoMessages,
    hasMore: hasMore.get(conversationKey) ?? false,
  }
}

export default useGetMessages

'''
'''--- src/components/hooks/useInitXmtpClient.ts ---
import { Client } from '@xmtp/xmtp-js'
import { Signer } from 'ethers'
import { useCallback, useEffect, useState } from 'react'
import {
  getAppVersion,
  getEnv,
  loadKeys,
  storeKeys,
  wipeKeys,
} from '../helpers'
import { useAppStore } from '../store/app'

const useInitXmtpClient = (cacheOnly = false) => {
  const signer = useAppStore((state) => state.signer)
  const address = useAppStore((state) => state.address) ?? ''
  const client = useAppStore((state) => state.client)
  const setClient = useAppStore((state) => state.setClient)
  const reset = useAppStore((state) => state.reset)
  const [isRequestPending, setIsRequestPending] = useState(false)

  const disconnect = () => {
    reset()
    if (signer) {
      wipeKeys(address)
    }
  }

  const initClient = useCallback(
    async (wallet: Signer) => {
      if (wallet && !client) {
        try {
          setIsRequestPending(true)
          let keys = loadKeys(address)
          if (!keys) {
            if (cacheOnly) {
              return
            }
            keys = await Client.getKeys(wallet, {
              env: getEnv(),
              appVersion: getAppVersion(),
            })
            storeKeys(address, keys)
          }
          const xmtp = await Client.create(null, {
            env: getEnv(),
            appVersion: getAppVersion(),
            privateKeyOverride: keys,
          })
          setClient(xmtp)
          setIsRequestPending(false)
        } catch (e) {
          console.error(e)
          setClient(null)
          setIsRequestPending(false)
        }
      }
    },
    [client]
  )

  useEffect(() => {
    if (!isRequestPending) {
      signer ? initClient(signer) : disconnect()
    }
  }, [signer, initClient])

  return {
    initClient,
  }
}

export default useInitXmtpClient

'''
'''--- src/components/hooks/useSendMessage.ts ---
import { Conversation } from '@xmtp/xmtp-js'
import { useCallback } from 'react'

const useSendMessage = (selectedConversation?: Conversation) => {
  const sendMessage = useCallback(
    async (message: string) => {
      await selectedConversation?.send(message)
    },
    [selectedConversation]
  )

  return {
    sendMessage,
  }
}

export default useSendMessage

'''
'''--- src/components/hooks/useWindowSize.ts ---
import { useLayoutEffect, useState } from 'react'

const useWindowSize = () => {
  const [size, setSize] = useState<[number, number]>([0, 0])

  useLayoutEffect(() => {
    function updateSize() {
      setSize([window.innerWidth, window.innerHeight])
    }
    window.addEventListener('resize', updateSize)
    updateSize()
    return () => window.removeEventListener('resize', updateSize)
  }, [])
  return size
}

export default useWindowSize

'''
'''--- src/components/styles/Home.module.css ---

'''
'''--- src/components/styles/Loader.module.css ---
.lds-roller {
  display: inline-block;
  position: relative;
  width: 40px;
  height: 40px;
}
.lds-roller div {
  animation: lds-roller 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
  transform-origin: 20px 20px;
}
.lds-roller div:after {
  content: ' ';
  display: block;
  position: absolute;
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background: #31006e;
  margin: 0px 0 0 0px;
}
.lds-roller div:nth-child(1) {
  animation-delay: -0.036s;
}
.lds-roller div:nth-child(1):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(2) {
  animation-delay: -0.08s;
}
.lds-roller div:nth-child(2):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(3) {
  animation-delay: -0.12s;
}
.lds-roller div:nth-child(3):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(4) {
  animation-delay: -0.16s;
}
.lds-roller div:nth-child(4):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(5) {
  animation-delay: -0.2s;
}
.lds-roller div:nth-child(5):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(6) {
  animation-delay: -0.24s;
}
.lds-roller div:nth-child(6):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(7) {
  animation-delay: -0.28s;
}
.lds-roller div:nth-child(7):after {
  top: 0px;
  left: 25px;
}
.lds-roller div:nth-child(8) {
  animation-delay: -0.32s;
}
.lds-roller div:nth-child(8):after {
  top: 0px;
  left: 25px;
}
@keyframes lds-roller {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

'''
'''--- src/components/styles/MessageComposer.module.css ---
.bubble {
  border-radius: 24px;
  background-color: #fafafa;
  border: 1px solid #e5e7eb;
  height: 40px;
  padding: 10px 8px 10px 16px;
}

.input {
  font-size: 14px;
  border: none;
  background: none;
  padding-left: 0;
  margin-top: -2.8px;
  height: 25px;
}

.input:focus {
  outline: none;
  border: none;
  box-shadow: none;
}

.arrow {
  /* 
  // There must be a more flex-boxy way to do this.
  // Problem is that this button needs to start higher than the text 
  */
  margin-top: -2.8px;
  width: 25px;
  height: 25px;
}

'''
'''--- src/components/styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

'''
'''--- src/config/index.js ---
const development = {
    networkId: 'default',
    nodeUrl: 'http://localhost:3030',
    contractName: 'dev-1699477717061-85460506735763',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    explorerUrl: 'https://explorer.testnet.near.org',
  };
  
  const testnet = {
    networkId: 'testnet',
    nodeUrl: 'https://rpc.testnet.near.org',
    contractName: 'ethprince.testnet',
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
    explorerUrl: 'https://explorer.testnet.near.org',
  };
  
  const mainnet = {
    networkId: 'mainnet',
    nodeUrl: 'https://rpc.mainnet.near.org',
    contractName: 'dev-1699477717061-85460506735763',
    walletUrl: 'https://wallet.near.org',
    helperUrl: 'https://helper.mainnet.near.org',
    explorerUrl: 'https://explorer.mainnet.near.org',
  };
  
  const getConfig = (env) => {
    switch (env) {
      case 'production':
      case 'mainnet':
        return mainnet;
      case 'development':
      case 'testnet':
        return testnet;
      default:
        return development;
    }
  };
  
  module.exports = getConfig;
  
'''
'''--- src/context/wallet-context.js ---
'use client';
import React, { createContext, useContext, useState, useEffect } from 'react';
import getConfig from '../config'; // Adjust the import path as needed
import { Wallet } from '../near/near-wallet'; // Adjust the import path according to your project structure

// Create a Context
const WalletContext = createContext();

export const useWallet = () => useContext(WalletContext);

// Provider Component
export const WalletProvider = ({ children }) => {
  const [wallet, setWallet] = useState(null);
  const [isSignedIn, setIsSignedIn] = useState(false);
  const config = getConfig('testnet');

  useEffect(() => {
    const initWallet = async () => {
      const walletInstance = new Wallet({
        createAccessKeyFor: config.contractName,
        network: 'testnet',
      });
      const signedIn = await walletInstance.startUp();

      setWallet(walletInstance);
      setIsSignedIn(signedIn);
    };

    initWallet();
  }, []);

  return (
    <WalletContext.Provider value={{ wallet,setWallet, isSignedIn, setIsSignedIn }}>
      {children}
    </WalletContext.Provider>
  );
};

'''
'''--- src/contracts/build.sh ---
#!/bin/bash
set -e && RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release && mkdir -p ../out && cp target/wasm32-unknown-unknown/release/*.wasm ../out/main.wasm
'''
'''--- src/contracts/cargo.toml ---
[package]
name = "nft_simple"
version = "0.1.0"
authors = ["Near Inc <hello@nearprotocol.com>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.1.1"
serde_json = "1.0.113"

[profile.release]
codegen-units=1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- src/contracts/src/approval.rs ---
use crate::*;
use near_sdk::{ext_contract};

pub trait NonFungibleTokenCore {
    //approve an account ID to transfer a token on your behalf
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>);

    //check if the passed in account has access to approve the token ID
	  fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool;

    //revoke a specific account from transferring the token on your behalf
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId);

    //revoke all accounts from transferring the token on your behalf
    fn nft_revoke_all(&mut self, token_id: TokenId);
}

#[ext_contract(ext_non_fungible_approval_receiver)]
trait NonFungibleTokenApprovalsReceiver {
    //cross contract call to an external contract that is initiated during nft_approve
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    );
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {
    //allow a specific account ID to approve a token on your behalf
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) {
        /*
        assert at least one yocto for security reasons - this will cause a redirect to the NEAR wallet.
        The user needs to attach enough to pay for storage on the contract
    */
    assert_at_least_one_yocto();

    //get the token object from the token ID
    let mut token = self.tokens_by_id.get(&token_id).expect("No token");

    //make sure that the person calling the function is the owner of the token
    assert_eq!(
        &env::predecessor_account_id(),
        &token.owner_id,
        "Predecessor must be the token owner."
    );

    //get the next approval ID if we need a new approval
    let approval_id: u64 = token.next_approval_id;

    //check if the account has been approved already for this token
    let is_new_approval = token
        .approved_account_ids
        //insert returns none if the key was not present.  
        .insert(account_id.clone(), approval_id)
        //if the key was not present, .is_none() will return true so it is a new approval.
        .is_none();

    //if it was a new approval, we need to calculate how much storage is being used to add the account.
    let storage_used = if is_new_approval {
        bytes_for_approved_account_id(&account_id)
    //if it was not a new approval, we used no storage.
    } else {
        0
    };

    //increment the token's next approval ID by 1
    token.next_approval_id += 1;
    //insert the token back into the tokens_by_id collection
    self.tokens_by_id.insert(&token_id, &token);

    //refund any excess storage attached by the user. If the user didn't attach enough, panic. 
    refund_deposit(storage_used);

    //if some message was passed into the function, we initiate a cross contract call on the
    //account we're giving access to. 
    if let Some(msg) = msg {
        // Defaulting GAS weight to 1, no attached deposit, and no static GAS to attach.
        ext_non_fungible_approval_receiver::ext(account_id)
            .nft_on_approve(
                token_id, 
                token.owner_id, 
                approval_id, 
                msg
            ).as_return();
    }
}

    //check if the passed in account has access to approve the token ID
	  fn nft_is_approved(
        &self,
        token_id: TokenId,
        approved_account_id: AccountId,
        approval_id: Option<u64>,
    ) -> bool {
        //get the token object from the token_id
        let token = self.tokens_by_id.get(&token_id).expect("No token");
   
        //get the approval number for the passed in account ID
      let approval = token.approved_account_ids.get(&approved_account_id);
   
        //if there was some approval ID found for the account ID
        if let Some(approval) = approval {
            //if a specific approval_id was passed into the function
            if let Some(approval_id) = approval_id {
                //return if the approval ID passed in matches the actual approval ID for the account
                approval_id == *approval
            //if there was no approval_id passed into the function, we simply return true
            } else {
                true
            }
            //if there was no approval ID found for the account ID, we simply return false
        } else {
            false
        }
    }

    //revoke a specific account from transferring the token on your behalf 
    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        //assert that the user attached exactly 1 yoctoNEAR for security reasons
        assert_one_yocto();
        //get the token object using the passed in token_id
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");
    
        //get the caller of the function and assert that they are the owner of the token
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);
    
        //if the account ID was in the token's approval, we remove it and the if statement logic executes
        if token
            .approved_account_ids
            .remove(&account_id)
            .is_some()
        {
            //refund the funds released by removing the approved_account_id to the caller of the function
            refund_approved_account_ids_iter(predecessor_account_id, [account_id].iter());
    
            //insert the token back into the tokens_by_id collection with the account_id removed from the approval list
            self.tokens_by_id.insert(&token_id, &token);
        }
    }

    //revoke all accounts from transferring the token on your behalf
    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        //assert that the caller attached exactly 1 yoctoNEAR for security
        assert_one_yocto();

        //get the token object from the passed in token ID
        let mut token = self.tokens_by_id.get(&token_id).expect("No token");
        //get the caller and make sure they are the owner of the tokens
        let predecessor_account_id = env::predecessor_account_id();
        assert_eq!(&predecessor_account_id, &token.owner_id);

        //only revoke if the approved account IDs for the token is not empty
        if !token.approved_account_ids.is_empty() {
            //refund the approved account IDs to the caller of the function
            refund_approved_account_ids(predecessor_account_id, &token.approved_account_ids);
            //clear the approved account IDs
            token.approved_account_ids.clear();
            //insert the token back into the tokens_by_id collection with the approved account IDs cleared
            self.tokens_by_id.insert(&token_id, &token);
        }
    }
}

'''
'''--- src/contracts/src/enumeration.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    //Query for the total supply of NFTs on the contract
    pub fn nft_total_supply(&self) -> U128 {
        //return the length of the token metadata by ID
        U128(self.token_metadata_by_id.len() as u128)
    }

    //Query for nft tokens on the contract regardless of the owner using pagination
    pub fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<JsonToken> {
        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through each token using an iterator
        self.token_metadata_by_id.keys()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }

    //get the total supply of NFTs for a given owner
    pub fn nft_supply_for_owner(
        &self,
        account_id: AccountId,
    ) -> U128 {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);

        //if there is some set of tokens, we'll return the length as a U128
        if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            U128(tokens_for_owner_set.len() as u128)
        } else {
            //if there isn't a set of tokens for the passed in account ID, we'll return 0
            U128(0)
        }
    }

    //Query for all the tokens for an owner
    pub fn nft_tokens_for_owner(
        &self,
        account_id: AccountId,
        from_index: Option<U128>,
        limit: Option<u64>,
    ) -> Vec<JsonToken> {
        //get the set of tokens for the passed in owner
        let tokens_for_owner_set = self.tokens_per_owner.get(&account_id);
        //if there is some set of tokens, we'll set the tokens variable equal to that set
        let tokens = if let Some(tokens_for_owner_set) = tokens_for_owner_set {
            tokens_for_owner_set
        } else {
            //if there is no set of tokens, we'll simply return an empty vector. 
            return vec![];
        };

        //where to start pagination - if we have a from_index, we'll use that - otherwise start from 0 index
        let start = u128::from(from_index.unwrap_or(U128(0)));

        //iterate through the keys vector
        tokens.iter()
            //skip to the index we specified in the start variable
            .skip(start as usize) 
            //take the first "limit" elements in the vector. If we didn't specify a limit, use 50
            .take(limit.unwrap_or(50) as usize) 
            //we'll map the token IDs which are strings into Json Tokens
            .map(|token_id| self.nft_token(token_id.clone()).unwrap())
            //since we turned the keys into an iterator, we need to turn it back into a vector to return
            .collect()
    }
}
'''
'''--- src/contracts/src/events.rs ---
use std::fmt;

use near_sdk::serde::{Deserialize, Serialize};

/// Enum that represents the data type of the EventLog.
/// The enum can either be an NftMint or an NftTransfer.
#[derive(Serialize, Deserialize, Debug)]
#[serde(tag = "event", content = "data")]
#[serde(rename_all = "snake_case")]
#[serde(crate = "near_sdk::serde")]
#[non_exhaustive]
pub enum EventLogVariant {
    NftMint(Vec<NftMintLog>),
    NftTransfer(Vec<NftTransferLog>),
}

/// Interface to capture data about an event
///
/// Arguments:
/// * `standard`: name of standard e.g. nep171
/// * `version`: e.g. 1.0.0
/// * `event`: associate event data
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct EventLog {
    pub standard: String,
    pub version: String,

    // `flatten` to not have "event": {<EventLogVariant>} in the JSON, just have the contents of {<EventLogVariant>}.
    #[serde(flatten)]
    pub event: EventLogVariant,
}

impl fmt::Display for EventLog {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        f.write_fmt(format_args!(
            "EVENT_JSON:{}",
            &serde_json::to_string(self).map_err(|_| fmt::Error)?
        ))
    }
}

/// An event log to capture token minting
///
/// Arguments
/// * `owner_id`: "account.near"
/// * `token_ids`: ["1", "abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftMintLog {
    pub owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

/// An event log to capture token transfer
///
/// Arguments
/// * `authorized_id`: approved account to transfer
/// * `old_owner_id`: "owner.near"
/// * `new_owner_id`: "receiver.near"
/// * `token_ids`: ["1", "12345abc"]
/// * `memo`: optional message
#[derive(Serialize, Deserialize, Debug)]
#[serde(crate = "near_sdk::serde")]
pub struct NftTransferLog {
    #[serde(skip_serializing_if = "Option::is_none")]
    pub authorized_id: Option<String>,

    pub old_owner_id: String,
    pub new_owner_id: String,
    pub token_ids: Vec<String>,

    #[serde(skip_serializing_if = "Option::is_none")]
    pub memo: Option<String>,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn nep_format_vector() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]},{"owner_id":"user1.near","token_ids":["meme"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![
                NftMintLog {
                    owner_id: "foundation.near".to_owned(),
                    token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                    memo: None,
                },
                NftMintLog {
                    owner_id: "user1.near".to_owned(),
                    token_ids: vec!["meme".to_string()],
                    memo: None,
                },
            ]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_mint() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_mint","data":[{"owner_id":"foundation.near","token_ids":["aurora","proximitylabs"]}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftMint(vec![NftMintLog {
                owner_id: "foundation.near".to_owned(),
                token_ids: vec!["aurora".to_string(), "proximitylabs".to_string()],
                memo: None,
            }]),
        };
        assert_eq!(expected, log.to_string());
    }

    #[test]
    fn nep_format_transfer_all_fields() {
        let expected = r#"EVENT_JSON:{"standard":"nep171","version":"1.0.0","event":"nft_transfer","data":[{"authorized_id":"market.near","old_owner_id":"user1.near","new_owner_id":"user2.near","token_ids":["token"],"memo":"Go Team!"}]}"#;
        let log = EventLog {
            standard: "nep171".to_string(),
            version: "1.0.0".to_string(),
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                authorized_id: Some("market.near".to_string()),
                old_owner_id: "user1.near".to_string(),
                new_owner_id: "user2.near".to_string(),
                token_ids: vec!["token".to_string()],
                memo: Some("Go Team!".to_owned()),
            }]),
        };
        assert_eq!(expected, log.to_string());
    }
} 
'''
'''--- src/contracts/src/internal.rs ---
use crate::*;
use near_sdk::{CryptoHash};
use std::mem::size_of;

//convert the royalty percentage and amount to pay into a payout (U128)
pub(crate) fn royalty_to_payout(royalty_percentage: u32, amount_to_pay: Balance) -> U128 {
    U128(royalty_percentage as u128 * amount_to_pay / 10_000u128)
}

//calculate how many bytes the account ID is taking up
pub(crate) fn bytes_for_approved_account_id(account_id: &AccountId) -> u64 {
    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
    account_id.as_str().len() as u64 + 4 + size_of::<u64>() as u64
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 
pub(crate) fn refund_approved_account_ids_iter<'a, I>(
    account_id: AccountId,
    approved_account_ids: I, //the approved account IDs must be passed in as an iterator
) -> Promise where I: Iterator<Item = &'a AccountId> {
    //get the storage total by going through and summing all the bytes for each approved account IDs
    let storage_released: u64 = approved_account_ids.map(bytes_for_approved_account_id).sum();
    //transfer the account the storage that is released
    Promise::new(account_id).transfer(Balance::from(storage_released) * env::storage_byte_cost())
}

//refund a map of approved account IDs and send the funds to the passed in account ID
pub(crate) fn refund_approved_account_ids(
    account_id: AccountId,
    approved_account_ids: &HashMap<AccountId, u64>,
) -> Promise {
    //call the refund_approved_account_ids_iter with the approved account IDs as keys
    refund_approved_account_ids_iter(account_id, approved_account_ids.keys())
}

//convert the royalty percentage and amount to pay into a payout (U128)
pub(crate) fn royalty_to_payout(royalty_percentage: u32, amount_to_pay: Balance) -> U128 {
    U128(royalty_percentage as u128 * amount_to_pay / 10_000u128)
}

//calculate how many bytes the account ID is taking up
pub(crate) fn bytes_for_approved_account_id(account_id: &AccountId) -> u64 {
    // The extra 4 bytes are coming from Borsh serialization to store the length of the string.
    account_id.as_str().len() as u64 + 4 + size_of::<u64>() as u64
}

//refund the storage taken up by passed in approved account IDs and send the funds to the passed in account ID. 
pub(crate) fn refund_approved_account_ids_iter<'a, I>(
    account_id: AccountId,
    approved_account_ids: I, //the approved account IDs must be passed in as an iterator
) -> Promise where I: Iterator<Item = &'a AccountId> {
    //get the storage total by going through and summing all the bytes for each approved account IDs
    let storage_released: u64 = approved_account_ids.map(bytes_for_approved_account_id).sum();
    //transfer the account the storage that is released
    Promise::new(account_id).transfer(Balance::from(storage_released) * env::storage_byte_cost())
}

//refund a map of approved account IDs and send the funds to the passed in account ID
pub(crate) fn refund_approved_account_ids(
    account_id: AccountId,
    approved_account_ids: &HashMap<AccountId, u64>,
) -> Promise {
    //call the refund_approved_account_ids_iter with the approved account IDs as keys
    refund_approved_account_ids_iter(account_id, approved_account_ids.keys())
}

//used to generate a unique prefix in our storage collections (this is to avoid data collisions)
pub(crate) fn hash_account_id(account_id: &AccountId) -> CryptoHash {
    //get the default hash
    let mut hash = CryptoHash::default();
    //we hash the account ID and return it
    hash.copy_from_slice(&env::sha256(account_id.as_bytes()));
    hash
}

//used to make sure the user attached exactly 1 yoctoNEAR
pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR",
    )
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
pub(crate) fn assert_at_least_one_yocto() {
    assert!(
        env::attached_deposit() >= 1,
        "Requires attached deposit of at least 1 yoctoNEAR",
    )
}

//used to make sure the user attached exactly 1 yoctoNEAR
pub(crate) fn assert_one_yocto() {
    assert_eq!(
        env::attached_deposit(),
        1,
        "Requires attached deposit of exactly 1 yoctoNEAR",
    )
}

//Assert that the user has attached at least 1 yoctoNEAR (for security reasons and to pay for storage)
pub(crate) fn assert_at_least_one_yocto() {
    assert!(
        env::attached_deposit() >= 1,
        "Requires attached deposit of at least 1 yoctoNEAR",
    )
}

//refund the initial deposit based on the amount of storage that was used up
pub(crate) fn refund_deposit(storage_used: u64) {
    //get how much it would cost to store the information
    let required_cost = env::storage_byte_cost() * Balance::from(storage_used);
    //get the attached deposit
    let attached_deposit = env::attached_deposit();

    //make sure that the attached deposit is greater than or equal to the required cost
    assert!(
        required_cost <= attached_deposit,
        "Must attach {} yoctoNEAR to cover storage",
        required_cost,
    );

    //get the refund amount from the attached deposit - required cost
    let refund = attached_deposit - required_cost;

    //if the refund is greater than 1 yocto NEAR, we refund the predecessor that amount
    if refund > 1 {
        Promise::new(env::predecessor_account_id()).transfer(refund);
    }
}

impl Contract {
    //add a token to the set of tokens an owner has
    pub(crate) fn internal_add_token_to_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //get the set of tokens for the given account
        let mut tokens_set = self.tokens_per_owner.get(account_id).unwrap_or_else(|| {
            //if the account doesn't have any tokens, we create a new unordered set
            UnorderedSet::new(
                StorageKey::TokenPerOwnerInner {
                    //we get a new unique prefix for the collection
                    account_id_hash: hash_account_id(&account_id),
                }
                .try_to_vec()
                .unwrap(),
            )
        });

        //we insert the token ID into the set
        tokens_set.insert(token_id);

        //we insert that set for the given account ID. 
        self.tokens_per_owner.insert(account_id, &tokens_set);
    }

    //remove a token from an owner (internal method and can't be called directly via CLI).
    pub(crate) fn internal_remove_token_from_owner(
        &mut self,
        account_id: &AccountId,
        token_id: &TokenId,
    ) {
        //we get the set of tokens that the owner has
        let mut tokens_set = self
            .tokens_per_owner
            .get(account_id)
            //if there is no set of tokens for the owner, we panic with the following message:
            .expect("Token should be owned by the sender");

        //we remove the the token_id from the set of tokens
        tokens_set.remove(token_id);

        //if the token set is now empty, we remove the owner from the tokens_per_owner collection
        if tokens_set.is_empty() {
            self.tokens_per_owner.remove(account_id);
        } else {
            //if the token set is not empty, we simply insert it back for the account ID. 
            self.tokens_per_owner.insert(account_id, &tokens_set);
        }
    }

    //transfers the NFT to the receiver_id (internal method and can't be called directly via CLI).
    pub(crate) fn internal_transfer(
        &mut self,
        sender_id: &AccountId,
        receiver_id: &AccountId,
        token_id: &TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) -> Token {
        //get the token object by passing in the token_id
        let token = self.tokens_by_id.get(token_id).expect("No token");

        //if the sender doesn't equal the owner, we check if the sender is in the approval list
		    if sender_id != &token.owner_id {
            //if the token's approved account IDs doesn't contain the sender, we panic
            if !token.approved_account_ids.contains_key(sender_id) {
                env::panic_str("Unauthorized");
            }

            // If they included an approval_id, check if the sender's actual approval_id is the same as the one included
            if let Some(enforced_approval_id) = approval_id {
                //get the actual approval ID
                let actual_approval_id = token
                  .approved_account_ids
                  .get(sender_id)
                            //if the sender isn't in the map, we panic
                  .expect("Sender is not approved account");

                //make sure that the actual approval ID is the same as the one provided
                assert_eq!(
                  actual_approval_id, &enforced_approval_id,
                  "The actual approval_id {} is different from the given approval_id {}",
                  actual_approval_id, enforced_approval_id,
                );
            }
        }

        //we make sure that the sender isn't sending the token to themselves
        assert_ne!(
            &token.owner_id, receiver_id,
            "The token owner and the receiver should be different"
        );

        //we remove the token from it's current owner's set
        self.internal_remove_token_from_owner(&token.owner_id, token_id);
        //we then add the token to the receiver_id's set
        self.internal_add_token_to_owner(receiver_id, token_id);

        //we create a new token struct 
        let new_token = Token {
            owner_id: receiver_id.clone(),
            //reset the approval account IDs
            approved_account_ids: Default::default(),
            next_approval_id: token.next_approval_id,
            //we copy over the royalties from the previous token
            royalty: token.royalty.clone(),
        };
        //insert that new token into the tokens_by_id, replacing the old entry 
        self.tokens_by_id.insert(token_id, &new_token);

        //if there was some memo attached, we log it. 
        if let Some(memo) = memo.as_ref() {
            env::log_str(&format!("Memo: {}", memo).to_string());
        }

        // Default the authorized ID to be None for the logs.
        let mut authorized_id = None;
        //if the approval ID was provided, set the authorized ID equal to the sender
        if approval_id.is_some() {
            authorized_id = Some(sender_id.to_string());
        }

        // Construct the transfer log as per the events standard.
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: token.owner_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: receiver_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_transfer_log.to_string());
        
        //return the previous token object that was transferred.
        token
    }
} 
'''
'''--- src/contracts/src/lib.rs ---
use std::collections::HashMap;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{LazyOption, LookupMap, UnorderedMap, UnorderedSet};
use near_sdk::json_types::{Base64VecU8, U128};
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{
    env, near_bindgen, AccountId, Balance, CryptoHash, PanicOnDefault, Promise, PromiseOrValue
};

use crate::internal::*;
pub use crate::metadata::*;
pub use crate::mint::*;
pub use crate::nft_core::*;
pub use crate::approval::*;
pub use crate::royalty::*;
pub use crate::events::*;

mod internal;
mod approval; 
mod enumeration; 
mod metadata; 
mod mint; 
mod nft_core; 
mod royalty; 
mod events;

/// This spec can be treated like a version of the standard.
pub const NFT_METADATA_SPEC: &str = "1.0.0";
/// This is the name of the NFT standard we're using
pub const NFT_STANDARD_NAME: &str = "nep171";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    //contract owner
    pub owner_id: AccountId,

    //keeps track of all the token IDs for a given account
    pub tokens_per_owner: LookupMap<AccountId, UnorderedSet<TokenId>>,

    //keeps track of the token struct for a given token ID
    pub tokens_by_id: LookupMap<TokenId, Token>,

    //keeps track of the token metadata for a given token ID
    pub token_metadata_by_id: UnorderedMap<TokenId, TokenMetadata>,

    //keeps track of the metadata for the contract
    pub metadata: LazyOption<NFTContractMetadata>,
}

/// Helper structure for keys of the persistent collections.
#[derive(BorshSerialize)]
pub enum StorageKey {
    TokensPerOwner,
    TokenPerOwnerInner { account_id_hash: CryptoHash },
    TokensById,
    TokenMetadataById,
    NFTContractMetadata,
    TokensPerType,
    TokensPerTypeInner { token_type_hash: CryptoHash },
    TokenTypesLocked,
}

#[near_bindgen]
impl Contract {
    /*
        initialization function (can only be called once).
        this initializes the contract with default metadata so the
        user doesn't have to manually type metadata.
    */
    #[init]
    pub fn (owner_id: AccountId) -> Self {
        //calls the other function "new: with some default metadata and the owner_id passed in 
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: "nft-1.0.0".to_string(),
                name: "NFT Tutorial Contract".to_string(),
                symbol: "GOTEAM".to_string(),
                icon: None,
                base_uriz: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    /*
        initialization function (can only be called once).
        this initializes the contract with metadata that was passed in and
        the owner_id. 
    */
    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        //create a variable of type Self with all the fields initialized. 
        let this = Self {
            //Storage keys are simply the prefixes used for the collections. This helps avoid data collision
            tokens_per_owner: LookupMap::new(StorageKey::TokensPerOwner.try_to_vec().unwrap()),
            tokens_by_id: LookupMap::new(StorageKey::TokensById.try_to_vec().unwrap()),
            token_metadata_by_id: UnorderedMap::new(
                StorageKey::TokenMetadataById.try_to_vec().unwrap(),
            ),
            //set the owner_id field equal to the passed in owner_id. 
            owner_id,
            metadata: LazyOption::new(
                StorageKey::NFTContractMetadata.try_to_vec().unwrap(),
                Some(&metadata),
            ),
        };

        //return the Contract object
        this
    }
}

#[cfg(test)]
mod tests;
'''
'''--- src/contracts/src/metadata.rs ---
use crate::*;
pub type TokenId = String;
//defines the payout type we'll be returning as a part of the royalty standards.
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
    pub payout: HashMap<AccountId, U128>,
} 

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct NFTContractMetadata {
    pub spec: String,              // required, essentially a version like "nft-1.0.0"
    pub name: String,              // required, ex. "Mosaics"
    pub symbol: String,            // required, ex. "MOSAIC"
    pub icon: Option<String>,      // Data URL
    pub base_uri: Option<String>, // Centralized gateway known to have reliable access to decentralized storage assets referenced by `reference` or `media` URLs
    pub reference: Option<String>, // URL to a JSON file with more info
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct TokenMetadata {
    pub title: Option<String>, // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
    pub description: Option<String>, // free-form description
    pub media: Option<String>, // URL to associated media, preferably to decentralized, content-addressed storage
    pub media_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
    pub copies: Option<u64>, // number of copies of this set of metadata in existence when token was minted.
    pub issued_at: Option<u64>, // When token was issued or minted, Unix epoch in milliseconds
    pub expires_at: Option<u64>, // When token expires, Unix epoch in milliseconds
    pub starts_at: Option<u64>, // When token starts being valid, Unix epoch in milliseconds
    pub updated_at: Option<u64>, // When token was last updated, Unix epoch in milliseconds
    pub extra: Option<String>, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
    pub reference: Option<String>, // URL to an off-chain JSON file with more info.
    pub reference_hash: Option<Base64VecU8>, // Base64-encoded sha256 hash of JSON from reference field. Required if `reference` is included.
}

#[derive(BorshDeserialize, BorshSerialize)]
pub struct Token {
    //owner of the token
    pub owner_id: AccountId,

    pub royalty: HashMap<AccountId, u32>,

    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    //the next approval ID to give out. 
    pub next_approval_id: u64,
}

//The Json token is what will be returned from view calls. 
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct JsonToken {
    //token ID
    pub token_id: TokenId,
    //owner of the token
    pub owner_id: AccountId,
    //token metadata
    pub metadata: TokenMetadata,
    //list of approved account IDs that have access to transfer the token. This maps an account ID to an approval ID
    pub approved_account_ids: HashMap<AccountId, u64>,
    pub royalty: HashMap<AccountId, u32>,
}

pub trait NonFungibleTokenMetadata {
    //view call for returning the contract metadata
    fn nft_metadata(&self) -> NFTContractMetadata;
}

#[near_bindgen]
impl NonFungibleTokenMetadata for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}
'''
'''--- src/contracts/src/mint.rs ---
use crate::*;

#[near_bindgen]
impl Contract {
    #[payable]
    pub fn nft_mint(
        &mut self,
        token_id: TokenId,
        metadata: TokenMetadata,
        receiver_id: AccountId,
        //we add an optional parameter for perpetual royalties
        perpetual_royalties: Option<HashMap<AccountId, u32>>,
    ) {
        //measure the initial storage being used on the contract
        let initial_storage_usage = env::storage_usage();

        // create a royalty map to store in the token
        let mut royalty = HashMap::new();

        // if perpetual royalties were passed into the function: 
        if let Some(perpetual_royalties) = perpetual_royalties {
            //make sure that the length of the perpetual royalties is below 7 since we won't have enough GAS to pay out that many people
            assert!(perpetual_royalties.len() < 7, "Cannot add more than 6 perpetual royalty amounts");

            //iterate through the perpetual royalties and insert the account and amount in the royalty map
            for (account, amount) in perpetual_royalties {
                royalty.insert(account, amount);
            }
        }

        //specify the token struct that contains the owner ID 
        let token = Token {
            //set the owner ID equal to the receiver ID passed into the function
            owner_id: receiver_id,
            //we set the approved account IDs to the default value (an empty map)
            approved_account_ids: Default::default(),
            //the next approval ID is set to 0
            next_approval_id: 0,
            //the map of perpetual royalties for the token (The owner will get 100% - total perpetual royalties)
            royalty,
        };

        //insert the token ID and token struct and make sure that the token doesn't exist
        assert!(
            self.tokens_by_id.insert(&token_id, &token).is_none(),
            "Token already exists"
        );

        //insert the token ID and metadata
        self.token_metadata_by_id.insert(&token_id, &metadata);

        //call the internal method for adding the token to the owner
        self.internal_add_token_to_owner(&token.owner_id, &token_id);

        // Construct the mint log as per the events standard.
        let nft_mint_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftMint(vec![NftMintLog {
                // Owner of the token.
                owner_id: token.owner_id.to_string(),
                // Vector of token IDs that were minted.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo: None,
            }]),
        };

        // Log the serialized json.
        env::log_str(&nft_mint_log.to_string());

        //calculate the required storage which was the used - initial
        let required_storage_in_bytes = env::storage_usage() - initial_storage_usage;

        //refund any excess storage if the user attached too much. Panic if they didn't attach enough to cover the required.
        refund_deposit(required_storage_in_bytes);
    }
}
'''
'''--- src/contracts/src/nft_core.rs ---
use crate::*;
use near_sdk::{ext_contract, Gas, PromiseResult};

const GAS_FOR_RESOLVE_TRANSFER: Gas = Gas(10_000_000_000_000);
const GAS_FOR_NFT_ON_TRANSFER: Gas = Gas(25_000_000_000_000);

pub trait NonFungibleTokenCore {
    //transfers an NFT to a receiver ID
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    );

    // Transfers an NFT to a receiver and calls the
    //  function `nft_on_transfer` on their contract.
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool>;

    //get information about the NFT token passed in
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken>;
}

#[ext_contract(ext_non_fungible_token_receiver)]
trait NonFungibleTokenReceiver {
    //Method stored on the receiver contract that is called via cross contract call when nft_transfer_call is called
    /// Returns `true` if the token should be returned back to the sender.
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    ) -> Promise;
}

#[ext_contract(ext_self)]
/*
    resolves the promise of the cross contract call to the receiver contract
    this is stored on THIS contract and is meant to analyze what happened in the cross contract call when nft_on_transfer was called
    as part of the nft_transfer_call method
*/ 
trait NonFungibleTokenResolver {
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {
    //implementation of the nft_transfer method. This transfers the NFT from the current owner to the receiver. 
    #[payable]
    fn nft_transfer(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
    ) {
        //assert that the user attached exactly 1 yoctoNEAR. This is for security and so that the user will be redirected to the NEAR wallet. 
        assert_one_yocto();
        //get the sender to transfer the token from the sender to the receiver
        let sender_id = env::predecessor_account_id();

        //call the internal transfer method and get back the previous token so we can refund the approved account IDs
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo,
        );

        //we refund the owner for releasing the storage used up by the approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );
    }

    //implementation of the transfer call method. This will transfer the NFT and call a method on the receiver_id contract
    #[payable]
    fn nft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce an approval ID so that people with that approval ID can transfer the token
        approval_id: Option<u64>,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<bool> {
        //assert that the user attached exactly 1 yocto for security reasons. 
        assert_one_yocto();

        //get the sender ID 
        let sender_id = env::predecessor_account_id();

        //transfer the token and get the previous token object
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            approval_id,
            memo.clone(),
        );

        //default the authorized_id to none
        let mut authorized_id = None; 
        //if the sender isn't the owner of the token, we set the authorized ID equal to the sender.
        if sender_id != previous_token.owner_id {
            authorized_id = Some(sender_id.to_string());
        }

        // Initiating receiver's call and the callback
        // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for nft on transfer.
        ext_non_fungible_token_receiver::ext(receiver_id.clone())
            .with_static_gas(GAS_FOR_NFT_ON_TRANSFER)
            .nft_on_transfer(
                sender_id, 
                previous_token.owner_id.clone(), 
                token_id.clone(), 
                msg
            )
        // We then resolve the promise and call nft_resolve_transfer on our own contract
        .then(
            // Defaulting GAS weight to 1, no attached deposit, and static GAS equal to the GAS for resolve transfer
            Self::ext(env::current_account_id())
                .with_static_gas(GAS_FOR_RESOLVE_TRANSFER)
                .nft_resolve_transfer(
                    authorized_id, // we introduce an authorized ID so that we can log the transfer
                    previous_token.owner_id,
                    receiver_id,
                    token_id,
                    previous_token.approved_account_ids,
                    memo, // we introduce a memo for logging in the events standard
                )
        ).into()
    }

    //get the information for a specific token ID
    fn nft_token(&self, token_id: TokenId) -> Option<JsonToken> {
        //if there is some token ID in the tokens_by_id collection
        if let Some(token) = self.tokens_by_id.get(&token_id) {
            //we'll get the metadata for that token
            let metadata = self.token_metadata_by_id.get(&token_id).unwrap();
            //we return the JsonToken (wrapped by Some since we return an option)
            Some(JsonToken {
                token_id,
                owner_id: token.owner_id,
                metadata,
                approved_account_ids: token.approved_account_ids,
                royalty: token.royalty,
            })
        } else { //if there wasn't a token ID in the tokens_by_id collection, we return None
            None
        }
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Contract {
    //resolves the cross contract call when calling nft_on_transfer in the nft_transfer_call method
    //returns true if the token was successfully transferred to the receiver_id
    #[private]
    fn nft_resolve_transfer(
        &mut self,
        //we introduce an authorized ID for logging the transfer event
        authorized_id: Option<String>,
        owner_id: AccountId,
        receiver_id: AccountId,
        token_id: TokenId,
        //we introduce the approval map so we can keep track of what the approvals were before the transfer
        approved_account_ids: HashMap<AccountId, u64>,
        //we introduce a memo for logging the transfer event
        memo: Option<String>,
    ) -> bool {
        // Whether receiver wants to return token back to the sender, based on `nft_on_transfer`
        // call result.
        if let PromiseResult::Successful(value) = env::promise_result(0) {
            //As per the standard, the nft_on_transfer should return whether we should return the token to it's owner or not
            if let Ok(return_token) = near_sdk::serde_json::from_slice::<bool>(&value) {
                //if we need don't need to return the token, we simply return true meaning everything went fine
                if !return_token {
                    /* 
                        since we've already transferred the token and nft_on_transfer returned false, we don't have to 
                        revert the original transfer and thus we can just return true since nothing went wrong.
                    */
                    //we refund the owner for releasing the storage used up by the approved account IDs
                    refund_approved_account_ids(owner_id, &approved_account_ids);
                    return true;
                }
            }
        }

        //get the token object if there is some token object
        let mut token = if let Some(token) = self.tokens_by_id.get(&token_id) {
            if token.owner_id != receiver_id {
                //we refund the owner for releasing the storage used up by the approved account IDs
                refund_approved_account_ids(owner_id, &approved_account_ids);
                // The token is not owner by the receiver anymore. Can't return it.
                return true;
            }
            token
        //if there isn't a token object, it was burned and so we return true
        } else {
            //we refund the owner for releasing the storage used up by the approved account IDs
            refund_approved_account_ids(owner_id, &approved_account_ids);
            return true;
        };

        //we remove the token from the receiver
        self.internal_remove_token_from_owner(&receiver_id.clone(), &token_id);
        //we add the token to the original owner
        self.internal_add_token_to_owner(&owner_id, &token_id);

        //we change the token struct's owner to be the original owner 
        token.owner_id = owner_id.clone();

        //we refund the receiver any approved account IDs that they may have set on the token
        refund_approved_account_ids(receiver_id.clone(), &token.approved_account_ids);
        //reset the approved account IDs to what they were before the transfer
        token.approved_account_ids = approved_account_ids;

        //we inset the token back into the tokens_by_id collection
        self.tokens_by_id.insert(&token_id, &token);

        /*
            We need to log that the NFT was reverted back to the original owner.
            The old_owner_id will be the receiver and the new_owner_id will be the
            original owner of the token since we're reverting the transfer.
        */
        let nft_transfer_log: EventLog = EventLog {
            // Standard name ("nep171").
            standard: NFT_STANDARD_NAME.to_string(),
            // Version of the standard ("nft-1.0.0").
            version: NFT_METADATA_SPEC.to_string(),
            // The data related with the event stored in a vector.
            event: EventLogVariant::NftTransfer(vec![NftTransferLog {
                // The optional authorized account ID to transfer the token on behalf of the old owner.
                authorized_id,
                // The old owner's account ID.
                old_owner_id: receiver_id.to_string(),
                // The account ID of the new owner of the token.
                new_owner_id: owner_id.to_string(),
                // A vector containing the token IDs as strings.
                token_ids: vec![token_id.to_string()],
                // An optional memo to include.
                memo,
            }]),
        };

        //we perform the actual logging
        env::log_str(&nft_transfer_log.to_string());

        //return false
        false
    }
}
'''
'''--- src/contracts/src/owner.rs ---

'''
'''--- src/contracts/src/royalty.rs ---
use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
  	fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout;
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {
    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout {
        //get the token object
        let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the owner of the token
        let owner_id = token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
        //keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
        let royalty = token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
        assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
        for (k, v) in royalty.iter() {
            //get the key
            let key = k.clone();

            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
            if key != owner_id {
                payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
                total_perpetual += *v;
            }
        }

        // payout to previous owner who gets 100% - total perpetual royalties
        payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
        payout_object
    }

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout { 
        //assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        //get the sender ID
        let sender_id = env::predecessor_account_id();
        //transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            Some(approval_id),
            memo,
        );

        //refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );

        //get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		    //keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		    let royalty = previous_token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		    assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
        for (k, v) in royalty.iter() {
            //get the key
            let key = k.clone();

            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
            if key != owner_id {
                payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
                total_perpetual += *v;
            }
        }

        // payout to previous owner who gets 100% - total perpetual royalties
        payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
        payout_object
    }
}
    ) -> Payout { 
        //assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        //get the sender ID
        let sender_id = env::predecessor_account_id();
        //transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            Some(approval_id),
            memo,
        );

        //refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );

        //get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		    //keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		    let royalty = previous_token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		    assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
        for (k, v) in royalty.iter() {
            //get the key
            let key = k.clone();

            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
            if key != owner_id {
                payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
                total_perpetual += *v;
            }
        }

        // payout to previous owner who gets 100% - total perpetual royalties
        payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
        payout_object
    }
}
'''
'''--- src/contracts/src/tests.rs ---
/* unit tests */
#[cfg(test)]
use crate::Contract;
use crate::TokenMetadata;
use crate::approval::NonFungibleTokenCore;
use near_sdk::json_types::{U128, U64};
use near_sdk::test_utils::{accounts, VMContextBuilder};
use near_sdk::testing_env;
use near_sdk::{env, AccountId};

use std::collections::HashMap;

const MINT_STORAGE_COST: u128 = 100_000_000_000_000_000_000_000;
const MIN_REQUIRED_APPROVAL_YOCTO: u128 = 170000000000000000000;

fn get_context(predecessor: AccountId) -> VMContextBuilder {
    let mut builder = VMContextBuilder::new();
    builder.predecessor_account_id(predecessor);
    builder
}

fn sample_token_metadata() -> TokenMetadata {
    TokenMetadata {
        title: Some("Olympus Mons".into()),
        description: Some("The tallest mountain in the charted solar system".into()),
        media: None,
        media_hash: None,
        copies: Some(1u64),
        issued_at: None,
        expires_at: None,
        starts_at: None,
        updated_at: None,
        extra: None,
        reference: None,
        reference_hash: None,
    }
}

#[test]
#[should_panic(expected = "The contract is not initialized")]
fn test_default() {
    let context = get_context(accounts(1));
    testing_env!(context.build());
    let _contract = Contract::default();
}

#[test]
fn test_new_account_contract() {
    let mut context = get_context(accounts(1));
    testing_env!(context.build());
    let contract = Contract::new_default_meta(accounts(1).into());
    testing_env!(context.is_view(true).build());
    let contract_nft_tokens = contract.nft_tokens(Some(U128(0)), None);
    assert_eq!(contract_nft_tokens.len(), 0);
}

#[test]
fn test_mint_nft() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_metadata: TokenMetadata = sample_token_metadata();
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), token_metadata, accounts(0), None);
    let contract_nft_tokens = contract.nft_tokens(Some(U128(0)), None);
    assert_eq!(contract_nft_tokens.len(), 1);

    assert_eq!(contract_nft_tokens[0].token_id, token_id);
    assert_eq!(contract_nft_tokens[0].owner_id, accounts(0));
    assert_eq!(
        contract_nft_tokens[0].metadata.title,
        sample_token_metadata().title
    );
    assert_eq!(
        contract_nft_tokens[0].metadata.description,
        sample_token_metadata().description
    );
    assert_eq!(
        contract_nft_tokens[0].metadata.media,
        sample_token_metadata().media
    );
    assert_eq!(contract_nft_tokens[0].approved_account_ids, HashMap::new());
}

#[test]
fn test_internal_transfer() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.internal_transfer(
        &accounts(0),
        &accounts(1),
        &token_id.clone(),
        Some(U64(1).0),
        None,
    );

    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());

    let tokens = contract.nft_tokens_for_owner(accounts(1), Some(U128(0)), None);
    assert_ne!(
        tokens.len(),
        0,
        "Token not correctly created and/or sent to second account"
    );
    let token = &tokens[0];
    assert_eq!(token.token_id, token_id);
    assert_eq!(token.owner_id, accounts(1));
    assert_eq!(token.metadata.title, sample_token_metadata().title);
    assert_eq!(
        token.metadata.description,
        sample_token_metadata().description
    );
    assert_eq!(token.metadata.media, sample_token_metadata().media);
    assert_eq!(token.approved_account_ids, HashMap::new());
}

#[test]
fn test_nft_approve() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(contract.nft_is_approved(token_id.clone(), accounts(1), None));
}

#[test]
fn test_nft_revoke() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    // alice revokes bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_revoke(token_id.clone(), accounts(1));
    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), None));
}

#[test]
fn test_revoke_all() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    // alice revokes bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(1)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_revoke_all(token_id.clone());
    testing_env!(context
        .storage_usage(env::storage_usage())
        .account_balance(env::account_balance())
        .is_view(true)
        .attached_deposit(0)
        .build());
    assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
}

#[test]
fn test_internal_remove_token_from_owner() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    let contract_nft_tokens_before = contract.nft_tokens_for_owner(accounts(0), None, None);
    assert_eq!(contract_nft_tokens_before.len(), 1);

    contract.internal_remove_token_from_owner(&accounts(0), &token_id);
    let contract_nft_tokens_after = contract.nft_tokens_for_owner(accounts(0), None, None);
    assert_eq!(contract_nft_tokens_after.len(), 0);
}

#[test]
fn test_nft_payout() {
    use crate::royalty::NonFungibleTokenCore;
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    // alice approves bob
    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MIN_REQUIRED_APPROVAL_YOCTO)
        .predecessor_account_id(accounts(0))
        .build());
    contract.nft_approve(token_id.clone(), accounts(1), None);

    let payout = contract.nft_payout(token_id.clone(), U128(10), 1);
    let expected = HashMap::from([(accounts(0), U128(10))]);
    assert_eq!(payout.payout, expected);
}

#[test]
fn test_nft_total_supply() {
    let mut context = get_context(accounts(0));
    testing_env!(context.build());
    let mut contract = Contract::new_default_meta(accounts(0).into());

    testing_env!(context
        .storage_usage(env::storage_usage())
        .attached_deposit(MINT_STORAGE_COST)
        .predecessor_account_id(accounts(0))
        .build());
    let token_id = "0".to_string();
    contract.nft_mint(token_id.clone(), sample_token_metadata(), accounts(0), None);

    let total_supply = contract.nft_total_supply();
    assert_eq!(total_supply, U128(1));
}
'''
'''--- src/hooks/use-local-storage.ts ---
import { useEffect, useState } from 'react'

export const useLocalStorage = <T>(
  key: string,
  initialValue: T
): [T, (value: T) => void] => {
  const [storedValue, setStoredValue] = useState(initialValue)

  useEffect(() => {
    // Retrieve from localStorage
    const item = window.localStorage.getItem(key)
    if (item) {
      setStoredValue(JSON.parse(item))
    }
  }, [key])

  const setValue = (value: T) => {
    // Save state
    setStoredValue(value)
    // Save to localStorage
    window.localStorage.setItem(key, JSON.stringify(value))
  }
  return [storedValue, setValue]
}

'''
'''--- src/keypom/addBalanceToKeypomAccount.js ---
const { Account } = require('@near-js/accounts');
const { connect, Near } = require('@near-js/wallet-account');
const { parseNearAmount } = require('@near-js/utils');
const { UnencryptedFileSystemKeyStore } = require('@near-js/keystores-node');
const keypom = require('@keypom/core');
const { initKeypom, createDrop, getEnv, createNFTSeries, formatLinkdropUrl } =
  keypom;
const path = require('path');
const homedir = require('os').homedir();

const FUNDER_ACCOUNT_ID = 'ethprince.testnet';
const NETWORK_ID = 'testnet';

async function addToKeypomBalance() {
  const CREDENTIALS_DIR = '.near-credentials';
  const credentialsPath = path.join(homedir, CREDENTIALS_DIR);

  let keyStore = new UnencryptedFileSystemKeyStore(credentialsPath);
  // Configure the connection to the NEAR testnet
  let nearConfig = {
    networkId: NETWORK_ID,
    keyStore: keyStore,
    nodeUrl: `https://rpc.${NETWORK_ID}.near.org`,
    walletUrl: `https://wallet.${NETWORK_ID}.near.org`,
    helperUrl: `https://helper.${NETWORK_ID}.near.org`,
    explorerUrl: `https://explorer.${NETWORK_ID}.near.org`,
  };

  let near = new Near(nearConfig);
  const fundingAccount = new Account(near.connection, FUNDER_ACCOUNT_ID); // Replace with your NEAR account name

  // Specify the amount to add to your Keypom balance
  const amountToAdd = '20'; // 20 NEAR

  // Initiate Keypom using existing NEAR testnet connection
  await initKeypom({
    near,
    network: NETWORK_ID,
  });

  // Assuming `addToBalance` is a method exposed by the Keypom contract
  // and you have the correct contract name and method details
  const keypomContractName = 'nft-v2.keypom.testnet'; // Replace with the actual Keypom contract name
  await fundingAccount.functionCall({
    contractId: keypomContractName,
    methodName: 'addToBalance',
    args: {}, // Additional arguments if needed
    gas: '30000000000000', // Adjust gas accordingly
    attachedDeposit: parseNearAmount(amountToAdd),
  });

  console.log(`Added ${amountToAdd} NEAR to your Keypom balance.`);
}

addToKeypomBalance().catch(console.error);

'''
'''--- src/keypom/allowEntry.js ---
const keypom = require('@keypom/core');
const { getPubFromSecret, getKeyInformation, hashPassword, claim } = keypom;

async function allowEntry({ privKey, basePassword }) {
  try {
    // Check 1: Key existence
    var publicKey = getPubFromSecret(privKey);
    var keyInfo = await getKeyInformation({ publicKey });
    // If key does not exist, the user should not be admitted
    if (keyInfo == null) {
      console.log(`Key does not exist. Admission denied`);
      return false;
    }

    var curUse = keyInfo.cur_key_use;

    // Ticket was already scanned
    if (curUse !== 1) {
      console.log(`Key has already been scanned. Admission denied`);
      return false;
    }

    // Create password using base + pubkey + key use as string
    let passwordForClaim = await hashPassword(
      basePassword + publicKey + curUse.toString()
    );
    // Claim with created password
    await claim({
      secretKey: privKey,
      password: passwordForClaim,
    });

    // Check 3: Check if claim was successful by validating that curUse incremented
    keyInfo = await getKeyInformation({ publicKey });

    if (keyInfo.cur_key_use !== 2) {
      console.log(`Claim has failed, check password`);
      return false;
    }
  } catch (err) {
    console.log(`Unknown Error: ${err}. Admission denied`);
    return false;
  }

  return true;
}

module.exports = {
  allowEntry,
};

'''
'''--- src/keypom/createTicketNft.js ---
const keypom = require('@keypom/core');
const {
  initKeypom,
  addToBalance,
  createDrop,
  getEnv,
  createNFTSeries,
  formatLinkdropUrl,
} = keypom;

// Imports used in the NEAR-API-JS method:
const { parseNearAmount } = require('@near-js/utils');
const { UnencryptedFileSystemKeyStore } = require('@near-js/keystores-node');
const { connect, Near } = require('@near-js/wallet-account');
var assert = require('assert');
const { Account } = require('@near-js/accounts');
// const { getRecentDropId } = require('../utils/general.js');
const path = require('path');
const homedir = require('os').homedir();

// Change this to your account ID
const FUNDER_ACCOUNT_ID = 'ethprince.testnet';
const NETWORK_ID = 'testnet';

async function createTicketNft() {
  // Initiate connection to the NEAR blockchain.
  const CREDENTIALS_DIR = '.near-credentials';
  // const credentialsPath = path.join(homedir, CREDENTIALS_DIR);
  const credentialsPath =
    '/Users/Kriskate/.near-credentials/testnet/ethprince.testnet.json';
  let keyStore = new UnencryptedFileSystemKeyStore(credentialsPath);

  let nearConfig = {
    networkId: NETWORK_ID,
    keyStore: keyStore,
    nodeUrl: `https://rpc.${NETWORK_ID}.near.org`,
    walletUrl: `https://wallet.${NETWORK_ID}.near.org`,
    helperUrl: `https://helper.${NETWORK_ID}.near.org`,
    explorerUrl: `https://explorer.${NETWORK_ID}.near.org`,
  };

  let near = new Near(nearConfig);
  const fundingAccount = new Account(near.connection, FUNDER_ACCOUNT_ID);

  // Initiate Keypom using existing NEAR testnet connection
  await initKeypom({
    near,
    network: NETWORK_ID,
  });

  await addToBalance({
    account: fundingAccount,
    amountNear: '20',
  });

  //      STEP 3: Create NFT drop
  // Create drop with 10 keys and 2 key uses each
  let { keys, dropId } = await createDrop({
    account: fundingAccount,
    numKeys: 1,
    config: {
      usesPerKey: 2,
    },
    depositPerUseNEAR: '0.00001',
    basePassword: 'event-password',
    passwordProtectedUses: [1],
    fcData: {
      methods: [
        null,
        [
          {
            receiverId: `nft-v2.keypom.${NETWORK_ID == 'mainnet' ? 'near' : 'testnet'}`,
            methodName: 'nft_mint',
            args: '',
            dropIdField: 'mint_id',
            accountIdField: 'receiver_id',
            attachedDeposit: parseNearAmount('0.00001'),
          },
        ],
      ],
    },
    useBalance: true,
  });

  await createNFTSeries({
    account: fundingAccount,
    dropId,
    metadata: {
      title: 'ethDenver NFT Ticket!',
      description: 'An ethDenver NFT POAP for the best BUIDLer in the world.',
      media: 'bafybeibwhlfvlytmttpcofahkukuzh24ckcamklia3vimzd4vkgnydy7nq',
      copies: 30,
    },
  });

  const { contractId: KEYPOM_CONTRACT } = getEnv();
  let tickets = formatLinkdropUrl({
    customURL: 'http://localhost:1234/CONTRACT_ID/SECRET_KEY',
    secretKeys: keys.secretKeys,
    contractId: KEYPOM_CONTRACT,
  });
  console.log(`

Ticket Links: 

${tickets}

`);

  return keys;
}

createTicketNft();

module.exports = {
  createTicketNft,
};

'''
'''--- src/keypom/testCreateTicketNft.js ---
var assert = require('assert');
const { createTicketNft } = require('./createTicketNft');
const { allowEntry } = require('./allowEntry');

async function wrongPasswordCheck() {
  let responses = [null, null];
  // Create Drop
  let keys = await createTicketNft();
  let privKey = keys.secretKeys[0];

  // Incorrect Password
  console.log('Claiming with wrong password...');
  let shouldAdmit = await allowEntry({
    privKey,
    basePassword: 'wrong-password',
  });
  assert(
    shouldAdmit === false,
    `Expected no admittance with incorrect password.`
  );
  responses[0] = shouldAdmit;

  // Correct password
  console.log('claiming with correct password...');
  shouldAdmit = await allowEntry({
    privKey,
    basePassword: 'event-password',
  });
  assert(shouldAdmit === true, `Expected admittance with correct password.`);
  responses[1] = shouldAdmit;

  return responses;
}

async function doubleClaimCheck() {
  let responses = [null, null];
  // Create Drop
  let keys = await createTicketNft();
  let privKey = keys.secretKeys[0];

  // Correct Password (first claim)
  console.log('Claiming with correct password...');
  let shouldAdmit = await allowEntry({
    privKey,
    basePassword: 'event-password',
  });
  assert(shouldAdmit === true, `Expected admittance with correct password.`);
  responses[0] = shouldAdmit;

  // Correct password (duplicate claim)
  console.log('claiming the same key twice...');
  shouldAdmit = await allowEntry({
    privKey,
    basePassword: 'event-password',
  });
  assert(
    shouldAdmit === false,
    `Expected no admittance due to duplicate claim.`
  );
  responses[1] = shouldAdmit;

  return responses;
}

async function tests() {
  let pwResponses = await wrongPasswordCheck();
  let dcResponses = await doubleClaimCheck();

  console.log(`
        Password Test Responses:
        Expected false, got: ${pwResponses[0]}
        Expected true, got: ${pwResponses[1]}

        Double Claim Test Responses:
        Expected true, got: ${dcResponses[0]}
        Expected false, got: ${dcResponses[1]}
    `);
}

tests();

'''
'''--- src/lib/components/map.module.css ---
/* map.module.css */

.mainStyle {
  max-width: 100%;
  height: 100vh;
}
.mapStyle {
  width: 100%;
  height: 100%;
}
.popupTitle {
  background-color: #87bd41;
  font-weight: 700;
  font-size: medium;
  color: ivory;
  padding: 10px;
}
.popupInfo {
  font-weight: 400;
  font-size: 14px;
  padding: 10px;
}
.popupLabel {
  font-weight: bold;
}
.popupWebUrl {
  color: dodgerblue;
}
.popupWebUrl:active,
.popupWebUrl:focus {
  outline: 0;
}

'''
'''--- src/lib/components/ui/use-toast.ts ---
// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/lib/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

'''
'''--- src/lib/styles/fonts.ts ---
import {
  JetBrains_Mono as FontMono,
  Plus_Jakarta_Sans as FontSans,
} from 'next/font/google';

export const fontSans = FontSans({
  subsets: ['latin'],
  variable: '--font-sans',
});

export const fontMono = FontMono({
  subsets: ['latin'],
  variable: '--font-mono',
});

'''
'''--- src/lib/styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 222.2 84% 4.9%;

    --card: 0 0% 100%;
    --card-foreground: 222.2 84% 4.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 222.2 84% 4.9%;
 
    --primary: 222.2 47.4% 11.2%;
    --primary-foreground: 210 40% 98%;
 
    --secondary: 210 40% 96.1%;
    --secondary-foreground: 222.2 47.4% 11.2%;
 
    --muted: 210 40% 96.1%;
    --muted-foreground: 215.4 16.3% 46.9%;
 
    --accent: 210 40% 96.1%;
    --accent-foreground: 222.2 47.4% 11.2%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 40% 98%;

    --border: 214.3 31.8% 91.4%;
    --input: 214.3 31.8% 91.4%;
    --ring: 222.2 84% 4.9%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 222.2 84% 4.9%;
    --foreground: 210 40% 98%;
 
    --card: 222.2 84% 4.9%;
    --card-foreground: 210 40% 98%;
 
    --popover: 222.2 84% 4.9%;
    --popover-foreground: 210 40% 98%;
 
    --primary: 210 40% 98%;
    --primary-foreground: 222.2 47.4% 11.2%;
 
    --secondary: 217.2 32.6% 17.5%;
    --secondary-foreground: 210 40% 98%;
 
    --muted: 217.2 32.6% 17.5%;
    --muted-foreground: 215 20.2% 65.1%;
 
    --accent: 217.2 32.6% 17.5%;
    --accent-foreground: 210 40% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 40% 98%;
 
    --border: 217.2 32.6% 17.5%;
    --input: 217.2 32.6% 17.5%;
    --ring: 212.7 26.8% 83.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}
'''
'''--- src/lib/styles/utils.ts ---
import { type ClassValue, clsx } from 'clsx';
import { twMerge } from 'tailwind-merge';

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

'''
'''--- src/lib/types.ts ---
import { type Message } from 'ai';

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export interface Chat extends Record<string, any> {
  id: string;
  title: string;
  createdAt: Date;
  userId: string;
  path: string;
  messages: Message[];
  sharePath?: string;
}

export type ServerActionResult<Result> = Promise<
  | Result
  | {
      error: string;
    }
>;

export interface Event {
  id: string;
  name: string;
  dateTime: string; // Changed from 'date' to 'dateTime'
  image: string;
  location: string;
  description?: string; // Add this if you want to include descriptions, make it optional if it's not always present
}

'''
'''--- src/lib/utils.ts ---
import { type ClassValue, clsx } from "clsx"
import { customAlphabet } from 'nanoid'

import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export const nanoid = customAlphabet(
  '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz',
  7
) // 7-character random string
'''
'''--- src/near/create-event-contract.js ---

'''
'''--- src/near/near-contract-helper.js ---
// lib/near.js
import * as nearAPI from 'near-api-js';
import getConfig from '@/config';

export async function initNearContract(env) {
  const config = getConfig(env);

  const keyStore = new nearAPI.keyStores.InMemoryKeyStore();
  const privateKey = process.env.NEXT_PUBLIC_NEAR_PRIVATE_KEY;
  const keyPair = nearAPI.utils.KeyPair.fromString(privateKey);

  await keyStore.setKey(config.networkId, config.contractName, keyPair);

  const near = await nearAPI.connect({ keyStore, ...config });

  const contract = new nearAPI.Contract(
    await near.account(config.contractName),
    config.contractName,
    {
      viewMethods: [
        'get_name',
        'get_members',
        'unread_messages',
        'get_messages',
        'channel_info',
        'get_groups',
        'created_at',
      ],
      changeMethods: [
        'new',
        'nft_mint',
        'join',
        'ping',
        'create_group',
        'join_group',
        'leave_group',
        'group_invite',
        'send_message',
        'read_message',
        'toggle_reaction',
      ],
    }
  );

  return contract;
}

'''
'''--- src/near/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
// import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
// import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
// import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor;
    this.network = network;
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId =
        this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, {
      contractId: this.createAccessKeyFor,
      description,
    });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({
    contractId,
    method,
    args = {},
    gas = THIRTY_TGAS,
    deposit = NO_DEPOSIT,
  }) {
    // Sign a transaction with the "FunctionCall" action
    const outcome = await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });

    return providers.getTransactionLastResult(outcome);
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}

'''
'''--- tailwind.config.ts ---
import type { Config } from 'tailwindcss';

const config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px',
      },
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))',
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))',
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))',
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))',
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))',
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))',
        },
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)',
      },
      keyframes: {
        'accordion-down': {
          from: { height: '0' },
          to: { height: 'var(--radix-accordion-content-height)' },
        },
        'accordion-up': {
          from: { height: 'var(--radix-accordion-content-height)' },
          to: { height: '0' },
        },
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out',
      },
    },
  },
  plugins: [require('tailwindcss-animate')],
} satisfies Config;

export default config;

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": "src",
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "strictNullChecks": true
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

'''
'''--- turbo.json ---
{
  "$schema": "https://turbo.build/schema.json",
  "pipeline": {
    "build": {
      "outputs": [".next/**", "!.next/cache/**", "public/**"],
      "env": []
    },
    "lint": {
      "outputs": [],
      "inputs": [".eslintrc.*", "src/**"]
    },
    "type-check": {
      "outputs": ["*.tsbuildinfo"]
    }
  }
}

'''
'''--- types.d.ts ---
declare module "theme-change";

'''