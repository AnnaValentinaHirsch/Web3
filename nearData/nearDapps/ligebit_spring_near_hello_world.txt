*GitHub Repository "ligebit/spring_near_hello_world"*

'''--- README.md ---
Challenge #2. Hello world smart contract

https://ligebit.github.io/spring_near_hello_world/index.html

'''
'''--- contracts/cargo.toml ---
[package]
name = "spring_near_hello_world"
version = "1.0.0"
authors = ["@ligebit"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- contracts/src/lib.rs ---
use near_sdk::{near_bindgen};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};

near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Contract {}

#[near_bindgen]
impl Contract {
    pub fn get_answer(self, name: String) -> String {
        format!("Hello {}!", name)
    }
}
'''
'''--- package.json ---
{
    "name": "spring_near_hello_world",
    "version": "1.0.0",
    "description": "",
    "scripts": {
        "build-run-client": "parcel src/index.html",
        "build-client": "parcel build src/index.html --public-url .",
        "build-contract": "cd contracts && cargo build --target wasm32-unknown-unknown --release",
        "deploy-contract": "npm run build-contract && near dev-deploy --wasmFile contracts/target/wasm32-unknown-unknown/release/spring_near_hello_world.wasm"
    },
    "author": "@ligebit",
    "license": "ISC",
    "dependencies": {
        "near-api-js": "^0.44.2",
        "parcel": "^2.4.1"
    },
    "devDependencies": {
        "buffer": "^6.0.3",
        "process": "^0.11.10"
    }
}

'''
'''--- src/index.html ---
<!doctype html>
<html lang="en">
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
		<link href="./style.css" rel="stylesheet">
    </head>
    <body>

		<nav class="navbar p-2">
			<button id="sign-in" class="btn btn-primary signed-out ms-auto">
				Sign in
			</button>
		</nav>

		<div class="container-fluid d-flex align-items-center justify-content-center" >
 
			<div class="container">
				<div class="row justify-content-center">
					
					<div class="col-auto text-center position-relative">
						<canvas id="robot" width="400" height="400"></canvas>
					</div>

					<div class="col-md-6 col-lg-5 mb-3">
						<div class="message bg-light" style="text-align: left;">
							<label id="robot_message" class="border_animation" style="word-break: break-all;"></label>
						</div>

						<input style="margin-bottom: 25px; visibility: hidden;" type="text" class="form-control hide-signed-out" id="input_answer" placeholder="Enter answer">
						
						<button type="button" id="send_answer_button" class="btn btn-primary w-50 hide-signed-out" disabled style="visibility: hidden;">
							Not authorized
						</button>

					</div>
				</div>
			</div>
		</div>

		<nav class="navbar fixed-bottom navbar-expand-sm navbar-dark bg-dark p-2">
			<div class="container d-flex justify-content-center">
				<a class="navbar-brand" href="#">SOURCE</a>
				<a class="navbar-brand" href="https://www.vecteezy.com/free-vector/robot">Robot Vectors by Vecteezy</a>
				<a class="navbar-brand" href="https://nearspring.splashthat.com/">from nearspring</a>
			</div>
		</nav>

		<script src="./index.js" type="module"></script>
      	<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script>
    </body>
</html>
'''
'''--- src/index.js ---
const {connect, Contract, WalletAccount, keyStores} = require('near-api-js');

const ROBOT_ANIMATION = require("./robot_animation");

const robot_animation = new ROBOT_ANIMATION();

function getNearConfig(networkId) {
    return {
        networkId: networkId,
        nodeUrl: `https://rpc.${networkId}.near.org`,
        contractName: `dev-1649797487666-31565074981571`,
        walletUrl: `https://wallet.${networkId}.near.org`,
        helperUrl: `https://helper.${networkId}.near.org`,
    }
}
window.nearConfig = getNearConfig('testnet');

async function initContract() {
    window.near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, window.nearConfig));
  
    window.walletAccount = new WalletAccount(window.near);
  
    window.accountId = window.walletAccount.getAccountId();
  
    window.contract = await window.near.loadContract(window.nearConfig.contractName, {
        viewMethods: ['get_answer'],
        changeMethods: [],
        sender: window.accountId,
    });
}

async function doWork() {
    if (!window.walletAccount.isSignedIn()) {
        signedOutFlow();
    } else {
        signedInFlow();
    }
}

function signedOutFlow() {
    setRobotMessage("login to your account");

    Array.from(document.querySelectorAll('.hide-signed-out')).forEach(el => el.style.visibility = 'hidden');

    document.getElementById('sign-in').addEventListener('click', () => {
        window.walletAccount.requestSignIn(window.nearConfig.contractName);
    });
}
  

function signedInFlow() {
    setRobotMessage("What's your name?");

    Array.from(document.querySelectorAll('.hide-signed-out')).forEach(el => el.style.visibility = 'visible');

    document.getElementById('sign-in').innerText = window.accountId;
  

    send_answer_button.innerHTML = 'Submit';
    send_answer_button.disabled = false;

    document.getElementById('sign-in').addEventListener('click', e => {
        e.preventDefault();
        window.walletAccount.signOut();
        window.location.replace(window.location.origin + window.location.pathname);
    });
}

function setRobotMessage(message) {
    const robot_message = document.getElementById('robot_message');

    robot_message.classList.remove('border_animation');
    robot_message.classList.add('border_r');
    let i = 0;
    robot_message.innerHTML = '';
    clearInterval(robot_message?.interval)

    robot_message.interval = setInterval(() => {
        if(message.length <= i) {
            clearInterval(robot_message?.interval)
            robot_message.classList.add('border_animation');
            robot_message.classList.remove('border_r');
        } else {
            robot_message.innerHTML += message[i];
            i++;
        }
    }, 50);
}

const send_answer_button = document.getElementById('send_answer_button');

send_answer_button.onclick = () => {
    send_answer_button.innerHTML = '<span class="spinner-border spinner-border-sm mr-2" role="status" aria-hidden="true" style="margin-right: 5px"></span>Sending...';
    send_answer_button.disabled = true;

    window.contract.get_answer({name: document.getElementById('input_answer').value}).then(result => {
        setRobotMessage(result)

        send_answer_button.innerHTML = 'Submit';
        send_answer_button.disabled = false;
    });
}

window.onmousemove = (e) => {
    robot_animation.calculateRadian(e);
    robot_animation.draw();
}

window.onload = async () => {
    await robot_animation.load();
    await initContract();
    doWork();

    robot_animation.draw();
}
'''
'''--- src/robot_animation.js ---
module.exports = class ROBOT_ANIMATION {

    constructor() {
        this.canvas = document.getElementById('robot');
        this.ctx = this.canvas.getContext('2d');
    }

    async load() {
        const eyeImage = await ROBOT_ANIMATION.addImageProcess(require('./eye.png'));
        this.robot = await ROBOT_ANIMATION.addImageProcess(require('./robot.png'));

        this.rightEye = new EYE(this.ctx, 155, 80, eyeImage);
        this.leftEye = new EYE(this.ctx, 210, 80, eyeImage);

        this.isLoaded = true;
    }

    calculateRadian(mouse) {
        this?.rightEye?.calculateRadian(mouse);
        this?.leftEye?.calculateRadian(mouse);
    }

    draw() {
        if(this.isLoaded) {
            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);

            this.ctx.drawImage(this?.robot, 0, 0, 400, 400);
            this.rightEye.draw(this.ctx);
            this.leftEye.draw(this.ctx);
        }
    }

    static addImageProcess(src, width, height) {
        return new Promise((resolve, reject) => {
            let img = new Image(width, height);
            img.onload = () => resolve(img);
            img.onerror = (err) => reject(err);
            img.src = src;
        })
    }

}

const EYE_SIZE = 36;

class EYE {
    constructor(ctx, eyeX, eyeY, image) {
        this.ctx = ctx;
        this.eyeX = eyeX;
        this.eyeY = eyeY;
        this.image = image;
        this.rotation = 0;
    }

    calculateRadian(mouse) {
        let mouseX = (this.ctx.canvas.getBoundingClientRect().left) + this.eyeX + EYE_SIZE/2;
        let mouseY = (this.ctx.canvas.getBoundingClientRect().top) + this.eyeY + EYE_SIZE/2;;
    
        this.rotation = -Math.atan2(mouse.pageX - mouseX, mouse.pageY - mouseY);
    }

    draw() {
        this.ctx.save();
        this.ctx.translate(this.eyeX + EYE_SIZE/2, this.eyeY + EYE_SIZE/2);
        this.ctx.rotate(this.rotation);
        this.ctx.drawImage(this.image, -EYE_SIZE/2, -EYE_SIZE/2, EYE_SIZE, EYE_SIZE);
        this.ctx.restore();
    }
}
'''
'''--- src/style.css ---
* {
    font-family: -apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Helvetica,Arial,sans-serif;
    font-size: 20px;
    line-height: 1.3;
}

.message {
    margin: 60px 0px;

    border-radius: 5px;

    background: #AEDFE4;
    padding: 20px;
    text-align: center;

    position: relative;
}

.message .border_r {
    border-right: 2px black solid;
}

.message .border_animation {
    animation: border 1s infinite steps(2, end);
}

@keyframes border {
    0%   {border-right: 2px black solid;}
}
'''