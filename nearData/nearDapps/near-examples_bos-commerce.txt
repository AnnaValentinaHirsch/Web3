*GitHub Repository "near-examples/bos-commerce"*

'''--- .github/workflows/tests.yml ---
name: Tests
on: push
jobs:
  workflows:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: "16"
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 8.5
      - name: Install modules
        run: cd contract && pnpm i --frozen-lockfile && cd ../tests && pnpm i --frozen-lockfile
      - name: Build Contract
        run: cd contract && pnpm build
      - name: Run tests
        run: cd tests && pnpm test

'''
'''--- README.md ---

'''
'''--- contract/package.json ---
{
  "name": "near-bos-commerce",
  "version": "0.1.0",
  "description": "Sell any goods on the Blockchain Operating System",
  "repository": "https://github.com/idea404/bos-commerce",
  "author": "Dennis (idea404)",
  "license": "MIT AND Apache-2.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "near-sdk-js build src/contract.ts build/contract.wasm"
  },
  "dependencies": {
    "decimal.js": "^10.4.3",
    "near-sdk-js": "^1.0.0"
  },
  "devDependencies": {
    "@ava/typescript": "^2.0.0",
    "@types/bn.js": "^5.1.1",
    "@types/fs-extra": "^9.0.13",
    "@types/node": "^16.18.32",
    "@types/rimraf": "^3.0.2",
    "ava": "^4.3.3",
    "esbuild": "^0.17.19",
    "near-workspaces": "^3.3.0",
    "typescript": "^4.9.5"
  }
}
'''
'''--- contract/src/contract.ts ---
import { NearBindgen, initialize, call, near, view, LookupMap, Vector, assert, NearPromise } from "near-sdk-js";
import { AccountId } from "near-sdk-js/lib/types";
import { Item, ItemStatus } from "./models";
import Decimal from 'decimal.js';

const MINIMUM_NEAR_DEPOSIT = BigInt("25" + "0".repeat(21)); // 0.025 NEAR

@NearBindgen({})
class BOSCommerce {
  contract_account: AccountId = "";
  account_ids: Vector<string> = new Vector<string>("account_ids");
  item_ids: Vector<string> = new Vector<string>("item_ids");
  accounts_items: LookupMap<Array<string>> = new LookupMap<Array<string>>("accounts_items");
  items: LookupMap<Item> = new LookupMap<Item>("items");

  @initialize({})
  init() {
    this.contract_account = near.predecessorAccountId();
  }

  @call({ payableFunction: true })
  create_item({ name, description, image }: { name: string; description: string; image: string }): object {
    try {
      assert(name, "Name is required");
      assert(typeof name === "string", "Name must be a string");
      assert(description, "Description is required");
      assert(typeof description === "string", "Description must be a string");
      assert(image, "Image is required");
      assert(typeof image === "string", "Image must be a string");
      assert(
        near.attachedDeposit() >= MINIMUM_NEAR_DEPOSIT,
        `Not enough attached deposit. Minimum deposit is ${MINIMUM_NEAR_DEPOSIT} yoctoNEAR and you attached ${near.attachedDeposit()} yoctoNEAR.`
      );

      const item_id = this.item_ids.length.toString();
      const item = new Item();
      item.id = item_id;
      item.name = name;
      item.description = description;
      item.image = image;
      item.owner = near.predecessorAccountId();
      item.created_at = Date.now().toString();
      item.updated_at = Date.now().toString();
      item.status = ItemStatus.CREATED;
      this.item_ids.push(item_id);
      this.items.set(item_id, item);
      const account_items = this.accounts_items.get(item.owner);
      if (account_items) {
        account_items.push(item_id);
        this.accounts_items.set(item.owner, account_items);
      } else {
        this.account_ids.push(item.owner);
        this.accounts_items.set(item.owner, [item_id]);
      }

      return { success: true, msg: "Item created successfully", item_id: item_id };
    } catch (e: any) {
      return { success: false, msg: e.message };
    }
  }

  @call({})
  delete_item({ item_id }: { item_id: string }): object {
    try {
      assert(item_id, "Item ID is required");
      assert(typeof item_id === "string", "Item ID must be a string");
      assert(this.items.get(item_id), "Item does not exist");
      assert(this.items.get(item_id)?.owner === near.predecessorAccountId(), "Only the owner can delete an item");
      assert(this.items.get(item_id)?.status !== ItemStatus.FORSALE, "Item is listed for sale. Please delist it first");

      const item = this.items.get(item_id);
      if (item) {
        item.status = ItemStatus.DELETED;
        this.items.set(item_id, item);
      }

      return { success: true, msg: "Item deleted successfully" };
    } catch (e: any) {
      return { success: false, msg: e.message };
    }
  }

  @call({})
  list_item({ item_id, price }: { item_id: string; price: number }): object {
    try {
      assert(item_id, "Item ID is required");
      assert(typeof item_id === "string", "Item ID must be a string");
      assert(this.items.get(item_id), "Item does not exist");
      assert(this.items.get(item_id)?.status !== ItemStatus.FORSALE, "Item is already listed");
      assert(this.items.get(item_id)?.owner === near.predecessorAccountId(), "Only the owner can list an item");
      assert(price, "Price is required");
      assert(typeof price === "number", "Price must be a number");
      assert(price > 0, "Price must be greater than 0");

      const item = this.items.get(item_id);
      if (item) {
        item.price = price.toString();
        item.status = ItemStatus.FORSALE;
        this.items.set(item_id, item);
        return { success: true, msg: "Item listed successfully" };
      }
      return { success: false, msg: "Item does not exist" };
    } catch (e: any) {
      return { success: false, msg: e.message };
    }
  }

  @call({})
  delist_item({ item_id }: { item_id: string }): object {
    try {
      assert(item_id, "Item ID is required");
      assert(typeof item_id === "string", "Item ID must be a string");
      assert(this.items.get(item_id), "Item does not exist");
      assert(this.items.get(item_id)?.owner === near.predecessorAccountId(), "Only the owner can delist an item");
      assert(this.items.get(item_id)?.status === ItemStatus.FORSALE, "Item is not listed for sale");

      const item = this.items.get(item_id);
      if (item) {
        item.price = "";
        item.status = ItemStatus.CREATED;
        this.items.set(item_id, item);
        return { success: true, msg: "Item delisted successfully" };
      }
      return { success: false, msg: "Item does not exist" };
    } catch (e: any) {
      return { success: false, msg: e.message };
    }
  }

  @call({ payableFunction: true })
  purchase_item({ item_id }: { item_id: string }): object {
    try {
      assert(item_id, "Item ID is required");
      assert(typeof item_id === "string", "Item ID must be a string");
      assert(this.items.get(item_id), "Item does not exist");
      assert(this.items.get(item_id)?.status === ItemStatus.FORSALE, "Item is not listed for sale");
      assert(this.items.get(item_id)?.owner !== near.predecessorAccountId(), "You cannot purchase your own item");
      
      const item = this.items.get(item_id);
      if (item) {
        const buyer = near.predecessorAccountId();
        const seller = item.owner;
        const price = item.price;
        const amountDec = new Decimal(price) 
        const amount = amountDec.mul(Decimal.pow(10, 24));
        assert(near.attachedDeposit() >= BigInt(amount.toFixed()), `Not enough attached deposit. Minimum deposit is ${amount.toFixed()} yoctoNEAR and you attached ${near.attachedDeposit()} yoctoNEAR.`);
        const buyer_items = this.accounts_items.get(buyer);
        if (buyer_items) {
          buyer_items.push(item_id);
          this.accounts_items.set(buyer, buyer_items);
        } else {
          this.account_ids.push(buyer);
          this.accounts_items.set(buyer, [item_id]);
        }
        const seller_items = this.accounts_items.get(seller);
        if (seller_items) {
          const index = seller_items.indexOf(item_id);
          if (index > -1) {
            seller_items.splice(index, 1);
            this.accounts_items.set(seller, seller_items);
          }
        }
        item.owner = buyer;
        item.price = "";
        item.status = ItemStatus.SOLD;
        this.items.set(item_id, item);
        this.internalSendNEAR({ receivingAccountId: seller, amount: BigInt(amount.toFixed()) });
        return { success: true, msg: "Item purchased successfully" };
      }
      return { success: false, msg: "Item does not exist" };
    } catch (e: any) {
      return { success: false, msg: e.message };
    }
  }

  @view({})
  get_items(): Array<Item> {
    const item_ids = this.item_ids.toArray();
    const items: Item[] = [];
    for (const item_id of item_ids) {
      const item = this.items.get(item_id);
      if (item) {
        if (item.status !== ItemStatus.DELETED) {
          items.push(item);
        }
      }
    }

    return items;
  }

  internalSendNEAR({ receivingAccountId, amount} : { receivingAccountId: string, amount: bigint }) {
    assert(amount > BigInt("0"), "The amount should be a positive number");
    assert(receivingAccountId != near.currentAccountId(), "Can't transfer to the contract itself");
    assert(amount < near.accountBalance(), `Not enough balance ${near.accountBalance()} to cover transfer of ${amount} yoctoNEAR`);
    const promise = NearPromise.new(receivingAccountId);
    promise.transfer(amount);
    promise.onReturn();
  }
}

'''
'''--- contract/src/models.ts ---

export enum ItemStatus {
  CREATED = "CREATED",
  FORSALE = "FORSALE",
  DELETED = "DELETED",
  SOLD = "SOLD"
}
export class Item {
  id: string = "";
  name: string = "";
  description: string = "";
  price: string = "";
  image: string = "";
  owner: string = "";
  created_at: string = "";
  updated_at: string = "";
  status: ItemStatus = ItemStatus.CREATED;
}

'''
'''--- tests/main.ava.ts ---
import { Worker, NEAR, NearAccount } from "near-workspaces";
import anyTest, { TestFn } from "ava";

const test = anyTest as TestFn<{
  worker: Worker;
  accounts: Record<string, NearAccount>;
}>;

test.beforeEach(async (t) => {
  const worker = await Worker.init();

  const root = worker.rootAccount;
  const contract = await root.devDeploy("../contract/build/contract.wasm", { args: {}, initialBalance: NEAR.parse("100 N").toJSON(), method: "init" });
  const alice = await root.createSubAccount("alice", { initialBalance: NEAR.parse("100 N").toJSON() });
  const bob = await root.createSubAccount("bob", { initialBalance: NEAR.parse("100 N").toJSON() });  

  t.context.worker = worker;
  t.context.accounts = { root, contract, alice, bob };
});

test.afterEach.always(async (t) => {
  await t.context.worker.tearDown().catch((error) => {
    console.log("Failed to tear down the worker:", error);
  });
});

test("create_item: happy path", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  t.deepEqual(result, { success: true, msg: "Item created successfully", item_id: "0" });
  const items = await contract.view("get_items", {});
  t.deepEqual(items, [{ id: "0", name: "test", description: "test", image: "test", owner: alice.accountId, created_at: "0", updated_at: "0", status: "CREATED", price: "" }]);
});

test("create_item: missing fields", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "create_item", { name: "test" }, { attachedDeposit: NEAR.parse("0.01 N").toJSON() });
  t.deepEqual(result, { success: false, msg: "assertion failed: Description is required" });
  const items = await contract.view("get_items", {});
  t.deepEqual(items, []);
});

test("create_item: invalid fields", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "create_item", { name: 123, description: 12.12, image: new Uint8Array(100) }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  t.deepEqual(result, { success: false, msg: "assertion failed: Name must be a string" });
  const items = await contract.view("get_items", {});
  t.deepEqual(items, []);
});

test("create_item: missing deposit", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Not enough attached deposit. Minimum deposit is 25000000000000000000000 yoctoNEAR and you attached 0 yoctoNEAR." });
  const items = await contract.view("get_items", {});
  t.deepEqual(items, []);
});

test("create_item: max deposit", async (t) => {
  const { contract, alice } = t.context.accounts;

  const contractAvailableBeforeLarge = (await contract.balance()).available;

  const testDepositNEAR = NEAR.parse("0.1 N");
  const MAX_NAME_WORDS = 25;
  const MAX_DESC_WORDS = 2000;
  const MAX_IMAGE_WORDS = 200;

  const resultLarge = await alice.call(
    contract,
    "create_item",
    { name: "word ".repeat(MAX_NAME_WORDS), description: "word ".repeat(MAX_DESC_WORDS), image: "test".repeat(MAX_IMAGE_WORDS) },
    { attachedDeposit: testDepositNEAR.toJSON() }
  );
  t.deepEqual(resultLarge, { success: true, msg: "Item created successfully", item_id: "0" });

  const contractAvailableAfterLarge = (await contract.balance()).available;

  const usedDeposit = contractAvailableAfterLarge.sub(contractAvailableBeforeLarge).sub(testDepositNEAR).abs();
  t.log("Required NEAR for large object:", usedDeposit.toHuman());

  const testLowerBand = NEAR.parse("0.11 N");
  const testUpperBand = NEAR.parse("0.12 N");
  t.true(usedDeposit.gte(testLowerBand) && usedDeposit.lte(testUpperBand), "Used deposit is not in the expected range");
});

test("delete_item: happy path", async (t) => {
  const { contract, alice } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  const result = await alice.call(contract, "delete_item", { item_id: "0" });
  t.deepEqual(result, { success: true, msg: "Item deleted successfully" });
  const items = await contract.view("get_items", {});
  t.deepEqual(items, []);
});

test("delete_item: missing fields", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "delete_item", {});
  t.deepEqual(result, { success: false, msg: "assertion failed: Item ID is required" });
});

test("delete_item: invalid fields", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "delete_item", { item_id: 1.01 });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item ID must be a string" });
});

test("delete_item: item does not exist", async (t) => {
  const { contract, alice } = t.context.accounts;
  const result = await alice.call(contract, "delete_item", { item_id: "0" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item does not exist" });
});

test("delete_item: not owner", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  const result = await bob.call(contract, "delete_item", { item_id: "0" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Only the owner can delete an item" });
});

test("delete_item: item is listed", async (t) => {
  const { contract, alice } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  const result = await alice.call(contract, "delete_item", { item_id: "0" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item is listed for sale. Please delist it first" });
});

test("list_item: happy path", async (t) => {
  const { contract, alice } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  const result = await contract.view("get_items", {});
  t.deepEqual(result, [{ id: "0", name: "test", description: "test", image: "test", owner: alice.accountId, created_at: "0", updated_at: "0", status: "CREATED", price: "" }]);
  const resultListItem = await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  t.deepEqual(resultListItem, { success: true, msg: "Item listed successfully" });
  const resultListed = await contract.view("get_items", {});
  t.deepEqual(resultListed, [{ id: "0", name: "test", description: "test", image: "test", owner: alice.accountId, created_at: "0", updated_at: "0", status: "FORSALE", price: "0.1" }]);
});

test("list_item: missing fields", async (t) => {
  const { contract, alice } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  const result = await contract.view("get_items", {});
  t.deepEqual(result, [{ id: "0", name: "test", description: "test", image: "test", owner: alice.accountId, created_at: "0", updated_at: "0", status: "CREATED", price: "" }]);

  const resultListItem = await alice.call(contract, "list_item", {});
  t.deepEqual(resultListItem, { success: false, msg: "assertion failed: Item ID is required" });
});

test("list_item: invalid fields", async (t) => {
  const { contract, alice } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  const result = await contract.view("get_items", {});
  t.deepEqual(result, [{ id: "0", name: "test", description: "test", image: "test", owner: alice.accountId, created_at: "0", updated_at: "0", status: "CREATED", price: "" }]);

  const resultListItem = await alice.call(contract, "list_item", { item_id: 1.01, price: "test" });
  t.deepEqual(resultListItem, { success: false, msg: "assertion failed: Item ID must be a string" });
});

test("list_item: item does not exist", async (t) => {
  const { contract, alice } = t.context.accounts;
  const resultListItem = await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  t.deepEqual(resultListItem, { success: false, msg: "assertion failed: Item does not exist" });
});

test("list_item: not owner", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });
  const resultListItem = await bob.call(contract, "list_item", { item_id: "0", price: 0.1 });
  t.deepEqual(resultListItem, { success: false, msg: "assertion failed: Only the owner can list an item" });
});

test("list_item: item is already listed", async (t) => {
  const { contract, alice } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: NEAR.parse("0.025 N").toJSON() });;
  await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  const resultListItem = await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  t.deepEqual(resultListItem, { success: false, msg: "assertion failed: Item is already listed" });
});

test("delist_item: happy path", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: "0.025 N" });
  await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  const result = await alice.call(contract, "delist_item", { item_id: "0" });
  t.deepEqual(result, { success: true, msg: "Item delisted successfully" });
  const items = await contract.view("get_items", {});
  t.deepEqual(items, [{ id: "0", name: "test", description: "test", image: "test", owner: alice.accountId, created_at: "0", updated_at: "0", status: "CREATED", price: "" }]);
});

test("delist_item: missing fields", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  const result = await alice.call(contract, "delist_item", {});
  t.deepEqual(result, { success: false, msg: "assertion failed: Item ID is required" });
});

test("delist_item: invalid fields", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  const result = await alice.call(contract, "delist_item", { item_id: 1.01 });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item ID must be a string" });
});

test("delist_item: item does not exist", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  const result = await alice.call(contract, "delist_item", { item_id: "0" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item does not exist" });
});

test("delist_item: not owner", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: "0.025 N" });
  await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  const result = await bob.call(contract, "delist_item", { item_id: "0" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Only the owner can delist an item" });
});

test("delist_item: item is not listed", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: "0.025 N" });
  const result = await alice.call(contract, "delist_item", { item_id: "0" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item is not listed for sale" });
});

test("purchase_item: happy path", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: "0.025 N" });
  await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  const bobBalanceBefore = (await bob.balance()).total;
  const result = await bob.call(contract, "purchase_item", { item_id: "0" }, { attachedDeposit: "0.1 N" });
  t.deepEqual(result, { success: true, msg: "Item purchased successfully" });
  const bobBalanceAfter = (await bob.balance()).total;
  t.true(bobBalanceBefore.sub(bobBalanceAfter).toBigInt() > BigInt("1" + "0".repeat(23)) && bobBalanceBefore.sub(bobBalanceAfter).toBigInt() < BigInt("11" + "0".repeat(22)), "Bob's balance did not decrease by the expected amount");
  const items = await contract.view("get_items", {});
  t.deepEqual(items, [{ id: "0", name: "test", description: "test", image: "test", owner: bob.accountId, created_at: "0", updated_at: "0", status: "SOLD", price: "" }]);
});

test("purchase_item: missing fields", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  const result = await bob.call(contract, "purchase_item", {}, { attachedDeposit: "0.1 N" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item ID is required" });
});

test("purchase_item: invalid fields", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  const result = await bob.call(contract, "purchase_item", { item_id: 1.01 }, { attachedDeposit: "0.1 N" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item ID must be a string" });
});

test("purchase_item: item does not exist", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  const result = await bob.call(contract, "purchase_item", { item_id: "0" }, { attachedDeposit: "0.1 N" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item does not exist" });
});

test("purchase_item: not listed", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: "0.025 N" });
  const result = await bob.call(contract, "purchase_item", { item_id: "0" }, { attachedDeposit: "0.1 N" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Item is not listed for sale" });
});

test("purchase_item: not enough deposit", async (t) => {
  const { contract, alice, bob } = t.context.accounts;
  await alice.call(contract, "create_item", { name: "test", description: "test", image: "test" }, { attachedDeposit: "0.025 N" });
  await alice.call(contract, "list_item", { item_id: "0", price: 0.1 });
  const result = await bob.call(contract, "purchase_item", { item_id: "0" }, { attachedDeposit: "0.01 N" });
  t.deepEqual(result, { success: false, msg: "assertion failed: Not enough attached deposit. Minimum deposit is 100000000000000000000000 yoctoNEAR and you attached 10000000000000000000000 yoctoNEAR." });
});

'''
'''--- tests/package.json ---
{
  "name": "near-bos-commerce-tests",
  "version": "0.0.0",
  "description": "Sell any goods on the Blockchain Operating System",
  "repository": "https://github.com/idea404/bos-commerce",
  "author": "Dennis (idea404)",
  "license": "MIT AND Apache-2.0",
  "private": true,
  "scripts": {
    "test": "ava"
  },
  "devDependencies": {
    "@ava/typescript": "^2.0.0",
    "@types/bn.js": "^5.1.1",
    "@types/fs-extra": "^9.0.13",
    "@types/node": "^16.18.32",
    "@types/rimraf": "^3.0.2",
    "ava": "^4.3.3",
    "esbuild": "^0.17.19",
    "near-workspaces": "^3.3.0",
    "typescript": "^4.9.5",
    "ts-node": "^10.9.1"
  }
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es2020",
    "module": "commonjs",
    "outDir": "build",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "experimentalDecorators": true
  },
  "include": ["contract/src/*"],
  "exclude": ["node_modules"]
}
'''