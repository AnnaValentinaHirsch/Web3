*GitHub Repository "Minting-Music/near-multisender"*

'''--- README.md ---
NEAR Multisender Tool
==================
Multisender sends tokens to hundreds of addresses out in 1 single transaction.
Demo: https://multisender.nearspace.info/
Mainnet contract: https://explorer.near.org/accounts/multisender.app.near

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `multisender.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `multisender.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account multisender.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'multisender.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "multisender"
version = "0.1.0"
authors = ["Zavodil <support@zavodil.ru>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "2.0.0"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
multisender Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/roles/developer/contracts/intro
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')
const path = require('path')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  const linkPath = path.relative(linkDir, outFile)

  sh.ln('-s', linkPath, link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::wee_alloc;
use near_sdk::serde::{Deserialize, Serialize};
use near_sdk::{env, ext_contract, near_bindgen, AccountId, Balance, Promise, PromiseResult, Gas};
use near_sdk::json_types::U128;
use std::collections::HashMap;

pub type WrappedBalance = U128;

pub fn ntoy(near_amount: Balance) -> Balance {
    near_amount * 10u128.pow(24)
}

pub const CALLBACK: Gas = 25_000_000_000_000;

#[global_allocator]
static ALLOC: wee_alloc::WeeAlloc = wee_alloc::WeeAlloc::INIT;

#[near_bindgen]
#[derive(Default, BorshDeserialize, BorshSerialize)]
pub struct Multisender {
    deposits: HashMap<String, Balance>,
}

#[ext_contract(ext_self)]
pub trait ExtMultisender {
    fn on_transfer_from_balance(&mut self, account_id: AccountId, amount_sent: Balance, recipient: AccountId);
    fn on_transfer_attached_tokens(&mut self, account_id: AccountId, amount_sent: Balance, recipient: AccountId);
}

#[derive(BorshSerialize, BorshDeserialize, Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Operation {
    account_id: AccountId,
    amount: WrappedBalance,
}

#[near_bindgen]
impl Multisender {
    #[payable]
    pub fn multisend_attached_tokens(&mut self, accounts: Vec<Operation>) {
        let account_id = env::predecessor_account_id();
        let tokens: u128 = near_sdk::env::attached_deposit();

        let mut total: Balance = 0;
        for account in &accounts {
            assert!(
                env::is_valid_account_id(account.account_id.as_bytes()),
                "Account @{} is invalid",
                account.account_id
            );

            let amount: Balance = account.amount.into();
            total += amount;
        }

        assert!(
            total <= tokens,
            "Not enough attached tokens to run multisender (Supplied: {}. Demand: {})",
            tokens,
            total
        );

        let direct_logs: bool = accounts.len() < 100;
        let mut logs: String = "".to_string();

        for account in accounts {
            let amount_u128: u128 = account.amount.into();

            if direct_logs {
                env::log(format!("Sending {} yNEAR (~{} NEAR) to account @{}", amount_u128, yton(amount_u128), account.account_id).as_bytes());
            } else {
                let log = format!("Sending {} yNEAR (~{} NEAR) to account @{}\n", amount_u128, yton(amount_u128), account.account_id);
                logs.push_str(&log);
            }

            Promise::new(account.account_id.clone())
                .transfer(amount_u128)
                .then(
                    ext_self::on_transfer_attached_tokens(
                        account_id.clone(),
                        amount_u128,
                        account.account_id,
                        &env::current_account_id(),
                        0,
                        CALLBACK,
                    )
                );
        }

        if !direct_logs {
            env::log(format!("Done!\n{}", logs).as_bytes());
        }
    }

    pub fn multisend_from_balance(&mut self, accounts: Vec<Operation>) {
        let account_id = env::predecessor_account_id();

        assert!(self.deposits.contains_key(&account_id), "Unknown user");

        let tokens: Balance = *self.deposits.get(&account_id).unwrap();
        let mut total: Balance = 0;
        for account in &accounts {
            assert!(
                env::is_valid_account_id(account.account_id.as_bytes()),
                "Account @{} is invalid",
                account.account_id
            );

            let amount: Balance = account.amount.into();
            total += amount;
        }

        assert!(
            total <= tokens,
            "Not enough deposited tokens to run multisender (Supplied: {}. Demand: {})",
            tokens,
            total
        );

        let mut logs: String = "".to_string();
        let direct_logs: bool = accounts.len() < 100;

        for account in accounts {
            let amount_u128: u128 = account.amount.into();

            if direct_logs {
                env::log(format!("Sending {} yNEAR (~{} NEAR) to account @{}", amount_u128, yton(amount_u128), account.account_id).as_bytes());
            } else {
                let log = format!("Sending {} yNEAR (~{} NEAR) to account @{}\n", amount_u128, yton(amount_u128), account.account_id);
                logs.push_str(&log);
            }

            Promise::new(account.account_id.clone())
                .transfer(amount_u128)
                .then(
                    ext_self::on_transfer_from_balance(
                        account_id.clone(),
                        amount_u128,
                        account.account_id,
                        &env::current_account_id(),
                        0,
                        CALLBACK,
                    )
                );
        }

        if !direct_logs {
            env::log(format!("Done!\n{}", logs).as_bytes());
        }
    }

    pub fn multisend_from_balance_unsafe(&mut self, accounts: Vec<Operation>) {
        let account_id = env::predecessor_account_id();

        assert!(self.deposits.contains_key(&account_id), "Unknown user");

        let tokens: Balance = *self.deposits.get(&account_id).unwrap();
        let mut total: Balance = 0;
        for account in &accounts {
            assert!(
                env::is_valid_account_id(account.account_id.as_bytes()),
                "Account @{} is invalid",
                account.account_id
            );

            let amount: Balance = account.amount.into();
            total += amount;
        }

        assert!(
            total <= tokens,
            "Not enough deposited tokens to run multisender (Supplied: {}. Demand: {})",
            tokens,
            total
        );

        let mut logs: String = "".to_string();
        let mut total_sent: Balance = 0;
        let direct_logs:bool = accounts.len() < 100;

        for account in accounts {
            let amount_u128: u128 = account.amount.into();
            total_sent += amount_u128;
            let new_balance = tokens - total_sent;
            self.deposits.insert(account_id.clone(), new_balance);

            Promise::new(account.account_id.clone()).transfer(amount_u128);

            if direct_logs {
                env::log( format!("Sending {} yNEAR to account @{}", amount_u128, account.account_id).as_bytes());
            }
            else{
                let log = format!("Sending {} yNEAR to account @{}\n", amount_u128, account.account_id);
                logs.push_str(&log);
            }
        }

        if !direct_logs {
            env::log(format!("Done!\n{}", logs).as_bytes());
        }
    }

    pub fn on_transfer_from_balance(&mut self, account_id: AccountId, amount_sent: Balance, recipient: AccountId) {
        assert_self();

        let transfer_succeeded = is_promise_success();
        if transfer_succeeded {
            let previous_balance: u128 = self.get_deposit(account_id.clone()).into();
            self.deposits.insert(account_id, previous_balance - amount_sent);
        } else {
            env::log(format!("Transaction to @{} failed. {} yNEAR (~{} NEAR) kept on the app deposit", recipient, amount_sent, yton(amount_sent)).as_bytes());
        }
    }

    pub fn on_transfer_attached_tokens(&mut self, account_id: AccountId, amount_sent: Balance, recipient: AccountId) {
        assert_self();

        let transfer_succeeded = is_promise_success();
        if !transfer_succeeded {
            env::log(format!("Transaction to @{} failed. {} yNEAR (~{} NEAR) moved to the app deposit", recipient, amount_sent, yton(amount_sent)).as_bytes());
            let previous_balance: u128 = self.get_deposit(account_id.clone()).into();
            self.deposits.insert(account_id, previous_balance + amount_sent);
        }
    }

    #[payable]
    pub fn deposit(&mut self) {
        let attached_tokens: Balance = near_sdk::env::attached_deposit();
        let account_id = env::predecessor_account_id();

        let previous_balance: u128 = self.get_deposit(account_id.clone()).into();
        self.deposits.insert(account_id, previous_balance + attached_tokens);
    }

    pub fn withdraw(&mut self) -> Promise {
        let account_id = env::predecessor_account_id();

        assert!(self.deposits.contains_key(&account_id), "Unknown user");

        let tokens: Balance = *self.deposits.get(&account_id).unwrap();
        assert!(tokens > 0, "Nothing to withdraw");

        env::log(
            format!(
                "@{} withdrawing {}",
                account_id, tokens
            )
                .as_bytes(),
        );

        self.deposits.insert(account_id.clone(), 0);
        Promise::new(account_id).transfer(tokens)
    }

    pub fn get_deposit(&self, account_id: String) -> U128 {
        match self.deposits.get(&account_id) {
            Some(deposit) => {
                U128::from(*deposit)
            }
            None => {
                0.into()
            }
        }
    }
}

pub fn assert_self() {
    assert_eq!(env::predecessor_account_id(), env::current_account_id());
}

fn is_promise_success() -> bool {
    assert_eq!(
        env::promise_results_count(),
        1,
        "Contract expected a result on the callback"
    );
    match env::promise_result(0) {
        PromiseResult::Successful(_) => true,
        _ => false,
    }
}

pub fn yton(yocto_amount: Balance) -> Balance {
    (yocto_amount + (5 * 10u128.pow(23))) / 10u128.pow(24)
}

#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::MockedBlockchain;
    use near_sdk::{testing_env, VMContext};

    fn master_account() -> AccountId { "admin.near".to_string() }

    fn alice_account() -> AccountId { "alice.near".to_string() }

    fn bob_account() -> AccountId { "bob.near".to_string() }

    pub fn get_context(
        predecessor_account_id: AccountId,
        attached_deposit: u128,
        is_view: bool,
    ) -> VMContext {
        VMContext {
            current_account_id: predecessor_account_id.clone(),
            signer_account_id: predecessor_account_id.clone(),
            signer_account_pk: vec![0, 1, 2],
            predecessor_account_id,
            input: vec![],
            block_index: 1,
            block_timestamp: 0,
            epoch_height: 1,
            account_balance: 0,
            account_locked_balance: 0,
            storage_usage: 10u64.pow(6),
            attached_deposit,
            prepaid_gas: 10u64.pow(15),
            random_seed: vec![0, 1, 2],
            is_view,
            output_data_receivers: vec![],
        }
    }

    fn ntoy(near_amount: Balance) -> Balance {
        near_amount * 10u128.pow(24)
    }

    #[test]
    fn test_deposit() {
        let context = get_context(alice_account(), ntoy(100), false);
        testing_env!(context.clone());

        let mut contract = Multisender::default();

        contract.deposit();

        assert_eq!(
            ntoy(100),
            contract.get_deposit(alice_account()).0
        );
    }

    #[test]
    fn test_deposit_withdraw() {
        let context = get_context(alice_account(), ntoy(100), false);
        testing_env!(context.clone());

        let mut contract = Multisender::default();

        contract.deposit();
        contract.withdraw();

        assert_eq!(
            0,
            contract.get_deposit(alice_account()).0
        );
    }
}

'''
'''--- package.json ---
{
  "name": "multisender",
  "version": "0.1.0",
  "license": "UNLICENSED",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "node contract/compile.js",
    "build:contract:debug": "node contract/compile.js --debug",
    "build:web": "export NODE_ENV=mainnet && rm -r mainnet && parcel build src/index.html --public-url ./ && mv dist mainnet",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy:pages": "gh-pages -d dist/",
    "deploy": "npm run build && npm run deploy:contract && npm run deploy:pages",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "start": "export PORT=39106 && echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel src/index.html --open",
    "dev": "export PORT=39106 && nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test": "npm run build:contract:debug && cd contract && cargo test -- --nocapture && cd .. && jest test --runInBand",
    "build:web:testnet": "export NODE_ENV=testnet && rm -rf testnet && parcel build src/index.html --public-url ./ && mv dist testnet",
    "build:contract:testnet": "export NODE_ENV=testnet && node contract/compile.js",
    "deploy:contract:testnet": "export NODE_ENV=testnet && near deploy",
    "build:web:all": "export NODE_ENV=mainnet && rm -r mainnet && parcel build src/index.html --public-url ./ && mv dist mainnet && export NODE_ENV=testnet && rm -r testnet && parcel build src/index.html --public-url ./ && mv dist testnet",
    "dev:clear": "rm -r neardev"
  },
  "devDependencies": {
    "@babel/core": "~7.12.3",
    "@babel/preset-env": "~7.12.1",
    "@babel/preset-react": "~7.12.5",
    "babel-jest": "~26.6.2",
    "env-cmd": "~10.1.0",
    "gh-pages": "~3.1.0",
    "jest": "~26.6.2",
    "jest-environment-node": "~26.6.2",
    "near-cli": "~1.4.0",
    "nodemon": "~2.0.3",
    "parcel-bundler": "~1.12.4",
    "react-test-renderer": "~17.0.1",
    "shelljs": "~0.8.4",
    "bn.js": "^5.1.1",
    "near-api-js": "~0.36.2",
    "react-tooltip": "~4.2.11",
    "react-file-reader": "~1.1.4"
  },
  "dependencies": {
    "react": "~17.0.1",
    "react-dom": "~17.0.1",
    "regenerator-runtime": "~0.13.5"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-cli/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/contract/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, {useRef} from 'react'
import {login, logout} from './utils'
import './global.css'
import './app.css'
import * as nearAPI from 'near-api-js'
import {BN} from 'bn.js'
import ReactTooltip from 'react-tooltip';
import ReactFileReader from 'react-file-reader';
import {useDetectOutsideClick} from "./useDetectOutsideClick";
import {PublicKey} from 'near-api-js/lib/utils'
import {KeyType} from 'near-api-js/lib/utils/key_pair'

import getConfig from './config'
import getAppSettings from './app-settings'

const config = getConfig(process.env.NODE_ENV || 'development');
const appSettings = getAppSettings();

const FRAC_DIGITS = 5;

function ConvertToYoctoNear(amount) {
    return new BN(Math.round(amount * 100000000)).mul(new BN("10000000000000000")).toString();
}

export default function App() {
    // when the user has not yet interacted with the form, disable the button
    const [sendButtonDisabled, setSendButtonDisabled] = React.useState(true);
    const [sendButtonUnsafeDisabled, setSendButtonUnsafeDisabled] = React.useState(true);
    const [checkButtonVisibility, setCheckButtonVisibility] = React.useState(false);
    const [depositButtonDisabled, setDepositButtonDisabled] = React.useState(true);
    const [depositAndSendButtonDisabled, setDepositAndSendButtonDisabled] = React.useState(true);
    const [depositAndSendButtonVisibility, setDepositAndSendButtonVisibility] = React.useState(true);
    const [textareaPlaceHolderVisibility, setTextareaPlaceHolderVisibility] = React.useState(true);

    const [chunkSize, setChunkSize] = React.useState(7); // or 100

    const navDropdownRef = React.useRef(null);
    const [isNavDropdownActive, setIsNaVDropdownActive] = useDetectOutsideClick(navDropdownRef, false);

    // after submitting the form, we want to show Notification
    const [showNotification, setShowNotification] = React.useState("");

    const [accounts, setAccounts] = React.useState({});
    const [accountsTextArea, setAccountsTextArea] = React.useState("");
    const [deposit, setDeposit] = React.useState(0);
    const [total, setTotal] = React.useState(0);
    const [chunkProcessingIndex, setChunkProcessingIndex] = React.useState(0);

    const setButtonsVisibility = (accounts, total, deposit, checkOtherButtons) => {
        if (checkOtherButtons === undefined)
            checkOtherButtons = false;

        const signedIn = window.walletConnection.isSignedIn();
        const accountsLength = accounts ? Object.keys(accounts).length : 0;
        setDepositButtonDisabled(!signedIn || !accountsLength || /*accountsLength < 150 || */deposit >= total || !total);
        setSendButtonDisabled(!signedIn || !accountsLength || deposit < total);
        setSendButtonUnsafeDisabled(!signedIn || !accountsLength || deposit < total);
        setCheckButtonVisibility(!signedIn || !accountsLength);
        const allButtonsDisabled = checkOtherButtons && depositButtonDisabled && sendButtonDisabled;
        setDepositAndSendButtonDisabled(!signedIn || !accountsLength || accountsLength > chunkSize);
        setDepositAndSendButtonVisibility(allButtonsDisabled || !(!signedIn || !accountsLength));
    };

    const getAccountsText = (accounts) => {
        return Object.keys(accounts).length ?
            Object.keys(accounts).reduce(function (acc, cur) {
                return acc + cur + " " + accounts[cur] + "\r";
            }, "")
            : "";
    };

    const UploadCSV = files => {
        const reader = new FileReader();
        reader.onload = function (e) {
            const csv = reader.result.replace(/[, ]+/g, " ").trim(); // remove extra commas
            parseAmounts(csv)
        };
        reader.readAsText(files[0]);
    };

    const ParsedAccountsList = () => {
        let total = 0;
        let counter = 1;
        return Object.keys(accounts).length ?
            <ul className="accounts">
                {Object.keys(accounts).map(function (account_id) {
                    total += Number(accounts[account_id]);
                    const chuckIndex = Math.floor((counter) / chunkSize);
                    let liClassName = (chuckIndex < chunkProcessingIndex) ? "processed" : "";
                    return <li key={account_id} className={liClassName} data-chunk-index={chuckIndex}>
                        <div className="account" title={account_id}>{counter++}. {AccountTrim(account_id)}</div>
                        <div className="amount">{accounts[account_id]} Ⓝ</div>
                    </li>
                })}
                <TotalValue total={total}/>
            </ul> : null;
    };

    const Header = () => {
        return <div className="nav-container">
            <div className="nav-header">
                <NearLogo/>
                <div className="nav-item user-name">{window.accountId}</div>
                <Deposit/>
                <div className="nav align-right">
                    <NavMenu/>
                    <div className="account-sign-out">
                        <button className="link" style={{float: 'right'}} onClick={logout}>
                            Sign out
                        </button>
                    </div>
                </div>
            </div>
        </div>
    };

    const Footer = () => {
        return <div className="footer">
            <div className="github">
                <div className="build-on-near"><a href="https://nearspace.info">BUILD ON NEAR</a></div>
                <div className="brand">NEAR {appSettings.appNme} | <a href={appSettings.github}
                                                                      rel="nofollow"
                                                                      target="_blank">Open Source</a></div>
            </div>
            <div className="promo">
                Made by <a href="https://near.zavodil.ru/" rel="nofollow" target="_blank">Zavodil node</a>
            </div>
        </div>
    };

    const Deposit = () => {
        return deposit && Number(deposit) ?
            <div className="nav user-balance" data-tip="Your internal balance in Multisender App">
                {" App Balance: " + deposit + "Ⓝ"}
            </div>
            :
            null;
    };

    const NearLogo = () => {
        return <div className="logo-container content-desktop">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 414 162" className="near-logo">
                <g id="Layer_1" data-name="Layer 1">
                    <path className="polymorph"
                          d="M207.21,54.75v52.5a.76.76,0,0,1-.75.75H201a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V54.75a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24-.77-19.06V54.75a.75.75,0,0,1,.75-.75h7.22A.76.76,0,0,1,207.21,54.75Z"
                    ></path>
                    <path className="polymorph"
                          d="M281,108h-7.64a.75.75,0,0,1-.7-1L292.9,54.72A1.14,1.14,0,0,1,294,54h9.57a1.14,1.14,0,0,1,1.05.72L324.8,107a.75.75,0,0,1-.7,1h-7.64a.76.76,0,0,1-.71-.48l-16.31-43a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,281,108Z"
                    ></path>
                    <path className="polymorph"
                          d="M377.84,106.79,362.66,87.4c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H336.71a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.2H357c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H336.71a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V87.87h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,377.84,106.79Z"
                    ></path>
                    <path className="polymorph"
                          d="M258.17,54h-33.5a1,1,0,0,0-1,1h0A7.33,7.33,0,0,0,231,62.33h27.17a.74.74,0,0,0,.75-.75V54.75A.75.75,0,0,0,258.17,54Zm0,45.67h-25a.76.76,0,0,1-.75-.75V85.38a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V77a.75.75,0,0,0-.75-.75H224.79a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,258.17,99.67Z"
                    ></path>
                    <path className="polymorph"
                          d="M108.24,40.57,89.42,68.5a2,2,0,0,0,3,2.63l18.52-16a.74.74,0,0,1,1.24.56v50.29a.75.75,0,0,1-1.32.48l-56-67A9.59,9.59,0,0,0,47.54,36H45.59A9.59,9.59,0,0,0,36,45.59v70.82A9.59,9.59,0,0,0,45.59,126h0a9.59,9.59,0,0,0,8.17-4.57L72.58,93.5a2,2,0,0,0-3-2.63l-18.52,16a.74.74,0,0,1-1.24-.56V56.07a.75.75,0,0,1,1.32-.48l56,67a9.59,9.59,0,0,0,7.33,3.4h2a9.59,9.59,0,0,0,9.59-9.59V45.59A9.59,9.59,0,0,0,116.41,36h0A9.59,9.59,0,0,0,108.24,40.57Z"
                    ></path>
                </g>
            </svg>
            <div className="app-name">
                {appSettings.appNme}
            </div>
        </div>;
    };

    const NavMenu = () => {
        const onClick = () => setIsNaVDropdownActive(!isNavDropdownActive);

        return (
            <div className="nav-menu container">
                <div className="menu-container">
                    <button onClick={onClick} className="menu-trigger">
                        <span className="network-title">{config.networkId}</span>
                        <div className="network-icon"></div>
                    </button>
                    <nav
                        ref={navDropdownRef}
                        className={`menu ${isNavDropdownActive ? "active" : "inactive"}`}
                    >
                        <ul>
                            <li>
                                <a href={appSettings.urlMainnet}>Mainnet</a>
                            </li>
                            <li>
                                <a href={appSettings.urlTestnet}>Testnet</a>
                            </li>
                        </ul>
                    </nav>
                </div>
            </div>
        );
    };

    const TotalValue = (props) => {
        if (props && props.total)
            return <li key="total" className="total">
                <div className="account">Total</div>
                <div className="amount">{props.total.toFixed(props.total >= 1 ? 2 : 5)} Ⓝ</div>
            </li>;
        else
            return null
    };

    let parseAmounts = function (input, pasteInProgress) {
        if (pasteInProgress === undefined)
            pasteInProgress = false;
        /*
        first character: [0-9a-zA-Z]
        account_id: [\_\-0-9a-zA-Z.]*
        separator: [\t,|\||=| ]
        amount ([0-9\.\,]+)
        */
        const pattern = RegExp(/^([0-9a-zA-Z][\_\-0-9a-zA-Z.]*)[\t,|\||=| ]([0-9\.\,]+$)/, 'gm');
        let accounts = {};
        let result;
        let total = 0;
        while ((result = pattern.exec(input)) !== null) {
            const account_name = result[1].toLowerCase();
            const amount = parseFloat(result[2].replace(',', '.').replace(' ', ''))
            if (result[1] && amount) {
                if (accounts.hasOwnProperty(account_name)) {
                    accounts[account_name] += amount;
                } else
                    accounts[account_name] = amount;

                total += amount;
            }
        }
        setTextareaPlaceHolderVisibility(!input.length);
        setTotal(total);
        setAccounts(accounts);
        if (!pasteInProgress) {
            setAccountsTextArea(input);
        }
        setButtonsVisibility(accounts, total, deposit, true);
    };

    const ActionButtons = useRef(null)

    const scrollToBottom = () => {
        ActionButtons.current.scrollIntoView({behavior: "smooth"});
    }

    const GetDeposit = async () => {
        const deposit = await window.contract.get_deposit({
            account_id: window.accountId
        });
        const depositFormatted = nearAPI.utils.format.formatNearAmount(deposit, FRAC_DIGITS).replace(",", "");
        setDeposit(depositFormatted);
        return depositFormatted;
    };

    // The useEffect hook can be used to fire side-effects during render
    // Learn more: https://reactjs.org/docs/hooks-intro.html
    React.useEffect(
        async () => {
            // in this case, we only care to query the contract when signed in
            if (window.walletConnection.isSignedIn()) {
                await GetDeposit().then((deposit) => {
                    const accountsRaw = JSON.parse(window.localStorage.getItem('accounts'));

                    let accounts = {};
                    if (accountsRaw && accountsRaw.length) {
                        let total = 0;
                        Object.keys(accountsRaw).map(function (index) {
                            const amount = nearAPI.utils.format.formatNearAmount(accountsRaw[index].amount, FRAC_DIGITS).replace(",", "");
                            total += Number(amount);
                            accounts[accountsRaw[index].account_id] = amount;
                        });
                        setTextareaPlaceHolderVisibility(false);
                        setAccounts(accounts);
                        setAccountsTextArea(getAccountsText(accounts));
                        setTotal(total);
                        setButtonsVisibility(accounts, total, deposit, true);
                    }
                });
            }
        },

        // The second argument to useEffect tells React when to re-run the effect
        // Use an empty array to specify "only run on first render"
        // This works because signing into NEAR Wallet reloads the page
        []
    )

    // if not signed in, return early with sign-in prompt
    if (!window.walletConnection.isSignedIn()) {
        return (
            <>
                <Header/>
                <main>
                    <h1>{appSettings.appNme}</h1>
                    <p>
                        {appSettings.appDescription}
                    </p>
                    <p>
                        To make use of the NEAR blockchain, you need to sign in. The button
                        below will sign you in using NEAR Wallet.
                    </p>
                    <p style={{textAlign: 'center', marginTop: '2.5em'}}>
                        <button onClick={login}>Sign in</button>
                    </p>
                </main>
                <Footer/>
            </>
        )
    }

    const handlePaste = (event) => {
        let {value, selectionStart, selectionEnd} = event.target;
        let pastedValue = event.clipboardData.getData("text");
        let pre = value.substring(0, selectionStart);
        let post = value.substring(selectionEnd, value.length);
        value = (pre + pastedValue + post).trim();
        parseAmounts(value, true);
    };

    return (
        // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
        <>
            <Header/>
            <main>
                <div className="background-img"/>
                <h1>
                    Multisender Tool
                </h1>

                <div className="textarea-description">
                    <div className="caption">
                        <label
                            style={{
                                display: 'block',
                                color: 'var(--gray)',
                            }}
                        >
                            Recipients and amounts
                        </label>
                        <label
                            style={{
                                display: 'block',
                                color: 'var(--gray)',
                                fontSize: '0.6em',
                                marginBottom: '0.5em'
                            }}
                        >
                            Enter one address and amount in NEAR on each line. Supports any format.
                        </label>
                    </div>
                    <div className="upload-csv">
                        <ReactFileReader handleFiles={UploadCSV} fileTypes={'.csv'}>
                            <button className='btn upload-csv-button'>Upload CSV</button>
                        </ReactFileReader>
                    </div>
                </div>

                <form>
                    <fieldset id="fieldset">
                        <div className="accounts-textarea">
                                  <textarea
                                      autoFocus
                                      autoComplete="off"
                                      id="accounts"
                                      defaultValue={accountsTextArea}
                                      onChange={e => parseAmounts(e.target.value)}
                                      onPaste={e => handlePaste(e)}
                                  />
                            {
                                textareaPlaceHolderVisibility &&
                                <div className="accounts-placeholder">
                                    account1.near 3.141592<br/>
                                    account2.near,2.7182<br/>
                                    account3.near=1.41421
                                </div>
                            }
                        </div>

                        <div className="action-buttons">
                            <button
                                disabled={checkButtonVisibility}
                                className={`verify-button send-button ${checkButtonVisibility ? "hidden" : ""}`}
                                onClick={async event => {
                                    event.preventDefault();
                                    ReactTooltip.hide();

                                    // disable the form while the value gets updated on-chain
                                    fieldset.disabled = true

                                    const connection = getNearAccountConnection();
                                    const allAccountKeys = Object.keys(accounts);
                                    let validAccountsFiltered = [];
                                    let total = 0;

                                    const groupSize = 500;
                                    let groupIndex = -1;
                                    let accountGroups = [];
                                    for (let i = 0; i < allAccountKeys.length; i++) {
                                        if (i % groupSize === 0) {
                                            groupIndex++;
                                            accountGroups[groupIndex] = [];
                                        }

                                        accountGroups[groupIndex].push(allAccountKeys[i])
                                    }

                                    let group = 0;
                                    while (group < accountGroups.length) {
                                        let checkAccountGroup = async () => {
                                            return await Promise.all(accountGroups[group].map(async account => {
                                                    let valid = await accountExists(connection, account).then();
                                                    if (valid) {
                                                        return account;
                                                    } else {
                                                        console.log("Invalid account: " + account);
                                                    }
                                                }
                                            ));
                                        }

                                        await checkAccountGroup().then((validAccounts) => {
                                            Object.values(validAccounts).map(account => {
                                                if (account) {
                                                    validAccountsFiltered[account] = accounts[account];
                                                    total += parseFloat(accounts[account]);
                                                }
                                            });
                                        });

                                        group++;
                                    }

                                    const removed = Object.keys(accounts).length - Object.keys(validAccountsFiltered).length;
                                    setAccounts(validAccountsFiltered);
                                    setAccountsTextArea(getAccountsText(validAccountsFiltered));
                                    setTotal(total);
                                    setButtonsVisibility(validAccountsFiltered, total, deposit, true);

                                    fieldset.disabled = false
                                    // show Notification
                                    if (removed > 0)
                                        setShowNotification({
                                            method: "text",
                                            data: `Removed ${removed} invalid account(s)`
                                        });
                                    else
                                        setShowNotification({
                                            method: "text",
                                            data: `All accounts are valid`
                                        });

                                    if (total)
                                        scrollToBottom();

                                    // remove Notification again after css animation completes
                                    // this allows it to be shown again next time the form is submitted
                                    setTimeout(() => {
                                        setShowNotification("")
                                    }, 11000)
                                }}
                                data-tip={"Remove invalid accounts from the list"}>
                                Verify accounts
                            </button>
                        </div>

                        <ParsedAccountsList/>

                        {!sendButtonDisabled && <>
                            <div className="warning-text">Please double check account list and total amount before to
                                send
                                funds.
                            </div>
                            <div className="warning-text">Blockchain transactions are invertible.</div>
                        </>}

                        <div className="action-buttons action-buttons-last" ref={ActionButtons}>
                            <button
                                disabled={sendButtonDisabled}
                                className={`send-button ${sendButtonDisabled ? "hidden" : ""}`}
                                onClick={async event => {
                                    event.preventDefault()
                                    ReactTooltip.hide();

                                    let _chunkSize = 7;
                                    setChunkSize(_chunkSize);
                                    console.log("Chunk size: " + _chunkSize);

                                    // disable the form while the value gets updated on-chain
                                    fieldset.disabled = true

                                    try {
                                        let multisenderAccounts = Object.keys(accounts).reduce(function (acc, cur) {
                                            acc.push({account_id: cur, amount: ConvertToYoctoNear(accounts[cur])})
                                            return acc;
                                        }, []);

                                        SaveAccountsToLocalStorage(multisenderAccounts);

                                        const gas = 300000000000000;
                                        let promises = [];

                                        const chunks = multisenderAccounts.reduce(function (result, value, index, array) {
                                            if (index % _chunkSize === 0) {
                                                const max_slice = Math.min(index + _chunkSize, multisenderAccounts.length);
                                                result.push(array.slice(index, max_slice));
                                            }
                                            return result;
                                        }, []);

                                        const ret = await (chunks).reduce(
                                            async (promise, chunk, index) => {
                                                return promise.then(async last => {
                                                    const ret = last + 100;
                                                    const max_slice = Math.min((index + 1) * _chunkSize, multisenderAccounts.length);
                                                    const remainingAccounts = multisenderAccounts.slice(max_slice);

                                                    SaveAccountsToLocalStorage(remainingAccounts);

                                                    await new Promise(async (res, rej) => {
                                                        await window.contract.multisend_from_balance({
                                                            accounts: chunk
                                                        }, gas).then(() => {
                                                            setChunkProcessingIndex(index + 1);
                                                        })

                                                        return setTimeout(res, 100);
                                                    });
                                                    return ret;
                                                })
                                            }, Promise.resolve(0)).then(() => {
                                            setButtonsVisibility([], 0, deposit, true);
                                            setShowNotification({
                                                method: "complete",
                                                data: "multisend_from_balance"
                                            });
                                            GetDeposit();
                                        });
                                    } catch (e) {
                                        alert(
                                            'Something went wrong! \n' +
                                            'Check your browser console for more info.\n' +
                                            e.toString()
                                        )
                                        throw e
                                    } finally {
                                        // re-enable the form, whether the call succeeded or failed
                                        fieldset.disabled = false
                                    }
                                }}
                                data-tip={"Multi send to all recipients using your internal balance of Multusender App  by 7 txs. Your deposit: " + deposit + "Ⓝ"}>
                                Send from App Balance
                            </button>

                            <button
                                disabled={sendButtonUnsafeDisabled}
                                className={`send-button ${sendButtonUnsafeDisabled ? "hidden" : ""}`}
                                onClick={async event => {
                                    event.preventDefault()
                                    ReactTooltip.hide();

                                    let _chunkSize = 100;
                                    setChunkSize(_chunkSize);
                                    console.log("Chunk size: " + _chunkSize);

                                    // disable the form while the value gets updated on-chain
                                    fieldset.disabled = true

                                    try {
                                        let multisenderAccounts = Object.keys(accounts).reduce(function (acc, cur) {
                                            acc.push({account_id: cur, amount: ConvertToYoctoNear(accounts[cur])})
                                            return acc;
                                        }, []);

                                        SaveAccountsToLocalStorage(multisenderAccounts);

                                        const gas = 300000000000000;
                                        let promises = [];

                                        const chunks = multisenderAccounts.reduce(function (result, value, index, array) {
                                            if (index % _chunkSize === 0) {
                                                const max_slice = Math.min(index + _chunkSize, multisenderAccounts.length);
                                                result.push(array.slice(index, max_slice));
                                            }
                                            return result;
                                        }, []);

                                        const ret = await (chunks).reduce(
                                            async (promise, chunk, index) => {
                                                return promise.then(async last => {
                                                    const ret = last + 100;
                                                    const max_slice = Math.min((index + 1) * _chunkSize, multisenderAccounts.length);
                                                    const remainingAccounts = multisenderAccounts.slice(max_slice);

                                                    SaveAccountsToLocalStorage(remainingAccounts);

                                                    await new Promise(async (res, rej) => {
                                                        await window.contract.multisend_from_balance_unsafe({
                                                            accounts: chunk
                                                        }, gas).then(() => {
                                                            setChunkProcessingIndex(index + 1);
                                                        })

                                                        return setTimeout(res, 100);
                                                    });
                                                    return ret;
                                                })
                                            }, Promise.resolve(0)).then(() => {
                                            setButtonsVisibility([], 0, deposit, true);
                                            setShowNotification({
                                                method: "complete",
                                                data: "multisend_from_balance_unsafe"
                                            });
                                            GetDeposit();
                                        });
                                    } catch (e) {
                                        alert(
                                            'Something went wrong! \n' +
                                            'Check your browser console for more info.\n' +
                                            e.toString()
                                        )
                                        throw e
                                    } finally {
                                        // re-enable the form, whether the call succeeded or failed
                                        fieldset.disabled = false
                                    }
                                }}
                                data-tip={"Multi send to all recipients using your internal balance by 100 txs. BETTER GAS EFFICIENCY BY IGNORING TRANSFER STATUS. Always Verify Accounts before."}>
                                Send Unsafe from App Balance
                            </button>

                            <button
                                disabled={depositAndSendButtonDisabled}
                                className={`deposit-send-button ${depositAndSendButtonVisibility ? "" : "hidden"}`}
                                onClick={async event => {
                                    event.preventDefault()
                                    ReactTooltip.hide();

                                    // disable the form while the value gets updated on-chain
                                    fieldset.disabled = true

                                    try {
                                        let multisenderAccounts = Object.keys(accounts).reduce(function (acc, cur) {
                                            acc.push({account_id: cur, amount: ConvertToYoctoNear(accounts[cur])})
                                            return acc;
                                        }, []);

                                        SaveAccountsToLocalStorage([]);

                                        const gas = 300000000000000;
                                        const tokensToAttach = ConvertToYoctoNear(total);
                                        await window.contract.multisend_attached_tokens({
                                            accounts: multisenderAccounts
                                        }, gas, tokensToAttach);
                                    } catch (e) {
                                        alert(
                                            'Something went wrong! \n' +
                                            'Check your browser console for more info.\n' +
                                            e.toString()
                                        )
                                        throw e
                                    } finally {
                                        // re-enable the form, whether the call succeeded or failed
                                        fieldset.disabled = false
                                    }

                                    // show Notification
                                    setShowNotification({method: "call", data: "multisend_attached_tokens"});

                                    // remove Notification again after css animation completes
                                    // this allows it to be shown again next time the form is submitted
                                    setTimeout(() => {
                                        setShowNotification("")
                                    }, 11000)
                                }}
                                data-tip={`Deposit tokens to the Multisender App and immediately multi send to all recipients. Max accounts allowed: ${chunkSize}`}
                            >
                                Deposit & Send
                            </button>

                            <button
                                disabled={depositButtonDisabled}
                                className={`deposit-button ${depositButtonDisabled ? "hidden" : ""}`}
                                onClick={async event => {
                                    event.preventDefault()
                                    ReactTooltip.hide();

                                    // disable the form while the value gets updated on-chain
                                    fieldset.disabled = true;

                                    try {

                                        let multisenderAccounts = Object.keys(accounts).reduce(function (acc, cur) {
                                            acc.push({account_id: cur, amount: ConvertToYoctoNear(accounts[cur])})
                                            return acc;
                                        }, []);

                                        SaveAccountsToLocalStorage(multisenderAccounts);

                                        const gas = 30000000000000;

                                        await window.contract.deposit({}, gas, ConvertToYoctoNear(total - deposit));

                                    } catch (e) {
                                        alert(
                                            'Something went wrong! \n' +
                                            'Check your browser console for more info.\n' +
                                            e.toString()
                                        )
                                        throw e
                                    } finally {
                                        // re-enable the form, whether the call succeeded or failed
                                        fieldset.disabled = false
                                    }

                                    // show Notification
                                    setShowNotification({method: "call", data: "deposit"})

                                    // remove Notification again after css animation completes
                                    // this allows it to be shown again next time the form is submitted
                                    setTimeout(() => {
                                        setShowNotification("")
                                    }, 11000)
                                }}
                                data-tip="Deposit tokens to the Multisender App and come back to perform multi send. Option for Ledger holders and for those who have too many tasks for a single transaction. ">
                                {`Deposit ${(total - deposit).toFixed(2)}Ⓝ`}
                            </button>
                        </div>

                    </fieldset>
                </form>
            </main>

            <Footer/>

            {showNotification && Object.keys(showNotification) &&
            <Notification method={showNotification.method} data={showNotification.data}/>}
            <ReactTooltip/>
        </>
    )
}

function getNearAccountConnection() {
    if (!window.connection) {
        const provider = new nearAPI.providers.JsonRpcProvider(config.nodeUrl);
        window.connection = new nearAPI.Connection(config.nodeUrl, provider, {});
    }
    return window.connection;
}

async function accountExists(connection, accountId) {
    if (accountId.length === 44) {
        let key = new PublicKey({keyType: KeyType.ED25519, data: Buffer.from(accountId, 'hex')});
        return !!(key.toString())
    }

    try {
        await new nearAPI.Account(connection, accountId).state();
        return true;
    } catch (error) {
        return false;
    }
}

function SaveAccountsToLocalStorage(accounts) {
    window.localStorage.setItem('accounts', accounts ? JSON.stringify(accounts) : "[]");
}

// this component gets rendered by App after the form is submitted
function Notification(props) {
    const urlPrefix = `https://explorer.${config.networkId}.near.org/accounts`
    if (props.method === "call")
        return (
            <aside>
                <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
                    {window.accountId}
                </a>
                {' '/* React trims whitespace around tags; insert literal space character when needed */}
                called method: '{props.data}' in contract:
                {' '}
                <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
                    {window.contract.contractId}
                </a>
                <footer>
                    <div>✔ Succeeded</div>
                    <div>Just now</div>
                </footer>
            </aside>
        )
    else if (props.method === "complete")
        return (
            <aside>
                Request: '{props.data}' complete! Please check the contract:
                {' '}
                <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
                    {window.contract.contractId}
                </a>
                <footer>
                    <div>✔ Succeeded</div>
                    <div>Just now</div>
                </footer>
            </aside>
        )
    else if (props.method === "text")
        return (
            <aside>
                {props.data}
                <footer>
                    <div>✔ Succeeded</div>
                    <div>Just now</div>
                </footer>
            </aside>
        )
    else return (
            <aside/>
        )
}

function AccountTrim(account_id) {
    if (account_id.length > 14 + 14 + 1)
        return account_id.slice(0, 14) + '…' + account_id.slice(-14);
    else
        return account_id;
}

'''
'''--- src/app-settings.js ---
function getAppSettings() {
    return {
        urlMainnet: "https://multisender.nearspace.info/",
        urlTestnet: "https://testnet.multisender.nearspace.info/",
        appNme: "Multisender",
        appDescription: "Multisender sends tokens to hundreds of NEAR addresses out in 1 single transaction.",
        github: "https://github.com/zavodil/near-multisender"
    };
}

module.exports = getAppSettings
'''
'''--- src/app.css ---
.accounts-textarea textarea#accounts, .accounts-placeholder {
    padding: 5px;
    font-family: 'HelveticaNeue-Light', 'Helvetica Neue Light', 'Helvetica Neue', Helvetica, Arial, 'Lucida Grande', sans-serif;
    font-size: 0.8em;
}

textarea#accounts {
    min-height: 100px;
    font-size: 0.9em;
    width: 100%;
    resize: vertical;
    background-color: transparent;
    color: black;
}

.accounts-placeholder {
    position: absolute;
    z-index: -1;
    top: 0;
    left: 0;
    color: var(--gray);
}

.accounts-textarea {
    position: relative;
    display: block;
    width: 100%;
}

.textarea-description {
    display: flex
}

.textarea-description .upload-csv {
    align-self: flex-end;
    padding-bottom: 0.3em;
}

li.processed div{
    text-decoration: line-through;
}

.textarea-description .caption {
    flex: 1;
}

.upload-csv-button {
    background-color: var(--gray);
    font-size: 0.5em;
}

.react-file-reader-input {
    display: contents;
}

ul.accounts div.amount {
    float: right;
}

ul.accounts {
    list-style: none;
    padding-left: 0;
    margin-bottom: 0;
}

ul.accounts li {
    padding-bottom: 0;
}

ul.accounts li.total {
    border-top: 1px solid #000;
    font-weight: bold;
}

ul.accounts div {
    display: inline-block;
    font-size: 0.8em;
    vertical-align: top;
}

.action-buttons button {
    margin-bottom: 10px;
}

.warning-text{
    display: block; color: var(--gray); font-size: 0.6em; margin-bottom: 0.5em;
}
'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME;

function getConfig(env) {
    switch (env) {

        case 'production':
        case 'mainnet':
            return {
                networkId: 'mainnet',
                nodeUrl: 'https://rpc.mainnet.near.org',
                contractName: CONTRACT_NAME || "multisender.app.near",
                walletUrl: 'https://wallet.near.org',
                helperUrl: 'https://helper.mainnet.near.org',
                explorerUrl: 'https://explorer.mainnet.near.org',
            }
        case 'development':
        case 'testnet':
            return {
                networkId: 'testnet',
                nodeUrl: 'https://rpc.testnet.near.org',
                contractName: CONTRACT_NAME || "dev-1609348608630-8665489",
                walletUrl: 'https://wallet.testnet.near.org',
                helperUrl: 'https://helper.testnet.near.org',
                explorerUrl: 'https://explorer.testnet.near.org',
            }
        case 'betanet':
            return {
                networkId: 'betanet',
                nodeUrl: 'https://rpc.betanet.near.org',
                contractName: CONTRACT_NAME,
                walletUrl: 'https://wallet.betanet.near.org',
                helperUrl: 'https://helper.betanet.near.org',
                explorerUrl: 'https://explorer.betanet.near.org',
            }
        case 'local':
            return {
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: 'http://localhost:4000/wallet',
                contractName: CONTRACT_NAME,
            }
        case 'test':
        case 'ci':
            return {
                networkId: 'shared-test',
                nodeUrl: 'https://rpc.ci-testnet.near.org',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            }
        case 'ci-betanet':
            return {
                networkId: 'shared-test-staging',
                nodeUrl: 'https://rpc.ci-betanet.near.org',
                contractName: CONTRACT_NAME,
                masterAccount: 'test.near',
            }
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
    }
}

module.exports = getConfig

'''
'''--- src/global.css ---
* {
    box-sizing: border-box;
}

html {
    --bg: #efefef;
    --fg: #1e1e1e;
    --gray: #555;
    --light-gray: #ccc;
    --shadow: #e6e6e6;
    --success: rgb(90, 206, 132);
    --secondary: #0072CE;
    --secondary-bg: #0072CE;
    --header-font-color: #efefef;

    --header-primary-color: #FFF;
    --header-secondary-color: #555;
    --header-nav-height: 50px;
    --footer-height: 34px;
    --nav-background-color: rgb(19, 47, 76);

    background-color: var(--bg);
    color: var(--fg);
    font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
    font-size: calc(0.9em + 0.5vw);
    line-height: 1.3;
}

body {
    margin: 0;
    padding: 0;
    font-family: BwSeidoRound, -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
}

.background-img {
    position: absolute;
    right: 0;
    z-index: -1;
    background-image: url(/assets/explorer-bg.svg);
    width: 504px;
    height: 324px;
}

@font-face {
    font-family: BwSeidoRound;
    src: url(./fonts/389947_6_0.eot);
    src: url(./fonts/389947_6_0.eot?#iefix) format("embedded-opentype"), url(./fonts/389947_6_0.woff2) format("woff2"), url(./fonts/389947_6_0.woff) format("woff"), url(./fonts/389947_6_0.ttf) format("truetype");
    font-weight: 500;
    font-style: normal
}

main {
    margin: 0 auto;
    max-width: 25em;
    padding-top: var(--header-nav-height);
    padding-bottom: var(--footer-height);
}

h1 {
    background-image: url(assets/logo.svg);
    background-position: center 1em;
    background-repeat: no-repeat;
    background-size: auto 1.5em;
    margin-top: 0;
    padding: 3.5em 0 0.5em;
    text-align: center;
}

a,
.link {
    text-decoration: none;
}

a:hover,
a:focus,
.link:hover,
.link:focus {
    text-decoration: underline;
}

a:active,
.link:active {
    color: var(--secondary);
}

button, input {
    font: inherit;
    outline: none;
}

button {
    background-color: var(--secondary);
    border-radius: 5px;
    border: none;
    color: #efefef;
    cursor: pointer;
    padding: 0.3em 0.75em;
    transition: transform 30ms;
}

button:hover, button:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}

button:active {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}

button.link {
    background: none;
    border: none;
    box-shadow: none;
    display: inline;
}

[disabled] button, button[disabled] {
    box-shadow: none;
    background-color: var(--light-gray);
    color: gray;
    cursor: not-allowed;
    transform: none;
}

[disabled] button {
    text-indent: -900em;
    width: 2em;
    position: relative;
}

[disabled] button:after {
    content: " ";
    display: block;
    width: 0.8em;
    height: 0.8em;
    border-radius: 50%;
    border: 2px solid var(--fg) transparent var(--fg) transparent;
    animation: loader 1.2s linear infinite;
    position: absolute;
    top: 0.45em;
    right: 0.5em;
}

@keyframes loader {
    0% {
        transform: rotate(0deg)
    }
    100% {
        transform: rotate(360deg)
    }
}

fieldset {
    border: none;
    padding: 0.1em 0 0 0;
}

input {
    background-color: var(--shadow);
    border: none;
    border-radius: 5px 0 0 5px;
    color: inherit;
    padding: 0.25em 1em;
}

input::selection {
    background-color: var(--secondary);
    color: #efefef;
}

input:focus {
    box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
    color: var(--gray);
}

li {
    padding-bottom: 1em;
}

aside {
    animation: notify ease-in-out 10s;
    background-color: var(--shadow);
    border-radius: 5px;
    bottom: 0;
    font-size: 0.8em;
    margin: 1em;
    padding: 1em;
    position: fixed;
    transform: translateY(10em);
    right: 0;
}

aside footer {
    display: flex;
    font-size: 0.9em;
    justify-content: space-between;
    margin-top: 0.5em;
}

aside footer *:first-child {
    color: var(--success);
}

aside footer *:last-child {
    color: var(--gray);
}

@keyframes notify {
    0% {
        transform: translateY(10em)
    }
    5% {
        transform: translateY(0)
    }
    95% {
        transform: translateY(0)
    }
    100% {
        transform: translateY(10em)
    }
}

@media (prefers-color-scheme: dark) {
    html {
        --bg: #1e1e1e;
        --fg: #efefef;
        --gray: #aaa;
        --shadow: #2a2a2a;
        --light-gray: #444;
    }

    h1 {
        background-image: url(assets/logo-white.svg);
    }

    input:focus {
        box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
    }
}

.verify-button {
    display: block;
    margin-bottom: 0.5em;
}

.send-button, .deposit-button, .deposit-send-button {
    border-radius: 5px;
    margin-right: 0.5em;
}

.action-buttons {
    padding-top: 0.2em;
    font-size: 0.8em
}

.action-buttons-last{
    margin-bottom: 1em;
}

.hidden {
    display: none;
}

/* FOOTER */

.footer {
    width: 100%;
    background-color: var(--light-gray);
    color: var(--fg);
    height: 35px;
    position: fixed;
    left: 0;
    bottom: 0;
    display: flex;
}

.footer a {
    color: var(--fg)
}

.footer div {
    display: inline-block;
    font-size: 0.8em;
    padding-bottom: 0.3em;
}

.footer .build-on-near {
    cursor: pointer;
    padding: 0.2em 0.3em 0.1em 0.3em;
    margin: 0 0.3em 0 0.75em;
    background-color: var(--nav-background-color);
    height: var(--footer-height);
}

.footer .build-on-near a {
    color: white
}

.footer .github {
    padding-left: 5px;
}

.footer .github {
    display: flex;
    max-width: 50%;
    width: 50%;
}

.footer .promo, .footer .github {
    margin-top: 5px;
}

.footer .promo {
    text-align: right;
    flex: 1;
}

.footer .github .brand {
    padding-top: 3px;
}

/* HEADER */

.nav-container {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    z-index: 1;
}

.nav-header {
    color: white;
    position: relative;
    font-size: 0.8em;
    margin-bottom: 20px;
    padding-left: 15px;
    box-shadow: rgba(0, 0, 0, 0.17) 0px 5px 9px -1px;
    background-color: var(--nav-background-color);
    height: var(--header-nav-height);
    -webkit-box-align: center;
    align-items: center;
    display: flex;
    cursor: default;
}

.nav-header .user-name {
    white-space: nowrap;
    margin-left: 10px;
}

.nav-header .user-balance {
    margin-left: 10px;
    white-space: nowrap;
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    background-color: black;
    padding: 2px 10px;
    border-radius: 40px;
    font-size: 14px;
    color: rgb(143, 214, 189);
}

.nav-header .nav-item {
    display: flex;
}

.nav-header .near-logo {
    width: 100px;
    height: 50px;
    fill: var(--header-primary-color);
}

.nav-header .logo-container {
    border-right: 2px solid rgb(93, 95, 96);
    color: var(--header-primary-color);
    align-items: center;
    justify-content: center;
    display: flex;
}

.nav-header .logo-container .app-name {
    padding-right: 10px;
    color: var(--header-primary-color);
}

.nav-header .align-right {
    display: flex;
    margin-left: auto;
    order: 2;
    align-items: center;
    justify-content: center;
}

.footer .promo {
    padding-right: 5px;
    float: right;
    vertical-align: top;
    height: 100%;
}

/* NAV MENU */

.nav-menu .network-icon {
    background-image: url(/assets/icon-network-right.svg);
    border-radius: 0;
    width: 15px;
    height: 15px;
}

.nav-menu .network-title {
    text-transform: capitalize;
    color: var(--header-secondary-color);
}

.menu-container {
    position: relative;
}

.menu {
    background: #ffffff;
    border-radius: 8px;
    position: absolute;
    top: 30px;
    right: 0;
    width: 95px;
    box-shadow: 0 1px 8px rgba(0, 0, 0, 0.3);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-20px);
    transition: opacity 0.4s ease, transform 0.4s ease, visibility 0.4s;
}

.menu.active {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
}

.menu ul {
    list-style: none;
    padding: 0;
    margin: 0;
}

.menu li {
    padding-left: 10px;
    border-bottom: 1px solid #dddddd;
    padding-bottom: 0;
}

.menu li a {
    text-decoration: none;
    color: #333333;
    padding: 5px;
    display: block;
    font-size: 0.6em;
}

.menu-trigger {
    background: #ffffff;
    border-radius: 90px;
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 4px 6px;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.3);
    border: none;
    vertical-align: middle;
    transition: box-shadow 0.4s ease;
}

.menu-trigger:hover {
    box-shadow: 0 1px 8px rgba(0, 0, 0, 0.3);
}

.menu-trigger span {
    font-weight: 700;
    vertical-align: middle;
    font-size: 14px;
    margin: 0 10px;
}

.menu-trigger img {
    border-radius: 90px;
}

/* MOBILE */

.content-desktop {
    display: block;
}

.content-mobile {
    display: none;
}

@media screen and (max-width: 768px) {
    .content-desktop {
        display: none !important;
    }

    .content-mobile {
        display: block !important;
    }
}
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <link rel="apple-touch-icon" sizes="180x180" href="./assets/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="./assets/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="./assets/favicon-16x16.png">
    <link rel="manifest" href="./assets/site.webmanifest">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    <title>NEAR Multisender</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: [],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/useDetectOutsideClick.js ---
import { useState, useEffect } from "react";

/**
 * Hook for handling closing when clicking outside of an element
 * @param {React.node} el
 * @param {boolean} initialState
 */
export const useDetectOutsideClick = (el, initialState) => {
    const [isActive, setIsActive] = useState(initialState);

    useEffect(() => {
        const onClick = e => {
            // If the active element exists and is clicked outside of
            if (el.current !== null && !el.current.contains(e.target)) {
                setIsActive(!isActive);
            }
        };

        // If the item is active (ie open) then listen for clicks outside
        if (isActive) {
            window.addEventListener("click", onClick);
        }

        return () => {
            window.removeEventListener("click", onClick);
        };
    }, [isActive, el]);

    return [isActive, setIsActive];
};
'''
'''--- src/utils.js ---
import {connect, Contract, keyStores, WalletConnection} from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// Initialize contract & set global variables
export async function initContract() {
    // Initialize connection to the NEAR testnet
    const near = await connect(Object.assign({deps: {keyStore: new keyStores.BrowserLocalStorageKeyStore()}}, nearConfig))

    // Initializing Wallet based Account. It can work with NEAR testnet wallet that
    // is hosted at https://wallet.testnet.near.org
    window.walletConnection = new WalletConnection(near)

    // Getting the Account ID. If still unauthorized, it's just empty string
    window.accountId = window.walletConnection.getAccountId()

    // Initializing our contract APIs by contract name and configuration
    window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
        // View methods are read only. They don't modify the state, but usually return some value.
        viewMethods: ['get_deposit'],
        // Change methods can modify the state. But you don't receive the returned value when called.
        changeMethods: ['deposit', 'multisend_from_balance', 'multisend_attached_tokens', 'multisend_from_balance_unsafe'],
    })
}

export function logout() {
    window.walletConnection.signOut()
    // reload page
    window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
    // Allow the current app to make calls to the specified contract on the
    // user's behalf.
    // This works by creating a new access key for the user's account and storing
    // the private key in localStorage.
    window.walletConnection.requestSignIn(nearConfig.contractName, "NEAR Multisender")
}

'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''