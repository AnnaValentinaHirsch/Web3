*GitHub Repository "near/docs-generator"*

'''--- README.md ---
# docs-generator

This is:
- A GitHub Action that should run on the docs repo (`near/docs`)
- A GitHub app (`./docs-bot`) that should be installed on the docs repo (`near/docs`)

### GitHub Action

This is a containerized action (see `Dockerfile`).

Inputs:
- `source_repo`: Source repo to generate docs for (`near/near-api-js` and others. Or your fork - ex: `maxhr/near--near-api-js`)
- `release_version`: The git tag to check out, this should match the release version of the package (`v1.0.0`)
- `builder_name`: Name of builder file in `./builder`. Today: `near-api-js`. Soon also: `near-cli | near-sdk-js`
- `github_token`: If you run `dev.sh` it's your Personal Access Token with repos permissions. When running in GitHub workflow - GH provides it automatically as an env var.

`entrypoint.sh`:
- Pulls source and docs
- Builds doc - in `/builder` dir there are build files that match the `builder_name` input (ex: `builder/near-api-js.sh`)
- Creates a PR in the docs repo (the repo that this action runs on)

### GitHub App (Docs Bot)

The app (`./docs-bot`), is published on Vercel (https://docs-bot.vercel.app).

It's purpose is to trigger `repository_dispatch` and create PRs in the docs repo.

It should be installed on the docs repo and its `https://docs-bot.vercel.app/api/on-release` endpoint can be called
from source-code repos workflow when a new version get released. This is to be able to trigger docs build
automatically. You can also invoke the GitHub action (described above) manually with `workflow_dispatch` event.

See the workflows in the docs repo to see how it's configured for manual and automatic listeners.

See the workflows in `near-api-js` repo to see how it's being triggered automatically.

## Contributing

You need a GitHub access token with repos permissions to run `./dev.sh`.
Make sure you have it in your `~/.github-token`.

`./dev.sh` will run docker container with the needed params.

- `GITHUB_REPOSITORY_OWNER` - should be `near` or you if you forked
- `GITHUB_REPOSITORY` - `near/docs` or your fork
- `SOURCE_REPO` - for example `near/near-api-js`
- `BUILDER_NAME` - at the moment `near-api-js` others soon. This will run `builder/near-api-js.sj`
- `SOURCE_TAG` - the published package version to checkout (ex: `v1.0.0`)
- `GITHUB_TOKEN` - access token. GitHub provides it in Action Workflow. For local dev you need a Personal Access Token.

`./dev-attach.sh` will run attach to the container, without running the entrypoint file.
You can use it to run `entrypoint.sh` manually for debugging.
'''
'''--- action.yml ---
name: 'Generate docs'
description: 'Generate docs for NEAR'
branding:
  icon: book-open
  color: green
inputs:
  source_repo:
    description: 'Source repo to generate docs for'
    required: true
  release_version:
    description: 'Release version'
    required: true
  builder_name:
    description: 'Builder script file'
    required: true
  github_token:
    description: 'GITHUB_TOKEN'
    required: false
    default: '${{ github.token }}'
outputs:
  new_branch_name:
    description: 'Branch that was created after build and push'

runs:
  using: 'docker'
  image: 'Dockerfile'
  env:
    SOURCE_REPO: ${{ inputs.source_repo }}
    BUILDER_NAME: ${{ inputs.builder_name }}
    SOURCE_TAG: ${{ inputs.release_version }}
    GITHUB_TOKEN: ${{ inputs.github_token }}

'''
'''--- builder/.eslintrc.yml ---
env:
  es6: true
  node: true
extends:
  - eslint:recommended
parserOptions:
  ecmaVersion: 2022
  sourceType: module
rules:
  indent:
    - warn
    - 2
    - { "SwitchCase": 1 }
  linebreak-style:
    - warn
    - unix
  quotes:
    - warn
    - single
  semi:
    - warn
    - always
  no-console: off

'''
'''--- builder/babel.config.js ---
module.exports = {
  presets: [require.resolve('@docusaurus/core/lib/babel/preset')],
};

'''
'''--- builder/docusaurus.config.js ---
// @ts-check
// Note: type annotations allow type checking and IDEs autocompletion

/** @type {import('@docusaurus/types').Config} */
const config = {
  plugins: [
    [
      'docusaurus-plugin-typedoc',
      // Plugin / TypeDoc options
      {
        entryPoints: process.env.DOCS_ENTRY_POINT.split(','),
        tsconfig: process.env.DOCS_TS_CONFIG,
        name: process.env.DOCS_NAME,
        includeVersion: true,
        entryPointStrategy: 'expand',
        excludeNotDocumented: false,
        out: '.',
        basePath: process.env.DOCS_BASE_PATH,
        readme: process.env.DOCS_README,
        hideGenerator: false,
        commentStyle: 'jsdoc',
        entryDocument: 'index.md',
        hideMembersSymbol: true,
      },
    ],
  ],
  title: 'Generated',
  url: 'https://docs.near.org/',
  baseUrl: '/',
  onBrokenLinks: 'warn',
  onBrokenMarkdownLinks: 'warn',
  favicon: 'img/favicon.ico',
  i18n: {
    defaultLocale: 'en',
    locales: ['en'],
  },
};

module.exports = config;

'''
'''--- builder/near-api-js.sh ---
#!/bin/bash

set -ex

export DOCS_ENTRY_POINT="${SOURCE_DIR}/packages/near-api-js/src"
export DOCS_TS_CONFIG="${SOURCE_DIR}/packages/near-api-js/tsconfig.json"
export DOCS_BASE_PATH="${SOURCE_DIR}/packages/near-api-js/src"
export DOCS_README="${SOURCE_DIR}/docs/README_TYPEDOC.md"
export DOCS_NAME="NEAR JavaScript API"

mkdir "${SOURCE_DIR}/packages/near-api-js/docs"

cd /app/builder
mkdir docs
yarn build

'''
'''--- builder/near-sdk-js.sh ---
#!/bin/bash

set -ex

export DOCS_ENTRY_POINT="${SOURCE_DIR}/src"
export DOCS_TS_CONFIG="${SOURCE_DIR}/tsconfig.json"
export DOCS_BASE_PATH="${SOURCE_DIR}/src"
export DOCS_README="${SOURCE_DIR}/README.md"
export DOCS_NAME="NEAR JavaScript SDK"

mkdir "${SOURCE_DIR}/docs"

cd /app/builder
mkdir docs
yarn build

'''
'''--- builder/package.json ---
{
  "name": "near-docs-generator",
  "version": "0.0.1",
  "scripts": {
    "build": "docusaurus build"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@docusaurus/core": "2.0.1",
    "@docusaurus/preset-classic": "2.0.1",
    "@easyops-cn/docusaurus-search-local": "^0.31.0",
    "docusaurus-plugin-typedoc": "0.17.5",
    "@mdx-js/react": "^1.6.22",
    "prism-react-renderer": "^1.3.5",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "typedoc": "0.23.11",
    "typedoc-plugin-markdown": "3.13.4"
  },
  "devDependencies": {
    "@docusaurus/module-type-aliases": "2.0.1",
    "@tsconfig/docusaurus": "^1.0.5",
    "eslint": "8.22.0",
    "eslint-plugin-import": "^2.26.0",
    "eslint-plugin-jsx-a11y": "^6.6.1",
    "typescript": "^4.8.2"
  }
}

'''
'''--- dev-attach.sh ---
#!/bin/sh -l

docker build -t docs-generator . && docker run -it --entrypoint /bin/bash \
  -e GITHUB_REPOSITORY_OWNER="maxhr" \
  -e GITHUB_REPOSITORY="maxhr/near--docs" \
  -e SOURCE_REPO="maxhr/near--near-api-js" \
  -e BUILDER_NAME="near-api-js" \
  -e SOURCE_TAG="v2.0.0" \
  -e GITHUB_TOKEN="$(cat ~/.github-token)" \
  docs-generator
'''
'''--- dev.sh ---
#!/bin/sh -l

#docker build -t docs-generator . && docker run \
#  -e GITHUB_REPOSITORY_OWNER="maxhr" \
#  -e GITHUB_REPOSITORY="maxhr/near--docs" \
#  -e SOURCE_REPO="maxhr/near--near-api-js" \
#  -e BUILDER_NAME="near-api-js" \
#  -e SOURCE_TAG="v2.0.0" \
#  -e GITHUB_TOKEN="$(cat ~/.github-token)" \
#  docs-generator

docker build -t docs-generator . && docker run \
  -e GITHUB_REPOSITORY_OWNER="maxhr" \
  -e GITHUB_REPOSITORY="maxhr/near--docs" \
  -e SOURCE_REPO="near/near-api-js" \
  -e BUILDER_NAME="near-api-js" \
  -e SOURCE_TAG="near-api-js@1.1.0" \
  -e GITHUB_TOKEN="$(cat ~/.github-token)" \
  docs-generator

#docker build -t docs-generator . && docker run \
#  -e GITHUB_REPOSITORY_OWNER="maxhr" \
#  -e GITHUB_REPOSITORY="maxhr/near--docs" \
#  -e SOURCE_REPO="near/near-sdk-js" \
#  -e BUILDER_NAME="near-sdk-js" \
#  -e SOURCE_TAG="v0.5.0" \
#  -e GITHUB_TOKEN="$(cat ~/.github-token)" \
#  docs-generator

'''
'''--- docker-compose.yml ---
version: "3.4"

services:
  docs-gen:
    container_name: docs-gen
    build:
      dockerfile: Dockerfile
      context: .
    working_dir: /app
    stdin_open: true
    tty: true

'''
'''--- docs-bot/README.md ---
# Docs Bot

See [README](../README.md) for Docs Generator.
'''
'''--- docs-bot/api/on-docs-build.js ---
const { createProbot } = require("probot");

module.exports = async function handler(req, res) {
  const probot = createProbot()
  if (req.headers["bot-auth"] !== `${process.env.DOCS_BOT_SECRET}`) {
    res.status(401);
    res.send('401');
    res.end();
    return;
  }
  if (
    !req.body
    || !req.body["event_type"]
    || req.body["event_type"] !== 'docs-build-finished'
    || !req.body["client_payload"]["pr_head_branch"]
  ) {
    res.status(400);
    res.send('bad params');
    res.end();
    return;
  } else {
    const { pr_head_branch } = req.body["client_payload"];
    const owner = process.env.APP_REPO_OWNER || 'near';
    const repo = process.env.APP_REPO_NAME || 'docs';
    // Use app level scope to find our installation id
    console.log(">>>>>>> req.body", req.body);
    try {
      let app_client = await probot.auth();
      let { data } = await app_client.apps.getRepoInstallation({
        owner,
        repo,
      });
      console.log(">>>>>>> data", data)

      let client = await probot.auth(data.id);

      const prResponse = await client.pulls.create({
        owner,
        repo,
        head: pr_head_branch,
        base: 'master',
        title: `Generated ${pr_head_branch}`
      });
      console.log(">>>>>>> prResponse", prResponse);
    } catch (e) {
      console.error(e);
      res.status(500);
      res.send('error');
      res.end();
      return;
    }
    res.status(200);
    res.send('ok');
    res.end();
  }
};

'''
'''--- docs-bot/api/on-release.js ---
const { createProbot } = require("probot");

module.exports = async function handler(req, res) {
  const probot = createProbot();
  if (!req.headers || req.headers["bot-auth"] !== `${process.env.DOCS_BOT_SECRET}`) {
    res.status(401);
    res.send('401');
    res.end();
    return;
  }
  if (
    !req.body
    || !req.body["event_type"]
    || !req.body["client_payload"]["source_repo"]
    || !req.body["client_payload"]["builder_name"]
    || !req.body["client_payload"]["release_version"]
  ) {
    res.status(400);
    res.send('bad params');
    res.end();
    return;
  } else {
    const docsOwner = process.env.APP_REPO_OWNER || 'near';
    const docsRepo = process.env.APP_REPO_NAME || 'docs';
    const [owner, repo] = req.body["client_payload"]["source_repo"].split('/');
    // Use app level scope to find our installation id
    console.log(">>>>>>> req.body", req.body);
    let app_client = await probot.auth();
    let { data } = await app_client.apps.getRepoInstallation({
      owner: docsOwner,
      repo: docsRepo,
    });
    console.log(">>>>>>> data", data)
    // Use installation scope to fire the repository_dispatch
    console.log(">>>>>>> owner, repo, data.id", owner, repo, data.id);
    let client = await probot.auth(data.id);
    try {
      const dispatchResponse = await client.repos.createDispatchEvent({
        owner: docsOwner,
        repo: docsRepo,
        event_type: req.body["event_type"],
        client_payload: req.body["client_payload"],
      });
      console.log(">>>>>>> dispatchResponse", dispatchResponse);
    } catch (e) {
      console.error(e);
      res.status(500);
      res.send('error');
      res.end();
      return;
    }
    res.status(200);
    res.send('ok');
    res.end();
    return;
  }
};

'''
'''--- docs-bot/app.yml ---
# This is a GitHub App Manifest. These settings will be used by default when
# initially configuring your GitHub App.
#
# NOTE: changing this file will not update your GitHub App settings.
# You must visit github.com/settings/apps/your-app-name to edit them.
#
# Read more about configuring your GitHub App:
# https://probot.github.io/docs/development/#configuring-a-github-app
#
# Read more about GitHub App Manifests:
# https://developer.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/

# The list of events the GitHub App subscribes to.
# Uncomment the event names below to enable them.
default_events:
  - pull_request

# The set of permissions needed by the GitHub App. The format of the object uses
# the permission name for the key (for example, issues) and the access type for
# the value (for example, write).
# Valid values are `read`, `write`, and `none`
default_permissions:
  # Repository contents, commits, branches, downloads, releases, and merges.
  # https://developer.github.com/v3/apps/permissions/#permission-on-contents
  contents: read

  # Search repositories, list collaborators, and access repository metadata.
  # https://developer.github.com/v3/apps/permissions/#metadata-permissions
  metadata: read

  # Pull requests and related comments, assignees, labels, milestones, and merges.
  # https://developer.github.com/v3/apps/permissions/#permission-on-pull-requests
  pull_requests: write

'''
'''--- docs-bot/package.json ---
{
  "name": "docs-bot",
  "version": "0.0.1",
  "scripts": {
    "start": "vercel start"
  },
  "dependencies": {
    "express": "^4.18.1",
    "probot": "^10.17.2"
  },
  "devDependencies": {
    "@types/node": "^17.0.5",
    "smee-client": "^1.2.3",
    "typescript": "^4.8.2"
  }
}

'''
'''--- entrypoint.sh ---
#!/bin/bash

set -ex

. /app/shell-scripts/funcs.sh

git config --global user.email "docs-generator@near"
git config --global user.name "NEAR Docs Generator"
git config --global pull.rebase false

export SOURCE_REPO_SAFE="${SOURCE_REPO/\//"-"}"
export DOCS_REPO_SAFE="${GITHUB_REPOSITORY/\//"-"}"

export SOURCE_REPO_URL="https://${GITHUB_REPOSITORY_OWNER}:${GITHUB_TOKEN}@github.com/${SOURCE_REPO}.git"
export SOURCE_DIR="/app/builder/source-${SOURCE_REPO_SAFE}"
export DOCS_REPO_URL="https://${GITHUB_REPOSITORY_OWNER}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
export DOCS_DIR="/app/builder/docs-${DOCS_REPO_SAFE}"
export DOCS_TARGET_DIR="${DOCS_DIR}/__generated/${BUILDER_NAME}"
export GENERATED_DOCS_DIR=/app/builder/docs
export DOCS_NEW_BRANCH="docs-generator/${SOURCE_REPO_SAFE}/${SOURCE_TAG}/$(date +"%y%m%d_%H%M%S")"
export DOCS_BASE_BRANCH="master"

export GH_HTTP_AUTH="Authorization: Bearer ${GITHUB_TOKEN}"

pull
build_docs
push
set_action_output

'''
'''--- shell-scripts/funcs.sh ---
log () {
  echo ">>>>> ${1}"
}

pull() {
  log "Pulling repos"

  git clone "${SOURCE_REPO_URL}" "${SOURCE_DIR}" --verbose
  git clone "${DOCS_REPO_URL}" "${DOCS_DIR}" --verbose

  cd "${SOURCE_DIR}" || (log "No source dir" && exit 201)
  git checkout "tags/${SOURCE_TAG}" -b "${SOURCE_TAG}"
  log "Running packages install for source"
  if [ "${BUILDER_NAME}" == "near-api-js" ]; then
    npm i -g pnpm
    pnpm install
  else
    yarn install
  fi

  log "Running yarn install for docs website"
  cd "${DOCS_DIR}/website" || (log "No website dir" && exit 208)
  yarn install

  cd "${DOCS_DIR}" || (log "No docs dir" && exit 210)

  log "Done pull"
}

build_docs() {
  log "Running docs builder script"
  eval "/app/builder/${BUILDER_NAME}.sh"

  log "(Over)write files to target docs dir"
  rm -rf -v "${DOCS_TARGET_DIR}"
  mkdir -p -v "${DOCS_TARGET_DIR}"
  cd "${GENERATED_DOCS_DIR}" || (log "No generated docs dir" && exit 213)
  mv -v ./* "${DOCS_TARGET_DIR}"

  patch_versions

  log "Done build"
}

patch_versions () {
  log "Creating docusaurus version"
  rm -rf "${DOCS_DIR}/website/${BUILDER_NAME}_versioned_docs/version-${SOURCE_TAG}"
  rm -rf "${DOCS_DIR}/website/${BUILDER_NAME}_versioned_sidebars/version-${SOURCE_TAG}"

  log "Patch versions file"
  versions_file="${DOCS_DIR}/website/near-api-js_versions.json"
  node -e "
    let versions = JSON.parse(process.argv[1]);
    versions = versions.filter(v => v !== '${SOURCE_TAG}');
    console.log(JSON.stringify(versions,null,2));
  " "$(cat "${versions_file}")" >| "${versions_file}"
  cd "${DOCS_DIR}/website" || (log "No website dir" && exit 205)
  yarn docusaurus docs:version:"${BUILDER_NAME}" "${SOURCE_TAG}"
  rm -rf "${DOCS_TARGET_DIR}"
}

push() {
  log "Pushing docs"

  cd "${DOCS_DIR}" || (log "No docs dir" && exit 202)

  git status -v -v
  git checkout -b "${DOCS_NEW_BRANCH}"
  git add . --verbose
  git commit -m "${SOURCE_REPO_SAFE} docs"
  git push -u origin "${DOCS_NEW_BRANCH}" --verbose
  git status -v -v

  log "Done pushing"
}

github_pr() {
  log "Making PR"

  HTTP_RESPONSE=$(curl \
    --request POST "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" \
    --header "Accept: application/vnd.github+json" \
    --header "${GH_HTTP_AUTH}" \
    --header "Content-Type: application/json" \
    --data-raw "{
        \"title\":\"Generated: ${SOURCE_REPO} ${SOURCE_TAG}\",
        \"body\":\"Generated with Docs Generator\",
        \"head\":\"${DOCS_NEW_BRANCH}\",
        \"base\":\"${DOCS_BASE_BRANCH}\"
      }")

  export PR_NUMBER=$(echo $HTTP_RESPONSE | jq ".number")

  if [ "${PR_NUMBER}" == "null" ]; then
    log "PR number is null"
    exit 203
  fi

  log "Labeling PR"
  curl --request POST "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${PR_NUMBER}/labels" \
    --header "Accept: application/vnd.github.v3+json" \
    --header "${GH_HTTP_AUTH}" \
    --header "Content-Type: application/json" \
    --data-raw '{
        "labels": ["docs-generator"]
    }'

  log "Finished PR"
}

set_action_output() {
  log "Setting action output"
  echo "::set-output name=new_branch_name::${DOCS_NEW_BRANCH}"
}
'''
'''--- test.sh ---
HTTP_RESPONSE=$(curl \
  -X POST \
  -H "Accept: application/vnd.github+json" \
  -H "Authorization: Bearer ${GITHUB_TOKEN}" \
  "https://api.github.com/repos/${GITHUB_REPOSITORY}/pulls" \
  -d "'{\"title\":\"Generated: ${SOURCE_REPO} ${SOURCE_TAG}\",\"body\":\"Generated with Docs Generator\",\"head\":\"${DOCS_NEW_BRANCH}\",\"${DOCS_BASE_BRANCH}\":\"master\"}'")

echo $HTTP_RESPONSE | jq "."

'''