*GitHub Repository "0xherberx/help-your-decentralized-neighbor"*

'''--- frontend/App.js ---
import 'regenerator-runtime/runtime';
import React, { isValidElement } from 'react';
//import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';
import './sass/App.scss';
import './assets/global.css';
import Navbar from 'react-bootstrap/Navbar';
import Container from 'react-bootstrap/Container';
import Nav from 'react-bootstrap/Nav';
import Button from 'react-bootstrap/Button';
import Modal from "react-bootstrap/Modal";
import SignInPrompt from './components/SignInPrompt';
import SignOutButton from './components/SignOutButton';
import { utils } from 'near-api-js';

export default function App({ isSignedIn, contractId, wallet }) {
  const [totalDonations, setTotalDonations] = React.useState(() => 0);
  const [isRegisteredForLottery, setIsRegisteredForLottery] = React.useState(() => false);
  const [showJoinedLotteryAlert, setShowJoinedLotteryAlert] = React.useState(() => false);
  const [formData, setFormData] = React.useState(() => ({
    donation1: 5,
    donation2: 10,
    donation3: 20,
    donation4: 0,
    selected: ""
  }));

  function updateTotalDonation() {
    async function get_total_global_amount_donated() {      
      const total_global_amount_donated = await wallet.viewMethod({method: 'get_total_global_amount_donated', contractId});
      // converts yoctoNEAR (10^-24) amount into NEAR
      const amountInNEAR = utils.format.formatNearAmount(total_global_amount_donated);
      console.log(amountInNEAR);
      setTotalDonations(amountInNEAR);
    }
    
    get_total_global_amount_donated();
  }

  function isAccountRegisteredForLottery() {
    async function is_account_registered_for_lottery() {      
      const is_registered = await wallet.viewMethod({
        method: 'is_account_registered_for_lottery',
        args: { account_to_check: wallet.accountId },
        contractId
      });      
      setIsRegisteredForLottery(is_registered);
    }
    
    is_account_registered_for_lottery();
  }

  React.useEffect(() => {
    /*async function getGreeting() {
      const currentGreeting = await wallet.viewMethod({method: 'get_greeting', contractId});
      console.log(currentGreeting);
    }    
    getGreeting();*/
    if(isSignedIn) {
      updateTotalDonation();
      isAccountRegisteredForLottery();
    }    
  }, [])
  
  console.log('render App');
  console.log("isSignedIn: " + isSignedIn);

  function handleSubmit(event) {    
    event.preventDefault();
    const donationAmount = formData.selected != "" ? formData[formData.selected] : 0;
    console.log('Donated amount in NEAR: ' + donationAmount);
    // Convert to yocto - 1â“ƒ = 10^24yocto
    const amountInYocto = utils.format.parseNearAmount(donationAmount.toString());
    console.log('Donated amount in yocto NEAR: ' + amountInYocto);

    // Calling a payable method
    async function add_donation() {
      const response = await wallet.callMethod({
        method: "add_donation",
        args: { text_message: "test msg" },
        contractId,
        deposit: amountInYocto
      })      
      const responseData = await response.json();
      console.log("donated!" + responseData);  
      updateTotalDonation();
    }
    
    add_donation();
  }

  function selectDonationAmount(event) {
    const {name, value, type} = event.target;
    setFormData(oldFormData => ({
      ...oldFormData,
      [name]: value != "" ? parseFloat(value) : 0,
      selected: value != "" && value != "0" ? name : ""
    }))
  }
  
  function joinTheLottery(event) {
    async function join_the_lottery() {
      const response = await wallet.callMethod({
        method: "join_the_lottery",
        args: { account_to_register: wallet.accountId },
        contractId
      })      
      //const responseData = await response.json();
      console.log("joined lottery!");
    }
    
    join_the_lottery();
    setIsRegisteredForLottery(true);
    setShowJoinedLotteryAlert(true);
  }

  console.log(formData);

  return (
    <main>
      <div className="main-body">
        {
          isSignedIn
          ?
          <section className="donation-page">
            <div className="donation-page--header">
              <span className="donation-page--total">
                Total Donations: {Number(totalDonations).toFixed(2)} NEAR
              </span>
              <SignOutButton accountId={wallet.accountId} handleClick={() => wallet.signOut()} />
            </div>
            <h3 className="donation-page--desc">
                Every month, one lucky person will be picked out and will receive 99% of the total donations.<br/>
                Please this amount is to help people in need.<br/>
                Don't be greedy!<br/>
                Help your decentralized neighbor!
            </h3>
            <form className="donation-page--form" onSubmit={handleSubmit}>
              <div className="donation-page--inputs">
                <input
                  type="number"
                  placeholder="5"
                  className={`donation-page--amount no-spinner ${formData.selected === "donation1" ? "donation-selected" : ""}`}
                  name="donation1"
                  onClick={selectDonationAmount}
                  value={formData.donation1}
                  readOnly
                />
                <input
                  type="number"
                  placeholder="10"
                  className={`donation-page--amount no-spinner ${formData.selected === "donation2" ? "donation-selected" : ""}`}
                  name="donation2"
                  onClick={selectDonationAmount}
                  value={formData.donation2}
                  readOnly
                />
                <input
                  type="number"
                  placeholder="20"
                  className={`donation-page--amount no-spinner ${formData.selected === "donation3" ? "donation-selected" : ""}`}
                  name="donation3"
                  onClick={selectDonationAmount}
                  value={formData.donation3}
                  readOnly
                />
                <input
                  type="number"
                  placeholder="_"                  
                  className={`donation-page--amount ${formData.selected === "donation4" ? "donation-selected" : ""}`}
                  name="donation4"
                  onClick={selectDonationAmount}
                  onChange={selectDonationAmount}
                  value={formData.donation4==0 ? "" : formData.donation4}
                  step="0.1"
                  min="0"
                />
              </div>              
              <button
                disabled={!formData.selected} 
                className="donate-button"
              >
                Donate
              </button>
            </form>
            <h3 className="donation-page--or">Or</h3>
            <button
              disabled={isRegisteredForLottery}
              className="lottery-button"
              onClick={joinTheLottery}
            >
              {isRegisteredForLottery ? "Already joined the lottery" : "Join the lottery"}
            </button>
            <Modal show={showJoinedLotteryAlert} onHide={() => setShowJoinedLotteryAlert(false)}>
              <Modal.Header closeButton>
                <Modal.Title>Registered for the lottery</Modal.Title>
              </Modal.Header>
              <Modal.Body>Your account has been successfully registered for the lottery!</Modal.Body>
              <Modal.Footer>
              </Modal.Footer>
            </Modal>
          </section>
          :
          <SignInPrompt handleClick={() => wallet.signIn()}/>
        }    
      </div>        
    </main>    
  )
}
'''
'''--- frontend/App_bk.js ---
import 'regenerator-runtime/runtime';
import React from 'react';

import './assets/global.css';

import { EducationalText, SignInPrompt, SignOutButton } from './ui-components';

export default function App({ isSignedIn, contractId, wallet }) {
  const [valueFromBlockchain, setValueFromBlockchain] = React.useState();

  const [uiPleaseWait, setUiPleaseWait] = React.useState(true);

  // Get blockchian state once on component load
  React.useEffect(() => {
    getGreeting()
      .then(setValueFromBlockchain)
      .catch(alert)
      .finally(() => {
        setUiPleaseWait(false);
      });
    }
  , []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt greeting={valueFromBlockchain} onClick={() => wallet.signIn()}/>;
  }

  function changeGreeting(e) {
    e.preventDefault();
    setUiPleaseWait(true);
    const { greetingInput } = e.target.elements;
    
    // use the wallet to send the greeting to the contract
    wallet.callMethod({ method: 'set_greeting', args: { message: greetingInput.value }, contractId })
      .then(async () => {return getGreeting();})
      .then(setValueFromBlockchain)
      .finally(() => {
        setUiPleaseWait(false);
      });
  }

  function getGreeting(){
    // use the wallet to query the contract's greeting
    return wallet.viewMethod({ method: 'get_greeting', contractId })
  }

  return (
    <>
      <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
      <main className={uiPleaseWait ? 'please-wait' : ''}>
        <h1>
          The contract says: <span className="greeting">{valueFromBlockchain}</span>
        </h1>
        <form onSubmit={changeGreeting} className="change">
          <label>Change greeting:</label>
          <div>
            <input
              autoComplete="off"
              defaultValue={valueFromBlockchain}
              id="greetingInput"
            />
            <button>
              <span>Save</span>
              <div className="loader"></div>
            </button>
          </div>
        </form>
        <EducationalText/>
      </main>
    </>
  );
}
'''
'''--- frontend/components/SignInPrompt.js ---
export default function SignInPrompt({handleClick}) {
  return (
    <section className="signin-page">
      <span className="signin-page--title">Help your decentralized neighbor!</span>
      <h3 className="signin-page--subtitle">A simple dapp for helping an anonymous neighbor with an anonymous donation</h3>
      <button
        className="signin-page--button"
        onClick={handleClick}
      >
        Sign in with NEAR Wallet
      </button>
    </section>        
    )    
}
'''
'''--- frontend/components/SignOutButton.js ---
export default function SignOutButton({accountId, handleClick}) {
  return (
    <button className="signout-button" onClick={handleClick}>
      Sign out {accountId} 
    </button>
  )
}
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Caveat:wght@400;700&family=Dancing+Script:wght@600;700&display=swap" rel="stylesheet">
    <title>Help your decentralized neighbor!</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
// React
import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

// NEAR
/*
  We implement a ./near-wallet.js module, where we abstracted the wallet selector
  into a Wallet object to simplify using it
 */
import { Wallet } from './near-wallet';
/* 
  The process.env property returns an object containing the user environment.
  Example:
  {
    SHELL: '/usr/local/bin/bash',
    USER: 'maciej',
    PWD: '/Users/maciej',
    HOME: '/Users/maciej',
    _: '/usr/local/bin/node'
  }
 */
const CONTRACT_ADDRESS = process.env.CONTRACT_NAME;

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
/* 
override the window.onload method with a function that calls the wallet.startUp() method.
Such method returns if the user is already signed-in
 */
window.onload = async () => {
  const isSignedIn = await wallet.startUp();
  console.log(isSignedIn);
  console.log(CONTRACT_ADDRESS);
  const root = ReactDOM.createRoot(document.getElementById('root'));
  root.render(<App isSignedIn={isSignedIn} contractId={CONTRACT_ADDRESS} wallet={wallet} />);
}

'''
'''--- frontend/index_bk.js ---
// React
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

// NEAR
import { Wallet } from './near-wallet';

const CONTRACT_ADDRESS = process.env.CONTRACT_NAME

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS })

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp()
 
  ReactDOM.render(
    <App isSignedIn={isSignedIn} contractId={CONTRACT_ADDRESS} wallet={wallet} />,
    document.getElementById('root')
  );
}
'''
'''--- frontend/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}
'''
'''--- frontend/ui-components_bk.js ---
import React from 'react';

export function SignInPrompt({greeting, onClick}) {
  return (
    <main>
      <h1>
        The contract says: <span className="greeting">{greeting}</span>
      </h1>
      <h3>
        Welcome to NEAR!
      </h3>
      <p>
        Your contract is storing a greeting message in the NEAR blockchain. To
        change it you need to sign in using the NEAR Wallet. It is very simple,
        just use the button below.
      </p>
      <p>
        Do not worry, this app runs in the test network ("testnet"). It works
        just like the main network ("mainnet"), but using NEAR Tokens that are
        only for testing!
      </p>
      <br/>
      <p style={{ textAlign: 'center' }}>
        <button onClick={onClick}>Sign in with NEAR Wallet</button>
      </p>
    </main>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
    <button style={{ float: 'right' }} onClick={onClick}>
      Sign out {accountId}
    </button>
  );
}

export function EducationalText() {
  return (
    <>
      <p>
        Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
      </p>
      <ol>
        <li>
          Look in <code>frontend/App.js</code> - you'll see <code>getGreeting</code> and <code>setGreeting</code> being called on <code>contract</code>. What's this?
        </li>
        <li>
          Ultimately, this <code>contract</code> code is defined in <code>./contract</code> â€“ this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
        <li>
          When you run <code>npm run deploy</code>, the code in <code>./contract</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code>.</li>
      </ol>
      <hr />
      <p>
        To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
      </p>
    </>
  );
}

'''