*GitHub Repository "greeny00/Near-Rent-Buy"*

'''--- README.md ---
# Dream Flight DAap

With this project, it was aimed to collect space expeditions on one page, to enable users to access all flight information easily, and to reserve a seat for their desired flight using their NEAR wallet.

## Loom Video

https://www.loom.com/share/9239095038814a6fad067699b82f371f

## How To Use

First of all, the repo should be cloned or the files should be downloaded to the computer as ZIP from the code section above.

After this step, enter the following commands using a suitable application.(This tutorial is made for gitbash here. But with minor punctuation differences, almost all applications follow the same steps.)

1)Command that downloads all packages that the project will use:

```ts
yarn;
```

2)The command that introduces the contract to the compiler and creates our wasm file:

```ts

yarn build:release
```

3)To deploy the project:

```ts

near dev-deploy ./build/release/simple.wasm
```

4)An account ID is created with the deployment of the project. This ID appears as "dev-...........".Copy and paste this ID into <Account ID>. With this step, you will not need to enter account id every time.(Please write without "<,>"these characters.)

```ts

export CONTRACT=<AccountId>
```

5)This step is not mandatory. It helps you to test the correctness of the entered accountId.

```ts

echo $CONTRACT
```

After all these steps, you can now switch to using the functions.

## Functions

1-Health Check
  <br/>
With this function, it is checked whether the user has the necessary health to fly. Is a simple dictionary function. The first entry the key is set as the name, and the second entry is set as the health status. If a value other than "healthy" is entered, the function will inform you that you are not available for this flight.
How to call:

```ts

near call $CONTRACT healthCheck '{"name":"NAME","heart":"healthy"}' -accountId <YOUR TESTNET ACCOUNT>
```

2-Launching Schedule
  <br/>
This function notifies the system of a new flight with the information it receives from the user.
How to call:

```ts

near call $CONTRACT Launching_schedule '{"text":"Moon and Back Mission","cost":"250000","capsul":7,"destination":"Moon","departure":"İstanbul","max_seat":7}' --accountId <YOUR TESTNET ACCOUNT>
```

3-specific_flight
  <br/>
This function displays the Id information received from the user and the rest of the flight that has that ID.
How to call:

```ts

near call $CONTRACT specific_flight '{"id":<FLİGHT ID HERE>}' --accountId <YOUR TESTNET ACCOUNT>
```

4-Show_All
  <br/>
This function does not receive any information from the user, when called, it displays all the flights available on the site.
How to call:

```ts

near call $CONTRACT Show_All '{}' --accountId <YOUR TESTNET ACCOUNT>
```

5-delete_specific
  <br/>
Deletes the flight associated with that id from the system with the id information it receives from the user.
How to call:

```ts

near call $CONTRACT delete_specific '{"id":<FLİGHT ID HERE>}' --accountId <YOUR TESTNET ACCOUNT>
```

6-deleteall
  <br/>
This function does not receive any information from the user, when called, it deletes all the flights available on the site.
How to call:

```ts

near call $CONTRACT deleteall '{}' --accountId <YOUR TESTNET ACCOUNT>
```

7-Update
  <br/>
This function updates the flight information associated with the id sent to the function with the information in the second parameter received by the function. In the second parameter, you need to re-enter the information you want to remain the same. The information you enter must be in the desired order. As a result of this operation, the id does not change.
How to call:

```ts

near call $CONTRACT Update '{"id":<FLİGHT ID HERE>,"updates":{"text":"Moon and Back","cost":"560000","capsul":5,"destination":"Moon","departure":"İstanbul","max_seat":7}}' --accountId <YOUR TESTNET ACCOUNT>
```

8-BuyingSeat
  <br/>
This function works with the id and passenger id sent to the function. For the transaction to take place, you must have a balance equal to or greater than the seat fee stated in your NEAR wallet. If you have the balance to buy a seat after this check, the number of seats on the flight will be reduced by one.
How to call:

```ts

near call $CONTRACT BuyingSeat '{"id":<FLİGHT ID HERE>,"passenger":"<YOUR TESTNET ACCOUNT>"}' --accountId <YOUR TESTNET ACCOUNT>
```

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/simple",
    "src/singleton"
  ]
}

'''
'''--- package.json ---
{
  "name": "starter--near-sdk-as",
  "version": "0.0.1",
  "description": "Start with a basic project",
  "scripts": {
    "deploy": "near dev-deploy build/release/simple.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# uncomment out the line below to deploy the other example contract
near dev-deploy ./build/debug/simple.wasm

# comment the line below to deploy the other example contract
#near dev-deploy ./build/debug/singleton.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
# uncomment this line for a useful hint when using the singleton style
# echo "near call \$CONTRACT init --accountId \$CONTRACT"
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'view' functions on the contract"
echo
echo "(run this script again to see changes made by this file)"
echo ---------------------------------------------------------
echo

near view $CONTRACT helloWorld

echo
echo

near view $CONTRACT read '{"key":"some-key"}'

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Call 'change' functions on the contract"
echo ---------------------------------------------------------
echo

# the following line fails with an error because we can't write to storage without signing the message
# --> FunctionCallError(HostError(ProhibitedInView { method_name: "storage_write" }))
# near view $CONTRACT write '{"key": "some-key", "value":"some value"}'
near call $CONTRACT write '{"key": "some-key", "value":"some value"}' --accountId $CONTRACT

echo
echo "now run this script again to see changes made by this file"
exit 0

'''
'''--- scripts/3.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$BENEFICIARY" ] && echo "Missing \$BENEFICIARY environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$BENEFICIARY" ] || echo "Found it! \$BENEFICIARY is set to [ $BENEFICIARY ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT, setting $BENEFICIARY as beneficiary"
echo ---------------------------------------------------------
echo
near delete $CONTRACT $BENEFICIARY

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder are designed to help you demonstrate the behavior of the contract(s) in this project.

It uses the following setup:

```sh
# set your terminal up to have 2 windows, A and B like this:
┌─────────────────────────────────┬─────────────────────────────────┐
│                                 │                                 │
│                                 │                                 │
│                A                │                B                │
│                                 │                                 │
│                                 │                                 │
└─────────────────────────────────┴─────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment
  export OWNER=           # any account you control

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  # export OWNER=sherif.testnet
  ```

- Commands

  _helper scripts_
  ```sh
  1.dev-deploy.sh                # helper: build and deploy contracts
  2.use-contract.sh              # helper: call methods on ContractPromise
  3.cleanup.sh                   # helper: delete build and deploy artifacts
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=               # depends on deployment

  # for example
  # export CONTRACT=dev-1615190770786-2702449
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- scripts/functions.sh ---
# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build:release

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo ---------------------------------------------------------
echo

# comment the line below to deploy the contract
near dev-deploy ./build/release/simple.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$MY_ACC" ] && echo "Missing \$MY_ACC environment variable"

[ -z "$CONTRACT" ] && echo "Please \export your account id to the \$CONTRACT variable!"
[ -z "$CONTRACT" ] && echo "export CONTRACT=__new_contract_account_id__"

[ -z "$MY_ACC" ] && echo "Please \export your account id to the \$MY_ACC variable!"
[ -z "$MY_ACC" ] && echo "export MY_ACC=__your_account_name__"

echo ---------------------------------------------------------
echo "Step 1: Call 'healthCheck' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT healthCheck '{"name":"NAME","heart":"healthy"}' --accountId $MY_ACC"
echo 
echo

echo ---------------------------------------------------------
echo "Step 2: Call 'Launching_schedule' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT Launching_schedule '{"text":"Moon and Back Mission","cost":"250000","capsul":7,"destination":"Moon","departure":"İstanbul","max_seat":7}' --accountId $MY_ACC"
echo 

echo ---------------------------------------------------------
echo "Step 3: Call 'specific_flight' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT specific_flight '{"id":2354046042}' --accountId $MY_ACC"
echo 

echo
echo ---------------------------------------------------------
echo "Step 4: Call 'Show_All' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT near call $CONTRACT Show_All '{}' --accountId $MY_ACC"
echo 

echo
echo ---------------------------------------------------------
echo "Step 5: Call 'delete_specific' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT delete_specific '{"id":1284343803}' --accountId $MY_ACC"
echo 

echo
echo ---------------------------------------------------------
echo "Step 6: Call 'deleteall' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT deleteall '{}' --accountId $MY_ACC"
echo 

echo
echo ---------------------------------------------------------
echo "Step 7: Call 'Update' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT Update '{"id":3111645745,"updates":{"text":"Moon and Back","cost":"560000","capsul":5,"destination":"Moon","departure":"İstanbul","max_seat":7}}' --accountId $MY_ACC"
echo 

echo
echo ---------------------------------------------------------
echo "Step 8: Call 'BuyingSeat' functions on the contract"
echo ---------------------------------------------------------
echo "near call $CONTRACT BuyingSeat '{"id":2354046042,"passenger":"zzeyns.testnet"}' --accountId $MY_ACC"
echo 

echo

exit 0
'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/simple/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/simple/__tests__/index.unit.spec.ts ---
import * as contract from "../assembly";

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/simple/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/simple/assembly/index.ts ---
import {
  context, // visibility into account, contract and blockchain details
  ContractPromiseBatch, // make asynchronous calls to other contracts and receive callbacks
  logging, // append to the execution environment log (appears in JS Developer Console when using near-api-js)
  storage,
  u128, // append to the execution environment log (appears in JS Developer Console when using near-api-js)
} from "near-sdk-as";

import { AccountId } from "../../utils";
import { Flight, flight } from "./model";

// Health Check
export function healthCheck(name: string, heart: string): string {
  storage.setString(name, heart);
  let result = storage.getString(name);
  if (result == "healthy") {
    return "Everything looks fine.";
  }
  return "Something looks wrong. Please have a detailed health check.";
}

// Creates new flight.
export function Launching_schedule(
  text: string,
  cost: u128,
  capsul: u32,
  destination: string,
  departure: string,
  max_seat: u32
): Flight {
  return Flight.Add_Launching(
    text,
    cost,
    capsul,
    destination,
    departure,
    max_seat
  );
}

// Finds a flight by ID.
export function specific_flight(id: u32): Flight {
  return Flight.show_specific_flight(id);
}

// Shows all flights.
export function Show_All(): Flight[] {
  assert(
    flight.length > 0,
    "No flights to show wait for the next lunar eclipse."
  );
  return Flight.show_All();
}

//Deletes a flight by ID.
export function delete_specific(id: u32): Flight {
  return Flight.Specific_Flight(id);
}

// Delete all flights.
export function deleteall(): void {
  Flight.Delete_All();
  logging.log("Flights removed....");
}

//Updates a flight by ID.
export function Update(id: u32, updates: Flight): Flight {
  return Flight.updateinfos(id, updates);
}

//Buying seat.
export function BuyingSeat(id: u32, passenger: AccountId): void {
  const by_seat = specific_flight(id);
  assert(by_seat.cost > context.attachedDeposit, "Your balance is not enough!");
  Flight.update_seat(id);
  logging.log(`Warning! ${context.attachedDeposit.toString()} yoktoNEAR sent`);
  ContractPromiseBatch.create(passenger).transfer(context.attachedDeposit);
}

'''
'''--- src/simple/assembly/model.ts ---
import {
  context, // visibility into account, contract and blockchain details
  PersistentUnorderedMap, // data structure that wraps storage
  math, // utility math function for hashing using SHA and Keccak as well as pseudo-random data
  logging,
  u128,
} from "near-sdk-as";

export const flight = new PersistentUnorderedMap<u32, Flight>("flight");

@nearBindgen
export class Flight {
  id: u32;
  sender: string;
  date: u64;
  cost: u128;
  capsul: u32;
  destination: string;
  departure: string;
  max_seat: u32;
  constructor(
    public text: string,
    cost: u128,
    capsul: u32,
    destination: string,
    departure: string,
    max_seat: u32
  ) {
    this.id = math.hash32<string>(text);
    this.sender = context.sender;
    this.date = context.blockTimestamp;
    this.cost = cost;
    this.capsul = capsul;
    this.destination = destination;
    this.departure = departure;
    this.max_seat = max_seat;
  }

  static Add_Launching(
    text: string,
    cost: u128,
    capsul: u32,
    destination: string,
    departure: string,
    max_seat: u32
  ): Flight {
    const newflight = new Flight(
      text,
      cost,
      capsul,
      destination,
      departure,
      max_seat
    );
    flight.set(newflight.id, newflight);
    return newflight;
  }
  //Deletes a specific flight.
  static Specific_Flight(id: u32): Flight {
    assert(
      flight.contains(id),
      "Flight could not found! Please, check ID of the flight!"
    );
    return flight.getSome(id);
  }
  //Deletes all flights.
  static Delete_All(): void {
    flight.clear();
    assert(flight.length == 0, "This was already a black hole....");
  }

  //Shows specific flight.
  static show_specific_flight(id: u32): Flight {
    let x = flight.getSome(id);
    return x;
  }

  //Shows all flights.
  static show_All(): Flight[] {
    let all = flight.length;
    let offset: u32 = 0;
    return flight.values(offset, offset + all);
  }

  //Update specific flight informations.
  static updateinfos(id: u32, updates: Flight): Flight {
    const current = this.Specific_Flight(id);
    current.capsul = updates.capsul;
    current.cost = updates.cost;
    current.date = context.blockTimestamp;
    current.departure = updates.departure;
    current.destination = updates.destination;
    current.max_seat = updates.max_seat;
    current.sender = context.sender;
    current.text = updates.text;
    flight.set(id, current);
    return current;
  }

  static update_seat(id: u32): Flight {
    const current = this.Specific_Flight(id);
    let new_seat = current.max_seat - 1;
    current.capsul = current.capsul;
    current.cost = current.cost;
    current.date = context.blockTimestamp;
    current.departure = current.departure;
    current.destination = current.destination;
    current.max_seat = new_seat;
    current.sender = context.sender;
    current.text = current.text;
    flight.set(id, current);
    return current;
  }
}

'''
'''--- src/singleton/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/singleton/__tests__/index.unit.spec.ts ---
import { Contract } from "../assembly";

let contract: Contract

beforeEach(() => {
  contract = new Contract()
})

describe("Contract", () => {
  // VIEW method tests

  it("says hello", () => {
    expect(contract.helloWorld()).toStrictEqual("hello world")
  })

  it("reads data", () => {
    expect(contract.read("some key")).toStrictEqual("🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )")
  })

  // CHANGE method tests

  it("saves data to contract storage", () => {
    expect(contract.write("some-key", "some value")).toStrictEqual("✅ Data saved. ( storage [ 18 bytes ] )")
  })
})

'''
'''--- src/singleton/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/singleton/assembly/index.ts ---
import { storage, Context } from "near-sdk-core"

@nearBindgen
export class Contract {
  private message: string = 'hello world'

  // return the string 'hello world'
  helloWorld(): string {
    return this.message
  }

  // read the given key from account (contract) storage
  read(key: string): string {
    if (isKeyInStorage(key)) {
      return `✅ Key [ ${key} ] has value [ ${storage.getString(key)!} ] and "this.message" is [ ${this.message} ]`
    } else {
      return `🚫 Key [ ${key} ] not found in storage. ( ${this.storageReport()} )`
    }
  }

  /**
  write the given value at the given key to account (contract) storage
  ---
  note: this is what account storage will look like AFTER the write() method is called the first time
  ╔════════════════════════════════╤══════════════════════════════════════════════════════════════════════════════════╗
  ║                            key │ value                                                                            ║
  ╟────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
  ║                          STATE │ {                                                                                ║
  ║                                │   "message": "data was saved"                                                    ║
  ║                                │ }                                                                                ║
  ╟────────────────────────────────┼──────────────────────────────────────────────────────────────────────────────────╢
  ║                       some-key │ some value                                                                       ║
  ╚════════════════════════════════╧══════════════════════════════════════════════════════════════════════════════════╝
   */
  @mutateState()
  write(key: string, value: string): string {
    storage.set(key, value)
    this.message = 'data was saved' // this is why we need the deorator @mutateState() above the method name
    return `✅ Data saved. ( ${this.storageReport()} )`
  }

  // private helper method used by read() and write() above
  private storageReport(): string {
    return `storage [ ${Context.storageUsage} bytes ]`
  }
}

/**
 * This function exists only to avoid a compiler error
 *

ERROR TS2339: Property 'contains' does not exist on type 'src/singleton/assembly/index/Contract'.

     return this.contains(key);
                 ~~~~~~~~
 in ~lib/near-sdk-core/storage.ts(119,17)

/Users/sherif/Documents/code/near/_projects/edu.t3/starter--near-sdk-as/node_modules/asbuild/dist/main.js:6
        throw err;
        ^

 * @param key string key in account storage
 * @returns boolean indicating whether key exists
 */
function isKeyInStorage(key: string): bool {
  return storage.hasKey(key)
}

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''