*GitHub Repository "open-web-academy/nft-subscriptions-ui"*

'''--- README.md ---
# PROYECTO PARA LAS SUSCRIPCIONES DE OPEN WEB ACADEMY

Versión de Node: 12.22.5

Para correr el siguiente proyecto de manera local deberá ejecutar los siguientes comandos:

Para instalar las dependencias del proyecyo, deberá ejecutar el siguiente comando:

### `npm install`

Despues ejecute el siguiente comando para correr el proyecto:

### `npm start`

'''
'''--- package.json ---
{
  "name": "owa-subscriptions-ui",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@chakra-ui/icons": "^2.0.17",
    "@chakra-ui/react": "^2.4.9",
    "@emotion/react": "^11.10.5",
    "@emotion/styled": "^11.10.5",
    "@near-wallet-selector/core": "^6.0.1",
    "@near-wallet-selector/default-wallets": "^6.0.0",
    "@near-wallet-selector/here-wallet": "^7.4.0",
    "@near-wallet-selector/ledger": "^6.0.0",
    "@near-wallet-selector/math-wallet": "^6.0.1",
    "@near-wallet-selector/meteor-wallet": "^6.0.0",
    "@near-wallet-selector/modal-ui": "^6.0.1",
    "@near-wallet-selector/my-near-wallet": "^6.0.0",
    "@near-wallet-selector/near-wallet": "^6.0.0",
    "@near-wallet-selector/nightly": "^6.0.1",
    "@near-wallet-selector/nightly-connect": "^6.0.0",
    "@near-wallet-selector/opto-wallet": "^7.3.0",
    "@near-wallet-selector/sender": "^6.0.1",
    "@near-wallet-selector/wallet-connect": "^6.0.0",
    "@sentry/nextjs": "^7.36.0",
    "@testing-library/jest-dom": "^5.16.5",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^14.4.3",
    "axios": "^1.2.5",
    "buffer": "^6.0.3",
    "framer-motion": "^6.5.1",
    "jsbi": "^4.3.0",
    "local-storage": "^2.0.0",
    "near-api-js": "^1.1.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^3.11.0",
    "react-router-dom": "^6.7.0",
    "react-scripts": "5.0.1",
    "sweetalert2": "^11.3.10",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="https://ow.academy/wp-content/uploads/2022/04/cropped-OpenWeb-NEGRO-ICON-192x192.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="https://ow.academy/wp-content/uploads/2022/04/cropped-OpenWeb-NEGRO-ICON-192x192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>OWA</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
import React, { useEffect, useState } from "react";
import { Routes, Route, Navigate } from 'react-router-dom';
import OWAIcon from './assets/img/owa_logo.png';
import {
  ChakraProvider,
  Center,
  theme
} from '@chakra-ui/react';
import Hero from "./components/sections/Hero";
import MySubscriptions from "./views/MySubscriptions";
import BuySubscriptions from "./views/BuySubscriptions";
import Header from "./components/Header";
import Footer from "./components/Footer";
import { useWalletSelector } from "./utils/walletSelector";

export default function Landing() {
  const { selector, modal, accounts, accountId } = useWalletSelector();
  const [stateLogin, setStateLogin] = useState(false);
  const [load, setLoad] = useState(false);

  useEffect(() => {
    (async () => {
      setStateLogin(accountId !=null ? true : false);
      setLoad(true);
    })();
  }, []);

  if (stateLogin && load) {
    return (
      <ChakraProvider theme={theme}>
        <Center>
          <>
            <div style={{width:'100%'}}>
              <div style={{width:'100%', position:'sticky', top:'0px', zIndex:'10'}}>
                <Header />
              </div>
              <div style={{width:'100%', marginBottom:'64px'}}>
                <Routes>
                  <Route path="/mysubscriptions" exact element={<MySubscriptions/>} />
                  <Route path="/buysubscriptions" exact element={<BuySubscriptions/>} />
                  <Route path="/*" exact element={<MySubscriptions/>} />
                </Routes>
              </div>
              <div style={{width:'100%', position:'fixed', bottom:'0px', right:'0px', left:'0px'}}>
                <Footer/>
              </div>
            </div>
          </>
        </Center>
      </ChakraProvider>
    );
  } if (!stateLogin && load) {
      return (
        <ChakraProvider theme={theme}>
          <Center>
          <>
            <div style={{width:'100%'}}>
              <Hero
                title="Bienvenidos a Open Web Academy"
                subtitle="Ingresa para poder adquirir suscripciones al contenido de OWA, da clic en el siguiente botón para hacerlo con tu NEAR Wallet."
                image={OWAIcon}
                ctaText="Iniciar Sesión"
              />
              <div style={{width:'100%', position:'fixed', bottom:'0px', right:'0px', left:'0px'}}>
                <Footer/>
              </div>
            </div>
          </>
          </Center>
        </ChakraProvider>
      );
    
  }

  
}
'''
'''--- src/App.test.js ---
import React from 'react';
import { screen } from '@testing-library/react';
import { render } from './test-utils';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn chakra/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/Logo.js ---
import React from 'react';
import { Image, keyframes, usePrefersReducedMotion } from '@chakra-ui/react';
import logo from './logo.svg';

const spin = keyframes`
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
`;

export const Logo = props => {
  const prefersReducedMotion = usePrefersReducedMotion();

  const animation = prefersReducedMotion
    ? undefined
    : `${spin} infinite 20s linear`;

  return <Image animation={animation} src={logo} {...props} />;
};

'''
'''--- src/assets/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- src/assets/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- src/components/Footer.js ---
import React, { useCallback, useContext, useEffect, useState } from "react";
import {
    Box,
    chakra,
    Container,
    Stack,
    Text,
    useColorModeValue,
    VisuallyHidden,
  } from '@chakra-ui/react';
  import { FaDiscord, FaGithub, FaGlobe, FaMedium, FaTwitter, FaYoutube } from 'react-icons/fa';
  import { ReactNode } from 'react';
  import { ColorModeSwitcher } from '../utils/ColorModeSwitcher';

  const SocialButton = ({
    children,
    label,
    href,
  }) => {
    return (
      <chakra.button
        bg={useColorModeValue('blackAlpha.100', 'whiteAlpha.100')}
        rounded={'full'}
        w={8}
        h={8}
        cursor={'pointer'}
        as={'a'}
        target="_blank"
        href={href}
        display={'inline-flex'}
        alignItems={'center'}
        justifyContent={'center'}
        transition={'background 0.3s ease'}
        _hover={{
          bg: useColorModeValue('blackAlpha.200', 'whiteAlpha.200'),
        }}>
        <VisuallyHidden>{label}</VisuallyHidden>
        {children}
      </chakra.button>
    );
  };
  
  export default function SmallWithSocial() {
    return (
      <Box
        bg={useColorModeValue('gray.50', 'gray.900')}
        color={useColorModeValue('gray.700', 'gray.200')}>
        <Container
          as={Stack}
          maxW={'6xl'}
          py={4}
          direction={{ base: 'column', md: 'row' }}
          justify={{ base: 'center', md: 'space-between' }}
          align={{ base: 'center', md: 'center' }}>
          <Text>© 2023 Open Web Academy</Text>
          <Stack direction={'row'} spacing={6} align={'center'}>
            <SocialButton label={'OWA'} href={'https://ow.academy/'} target="_blank">
              <FaGlobe />
            </SocialButton>
            <SocialButton label={'Discord'} href={'https://discord.com/invite/XhGJXszkyc'}>
              <FaDiscord />
            </SocialButton>
            <SocialButton label={'Twitter'} href={'https://twitter.com/openwebacademy_'} >
              <FaTwitter />
            </SocialButton>
            <SocialButton label={'YouTube'} href={'https://www.youtube.com/channel/UChcuH69iuHbFGBy1qunVzNw'}>
              <FaYoutube />
            </SocialButton>
            <SocialButton label={'Medium'} href={'https://medium.com/@owa_academy'}>
              <FaMedium />
            </SocialButton>
            <SocialButton label={'GitHub'} href={'https://github.com/open-web-academy'}>
              <FaGithub />
            </SocialButton>
          </Stack>
        </Container>
      </Box>
    );
  }
'''
'''--- src/components/Header.js ---
import React, { useCallback, useContext, useEffect, useState } from "react";
import { useWalletSelector, getAccountBalance } from "../utils/walletSelector";
import Swal from 'sweetalert2';
import OWAIcon from '../assets/img/owa_logo.png';
import { MoonIcon, SunIcon } from '@chakra-ui/icons';
import { providers, utils } from "near-api-js";
import { prettyBalance } from '../utils/common';
import {
    Box,
    Flex,
    Text,
    Avatar,
    IconButton,
    Button,
    Divider,
    Stack,
    Collapse,
    Icon,
    Link,
    Popover,
    PopoverTrigger,
    PopoverContent,
    useColorModeValue,
    useBreakpointValue,
    useDisclosure,
    Menu,
    MenuButton,
    MenuList,
    MenuItem,
    MenuDivider,
    useColorMode,
    Center,
  } from '@chakra-ui/react';
  import {
    HamburgerIcon,
    CloseIcon,
    ChevronDownIcon,
    ChevronRightIcon,
  } from '@chakra-ui/icons';
  
  export default function WithSubnavigation() {
    const { selector, modal, accountBalance, accounts, accountId, logged } = useWalletSelector();
    const { colorMode, toggleColorMode } = useColorMode();
    const { isOpen, onOpen, onClose, onToggle } = useDisclosure();
    const [load, setLoad] = useState(false);
    const [balanceUSDT, setBalanceUSDT] = useState();
    const [balanceNEAR, setBalanceNEAR] = useState();
    
    useEffect(() => {
      (async () => {
          const { network } = selector.options;
          const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });
          let params = {
            account_id: accountId,
          };

          const tokens = await provider.query({
              request_type: "call_function",
              account_id: process.env.REACT_APP_USDT_CONTRACT,
              method_name: "ft_balance_of",
              args_base64: btoa(JSON.stringify(params)),
              finality: "optimistic",
          });
          const balance = parseInt(Buffer.from(tokens.result).toString().replace(/['"]+/g, ''));
          const nears = await getAccountBalance(accountId);
          const pnears = prettyBalance(nears.available, 24, 4);
          
          setTimeout(() => {
            const n = (parseFloat(pnears)-0.051) > 0  ? (parseFloat(pnears)-0.051).toFixed(4) : 0; 
            setBalanceNEAR(n);
            setBalanceUSDT(balance/1000000);
            
            const balances = {
              NEAR: n,
              USDT: balance/1000000
            }
            localStorage.setItem('balances', JSON.stringify(balances));
            setLoad(true);
          }, 1000);
         
      })();
  }, []);

    async function logOut() {
      const wallet = await selector.wallet();
      Swal.fire({
        width: '800',
        title: '¿QUIERES SALIR?',
        text: "Recuerda que para navegar el sitio de manera correcta es necesario que esté conectada tu wallet, de igual forma puedes conectarla en cualquier momento",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Salir',
        cancelButtonText: 'Cancelar',
        position: window.innerWidth < 1024 ? 'bottom' : 'center'
      }).then((result) => {
        if (result.isConfirmed) {
          localStorage.removeItem('userMedia');
          wallet.signOut().catch((err) => {
            console.log("Failed to sign out");
            console.error(err);
          }).then((res) => {
            window.location.href = "/"
          })
        }
      });
    }

    return (
      <Box w='100%'>
        <Flex
          bg={useColorModeValue('white', 'gray.800')}
          color={useColorModeValue('gray.600', 'white')}
          minH={'60px'}
          py={{ base: 2 }}
          px={{ base: 4 }}
          borderBottom={1}
          borderStyle={'solid'}
          borderColor={useColorModeValue('gray.200', 'gray.900')}
          align={'center'}>
          <Flex
            flex={{ base: 1, md: 'auto' }}
            ml={{ base: -2 }}
            display={{ base: 'flex', md: 'none' }}>
            <IconButton
              onClick={onToggle}
              icon={
                isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />
              }
              variant={'ghost'}
              aria-label={'Toggle Navigation'}
            />
          </Flex>
          <Flex flex={{ base: 1 }} justify={{ base: 'center', md: 'start' }}>
            <Avatar
                  size={'sm'}
                  src={ OWAIcon }
            />
            <Flex display={{ base: 'none', md: 'flex' }} ml={10}>
              <DesktopNav />
            </Flex>
          </Flex>
  
          <Flex alignItems={'center'}>
            <Stack direction={'row'} spacing={7}>
              <Button onClick={toggleColorMode}>
                {colorMode === 'light' ? <MoonIcon /> : <SunIcon />}
              </Button>

              <Menu>
                <MenuButton
                  as={Button}
                  rounded={'full'}
                  variant={'link'}
                  cursor={'pointer'}
                  minW={0}>
                  <Avatar
                    // src={'https://avatars.dicebear.com/api/male/username.svg'}
                    name={accountId}
                    src={'https://bit.ly/broken-link'}
                    size={'sm'}
                  />
                </MenuButton>
                <MenuList alignItems={'center'}>
                  <br />
                  <Center>
                    <Avatar
                      size={'2xl'}
                      //src={'https://avatars.dicebear.com/api/male/username.svg'}
                      name={accountId}
                      src={'https://bit.ly/broken-link'}
                    />
                  </Center>
                  <br />
                  <Center>
                    { accountId && load &&
                      <div>
                        <b>{accountId}</b><br/><br/>
                        <Divider /><br/>
                        <b>NEAR:</b> {balanceNEAR} Ⓝ<br/>
                        <b>USDT:</b> {balanceUSDT.toLocaleString("en")} Ⓣ
                      </div>
                    }
                  </Center>
                  <br />
                  <MenuDivider />
                  <MenuItem onClick={logOut}>Cerrar Sesión</MenuItem>
                </MenuList>
              </Menu>
            </Stack>
          </Flex>
        </Flex>
  
        <Collapse in={isOpen} animateOpacity>
          <MobileNav />
        </Collapse>
      </Box>
    );
  }
  
  const DesktopNav = () => {
    const linkColor = useColorModeValue('gray.600', 'gray.200');
    const linkHoverColor = useColorModeValue('gray.800', 'white');
    const popoverContentBgColor = useColorModeValue('gray.200', 'gray.700');
  
    return (
      <Stack direction={'row'} spacing={4}>
        {NAV_ITEMS.map((navItem) => (
          <Box key={navItem.label}>
            <Popover trigger={'hover'} placement={'bottom-start'}>
              {window.location.href.includes(navItem.href) &&
                <PopoverTrigger>
                  <Link
                    p={2}
                    href={navItem.href ?? '#'}
                    fontSize={'sm'}
                    fontWeight={500}
                    rounded={'md'}
                    textDecoration={'none'}
                    color={linkHoverColor}
                    bg={popoverContentBgColor}
                  >
                    {navItem.label}
                  </Link>
                </PopoverTrigger>
              }
              {!window.location.href.includes(navItem.href) &&
                <PopoverTrigger>
                  <Link
                    p={2}
                    href={navItem.href ?? '#'}
                    fontSize={'sm'}
                    fontWeight={500}
                    color={linkColor}
                    rounded={'md'}
                    _hover={{
                      textDecoration: 'none',
                      color: linkHoverColor,
                      bg: popoverContentBgColor
                    }}>
                    {navItem.label}
                  </Link>
                </PopoverTrigger>
              }
  
              {navItem.children && (
                <PopoverContent
                  border={0}
                  boxShadow={'xl'}
                  bg={popoverContentBgColor}
                  p={4}
                  rounded={'xl'}
                  minW={'sm'}>
                  <Stack>
                    {navItem.children.map((child) => (
                      <DesktopSubNav key={child.label} {...child} />
                    ))}
                  </Stack>
                </PopoverContent>
              )}
            </Popover>
          </Box>
        ))}
      </Stack>
    );
  };
  
  const DesktopSubNav = ({ label, href, subLabel }) => {
    return (
      <Link
        href={href}
        role={'group'}
        display={'block'}
        p={2}
        rounded={'md'}
        _hover={{ bg: useColorModeValue('pink.50', 'gray.900') }}>
        <Stack direction={'row'} align={'center'}>
          <Box>
            <Text
              transition={'all .3s ease'}
              _groupHover={{ color: 'pink.400' }}
              fontWeight={500}>
              {label}
            </Text>
            <Text fontSize={'sm'}>{subLabel}</Text>
          </Box>
          <Flex
            transition={'all .3s ease'}
            transform={'translateX(-10px)'}
            opacity={0}
            _groupHover={{ opacity: '100%', transform: 'translateX(0)' }}
            justify={'flex-end'}
            align={'center'}
            flex={1}>
            <Icon color={'pink.400'} w={5} h={5} as={ChevronRightIcon} />
          </Flex>
        </Stack>
      </Link>
    );
  };
  
  const MobileNav = () => {
    return (
      <Stack
        bg={useColorModeValue('white', 'gray.800')}
        p={4}
        display={{ md: 'none' }}>
        {NAV_ITEMS.map((navItem) => (
          <MobileNavItem key={navItem.label} {...navItem} />
        ))}
      </Stack>
    );
  };
  
  const MobileNavItem = ({ label, children, href }) => {
    const { isOpen, onToggle } = useDisclosure();
    const linkColor = useColorModeValue('gray.600', 'gray.200');
    const linkHoverColor = useColorModeValue('gray.800', 'white');
    const popoverContentBgColor = useColorModeValue('gray.200', 'gray.700');
    
    return (
      <Stack spacing={4} onClick={children && onToggle}>
        <Flex
          py={2}
          as={Link}
          href={href ?? '#'}
          justify={'space-between'}
          align={'center'}
          rounded={'md'}
          _hover={{
            textDecoration: 'none',
            color: linkHoverColor,
            bg: popoverContentBgColor
          }}>

          <Text
            fontWeight={600}
            color={useColorModeValue('gray.600', 'gray.200')}>
            {label}
          </Text>
          {children && (
            <Icon
              as={ChevronDownIcon}
              transition={'all .25s ease-in-out'}
              transform={isOpen ? 'rotate(180deg)' : ''}
              w={6}
              h={6}
            />
          )}
        </Flex>
  
        <Collapse in={isOpen} animateOpacity style={{ marginTop: '0!important' }}>
          <Stack
            mt={2}
            pl={4}
            borderLeft={1}
            borderStyle={'solid'}
            borderColor={useColorModeValue('gray.200', 'gray.700')}
            align={'start'}>
            {children &&
              children.map((child) => (
                <Link key={child.label} py={2} href={child.href}>
                  {child.label}
                </Link>
              ))}
          </Stack>
        </Collapse>
      </Stack>
    );
  };
  

  const NAV_ITEMS = [
    {
      label: 'Mis Suscripciones',
      href: '/mysubscriptions',
    },
    {
      label: 'Comprar',
      href: '/buysubscriptions',
    },
  ];
  
  // const NAV_ITEMS = [
  //   {
  //     label: 'Inspiration',
  //     children: [
  //       {
  //         label: 'Explore Design Work',
  //         subLabel: 'Trending Design to inspire you',
  //         href: '#',
  //       },
  //       {
  //         label: 'New & Noteworthy',
  //         subLabel: 'Up-and-coming Designers',
  //         href: '#',
  //       },
  //     ],
  //   },
  //   {
  //     label: 'Find Work',
  //     children: [
  //       {
  //         label: 'Job Board',
  //         subLabel: 'Find your dream design job',
  //         href: '#',
  //       },
  //       {
  //         label: 'Freelance Projects',
  //         subLabel: 'An exclusive list for contract work',
  //         href: '#',
  //       },
  //     ],
  //   },
  //   {
  //     label: 'Learn Design',
  //     href: '#',
  //   },
  //   {
  //     label: 'Hire Designers',
  //     href: '#',
  //   },
  // ];
'''
'''--- src/components/sections/Hero.js ---
import React, { useCallback, useContext, useEffect, useState } from "react";
import PropTypes from "prop-types";
import { login } from '../../utils';
import { useWalletSelector } from "../../utils/walletSelector";

import {
  Box,
  Button,
  Flex,
  Image,
  Heading,
  Stack,
  Text,
  ChakraProvider
} from "@chakra-ui/react";

export default function Hero({
  title,
  subtitle,
  image,
  ctaLink,
  ctaText,
  ...rest
}) {

  const { selector, modal, accounts, accountId, logged } = useWalletSelector();
  const [signIn, setSignIn] = useState(false);

  useEffect(() => {
    if(signIn){
      window.location.reload();
    }
  }, [accountId]);

  const handleSignIn = () =>{
    modal.show();
    setSignIn(true);
  }

  return (
    <Flex
    align="center"
    justify={{ base: "center", md: "space-around", xl: "space-between" }}
    direction={{ base: "column-reverse", md: "row" }}
    wrap="no-wrap"
    minH="70vh"
    px={8}
    mb={16}
    {...rest}
  >
    <Stack
      spacing={4}
      w={{ base: "80%", md: "40%" }}
      align={["center", "center", "flex-start", "flex-start"]}
    >
      <Heading
        as="h1"
        size="xl"
        fontWeight="bold"
        color="primary.800"
        textAlign={["center", "center", "left", "left"]}
      >
        {title}
      </Heading>
      <Heading
        as="h2"
        size="md"
        color="primary.800"
        opacity="0.8"
        fontWeight="normal"
        lineHeight={1.5}
        textAlign={["center", "center", "left", "left"]}
      >
        {subtitle}
      </Heading>
        <Button
          bg='tomato'
          colorScheme="primary"
          borderRadius="8px"
          py="4"
          px="4"
          lineHeight="1"
          size="md"
          onClick={handleSignIn}
        >
          {ctaText}
        </Button>
    </Stack>
    <Box w={{ base: "80%", sm: "60%", md: "50%" }} mb={{ base: 12, md: 0 }}>
      {/* TODO: Make this change every X secs */}
      <Image src={image} size="100%" rounded="1rem" shadow="2xl" mx="auto" />
    </Box>
  </Flex>
  )
}

Hero.propTypes = {
  title: PropTypes.string,
  subtitle: PropTypes.string,
  image: PropTypes.string,
  ctaText: PropTypes.string,
  ctaLink: PropTypes.string
};

'''
'''--- src/config.js ---
const CONTRACT_NAME_MAINNET = ''
const CONTRACT_NAME_TESTNET = 'dev-1673158223245-46914215654295'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME_MAINNET,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME_TESTNET,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.js ---
import { ColorModeScript } from '@chakra-ui/react';
import React, { StrictMode } from 'react';
import * as ReactDOM from 'react-dom/client';
import App from './App';
import reportWebVitals from './reportWebVitals';
import * as serviceWorker from './serviceWorker';
import { BrowserRouter } from 'react-router-dom';
import {WalletSelectorContextProvider} from "./utils/walletSelector"
import "@near-wallet-selector/modal-ui/styles.css";

const container = document.getElementById('root');
const root = ReactDOM.createRoot(container);

root.render(
  <WalletSelectorContextProvider>
    <StrictMode>
      <ColorModeScript />
      <BrowserRouter>
        <App />
      </BrowserRouter>
    </StrictMode>
  </WalletSelectorContextProvider>
);

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: https://cra.link/PWA
serviceWorker.unregister();

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg width="582" height="582" viewBox="0 0 582 582" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="582" height="582" rx="291" fill="url(#paint0_linear)"/>
<path d="M157.521 303.421L355.881 106.426C359.587 102.746 365.55 107.225 363.049 111.809L289.22 247.123C287.573 250.141 289.758 253.821 293.196 253.821H420.782C424.892 253.821 426.877 258.857 423.872 261.661L200.293 470.326C196.284 474.067 190.317 468.796 193.536 464.356L299.373 318.351C301.543 315.357 299.404 311.164 295.706 311.164H160.713C156.67 311.164 154.653 306.27 157.521 303.421Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear" x1="291" y1="0" x2="291" y2="582" gradientUnits="userSpaceOnUse">
<stop stop-color="#7BCBD4"/>
<stop offset="1" stop-color="#29C6B7"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/serviceWorker.js ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === 'localhost' ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === '[::1]' ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/
    )
);

export function register(config) {
  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return;
    }

    window.addEventListener('load', () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config);

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            'This web app is being served cache-first by a service ' +
              'worker. To learn more, visit https://cra.link/PWA'
          );
        });
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config);
      }
    });
  }
}

function registerValidSW(swUrl, config) {
  navigator.serviceWorker
    .register(swUrl)
    .then(registration => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing;
        if (installingWorker == null) {
          return;
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === 'installed') {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                'New content is available and will be used when all ' +
                  'tabs for this page are closed. See https://cra.link/PWA.'
              );

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration);
              }
            } else {
              // At this point, everything has been precached.
              // It is the perfect time to display a
              // "Content is cached for offline use." message.
              console.log('Content is cached for offline use.');

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration);
              }
            }
          }
        };
      };
    })
    .catch(error => {
      console.error('Error during service worker registration:', error);
    });
}

function checkValidServiceWorker(swUrl, config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { 'Service-Worker': 'script' },
  })
    .then(response => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get('content-type');
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf('javascript') === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then(registration => {
          registration.unregister().then(() => {
            window.location.reload();
          });
        });
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config);
      }
    })
    .catch(() => {
      console.log(
        'No internet connection found. App is running in offline mode.'
      );
    });
}

export function unregister() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.ready
      .then(registration => {
        registration.unregister();
      })
      .catch(error => {
        console.error(error.message);
      });
  }
}

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- src/test-utils.js ---
import React from 'react';
import { render } from '@testing-library/react';
import { ChakraProvider, theme } from '@chakra-ui/react';

const AllProviders = ({ children }) => (
  <ChakraProvider theme={theme}>{children}</ChakraProvider>
);

const customRender = (ui, options) =>
  render(ui, { wrapper: AllProviders, ...options });

export { customRender as render };

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

//const nearConfig = getConfig('production')
const nearConfig = getConfig('development')

// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_required_deposit', 'get_number_of_tokens', 'get_tokens', 'get_token'],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['create_token', 'storage_deposit'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/utils/ColorModeSwitcher.js ---
import React from 'react';
import { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';
import { FaMoon, FaSun } from 'react-icons/fa';

export const ColorModeSwitcher = props => {
  const { toggleColorMode } = useColorMode();
  const text = useColorModeValue('dark', 'light');
  const SwitchIcon = useColorModeValue(FaMoon, FaSun);

  return (
    <IconButton
      size="md"
      fontSize="lg"
      aria-label={`Switch to ${text} mode`}
      variant="ghost"
      color="current"
      marginLeft="2"
      onClick={toggleColorMode}
      icon={<SwitchIcon />}
      {...props}
    />
  );
};

'''
'''--- src/utils/common.js ---
export const prettyBalance = (balance, decimals = 18, len = 8) => {
	if (!balance) {
		return '0'
	}
	const diff = balance.toString().length - decimals
	const fixedPoint = Math.max(2, len - Math.max(diff, 0))
	const fixedBalance = (balance / 10 ** decimals).toFixed(fixedPoint)
	const finalBalance = parseFloat(fixedBalance).toString()
	const [head, tail] = finalBalance.split('.')
	if (head == 0) {
		if (tail) {
			return `${head}.${tail.substring(0, len - 1)}`
		}
		return `${head}`
	}
	const formattedHead = head.replace(/\B(?=(\d{3})+(?!\d))/g, ',')
	return tail ? `${formattedHead}.${tail}` : formattedHead
}
'''
'''--- src/utils/near.js ---
const CONTRACT_NAME = process.env.REACT_APP_CONTRACT

export function getRPC(env) {
	switch (env) {
		case 'production':
		case 'mainnet':
			return {
				defaultRpc: {
					url: 'https://rpc.mainnet.near.org',
					simpleName: 'official rpc',
				},
				publicRpc: {
					url: 'https://public-rpc.blockpi.io/http/near',
					simpleName: 'blockpi rpc',
				},
			}

		case 'development':
		case 'testnet':
			return {
				defaultRpc: {
					url: 'https://rpc.testnet.near.org',
					simpleName: 'official rpc',
				},
				publicRpc: {
					url: 'https://public-rpc.blockpi.io/http/near-testnet',
					simpleName: 'blockpi rpc',
				},
			}

		default:
			return {
				defaultRpc: {
					url: 'https://rpc.mainnet.near.org',
					simpleName: 'official rpc',
				},
				publicRpc: {
					url: 'https://public-rpc.blockpi.io/http/near',
					simpleName: 'blockpi rpc',
				},
			}
	}
}

export default function getConfig(env) {
	const choosenRPC = window.localStorage.getItem('choosenRPC') || 'defaultRpc'
	const nodeURL = getRPC(env)[choosenRPC].url
	switch (env) {
		case 'production':
		case 'mainnet':
			return {
				networkId: 'mainnet',
				nodeUrl: nodeURL,
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.near.org',
				helperUrl: 'https://helper.mainnet.near.org',
				explorerUrl: 'https://explorer.mainnet.near.org',
			}
		case 'development':
		case 'testnet':
			return {
				networkId: 'testnet',
				nodeUrl: nodeURL,
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.testnet.near.org',
				helperUrl: 'https://helper.testnet.near.org',
				explorerUrl: 'https://explorer.testnet.near.org',
			}
		case 'devnet':
			return {
				networkId: 'devnet',
				nodeUrl: nodeURL,
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.devnet.near.org',
				helperUrl: 'https://helper.devnet.near.org',
			}
		case 'betanet':
			return {
				networkId: 'betanet',
				nodeUrl: nodeURL,
				contractName: CONTRACT_NAME,
				walletUrl: 'https://wallet.betanet.near.org',
				helperUrl: 'https://helper.betanet.near.org',
			}
		case 'local':
			return {
				networkId: 'local',
				nodeUrl: 'http://localhost:3030',
				keyPath: `${process.env.HOME}/.near/validator_key.json`,
				walletUrl: 'http://localhost:4000/wallet',
				contractName: CONTRACT_NAME,
			}
		case 'test':
		case 'ci':
			return {
				networkId: 'shared-test',
				nodeUrl: 'https://rpc.ci-testnet.near.org',
				contractName: CONTRACT_NAME,
				masterAccount: 'test.near',
			}
		case 'ci-betanet':
			return {
				networkId: 'shared-test-staging',
				nodeUrl: 'https://rpc.ci-betanet.near.org',
				contractName: CONTRACT_NAME,
				masterAccount: 'test.near',
			}
		default:
			throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
	}
}

'''
'''--- src/utils/near_interaction.js ---
import {
  keyStores,
  connect,
  WalletConnection,
  Contract,
  utils,
} from "near-api-js";
import axios from "axios";

export const storage_byte_cost = 10000000000000000000;
export const contract_name =process.env.REACT_APP_CONTRACT;
export const config = {
  testnet: {
    networkId: "testnet",
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
  },

  mainnet: {
    networkId: "mainnet",
    keyStore: new keyStores.BrowserLocalStorageKeyStore(),
    nodeUrl: "https://rpc.mainnet.near.org",
    walletUrl: "https://wallet.near.org",
    helperUrl: "https://helper.mainnet.near.org",
    explorerUrl: "https://explorer.near.org",
  },
};
//son los metodos que tenemos en el smart contract
export const methodOptions = {
  viewMethods: [
    "nft_tokens",
    "nft_tokens_for_owner",
    "show_costs",
    "ft_balance_of"
  ],
  changeMethods: [
    "ft_transfer_call",
    "mint"
  ],
};
/**
 *hacemos el signIn con near
 */
export async function nearSignIn(URL) {
  (process.env.REACT_APP_NEAR_ENV == "mainnet" ? window.near = await connect(config.mainnet) : window.near = await connect(config.testnet))
  //window.near = await connect(config.testnet);
  window.wallet = new WalletConnection(window.near, "latina");
  window.wallet.requestSignIn(
    contract_name, // contract requesting access
    "Latin-Art", // optional,
    URL, //EXITO
    URL // FRACASO
  );
}

export async function isNearReady() {
  // conectarse a near
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  //const near = await connect(config.testnet);

  // crear una wallet
  const wallet = new WalletConnection(near);
  //esta logueado ?
  return wallet.isSignedIn();
}

/**
 * nos regresa una instancia del contrato
 */
export async function getNearContract() {
  // conectarse a near
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) :  await connect(config.testnet))
  //const near = await connect(config.testnet);

  // crear una wallet de
  const wallet = new WalletConnection(near);
  return new Contract(
    wallet.account(), // the account object that is connecting
    contract_name,
    {
      ...methodOptions,
      sender: wallet.account(), // account object to initialize and sign transactions.
    }
  );
}
/**
 * convierte de nears a yoctos
 *
 * */
export function fromNearToYocto(near) {
  //console.log(utils.format.parseNearAmount(near.toString()));
  return utils.format.parseNearAmount(near.toString());
}
/**
 *
 *
 * convierte de yocto a near
 */
export function fromYoctoToNear(yocto) {
  return utils.format.formatNearAmount(yocto.toString());
}
/**
 * con esta funcion obtenemos el accountid de la cartera
 * */
export async function getNearAccount() {
  // conectarse a near
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  //const near = await connect(config.testnet);

  // crear una wallet de
  const wallet = new WalletConnection(near);

  return wallet.getAccountId();
}

export async function signOut() {
  // conectarse a near
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  //const near = await connect(config.testnet);

  // crear una wallet de
  const wallet = new WalletConnection(near);
  wallet.signOut();
}

export async function ext_call(contract,method,args,gas,amount){
  // conectarse a near
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  // crear una wallet de NEAR
  const wallet = new WalletConnection(near);
  //Realizar la ejecucion de la llamada
  const result = await wallet.account().functionCall(contract, method, args, gas, amount)
  console.log(result)
}

export async function ext_view(contract,method,args){
  // conectarse a near
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  // crear una wallet de NEAR
  const wallet = new WalletConnection(near);
  //Realizar la ejecucion de la llamada
  const result = await wallet.account().viewFunction(contract,method,args)
  return result
}

export async function getNFTContractsByAccount(accountId) {
    const test = process.env.REACT_APP_NEAR_ENV === "mainnet" ? "" : "testnet-";
    const serviceUrl = `https://${test}api.kitwallet.app/account/${accountId}/likelyNFTs`;
    try {
      const result = await axios.get(serviceUrl);
      return result.data;
      } catch(e){
        console.log('err',e);
        return [];
      }
}

export async function getNFTByContract(contract_id, owner_account_id) {
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  const wallet = new WalletConnection(near);
  try {
    const contract = new Contract(wallet.account(), contract_id, {
      viewMethods: ["nft_tokens_for_owner"],
      sender: wallet.account(),
    });

    const result = await contract.nft_tokens_for_owner({
      account_id: owner_account_id,
    });
    return result;
  } catch (err) {
    console.log("err", contract_id);
    return [];
  }
}

export async function getNFTById(nft_contract_id, nft_id,owner_account_id) {
  const near = (process.env.REACT_APP_NEAR_ENV == "mainnet" ? await connect(config.mainnet) : await connect(config.testnet))
  const wallet = new WalletConnection(near);
  const contract = new Contract(wallet.account(), nft_contract_id, {
    viewMethods: ["nft_token"],
    sender: wallet.account(),
  });

  const params = { token_id: nft_id, account_id: owner_account_id };

  try {
    let result = await contract.nft_token(params);

    return result;
  } catch (err) {
    console.log("err on getting ID on this contract", nft_contract_id);
    return [];
  }
}
'''
'''--- src/utils/sentry.js ---
import * as Sentry from '@sentry/nextjs'

export const sentryCaptureException = (error, errorInfo) => {
	// eslint-disable-next-line no-console
	console.log(error)
	Sentry.captureException(error, {
		extra: errorInfo,
	})
}

'''
'''--- src/views/BuySubscriptions.js ---
import React, { useCallback, useContext, useEffect, useState } from "react";
import { useWalletSelector } from "../utils/walletSelector";
import { providers, utils } from "near-api-js";
import common from '../assets/img/common.png';
import rare from '../assets/img/rare.png';
import superrare from '../assets/img/super-rare.png';
import legendary from '../assets/img/legendary.png';
import Swal from 'sweetalert2';
import {
    Flex,
    Box,
    Button,
    Image,
    Center,
    Badge,
    useColorModeValue,
    Grid,
    GridItem,
    useToast
} from '@chakra-ui/react';

import {
    estimateGas,
    fromNearToEth,
    fromNearToYocto,
    fromYoctoToNear,
    getNearAccount,
    getNearContract,
    storage_byte_cost,
} from "../utils/near_interaction";

const allSubscriptions = [
    {
        id: '1mes',
        image: common,
        duration: '1 Mes',
        type: 'one_month'
    },
    {
        id: '6meses',
        image: rare,
        duration: '6 Meses',
        type: 'six_months'
    },
    {
        id: '1año',
        image: superrare,
        duration: '1 Año',
        type: 'one_year'
    },
    {
        id: 'permanente',
        image: legendary,
        duration: 'Permanente',
        type: 'permanent'
    }
]

export default function BuySubscriptions() {
    const { selector, modal, accounts, accountId } = useWalletSelector();
    const [load, setLoad] = useState(false);
    const [allSuscriptionsCosts, setSuscriptionsCosts] = useState({});
    const backgroundColor = useColorModeValue('white', 'gray.800');
    const toast = useToast();

    useEffect(() => {
        (async () => {
            const { network } = selector.options;
            const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

            const currentURL = window.location.href;
            if(currentURL.includes("transactionHashes=")){
                toast({
                    title: 'Compra Exitosa',
                    description: 'El NFT ah sido minado.',
                    status: 'success',
                    position: 'top-right',
                    duration: 2000,
                  });
                  setTimeout(() => {
                    window.location.href = `/mysubscriptions`;
                  }, 2300);
            }
            
            const tokens = await provider.query({
                request_type: "call_function",
                account_id: process.env.REACT_APP_CONTRACT,
                method_name: "show_costs",
                args_base64: btoa(JSON.stringify({})),
                finality: "optimistic",
            });

            let suscriptionsCosts = JSON.parse(
                Buffer.from(tokens.result).toString()
            )

            setTimeout(() => {
                setSuscriptionsCosts(suscriptionsCosts);
            }, 100);
            setLoad(true);
        })();
    }, []);

    const getCost = (type) => {
        switch (type) {
            case '1mes':
                return parseInt(allSuscriptionsCosts.one_month_cost)/1000000;
                break;
            case '6meses':
                return parseInt(allSuscriptionsCosts.six_months_cost)/1000000;
                break;
            case '1año':
                return parseInt(allSuscriptionsCosts.one_year_cost)/1000000;
                break;
            case 'permanente':
                return parseInt(allSuscriptionsCosts.permanent_cost)/1000000;
                break;
        };
    }

    const buy = async (type,duration,subscription) => {
        const costSubscription = await getCost(type);

        const balances = JSON.parse(localStorage.getItem('balances'));

        console.log(balances.NEAR);
        if(balances.NEAR < 0.2){
            Swal.fire({
                width: '500',
                title: 'Balance Insuficiente',
                html: "<p style='text-align:left;'> Debes tener por lo menos <b>0.2 NEAR</b> para poder minar el NFT<br/><br/><b>Balance:</b> "+balances.NEAR+" NEAR</p>",
                icon: 'warning',
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Aceptar',
                position: window.innerWidth < 1024 ? 'bottom' : 'center'
              });
              return;
        }

        if(balances.USDT < costSubscription){
            Swal.fire({
                width: '500',
                title: 'Balance Insuficiente',
                html: "<p style='text-align:left;'><b>Suscripción:</b> "+duration+"<br/><b>Costo:</b> "+costSubscription+" USDT <br/><b>Balance:</b> "+balances.USDT.toFixed(3)+" USDT</p>",
                icon: 'warning',
                showCancelButton: false,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Aceptar',
                position: window.innerWidth < 1024 ? 'bottom' : 'center'
              });
              return;
        }

        Swal.fire({
            width: '500',
            title: 'Suscripción a comprar: '+duration,
            text: "¿Deseas comprar esta suscripción por "+costSubscription+" USDT?",
            icon: 'info',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Comprar',
            cancelButtonText: 'Cancelar',
            position: window.innerWidth < 1024 ? 'bottom' : 'center'
            }).then(async (result) => {
            if (result.isConfirmed) {
                // Comprar y minar token (batch transaction)
                const transactions = [];
                let amount = fromNearToYocto(0.01);
                let amountyocto = "1";
                
                let usdt_params = {
                    receiver_id: process.env.REACT_APP_CONTRACT,
                    amount: ""+(costSubscription*1000000),
                    msg: "",
                };
                
                transactions.push({
                    signerId: accountId,
                    receiverId: process.env.REACT_APP_USDT_CONTRACT,
                    actions: [
                    {
                        type: "FunctionCall",
                        params: {
                        methodName: "ft_transfer_call",
                        args: usdt_params,
                        gas: 300000000000000,
                        deposit: amountyocto,
                        },
                    },
                    ],
                });
    
                let mint_params = {
                    receiver_id: accountId,
                    type_suscription: subscription
                };
    
                transactions.push({
                    signerId: accountId,
                    receiverId: process.env.REACT_APP_CONTRACT,
                    actions: [
                    {
                        type: "FunctionCall",
                        params: {
                        methodName: "mint",
                        args: mint_params,
                        gas: 300000000000000,
                        deposit: amount,
                        },
                    },
                    ],
                });
                console.log(transactions);
                const wallet = await selector.wallet();
                return wallet.signAndSendTransactions({ transactions })
                .then((res) => { });
            }
            });
    }

    if(load){
        return (
            <Center>
                    <Grid templateColumns={{ base: 'repeat(1, 1fr)', sm: 'repeat(1, 1fr)', md: 'repeat(2, 2fr)', lg: 'repeat(3, 3fr)', xl: 'repeat(3, 3fr)' }}>
                        {allSubscriptions.map((subscription,index) => (
                            <GridItem key={subscription.id}>
                                <Flex p={50} w="full" alignItems="center" justifyContent="center">
                                    <Box
                                        bg={backgroundColor}
                                        maxW="sm"
                                        borderWidth="1px"
                                        rounded="lg"
                                        shadow="lg"
                                        position="relative">
    
                                        <Image
                                            src={subscription.image}
                                            alt={`Suscripción de ${subscription.id}`}
                                            roundedTop="lg"
                                        />
    
                                        <Box p="6" textAlign={'center'}>
                                            <Box d="flex" alignItems="baseline">
                                                <Badge rounded="full" px="2" fontSize="0.8em" colorScheme="red">
                                                    {subscription.duration}
                                                </Badge>
                                            </Box>
                                            <br />
                                            <Box d="flex" alignItems="baseline">
                                                <label>
                                                    Costo: {getCost(subscription.id)} USDT
                                                </label>
                                            </Box>
                                            <br />
                                            <Box d="flex" alignItems="baseline">
                                                <Button colorScheme='blue' onClick={async () => { buy(subscription.id,subscription.duration,subscription.type); }}>Comprar</Button>
                                            </Box>
                                        </Box>
                                    </Box>
                                </Flex>
                            </GridItem>
                        ))}
                    </Grid>
                </Center> 
        )
    } 
}

'''
'''--- src/views/MySubscriptions.js ---
import React, {useEffect, useState } from "react";
import { useWalletSelector } from "../utils/walletSelector";
import { providers, utils } from "near-api-js";
import {
    Flex,
    Box,
    Image,
    Center,
    Badge,
    useColorModeValue,
    Grid,
    GridItem,
    Alert,
    AlertIcon,
    AlertTitle,
    AlertDescription,
} from '@chakra-ui/react';

const getDate = (timestamp) => {
    if (!timestamp) { return; }
    var newDate = new Date();
    var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    newDate.setTime(timestamp.toString().substring(0, 13));
    return newDate.toLocaleDateString('es-ES', options);
}

const isActive = (timestamp) => {
    if (!timestamp) { return true; }
    var actualDate = new Date();
    var newDate = new Date();
    var options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };
    newDate.setTime(timestamp.toString().substring(0, 13));
    if(actualDate <= newDate){
        return true;
    }
    return false;
}

export default function MySubscriptions() {
    const { selector, modal, accounts, accountId } = useWalletSelector();
    const [allSubscriptions, setSubscriptions] = useState([]);
    const [load, setLoad] = useState(false);
    const backgroundColor = useColorModeValue('white', 'gray.800');

    useEffect(() => {
        (async () => {
            const { network } = selector.options;
            const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

            let params = {
                account_id: accountId,
                from_index: "" + 0,
                limit: 50
            };

            const tokens = await provider.query({
                request_type: "call_function",
                account_id: process.env.REACT_APP_CONTRACT,
                method_name: "nft_tokens_for_owner",
                args_base64: btoa(JSON.stringify(params)),
                finality: "optimistic",
            });

            let AllTokens = JSON.parse(
                Buffer.from(tokens.result).toString()
            );
            setSubscriptions(AllTokens)
            setLoad(true);
        })();
    }, []);

    if (allSubscriptions.length > 0 && load) {
        return (
            <Center>
                <Grid templateColumns={{ base: 'repeat(1, 1fr)', sm: 'repeat(1, 1fr)', md: 'repeat(2, 2fr)', lg: 'repeat(3, 3fr)', xl: 'repeat(3, 3fr)' }}>
                    {allSubscriptions.map((subscription) => (
                        <GridItem key={subscription.token_id}>
                            <Flex p={50} w="full" alignItems="center" justifyContent="center">
                                <Box
                                    bg={backgroundColor}
                                    maxW="sm"
                                    borderWidth="1px"
                                    rounded="lg"
                                    shadow="lg"
                                    position="relative">
                                    {isActive(subscription.metadata.expires_at) &&
                                        <Badge rounded="full" px="2" fontSize="0.8em" colorScheme="green" position="absolute" top={2} right={2} fontWeight="bold">
                                            Activo
                                        </Badge>
                                    }
                                    {!isActive(subscription.metadata.expires_at) &&
                                        <Badge rounded="full" px="2" fontSize="0.8em" colorScheme="red" position="absolute" top={2} right={2} fontWeight="bold">
                                            Inactivo
                                        </Badge>
                                    }
                                    
                                    <Image
                                        src={'https://cloudflare-ipfs.com/ipfs/' + subscription.metadata.media}
                                        alt={`Suscripción de ${subscription.owner_id}`}
                                        roundedTop="lg"
                                    />

                                    <Box p="6" textAlign={'center'}>
                                        <Box d="flex" alignItems="baseline">
                                            <Badge rounded="full" px="2" fontSize="0.8em" colorScheme="yellow" fontWeight="black">
                                                {subscription.metadata.title}
                                            </Badge>
                                        </Box>
                                        <br />
                                        <Box d="flex" alignItems="baseline">
                                            {subscription.metadata.starts_at &&
                                                <label>
                                                    <b>Fecha Inicio</b> <br />{getDate(subscription.metadata.starts_at)}
                                                </label>
                                            }  
                                        </Box>
                                        <br />
                                        <Box d="flex" alignItems="baseline">
                                            {subscription.metadata.expires_at &&
                                                <label>
                                                    <b>Fecha Fin</b> <br />{getDate(subscription.metadata.expires_at)}
                                                </label>
                                            }  
                                        </Box>

                                    </Box>
                                </Box>
                            </Flex>
                        </GridItem>
                    ))}
                </Grid>
            </Center>
        );
    } if (allSubscriptions.length == 0 && load) {
        return (
            <Alert
                status='warning'
                variant='subtle'
                flexDirection='column'
                alignItems='center'
                justifyContent='center'
                textAlign='center'
                height='200px'
                >
                <AlertIcon boxSize='40px' mr={0} />
                <AlertTitle mt={4} mb={1} fontSize='lg'>
                    No cuentas con ninguna suscripción
                </AlertTitle>
                <AlertDescription maxWidth='sm'>
                    Ve a la sección de comprar para adquirir una.
                </AlertDescription>
            </Alert>
        )
    }

}
'''