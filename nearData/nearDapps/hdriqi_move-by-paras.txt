*GitHub Repository "hdriqi/move-by-paras"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
# MOVE by Paras
Share & show your support for the MOVEMENT that you believe in!

Here's how MOVE protect your privacy:

✔ Pseudonymous

✔ Everything happens on client-side

✔ Machine Learning to Pixelated Face

✔ Auto-strip Image Metadata

✔ Decentralized (IPFS + NEARprotocol)

[Try MOVE](https://move.paras.id)

## Demo
[![MOVE by Paras](http://img.youtube.com/vi/S-TDa9-T8L8/0.jpg)](http://www.youtube.com/watch?v=S-TDa9-T8L8 "MOVE by Paras")

# Under the Hood

## Powered by IPFS & NEARprotocol
MOVE is using [Paras Smart Contract](https://github.com/hdriqi/paras-alpha/tree/master/assembly) as it main engine. Paras is a decentralized digital collective memory that allows everyone to store and create memory that they truly own. 

MOVE is also using [Paras Backend Indexer](https://github.com/hdriqi/paras-backend-indexer) to get the data stored on the smart contract to allow faster and better search/query capabilities.

To store image file, MOVE is using [IPFS](https://github.com/ipfs) that allows the image to be stored in decentralized manner. Paras IPFS node is used as the main destination to store and retrieve the data from IPFS.

## Face Detection & Pixelated
MOVE is using [face-api-js](https://github.com/justadudewhohacks/face-api.js) that implemented on top of tensorflow.js that enable client-side machine learning capability. It is used to do face detection that will be pixelated to protect the privacy for the protestor and supporters. The uploaded image is also re-draw on canvas to remove all the metadata such as date time, GPS and other personal information that can be gathered from the photo.

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
};

'''
'''--- dist/gray_near_logo.f4fe4645.svg ---
<svg id="Layer_1" data-name="Layer 1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 433 180.5"><defs><style>.cls-1{fill:url(#linear-gradient);}.cls-2{fill:#4a4f54;}</style><linearGradient id="linear-gradient" x1="40.11" y1="140.87" x2="140.87" y2="40.11" gradientUnits="userSpaceOnUse"><stop offset="0.21" stop-color="#4a4f54"/><stop offset="0.42" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.59" stop-color="#4a4f54" stop-opacity="0"/><stop offset="0.81" stop-color="#4a4f54"/></linearGradient></defs><title>near_logo</title><path class="cls-1" d="M48.84,144.5a12.32,12.32,0,0,0,9.35-4.28h0l84.42-97.93a12.32,12.32,0,0,0-10.45-5.79h0a12.31,12.31,0,0,0-9.31,4.24L38,138.09A12.34,12.34,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M48.84,144.5a12.38,12.38,0,0,0,5.66-1.37V61.36l65.58,78.7a12.37,12.37,0,0,0,9.49,4.44h2.59a12.35,12.35,0,0,0,12.34-12.34V48.84A12.35,12.35,0,0,0,132.16,36.5h0a12.45,12.45,0,0,0-5.62,1.35v81.79L60.92,40.94a12.37,12.37,0,0,0-9.49-4.44H48.84A12.35,12.35,0,0,0,36.5,48.84v83.32A12.35,12.35,0,0,0,48.84,144.5Z"/><path class="cls-2" d="M225.71,64.25v52.5a.76.76,0,0,1-.75.75h-5.51a7.49,7.49,0,0,1-6.3-3.43l-24.78-38.3.85,19.13v21.85a.76.76,0,0,1-.75.75h-7.22a.76.76,0,0,1-.75-.75V64.25a.76.76,0,0,1,.75-.75h5.43a7.52,7.52,0,0,1,6.3,3.42l24.78,38.24L217,86.1V64.25a.75.75,0,0,1,.75-.75H225A.76.76,0,0,1,225.71,64.25Z"/><path class="cls-2" d="M299.51,117.5h-7.64a.75.75,0,0,1-.7-1L311.4,64.22a1.14,1.14,0,0,1,1.05-.72H322a1.14,1.14,0,0,1,1.05.72l20.23,52.26a.75.75,0,0,1-.7,1H335a.76.76,0,0,1-.71-.48L317.94,74a.75.75,0,0,0-1.41,0l-16.31,43A.76.76,0,0,1,299.51,117.5Z"/><path class="cls-2" d="M396.34,116.29,381.16,96.9c8.57-1.62,13.58-7.4,13.58-16.27,0-10.19-6.63-17.13-18.36-17.13H355.21a1.12,1.12,0,0,0-1.12,1.12h0a7.2,7.2,0,0,0,7.2,7.21h14.17c7.09,0,10.49,3.63,10.49,8.87s-3.32,9-10.49,9H355.21a1.13,1.13,0,0,0-1.12,1.13v26a.75.75,0,0,0,.75.75h7.22a.76.76,0,0,0,.75-.75V97.37h8.33l13.17,17.19a7.51,7.51,0,0,0,6,2.94h5.48A.75.75,0,0,0,396.34,116.29Z"/><path class="cls-2" d="M276.67,63.5h-33.5a1,1,0,0,0-1,1h0a7.33,7.33,0,0,0,7.33,7.33h27.17a.74.74,0,0,0,.75-.75V64.25A.75.75,0,0,0,276.67,63.5Zm0,45.67h-25a.76.76,0,0,1-.75-.75V94.88a.75.75,0,0,1,.75-.75h23.11a.75.75,0,0,0,.75-.75V86.54a.75.75,0,0,0-.75-.75H243.29a1.13,1.13,0,0,0-1.12,1.13v29.45a1.12,1.12,0,0,0,1.12,1.13h33.38a.75.75,0,0,0,.75-.75v-6.83A.74.74,0,0,0,276.67,109.17Z"/></svg>
'''
'''--- dist/index.html ---
<!DOCTYPE html><html lang="en"><head><meta charset="utf-8"><link rel="icon" href="favicon.bf0781c4.png"><meta name="viewport" content="width=device-width, initial-scale=1"><meta name="theme-color" content="#000000"><link rel="apple-touch-icon" href="favicon.bf0781c4.png"><title>MOVE by Paras</title><link rel="stylesheet" href="src.f45f9627.css"></head><body> <noscript>You need to enable JavaScript to run this app.</noscript> <div id="root"></div> <script src="src.7c2b54e1.js"></script> </body></html>
'''
'''--- dist/logo.b37d81ec.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3">
    <g fill="#61DAFB">
        <path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/>
        <circle cx="420.9" cy="296.5" r="45.7"/>
        <path d="M520.5 78.1z"/>
    </g>
</svg>

'''
'''--- dist/models/ssd_mobilenetv1_model-weights_manifest.json ---
[{"paths":["ssd_mobilenetv1_model-shard1","ssd_mobilenetv1_model-shard2"],"weights":[{"dtype":"float32","shape":[1,1,512,9],"quantization":{"scale":0.0026856216729856004,"min":-0.34107395246917127,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/ClassPredictor/weights"},{"dtype":"float32","shape":[9],"quantization":{"scale":0.00198518248165355,"min":-0.32159956202787515,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/ClassPredictor/biases"},{"dtype":"float32","shape":[1,1,1024,18],"quantization":{"scale":0.003060340296988394,"min":-0.489654447518143,"dtype":"uint8"},"name":"Prediction/BoxPredictor_1/ClassPredictor/weights"},{"dtype":"float32","shape":[18],"quantization":{"scale":0.0008040678851744708,"min":-0.12221831854651957,"dtype":"uint8"},"name":"Prediction/BoxPredictor_1/ClassPredictor/biases"},{"dtype":"float32","shape":[1,1,512,18],"quantization":{"scale":0.0012513800578958848,"min":-0.16017664741067325,"dtype":"uint8"},"name":"Prediction/BoxPredictor_2/ClassPredictor/weights"},{"dtype":"float32","shape":[18],"quantization":{"scale":0.000338070518245884,"min":-0.05510549447407909,"dtype":"uint8"},"name":"Prediction/BoxPredictor_2/ClassPredictor/biases"},{"dtype":"float32","shape":[1,1,256,18],"quantization":{"scale":0.0011819932975021064,"min":-0.1453851755927591,"dtype":"uint8"},"name":"Prediction/BoxPredictor_3/ClassPredictor/weights"},{"dtype":"float32","shape":[18],"quantization":{"scale":0.00015985782386041154,"min":-0.026536398760828316,"dtype":"uint8"},"name":"Prediction/BoxPredictor_3/ClassPredictor/biases"},{"dtype":"float32","shape":[1,1,256,18],"quantization":{"scale":0.0007035591438704846,"min":-0.08513065640832863,"dtype":"uint8"},"name":"Prediction/BoxPredictor_4/ClassPredictor/weights"},{"dtype":"float32","shape":[18],"quantization":{"scale":0.00008793946574716008,"min":-0.013190919862074012,"dtype":"uint8"},"name":"Prediction/BoxPredictor_4/ClassPredictor/biases"},{"dtype":"float32","shape":[1,1,128,18],"quantization":{"scale":0.00081320781918133,"min":-0.11059626340866088,"dtype":"uint8"},"name":"Prediction/BoxPredictor_5/ClassPredictor/weights"},{"dtype":"float32","shape":[18],"quantization":{"scale":0.0000980533805547976,"min":-0.014609953702664841,"dtype":"uint8"},"name":"Prediction/BoxPredictor_5/ClassPredictor/biases"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":3,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/stack_1/2"},{"dtype":"int32","shape":[3],"quantization":{"scale":0.00392156862745098,"min":0,"dtype":"uint8"},"name":"Postprocessor/Slice/begin"},{"dtype":"int32","shape":[3],"quantization":{"scale":1,"min":-1,"dtype":"uint8"},"name":"Postprocessor/Slice/size"},{"dtype":"float32","shape":[1,1,512,12],"quantization":{"scale":0.003730384859384275,"min":-0.4327246436885759,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/BoxEncodingPredictor/weights"},{"dtype":"float32","shape":[12],"quantization":{"scale":0.0018744708568442102,"min":-0.3917644090804399,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/BoxEncodingPredictor/biases"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":3072,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/stack_1/1"},{"dtype":"float32","shape":[1,1,1024,24],"quantization":{"scale":0.00157488017689948,"min":-0.20000978246623397,"dtype":"uint8"},"name":"Prediction/BoxPredictor_1/BoxEncodingPredictor/weights"},{"dtype":"float32","shape":[24],"quantization":{"scale":0.0002823906713256649,"min":-0.043488163384152394,"dtype":"uint8"},"name":"Prediction/BoxPredictor_1/BoxEncodingPredictor/biases"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":1536,"dtype":"uint8"},"name":"Prediction/BoxPredictor_1/stack_1/1"},{"dtype":"float32","shape":[1,1,512,24],"quantization":{"scale":0.0007974451663447361,"min":-0.11004743295557358,"dtype":"uint8"},"name":"Prediction/BoxPredictor_2/BoxEncodingPredictor/weights"},{"dtype":"float32","shape":[24],"quantization":{"scale":0.0001350417988849621,"min":-0.02039131163162928,"dtype":"uint8"},"name":"Prediction/BoxPredictor_2/BoxEncodingPredictor/biases"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":384,"dtype":"uint8"},"name":"Prediction/BoxPredictor_2/stack_1/1"},{"dtype":"float32","shape":[1,1,256,24],"quantization":{"scale":0.0007113990246080885,"min":-0.0860792819775787,"dtype":"uint8"},"name":"Prediction/BoxPredictor_3/BoxEncodingPredictor/weights"},{"dtype":"float32","shape":[24],"quantization":{"scale":0.000050115815418608046,"min":-0.007617603943628423,"dtype":"uint8"},"name":"Prediction/BoxPredictor_3/BoxEncodingPredictor/biases"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":96,"dtype":"uint8"},"name":"Prediction/BoxPredictor_3/stack_1/1"},{"dtype":"float32","shape":[1,1,256,24],"quantization":{"scale":0.000590049314732645,"min":-0.06903576982371946,"dtype":"uint8"},"name":"Prediction/BoxPredictor_4/BoxEncodingPredictor/weights"},{"dtype":"float32","shape":[24],"quantization":{"scale":0.00003513663861097074,"min":-0.006359731588585704,"dtype":"uint8"},"name":"Prediction/BoxPredictor_4/BoxEncodingPredictor/biases"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":24,"dtype":"uint8"},"name":"Prediction/BoxPredictor_4/stack_1/1"},{"dtype":"float32","shape":[1,1,128,24],"quantization":{"scale":0.0005990567744946948,"min":-0.07907549423329971,"dtype":"uint8"},"name":"Prediction/BoxPredictor_5/BoxEncodingPredictor/weights"},{"dtype":"float32","shape":[24],"quantization":{"scale":0.00003392884288640583,"min":-0.006039334033780238,"dtype":"uint8"},"name":"Prediction/BoxPredictor_5/BoxEncodingPredictor/biases"},{"dtype":"float32","shape":[],"quantization":{"scale":1,"min":0.007843137718737125,"dtype":"uint8"},"name":"Preprocessor/mul/x"},{"dtype":"int32","shape":[2],"quantization":{"scale":1,"min":512,"dtype":"uint8"},"name":"Preprocessor/ResizeImage/size"},{"dtype":"float32","shape":[],"quantization":{"scale":1,"min":1,"dtype":"uint8"},"name":"Preprocessor/sub/y"},{"dtype":"float32","shape":[3,3,3,32],"quantization":{"scale":0.03948551065781537,"min":-5.014659853542552,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_0_pointwise/weights"},{"dtype":"float32","shape":[32],"quantization":{"scale":0.0498106133704092,"min":-7.371970778820562,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_0_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,32,1],"quantization":{"scale":0.036833542468501075,"min":-4.714693435968138,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_depthwise/depthwise_weights"},{"dtype":"float32","shape":[32],"quantization":{"scale":0.012173276705046495,"min":-0.012173276705046495,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[32],"quantization":{"scale":0.032182769214405736,"min":-2.4780732295092416,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[32],"quantization":{"scale":0.028287527607936486,"min":-3.366215785344442,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[32],"quantization":{"scale":0.04716738532571232,"min":3.9071404665769224e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,32,64],"quantization":{"scale":0.04010109433940812,"min":-4.290817094316669,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_pointwise/weights"},{"dtype":"float32","shape":[64],"quantization":{"scale":0.2212210038129021,"min":-34.51047659481273,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_1_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,64,1],"quantization":{"scale":0.010024750933927648,"min":-1.343316625146305,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_depthwise/depthwise_weights"},{"dtype":"float32","shape":[64],"quantization":{"scale":0.006120916675118839,"min":0.5227176547050476,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[64],"quantization":{"scale":0.02317035385206634,"min":-0.7646216771181892,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[64],"quantization":{"scale":0.04980821422502106,"min":-5.8275610643274645,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[64],"quantization":{"scale":0.051751047022202436,"min":3.916113799002297e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,64,128],"quantization":{"scale":0.021979344124887504,"min":-2.1319963801140878,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_pointwise/weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.09958663267247816,"min":-11.054116226645077,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_2_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,128,1],"quantization":{"scale":0.01943492702409333,"min":-2.6237151482525993,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_depthwise/depthwise_weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.017852897737540452,"min":0.40204083919525146,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.029888209174661076,"min":-1.972621805527631,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.029319268581913967,"min":-5.130872001834945,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.014018708584355373,"min":3.9083178263362604e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,128,128],"quantization":{"scale":0.020776657964669022,"min":-2.5347522716896207,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_pointwise/weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.14383157094319662,"min":-9.636715253194174,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_3_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,128,1],"quantization":{"scale":0.004463558571011412,"min":-0.5981168485155293,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_depthwise/depthwise_weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.006487431245691636,"min":0.47910428047180176,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.026542164297664865,"min":-1.2209395576925839,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.05119945675719018,"min":-8.60150873520795,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.03081628388049556,"min":3.911508751095344e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,128,256],"quantization":{"scale":0.010758659886378868,"min":-1.0328313490923713,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_pointwise/weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.08058219610476026,"min":-9.34753474815219,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_4_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,256,1],"quantization":{"scale":0.01145936741548426,"min":-1.3292866201961742,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_depthwise/depthwise_weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.0083988838336047,"min":0.36280909180641174,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.02858148649627087,"min":-3.6584302715226715,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.03988401375564874,"min":-7.099354448505476,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.009090481683904049,"min":0.020878996700048447,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,256,256],"quantization":{"scale":0.008951201625898773,"min":-1.1189002032373465,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_pointwise/weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.051758006974762565,"min":-5.745138774198645,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_5_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,256,1],"quantization":{"scale":0.004110433190476661,"min":-0.6042336790000691,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_depthwise/depthwise_weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.013170199768216002,"min":0.3386639356613159,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.03599378548416437,"min":-3.70735990486893,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.026967673208199296,"min":-3.748506575939702,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.012615410486857097,"min":3.9111388979838637e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,256,512],"quantization":{"scale":0.00822840648538926,"min":-1.1848905338960536,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.06608965817619772,"min":-7.468131373910342,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_6_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,512,1],"quantization":{"scale":0.008801074355256323,"min":-0.9593171047229393,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_depthwise/depthwise_weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.030577416513480393,"min":0.3285980224609375,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.04778536441279393,"min":-8.935863145192464,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.04331884945140165,"min":-9.660103427662568,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.04126455444367785,"min":0.000604183878749609,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,512,512],"quantization":{"scale":0.009305818408143287,"min":-1.1446156642016243,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.04640720217835669,"min":-4.733534622192383,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_7_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,512,1],"quantization":{"scale":0.008138792655047248,"min":-0.9766551186056698,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_depthwise/depthwise_weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.027351748358969596,"min":0.34030041098594666,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.04415061053107767,"min":-7.019947074441349,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.02476683784933651,"min":-2.9224868662217083,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.02547598832684076,"min":0.00026032101595774293,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,512,512],"quantization":{"scale":0.01083052625843123,"min":-1.2563410459780227,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.06360894371481503,"min":-7.951117964351878,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_8_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,512,1],"quantization":{"scale":0.006704086883395326,"min":-0.8648272079579971,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_depthwise/depthwise_weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.015343831567203297,"min":0.2711026668548584,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.03378283930759804,"min":-4.797163181678922,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.021910778213949763,"min":-3.987761634938857,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.009284070410007296,"min":0.000021581046894425526,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,512,512],"quantization":{"scale":0.012783036979974485,"min":-1.9046725100161983,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.07273082733154297,"min":-9.52773838043213,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_9_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,512,1],"quantization":{"scale":0.006126228033327589,"min":-0.7351473639993107,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_depthwise/depthwise_weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.029703759212119908,"min":0.28687000274658203,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.04394429898729511,"min":-6.3279790541704966,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.016566915605582443,"min":-2.7501079905266854,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.012152872833551145,"min":3.913338286370366e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,512,512],"quantization":{"scale":0.01354524388032801,"min":-1.7473364605623134,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.08566816367355047,"min":-9.937506986131854,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_10_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,512,1],"quantization":{"scale":0.006012305558896532,"min":-0.7876120282154457,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_depthwise/depthwise_weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.01469323155926723,"min":0.29223933815956116,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.030889174517463234,"min":-3.2433633243336395,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.014836942448335536,"min":-2.047498057870304,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.007234466105343445,"min":0.00013165915152058005,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,512,512],"quantization":{"scale":0.016261722527298274,"min":-1.4798167499841428,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.091437328563017,"min":-14.172785927267636,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_11_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,512,1],"quantization":{"scale":0.004750356487199372,"min":-0.650798838746314,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_depthwise/depthwise_weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.008174965545242907,"min":0.3120670020580292,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.030133422215779623,"min":-2.41067377726237,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.006088157261119169,"min":-0.7853722866843729,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.003668997334498985,"min":3.9124486300013356e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,512,1024],"quantization":{"scale":0.010959514449624454,"min":-1.4028178495519301,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_pointwise/weights"},{"dtype":"float32","shape":[1024],"quantization":{"scale":0.10896045834410424,"min":-14.818622334798176,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_12_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,1024,1],"quantization":{"scale":0.004633033509347953,"min":-0.5652300881404502,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_depthwise/depthwise_weights"},{"dtype":"float32","shape":[1024],"quantization":{"scale":0.022285057224479377,"min":0.23505790531635284,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_depthwise/BatchNorm/gamma"},{"dtype":"float32","shape":[1024],"quantization":{"scale":0.0324854850769043,"min":-3.9957146644592285,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_depthwise/BatchNorm/beta"},{"dtype":"float32","shape":[1024],"quantization":{"scale":0.014760061806323482,"min":-2.125448900110581,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_mean"},{"dtype":"float32","shape":[1024],"quantization":{"scale":0.0036057423142825855,"min":3.9067056828997994e-36,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_depthwise/BatchNorm/moving_variance"},{"dtype":"float32","shape":[1,1,1024,1024],"quantization":{"scale":0.017311988157384536,"min":-2.094750567043529,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_pointwise/weights"},{"dtype":"float32","shape":[1024],"quantization":{"scale":0.16447528764313343,"min":-25.658144872328815,"dtype":"uint8"},"name":"MobilenetV1/Conv2d_13_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[1,1,1024,256],"quantization":{"scale":0.0026493051472832175,"min":-0.36825341547236723,"dtype":"uint8"},"name":"Prediction/Conv2d_0_pointwise/weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.012474596734140433,"min":-2.3078003958159803,"dtype":"uint8"},"name":"Prediction/Conv2d_0_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,256,512],"quantization":{"scale":0.014533351449405445,"min":-1.8166689311756807,"dtype":"uint8"},"name":"Prediction/Conv2d_1_pointwise/weights"},{"dtype":"float32","shape":[512],"quantization":{"scale":0.024268776762719248,"min":-2.4754152297973633,"dtype":"uint8"},"name":"Prediction/Conv2d_1_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[1,1,512,128],"quantization":{"scale":0.002208403746287028,"min":-0.28709248701731366,"dtype":"uint8"},"name":"Prediction/Conv2d_2_pointwise/weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.012451349052728392,"min":-1.5937726787492341,"dtype":"uint8"},"name":"Prediction/Conv2d_2_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,128,256],"quantization":{"scale":0.026334229637594783,"min":-2.8967652601354263,"dtype":"uint8"},"name":"Prediction/Conv2d_3_pointwise/weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.02509917792151956,"min":-1.4055539636050953,"dtype":"uint8"},"name":"Prediction/Conv2d_3_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[1,1,256,128],"quantization":{"scale":0.004565340046789132,"min":-0.3971845840706545,"dtype":"uint8"},"name":"Prediction/Conv2d_4_pointwise/weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.017302456556581983,"min":-2.5953684834872974,"dtype":"uint8"},"name":"Prediction/Conv2d_4_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,128,256],"quantization":{"scale":0.025347338470758176,"min":-3.8527954475552426,"dtype":"uint8"},"name":"Prediction/Conv2d_5_pointwise/weights"},{"dtype":"float32","shape":[256],"quantization":{"scale":0.033134659598855414,"min":-2.9158500446992766,"dtype":"uint8"},"name":"Prediction/Conv2d_5_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[1,1,256,64],"quantization":{"scale":0.002493104397081861,"min":-0.2817207968702503,"dtype":"uint8"},"name":"Prediction/Conv2d_6_pointwise/weights"},{"dtype":"float32","shape":[64],"quantization":{"scale":0.011383360974928912,"min":-1.2749364291920382,"dtype":"uint8"},"name":"Prediction/Conv2d_6_pointwise/convolution_bn_offset"},{"dtype":"float32","shape":[3,3,64,128],"quantization":{"scale":0.020821522731407017,"min":-2.7484410005457263,"dtype":"uint8"},"name":"Prediction/Conv2d_7_pointwise/weights"},{"dtype":"float32","shape":[128],"quantization":{"scale":0.052144218893612135,"min":-3.5979511036592373,"dtype":"uint8"},"name":"Prediction/Conv2d_7_pointwise/convolution_bn_offset"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":6,"dtype":"uint8"},"name":"Prediction/BoxPredictor_5/stack_1/1"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":1,"dtype":"uint8"},"name":"concat_1/axis"},{"dtype":"int32","shape":[1],"quantization":{"scale":1,"min":0,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/strided_slice/stack"},{"dtype":"int32","shape":[1],"quantization":{"scale":1,"min":1,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/strided_slice/stack_1"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":5118,"dtype":"uint8"},"name":"Postprocessor/stack/1"},{"dtype":"int32","shape":[],"quantization":{"scale":1,"min":4,"dtype":"uint8"},"name":"Prediction/BoxPredictor_0/stack/3"},{"dtype":"float32","shape":[1, 5118, 4],"name":"Output/extra_dim"}]}]
'''
'''--- dist/near.45fb95a6.svg ---
<svg width="97px" height="97px" viewBox="0 0 97 97" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
    <defs>
        <linearGradient x1="8.03545747%" y1="96.638877%" x2="92.2738738%" y2="3.34259955%" id="linearGradient-1">
            <stop stop-color="#4B4F54" offset="21%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="42%"></stop>
            <stop stop-color="#4B4F54" stop-opacity="0" offset="59%"></stop>
            <stop stop-color="#4B4F54" offset="81%"></stop>
        </linearGradient>
    </defs>
    <g id="Page-1" stroke="none" stroke-width="1" fill="none" fillRule="evenodd">
        <g id="create" transform="translate(-1054.000000, -595.000000)" fillRule="nonzero">
            <g id="Group-5" transform="translate(1054.000000, 595.000000)">
                <path d="M12.094392,97.0000195 C15.2088036,97.0039527 18.1698244,95.6000877 20.2022804,93.1559341 L20.2022804,93.1559341 L93.4074074,5.20030368 C91.4546314,1.96447154 88.0299073,1.95462232e-05 84.3456498,1.95462232e-05 L84.3456498,1.95462232e-05 C81.2486381,-0.0036811685 78.3027381,1.38590639 76.2724476,3.80817433 L2.69444444,91.2428789 C4.57536204,94.7980982 8.18030259,97.0059941 12.094392,97.0000195 Z" id="Path" fill="url(#linearGradient-1)"></path>
                <path d="M11.0831481,97 C12.8513879,97 14.5941045,96.5780666 16.1666667,95.769537 L16.1666667,22.327963 L75.0672222,93.0122222 C77.1773546,95.5384707 80.2990545,96.9989921 83.5906481,97 L85.9168519,97 C92.0358529,96.9950473 96.9950473,92.0358529 97,85.9168519 L97,11.0831481 C96.9950473,4.96414708 92.0358529,0.00495265405 85.9168519,0 L85.9168519,0 C84.1625017,0.00260840866 82.4333785,0.417967183 80.8692593,1.2125 L80.8692593,74.672037 L21.9327778,3.98777778 C19.8226454,1.4615293 16.7009455,0.00100794796 13.4093519,0 L11.0831481,0 C4.96414708,0.00495265405 0.00495265405,4.96414708 0,11.0831481 L0,85.9168519 C0.00495265405,92.0358529 4.96414708,96.9950473 11.0831481,97 Z" id="Path" fill="#4B4F54"></path>
            </g>
        </g>
    </g>
</svg>
'''
'''--- package.json ---
{
  "name": "move",
  "version": "0.1.0",
  "scripts": {
    "build": "npm run build:css && parcel build src/index.html --public-url ./",
    "start": "npm run watch:css && parcel src/index.html",
    "dev": "npm run start",
    "build:css": "postcss src/assets/tailwind.css -o src/assets/main.css",
    "watch:css": "postcss src/assets/tailwind.css -o src/assets/main.css"
  },
  "devDependencies": {
    "@babel/core": "^7.10.4",
    "@babel/preset-env": "^7.10.4",
    "@babel/preset-react": "^7.9.4",
    "assemblyscript": "^0.9.4",
    "babel-jest": "^26.0.0",
    "env-cmd": "^10.1.0",
    "gh-pages": "^2.2.0",
    "jest": "^26.0.1",
    "jest-environment-node": "^26.0.0",
    "near-sdk-as": "^0.3.1",
    "near-shell": "^0.22.0",
    "nodemon": "^2.0.3",
    "parcel-bundler": "^1.12.4",
    "react-test-renderer": "^16.13.1",
    "tailwindcss": "^1.4.6"
  },
  "dependencies": {
    "autoprefixer": "^9.8.4",
    "axios": "^0.19.2",
    "canvas": "^2.6.1",
    "compressorjs": "^1.0.6",
    "face-api.js": "^0.22.2",
    "ipfs-http-client": "44.0.3",
    "javascript-time-ago": "^2.0.8",
    "near-api-js": "^0.24.0",
    "next": "^9.4.4",
    "postcss-cli": "^7.1.1",
    "prop-types": "^15.7.2",
    "react": "^16.8.3",
    "react-css-loaders": "0.0.5",
    "react-dom": "^16.6.0",
    "react-infinite-scroll-component": "^5.0.5",
    "react-redux": "^7.2.0",
    "react-router-dom": "^5.2.0",
    "redux": "^2.0.0 || ^3.0.0 || ^4.0.0-0",
    "regenerator-runtime": "^0.13.5"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "jest": {
    "moduleNameMapper": {
      "\\.(jpg|ico|jpeg|png|gif|eot|otf|webp|svg|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$": "<rootDir>/src/__mocks__/fileMock.js",
      "\\.(css|less)$": "<rootDir>/src/__mocks__/fileMock.js"
    },
    "setupFiles": [
      "<rootDir>/src/jest.init.js"
    ],
    "testEnvironment": "near-shell/test_environment",
    "testPathIgnorePatterns": [
      "<rootDir>/assembly/",
      "<rootDir>/node_modules/"
    ]
  },
  "browserslist": {
    "production": [
      "last 2 chrome version"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- postcss.config.js ---
const tailwindcss = require('tailwindcss');
module.exports = {
  plugins: [
    tailwindcss('./tailwind.js'),
    require('autoprefixer'),
  ],
};
'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React, { createContext, useContext, useEffect, useState } from 'react'
import * as faceapi from 'face-api.js'
import './assets/main.css'
import { BrowserRouter as Router, Switch, Route, useHistory, Link } from 'react-router-dom'
import Home from './pages/Home'
import NewPost from './pages/NewPost'
import Login from './pages/Login'
import NewPostMementoList from './pages/NewPostMementoList'
import ipfs from './utils/ipfs'
import NewMovement from './pages/NewMovement'
import Movement from './pages/Movement'
import Profile from './pages/Profile'
import { RotateSpinLoader } from 'react-css-loaders'

const MODEL_URL = `/models`

const DEFAULT_AVATAR = [
  {
    url: 'QmWvmboVv5wgApgwPcVns3HF3FKpgXSezqtkrJoq5xriCH',
    type: 'ipfs'
  },
  {
    url: 'Qmab3Umre1GmXuSnkh9wxdr4QNSVtV8DBTLQBRPFbJbUUS',
    type: 'ipfs'
  },
  {
    url: 'QmfBxyRh5RwBAtB85Q6EGQEfNfprCDdz5mNu3HhLWynpo3',
    type: 'ipfs'
  },
  {
    url: 'QmRSFZvUwWD61wyYeuYC2B9Z8JPxXXHFmTHeGeRFi7Bn7L',
    type: 'ipfs'
  },
  {
    url: 'QmYBBFGBZV17oJb9HFQNB7EHmhDMo94GBPBdFnQEqSmF94',
    type: 'ipfs'
  },
  {
    url: 'QmcUhG6UjqUYKydg7KoAmTok4TSwRXhrvCLb5gciSzatig',
    type: 'ipfs'
  },
  {
    url: 'QmX6mc7wfDza8mDFMDGfmZsUQNZv1LhP8ztEURmHZf1xAF',
    type: 'ipfs'
  },
  {
    url: 'Qmdqg7bCjiKagvt421qhGdX5A6jXrAFVaUvxY6DwZMzLtE',
    type: 'ipfs'
  },
  {
    url: 'QmYeGSYCn14ppxnP26D5p9W8NRgPEBqkfkYfoAULCfKhyE',
    type: 'ipfs'
  },
  {
    url: 'QmQa68qLbW7iSSVNaS8o1rW9PiCYVoAneqn17D4oz6fbGu',
    type: 'ipfs'
  },
]

const AppContext = createContext()
export const useNear = () => useContext(AppContext)

const App = ({ contractParas, wallet, account }) => {
  const [loading, setLoading] = useState(true)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [me, setMe] = useState(null)

  useEffect(() => {
    const init = async () => {
      await ipfs.init()
      await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL)

      if (wallet.isSignedIn()) {
        let profile = await contractParas.getUserById({
          id: account.accountId
        })
        if (!profile) {
          const avatar = DEFAULT_AVATAR[Math.floor(Math.random() * DEFAULT_AVATAR.length)]
          try {
            profile = await contractParas.createUser({
              imgAvatar: avatar,
              bio: ''
            })
          } catch (err) {
            console.log(err)
          }
        }
        setMe(profile)
      }
      else {
        console.log('not logged in ')
      }
      setLoading(false)
    }
    init()
  }, [])

  const value = { contractParas, wallet, account, setIsSubmitting, me }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center overflow-hidden">
        <div>
          <svg width="100" height="70" viewBox="0 0 94 57" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0.429688 1.09375H6.10156L11.1406 15.1562L16.1328 1.04688H21.8516V31H17V9.29688L12.8281 20.5938H9.26562L5.23438 9.29688V31H0.429688V1.09375Z" fill="white" />
            <path d="M35.1406 31.8672C32.7812 31.8672 30.75 31.2422 29.0469 29.9922C27.3594 28.7266 26.0625 26.9062 25.1562 24.5312C24.2656 22.1406 23.8203 19.2891 23.8203 15.9766C23.8203 12.7109 24.2656 9.90625 25.1562 7.5625C26.0625 5.21875 27.3594 3.42969 29.0469 2.19531C30.75 0.945312 32.7812 0.320312 35.1406 0.320312C37.5 0.320312 39.5234 0.945312 41.2109 2.19531C42.9141 3.42969 44.2109 5.21875 45.1016 7.5625C46.0078 9.90625 46.4609 12.7109 46.4609 15.9766C46.4609 19.2891 46.0078 22.1406 45.1016 24.5312C44.2109 26.9062 42.9141 28.7266 41.2109 29.9922C39.5234 31.2422 37.5 31.8672 35.1406 31.8672ZM35.1406 27.5547C36.3281 27.5547 37.3516 27.0703 38.2109 26.1016C39.0859 25.1172 39.75 23.7344 40.2031 21.9531C40.6719 20.1562 40.9062 18.0703 40.9062 15.6953C40.9062 13.4922 40.6719 11.5625 40.2031 9.90625C39.75 8.23438 39.0859 6.94531 38.2109 6.03906C37.3516 5.11719 36.3281 4.65625 35.1406 4.65625C33.9688 4.65625 32.9453 5.11719 32.0703 6.03906C31.1953 6.94531 30.5234 8.23438 30.0547 9.90625C29.6016 11.5625 29.375 13.4922 29.375 15.6953C29.375 18.0703 29.6016 20.1562 30.0547 21.9531C30.5234 23.7344 31.1875 25.1172 32.0469 26.1016C32.9219 27.0703 33.9531 27.5547 35.1406 27.5547Z" fill="white" />
            <path d="M47.4688 1.09375H53.1406L59.4219 22.3047L65.375 1.09375H70.9062L61.2969 31H57.1719L47.4688 1.09375Z" fill="white" />
            <path d="M73.6953 1.09375H93.1719V5.71094H78.9219V13.0938H90.7344V17.8047H78.9219V26.3828H93.0781V31H73.6953V1.09375Z" fill="white" />
            <path d="M5.38672 52.3633C4.81641 52.3633 4.27344 52.2383 3.75781 51.9883C3.24219 51.7383 2.80078 51.3828 2.43359 50.9219L2.07031 52H0.195312V35.8047H3.07812V36.0742C2.99219 36.168 2.9375 36.2734 2.91406 36.3906C2.89062 36.5 2.88281 36.6875 2.89062 36.9531V41.7578C3.23438 41.375 3.63281 41.0781 4.08594 40.8672C4.54688 40.6562 5.01172 40.5508 5.48047 40.5508C6.33984 40.5508 7.12891 40.7656 7.84766 41.1953C8.56641 41.6172 9.13672 42.25 9.55859 43.0938C9.98828 43.9375 10.2031 44.9609 10.2031 46.1641C10.2031 47.4766 9.97266 48.6016 9.51172 49.5391C9.05859 50.4766 8.46094 51.1836 7.71875 51.6602C6.98438 52.1289 6.20703 52.3633 5.38672 52.3633ZM5.04688 50.125C5.44531 50.125 5.82812 50.0039 6.19531 49.7617C6.57031 49.5195 6.87891 49.1289 7.12109 48.5898C7.37109 48.0508 7.49609 47.3633 7.49609 46.5273C7.49609 45.3867 7.28516 44.4688 6.86328 43.7734C6.44141 43.0781 5.8125 42.7305 4.97656 42.7305C4.17969 42.7305 3.62891 43.0508 3.32422 43.6914C3.01953 44.3242 2.86719 45.1836 2.86719 46.2695C2.86719 47.6133 3.05469 48.5938 3.42969 49.2109C3.80469 49.8203 4.34375 50.125 5.04688 50.125Z" fill="#E2E2E2" />
            <path d="M21.8984 40.7969C21.875 41.4375 21.7734 42.0898 21.5938 42.7539C21.4141 43.4102 21.1562 44.1953 20.8203 45.1094L18.0312 52.7969C17.5781 54.0391 17.0234 54.9219 16.3672 55.4453C15.7188 55.9766 14.9297 56.2422 14 56.2422C13.4766 56.2422 13.0039 56.1523 12.582 55.9727C12.168 55.8008 11.7188 55.5234 11.2344 55.1406L12.1133 53.2188L12.207 53.0195L12.4531 53.1367C12.4688 53.168 12.4922 53.2344 12.5234 53.3359C12.5625 53.4375 12.625 53.5312 12.7109 53.6172C12.7969 53.7109 12.9062 53.8008 13.0391 53.8867C13.3359 54.082 13.6328 54.1797 13.9297 54.1797C14.3203 54.1797 14.6875 53.9844 15.0312 53.5938C15.375 53.2031 15.6914 52.6562 15.9805 51.9531L11.7383 40.7969H14.3633L17.1758 48.6602L18.6289 44.6523C18.8633 43.9258 19.0391 43.2891 19.1562 42.7422C19.2812 42.1953 19.3438 41.6562 19.3438 41.125C19.3438 40.9766 19.3398 40.8672 19.332 40.7969H21.8984Z" fill="#E2E2E2" />
            <path d="M36.1953 37.0469H41.2695C42.4102 37.0469 43.3555 37.2461 44.1055 37.6445C44.8555 38.043 45.4102 38.582 45.7695 39.2617C46.1289 39.9336 46.3086 40.6914 46.3086 41.5352C46.3086 42.3789 46.1328 43.1328 45.7812 43.7969C45.4297 44.4609 44.8867 44.9883 44.1523 45.3789C43.418 45.7617 42.4961 45.9531 41.3867 45.9531H38.9375V52H36.1953V37.0469ZM41.1875 43.668C41.9844 43.668 42.5742 43.4805 42.957 43.1055C43.3477 42.7305 43.543 42.2305 43.543 41.6055C43.543 40.9492 43.3438 40.4219 42.9453 40.0234C42.5547 39.625 41.9766 39.4258 41.2109 39.4258H38.9375V43.668H41.1875Z" fill="#E2E2E2" />
            <path d="M52.7305 40.4336C54.207 40.4336 55.3867 40.8008 56.2695 41.5352C57.1602 42.2695 57.6055 43.4844 57.6055 45.1797V52H55.0391V50.9922C54.6094 51.3984 54.0898 51.7188 53.4805 51.9531C52.8789 52.1797 52.2305 52.293 51.5352 52.293C50.3711 52.293 49.4844 52.0078 48.875 51.4375C48.2656 50.8594 47.9609 50.0781 47.9609 49.0938C47.9609 48.2969 48.2109 47.6172 48.7109 47.0547C49.2188 46.4922 49.9453 46.0664 50.8906 45.7773C51.8438 45.4805 52.9805 45.332 54.3008 45.332H55.1211C55.043 44.3555 54.8047 43.6602 54.4062 43.2461C54.0078 42.8242 53.4023 42.6133 52.5898 42.6133C52.0742 42.6133 51.5391 42.75 50.9844 43.0234C50.4297 43.2891 49.918 43.6641 49.4492 44.1484L48.0781 42.3789C48.7812 41.7383 49.5352 41.2539 50.3398 40.9258C51.1523 40.5977 51.9492 40.4336 52.7305 40.4336ZM52.4023 50.2422C53.1992 50.2422 53.8281 49.9922 54.2891 49.4922C54.75 48.9922 55.0273 48.2031 55.1211 47.125H54.582C53.207 47.125 52.2031 47.2734 51.5703 47.5703C50.9375 47.8672 50.6211 48.3359 50.6211 48.9766C50.6211 49.4141 50.7773 49.7344 51.0898 49.9375C51.4102 50.1406 51.8477 50.2422 52.4023 50.2422Z" fill="#E2E2E2" />
            <path d="M67.1328 40.5508C67.6875 40.5508 68.2383 40.6562 68.7852 40.8672C69.3398 41.0703 69.832 41.375 70.2617 41.7812L68.9727 44.3594L68.7266 44.2422C68.7109 44.1875 68.6953 44.1094 68.6797 44.0078C68.6562 43.8594 68.6211 43.7344 68.5742 43.6328C68.5352 43.5234 68.4492 43.4141 68.3164 43.3047C67.9258 42.9922 67.4453 42.8359 66.875 42.8359C66.3047 42.8359 65.7891 42.9727 65.3281 43.2461C64.8672 43.5117 64.5039 43.8945 64.2383 44.3945C63.9805 44.8945 63.8516 45.4766 63.8516 46.1406V52H61.1328V40.7969H63.8984V42.4023C64.1953 41.8242 64.6289 41.3711 65.1992 41.043C65.7773 40.7148 66.4219 40.5508 67.1328 40.5508Z" fill="#E2E2E2" />
            <path d="M76.7305 40.4336C78.207 40.4336 79.3867 40.8008 80.2695 41.5352C81.1602 42.2695 81.6055 43.4844 81.6055 45.1797V52H79.0391V50.9922C78.6094 51.3984 78.0898 51.7188 77.4805 51.9531C76.8789 52.1797 76.2305 52.293 75.5352 52.293C74.3711 52.293 73.4844 52.0078 72.875 51.4375C72.2656 50.8594 71.9609 50.0781 71.9609 49.0938C71.9609 48.2969 72.2109 47.6172 72.7109 47.0547C73.2188 46.4922 73.9453 46.0664 74.8906 45.7773C75.8438 45.4805 76.9805 45.332 78.3008 45.332H79.1211C79.043 44.3555 78.8047 43.6602 78.4062 43.2461C78.0078 42.8242 77.4023 42.6133 76.5898 42.6133C76.0742 42.6133 75.5391 42.75 74.9844 43.0234C74.4297 43.2891 73.918 43.6641 73.4492 44.1484L72.0781 42.3789C72.7812 41.7383 73.5352 41.2539 74.3398 40.9258C75.1523 40.5977 75.9492 40.4336 76.7305 40.4336ZM76.4023 50.2422C77.1992 50.2422 77.8281 49.9922 78.2891 49.4922C78.75 48.9922 79.0273 48.2031 79.1211 47.125H78.582C77.207 47.125 76.2031 47.2734 75.5703 47.5703C74.9375 47.8672 74.6211 48.3359 74.6211 48.9766C74.6211 49.4141 74.7773 49.7344 75.0898 49.9375C75.4102 50.1406 75.8477 50.2422 76.4023 50.2422Z" fill="#E2E2E2" />
            <path d="M89.3633 52.3867C88.2383 52.3867 87.2578 52.2383 86.4219 51.9414C85.5859 51.6367 84.8203 51.1523 84.125 50.4883L85.25 48.5195L85.3555 48.332L85.5898 48.4727C85.6055 48.5117 85.625 48.582 85.6484 48.6836C85.6797 48.7852 85.7305 48.8867 85.8008 48.9883C85.8789 49.082 85.9805 49.1758 86.1055 49.2695C86.543 49.5977 87.0234 49.8398 87.5469 49.9961C88.0781 50.1445 88.6914 50.2188 89.3867 50.2188C90.668 50.2188 91.3086 49.7969 91.3086 48.9531C91.3086 48.6953 91.2305 48.4727 91.0742 48.2852C90.918 48.0977 90.668 47.9258 90.3242 47.7695C89.9805 47.6133 89.5078 47.4492 88.9062 47.2773C87.6172 46.9414 86.6133 46.5195 85.8945 46.0117C85.1836 45.4961 84.8281 44.7891 84.8281 43.8906C84.8281 43.2422 85 42.668 85.3438 42.168C85.6953 41.6602 86.1953 41.2656 86.8438 40.9844C87.5 40.6953 88.2656 40.5508 89.1406 40.5508C90.0156 40.5508 90.8125 40.6953 91.5312 40.9844C92.2578 41.2656 92.9258 41.6992 93.5352 42.2852L92.1758 44.1719L92.0586 44.3477L91.8359 44.1953C91.8281 44.1562 91.8125 44.0859 91.7891 43.9844C91.7734 43.875 91.7305 43.7695 91.6602 43.668C91.5898 43.5664 91.4922 43.4727 91.3672 43.3867C90.7344 42.9336 90.0078 42.707 89.1875 42.707C88.7109 42.707 88.3125 42.7891 87.9922 42.9531C87.6719 43.1172 87.5117 43.3398 87.5117 43.6211C87.5117 43.8789 87.5977 44.1016 87.7695 44.2891C87.9492 44.4688 88.2148 44.6328 88.5664 44.7812C88.9258 44.9297 89.4375 45.1055 90.1016 45.3086C91.0234 45.5898 91.7461 45.875 92.2695 46.1641C92.793 46.4453 93.1758 46.7852 93.418 47.1836C93.6602 47.582 93.7812 48.082 93.7812 48.6836C93.7812 49.332 93.5859 49.9414 93.1953 50.5117C92.8125 51.0742 92.2852 51.5273 91.6133 51.8711C90.9414 52.2148 90.1914 52.3867 89.3633 52.3867Z" fill="#E2E2E2" />
          </svg>
          <div className="mt-8">
            <RotateSpinLoader style={{
              margin: `auto`
            }} color="#e13128" size={6} />
          </div>
        </div>
      </div>
    )
  }

  return (
    <AppContext.Provider value={value}>
      {
        isSubmitting && (
          <div className="fixed inset-0 z-50 flex items-center" style={{
            backgroundColor: `rgba(0,0,0,0.86)`
          }}>
            <div className="max-w-xs m-auto w-full p-4">
              <svg className="rotate-z m-auto" width="60" height="40" viewBox="0 0 60 40" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M4.28572 39.9438H9.9012L8.47263 28.9771C14.4579 29.839 27.1429 30.1897 30 24.6974C32.8571 30.1897 45.5421 29.839 51.5274 28.9771L50.0988 39.9438H55.7143L60 0L44.331 4.2797C39.0778 5.58738 30 9.73631 30 15.8705C30 9.73631 20.9222 5.58738 15.669 4.2797L0 0L4.28572 39.9438ZM7.85703 5.25234C13.5713 6.67891 25.8376 11.8145 28.6948 20.9446C25.6597 25.4907 19.4788 25.3418 15.6509 25.2477C15.1546 25.2355 14.6957 25.2243 14.2857 25.2243C6.42858 25.2243 7.53768 6.48246 7.85703 5.25234ZM52.143 5.25235C46.4287 6.67892 34.1624 11.8145 31.3053 20.9446C34.3404 25.4907 40.5212 25.3418 44.3491 25.2477C44.8455 25.2355 45.3043 25.2243 45.7143 25.2243C53.5714 25.2243 52.4623 6.48246 52.143 5.25235Z" fill="white" />
              </svg>
              <p className="text-white text-center mt-4">Loading...</p>
            </div>
          </div>
        )
      }

      <div className="max-w-xl m-auto">
        <Router>
          <Switch>
            <Route path="/" exact>
              <Home />
            </Route>
            <Route path="/login" exact>
              <Login />
            </Route>
            <Route path="/m/:mementoId" exact>
              <Movement />
            </Route>
            <Route path="/new/post" exact>
              <NewPostMementoList />
            </Route>
            <Route path="/new/movement" exact>
              <NewMovement />
            </Route>
            <Route path="/new/post/:mementoId">
              <NewPost />
            </Route>
            <Route path="/:userId" exact>
              <Profile />
            </Route>
          </Switch>
        </Router>
      </div>
    </AppContext.Provider>
  )
}

export default App;

'''
'''--- src/assets/tailwind.css ---
@tailwind base;

@tailwind components;

@tailwind utilities;

@import url('https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;600;700;800&display=swap');

* {
  box-sizing: border-box;
}

body {
  font-family: 'Inconsolata', monospace;
  font-weight: 400;
  @apply bg-dark-0;
}

h1, h2, h3, h4, button {
  @apply tracking-normal;
}

p {
  @apply leading-normal;
  letter-spacing: -.02em;
}

button:focus {
  @apply outline-none;
}

button:disabled {
  @apply opacity-25 cursor-not-allowed;
}

input, textarea {
  font-family: 'Inconsolata', monospace;
}

textarea {
  @apply outline-none;
}

a {
  cursor: pointer;
}

.rotate-z {
  -webkit-animation: rotate-z 2s infinite ease-in-out; /* Safari 4+ */
  -moz-animation:    rotate-z 2s infinite ease-in-out; /* Fx 5+ */
  -o-animation:      rotate-z 2s infinite ease-in-out; /* Opera 12+ */
  animation:         rotate-z 2s infinite ease-in-out; /* IE 10+, Fx 29+ */
}

@-webkit-keyframes rotate-z {
  0%   { transform: rotate3d(0,1,0,0deg); }
  100% { transform: rotate3d(0,1,0,360deg); }
}
@-moz-keyframes rotate-z {
  0%   { transform: rotate3d(0,1,0,0deg); }
  100% { transform: rotate3d(0,1,0,360deg); }
}
@-o-keyframes rotate-z {
  0%   { transform: rotate3d(0,1,0,0deg); }
  100% { transform: rotate3d(0,1,0,360deg); }
}
@keyframes rotate-z {
  0%   { transform: rotate3d(0,1,0,0deg); }
  100% { transform: rotate3d(0,1,0,360deg); }
}

/* Chrome, Safari, Edge, Opera */
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}

/* Firefox */
input[type=number] {
  -moz-appearance: textfield;
}
'''
'''--- src/components/Image.js ---
import React from 'react'

const Image = ({ data = {}, className, style, onClick, id}) => {
  let url = ''
  if(data && data.type === 'ipfs') {
    url = `https://ipfs-gateway.paras.id/ipfs/${data.url}`
  }
  else if(typeof data === 'string') {
    url = data
  }
  if(onclick) {
    return (
      <img id={id} onClick={onClick} className={className} style={style} src={url} />
    )
  }
  return (
    <img id={id} className={className} style={style} src={url} />
  )
}

export default Image
'''
'''--- src/components/InfiniteLoader.js ---
import React from 'react'

const InfiniteLoader = () => {
  return (
    <div className="py-8">
        <svg className="m-auto" width="60" height="30" viewBox="0 0 120 30" xmlns="http://www.w3.org/2000/svg" fill="white">
    <circle cx="15" cy="15" r="15">
        <animate attributeName="r" from="15" to="15"
                 begin="0s" dur="0.8s"
                 values="15;9;15" calcMode="linear"
                 repeatCount="indefinite" />
        <animate attributeName="fillOpacity" from="1" to="1"
                 begin="0s" dur="0.8s"
                 values="1;.5;1" calcMode="linear"
                 repeatCount="indefinite" />
    </circle>
    <circle cx="60" cy="15" r="9" fillOpacity="0.3">
        <animate attributeName="r" from="9" to="9"
                 begin="0s" dur="0.8s"
                 values="9;15;9" calcMode="linear"
                 repeatCount="indefinite" />
        <animate attributeName="fillOpacity" from="0.5" to="0.5"
                 begin="0s" dur="0.8s"
                 values=".5;1;.5" calcMode="linear"
                 repeatCount="indefinite" />
    </circle>
    <circle cx="105" cy="15" r="15">
        <animate attributeName="r" from="15" to="15"
                 begin="0s" dur="0.8s"
                 values="15;9;15" calcMode="linear"
                 repeatCount="indefinite" />
        <animate attributeName="fillOpacity" from="1" to="1"
                 begin="0s" dur="0.8s"
                 values="1;.5;1" calcMode="linear"
                 repeatCount="indefinite" />
    </circle>
</svg>

    </div>
  )
}

export default InfiniteLoader
'''
'''--- src/components/List.js ---
import React from 'react'
import propType from 'prop-types'
import { useEffect } from 'react'

const List = ({ show, onClose, children }) => {
  useEffect(() => {
    const onKeydown = (e) => {
      if (e.key === "Escape") {
        onClose()
      }
    }
    if (show) {
      document.addEventListener('keydown', onKeydown)
    }

    return () => {
      document.removeEventListener('keydown', onKeydown)
    }
  }, [show])

  const _bgClick = (e) => {
    if (e.target.id === 'confirm-modal-bg') {
      onClose()
    }
  }

  return (
    <div id="container-modal">
      {
        show ? (
          <div id="confirm-modal-bg" onClick={e => _bgClick(e)} className="fixed inset-0 z-40 flex items-center" style={{
            backgroundColor: `rgba(0,0,0,0.86)`
          }}>
            <div className="max-w-xs m-auto w-full p-4">
              <div className="bg-dark-1 w-full rounded-md overflow-hidden shadow-lg">
                {children}
              </div>
            </div>
          </div>
        ) : null
      }
    </div>
  )
}

List.propTypes = {
  show: propType.bool.isRequired,
  onClose: propType.func.isRequired
}

export default List
'''
'''--- src/components/NavTop.js ---
import React from 'react'

const NavTop = ({ left, right, center}) => {
  return (
    <div className="sticky top-0 z-20 bg-dark-12 px-4">
      <div className="flex justify-between items-center w-full h-12">
        {
          left && (
            <div className="w-8 flex items-center">{left}</div>
          )
        }
        <div className="flex-auto overflow-hidden">{center}</div>
        {
          right && (
            <div className="w-8 flex items-center justify-end">{right}</div>
          )
        }
      </div>
    </div>
  )
}

export default NavTop
'''
'''--- src/components/Pop.js ---
import React, { Fragment, cloneElement } from 'react'
import { withRouter } from 'react-router-dom'

const Pop = ({ history, children }) => {
  const _navigate = () => {
    history.goBack()
  }

  return (
    <Fragment>
      { cloneElement(children, { onClick: e => {_navigate(e)} }) }
    </Fragment>
  )
}

export default withRouter(Pop)
'''
'''--- src/components/PostCard.js ---
import React, { useState } from 'react'
import { Link } from 'react-router-dom'
import Image from './Image'
import TimeAgo from 'javascript-time-ago'
import en from 'javascript-time-ago/locale/en'
import List from './List'
import { useNear } from '../App'

TimeAgo.addLocale(en)
const timeAgo = new TimeAgo('en-US')

const PostCard = ({ post = {} }) => {
  const near = useNear()
  const [showModal, setShowModal] = useState(false)
  const [isDeleted, setIsDeleted] = useState(false)

  const imgUrl = `https://ipfs-gateway.paras.id/ipfs/${JSON.parse(post.contentList[0].body).url}`

  const _deletePost = async () => {
    const conf = confirm('Delete this post?')
    if (conf) {
      near.setIsSubmitting(true)
      await near.contractParas.deletePost({
        id: post.id
      })
      setIsDeleted(true)
      near.setIsSubmitting(false)
    }
  }

  if (isDeleted) {
    return null
  }

  return (
    <div>
      <List show={showModal} onClose={_ => setShowModal(false)}>
        <div className="p-2">
          <a className="text-white" href={imgUrl} download>Download Image</a>
        </div>
        {
          near.me && near.me.id == post.owner && (
            <div className="p-2">
              <a className="text-white" onClick={_deletePost}>Delete</a>
            </div>
          )
        }
      </List>
      <div className="rounded-md overflow-hidden bg-dark-6">
        {
          post.mementoId.length > 0 && post.memento && (
            <div className="bg-dark-2 text-center p-2 flex justify-center">
              <Link to={`/m/${post.mementoId}`}>
                <div className="flex items-center">
                  <div className="w-4 h-4 rounded-sm overflow-hidden">
                    <Image className="w-full h-full object-fill" data={post.memento.img} />
                  </div>
                  <h4 className="ml-2 font-bold text-white text-sm">{post.mementoId}</h4>
                </div>
              </Link>
            </div>
          )
        }
        <div>
          <Image data={JSON.parse(post.contentList[0].body)} />
        </div>
        <div className="p-2 flex justify-between">
          <div className="flex">
            <div className="h-8 w-8 rounded-full overflow-hidden shadow-inner flex-shrink-0">
              <Link to={`/${post.owner}`}>
                <div>
                  <Image className="object-fill" data={post.user.imgAvatar} />
                </div>
              </Link>
            </div>
            <div className="ml-2 mt-1">
              <div>
                <Link className="flex-shrink-0" to={`/${post.owner}`}>
                  <h4 className="text-white font-bold inline">{post.owner}</h4>
                </Link>
                {
                  post.contentList[1] && (
                    <p className="text-white-1 inline"> demands <em>{post.contentList[1].body}</em></p>
                  )
                }
              </div>
            </div>
          </div>
          <div>
            <button className="flex items-center" onClick={_ => setShowModal(true)}>
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path d="M20 12C20 13.1046 19.1046 14 18 14C16.8954 14 16 13.1046 16 12C16 10.8954 16.8954 10 18 10C19.1046 10 20 10.8954 20 12Z" fill="#E2E2E2" />
                <path d="M14 12C14 13.1046 13.1046 14 12 14C10.8954 14 10 13.1046 10 12C10 10.8954 10.8954 10 12 10C13.1046 10 14 10.8954 14 12Z" fill="#E2E2E2" />
                <path d="M8 12C8 13.1046 7.10457 14 6 14C4.89543 14 4 13.1046 4 12C4 10.8954 4.89543 10 6 10C7.10457 10 8 10.8954 8 12Z" fill="#E2E2E2" />
              </svg>
            </button>
          </div>
        </div>
        <div className="pt-0 p-2">
          <p className="text-white text-white-3 text-xs">
            {timeAgo.format(new Date(post.createdAt / (10 ** 6)))}
          </p>
        </div>
      </div>
    </div>
  )
}

export default PostCard
'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/favicon.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./assets/favicon.png" />
    <title>MOVE by Paras</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import * as nearlib from 'near-api-js';

const CONTRACT_NAME = 'contract-alpha.paras.testnet'

// Initializing contract
async function initContract() {
  window.nearConfig = {
    networkId: 'default',
    nodeUrl: 'https://rpc.testnet.near.org',
    contractName: CONTRACT_NAME,
    walletUrl: 'https://wallet.testnet.near.org',
    helperUrl: 'https://helper.testnet.near.org',
  };

  // Initializing connection to the NEAR DevNet.
  window.near = await nearlib.connect(Object.assign({ deps: { keyStore: new nearlib.keyStores.BrowserLocalStorageKeyStore() } }, window.nearConfig));

  // Needed to access wallet login
  window.walletAccount = new nearlib.WalletAccount(window.near);

  // Getting the Account ID. If unauthorized yet, it's just empty string.
  window.accountId = window.walletAccount.getAccountId();

  // Initializing our contract APIs by contract name and configuration.
  window.account = await new nearlib.Account(window.near.connection, window.accountId);
  window.contractParas = await new nearlib.Contract(window.account, window.nearConfig.contractName, {
    viewMethods: [
      'getUserById',
      'getMementoById'
    ],
    changeMethods: [
      'createMemento',
      'updateMemento',
      'deleteMemento',
      'createPost',
      'editPost',
      'deletePost',
      'redactPost',
      'createUser',
      'updateUser',
    ],
    sender: window.accountId
  });
}

window.nearInitPromise = initContract().then(() => {
  ReactDOM.render(<App contractParas={window.contractParas} wallet={window.walletAccount} account={window.account} />,
    document.getElementById('root')
  );
}).catch(console.error)
'''
'''--- src/pages/Home.js ---
import React, { useEffect, useState } from 'react'
import axios from 'axios'
import PostCard from '../components/PostCard'
import { Link } from 'react-router-dom'
import NavTop from '../components/NavTop'
import InfiniteScroll from 'react-infinite-scroll-component'
import InfiniteLoader from '../components/InfiniteLoader'
import { useNear } from '../App'
import Image from '../components/Image'
import List from '../components/List'

const Home = () => {
  const near = useNear()
  const [postList, setPostList] = useState([])
  const [hasMore, setHasMore] = useState(true)
  const [pageCount, setPageCount] = useState(0)
  const [showModal, setShowModal] = useState(false)

  const getPost = async () => {
    const ITEM_LIMIT = 10
    const response = await axios.get(`https://api-dev.paras.id/posts?mementoId__re=.act&__sort=-createdAt&__limit=${ITEM_LIMIT}&__skip=${pageCount * ITEM_LIMIT}`)
    if (response.data.data.length < ITEM_LIMIT) {
      setHasMore(false)
    }
    setPageCount(pageCount + 1)
    const newPostList = postList.slice().concat(response.data.data)
    setPostList(newPostList)
  }
  useEffect(() => {
    getPost()
  }, [])

  const _signOut = () => {
    near.wallet.signOut()

    window.location.replace(window.location.origin + '/login')
  }

  return (
    <div className="pb-24">
      {
        near.me && (
          <List show={showModal} onClose={_ => setShowModal(false)}>
            <div className="p-2">
              <Link to={near.me.id}>
                <h4 className="text-white">View Profile</h4>
              </Link>
            </div>
            <div className="p-2">
              <a className="text-white" onClick={_signOut}>Log out</a>
            </div>
          </List>
        )
      }
      <NavTop
        center={
          <svg width="50" height="30" viewBox="0 0 94 57" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M0.429688 1.09375H6.10156L11.1406 15.1562L16.1328 1.04688H21.8516V31H17V9.29688L12.8281 20.5938H9.26562L5.23438 9.29688V31H0.429688V1.09375Z" fill="white" />
            <path d="M35.1406 31.8672C32.7812 31.8672 30.75 31.2422 29.0469 29.9922C27.3594 28.7266 26.0625 26.9062 25.1562 24.5312C24.2656 22.1406 23.8203 19.2891 23.8203 15.9766C23.8203 12.7109 24.2656 9.90625 25.1562 7.5625C26.0625 5.21875 27.3594 3.42969 29.0469 2.19531C30.75 0.945312 32.7812 0.320312 35.1406 0.320312C37.5 0.320312 39.5234 0.945312 41.2109 2.19531C42.9141 3.42969 44.2109 5.21875 45.1016 7.5625C46.0078 9.90625 46.4609 12.7109 46.4609 15.9766C46.4609 19.2891 46.0078 22.1406 45.1016 24.5312C44.2109 26.9062 42.9141 28.7266 41.2109 29.9922C39.5234 31.2422 37.5 31.8672 35.1406 31.8672ZM35.1406 27.5547C36.3281 27.5547 37.3516 27.0703 38.2109 26.1016C39.0859 25.1172 39.75 23.7344 40.2031 21.9531C40.6719 20.1562 40.9062 18.0703 40.9062 15.6953C40.9062 13.4922 40.6719 11.5625 40.2031 9.90625C39.75 8.23438 39.0859 6.94531 38.2109 6.03906C37.3516 5.11719 36.3281 4.65625 35.1406 4.65625C33.9688 4.65625 32.9453 5.11719 32.0703 6.03906C31.1953 6.94531 30.5234 8.23438 30.0547 9.90625C29.6016 11.5625 29.375 13.4922 29.375 15.6953C29.375 18.0703 29.6016 20.1562 30.0547 21.9531C30.5234 23.7344 31.1875 25.1172 32.0469 26.1016C32.9219 27.0703 33.9531 27.5547 35.1406 27.5547Z" fill="white" />
            <path d="M47.4688 1.09375H53.1406L59.4219 22.3047L65.375 1.09375H70.9062L61.2969 31H57.1719L47.4688 1.09375Z" fill="white" />
            <path d="M73.6953 1.09375H93.1719V5.71094H78.9219V13.0938H90.7344V17.8047H78.9219V26.3828H93.0781V31H73.6953V1.09375Z" fill="white" />
            <path d="M5.38672 52.3633C4.81641 52.3633 4.27344 52.2383 3.75781 51.9883C3.24219 51.7383 2.80078 51.3828 2.43359 50.9219L2.07031 52H0.195312V35.8047H3.07812V36.0742C2.99219 36.168 2.9375 36.2734 2.91406 36.3906C2.89062 36.5 2.88281 36.6875 2.89062 36.9531V41.7578C3.23438 41.375 3.63281 41.0781 4.08594 40.8672C4.54688 40.6562 5.01172 40.5508 5.48047 40.5508C6.33984 40.5508 7.12891 40.7656 7.84766 41.1953C8.56641 41.6172 9.13672 42.25 9.55859 43.0938C9.98828 43.9375 10.2031 44.9609 10.2031 46.1641C10.2031 47.4766 9.97266 48.6016 9.51172 49.5391C9.05859 50.4766 8.46094 51.1836 7.71875 51.6602C6.98438 52.1289 6.20703 52.3633 5.38672 52.3633ZM5.04688 50.125C5.44531 50.125 5.82812 50.0039 6.19531 49.7617C6.57031 49.5195 6.87891 49.1289 7.12109 48.5898C7.37109 48.0508 7.49609 47.3633 7.49609 46.5273C7.49609 45.3867 7.28516 44.4688 6.86328 43.7734C6.44141 43.0781 5.8125 42.7305 4.97656 42.7305C4.17969 42.7305 3.62891 43.0508 3.32422 43.6914C3.01953 44.3242 2.86719 45.1836 2.86719 46.2695C2.86719 47.6133 3.05469 48.5938 3.42969 49.2109C3.80469 49.8203 4.34375 50.125 5.04688 50.125Z" fill="#E2E2E2" />
            <path d="M21.8984 40.7969C21.875 41.4375 21.7734 42.0898 21.5938 42.7539C21.4141 43.4102 21.1562 44.1953 20.8203 45.1094L18.0312 52.7969C17.5781 54.0391 17.0234 54.9219 16.3672 55.4453C15.7188 55.9766 14.9297 56.2422 14 56.2422C13.4766 56.2422 13.0039 56.1523 12.582 55.9727C12.168 55.8008 11.7188 55.5234 11.2344 55.1406L12.1133 53.2188L12.207 53.0195L12.4531 53.1367C12.4688 53.168 12.4922 53.2344 12.5234 53.3359C12.5625 53.4375 12.625 53.5312 12.7109 53.6172C12.7969 53.7109 12.9062 53.8008 13.0391 53.8867C13.3359 54.082 13.6328 54.1797 13.9297 54.1797C14.3203 54.1797 14.6875 53.9844 15.0312 53.5938C15.375 53.2031 15.6914 52.6562 15.9805 51.9531L11.7383 40.7969H14.3633L17.1758 48.6602L18.6289 44.6523C18.8633 43.9258 19.0391 43.2891 19.1562 42.7422C19.2812 42.1953 19.3438 41.6562 19.3438 41.125C19.3438 40.9766 19.3398 40.8672 19.332 40.7969H21.8984Z" fill="#E2E2E2" />
            <path d="M36.1953 37.0469H41.2695C42.4102 37.0469 43.3555 37.2461 44.1055 37.6445C44.8555 38.043 45.4102 38.582 45.7695 39.2617C46.1289 39.9336 46.3086 40.6914 46.3086 41.5352C46.3086 42.3789 46.1328 43.1328 45.7812 43.7969C45.4297 44.4609 44.8867 44.9883 44.1523 45.3789C43.418 45.7617 42.4961 45.9531 41.3867 45.9531H38.9375V52H36.1953V37.0469ZM41.1875 43.668C41.9844 43.668 42.5742 43.4805 42.957 43.1055C43.3477 42.7305 43.543 42.2305 43.543 41.6055C43.543 40.9492 43.3438 40.4219 42.9453 40.0234C42.5547 39.625 41.9766 39.4258 41.2109 39.4258H38.9375V43.668H41.1875Z" fill="#E2E2E2" />
            <path d="M52.7305 40.4336C54.207 40.4336 55.3867 40.8008 56.2695 41.5352C57.1602 42.2695 57.6055 43.4844 57.6055 45.1797V52H55.0391V50.9922C54.6094 51.3984 54.0898 51.7188 53.4805 51.9531C52.8789 52.1797 52.2305 52.293 51.5352 52.293C50.3711 52.293 49.4844 52.0078 48.875 51.4375C48.2656 50.8594 47.9609 50.0781 47.9609 49.0938C47.9609 48.2969 48.2109 47.6172 48.7109 47.0547C49.2188 46.4922 49.9453 46.0664 50.8906 45.7773C51.8438 45.4805 52.9805 45.332 54.3008 45.332H55.1211C55.043 44.3555 54.8047 43.6602 54.4062 43.2461C54.0078 42.8242 53.4023 42.6133 52.5898 42.6133C52.0742 42.6133 51.5391 42.75 50.9844 43.0234C50.4297 43.2891 49.918 43.6641 49.4492 44.1484L48.0781 42.3789C48.7812 41.7383 49.5352 41.2539 50.3398 40.9258C51.1523 40.5977 51.9492 40.4336 52.7305 40.4336ZM52.4023 50.2422C53.1992 50.2422 53.8281 49.9922 54.2891 49.4922C54.75 48.9922 55.0273 48.2031 55.1211 47.125H54.582C53.207 47.125 52.2031 47.2734 51.5703 47.5703C50.9375 47.8672 50.6211 48.3359 50.6211 48.9766C50.6211 49.4141 50.7773 49.7344 51.0898 49.9375C51.4102 50.1406 51.8477 50.2422 52.4023 50.2422Z" fill="#E2E2E2" />
            <path d="M67.1328 40.5508C67.6875 40.5508 68.2383 40.6562 68.7852 40.8672C69.3398 41.0703 69.832 41.375 70.2617 41.7812L68.9727 44.3594L68.7266 44.2422C68.7109 44.1875 68.6953 44.1094 68.6797 44.0078C68.6562 43.8594 68.6211 43.7344 68.5742 43.6328C68.5352 43.5234 68.4492 43.4141 68.3164 43.3047C67.9258 42.9922 67.4453 42.8359 66.875 42.8359C66.3047 42.8359 65.7891 42.9727 65.3281 43.2461C64.8672 43.5117 64.5039 43.8945 64.2383 44.3945C63.9805 44.8945 63.8516 45.4766 63.8516 46.1406V52H61.1328V40.7969H63.8984V42.4023C64.1953 41.8242 64.6289 41.3711 65.1992 41.043C65.7773 40.7148 66.4219 40.5508 67.1328 40.5508Z" fill="#E2E2E2" />
            <path d="M76.7305 40.4336C78.207 40.4336 79.3867 40.8008 80.2695 41.5352C81.1602 42.2695 81.6055 43.4844 81.6055 45.1797V52H79.0391V50.9922C78.6094 51.3984 78.0898 51.7188 77.4805 51.9531C76.8789 52.1797 76.2305 52.293 75.5352 52.293C74.3711 52.293 73.4844 52.0078 72.875 51.4375C72.2656 50.8594 71.9609 50.0781 71.9609 49.0938C71.9609 48.2969 72.2109 47.6172 72.7109 47.0547C73.2188 46.4922 73.9453 46.0664 74.8906 45.7773C75.8438 45.4805 76.9805 45.332 78.3008 45.332H79.1211C79.043 44.3555 78.8047 43.6602 78.4062 43.2461C78.0078 42.8242 77.4023 42.6133 76.5898 42.6133C76.0742 42.6133 75.5391 42.75 74.9844 43.0234C74.4297 43.2891 73.918 43.6641 73.4492 44.1484L72.0781 42.3789C72.7812 41.7383 73.5352 41.2539 74.3398 40.9258C75.1523 40.5977 75.9492 40.4336 76.7305 40.4336ZM76.4023 50.2422C77.1992 50.2422 77.8281 49.9922 78.2891 49.4922C78.75 48.9922 79.0273 48.2031 79.1211 47.125H78.582C77.207 47.125 76.2031 47.2734 75.5703 47.5703C74.9375 47.8672 74.6211 48.3359 74.6211 48.9766C74.6211 49.4141 74.7773 49.7344 75.0898 49.9375C75.4102 50.1406 75.8477 50.2422 76.4023 50.2422Z" fill="#E2E2E2" />
            <path d="M89.3633 52.3867C88.2383 52.3867 87.2578 52.2383 86.4219 51.9414C85.5859 51.6367 84.8203 51.1523 84.125 50.4883L85.25 48.5195L85.3555 48.332L85.5898 48.4727C85.6055 48.5117 85.625 48.582 85.6484 48.6836C85.6797 48.7852 85.7305 48.8867 85.8008 48.9883C85.8789 49.082 85.9805 49.1758 86.1055 49.2695C86.543 49.5977 87.0234 49.8398 87.5469 49.9961C88.0781 50.1445 88.6914 50.2188 89.3867 50.2188C90.668 50.2188 91.3086 49.7969 91.3086 48.9531C91.3086 48.6953 91.2305 48.4727 91.0742 48.2852C90.918 48.0977 90.668 47.9258 90.3242 47.7695C89.9805 47.6133 89.5078 47.4492 88.9062 47.2773C87.6172 46.9414 86.6133 46.5195 85.8945 46.0117C85.1836 45.4961 84.8281 44.7891 84.8281 43.8906C84.8281 43.2422 85 42.668 85.3438 42.168C85.6953 41.6602 86.1953 41.2656 86.8438 40.9844C87.5 40.6953 88.2656 40.5508 89.1406 40.5508C90.0156 40.5508 90.8125 40.6953 91.5312 40.9844C92.2578 41.2656 92.9258 41.6992 93.5352 42.2852L92.1758 44.1719L92.0586 44.3477L91.8359 44.1953C91.8281 44.1562 91.8125 44.0859 91.7891 43.9844C91.7734 43.875 91.7305 43.7695 91.6602 43.668C91.5898 43.5664 91.4922 43.4727 91.3672 43.3867C90.7344 42.9336 90.0078 42.707 89.1875 42.707C88.7109 42.707 88.3125 42.7891 87.9922 42.9531C87.6719 43.1172 87.5117 43.3398 87.5117 43.6211C87.5117 43.8789 87.5977 44.1016 87.7695 44.2891C87.9492 44.4688 88.2148 44.6328 88.5664 44.7812C88.9258 44.9297 89.4375 45.1055 90.1016 45.3086C91.0234 45.5898 91.7461 45.875 92.2695 46.1641C92.793 46.4453 93.1758 46.7852 93.418 47.1836C93.6602 47.582 93.7812 48.082 93.7812 48.6836C93.7812 49.332 93.5859 49.9414 93.1953 50.5117C92.8125 51.0742 92.2852 51.5273 91.6133 51.8711C90.9414 52.2148 90.1914 52.3867 89.3633 52.3867Z" fill="#E2E2E2" />
          </svg>
        }
        right={
          <div>
            {
              near.me ? (
                <div className="flex items-center">
                  <div className="h-8 w-8 rounded-full overflow-hidden shadow-inner flex-shrink-0">
                    <Link to={`/${near.me.id}`}>
                      <div>
                        <Image className="object-fill" data={near.me.imgAvatar} />
                      </div>
                    </Link>
                  </div>
                  <div className="pl-2">
                    <button onClick={_ => setShowModal(true)}>
                      <svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path fillRule="evenodd" clipRule="evenodd" d="M13.293 4.29291L14.7072 5.70712L8.00008 12.4142L1.29297 5.70712L2.70718 4.29291L8.00008 9.5858L13.293 4.29291Z" fill="white" />
                      </svg>
                    </button>
                  </div>
                </div>
              ) : (
                  <Link to="login">
                    <h4 className="text-primary-5 font-bold">Login</h4>
                  </Link>
                )
            }
          </div>
        }
      />
      <InfiniteScroll
        dataLength={postList.length}
        next={getPost}
        hasMore={hasMore}
        loader={<InfiniteLoader key={0} />}
      >
        {
          postList.map(post => {
            return (
              <div key={post.id} className="mt-6">
                <PostCard post={post} />
              </div>
            )
          })
        }
      </InfiniteScroll>
      {
        near.me && (
          <div className="fixed bottom-0 pb-4" style={{
            left: `50%`,
            transform: `translateX(-50%)`
          }}>
            <div className="m-auto w-16">
              <Link className="inline-block" to="/new/post">
                <svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M56 28C56 43.464 43.464 56 28 56C12.536 56 0 43.464 0 28C0 12.536 12.536 0 28 0C43.464 0 56 12.536 56 28Z" fill="#E13128" />
                  <path fillRule="evenodd" clipRule="evenodd" d="M26.5292 38.6667V30.1375H18V26.5292H26.5292V18H30.1375V26.5292H38.6667V30.1375H30.1375V38.6667H26.5292Z" fill="white" />
                </svg>
              </Link>
            </div>
          </div>
        )
      }
    </div>
  )
}

export default Home
'''
'''--- src/pages/Login.js ---
import React, { useEffect } from 'react'
import { useNear } from '../App'
import { withRouter, Link } from 'react-router-dom'
import NavTop from '../components/NavTop'

const Login = ({ history }) => {
  const near = useNear()

  useEffect(() => {
    if (near.wallet.isSignedIn()) {
      history.replace('/')
    }
  }, [])

  const login = async () => {
    const appTitle = 'Move by Paras'
    await near.wallet.requestSignIn(
      'contract-alpha.paras.testnet',
      appTitle
    )
  }

  return (
    <div>
      <NavTop
        left={
          <Link to="/">
            <a>
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#F2F2F2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.394 9.93934C14.9798 10.5251 14.9798 11.4749 14.394 12.0607L11.6213 14.8333H24C24.8284 14.8333 25.5 15.5049 25.5 16.3333C25.5 17.1618 24.8284 17.8333 24 17.8333H11.6213L14.394 20.606C14.9798 21.1918 14.9798 22.1415 14.394 22.7273C13.8082 23.3131 12.8585 23.3131 12.2727 22.7273L6.93934 17.394C6.65804 17.1127 6.5 16.7312 6.5 16.3333C6.5 15.9355 6.65804 15.554 6.93934 15.2727L12.2727 9.93934C12.8585 9.35355 13.8082 9.35355 14.394 9.93934Z" fill="#F2F2F2" />
              </svg>
            </a>
          </Link>
        }
        center={
          <h3 className="text-lg font-bold text-white px-2">Login</h3>
        }
      />
      <div className="p-4 mt-24">
        <div>
          <div className="flex justify-center">
            <svg width="94" height="57" viewBox="0 0 94 57" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path d="M0.429688 1.09375H6.10156L11.1406 15.1562L16.1328 1.04688H21.8516V31H17V9.29688L12.8281 20.5938H9.26562L5.23438 9.29688V31H0.429688V1.09375Z" fill="white" />
              <path d="M35.1406 31.8672C32.7812 31.8672 30.75 31.2422 29.0469 29.9922C27.3594 28.7266 26.0625 26.9062 25.1562 24.5312C24.2656 22.1406 23.8203 19.2891 23.8203 15.9766C23.8203 12.7109 24.2656 9.90625 25.1562 7.5625C26.0625 5.21875 27.3594 3.42969 29.0469 2.19531C30.75 0.945312 32.7812 0.320312 35.1406 0.320312C37.5 0.320312 39.5234 0.945312 41.2109 2.19531C42.9141 3.42969 44.2109 5.21875 45.1016 7.5625C46.0078 9.90625 46.4609 12.7109 46.4609 15.9766C46.4609 19.2891 46.0078 22.1406 45.1016 24.5312C44.2109 26.9062 42.9141 28.7266 41.2109 29.9922C39.5234 31.2422 37.5 31.8672 35.1406 31.8672ZM35.1406 27.5547C36.3281 27.5547 37.3516 27.0703 38.2109 26.1016C39.0859 25.1172 39.75 23.7344 40.2031 21.9531C40.6719 20.1562 40.9062 18.0703 40.9062 15.6953C40.9062 13.4922 40.6719 11.5625 40.2031 9.90625C39.75 8.23438 39.0859 6.94531 38.2109 6.03906C37.3516 5.11719 36.3281 4.65625 35.1406 4.65625C33.9688 4.65625 32.9453 5.11719 32.0703 6.03906C31.1953 6.94531 30.5234 8.23438 30.0547 9.90625C29.6016 11.5625 29.375 13.4922 29.375 15.6953C29.375 18.0703 29.6016 20.1562 30.0547 21.9531C30.5234 23.7344 31.1875 25.1172 32.0469 26.1016C32.9219 27.0703 33.9531 27.5547 35.1406 27.5547Z" fill="white" />
              <path d="M47.4688 1.09375H53.1406L59.4219 22.3047L65.375 1.09375H70.9062L61.2969 31H57.1719L47.4688 1.09375Z" fill="white" />
              <path d="M73.6953 1.09375H93.1719V5.71094H78.9219V13.0938H90.7344V17.8047H78.9219V26.3828H93.0781V31H73.6953V1.09375Z" fill="white" />
              <path d="M5.38672 52.3633C4.81641 52.3633 4.27344 52.2383 3.75781 51.9883C3.24219 51.7383 2.80078 51.3828 2.43359 50.9219L2.07031 52H0.195312V35.8047H3.07812V36.0742C2.99219 36.168 2.9375 36.2734 2.91406 36.3906C2.89062 36.5 2.88281 36.6875 2.89062 36.9531V41.7578C3.23438 41.375 3.63281 41.0781 4.08594 40.8672C4.54688 40.6562 5.01172 40.5508 5.48047 40.5508C6.33984 40.5508 7.12891 40.7656 7.84766 41.1953C8.56641 41.6172 9.13672 42.25 9.55859 43.0938C9.98828 43.9375 10.2031 44.9609 10.2031 46.1641C10.2031 47.4766 9.97266 48.6016 9.51172 49.5391C9.05859 50.4766 8.46094 51.1836 7.71875 51.6602C6.98438 52.1289 6.20703 52.3633 5.38672 52.3633ZM5.04688 50.125C5.44531 50.125 5.82812 50.0039 6.19531 49.7617C6.57031 49.5195 6.87891 49.1289 7.12109 48.5898C7.37109 48.0508 7.49609 47.3633 7.49609 46.5273C7.49609 45.3867 7.28516 44.4688 6.86328 43.7734C6.44141 43.0781 5.8125 42.7305 4.97656 42.7305C4.17969 42.7305 3.62891 43.0508 3.32422 43.6914C3.01953 44.3242 2.86719 45.1836 2.86719 46.2695C2.86719 47.6133 3.05469 48.5938 3.42969 49.2109C3.80469 49.8203 4.34375 50.125 5.04688 50.125Z" fill="#E2E2E2" />
              <path d="M21.8984 40.7969C21.875 41.4375 21.7734 42.0898 21.5938 42.7539C21.4141 43.4102 21.1562 44.1953 20.8203 45.1094L18.0312 52.7969C17.5781 54.0391 17.0234 54.9219 16.3672 55.4453C15.7188 55.9766 14.9297 56.2422 14 56.2422C13.4766 56.2422 13.0039 56.1523 12.582 55.9727C12.168 55.8008 11.7188 55.5234 11.2344 55.1406L12.1133 53.2188L12.207 53.0195L12.4531 53.1367C12.4688 53.168 12.4922 53.2344 12.5234 53.3359C12.5625 53.4375 12.625 53.5312 12.7109 53.6172C12.7969 53.7109 12.9062 53.8008 13.0391 53.8867C13.3359 54.082 13.6328 54.1797 13.9297 54.1797C14.3203 54.1797 14.6875 53.9844 15.0312 53.5938C15.375 53.2031 15.6914 52.6562 15.9805 51.9531L11.7383 40.7969H14.3633L17.1758 48.6602L18.6289 44.6523C18.8633 43.9258 19.0391 43.2891 19.1562 42.7422C19.2812 42.1953 19.3438 41.6562 19.3438 41.125C19.3438 40.9766 19.3398 40.8672 19.332 40.7969H21.8984Z" fill="#E2E2E2" />
              <path d="M36.1953 37.0469H41.2695C42.4102 37.0469 43.3555 37.2461 44.1055 37.6445C44.8555 38.043 45.4102 38.582 45.7695 39.2617C46.1289 39.9336 46.3086 40.6914 46.3086 41.5352C46.3086 42.3789 46.1328 43.1328 45.7812 43.7969C45.4297 44.4609 44.8867 44.9883 44.1523 45.3789C43.418 45.7617 42.4961 45.9531 41.3867 45.9531H38.9375V52H36.1953V37.0469ZM41.1875 43.668C41.9844 43.668 42.5742 43.4805 42.957 43.1055C43.3477 42.7305 43.543 42.2305 43.543 41.6055C43.543 40.9492 43.3438 40.4219 42.9453 40.0234C42.5547 39.625 41.9766 39.4258 41.2109 39.4258H38.9375V43.668H41.1875Z" fill="#E2E2E2" />
              <path d="M52.7305 40.4336C54.207 40.4336 55.3867 40.8008 56.2695 41.5352C57.1602 42.2695 57.6055 43.4844 57.6055 45.1797V52H55.0391V50.9922C54.6094 51.3984 54.0898 51.7188 53.4805 51.9531C52.8789 52.1797 52.2305 52.293 51.5352 52.293C50.3711 52.293 49.4844 52.0078 48.875 51.4375C48.2656 50.8594 47.9609 50.0781 47.9609 49.0938C47.9609 48.2969 48.2109 47.6172 48.7109 47.0547C49.2188 46.4922 49.9453 46.0664 50.8906 45.7773C51.8438 45.4805 52.9805 45.332 54.3008 45.332H55.1211C55.043 44.3555 54.8047 43.6602 54.4062 43.2461C54.0078 42.8242 53.4023 42.6133 52.5898 42.6133C52.0742 42.6133 51.5391 42.75 50.9844 43.0234C50.4297 43.2891 49.918 43.6641 49.4492 44.1484L48.0781 42.3789C48.7812 41.7383 49.5352 41.2539 50.3398 40.9258C51.1523 40.5977 51.9492 40.4336 52.7305 40.4336ZM52.4023 50.2422C53.1992 50.2422 53.8281 49.9922 54.2891 49.4922C54.75 48.9922 55.0273 48.2031 55.1211 47.125H54.582C53.207 47.125 52.2031 47.2734 51.5703 47.5703C50.9375 47.8672 50.6211 48.3359 50.6211 48.9766C50.6211 49.4141 50.7773 49.7344 51.0898 49.9375C51.4102 50.1406 51.8477 50.2422 52.4023 50.2422Z" fill="#E2E2E2" />
              <path d="M67.1328 40.5508C67.6875 40.5508 68.2383 40.6562 68.7852 40.8672C69.3398 41.0703 69.832 41.375 70.2617 41.7812L68.9727 44.3594L68.7266 44.2422C68.7109 44.1875 68.6953 44.1094 68.6797 44.0078C68.6562 43.8594 68.6211 43.7344 68.5742 43.6328C68.5352 43.5234 68.4492 43.4141 68.3164 43.3047C67.9258 42.9922 67.4453 42.8359 66.875 42.8359C66.3047 42.8359 65.7891 42.9727 65.3281 43.2461C64.8672 43.5117 64.5039 43.8945 64.2383 44.3945C63.9805 44.8945 63.8516 45.4766 63.8516 46.1406V52H61.1328V40.7969H63.8984V42.4023C64.1953 41.8242 64.6289 41.3711 65.1992 41.043C65.7773 40.7148 66.4219 40.5508 67.1328 40.5508Z" fill="#E2E2E2" />
              <path d="M76.7305 40.4336C78.207 40.4336 79.3867 40.8008 80.2695 41.5352C81.1602 42.2695 81.6055 43.4844 81.6055 45.1797V52H79.0391V50.9922C78.6094 51.3984 78.0898 51.7188 77.4805 51.9531C76.8789 52.1797 76.2305 52.293 75.5352 52.293C74.3711 52.293 73.4844 52.0078 72.875 51.4375C72.2656 50.8594 71.9609 50.0781 71.9609 49.0938C71.9609 48.2969 72.2109 47.6172 72.7109 47.0547C73.2188 46.4922 73.9453 46.0664 74.8906 45.7773C75.8438 45.4805 76.9805 45.332 78.3008 45.332H79.1211C79.043 44.3555 78.8047 43.6602 78.4062 43.2461C78.0078 42.8242 77.4023 42.6133 76.5898 42.6133C76.0742 42.6133 75.5391 42.75 74.9844 43.0234C74.4297 43.2891 73.918 43.6641 73.4492 44.1484L72.0781 42.3789C72.7812 41.7383 73.5352 41.2539 74.3398 40.9258C75.1523 40.5977 75.9492 40.4336 76.7305 40.4336ZM76.4023 50.2422C77.1992 50.2422 77.8281 49.9922 78.2891 49.4922C78.75 48.9922 79.0273 48.2031 79.1211 47.125H78.582C77.207 47.125 76.2031 47.2734 75.5703 47.5703C74.9375 47.8672 74.6211 48.3359 74.6211 48.9766C74.6211 49.4141 74.7773 49.7344 75.0898 49.9375C75.4102 50.1406 75.8477 50.2422 76.4023 50.2422Z" fill="#E2E2E2" />
              <path d="M89.3633 52.3867C88.2383 52.3867 87.2578 52.2383 86.4219 51.9414C85.5859 51.6367 84.8203 51.1523 84.125 50.4883L85.25 48.5195L85.3555 48.332L85.5898 48.4727C85.6055 48.5117 85.625 48.582 85.6484 48.6836C85.6797 48.7852 85.7305 48.8867 85.8008 48.9883C85.8789 49.082 85.9805 49.1758 86.1055 49.2695C86.543 49.5977 87.0234 49.8398 87.5469 49.9961C88.0781 50.1445 88.6914 50.2188 89.3867 50.2188C90.668 50.2188 91.3086 49.7969 91.3086 48.9531C91.3086 48.6953 91.2305 48.4727 91.0742 48.2852C90.918 48.0977 90.668 47.9258 90.3242 47.7695C89.9805 47.6133 89.5078 47.4492 88.9062 47.2773C87.6172 46.9414 86.6133 46.5195 85.8945 46.0117C85.1836 45.4961 84.8281 44.7891 84.8281 43.8906C84.8281 43.2422 85 42.668 85.3438 42.168C85.6953 41.6602 86.1953 41.2656 86.8438 40.9844C87.5 40.6953 88.2656 40.5508 89.1406 40.5508C90.0156 40.5508 90.8125 40.6953 91.5312 40.9844C92.2578 41.2656 92.9258 41.6992 93.5352 42.2852L92.1758 44.1719L92.0586 44.3477L91.8359 44.1953C91.8281 44.1562 91.8125 44.0859 91.7891 43.9844C91.7734 43.875 91.7305 43.7695 91.6602 43.668C91.5898 43.5664 91.4922 43.4727 91.3672 43.3867C90.7344 42.9336 90.0078 42.707 89.1875 42.707C88.7109 42.707 88.3125 42.7891 87.9922 42.9531C87.6719 43.1172 87.5117 43.3398 87.5117 43.6211C87.5117 43.8789 87.5977 44.1016 87.7695 44.2891C87.9492 44.4688 88.2148 44.6328 88.5664 44.7812C88.9258 44.9297 89.4375 45.1055 90.1016 45.3086C91.0234 45.5898 91.7461 45.875 92.2695 46.1641C92.793 46.4453 93.1758 46.7852 93.418 47.1836C93.6602 47.582 93.7812 48.082 93.7812 48.6836C93.7812 49.332 93.5859 49.9414 93.1953 50.5117C92.8125 51.0742 92.2852 51.5273 91.6133 51.8711C90.9414 52.2148 90.1914 52.3867 89.3633 52.3867Z" fill="#E2E2E2" />
            </svg>
          </div>
          <p className="text-white mt-8">Share & show your support for the MOVEMENT that you believe in!</p>
          <p className="text-white mt-4">Here's how <b>MOVE</b> protect your privacy:</p>
          <p className="text-white-1"><span className="text-primary-5">✔</span> Pseudonymous</p>
          <p className="text-white-1"><span className="text-primary-5">✔</span> Everything happens on client-side</p>
          <p className="text-white-1"><span className="text-primary-5">✔</span> Machine Learning to Pixelated Face</p>
          <p className="text-white-1"><span className="text-primary-5">✔</span> Auto-strip Image Metadata</p>
          <p className="text-white-1"><span className="text-primary-5">✔</span> Decentralized (IPFS + NEARprotocol)</p>
          <button className="mt-8 w-full rounded-md p-2 bg-primary-5 text-white font-semibold" onClick={login}>Login</button>
        </div>
      </div>
      <div className="mt-24 p-4 text-center">
        <a href="https://paras.id" target="_blank" className="text-white-2 hover:text-white font-bold">
          <div className="inline-flex">
            <span className="mr-1">From Paras Team</span>
            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
              <path className="fill-current" fillRule="evenodd" clipRule="evenodd" d="M11.7042 13.7071L18.9971 6.41421V11H20.9971V3H12.9971V5H17.5829L10.29 12.2929L11.7042 13.7071ZM19 19V14H17V19H5V7H10V5H5C3.89543 5 3 5.89543 3 7V19C3 20.1046 3.89543 21 5 21H17C18.1046 21 19 20.1046 19 19Z" />
            </svg>
          </div>
        </a>
      </div>
    </div>
  )
}

export default withRouter(Login)
'''
'''--- src/pages/Movement.js ---
import React, { useEffect, useState } from 'react'
import NavTop from '../components/NavTop'
import Pop from '../components/Pop'
import Image from '../components/Image'
import PostCard from '../components/PostCard'
import { useParams, Link } from 'react-router-dom'
import axios from 'axios'
import InfiniteScroll from 'react-infinite-scroll-component'
import InfiniteLoader from '../components/InfiniteLoader'
import { useNear } from '../App'

const Movement = () => {
  const params = useParams()
  const near = useNear()
  const [memento, setMemento] = useState({})
  const [postList, setPostList] = useState([])
  const [hasMore, setHasMore] = useState(true)
  const [pageCount, setPageCount] = useState(0)

  const getPost = async () => {
    const ITEM_LIMIT = 10
    const response = await axios.get(`https://api-dev.paras.id/posts?mementoId=${params.mementoId}&__sort=-createdAt&__limit=${ITEM_LIMIT}&__skip=${pageCount * ITEM_LIMIT}`)
    if (response.data.data.length < ITEM_LIMIT) {
      setHasMore(false)
    }
    setPageCount(pageCount + 1)
    const newPostList = postList.slice().concat(response.data.data)
    setPostList(newPostList)
  }

  useEffect(() => {
    const getData = async () => {
      const responseMemento = await axios.get(`https://api-dev.paras.id/mementos?id=${params.mementoId}`)
      setMemento(responseMemento.data.data[0])
      getPost()
    }
    getData()
  }, [])
  return (
    <div className="pb-24">
      <NavTop
        left={
          <Pop>
            <a>
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#F2F2F2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.394 9.93934C14.9798 10.5251 14.9798 11.4749 14.394 12.0607L11.6213 14.8333H24C24.8284 14.8333 25.5 15.5049 25.5 16.3333C25.5 17.1618 24.8284 17.8333 24 17.8333H11.6213L14.394 20.606C14.9798 21.1918 14.9798 22.1415 14.394 22.7273C13.8082 23.3131 12.8585 23.3131 12.2727 22.7273L6.93934 17.394C6.65804 17.1127 6.5 16.7312 6.5 16.3333C6.5 15.9355 6.65804 15.554 6.93934 15.2727L12.2727 9.93934C12.8585 9.35355 13.8082 9.35355 14.394 9.93934Z" fill="#F2F2F2" />
              </svg>
            </a>
          </Pop>
        }
        center={
          <h3 className="text-lg font-bold text-white px-2">{memento.id}</h3>
        }
      />
      <div className="mt-4">
        <Image className="w-40 h-40 rounded-sm m-auto object-contain" data={memento.img} />
        <div className="text-center mt-4">
          <h4 className="text-white font-bold">{memento.id}</h4>
          <p className="text-white-2">{memento.desc}</p>
        </div>
      </div>
      <div>
        <InfiniteScroll
          dataLength={postList.length}
          next={getPost}
          hasMore={hasMore}
          loader={<InfiniteLoader key={0} />}
        >
          {
            postList.map(post => {
              return (
                <div key={post.id} className="mt-6">
                  <PostCard post={post} />
                </div>
              )
            })
          }
        </InfiniteScroll>
      </div>
      {
        near.me && (
          <div className="fixed bottom-0 pb-4" style={{
            left: `50%`,
            transform: `translateX(-50%)`
          }}>
            <div className="m-auto w-16">
              <Link className="inline-block" to={`/new/post/${memento.id}`}>
                <svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M56 28C56 43.464 43.464 56 28 56C12.536 56 0 43.464 0 28C0 12.536 12.536 0 28 0C43.464 0 56 12.536 56 28Z" fill="#E13128" />
                  <path fillRule="evenodd" clipRule="evenodd" d="M26.5292 38.6667V30.1375H18V26.5292H26.5292V18H30.1375V26.5292H38.6667V30.1375H30.1375V38.6667H26.5292Z" fill="white" />
                </svg>
              </Link>
            </div>
          </div>
        )
      }
    </div>
  )
}

export default Movement
'''
'''--- src/pages/NewMovement.js ---
import 'regenerator-runtime/runtime'
import React, { useState, useEffect, useRef } from 'react'
import * as faceapi from 'face-api.js'
import { createCanvas, loadImage } from 'canvas'
import axios from 'axios'
import { useParams, withRouter } from 'react-router-dom'
import NavTop from '../components/NavTop'
import Pop from '../components/Pop'
import { RotateSpinLoader } from 'react-css-loaders'
import { compressImg } from '../utils/common'
import { useNear } from '../App'
import ipfs from '../utils/ipfs'
import Image from '../components/Image'

const NewMovement = ({ history }) => {
  const params = useParams()
  const near = useNear()
  const inputImgRef = useRef(null)
  const [img, setImg] = useState(null)
  const [imageFile, setImageFile] = useState(null)
  const [name, setName] = useState('')
  const [desc, setDesc] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [mementoId, setMementoId] = useState('')

  useEffect(() => {
    const id = `${name}.act`
    setMementoId(id)
  }, [name])

  const _validateSubmit = () => {
    if (imageFile && _validateName() && desc.length > 0 && desc.length < 400) {
      return true
    }
    return false
  }

  const _validateName = () => {
    if (name.length === 0) return true
    return name.match(/^[a-z0-9]{1,30}$/)
  }

  const _submit = async () => {
    setIsSubmitting(true)
    try {
      const exist = await near.contractParas.getMementoById({
        id: mementoId
      })

      if (exist) {
        alert('MOVEMENT already exist')
        setIsSubmitting(false)
        return
      }

      const newData = {
        name: name,
        img: null,
        desc: desc,
        category: 'act',
        type: 'public'
      }

      try {
        const img = await compressImg(imageFile)
        for await (const file of ipfs.client.add([{
          content: img
        }])) {
          newData.img = {
            url: file.path,
            type: 'ipfs'
          }
        }
        await near.contractParas.createMemento(newData)
        setTimeout(() => {
          setIsSubmitting(false)
          history.push('/new/post')
        }, 2500)
      } catch (err) {
        setIsSubmitting(false)
        alert('Something went wrong, try again later')
      }
    } catch (err) {
      console.log(err)
    }
  }

  const _updateImg = (e) => {
    var reader = new FileReader()
    const file = e.target.files[0]
    reader.onload = () => {
      const dataURL = reader.result
      setImg(dataURL)
      setImageFile(file)
    }
    reader.readAsDataURL(file)
  }

  const updateCaption = (e) => {
    setDesc(e.target.value)
  }

  return (
    <div>
      <NavTop
        left={
          <Pop>
            <button className="flex items-center">
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#F2F2F2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.394 9.93934C14.9798 10.5251 14.9798 11.4749 14.394 12.0607L11.6213 14.8333H24C24.8284 14.8333 25.5 15.5049 25.5 16.3333C25.5 17.1618 24.8284 17.8333 24 17.8333H11.6213L14.394 20.606C14.9798 21.1918 14.9798 22.1415 14.394 22.7273C13.8082 23.3131 12.8585 23.3131 12.2727 22.7273L6.93934 17.394C6.65804 17.1127 6.5 16.7312 6.5 16.3333C6.5 15.9355 6.65804 15.554 6.93934 15.2727L12.2727 9.93934C12.8585 9.35355 13.8082 9.35355 14.394 9.93934Z" fill="#F2F2F2" />
              </svg>
            </button>
          </Pop>
        }
        center={
          <h3 className="text-lg font-bold text-white px-2">New MOVEMENT</h3>
        }
        right={
          isSubmitting ? (
            <RotateSpinLoader style={{
              marginLeft: `auto`,
              marginRight: 0
            }} color="#e13128" size={2.4} />
          ) : (
              <button disabled={!_validateSubmit()} onClick={_submit}>
                <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#E13128" />
                  <circle cx="16" cy="16" r="16" fill="#E13128" />
                  <path fillRule="evenodd" clipRule="evenodd" d="M13.7061 19.2929L22.999 10L24.4132 11.4142L13.7061 22.1213L7.99902 16.4142L9.41324 15L13.7061 19.2929Z" fill="white" />
                </svg>
              </button>
            )
        }
      />
      <div>
        <input ref={inputImgRef} type="file" accept="image/*" onClick={(e) => { e.target.value = null }} onChange={e => _updateImg(e)} className="hidden" />
        <div className="mt-4">
          <div className="flex justify-between">
            <label className="block text-sm pb-1 font-semibold text-white">Image</label>
          </div>
          <div className="h-40 w-40 rounded-md relative overflow-hidden cursor-pointer">
            <div className="absolute inset-0 flex items-center justify-center opacity-50 bg-dark-0">
              <svg onClick={_ => inputImgRef.current.click()} className="cursor-pointer" width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="16" cy="16" r="16" fill="#E13128" />
                <path fillRule="evenodd" clipRule="evenodd" d="M11.8576 10.328C11.9155 10.2474 11.9799 10.1488 12.062 10.0158C12.092 9.96718 12.1738 9.83227 12.2347 9.7318L12.2347 9.73171L12.3033 9.6187C12.9816 8.50923 13.4746 8 14.3636 8H17.6364C18.5254 8 19.0184 8.50923 19.6967 9.6187L19.7654 9.7318C19.8262 9.83226 19.908 9.96718 19.938 10.0158C20.0201 10.1488 20.0844 10.2474 20.1425 10.328C20.1807 10.3812 20.214 10.4234 20.2413 10.4545H22.5455C23.9011 10.4545 25 11.5535 25 12.9091V20.2727C25 21.6284 23.9011 22.7273 22.5455 22.7273H9.45455C8.09894 22.7273 7 21.6284 7 20.2727V12.9091C7 11.5535 8.09894 10.4545 9.45455 10.4545H11.7587C11.7859 10.4234 11.8193 10.3812 11.8576 10.328ZM9.45455 12.0909C9.00268 12.0909 8.63636 12.4572 8.63636 12.9091V20.2727C8.63636 20.7246 9.00268 21.0909 9.45455 21.0909H22.5455C22.9973 21.0909 23.3636 20.7246 23.3636 20.2727V12.9091C23.3636 12.4572 22.9973 12.0909 22.5455 12.0909H20.0909C19.5474 12.0909 19.1808 11.7934 18.8141 11.2836C18.7297 11.1663 18.6461 11.0382 18.5454 10.8752C18.511 10.8193 18.4215 10.6717 18.3601 10.5703L18.3006 10.4722C17.9305 9.86686 17.7073 9.63636 17.6364 9.63636H14.3636C14.2927 9.63636 14.0695 9.86686 13.6994 10.4722L13.6399 10.5703L13.6396 10.5709C13.5782 10.6722 13.4889 10.8194 13.4545 10.8752C13.3539 11.0382 13.2703 11.1663 13.186 11.2836C12.8192 11.7934 12.4526 12.0909 11.9091 12.0909H9.45455ZM22.5455 13.7273C22.5455 14.1792 22.1792 14.5455 21.7273 14.5455C21.2754 14.5455 20.9091 14.1792 20.9091 13.7273C20.9091 13.2754 21.2754 12.9091 21.7273 12.9091C22.1792 12.9091 22.5455 13.2754 22.5455 13.7273ZM11.9091 16.1818C11.9091 18.4411 13.7407 20.2727 16 20.2727C18.2593 20.2727 20.0909 18.4411 20.0909 16.1818C20.0909 13.9225 18.2593 12.0909 16 12.0909C13.7407 12.0909 11.9091 13.9225 11.9091 16.1818ZM18.4545 16.1818C18.4545 17.5375 17.3556 18.6364 16 18.6364C14.6444 18.6364 13.5455 17.5375 13.5455 16.1818C13.5455 14.8262 14.6444 13.7273 16 13.7273C17.3556 13.7273 18.4545 14.8262 18.4545 16.1818Z" fill="white" />
              </svg>
            </div>
            {
              img && (
                <Image className="w-full h-full object-cover" data={img} />
              )
            }
          </div>
        </div>
        <div className="mt-4">
          <div className="flex justify-between">
            <label className="block text-sm pb-1 font-semibold text-white">Name</label>
          </div>
          <input type="text" placeholder="MOVEMENT name" className="w-full rounded-md p-2 outline-none bg-dark-2 focus:bg-dark-16 text-white" value={name} onChange={e => setName(e.target.value)} />
          {
            !_validateName() && (
              <div className="pt-1">
                <p className="text-primary-4 text-sm">MOVEMENT name must be lowercase and only contain letters and numbers</p>
              </div>
            )
          }
        </div>
        <div className="mt-4">
          <div className="flex justify-between">
            <label className="block text-sm pb-1 font-semibold text-white">Description</label>
          </div>
          <textarea placeholder="This MOVEMENT is about..." className="w-full resize-none h-32 rounded-md p-2 outline-none bg-dark-2 focus:bg-dark-16 text-white" value={desc} onChange={updateCaption} />
        </div>
      </div>
    </div >
  )
}

export default withRouter(NewMovement)
'''
'''--- src/pages/NewPost.js ---
import 'regenerator-runtime/runtime'
import React, { useState, useEffect } from 'react'
import * as faceapi from 'face-api.js'
import { createCanvas, loadImage } from 'canvas'
import axios from 'axios'
import { useParams, withRouter } from 'react-router-dom'
import NavTop from '../components/NavTop'
import Pop from '../components/Pop'
import { RotateSpinLoader } from 'react-css-loaders'
import { compressImg } from '../utils/common'
import { useNear } from '../App'
import ipfs from '../utils/ipfs'

const NewPost = ({ history }) => {
  const params = useParams()
  const near = useNear()
  const [imageUrl, setImageUrl] = useState(null)
  const [imageFile, setImageFile] = useState(null)
  const [caption, setCaption] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [loadingImg, setLoadingImg] = useState(false)

  const _validateSubmit = () => {
    if (imageFile && caption.length < 400) {
      return true
    }
    return false
  }

  const _submit = async () => {
    setIsSubmitting(true)
    try {
      const contentList = []
      const img = await compressImg(imageFile)
      for await (const file of ipfs.client.add([{
        content: img
      }])) {
        const content = {
          type: 'img',
          body: JSON.stringify({
            url: file.path,
            type: 'ipfs'
          })
        }
        contentList.push(content)
      }
      if (caption.length > 0) {
        contentList.push({
          type: 'text',
          body: caption
        })
      }
      const newData = {
        contentList: contentList,
        mementoId: params.mementoId,
      }
      await near.contractParas.createPost(newData)
      history.push('/')
    } catch (err) {
      console.log(err)
    }
    setIsSubmitting(false)
  }

  const updateImg = async (e) => {
    var reader = new FileReader()
    setLoadingImg('Detecting Faces...')
    reader.onload = () => {
      const dataURL = reader.result
      const imgEl = new Image()
      imgEl.src = dataURL
      imgEl.onload = async () => {
        const detections = await faceapi.detectAllFaces(imgEl)
        const faces = detections.map(x => ({
          x: x.box.topLeft.x,
          y: x.box.topLeft.y,
          w: x.box.width,
          h: x.box.height
        }))

        const outputCanvas = createCanvas(imgEl.width, imgEl.height)
        const outputCtx = outputCanvas.getContext('2d')

        const hiddenCanvas = createCanvas(imgEl.width, imgEl.height)
        const hiddenCtx = hiddenCanvas.getContext('2d')

        setLoadingImg('Pixelating Faces...')
        loadImage(dataURL).then(async (newImage) => {
          hiddenCanvas.style.cssText = 'image-rendering: optimizeSpeed' +
            'image-rendering: -moz-crisp-edges' + // FireFox
            'image-rendering: -o-crisp-edges' +  // Opera
            'image-rendering: -webkit-crisp-edges' + // Chrome
            'image-rendering: crisp-edges' + // Chrome
            'image-rendering: -webkit-optimize-contrast' + // Safari
            'image-rendering: pixelated ' + // Future browsers
            '-ms-interpolation-mode: nearest-neighbor' // IE
          // Use nearest-neighbor scaling when images are resized instead of the resizing algorithm to create blur
          hiddenCtx.webkitImageSmoothingEnabled = false
          hiddenCtx.mozImageSmoothingEnabled = false
          hiddenCtx.msImageSmoothingEnabled = false
          hiddenCtx.imageSmoothingEnabled = false

          // We'll be pixelating the image by threshold
          const percent = 0.15
          const scaledWidth = Math.min(imgEl.width * percent, 200)
          const scaledHeight = Math.min(imgEl.width * percent, 200)
          // Render image smaller
          hiddenCtx.drawImage(newImage, 0, 0, scaledWidth, scaledHeight)
          // Stretch the smaller image onto larger context
          hiddenCtx.drawImage(hiddenCanvas, 0, 0, scaledWidth, scaledHeight, 0, 0, imgEl.width, imgEl.height)

          // Clear visible canvas and draw original image to it
          outputCtx.clearRect(0, 0, imgEl.width, imgEl.height)
          outputCtx.drawImage(newImage, 0, 0)
          // Draw pixelated faces to canvas
          console.log(faces)
          faces.forEach(face =>
            outputCtx.putImageData(
              hiddenCtx.getImageData(
                face.x,
                face.y,
                face.w,
                face.h
              ),
              face.x,
              face.y
            )
          )
          const dataUrl = await outputCanvas.toDataURL()
          setImageUrl(dataUrl)
          outputCanvas.toBlob((blob) => {
            setImageFile(blob)
          })
          setLoadingImg(false)
        })
      }
    }
    const img = await compressImg(e.target.files[0])
    reader.readAsDataURL(img)
  }

  const updateCaption = (e) => {
    setCaption(e.target.value)
  }
  return (
    <div>
      <NavTop
        left={
          <Pop>
            <button className="flex items-center">
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#F2F2F2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.394 9.93934C14.9798 10.5251 14.9798 11.4749 14.394 12.0607L11.6213 14.8333H24C24.8284 14.8333 25.5 15.5049 25.5 16.3333C25.5 17.1618 24.8284 17.8333 24 17.8333H11.6213L14.394 20.606C14.9798 21.1918 14.9798 22.1415 14.394 22.7273C13.8082 23.3131 12.8585 23.3131 12.2727 22.7273L6.93934 17.394C6.65804 17.1127 6.5 16.7312 6.5 16.3333C6.5 15.9355 6.65804 15.554 6.93934 15.2727L12.2727 9.93934C12.8585 9.35355 13.8082 9.35355 14.394 9.93934Z" fill="#F2F2F2" />
              </svg>
            </button>
          </Pop>
        }
        center={
        <h3 className="text-lg font-bold text-white px-2">New Demand</h3>
        }
        right={
          isSubmitting ? (
            <RotateSpinLoader style={{
              marginLeft: `auto`,
              marginRight: 0
            }} color="#e13128" size={2.4} />
          ) : (
              <button disabled={!_validateSubmit()} onClick={_submit}>
                <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#E13128" />
                  <circle cx="16" cy="16" r="16" fill="#E13128" />
                  <path fillRule="evenodd" clipRule="evenodd" d="M13.7061 19.2929L22.999 10L24.4132 11.4142L13.7061 22.1213L7.99902 16.4142L9.41324 15L13.7061 19.2929Z" fill="white" />
                </svg>
              </button>
            )
        }
      />
      <div>
        <h4 className="text-xl text-white p-4 text-center">Posting to <b>{params.mementoId}</b></h4>
        <div className="w-full relative pb-full mt-2 rounded-md overflow-hidden">
          {
            !loadingImg && (
              <input className="absolute m-auto w-full h-full z-10 opacity-0" type="file" onChange={updateImg} />
            )
          }
          <div className="absolute m-auto w-full h-full bg-dark-2 focus:bg-dark-16">
            {
              loadingImg ? (
                <div className="flex items-center h-full overflow-hidden">
                  <div className="w-full">
                    <RotateSpinLoader style={{
                      margin: 'auto'
                    }} color="#e13128" size={4} />
                    <p className="text-white-1 text-center mt-4">{loadingImg}</p>
                  </div>
                </div>
              ) : imageUrl ? (
                <div className="flex items-center h-full">
                  <img className="object-contain" src={imageUrl} />
                </div>
              ) : (
                    <div className="flex items-center h-full overflow-hidden">
                      <div className="w-full text-center">
                        <svg className="m-auto" width="48" height="48" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                          <path fillRule="evenodd" clipRule="evenodd" d="M4 2H20C21.1046 2 22 2.89543 22 4V20C22 21.1046 21.1046 22 20 22H4C2.89543 22 2 21.1046 2 20V4C2 2.89543 2.89543 2 4 2ZM4 4V15.5858L8 11.5858L11.5 15.0858L18 8.58579L20 10.5858V4H4ZM4 20V18.4142L8 14.4142L13.5858 20H4ZM20 20H16.4142L12.9142 16.5L18 11.4142L20 13.4142V20ZM14 8C14 6.34315 12.6569 5 11 5C9.34315 5 8 6.34315 8 8C8 9.65685 9.34315 11 11 11C12.6569 11 14 9.65685 14 8ZM10 8C10 7.44772 10.4477 7 11 7C11.5523 7 12 7.44772 12 8C12 8.55228 11.5523 9 11 9C10.4477 9 10 8.55228 10 8Z" fill="white" />
                        </svg>
                        <p className="text-white-1 mt-4">Choose Image</p>
                      </div>
                    </div>
                  )
            }
          </div>
        </div>
        <div className="mt-4">
          <textarea placeholder="I demand..." className="w-full resize-none h-32 rounded-md p-2 outline-none bg-dark-2 focus:bg-dark-16 text-white" value={caption} onChange={updateCaption} />
        </div>
      </div>
    </div >
  )
}

export default withRouter(NewPost)
'''
'''--- src/pages/NewPostMementoList.js ---
import 'regenerator-runtime/runtime'
import React, { Component, createRef, createContext, useContext, useState, useRef, useEffect } from 'react'
import * as faceapi from 'face-api.js'
import { createCanvas, loadImage } from 'canvas'
import axios from 'axios'
import Image from '../components/Image'
import { Link } from 'react-router-dom'
import NavTop from '../components/NavTop'
import Pop from '../components/Pop'

const NewPostMementoList = () => {
  const [mementoList, setMementoList] = useState([])

  useEffect(() => {
    const init = async () => {
      const response = await axios.get(`https://api-dev.paras.id/mementos?id__re=.act&__sort=-createdAt`)
      setMementoList(response.data.data)
    }
    init()
  }, [])

  return (
    <div>
      <NavTop
        left={
          <Pop>
            <button className="flex items-center">
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#F2F2F2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.394 9.93934C14.9798 10.5251 14.9798 11.4749 14.394 12.0607L11.6213 14.8333H24C24.8284 14.8333 25.5 15.5049 25.5 16.3333C25.5 17.1618 24.8284 17.8333 24 17.8333H11.6213L14.394 20.606C14.9798 21.1918 14.9798 22.1415 14.394 22.7273C13.8082 23.3131 12.8585 23.3131 12.2727 22.7273L6.93934 17.394C6.65804 17.1127 6.5 16.7312 6.5 16.3333C6.5 15.9355 6.65804 15.554 6.93934 15.2727L12.2727 9.93934C12.8585 9.35355 13.8082 9.35355 14.394 9.93934Z" fill="#F2F2F2" />
              </svg>
            </button>
          </Pop>
        }
        center={
          <h3 className="text-lg font-bold text-white px-2">Select the MOVEMENT</h3>
        }
        right={
          <Link
            to="/new/movement"
          >
            <button>
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <circle cx="16" cy="16" r="15" fill="#E13128" stroke="#E13128" strokeWidth="2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.5408 22.3337V17.4598H9.66699V14.5408H14.5408V9.66699H17.4598V14.5408H22.3337V17.4598H17.4598V22.3337H14.5408Z" fill="white" />
              </svg>
            </button>
          </Link>
        }
      />
      <div className="flex flex-wrap">
        {
          mementoList.map(memento => {
            return (
              <div key={memento.id} className="w-1/2 p-4">
                <Link to={`/new/post/${memento.id}`}>
                  <div>
                    <Image className="w-56 h-56 object-contain m-auto" data={memento.img} />
                    <h4 className="mt-2 text-white text-center font-bold truncate overflow-hidden">{memento.id}</h4>
                  </div>
                </Link>
              </div>
            )
          })
        }
      </div>
    </div>
  )
}

export default NewPostMementoList
'''
'''--- src/pages/Profile.js ---
import React, { useEffect, useState } from 'react'
import NavTop from '../components/NavTop'
import Pop from '../components/Pop'
import Image from '../components/Image'
import PostCard from '../components/PostCard'
import { useParams, Link } from 'react-router-dom'
import axios from 'axios'
import InfiniteScroll from 'react-infinite-scroll-component'
import InfiniteLoader from '../components/InfiniteLoader'
import { useNear } from '../App'

const Profile = () => {
  const params = useParams()
  const near = useNear()
  const [user, setUser] = useState({})
  const [postList, setPostList] = useState([])
  const [hasMore, setHasMore] = useState(true)
  const [pageCount, setPageCount] = useState(0)

  const getPost = async () => {
    const ITEM_LIMIT = 10
    const response = await axios.get(`https://api-dev.paras.id/posts?owner=${params.userId}&__sort=-createdAt&__limit=${ITEM_LIMIT}&__skip=${pageCount * ITEM_LIMIT}`)
    if (response.data.data.length < ITEM_LIMIT) {
      setHasMore(false)
    }
    setPageCount(pageCount + 1)
    const newPostList = postList.slice().concat(response.data.data)
    setPostList(newPostList)
  }

  useEffect(() => {
    const getData = async () => {
      const responseMemento = await axios.get(`https://api-dev.paras.id/users?id=${params.userId}`)
      setUser(responseMemento.data.data[0])
      getPost()
    }
    getData()
  }, [])
  return (
    <div className="pb-24">
      <NavTop
        left={
          <Pop>
            <a>
              <svg width="24" height="24" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
                <path fillRule="evenodd" clipRule="evenodd" d="M16 30C23.732 30 30 23.732 30 16C30 8.26801 23.732 2 16 2C8.26801 2 2 8.26801 2 16C2 23.732 8.26801 30 16 30ZM16 32C24.8366 32 32 24.8366 32 16C32 7.16344 24.8366 0 16 0C7.16344 0 0 7.16344 0 16C0 24.8366 7.16344 32 16 32Z" fill="#F2F2F2" />
                <path fillRule="evenodd" clipRule="evenodd" d="M14.394 9.93934C14.9798 10.5251 14.9798 11.4749 14.394 12.0607L11.6213 14.8333H24C24.8284 14.8333 25.5 15.5049 25.5 16.3333C25.5 17.1618 24.8284 17.8333 24 17.8333H11.6213L14.394 20.606C14.9798 21.1918 14.9798 22.1415 14.394 22.7273C13.8082 23.3131 12.8585 23.3131 12.2727 22.7273L6.93934 17.394C6.65804 17.1127 6.5 16.7312 6.5 16.3333C6.5 15.9355 6.65804 15.554 6.93934 15.2727L12.2727 9.93934C12.8585 9.35355 13.8082 9.35355 14.394 9.93934Z" fill="#F2F2F2" />
              </svg>
            </a>
          </Pop>
        }
        center={
          <h3 className="text-lg font-bold text-white px-2">{user.id}</h3>
        }
      />
      <div className="mt-4">
        <Image className="w-40 h-40 rounded-sm m-auto object-contain" data={user.imgAvatar} />
        <div className="text-center mt-4">
          <h4 className="text-white font-bold">{user.id}</h4>
          <p className="text-white-2">{user.bio}</p>
        </div>
      </div>
      <div>
        <InfiniteScroll
          dataLength={postList.length}
          next={getPost}
          hasMore={hasMore}
          loader={<InfiniteLoader key={0} />}
        >
          {
            postList.map(post => {
              return (
                <div key={post.id} className="mt-6">
                  <PostCard post={post} />
                </div>
              )
            })
          }
        </InfiniteScroll>
      </div>
      {
        near.me && (
          <div className="fixed bottom-0 pb-4" style={{
            left: `50%`,
            transform: `translateX(-50%)`
          }}>
            <div className="m-auto w-16">
              <Link className="inline-block" to={`/new/post`}>
                <svg width="56" height="56" viewBox="0 0 56 56" fill="none" xmlns="http://www.w3.org/2000/svg">
                  <path d="M56 28C56 43.464 43.464 56 28 56C12.536 56 0 43.464 0 28C0 12.536 12.536 0 28 0C43.464 0 56 12.536 56 28Z" fill="#E13128" />
                  <path fillRule="evenodd" clipRule="evenodd" d="M26.5292 38.6667V30.1375H18V26.5292H26.5292V18H30.1375V26.5292H38.6667V30.1375H30.1375V38.6667H26.5292Z" fill="white" />
                </svg>
              </Link>
            </div>
          </div>
        )
      }
    </div>
  )
}

export default Profile
'''
'''--- src/utils/common.js ---
import Compressor from 'compressorjs'

export const compressImg = (file, quality) => {
  return new Promise(async (resolve, reject) => {
    let _file = file
    new Compressor(_file, {
      quality: quality || 0.8,
      maxWidth: 1920,
      maxHeight: 1920,
      convertSize: 1000000,
      success: resolve,
      error: reject,
    })
  })
}
'''
'''--- src/utils/ipfs.js ---
import ipfsClient from 'ipfs-http-client'

class IPFS {
  constructor() {
    this.client = null
  }

  init() {
    this.client = ipfsClient({ host: 'ipfs-api.paras.id', port: '443', protocol: 'https' })
  }
}

export default new IPFS()
'''
'''--- tailwind.js ---
module.exports = {
  purge: {
    enabled: process.env.NODE_ENV === 'production' ? true : false,
    content: ["./src/**/*.js"],
  },
  corePlugins: {
    fontFamily: false
  },
  theme: {
    extend: {
      colors: {
        'dark-0': '#121212',
        'dark-1': '#1E1E1E',
        'dark-2': '#232323',
        'dark-3': '#252525',
        'dark-4': '#272727',
        'dark-6': '#2C2C2C',
        'dark-8': '#2E2E2E',
        'dark-12': '#333333',
        'dark-16': '#363636',
        'dark-24': '#383838',
        'primary-1': '#fac8cd',
        'primary-2': '#e69292',
        'primary-3': '#d86868',
        'primary-4': '#df4544',
        'primary-5': '#e13128',
        'primary-6': '#d32728',
        'primary-7': '#c21c23',
        'primary-8': '#b5131c',
        'primary-9': '#a60010',
        'black-1': '#1B1B1B',
        'black-2': '#3F3F3F',
        'black-3': '#616161',
        'black-4': '#8F8F8F',
        'black-5': '#BFBFBF',
        'black-6': '#DFDFDF',
        'white-1': '#E2E2E2',
        'white-2': '#A5A5A5',
        'white-3': '#787878'
      },
      text: {
        'xs': '.75rem',
        '2xs': '.5rem'
      },
      opacity: {
        '87': '.87',
        '60': '.60'
      },
      boxShadow: {
        'inner-sm': 'inset 0px 1px 8px rgba(0, 0, 0, 0.25)',
        'subtle': `0px 0px 4px rgba(0, 0, 0, 0.15)`
      },
      padding: {
        'third': '33.3%',
        'half': '50%',
        'full': '100%',
        '3/4': '75%',
      }
    }
  }
}
'''