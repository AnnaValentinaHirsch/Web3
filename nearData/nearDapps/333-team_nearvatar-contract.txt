*GitHub Repository "333-team/nearvatar-contract"*

'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'dev-1644761008317-80770699190791'; /* TODO: change this to your account */

function getConfig (env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      }
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
  <link href="https://fonts.googleapis.com/css?family=Arvo&display=swap" rel="stylesheet">
  <style>
      h1 {
        margin-top: 3em;
        margin-bottom: 1em;
      }
      .scene {
        height: 350px;
      }
      .face {
        margin: auto;
        width: 66%;
        height: 72%;
        background-color: #fffaf2;
      }
      .number {
        text-align: center;
        margin:auto;
        width: 66%;
        height: 28%;
        background-color: #ffd9f8;
        border-top: 5px dotted #82174d;
        font-size:1.5rem;
      }
      .eyes-row {
        display: flex;
        justify-content: space-around;
        margin-top: 24%;
        padding: 0 8px;
      }
      .closed {
        width: 22px;
        height: 13px;
        border-top-left-radius: 100px;
        border-top-right-radius: 100px;
        border-left: 2px solid #ffa4b1;
        border-right: 2px solid #ffa4b1;
        border-top: 2px solid #ffa4b1;
        margin-bottom: 12px;
      }
      .eye {
        width: 26px;
        height: 26px;
        border-radius: 100px;
        background-color: #ffa4b1;
        display: flex;
        justify-content: center;
        align-items: center;
        margin-bottom: 1px;
      }
      .eye .pupil {
        position: relative;
        width: 18px;
        height: 18px;
        border-radius: 100px;
        background-color: #82174d;
      }
      .eye .pupil:before {
        content: "";
        width: 6px;
        height: 6px;
        position: absolute;
        background-color: #fff;
        top: 4px;
        left: 3px;
        border-radius: 100px;
      }
      .eye .pupil:after {
        content: "";
        width: 3px;
        height: 3px;
        position: absolute;
        background-color: #fff;
        top: 9px;
        left: 12px;
        border-radius: 100px;
      }
      .mouth-row {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        align-items: center;
      }
      .mouth-row .mouth {
        margin-top: 3%;
      }
      .mouth-row .tongue {
        position:absolute;
        width: 10px;
        height: 10px;
        background-color: #FF585D;
        border-radius: 50% 50% 30%;
        margin: 5px 0;
      }
      .mouth-row .mouth.smile {
        height: 16px;
        width: 32px;
        border-bottom-left-radius: 32px;
        border-bottom-right-radius: 32px;
        background-color: #82174d;
        top: 120px;
      }
      .mouth-row .mouth.cry {
        height: 16px;
        width: 32px;
        border-top-left-radius: 32px;
        border-top-right-radius: 32px;
        background-color: #82174d;
        top: 120px;
      }
      .mouth-row .mouth:before {
        content: "";
        left: 43px;
        margin-top: 1%;
        border-radius: 100%;
        height: 5%;
        width: 11.5%;
        background-color: #f56f79;
        position: absolute;
      }
      .mouth-row .mouth:after {
        content: "";
        left: 106px;
        margin-top: 1%;
        border-radius: 100%;
        height: 5%;
        width: 11.5%;
        background-color: #f56f79;
        position: absolute;
      }
      .gameboy {
        position: relative;
        width: 400px;
        margin: auto;
      }
      .body-shape {
        position: absolute;
        height: 300px;
        width: 205px;
        border-radius: 15px;
      }
      .body-shape .shadow {
        height: 290px;
      }
      .body-shape .screen {
        margin: 20px;
        position: relative;
        width: 168px;
        height: 134px;
        background-color: #82174d;
        border-radius: 4px;
        display: flex;
        flex-direction: column;
        justify-items: center;
      }
      .body-shape .dot {
        content: "";
        width: 8px;
        height: 8px;
        position: absolute;
        background-color: #ffa4b1;
        top: 40px;
        left: 10px;
        border-radius: 100px;
      }
      .body-shape .on {
        background-color: #F0EC74;
      }
      .body-shape .buttons {
        display: flex;
        flex-direction: column;
        justify-content: space-around;
        width: 100%;
      }
      .body-shape .buttons .row {
        display: flex;
      }
      .body-shape .buttons .selects {
        margin-top: 10px;
        padding-left: 140px;
      }
      .body-shape .buttons .arrows {
        position: relative;
        height: 40px;
        width: 40px;
        border-radius: 100px;
        background-color: #ffa4b1;
        margin-left: 30px;
        padding: 0;
        cursor: grab;
      }
      .body-shape .buttons .arrows:disabled {
        opacity: 0.8;
        background-color: #d18892;
      }
      .body-shape .buttons .arrows .updown {
        position: relative;
        height: 35px;
        width: 10px;
        background-color: #82174d;
        border-radius: 2px;
        top: -8px;
        left: 14px;
      }
      .body-shape .buttons .arrows .left {
        position: relative;
        width: 35px;
        height: 10px;
        background-color: #82174d;
        border-radius: 2px;
        top: 14px;
        left: 2px;
      }
      .body-shape .buttons .arrows .right {
        position: relative;
        width: 35px;
        height: 10px;
        background-color: #82174d;
        border-radius: 2px;
        left: 2px;
      }
      .body-shape .buttons .ab {
        width: 64px;
        height: 64px;
        background-color: #ffa4b1;
        border-radius: 10px;
        transform: rotate(45deg);
        font-size: 0.6rem;
        text-align: center;
      }
      .body-shape .buttons .ab .r {
        width: 24px;
        height: 24px;
        border-radius: 100%;
        background-color: #82174d;
        position: absolute;
        transform: rotate(-45deg);
        padding: 5px;
        color: #ffa4b1;
        cursor:pointer;
        box-shadow:-1px 0 1px #4B4F54;
      }
      .body-shape .buttons .ab .r:hover {
        opacity: 0.8;
      }
      .body-shape .buttons .ab .r:active {
        background-color: #F0EC74;
        opacity: 1;
      }
      .body-shape .buttons .ab .a {
        top: 4px;
        left: 4px;
      }
      .body-shape .buttons .ab .b {
        top: 4px;
        left: 36px;
      }
      .body-shape .buttons .ab .c {
        top: 36px;
        left: 4px;
      }
      .body-shape .buttons .ab .d {
        top: 36px;
        left: 36px;
      }
      .shadow {
        background-color: #888ad0;
        z-index: 0;
        left: -17px;
        top: 26px;
      }
      .side {
        background-color: #82174d;
        z-index: 1;
      }
      .front {
        background-color: #f56f79;
        left: 26px;
        z-index: 2;
      }
      .loader,
      .loader:before,
      .loader:after {
        background: #f56f79;
        -webkit-animation: load1 1s infinite ease-in-out;
        animation: load1 1s infinite ease-in-out;
        width: 0.4rem;
        height: 4em;
      }
      .loader {
        color: #f56f79;
        margin: 2px auto;
        font-size: 0.2rem;
        -webkit-transform: translateZ(0);
        -ms-transform: translateZ(0);
        transform: translateZ(0);
        -webkit-animation-delay: -0.16s;
        animation-delay: -0.16s;
      }
      .loader:before,
      .loader:after {
        position: absolute;
        top: 0;
        content: '';
      }
      .loader:before {
        left: -1.5em;
        -webkit-animation-delay: -0.32s;
        animation-delay: -0.32s;
      }
      .loader:after {
        left: 1.5em;
      }
      @-webkit-keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          height: 2em;
        }
        40% {
          box-shadow: 0 -2em;
          height: 3em;
        }
      }
      @keyframes load1 {
        0%,
        80%,
        100% {
          box-shadow: 0 0;
          height: 2em;
        }
        40% {
          box-shadow: 0 -2em;
          height: 3em;
        }
      }
    </style>
</head>
<body style="background: #eef2fe; font-family: 'Arvo', serif;">
  <div class="container">
    <div>
       <div>1、修改头像如果是完整图片url，可以直接使用</div>
       <div>2、修改头像如果是链上资产，确保链上资产先添加</div>
    </div>
    <div>
      <button class="new" style="background-color: #0072CE;">重置</button> 
      <button class="modify-avatar" style="background-color: #0072CE;">修改头像</button> 
      <button class="new-asset" style="background-color: #0072CE;">修改或新增资产</button>
    </div>

    <div>
      我的账号：
      <span class="my-account"></span>
     
    </div>
    <div>
      展示名称：
      <span class="displayname"></span>
     
    </div>
    <div>
      头像：
      <span class="avatar"></span>
     
    </div>
    <div>
      我的资产：
      <span class="assets"></span>
     
    </div>

    <div class="sign-in" style="display: none;">
      <p>You'll need to sign in to call contract methods:</p>
      <button class="btn btn-primary" style="background-color: #0072CE;">Sign In</button>
    </div>

    
        
        <div class="sign-out">
          <button class="btn btn-primary" style="background-color: #0072CE;">Sign Out</button>
        </div>
    
  </div>
  <script src="./main.js"></script>
</body>
</html>

'''
'''--- src/loader.html ---
<head>
    <script>
        window.paceOptions = {
            elements: {
                selectors: ['.never-appears']
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/pace.min.js"></script>
    <link href="https://cdn.jsdelivr.net/gh/HubSpot/pace@v0.5.3/themes/black/pace-theme-center-radar.css" rel="stylesheet" />
</head>
'''
'''--- src/main.js ---
import "regenerator-runtime/runtime";
import * as nearAPI from "near-api-js";
import getConfig from "./config";
import { stringifyJsonOrBytes } from "near-api-js/lib/transaction";
const nearConfig = getConfig(process.env.NODE_ENV || "development");

async function connect(nearConfig) {
  debugger
  console.log(new nearAPI.keyStores.BrowserLocalStorageKeyStore())
  // Connects to NEAR and provides `near`, `walletAccount` and `contract` objects in `window` scope
  // Initializing connection to the NEAR node.
  window.near = await nearAPI.connect({
    deps: {
      keyStore: new nearAPI.keyStores.BrowserLocalStorageKeyStore()
    },
    ...nearConfig
  });

  // Needed to access wallet login
  window.walletConnection = new nearAPI.WalletConnection(window.near);

  // Initializing our contract APIs by contract name and configuration.
  window.contract = await new nearAPI.Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read-only – they don't modify the state, but usually return some value
    viewMethods: ['get_record_by_owner'],
    // Change methods can modify the state, but you don't receive the returned value when called
    changeMethods: ['del_record_by_owner', 'set_record_by_owner','update_avatar_by_owner','upsert_asset_by_owner'],
    // Sender is the account ID to initialize transactions.
    // getAccountId() will return empty string if user is still unauthorized
    sender: window.walletConnection.getAccountId()
  });
}

function errorHelper(err) {
  // if there's a cryptic error, provide more helpful feedback and instructions here
  // TODO: as soon as we get the error codes propagating back, use those
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
        'This may require deleting and recreating the NEAR account as shown here:\n' +
        'https://stackoverflow.com/a/60767144/711863');
  }
  if (err.message.includes('Cannot deserialize the contract state')) {
    console.warn('NEAR Warning: the contract/account seems to have state that is not (or no longer) compatible.\n' +
        'This may require deleting and recreating the NEAR account as shown here:\n' +
        'https://stackoverflow.com/a/60767144/711863');
  }
  console.error(err);
}

function updateUI() {
  if (!window.walletConnection.getAccountId()) {
    Array.from(document.querySelectorAll('.sign-in')).map(it => it.style = 'display: block;');
  } else {

    document.querySelector('.my-account').innerText=window.walletConnection.getAccountId();
    contract.get_record_by_owner({'owner':window.walletConnection.getAccountId()}).then(a=>{
      const displayname = a.displayname
      const description =a.description
      const avatar = a.avatarid
      const records = a.attributelist
      const recordsJson = JSON.parse(records);
      var avatarInfo=""
      if(avatar.indexOf("jpg")>0){
         avatarInfo =avatar;
      }else{
        avatarInfo = recordsJson[avatar]
      }

      // document.querySelector('.my-account').innerText="11"
      document.querySelector('.displayname').innerText=displayname ;
      document.querySelector('.avatar').innerText= JSON.stringify(avatarInfo) ;
      document.querySelector('.assets').innerText= JSON.stringify(recordsJson) ;
      
    })

    // Array.from(document.querySelectorAll('.after-sign-in')).map(it => it.style = 'display: block;');
    // contract.get_num().then(count => {
    //   document.querySelector('#show').classList.replace('loader','number');
    //   document.querySelector('#show').innerText = count === undefined ? 'calculating...' : count;
    //   document.querySelector('#left').classList.toggle('eye');
      // document.querySelectorAll('button').forEach(button => button.disabled = false);
    //   if (count >= 0) {
    //     document.querySelector('.mouth').classList.replace('cry','smile');
    //   } else {
    //     document.querySelector('.mouth').classList.replace('smile','cry');
    //   }
    //   if (count > 20 || count < -20) {
    //     document.querySelector('.tongue').style.display = 'block';
    //   } else {
    //     document.querySelector('.tongue').style.display = 'none';
    //   }
    // }).catch(err => errorHelper(err));
  }
}
document.querySelector('.new').addEventListener('click', () => {
   
const avatar = {
  'displayname':'tom',
  'avatar':'mintbase-999',
  'description':'i am  tom',
  'records':JSON.stringify({'mintbase-999':{
     'id':'mintbase-999',
     'type':'nft',
     'attr':[
       {
         'url':'1.jpg'
      },
      { 
        'key':'parent',
       'value':'nftid.222@near',
      },
       { 
         'key':'ancestors',
         'value':'333',
      }, 
      ]
  },
  })
}
contract.set_record_by_owner(avatar)
})

document.querySelector('.modify-avatar').addEventListener('click', () => {
   contract.update_avatar_by_owner({"avatar":"www.11/1.jpg"})
  
  
  })
  document.querySelector('.new-asset').addEventListener('click', () => {
    
    contract.upsert_asset_by_owner({
      "asset_id":"11@github",
      "asset_attr":JSON.stringify({
        "id":"11@github",
        "type":"github",
        "attr":[{
          "key":"mail",
          "value":"xx@163.com"
        }]
      })
    })
  
  })
// document.querySelector('#plus').addEventListener('click', () => {
//   debugger
//   document.querySelectorAll('button').forEach(button => button.disabled = true);
//   document.querySelector('#show').classList.replace('number','loader');
//   document.querySelector('#show').innerText = '';
//   contract.increment().then(updateUI);
// });
// document.querySelector('#minus').addEventListener('click', () => {
//   document.querySelectorAll('button').forEach(button => button.disabled = true);
//   document.querySelector('#show').classList.replace('number','loader');
//   document.querySelector('#show').innerText = '';
//   contract.decrement().then(updateUI);
// });
// document.querySelector('#a').addEventListener('click', () => {
//   document.querySelectorAll('button').forEach(button => button.disabled = true);
//   document.querySelector('#show').classList.replace('number','loader');
//   document.querySelector('#show').innerText = '';
//   contract.reset().then(updateUI);
// });
// document.querySelector('#c').addEventListener('click', () => {
//   document.querySelector('#left').classList.toggle('eye');
// });
// document.querySelector('#b').addEventListener('click', () => {
//   document.querySelector('#right').classList.toggle('eye');
// });
// document.querySelector('#d').addEventListener('click', () => {
//   document.querySelector('.dot').classList.toggle('on');
// });

// Log in user using NEAR Wallet on "Sign In" button click
document.querySelector('.sign-in .btn').addEventListener('click', () => {
  walletConnection.requestSignIn(nearConfig.contractName, 'Rust Counter Example');
});

document.querySelector('.sign-out .btn').addEventListener('click', () => {
  walletConnection.signOut();
  // TODO: Move redirect to .signOut() ^^^
  window.location.replace(window.location.origin + window.location.pathname);
});

window.nearInitPromise = connect(nearConfig)
    .then(updateUI)
    .catch(console.error);

'''
'''--- src/test-setup.js ---
(function () {
  let params = new URL(window.location).searchParams;
  let keyStore = new nearlib.keyStores.InMemoryKeyStore();
  nearConfig.contractName = params.get('contractName') || nearConfig.contractName;
  keyStore.setKey(nearConfig.networkId, nearConfig.contractName, nearlib.KeyPair.fromString(params.get('privateKey')));
  nearConfig.deps = { keyStore };
})();

'''
'''--- src/test.js ---
describe('Token', function () {
  let near;
  let contract;
  let accountId;

  beforeAll(async function () {
    console.log('nearConfig', nearConfig);
    near = await nearlib.connect(nearConfig);
    accountId = nearConfig.contractName;
    contract = await near.loadContract(nearConfig.contractName, {
      viewMethods: ['get_num'],
      changeMethods: ['increment', 'decrement', 'reset'],
      sender: accountId
    });
  });

  describe('counter', function () {
    it('can be incremented', async function () {
      const startCounter = await contract.get_num();
      await contract.increment();
      const endCounter = await contract.get_num();
      expect(endCounter).toEqual(startCounter + 1);
    });
    it('can be decremented', async function () {
      await contract.increment();
      const startCounter = await contract.get_num();
      await contract.decrement();
      const endCounter = await contract.get_num();
      expect(endCounter).toEqual(startCounter - 1);
    });
    it('can be reset', async function () {
      await contract.increment();
      const startCounter = await contract.get_num();
      await contract.reset();
      const endCounter = await contract.get_num();
      expect(endCounter).toEqual(0);
    });
  });
});
'''