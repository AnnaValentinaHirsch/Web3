*GitHub Repository "hack-a-chain-software/near.monorepo"*

'''--- .eslintrc.js ---
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  globals: {
    process: true,
  },
  extends: [
    "eslint:recommended",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended",
  ],
  parser: "@typescript-eslint/parser",
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: "latest",
    sourceType: "module",
  },
  plugins: ["react", "@typescript-eslint"],
  rules: {
    "react/prop-types": "off",
    "react/react-in-jsx-scope": "off",
    "no-extra-boolean-cast": "off",
    "@typescript-eslint/ban-ts-comment": "off",
    "@typescript-eslint/no-non-null-assertion": "off",
  },
};

'''
'''--- .github/ISSUE_TEMPLATE/bug-report.yml ---
name: Bug Report
description: File a bug report
title: "[Bug]: "
labels: ["bug"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out this bug report!
  - type: textarea
    id: what-happened
    attributes:
      label: What happened?
      description: Also tell us, what did you expect to happen?
      placeholder: Tell us what you see!
      value: "A bug happened!"
    validations:
      required: true
  - type: textarea
    id: repo-steps
    attributes:
      label: How to reproduce the bug?
      description: Please explain how to reproduce the bug
      placeholder: Tell us how to repo the bug!
      value: |
        1. Go to '...'
        2. Click on '...'
        3. Scroll down to '...'
        4. See error
    validations:
      required: true
  - type: "checkboxes"
    id: browsers
    attributes:
      label: What browsers are you seeing the problem on?
      options:
        - label: Firefox
        - label: Chrome
        - label: Safari
        - label: Microsoft Edge
  - type: checkboxes
    id: devices
    attributes:
      label: What device type(s) did you see the problem on?
      options:
        - label: "Desktop"
        - label: "Mobile"
        - label: "Tablet"
  - type: checkboxes
    id: operating-system
    attributes:
      label: "What operating system(s) did you see the problem on?"
      options:
        - label: "macOS"
        - label: "Windows"
        - label: "Linux"
  - type: textarea
    id: additional
    attributes:
      label: Additional information
      description: Use this section to provide any additional information you may have like screenshots, logs, notes, video links, etc...

'''
'''--- .github/ISSUE_TEMPLATE/feature-creation.yml ---
name: "Feature request"
description: "File a Feature request"
title: "[Feature]: "
labels: ["enhancement"]
body:
  - type: markdown
    attributes:
      value: |
        Thanks for taking the time to fill out a feature request!
  - type: textarea
    id: context
    attributes:
      label: Context / Background / How This Idea Came To Fruition
      description: Please provide some context around your idea
    validations:
      required: true
  - type: textarea
    id: problem
    attributes:
      label: Problem / Opportunity
      description: What are we trying to solve/improve with this feature?
    validations:
      required: true
  - type: textarea
    id: solution
    attributes:
      label: Proposed Solution / How It Can Be Improved
      description: What will your feature / enhancement look like?  (i.e frontend changes should have accompanying screenshots around the solution)
    validations:
      required: true
  - type: textarea
    id: testing
    attributes:
      label: Testing the changes
      description: Please provide a high level description of how you'll verify your changes work and won't break existing functionality?
    validations:
      required: true
  - type: textarea
    id: additional
    attributes:
      label: Additional Information
      description: Please provide any additional information around your request here

'''
'''--- .github/PULL_REQUEST_TEMPLATE.md ---
### What does it do?

### Any helpful background information?

### Any new dependencies? Why were they added?

### Relevant screenshots/gifs

### Does it close any issues?

Closes #...
'''
'''--- .github/workflows/CI.yml ---
name: CI

on: pull_request

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check_build_and_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install Rust
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          source $HOME/.cargo/env
          rustup component add rustfmt
          rustup target add wasm32-unknown-unknown

      - name: Install Yarn Globally
        run: npm install -g yarn

      - name: Installing Dependencies
        run: yarn

      - name: Rust Tests
        run: yarn contracts test:rust

      - name: Lib Tests
        run: yarn contracts test:lib

  cypress-run:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Yarn Globally
        run: npm install -g yarn

      - name: Cypress run
        uses: cypress-io/github-action@v4
        with:
          record: false
          browser: chrome
          install-command: yarn
          build: yarn front build
          start: yarn front dev

'''
'''--- .husky/commit-msg.sh ---
#!/bin/sh
. "$(dirname "$0")/_/husky.sh"

yarn commitlint --edit $1 && yarn lint-staged
'''
'''--- LICENSE.md ---
MIT License

Copyright (c) 2018 LFSCamargo

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''
'''--- commitlint.config.js ---
module.exports = { extends: ["@commitlint/config-conventional"] };

'''
'''--- cypress.config.ts ---
import { defineConfig } from "cypress";

export default defineConfig({
  e2e: {
    setupNodeEvents(on, config) {
      // implement node event listeners here
    },
    video: false,
    baseUrl: "http://localhost:3000/",
  },
});

'''
'''--- cypress/e2e/base.cy.ts ---
describe("home", () => {
  beforeEach(function () {
    cy.visit("/");
  });

  it("passes", () => {
    cy.get("body", { log: true });
  });
});

'''
'''--- cypress/fixtures/example.json ---
{
  "name": "Using fixtures to represent data",
  "email": "hello@cypress.io",
  "body": "Fixtures are a great way to mock data for responses to routes"
}

'''
'''--- cypress/support/commands.ts ---
/// <reference types="cypress" />
// ***********************************************
// This example commands.ts shows you how to
// create various custom commands and overwrite
// existing commands.
//
// For more comprehensive examples of custom
// commands please read more here:
// https://on.cypress.io/custom-commands
// ***********************************************
//
//
// -- This is a parent command --
// Cypress.Commands.add('login', (email, password) => { ... })
//
//
// -- This is a child command --
// Cypress.Commands.add('drag', { prevSubject: 'element'}, (subject, options) => { ... })
//
//
// -- This is a dual command --
// Cypress.Commands.add('dismiss', { prevSubject: 'optional'}, (subject, options) => { ... })
//
//
// -- This will overwrite an existing command --
// Cypress.Commands.overwrite('visit', (originalFn, url, options) => { ... })
//
// declare global {
//   namespace Cypress {
//     interface Chainable {
//       login(email: string, password: string): Chainable<void>
//       drag(subject: string, options?: Partial<TypeOptions>): Chainable<Element>
//       dismiss(subject: string, options?: Partial<TypeOptions>): Chainable<Element>
//       visit(originalFn: CommandOriginalFn, url: string, options: Partial<VisitOptions>): Chainable<Element>
//     }
//   }
// }

'''
'''--- cypress/support/e2e.ts ---
// ***********************************************************
// This example support/e2e.ts is processed and
// loaded automatically before your test files.
//
// This is a great place to put global configuration and
// behavior that modifies Cypress.
//
// You can change the location of this file or turn off
// automatically serving support files with the
// 'supportFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/configuration
// ***********************************************************

// Import commands.js using ES2015 syntax:
import "./commands";

// Alternatively you can use CommonJS syntax:
// require('./commands')

'''
'''--- format_rust.sh ---
if ! command -v cargo &> /dev/null
then
    echo "The required package cargo could not be found aborting. Please install rust"
    exit

else
  cd packages/contracts && cargo fmt --all && cd ..
fi
'''
'''--- package.json ---
{
  "name": "near.monorepo",
  "version": "1.0.0",
  "description": "Near Contract and React Monorepo",
  "private": true,
  "scripts": {
    "postinstall": "yarn husky install",
    "front": "yarn workspace @near/front",
    "contracts": "yarn workspace @near/contracts"
  },
  "lint-staged": {
    "*.{ts,tsx}": [
      "yarn prettier --config .prettierrc --write"
    ],
    "*.{js,jsx}": [
      "yarn prettier --config .prettierrc --write"
    ],
    "*.rs": [
      "sh ./format_rust.sh"
    ]
  },
  "husky": {
    "hooks": {
      "pre-commit": "yarn lint-staged"
    }
  },
  "workspaces": {
    "packages": [
      "packages/*"
    ],
    "nohoist": [
      "**/tailwindcss",
      "**/tailwindcss/**",
      "**/postcss",
      "**/postcss/**",
      "**/autoprefixer",
      "**/autoprefixer/**"
    ]
  },
  "license": "MIT",
  "devDependencies": {
    "@commitlint/cli": "^16.0.1",
    "@commitlint/config-conventional": "^16.0.0",
    "@types/jest": "^27.5.0",
    "@typescript-eslint/eslint-plugin": "^5.22.0",
    "@typescript-eslint/parser": "^5.22.0",
    "cypress": "^10.6.0",
    "eslint": "^8.15.0",
    "eslint-plugin-react": "^7.29.4",
    "husky": "^8.0.1",
    "lint-staged": "^12.4.1",
    "nodemon": "^2.0.15",
    "prettier": "^2.6.2"
  }
}

'''
'''--- packages/contracts/.rustfmt.toml ---
reorder_imports = false
tab_spaces = 2
'''
'''--- packages/contracts/Cargo.toml ---
[workspace]
#Add location of contracts here
members = [
    "./contract"
]

[profile.release]
codegen-units = 1
# s = optimize for binary size ("z" would additionally turn off loop vectorization)
opt-level = "z"
# link time optimization
lto = true
debug = false
panic = "abort"
overflow-checks = true
'''
'''--- packages/contracts/README.md ---
contract
==================

This app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] ≥ 12
2. Install dependencies: `yarn install`
3. Run the local development server: `yarn dev` (see `package.json` for a
   full list of `scripts` you can run with `yarn`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/src` folder. `/src/index.html` is a great
   place to start exploring. Note that it loads in `/src/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `yarn
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `yarn dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `yarn install`, but for best ergonomics you may want to install it globally:

    yarn install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `contract.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `contract.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account contract.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'contract.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    yarn deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- packages/contracts/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

const cargoFile = require('toml').parse(require('fs').readFileSync('./Cargo.toml', 'utf-8'))
const contracts = cargoFile.workspace.members

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0) {
  const linkDir = `${calledFromDir}/out`
  sh.mkdir('-p', linkDir)

  for (let member of contracts) {
    const memberName = member.split("/")[1]
    const link = `${calledFromDir}/out/${memberName}.wasm`
    const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${memberName}.wasm`
    sh.rm('-f', link)
    //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
    sh.cp('-u',outFile,link)
  }
  
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- packages/contracts/contract/Cargo.toml ---
[package]
name = "contract"
version = "0.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
'''
'''--- packages/contracts/contract/README.md ---
contract Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`. You can compile it with
   the `./compile` script.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- packages/contracts/contract/src/lib.rs ---
/*
 * This is an example of a Rust smart contract with two simple, symmetric functions:
 *
 * 1. set_greeting: accepts a greeting, such as "howdy", and records it for the user (account_id)
 *    who sent the request
 * 2. get_greeting: accepts an account_id and returns the greeting saved for it, defaulting to
 *    "Hello"
 *
 * Learn more about writing NEAR smart contracts with Rust:
 * https://github.com/near/near-sdk-rs
 *
 */

// To conserve gas, efficient serialization is achieved through Borsh (http://borsh.io/)
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{env, near_bindgen, setup_alloc};
use near_sdk::collections::LookupMap;

setup_alloc!();

// Structs in Rust are similar to other languages, and may include impl keyword as shown below
// Note: the names of the structs are not important when calling the smart contract, but the function names are
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Welcome {
  records: LookupMap<String, String>,
}

impl Default for Welcome {
  fn default() -> Self {
    Self {
      records: LookupMap::new(b"a".to_vec()),
    }
  }
}

#[near_bindgen]
impl Welcome {
  pub fn set_greeting(&mut self, message: String) {
    let account_id = env::signer_account_id();

    // Use env::log to record logs permanently to the blockchain!
    env::log(format!("Saving greeting '{}' for account '{}'", message, account_id,).as_bytes());

    self.records.insert(&account_id, &message);
  }

  // `match` is similar to `switch` in other languages; here we use it to default to "Hello" if
  // self.records.get(&account_id) is not yet defined.
  // Learn more: https://doc.rust-lang.org/book/ch06-02-match.html#matching-with-optiont
  pub fn get_greeting(&self, account_id: String) -> String {
    match self.records.get(&account_id) {
      Some(greeting) => greeting,
      None => "Hello".to_string(),
    }
  }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 *
 * To run from contract directory:
 * cargo test -- --nocapture
 *
 * From project root, to run in combination with frontend tests:
 * yarn test
 *
 */
#[cfg(test)]
mod tests {
  use super::*;
  use near_sdk::MockedBlockchain;
  use near_sdk::{testing_env, VMContext};

  // mock the context for testing, notice "signer_account_id" that was accessed above from env::
  fn get_context(input: Vec<u8>, is_view: bool) -> VMContext {
    VMContext {
      current_account_id: "alice_near".to_string(),
      signer_account_id: "bob_near".to_string(),
      signer_account_pk: vec![0, 1, 2],
      predecessor_account_id: "carol_near".to_string(),
      input,
      block_index: 0,
      block_timestamp: 0,
      account_balance: 0,
      account_locked_balance: 0,
      storage_usage: 0,
      attached_deposit: 0,
      prepaid_gas: 10u64.pow(18),
      random_seed: vec![0, 1, 2],
      is_view,
      output_data_receivers: vec![],
      epoch_height: 19,
    }
  }

  #[test]
  fn set_then_get_greeting() {
    let context = get_context(vec![], false);
    testing_env!(context);
    let mut contract = Welcome::default();
    contract.set_greeting("howdy".to_string());
    assert_eq!(
      "howdy".to_string(),
      contract.get_greeting("bob_near".to_string())
    );
  }

  #[test]
  fn get_default_greeting() {
    let context = get_context(vec![], true);
    testing_env!(context);
    let contract = Welcome::default();
    // this test did not call set_greeting so should return the default "Hello" greeting
    assert_eq!(
      "Hello".to_string(),
      contract.get_greeting("francis.near".to_string())
    );
  }
}

'''
'''--- packages/contracts/jest.config.js ---
/* eslint-disable */
const { defaults: tsjPreset } = require("ts-jest/presets");

module.exports = {
  ...tsjPreset,
  verbose: true,
  automock: false,
  collectCoverage: true,
  testTimeout: 50000,
  transform: {
    ...tsjPreset.transform,
  },
  testPathIgnorePatterns: ["<rootDir>/contract/", "<rootDir>/node_modules/"],
  modulePathIgnorePatterns: ["<rootDir>/dist/"],
  testMatch: ["**/*.spec.(ts|tsx)"],
  moduleFileExtensions: ["ts", "tsx", "js", "jsx", "json"],
  collectCoverageFrom: ["src/**/*.{ts|tsx}", "src/**/{!(index),}.ts"],
  moduleDirectories: ["node_modules", "<rootDir>"],
};

'''
'''--- packages/contracts/package.json ---
{
  "name": "@near/contracts",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "main": "lib/index.ts",
  "scripts": {
    "build:contract": "node compile.js",
    "build:contract:debug": "node compile.js --debug",
    "dev:deploy:contract": "near dev-deploy",
    "deploy:contract": "near deploy",
    "deploy": "npm run build:contract && npm run deploy:contract",
    "prestart": "npm run build:contract:debug && npm run dev:deploy:contract",
    "dev": "nodemon --watch contract/src -e rs --exec \"npm run start\"",
    "test:rust": "npm run build:contract && cargo test -- --nocapture",
    "test:lib": "npm run build:contract && cd tests-rs && cargo test"
  },
  "devDependencies": {
    "env-cmd": "~10.1.0",
    "near-cli": "~2.1.1",
    "nodemon": "~2.0.3",
    "shelljs": "~0.8.4",
    "test": "^0.6.0"
  },
  "dependencies": {
    "@types/uuid": "^8.3.4",
    "near-api-js": "~0.43.1",
    "near-workspaces": "^2.0.0",
    "regenerator-runtime": "~0.13.5",
    "toml": "^3.0.0",
    "uuid": "^8.3.2"
  }
}

'''
'''--- packages/contracts/tests-rs/Cargo.toml ---
[package]
name = "tests-rs"
version = "0.1.0"
edition = "2021"

[dependencies]
anyhow = "1.0"
borsh = "0.9"
near-units = "0.1.0"
serde = "1.0"
serde_json = { version = "1.0", features = ["arbitrary_precision"] }
tokio = { version = "1.10.0", features = ["full"] }
workspaces = "0.3.1"
futures = "0.3.21"

[workspace]
'''
'''--- packages/contracts/tests-rs/src/main.rs ---
use std::path::Path;
use workspaces::{Contract, Account, AccountId, DevNetwork, Worker};
use workspaces::network::Sandbox;
use std::vec::Vec;
use std::io::Error;
use serde_json::json;
use near_units::parse_near;
use futures::future::{try_join_all};

mod methods;

pub use methods::*;

pub const OUT_DIR: &str = "../out";

pub const FRACTION_BASE: u128 = 10_000;

pub const SPOON_BLOCK_HEIGHT: u64 = 65_000_000;
pub const REF_FINANCE_ID: &str = "v2.ref-finance.near";

pub const TO_NANO: u64 = 1_000_000_000;
pub const AVERAGE_BLOCK_TIME: u64 = 1_200_000_000;

pub const GAS_LIMIT: u64 = 300_000_000_000_000;
pub const DEFAULT_GAS: u64 = 3_000_000_000_000;

pub const FT_DECIMALS: u8 = 24;

pub const USER_ACCOUNT_BALANCE: u128 = 5_000_000_000_000_000_000_000_000;
pub const CONTRACT_ACCOUNT_BALANCE: u128 = 200_000_000_000_000_000_000_000_000;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
  anyhow::Ok(())
}

'''
'''--- packages/contracts/tests-rs/src/methods/mod.rs ---
use crate::*;

mod storage;
mod token;

pub use token::*;
pub use storage::*;

pub fn get_wasm(file_name: &str) -> Result<Vec<u8>, Error> {
  std::fs::read(Path::new(OUT_DIR).join(file_name))
}

pub async fn create_user_account(
  tla: &Account,
  worker: &Worker<impl DevNetwork>,
  account_id: &str,
) -> Account {
  tla
    .create_subaccount(worker, account_id)
    .initial_balance(USER_ACCOUNT_BALANCE)
    .transact()
    .await
    .unwrap()
    .unwrap()
}

pub async fn deploy_contract(
  tla: &Account,
  worker: &Worker<impl DevNetwork>,
  account_id: &str,
  wasm: &Vec<u8>,
) -> Contract {
  let contract_account = tla
    .create_subaccount(worker, account_id)
    .initial_balance(CONTRACT_ACCOUNT_BALANCE)
    .transact()
    .await
    .unwrap()
    .unwrap();

  contract_account
    .deploy(worker, wasm)
    .await
    .unwrap()
    .unwrap()
}

pub async fn spoon_contract(
  contract_id: &str,
  worker: &Worker<Sandbox>,
) -> anyhow::Result<Contract> {
  let mainnet = workspaces::mainnet_archival().await?;
  let contract_id: AccountId = contract_id.parse().unwrap();

  Ok(
    worker
      .import_contract(&contract_id, &mainnet)
      .initial_balance(parse_near!("1000000 N"))
      .block_height(SPOON_BLOCK_HEIGHT)
      .transact()
      .await?,
  )
}

pub async fn time_travel(worker: &Worker<Sandbox>, seconds_to_advance: u64) -> anyhow::Result<()> {
  let blocks_to_advance = (seconds_to_advance * TO_NANO) / AVERAGE_BLOCK_TIME;
  worker.fast_forward(blocks_to_advance).await?;
  anyhow::Ok(())
}

'''
'''--- packages/contracts/tests-rs/src/methods/storage.rs ---
use crate::*;

pub async fn bulk_register_storage<>(
  worker: &Worker<Sandbox>,
  accounts: Vec<&Account>,
  contracts: Vec<&Contract>,
) -> anyhow::Result<()> {
  let mut batch = Vec::new();
  for account in accounts.into_iter() {
    for contract in contracts.iter() {
      batch.push(account
        .call(&worker, contract.id(), "storage_deposit")
        .args_json(json!({
          "account_id": account.id(),
          "registration_only": false,
        }))?
        .deposit(parse_near!("1 N"))
        .transact());
    }
  }
  try_join_all(batch).await?;
  anyhow::Ok(())
}

'''
'''--- packages/contracts/tests-rs/src/methods/token.rs ---
use crate::*;

pub async fn ft_transfer(
  worker: &Worker<Sandbox>,
  sender: &Account,
  contract: &Contract,
  receiver: &Account,
  amount: u128,
) -> anyhow::Result<()> {
  sender
    .call(&worker, contract.id(), "ft_transfer")
    .args_json(json!({
      "receiver_id": receiver.id(),
      "amount": amount.to_string(),
      "memo": null,
    }))?
    .deposit(1)
    .gas(GAS_LIMIT)
    .transact()
    .await?;
  anyhow::Ok(())
}

pub async fn ft_transfer_call(
  worker: &Worker<Sandbox>,
  sender: &Account,
  contract: &Contract,
  receiver: &Account,
  amount: u128,
  msg: String,
) -> anyhow::Result<()> {
  let result = sender
    .call(&worker, contract.id(), "ft_transfer_call")
    .args_json(json!({
      "receiver_id": receiver.id(),
      "amount": amount.to_string(),
      "memo": null,
      "msg": msg
    }))?
    .deposit(1)
    .gas(GAS_LIMIT)
    .transact()
    .await?;
  println!("{:#?}", result.outcomes());

  anyhow::Ok(())
}

pub async fn ft_balance_of(
  worker: &Worker<Sandbox>,
  contract: &Contract,
  account: &Account,
) -> anyhow::Result<String> {
  anyhow::Ok(
    contract
      .view(
        worker,
        "ft_balance_of",
        json!({
          "account_id": account.id()
        })
        .to_string()
        .into_bytes(),
      )
      .await?
      .json()?,
  )
}

pub async fn initialize_ft_contract(
  worker: &Worker<impl DevNetwork>,
  contract: &Contract,
  owner: &Account,
) -> workspaces::result::CallExecutionDetails {
  contract
    .call(&worker, "new")
    .args_json(json!({
      "owner_id": owner.id(),
      "total_supply": "1000000000000000000000",
      "metadata": {
          "spec": "ft-1.0.0",
          "name": "name",
          "symbol": "NME",
          "icon": null,
          "reference": null,
          "reference_hash": null,
          "decimals": FT_DECIMALS,
      }
    }))
    .unwrap()
    .transact()
    .await
    .unwrap()
}

'''
'''--- packages/contracts/tsconfig.json ---
{
  "compilerOptions": {
    "target": "es6",
    "module": "es6",
    "lib": ["esnext", "DOM"],
    "types": ["jest"],
    "noEmit": true,
    "declaration": true,
    "declarationMap": true,
    "experimentalDecorators": true,
    "sourceMap": true,
    "importHelpers": true,
    "resolveJsonModule": true,
    "skipLibCheck": true,
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,
    "suppressImplicitAnyIndexErrors": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "moduleResolution": "node",
    "allowSyntheticDefaultImports": true,
    "esModuleInterop": true
  },
  "compileOnSave": false,
  "include": ["**/*", "tests/types/test.d.ts"]
}

'''
'''--- packages/front/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/public/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css" />
    <link
      href="https://fonts.googleapis.com/css2?family=Inter:wght@100;200;300;400;500;600;700;800;900&display=swap"
      rel="stylesheet"
    />

    <title>Near Monorepo Boilerplate</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

'''
'''--- packages/front/package.json ---
{
  "name": "@near/front",
  "private": true,
  "version": "0.0.0",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "@esbuild-plugins/node-globals-polyfill": "^0.1.1",
    "@headlessui/react": "^1.6.6",
    "@heroicons/react": "^2.0.4",
    "@near-wallet-selector/core": "^5.0.3",
    "@near-wallet-selector/near-wallet": "^5.0.3",
    "@near-wallet-selector/sender": "^5.0.3",
    "@near/contracts": "*",
    "autoprefixer": "^10.4.7",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "postcss": "^8.4.13",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "react-near": "^3.4.8",
    "react-router": "^6.3.0",
    "react-router-dom": "^6.3.0",
    "tailwindcss": "^3.0.24",
    "use-mediaquery": "^1.0.1",
    "vite-plugin-pages": "^0.25.0"
  },
  "devDependencies": {
    "@types/react": "^18.0.0",
    "@types/react-dom": "^18.0.0",
    "@vitejs/plugin-react": "^1.3.0",
    "@vitejs/plugin-react-refresh": "^1.3.6",
    "buffer": "^6.0.3",
    "typescript": "^4.6.3",
    "vite": "^2.9.7",
    "vite-compatible-readable-stream": "^3.6.1"
  }
}

'''
'''--- packages/front/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

'''
'''--- packages/front/public/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
  <linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81">
    <stop offset=".21" stop-color="#24272a" />
    <stop offset=".42" stop-color="#24272a" stop-opacity="0" />
    <stop offset=".59" stop-color="#24272a" stop-opacity="0" />
    <stop offset=".81" stop-color="#24272a" />
  </linearGradient>
  <path
    d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z"
    fill="url(#a)" />
  <path
    d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z"
    fill="#24272a" />
</svg>
'''
'''--- packages/front/public/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- packages/front/src/components/index.ts ---
export * from "./app";
export * from "./header";

'''
'''--- packages/front/src/index.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: 'Inter', sans-serif;
  color: white;
  background-color: black;
  width: 100vw;
  height: 100vh;
}

'''
'''--- packages/front/src/utils/constants/contracts.ts ---
/**
 * Contracts constants
 */
export const defaultContract = "dev-1652055476064-95220052886384";

'''
'''--- packages/front/src/utils/constants/index.ts ---
export * from "./near";
export * from "./contracts";

'''
'''--- packages/front/src/utils/constants/near.ts ---
/**
 * Near constants
 */
export const AttachedGas = "300000000000000";
export const OneYOctoNear = "1000000000000000000000000";

'''
'''--- packages/front/tailwind.config.js ---
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {},
  },
  plugins: [],
};

'''
'''--- packages/front/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ESNext",
    "useDefineForClassFields": true,
    "lib": ["DOM", "DOM.Iterable", "ESNext"],
    "allowJs": false,
    "skipLibCheck": true,
    "esModuleInterop": false,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "module": "ESNext",
    "moduleResolution": "Node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "baseUrl": ".",
    "noImplicitAny": false,
    "paths": {
      "@/*": ["src/*"]
    },
    "types": ["vite-plugin-pages/client-react", "vite/client"],
  },
  "include": ["./src"],
  "exclude": ["tailwind.config.js"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

'''
'''--- packages/front/tsconfig.node.json ---
{
  "compilerOptions": {
    "composite": true,
    "module": "esnext",
    "moduleResolution": "node"
  },
  "include": ["vite.config.ts"]
}

'''
'''--- packages/front/vite.config.ts ---
import { resolve } from "path";
import { defineConfig } from "vite";
import Pages from "vite-plugin-pages";
import react from "@vitejs/plugin-react";
import reactRefresh from "@vitejs/plugin-react-refresh";
import NodeGlobalsPolyfillPlugin from "@esbuild-plugins/node-globals-polyfill";

export default defineConfig({
  plugins: [
    react(),
    reactRefresh(),
    NodeGlobalsPolyfillPlugin({
      buffer: true,
      process: true,
    }),
    Pages({
      pagesDir: "src/pages",
    }),
  ],
  esbuild: {},
  define: {
    global: "window",
    "process.env": {},
  },
  resolve: {
    alias: {
      util: "util",
      process: "process/browser",
      "@": resolve(__dirname, "./src"),
    },
  },
});

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "module": "esnext",
    "target": "esnext",
    "moduleResolution": "node",
    "jsx": "preserve",
    "downlevelIteration": true,
    /* noEmit - Snowpack builds (emits) files, not tsc. */
    "noEmit": true,
    /* Additional Options */
    "strict": true,
    "sourceMap": false,
    "skipLibCheck": true,
    "types": ["react", "jest", "node"],
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "allowSyntheticDefaultImports": true,
    "skipDefaultLibCheck": true,
    "importsNotUsedAsValues": "error",
    "isolatedModules": true,
    "typeRoots": ["@types/"],
    "baseUrl": ".",
  },
  "exclude": ["node_modules"],
  "include": ["./packages/**/*"]
}

'''