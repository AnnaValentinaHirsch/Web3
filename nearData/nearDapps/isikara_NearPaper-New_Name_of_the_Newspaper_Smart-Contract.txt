*GitHub Repository "isikara/NearPaper-New_Name_of_the_Newspaper_Smart-Contract"*

'''--- README.md ---
<div align="center">
    <h3 align="center">NearPaper - Next Generation Newspaper Project</h3>
</div>

![](images/near-logo.png)

<details>
  <summary>Table of Contents</summary>
  <ol>
    <li>
      <a href="#intro">Introduction</a>
    </li>
    <li>
      <a href="#infrastructure">Infrastructure</a>
    </li>
    <li>
      <a href="#deploy-usage">Deploy and Usage</a>
    </li>
    <li><a href="#codereview">Code Review</a></li>
  </ol>
</details>

### Intro

Next generation technologies continue to change the definition of many professions. Journalism is absolutely one of them and The NearPaper project is here to rewrite the codes of journalism. The main idea of the NearPaper project is to provide a fully decentralized and independent journalism infrastructure to the ecosystem. NearPaper users call themself pro-consumers that they can read and publish news without limitation of any central authority.

### Infrastructure

NearPaper is built on Near Blockchain. The web interface of the project is under development. Creating integrated applications for mobile users is also at the top of the list of near plans. The NearPaper project continues to be developed by following the nostalgic phenomena of its natural identity and by emporing destrucitive technologies. If you would like to be a part of the NearPaper project; you can clone, recode and play with the code. However, please don't hesitate to reach us. Remember! Legends don't die, they just change shape.

### Deploy-Usage

To deploy the contract for development, follow these steps:

1. clone this repo locally (`git clone https://github.com/isikara/NearPaper-New_Name_of_the_Newspaper_Smart-Contract.git`)
2. run `yarn` to install dependencies (`yarn`)
3. run `yarn build:release` to build your wasm file (`yarn build:release`)
3. run `./build/release/simple.wasm` to deploy the contract (`near dev-deploy ./build/release/simple.wasm`)
4. export `CONTRACT` to the deployed contract name (`export CONTRACT=<Contract-Name>`)
5. check `CONTRACT` veriable (`echo $CONTRACT`)
6. export `OWNER` (`export OWNER=<Your-Account-Name>`)
7. check `OWNER` (`echo $OWNER`)

To use the contract you can do any of the following:

|Name|Type|Details|Functionality|How to Call|
|---|---|---|---|---|
|allNews|PersistentUnorderedMap|public|This class is used to store all news with their id's.|-|
|News|Class|public|This class is state news with its id, newsman and publish date.|-|
|healthCheck|Function|public - view function|This function is used for general check.|`near call $CONTRACT healthCheck '{"req" : "<Your-Key>","rep" : "<Your-Value>"}' --accountId <Your-Account-Name>`|
|publishNews|Function|public - call function|This function is used to publish a news.|`near call $CONTRACT publishNews '{"text" : "<Your-News>"}' --accountId <Your-Account-Name>`|
|bringNews|Function|public - view function|This function is used to get a specific news by using its id.|`near view $CONTRACT bringNews '{"id" : <News-Id>}'`|
|readNews|Function|public - view function|This function is used to read all news on the contract.|`near view $CONTRACT readNews`|
|deleteNews|Function|public - call function|This function is used to delete a specific news by using its is. Only the account published the news can delete it.|`near call $CONTRACT deleteNews '{"id" : <News-Id>}' --accountId <Your-Account-Name>`|
|sendGratitude|Function|public - call function|This function is used to donate the Newsman by using it account name.|`near call $CONTRACT sendGratitude '{"newsman" : "<Newsman-Account-Name>"}' --amount <Donation-Amount> --accountId <Your-Account_name>`|

### CodeReview

model.ts

```ts
import {context, PersistentUnorderedMap, math, logging } from "near-sdk-as";

export const allNews = new PersistentUnorderedMap<u32, News>("allNews");  

@nearBindgen
export class News {
    id: u32;
    sender: string;
    date: u64;

    constructor(public text: string) {
        this.id = math.hash32<string>(text);
        this.sender = context.sender;
        this.date = context.blockTimestamp;
    }

    static publish(text: string): News {
        const news = new News(text);
        allNews.set(news.id, news);
        return news;
    }

    static bringFromArchieve(id: u32): News {
        return allNews.getSome(id);
    }

    static readANews(): News[] {
        let start: u32 = 0;
        logging.log("You can donate to a Newsman using 'sendGratitude' function!");
        return allNews.values(start, allNews.length);
    }

    static deleteANews(id: u32): void {
        const news = allNews.getSome(id);
        assert(news.sender == context.sender, "It is not your news! First, you need to publish a News to delete it! Use 'publishNews' function");
        allNews.delete(id);
    }
}
```

index.ts

```ts
import { context, ContractPromiseBatch, logging, u128 } from "near-sdk-as";
import { AccountId } from "../../utils";
import { News, allNews } from "./model";

  //Create and Publish a News
export function publishNews(text: string): News {
  logging.log("A scratch to the history of the future!");
  return News.publish(text);
}

  //Take a Look to Archieve
export function bringNews(id: u32): News {
  logging.log("You can send your thanks to the Newsman using 'sendGratitude' function!");
  return News.bringFromArchieve(id);
}

  //Read a News
export function readNews(): News[] {
  assert(allNews.length > 0, "Nothing remarkable happens in these days.");
  return News.readANews();
}

  //Delete your News
export function deleteNews(id: u32): void {
  logging.log("Looking forward to your new news!");
  News.deleteANews(id);
}

  //Donate the Newsman
export function sendGratitude(newsman: AccountId): void {
  assert(context.accountBalance > context.attachedDeposit, "Your balance is not enough!");
  logging.log(`Comolokko! ${context.attachedDeposit.toString()} yoktoNEAR sent`);
  ContractPromiseBatch.create(newsman).transfer(context.attachedDeposit);
}
```

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src/simple"
  ]
}

'''
'''--- package.json ---
{
  "name": "nearpaper-project",
  "version": "0.0.1",
  "description": "Start with a basic Newspaper project",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "kriptokoloni@gmail.com",
  "license": "MIT",
  "devDependencies": {
    "near-sdk-as": "^3.1.0"
  }
}

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build:release

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo
echo "(edit scripts/1.dev-deploy.sh to deploy other contract)"
echo ---------------------------------------------------------
echo

# comment the line below to deploy the contract
near dev-deploy ./build/release/simple.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) find the contract (account) name in the message above"
echo "    it will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) set an environment variable using this account name"
echo "    see example below (this may not work on Windows)"
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=<dev-123-456>'
# uncomment this line for a useful hint when using the simple style
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/2.health-check.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$MY_ACC" ] && echo "Missing \$MY_ACC environment variable"

[ -z "$CONTRACT" ] && echo "Please \export your account id to the \$CONTRACT variable!"
[ -z "$CONTRACT" ] && echo "export CONTRACT=__new_contract_account_id__"

[ -z "$MY_ACC" ] && echo "Please \export your account id to the \$MY_ACC variable!"
[ -z "$MY_ACC" ] && echo "export MY_ACC=__your_account_name__"

echo ---------------------------------------------------------
echo "Step 1: Call 'healthCheck' functions on the contract"
echo ---------------------------------------------------------
echo "After all variables are exported, please use below function." 
echo "near call $CONTRACT healthCheck '{"req" : "ping", "rep" : "pong"}' --accountId $MY_ACC"
echo 
echo
exit 0

'''
'''--- scripts/3.publish-news.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$MY_ACC" ] && echo "Missing \$MY_ACC environment variable"
[ -z "$NEWS" ] && echo "Missing \$NEWS environment variable"

[ -z "$CONTRACT" ] && echo "Please \export your account id to the \$CONTRACT variable!"
[ -z "$CONTRACT" ] && echo "export CONTRACT=__new_contract_account_id__"

[ -z "$MY_ACC" ] && echo "Please \export your account id to the \$MY_ACC variable!"
[ -z "$MY_ACC" ] && echo "export MY_ACC=__your_account_name__"

[ -z "$NEWS" ] && echo "Please \export your account id to the \$NEWS variable!"
[ -z "$NEWS" ] && echo "export NEWS=__your_news__"

echo ---------------------------------------------------------
echo "Step 1: Call 'publishNews' functions on the contract"
echo ---------------------------------------------------------
echo "After all variables are exported, please use below function."
echo "near call $CONTRACT publishNews '{"'"text"'" : "'"$NEWS"'"}' --accountId $MY_ACC"
echo 

echo
exit 0

'''
'''--- scripts/4.bring-news.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$ID" ] && echo "Missing \$ID environment variable"

[ -z "$CONTRACT" ] && echo "Please \export your account id to the \$CONTRACT variable!"
[ -z "$CONTRACT" ] && echo "export CONTRACT=__new_contract_account_id__"

[ -z "$ID" ] && echo "Please \export the id of the news to the \$ID variable!"
[ -z "$ID" ] && echo "export ID=__id_of_the_news__"

echo ---------------------------------------------------------
echo "Step 1: Call 'bringNews' functions on the contract"
echo ---------------------------------------------------------
echo "After all variables are exported, please use below function."
echo "near view $CONTRACT bringNews '{"'"id"'" : "'"$ID"'"}'"
echo 
echo
exit 0

'''
'''--- scripts/5.read-news.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$CONTRACT" ] && echo Please \export your account id to the \$CONTRACT variable!
[ -z "$CONTRACT" ] && echo 'export CONTRACT=__new_contract_account_id__'

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'view' functions on the contract"
echo
echo "near view $CONTRACT readNews"
echo ---------------------------------------------------------
echo

near view $CONTRACT readNews

echo
exit 0

'''
'''--- scripts/6.delete-news.sh ---
 lines (20 sloc)  1.07 KB
   
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$MY_ACC" ] && echo "Missing \$MY_ACC environment variable"
[ -z "$ID" ] && echo "Missing \$ID environment variable"

[ -z "$CONTRACT" ] && echo "Please \export your account id to the \$CONTRACT variable!"
[ -z "$CONTRACT" ] && echo "export CONTRACT=__new_contract_account_id__"

[ -z "$MY_ACC" ] && echo "Please \export your account id to the \$MY_ACC variable!"
[ -z "$MY_ACC" ] && echo "export MY_ACC=__your_account_name__"

[ -z "$ID" ] && echo "Please \export your account id to the \$ID variable!"
[ -z "$ID" ] && echo "export ID=__id_of_the_news__"

echo ---------------------------------------------------------
echo "Step 1: Call 'deleteNews' functions on the contract"
echo ---------------------------------------------------------
echo "After all variables are exported, please use below function." 
echo "near call $CONTRACT deleteNews '{"id" : $ID}' --accountId $MY_ACC"
echo 
echo
exit 0

'''
'''--- scripts/7.send-gratitude.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$MY_ACC" ] && echo "Missing \$MY_ACC environment variable"
[ -z "$DEST_ACC" ] && echo "Missing \$DEST_ACC environment variable"

export AMOUNT=1
echo "Standard donation amount is: 1 NEAR. If you want to change, you can use:"
echo "export AMOUNT=__donation_amount__"

[ -z "$CONTRACT" ] && echo "Please \export your account to the \$CONTRACT variable!"
[ -z "$CONTRACT" ] && echo "export CONTRACT=__new_contract_account_id__"

[ -z "$MY_ACC" ] && echo "Please \export your account to the \$MY_ACC variable!"
[ -z "$MY_ACC" ] && echo "export MY_ACC=__your_account_name__"

[ -z "$DEST_ACC" ] && echo "Please \export newsman's account to the \$DEST_ACC variable!"
[ -z "$DEST_ACC" ] && echo "export DEST_ACC=__newsman_account_name__"

echo ---------------------------------------------------------
echo "Step 1: Call 'sendGratitude' functions on the contract"
echo ---------------------------------------------------------
echo "After all variables are exported, please use below function. 
echo "near call $CONTRACT sendGratitude '{"'"newsman"'" : "'"$DEST_ACC"'"}' --amount $AMOUNT --accountId $MY_ACC"
echo 
echo
exit 0

'''
'''--- scripts/README.md ---
## Setting up your terminal

The scripts in this folder support a simple demonstration of the contract.

It uses the following setup:

```txt
┌───────────────────────────────────────┬───────────────────────────────────────┐
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                   A                   │                   B                   │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
│                                       │                                       │
└───────────────────────────────────────┴───────────────────────────────────────┘
```

### Terminal **A**

*This window is used to compile, deploy and control the contract*
- Environment
  ```sh
  export CONTRACT=       # depends on deployment
  export MY_ACC=         # any account you control
  export ID=             # id of a specific news
  export NEWS=           # news
  export AMOUNT=         # donation amount
 
  # for example
  # export CONTRACT=dev-1651118992529-51112783772875
  # export MY_ACC=alidev.testnet
  # export ID=alidev.testnet
  # export NEWS="What happened today?"
  ```

- Commands

  _Public scripts_
  ```sh
  1.dev-deploy.sh    
  2.health-check.sh      
  3.publish-news.sh      
  4.bring-news.sh         
  5.read-news.sh
  6.delete-news.sh
  7.send-gratitude.sh
  ```

### Terminal **B**

*This window is used to render the contract account storage*
- Environment
  ```sh
  export CONTRACT=        # depends on deployment

  # for example
  # export CONTRACT=dev-1651118992529-51112783772875
  ```

- Commands
  ```sh
  # monitor contract storage using near-account-utils
  # https://github.com/near-examples/near-account-utils
  watch -d -n 1 yarn storage $CONTRACT
  ```
---

## OS Support

### Linux

- The `watch` command is supported natively on Linux
- To learn more about any of these shell commands take a look at [explainshell.com](https://explainshell.com)

### MacOS

- Consider `brew info visionmedia-watch` (or `brew install watch`)

### Windows

- Consider this article: [What is the Windows analog of the Linux watch command?](https://superuser.com/questions/191063/what-is-the-windows-analog-of-the-linuo-watch-command#191068)

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/simple/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/simple/assembly/index.ts ---
import { 
  context,  // visibility into account, contract and blockchain details
  ContractPromiseBatch,  // make asynchronous calls to other contracts and receive callbacks
  logging,  // append to the execution environment log (appears in JS Developer Console when using near-api-js)
  storage, // append to the execution environment log (appears in JS Developer Console when using near-api-js)
} from "near-sdk-as";

import { AccountId } from "../../utils";
import { News, allNews } from "./model";

  //Health Check
export function healthCheck(req: string, rep: string): string {
  storage.setString(req,rep);
  let result = storage.getString(req);
  if(result) {
    return "Going great 🦾✅";
  }
  return "Heart rate of the function is abnormal 🦠🚫"
}

  //Create and Publish a News
export function publishNews(text: string): News {
  logging.log("A scratch to the history of the future!"); 
  return News.publish(text);
}

  //Take a Look to Archieve
export function bringNews(id: u32): News {
  logging.log("You can send your thanks to the Newsman using 'sendGratitude' function!");
  return News.bringFromArchieve(id);
}

  //Read a News
export function readNews(): News[] {
  assert(allNews.length > 0, "Nothing remarkable is happened in the universe.");
  return News.readANews();
}

  //Delete your News
export function deleteNews(id: u32): void {
  logging.log("Looking forward to your new news!");
  News.deleteANews(id);
}

  //Donate the Newsman
export function sendGratitude(newsman: AccountId): void {
  assert(context.accountBalance > context.attachedDeposit, "Your balance is not enough!");
  logging.log(`Comolokko! ${context.attachedDeposit.toString()} yoktoNEAR sent`);
  ContractPromiseBatch.create(newsman).transfer(context.attachedDeposit);
}
'''
'''--- src/simple/assembly/model.ts ---
import {
    context,  // visibility into account, contract and blockchain details
    PersistentUnorderedMap,  // data structure that wraps storage
    math,   // utility math function for hashing using SHA and Keccak as well as pseudo-random data
    logging,
} from "near-sdk-as";

export const allNews = new PersistentUnorderedMap<u32, News>("allNews"); 

@nearBindgen
export class News {
    id: u32;
    sender: string;
    date: u64;

    constructor(public text: string) {
        this.id = math.hash32<string>(text);
        this.sender = context.sender;
        this.date = context.blockTimestamp;
    }

    static publish(text: string): News {
        const news = new News(text);
        allNews.set(news.id, news);
        return news;
    }

    static bringFromArchieve(id: u32): News {
        assert(allNews.contains(id), "News could not found! Please, check ID of the news.");
        return allNews.getSome(id);
    }

    static readANews(): News[] {
        let start: u32 = 0;
        logging.log("You can donate to a Newsman using 'sendGratitude' function!");
        return allNews.values(start, allNews.length);
    }

    static deleteANews(id: u32): void {
        const news = allNews.getSome(id);
        assert(news.sender == context.sender, "It is not your news! First, you need to publish a News to delete it! Use 'publishNews' function");
        allNews.delete(id);
    }
}
'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
import { u128, Context, ContractPromise } from "near-sdk-as";

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from("1000000000000000000000000");
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount))
}

/**
 * Function to assert that the contract has called itself
 */
export function assert_self(): void {
  const caller = Context.predecessor
  const self = Context.contractName
  assert(caller == self, "Only this contract may call itself");
}

export function assert_single_promise_success(): void {
  const x = ContractPromise.getResults()
  assert(x.length == 1, "Expected exactly one promise result")
  assert(x[0].succeeded, "Expected PromiseStatus to be successful")
}

'''