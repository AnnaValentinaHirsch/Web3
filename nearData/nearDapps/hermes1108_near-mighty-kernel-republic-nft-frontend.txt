*GitHub Repository "hermes1108/near-mighty-kernel-republic-nft-frontend"*

'''--- .env ---
GENERATE_SOURCEMAP=false
'''
'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "web3-react",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@emotion/react": "^11.9.0",
    "@emotion/styled": "^11.8.1",
    "@mui/icons-material": "^5.6.2",
    "@mui/material": "^5.6.4",
    "@react-icons/all-files": "^4.1.0",
    "@testing-library/jest-dom": "^5.16.2",
    "@testing-library/react": "^12.1.4",
    "@testing-library/user-event": "^13.5.0",
    "big.js": "^5.2.2",
    "bignumber.js": "^9.0.2",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3",
    "sass": "^1.51.0",
    "styled-components": "^5.3.5",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="/assets/logo.jpg" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="NEAR Mighty Kennel Republic" />
  <link rel="apple-touch-icon" href="/assets/logo.jpg" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

  <link href='https://fonts.googleapis.com/css?family=Acme' rel='stylesheet'>
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <title>Mighty Kennel Republic</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "logo.jpg",
      "type": "image/jpg",
      "sizes": "400x400"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.css ---
.App {
  text-align: center;
}

body {
  background-image: url(./background.png) !important;
  background-size: cover;
  background-position: center;
  min-width: 100vw !important;
  min-height: 100vh !important;
  display: flex;
  justify-content: center;
  align-items: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }

  to {
    transform: rotate(360deg);
  }
}
'''
'''--- src/App.js ---
import Main from './page/Main';
import './App.css';

import { ThemeProvider, createTheme } from '@mui/material/styles';

const theme = createTheme({
  typography: {
    allVariants: {
      fontFamily: 'Acme',
      // textTransform: 'none',
      // fontSize: 16,
    },
  },
  palette: {
    primary: {
      // light: will be calculated from palette.primary.main,
      main: '#1111FF',
      // dark: will be calculated from palette.primary.main,
      // contrastText: will be calculated to contrast with palette.primary.main
    },
    secondary: {
      // light: '#0066ff',
      main: '#F4900C',
      // dark: will be calculated from palette.secondary.main,
      // contrastText: '#ffcc00',
    },
    // Used by `getContrastText()` to maximize the contrast between
    // the background and the text.
    contrastThreshold: 3,
    // Used by the functions below to shift a color's luminance by approximately
    // two indexes within its tonal palette.
    // E.g., shift from Red 500 to Red 300 or Red 700.
    tonalOffset: 0.2,
  },
});

function App() {
  return (
    <div>
      <ThemeProvider theme={theme}>
        <Main />
      </ThemeProvider>
    </div>
  );
}

export default App;

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/common/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-starter-dapp.myaccount.testnet'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig
'''
'''--- src/index.css ---
html {
  width: 100vw;
  height: 100vh;
}

body {
  margin: auto;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #282c34;

  /* background-image: url('../public/assets/background.jpg');
  background-size: cover;
  background-repeat: no-repeat; */
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

* {
  font-family: Acme;
}

* button {
  font-family: Acme;
}
'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- src/page/Main.js ---
import React, { useState, useEffect } from 'react';
import * as nearAPI from 'near-api-js'

import './coin.css';
import './Main.scss';

// menu bar
import AppBar from '@mui/material/AppBar';
import Box from '@mui/material/Box';
import Paper from '@mui/material/Paper';
import Toolbar from '@mui/material/Toolbar';
import Typography from '@mui/material/Typography';
import Button from '@mui/material/Button';

import { Grid } from '@mui/material';
import { styled } from '@mui/material';

//slider
import Slider from '@mui/material/Slider';
import Tooltip from '@mui/material/Tooltip';
import PropTypes from 'prop-types';
import Stack from '@mui/material/Stack';

// snack bar
import Snackbar from '@mui/material/Snackbar';
import Slide from '@mui/material/Slide';
import MuiAlert from '@mui/material/Alert';
import BigNumber from "bignumber.js";

import LoadingPad from '../components/LoadingPad'

const { connect, Contract, keyStores, WalletConnection, utils } = nearAPI

const keyStore = new keyStores.BrowserLocalStorageKeyStore();

// const { connect } = nearAPI;

// const nearConfig = {
//     networkId: "mainnet",
//     keyStore,
//     contractName: 'mkr_mint.near',
//     nodeUrl: "https://rpc.mainnet.near.org",
//     walletUrl: "https://wallet.mainnet.near.org",
//     helperUrl: "https://helper.mainnet.near.org",
//     explorerUrl: "https://explorer.mainnet.near.org",
// };

const nearConfig = {
    networkId: "testnet",
    keyStore,
    contractName: 'dev-1655883598135-23071225802774',
    nodeUrl: "https://rpc.testnet.near.org",
    walletUrl: "https://wallet.testnet.near.org",
    helperUrl: "https://helper.testnet.near.org",
    explorerUrl: "https://explorer.testnet.near.org",
};

const PRESALE_THRESHOLD = 10, PUBSALE_THRESHOLD = 10;

function TransitionDown(props) {
    return <Slide {...props} direction="down" />;
}

const Alert = React.forwardRef(function Alert(props, ref) {
    return <MuiAlert elevation={6} ref={ref} variant="filled" {...props} />;
});

function ValueLabelComponent(props) {
    const { children, value } = props;

    return (
        <Tooltip enterTouchDelay={0} placement="top" title={value}>
            {children}
        </Tooltip>
    );
}

ValueLabelComponent.propTypes = {
    children: PropTypes.element.isRequired,
    value: PropTypes.number.isRequired,
};

let wallet, near, nftContract, readableContract
const presalePrice = '3880000000000000000000000', pubsalePrice = '5000000000000000000000000'

const Main = () => {
    // snack
    const [snackOpen, setSnackOpen] = useState(false)
    const [transition, setTransition] = React.useState(undefined);
    const vertical = 'top'
    const horizontal = 'center'
    const [alert, setAlert] = useState({ type: '', message: '' })
    // web3 state val
    const [accountId, setAccountId] = useState(localStorage.getItem('account') || '')
    // const [wallet, setWallet] = useState()
    const [connectBtnCaption, setConnectionBtnCaption] = useState('Connect Wallet')
    const [loading, setLoading] = useState(false)

    const [totalSupply, setTotalSupply] = useState(0)
    const [saleState, setSaleState] = useState(0)
    const [whitelisted, setWhitelisted] = useState(false)
    const [presaleMinted, setPresaleMinted] = useState(0)
    const [pubsaleMinted, setPubsaleMinted] = useState(0)

    const initContract = async () => {
        // Initialize connection to the NEAR testnet
        near = await connect(nearConfig)

        const account = new nearAPI.Account(near.connection, nearConfig.contractName);
        readableContract = await new Contract(account, nearConfig.contractName, {
            viewMethods: ['get_total_supply', 'get_curr_price', 'get_sale_state', 'is_whitelist', 'get_metadatas'],
            changeMethods: [],
            sender: nearConfig.contractName
        })
        const metadatas = await readableContract.get_metadatas()
        console.log('metadatas:', metadatas)
        console.log('contract:', readableContract)
        const ttlSupply = await readableContract.get_total_supply()
        console.log('total supply:', ttlSupply)
        setTotalSupply(ttlSupply)
        const slState = await readableContract.get_sale_state()
        console.log("sale state:", slState)
        setSaleState(slState)
        wallet = new WalletConnection(near)

        const accountIdTemp = wallet.getAccountId()
        setAccountId(accountIdTemp)
        localStorage.setItem('account', accountIdTemp)
        console.log('accountId: ', accountIdTemp)
    }

    const onConnectClick = async () => {
        if (connectBtnCaption !== 'Connect Wallet') {
            localStorage.clear()
            setConnectionBtnCaption('Connect Wallet')
            return
        }
        if (wallet?.isSignedIn()) {
            console.log("You are already signed:", wallet.getAccountId())

            setConnectionBtnCaption(`${wallet.getAccountId().substr(0, 6)}...${wallet.getAccountId().substr(wallet.getAccountId().length - 4, 4)}`)

            nftContract = await new Contract(wallet.account(), nearConfig.contractName, {
                viewMethods: ['is_whitelist', 'get_presale_amount', 'get_pubsale_amount'],
                changeMethods: ['nft_mint'],
                sender: wallet.account()
            })
            const wl = await nftContract.is_whitelist({ account_id: wallet.getAccountId() })
            const precnt = await nftContract.get_presale_amount({ account_id: wallet.getAccountId() })
            console.log('precnt:', precnt)
            setPresaleMinted(precnt)
            const pubcnt = await nftContract.get_pubsale_amount({ account_id: wallet.getAccountId() })
            setPubsaleMinted(pubcnt)
            setWhitelisted(wl)
        } else {
            wallet?.requestSignIn(nearConfig.contractName)
        }
    }

    const onSnackClose = () => {
        setSnackOpen(false)
    }

    const mint = async () => {
        if (connectBtnCaption === 'Connect Wallet') {
            setAlert({ type: 'warning', message: `Connect your wallet first` })
            setTransition(() => TransitionDown)
            setSnackOpen(true)
            return
        }
        if (totalSupply >= 777) {
            setAlert({ type: 'warning', message: `Exceeds max nft` })
            setTransition(() => TransitionDown)
            setSnackOpen(true)
            return
        }
        if (saleState === 0) {
            setAlert({ type: 'warning', message: `Sale is not started` })
            setTransition(() => TransitionDown)
            setSnackOpen(true)
            return
        } else if (saleState === 1) {
            if (!whitelisted) {
                setAlert({ type: 'warning', message: `You are not whitelisted member` })
                setTransition(() => TransitionDown)
                setSnackOpen(true)
                return
            }
            if (presaleMinted >= PRESALE_THRESHOLD) {
                setAlert({ type: 'warning', message: `Exceeds max nfts in presale` })
                setTransition(() => TransitionDown)
                setSnackOpen(true)
                return
            }
        } else {
            if (pubsaleMinted >= PUBSALE_THRESHOLD) {
                setAlert({ type: 'warning', message: `Exceeds max nfts in public sale` })
                setTransition(() => TransitionDown)
                setSnackOpen(true)
                return
            }
        }
        const account = await near.account(wallet.getAccountId())
        const blnc = await account.getAccountBalance()
        console.log('balance:', blnc)
        if (BigNumber(blnc.available).lt(BigNumber(whitelisted ? presalePrice : pubsalePrice))) {
            setAlert({ type: 'warning', message: `Insufficient Fund` })
            setTransition(() => TransitionDown)
            setSnackOpen(true)
            return
        }
        const curTokenId = await readableContract.get_total_supply() + 1
        try {
            await nftContract.nft_mint({ token_id: `${curTokenId}`, receiver_id: wallet.getAccountId(), perpetual_royalties: {} },
                "300000000000000", // attached GAS (optional)
                whitelisted ? presalePrice : pubsalePrice)
        } catch (err) {
            console.log('error minting:', err.toString())
        }
    }

    useEffect(async () => {
        const message = localStorage.getItem('notification')
        if (!!message) {
            setAlert({ type: 'success', message: localStorage.getItem('notification') })
            setTransition(() => TransitionDown);
            setSnackOpen(true);
            localStorage.removeItem('notification')
        }
        await initContract()
        const accnt = localStorage.getItem('account')
        if (!!accnt) {
            onConnectClick()
        }
    }, [])

    return (
        <div className='body'>
            {loading && <LoadingPad />}
            <div className='container'>
                <Box
                    sx={{ flexGrow: 1, mt: 5, pb: 5, pt: 5, display: 'flex', flexDirection: 'row', justifyContent: 'center', alignItems: 'center' }}
                >
                    <Grid
                        container rowSpacing={3} direction='row' justifyContent='center'
                        sx={{ flexWrap: 'wrap-reverse' }}
                    >
                        <Grid item xs={12} sm={5} sx={{ display: 'flex', justifyContent: 'center', alignItems: 'center', flexDirection: 'column', gap: '10px', minWidth: '200px' }}>
                            <Button onClick={onConnectClick} color='secondary' variant="outlined" sx={{ color: 'white', fontSize: '22px', width: '210px' }}>{connectBtnCaption}</Button>
                            <div style={{ color: 'white', fontFamily: 'Acme', fontWeight: 500, fontSize: '34px' }}>{totalSupply}/777</div>
                            <Button color='secondary' variant="outlined" sx={{ color: 'white', fontSize: '22px' }} onClick={() => mint()}>Mint</Button>
                        </Grid>
                    </Grid>
                </Box>
                <Snackbar
                    open={snackOpen}
                    onClose={onSnackClose}
                    TransitionComponent={transition}
                    key={transition ? transition.name : ''}
                    autoHideDuration={6000}
                    anchorOrigin={{ vertical, horizontal }}
                >
                    <Alert onClose={onSnackClose} severity={alert.type} sx={{ width: '100%' }}>
                        {alert.message}
                    </Alert>
                </Snackbar>
            </div>
        </div >
    )
}

export default Main
'''
'''--- src/page/coin.css ---
#coin {
    position: relative;
    margin: 0 auto;
    width: 100px;
    height: 100px;
}

#coin div {
    width: 100%;
    height: 100%;
    -webkit-border-radius: 50%;
    -moz-border-radius: 50%;
    border-radius: 50%;
    -webkit-box-shadow: inset 0 0 45px rgba(255, 255, 255, 0.3),
        0 12px 20px -10px rgba(0, 0, 0, 0.4);
    -moz-box-shadow: inset 0 0 45px rgba(255, 255, 255, 0.3),
        0 12px 20px -10px rgba(0, 0, 0, 0.4);
    box-shadow: inset 0 0 45px rgba(255, 255, 255, 0.3),
        0 12px 20px -10px rgba(0, 0, 0, 0.4);
}

.side-a {
    background-color: #bb0000;
    color: white;
    text-align: center;
}

.side-b {
    background-color: #3e3e3e;
    color: white;
    text-align: center;
}

#coin {
    transition: -webkit-transform 1s ease-in;
    transform-style: preserve-3d;
}

#coin div {
    position: absolute;
    backface-visibility: hidden;
}

.side-a {
    z-index: 100;
}

.side-b {
    transform: rotateY(-180deg);
}

#coin.heads {
    -webkit-animation: flipHeads 2s ease-out forwards;
    -moz-animation: flipHeads 2s ease-out forwards;
    -o-animation: flipHeads 2s ease-out forwards;
    animation: flipHeads 2s ease-out forwards;
}

#coin.tails {
    -webkit-animation: flipTails 2s ease-out forwards;
    -moz-animation: flipTails 2s ease-out forwards;
    -o-animation: flipTails 2s ease-out forwards;
    animation: flipTails 2s ease-out forwards;
}

@keyframes flipHeads {
    from {
        -webkit-transform: rotateY(0);
        -moz-transform: rotateY(0);
        transform: rotateY(0);
    }

    to {
        -webkit-transform: rotateY(540deg);
        -moz-transform: rotateY(540deg);
        transform: rotateY(540deg);
    }
}

@keyframes flipTails {
    from {
        -webkit-transform: rotateY(0);
        -moz-transform: rotateY(0);
        transform: rotateY(0);
    }

    to {
        -webkit-transform: rotateY(720deg);
        -moz-transform: rotateY(720deg);
        transform: rotateY(720deg);
    }
}
'''
'''--- src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''