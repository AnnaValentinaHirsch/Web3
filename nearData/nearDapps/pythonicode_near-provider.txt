*GitHub Repository "pythonicode/near-provider"*

'''--- README.md ---
# Near Provider

## About

near-provider is a React component which provides easy access to the [NEAR protocol javascript API](https://docs.near.org/docs/api/javascript-library) in **Next JS** and **React** applications.

## Installation

<code>npm install near-provider</code>

## Usage

### Next JS

`pages/_app.js`

```js
import { NearProvider } from 'near-provider';

function MyApp({ Component, pageProps }) {
  return <NearProvider><Component {...pageProps} /></NearProvider>
}
```

`pages/index.js`

```js
import { useNear } from 'near-provider';

export default function Home() {

    const { near, wallet } = useNear();

    const signIn = () => {
        wallet.requestSignIn(
            "example-contract.testnet", // contract requesting access
            "Example App", // optional
            "http://YOUR-URL.com/success", // optional
            "http://YOUR-URL.com/failure" // optional
        );
    };

    return <button onClick={signIn}>Connect</button>
}
```

### React

`src/ParentComponent.js`

```js
import { NearProvider } from 'near-provider';

export default function ParentComponent() {
  return <NearProvider><ChildComponent/></NearProvider>
}
```

`src/ChildComponent.js`

```js
import { useNear } from 'near-provider';

export default function ChildComponent() {

    const { near, wallet } = useNear();

    const signIn = () => {
        wallet.requestSignIn(
            "example-contract.testnet", // contract requesting access
            "Example App", // optional
            "http://YOUR-URL.com/success", // optional
            "http://YOUR-URL.com/failure" // optional
        );
    };

    return <button onClick={signIn}>Connect</button>
}
```

'''
'''--- dist/components/NearProvider.js ---
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.NearProvider = NearProvider;
exports.useNear = useNear;

require("core-js/modules/web.dom-collections.iterator.js");

require("core-js/modules/es.promise.js");

var _react = _interopRequireWildcard(require("react"));

var _nearApiJs = require("near-api-js");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// Packages //
const NearContext = /*#__PURE__*/(0, _react.createContext)();

function useNear() {
  return (0, _react.useContext)(NearContext);
}

function NearProvider(_ref) {
  let {
    children
  } = _ref;
  const [near, setNear] = (0, _react.useState)(undefined);
  const [wallet, setWallet] = (0, _react.useState)(undefined);
  (0, _react.useEffect)(async () => {
    const config = {
      networkId: "testnet",
      keyStore: new _nearApiJs.keyStores.BrowserLocalStorageKeyStore(),
      nodeUrl: "https://rpc.testnet.near.org",
      walletUrl: "https://wallet.testnet.near.org",
      helperUrl: "https://helper.testnet.near.org",
      explorerUrl: "https://explorer.testnet.near.org"
    };
    const near_connection = await (0, _nearApiJs.connect)(config);
    const wallet_connection = new _nearApiJs.WalletConnection(near_connection);
    setNear(near_connection);
    setWallet(wallet_connection);
  }, []);
  const context = {
    near,
    wallet
  };
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(NearContext.Provider, {
    value: context
  }, children));
}
'''
'''--- dist/index.js ---
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "NearProvider", {
  enumerable: true,
  get: function get() {
    return _NearProvider.NearProvider;
  }
});
Object.defineProperty(exports, "useNear", {
  enumerable: true,
  get: function get() {
    return _NearProvider.useNear;
  }
});

var _NearProvider = require("./components/NearProvider");
'''
'''--- package.json ---
{
  "name": "near-provider",
  "description": "Two test React components",
  "author": "Jawblia",
  "keywords": ["react", "components", "ui"],
  "version": "1.0.92",
  "private": false,
  "main": "dist/index.js",
  "module": "dist/index.js",
  "files": [ "dist", "README.md" ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/PythoniCode/near-provider.git"
  },
  "dependencies": {
    "@babel/polyfill": "^7.12.1",
    "@testing-library/jest-dom": "^5.16.1",
    "@testing-library/react": "^12.1.2",
    "@testing-library/user-event": "^13.5.0",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "5.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "rm -rf dist && babel src/lib --out-dir dist --copy-files",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/cli": "^7.16.8",
    "@babel/core": "^7.16.12",
    "@babel/preset-env": "^7.16.11"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Web site created using create-react-app"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>React App</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.js ---
function App() {
  return (
    <div className="App">
      Test Example
    </div>
  );
}

export default App;

'''
'''--- src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById('root')
);
'''
'''--- src/lib/components/NearProvider.js ---
// Packages //
import React, { useState, useEffect, useContext, createContext } from "react";
import { keyStores, connect, WalletConnection } from 'near-api-js';

const NearContext = createContext();

export function useNear() {
    return useContext(NearContext);
}

export function NearProvider({ children }) {

    const [near, setNear] = useState(undefined);
    const [wallet, setWallet] = useState(undefined);

    useEffect(async () => {
        const config = {
            networkId: "testnet",
            keyStore: new keyStores.BrowserLocalStorageKeyStore(),
            nodeUrl: "https://rpc.testnet.near.org",
            walletUrl: "https://wallet.testnet.near.org",
            helperUrl: "https://helper.testnet.near.org",
            explorerUrl: "https://explorer.testnet.near.org",
        };
        const near_connection = await connect(config);
        const wallet_connection = new WalletConnection(near_connection);
        setNear(near_connection);
        setWallet(wallet_connection);
    }, []);

    const context = {
        near,
        wallet
    }

    return (
        <>
            <NearContext.Provider value={context}>
                {children}
            </NearContext.Provider>
        </>
    );
}
'''
'''--- src/lib/index.js ---
export { useNear, NearProvider } from './components/NearProvider';
'''