*GitHub Repository "mllnd/near-vue-demo"*

'''--- .env ---
# To override the values, duplicate this file into .env.local.
VUE_APP_CONTRACT_NAME=mllnd.testnet
# Name of the repository - required for the Github pages build to work properly.
VUE_APP_PUBLIC_PATH=near-vue-demo

'''
'''--- README.md ---
# Guest Book

This repository contains a Vue.js rewrite of the NEAR Protocol example project `Guest Book`.

Original repository: https://github.com/near-examples/guest-book.

'''
'''--- as-pect.config.js ---
module.exports = require('near-sdk-as/imports');

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json",
  "entry": "assembly/main.ts",
  "options": {
    "binaryFile": "out/main.wasm"
  }
}

'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/guestbook.spec.ts ---
import { addMessage, getMessages } from '../main'
import { PostedMessage, messages } from '../model'

function createMessage (text: string): PostedMessage {
  return new PostedMessage(text);
}

const hello: string = 'hello world'
const message = createMessage(hello)

describe('messages should be able to', () => {
  beforeEach(()  => {
    addMessage(hello)
  });

  afterEach( () => {
    while (messages.length > 0) {
      messages.pop()
    }
  })

  it('add a message', () => {
    expect(messages.length).toBe(1, 'should only contain one message')
    expect(messages[0]).toStrictEqual(message, 'message should be "hello world"')
  })

  it('retrive messages', () => {
    const messagesArr = getMessages()
    expect(messagesArr.length).toBe(1, 'should be one message')
    expect(messagesArr).toIncludeEqual(message, 'messages should include:\n' + message.toJSON())
    log(messagesArr[0])
  })

  it('only show the last ten messages', () => {
    const newMessages: PostedMessage[] = []
    for (let i: i32 = 0; i < 10; i++) {
      const text = 'message #' + i.toString()
      newMessages.push(createMessage(text))
      addMessage(text)
    }
    const messages = getMessages()
    log(messages.slice(7, 10))
    expect(messages).toStrictEqual(newMessages, 'should be the last ten mesages')
    expect(messages).not.toIncludeEqual(message, "shouldn't contain the first element")
  })
})

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/main.ts ---
import { PostedMessage, messages } from "./model";

// --- contract code goes below

// The maximum number of latest messages the contract returns.
const MESSAGE_LIMIT = 10;

/**
 * Adds a new message under the name of the sender's account id.\
 * NOTE: This is a change method. Which means it will modify the state.\
 * But right now we don't distinguish them with annotations yet.
 */
export function addMessage(text: string): void {
  // Creating a new message and populating fields with our data
  const message = new PostedMessage(text);
  // Adding the message to end of the the persistent collection
  messages.push(message);
}

/**
 * Returns an array of last N messages.\
 * NOTE: This is a view method. Which means it should NOT modify the state.
 */ 
export function getMessages(): PostedMessage[] {
  const numMessages = min(MESSAGE_LIMIT, messages.length);
  const startIndex = messages.length - numMessages;
  const result = new Array<PostedMessage>(numMessages);
  for (let i = 0; i < numMessages; i++) {
    result[i] = messages[i + startIndex];
  }
  return result;
}

'''
'''--- assembly/model.ts ---
import { context, u128, PersistentVector } from "near-sdk-as";

/** 
 * Exporting a new class PostedMessage so it can be used outside of this file.
 */
@nearBindgen
export class PostedMessage {
  premium: boolean;
  sender: string;
  constructor(public text: string) {
    this.premium = context.attachedDeposit >= u128.from('10000000000000000000000');
    this.sender = context.sender;
  }
}
/** 
 * collections.vector is a persistent collection. Any changes to it will
 * be automatically saved in the storage.
 * The parameter to the constructor needs to be unique across a single contract.
 * It will be used as a prefix to all keys required to store data in the storage.
 */
export const messages = new PersistentVector<PostedMessage>("m");
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}

'''
'''--- babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset',
  ],
};

'''
'''--- package.json ---
{
  "name": "vue-guest-book",
  "version": "0.1.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "yarn build:contract && yarn build:web",
    "build:contract": "asb",
    "build:contract:debug": "asb --target debug",
    "build:web": "cross-env NODE_ENV=production vue-cli-service build",
    "deploy": "yarn build && near deploy && gh-pages -d dist/",
    "dev": "yarn build:contract:debug && near dev-deploy && nodemon --watch assembly -e ts --exec yarn dev:start",
    "serve": "vue-cli-service serve",
    "start": "yarn deploy && vue-cli-service serve",
    "dev:start": "cross-env VUE_APP_CONTRACT_NAME=`cat ./neardev/dev-account` vue-cli-service serve"
  },
  "dependencies": {
    "big.js": "^6.0.2",
    "core-js": "^3.6.5",
    "cross-env": "^7.0.2",
    "near-api-js": "^0.31.0",
    "near-cli": "^1.3.0",
    "node-sass": "^5.0.0",
    "sass-loader": "^10.0.5",
    "vue": "^2.6.11",
    "vuex": "^3.5.1"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-service": "~4.5.0",
    "gh-pages": "^3.1.0",
    "near-sdk-as": "^2.1.0",
    "nodemon": "^2.0.6",
    "typescript": "^4.0.5",
    "vue-template-compiler": "^2.6.11"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.VUE_APP_CONTRACT_NAME;

function getConfig(env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      };
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/main.js ---
import Vue from 'vue';
import App from './App.vue';
import store from './store';

Vue.config.productionTip = false;

new Vue({
  render: (h) => h(App),
  store,
}).$mount('#app');

'''
'''--- src/store.js ---
import Vue from 'vue';
import Vuex from 'vuex';
import * as nearApi from 'near-api-js';
import getConfig from './config';

Vue.use(Vuex);

const store = new Vuex.Store({
  state: {
    contract: null,
    currentUser: null,
    wallet: null,
    nearConfig: null
  },
  getters: {
    contract: state => state.contract,
    currentUser: state => state.currentUser,
    wallet: state => state.wallet,
    nearConfig: state => state.nearConfig
  },
  mutations: {
    setupNear(state, payload) {
      state.contract = payload.contract;
      state.currentUser = payload.currentUser;
      state.wallet = payload.wallet;
      state.nearConfig = payload.nearConfig;
    }
  },
  actions: {
    async initNear({ commit }) {
      const nearConfig = getConfig('testnet');
      // Initialize connection to TestNet.
      const near = await nearApi.connect({
        deps: {
          keyStore: new nearApi.keyStores.BrowserLocalStorageKeyStore()
        },
        ...nearConfig
      });

      const wallet = new nearApi.WalletConnection(near);

      let currentUser;

      if (wallet.getAccountId()) {
        currentUser = {
          accountId: wallet.getAccountId(),
          balance: (await wallet.account().state()).amount
        }
      }

      const contract = await new nearApi.Contract(wallet.account(), process.env.VUE_APP_CONTRACT_NAME || 'mllnd.testnet', {
        viewMethods: ['getMessages'],
        changeMethods: ['addMessage'],
        sender: wallet.getAccountId()
      });
      // Commit and send to mutation.
      commit('setupNear', { contract, currentUser, wallet, nearConfig });
    }
  }
});

export default store;

'''
'''--- vue.config.js ---
module.exports = {
  /* Vue.js assumes that app is usually deployed on a root-level, a workaround. */
  publicPath: process.env.NODE_ENV === 'production' ? `/${process.env.VUE_APP_PUBLIC_PATH}/` : '/',
  pages: {
    index: {
      entry: 'src/main.js',
      title: 'NEAR Vue.js Guest Book',
    },
  }
};

'''