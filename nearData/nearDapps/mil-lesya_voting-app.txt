*GitHub Repository "mil-lesya/voting-app"*

'''--- .gitpod.yml ---
tasks:
  - init: yarn
    command: yarn dev
ports:
  - port: 1234
    onOpen: open-browser

'''
'''--- README.md ---
near-blank-project
==================

This [React] app was initialized with [create-near-app]

Quick Start
===========

To run this project locally:

1. Prerequisites: Make sure you've installed [Node.js] â‰¥ 12
2. Install dependencies: `npm install`
3. Run the local development server: `npm run dev` (see `package.json` for a
   full list of `scripts` you can run with `npm`)

Now you'll have a local development environment backed by the NEAR TestNet!

Go ahead and play with the app and the code. As you make code changes, the app will automatically reload.

Exploring The Code
==================

1. The "backend" code lives in the `/contract` folder. See the README there for
   more info.
2. The frontend code lives in the `/frontend` folder. `/frontend/index.html` is a great
   place to start exploring. Note that it loads in `/frontend/assets/js/index.js`, where you
   can learn how the frontend connects to the NEAR blockchain.
3. Tests: there are different kinds of tests for the frontend and the smart
   contract. See `contract/README` for info about how it's tested. The frontend
   code gets tested with [jest]. You can run both of these at once with `npm
   run test`.

Deploy
======

Every smart contract in NEAR has its [own associated account][NEAR accounts]. When you run `npm run dev`, your smart contract gets deployed to the live NEAR TestNet with a throwaway account. When you're ready to make it permanent, here's how.

Step 0: Install near-cli (optional)
-------------------------------------

[near-cli] is a command line interface (CLI) for interacting with the NEAR blockchain. It was installed to the local `node_modules` folder when you ran `npm install`, but for best ergonomics you may want to install it globally:

    npm install --global near-cli

Or, if you'd rather use the locally-installed version, you can prefix all `near` commands with `npx`

Ensure that it's installed with `near --version` (or `npx near --version`)

Step 1: Create an account for the contract
------------------------------------------

Each account on NEAR can have at most one contract deployed to it. If you've already created an account such as `your-name.testnet`, you can deploy your contract to `near-blank-project.your-name.testnet`. Assuming you've already created an account on [NEAR Wallet], here's how to create `near-blank-project.your-name.testnet`:

1. Authorize NEAR CLI, following the commands it gives you:

      near login

2. Create a subaccount (replace `YOUR-NAME` below with your actual account name):

      near create-account near-blank-project.YOUR-NAME.testnet --masterAccount YOUR-NAME.testnet

Step 2: set contract name in code
---------------------------------

Modify the line in `src/config.js` that sets the account name of the contract. Set it to the account id you used above.

    const CONTRACT_NAME = process.env.CONTRACT_NAME || 'near-blank-project.YOUR-NAME.testnet'

Step 3: deploy!
---------------

One command:

    npm run deploy

As you can see in `package.json`, this does two things:

1. builds & deploys smart contract to NEAR TestNet
2. builds & deploys frontend code to GitHub using [gh-pages]. This will only work if the project already has a repository set up on GitHub. Feel free to modify the `deploy` script in `package.json` to deploy elsewhere.

Troubleshooting
===============

On Windows, if you're seeing an error containing `EPERM` it may be related to spaces in your path. Please see [this issue](https://github.com/zkat/npx/issues/209) for more details.

  [React]: https://reactjs.org/
  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [jest]: https://jestjs.io/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [gh-pages]: https://github.com/tschaub/gh-pages

'''
'''--- contract/Cargo.toml ---
[package]
name = "greeter"
version = "1.0.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
serde = { version = "1.0", features = ["derive"] }
getrandom = { version = "0.2", features = ["js"] }
nanoid = "0.4.0"
chrono = "0.4"
log = "0.4.17"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []

'''
'''--- contract/README.md ---
near-blank-project Smart Contract
==================

A [smart contract] written in [Rust] for an app initialized with [create-near-app]

Quick Start
===========

Before you compile this code, you will need to install Rust with [correct target]

Exploring The Code
==================

1. The main smart contract code lives in `src/lib.rs`.
2. Tests: You can run smart contract tests with the `./test` script. This runs
   standard Rust tests using [cargo] with a `--nocapture` flag so that you
   can see any debug info you print to the console.

  [smart contract]: https://docs.near.org/docs/develop/contracts/overview
  [Rust]: https://www.rust-lang.org/
  [create-near-app]: https://github.com/near/create-near-app
  [correct target]: https://github.com/near/near-sdk-rs#pre-requisites
  [cargo]: https://doc.rust-lang.org/book/ch01-03-hello-cargo.html

'''
'''--- contract/src/lib.rs ---
use chrono::DateTime;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{AccountId, env, near_bindgen, PanicOnDefault};
use near_sdk::collections::{UnorderedMap};
use near_sdk::serde::{Deserialize, Serialize};

#[derive(Deserialize, Serialize, BorshDeserialize, BorshSerialize, Debug)]
pub struct Poll {
    id: usize,
    owner: AccountId,
    description: String,
    start_time: Option<String>,
    end_time: Option<String>,
    options: Vec<Variant>,
}

#[derive(Deserialize, Serialize, BorshDeserialize, BorshSerialize, Debug)]
pub struct Variant {
    id: usize,
    value: String,
    votes: u32,
    voted_users: Vec<AccountId>,
}

// Define the contract structure
#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    polls: UnorderedMap<usize, Poll>,
}

// Implement the contract structure
#[near_bindgen]
impl Contract {
    #[init]
    pub fn new_default() -> Self {
        Self {
            polls: UnorderedMap::new(b"polls".to_vec()),
        }
    }

    pub fn create_poll(&mut self, description: String, start_time: Option<String>, end_time: Option<String>, options: Vec<String>) -> Poll {
        let owner = env::signer_account_id();
        let mut poll_options = Vec::new();

        for (i, x) in options.iter().enumerate() {
            let option = Variant {
                id: i + 1,
                value: x.to_string(),
                votes: 0,
                voted_users: Vec::new(),
            };
            poll_options.push(option);
        }

        let mut poll_id = 1;
        let polls_len = self.polls.len();
        let vec_polls = self.polls.values_as_vector();

        if polls_len > 0 {
            poll_id = vec_polls.get(polls_len - 1).unwrap().id + 1;
        }

        let poll = Poll {
            id: poll_id,
            owner,
            description,
            start_time,
            end_time,
            options: poll_options,
        };

        self.polls.insert(&poll.id, &poll);
        poll
    }

    pub fn get_poll(&self, poll_id: usize) -> Option<Poll> {
        return self.polls.get(&poll_id);
    }

    pub fn delete_poll(&mut self, poll_id: usize) {
        let poll = self.polls
            .get(&poll_id)
            .expect("Such poll does not exists");

        let account_id = env::signer_account_id();
        assert_eq!(account_id, poll.owner, "Only owner can delete the poll!");

        self.polls
            .remove(&poll_id);
    }

    pub fn get_polls_for_owner(&self, account_id: AccountId, from_index: Option<u64>, limit: Option<u64>) -> Vec<Poll> {
        self.polls
            .iter()
            .rev()
            .filter(|(_poll_id, poll)| poll.owner == account_id)
            .skip(from_index.unwrap_or(0) as usize)
            .take(limit.unwrap_or(10) as usize)
            .map(|(poll_id, _poll)| self.polls.get(&poll_id).unwrap())
            .collect()
    }

    pub fn get_voted_polls(&self, account_id: AccountId, from_index: Option<u64>, limit: Option<u64>) -> Vec<Poll> {
        self.polls
            .iter()
            .rev()
            .filter(|(_poll_id, poll)| poll.options.iter().any(|v| v.voted_users.contains(&account_id)))
            .skip(from_index.unwrap_or(0) as usize)
            .take(limit.unwrap_or(10) as usize)
            .map(|(poll_id, _poll)| self.polls.get(&poll_id).unwrap())
            .collect()
    }

    pub fn get_all_polls(&self, from_index: Option<u64>, limit: Option<u64>) -> Vec<Poll> {
        self.polls
            .iter()
            .rev()
            .skip(from_index.unwrap_or(0) as usize)
            .take(limit.unwrap_or(10) as usize)
            .map(|(poll_id, _poll)| self.polls.get(&poll_id).unwrap())
            .collect()
    }

    pub fn vote(&mut self, poll_id: usize, variant_id: usize) {
        let poll = &mut self.polls
            .get(&poll_id)
            .expect("Such poll does not exists");
        let voter = env::signer_account_id();

        let start_time = DateTime::parse_from_rfc3339(&poll.start_time.as_ref().unwrap()).unwrap();
        let end_time = DateTime::parse_from_rfc3339(&poll.end_time.as_ref().unwrap()).unwrap();
        let date_now = chrono::offset::Utc::now();

        assert_eq!(date_now < start_time, false, "Voting has not started yet");
        assert_eq!(date_now > end_time, false, "Voting has ended");

        assert_eq!(poll.options.iter().any(|v| v.voted_users.contains(&voter)), false, "This user has already voted!");

        let option = poll.options.iter_mut().find(|v| v.id == variant_id).unwrap();

        option.voted_users.push(voter);
        option.votes = option.votes + 1;

        self.polls.insert(&poll_id, &poll);
    }

    pub fn is_voted(&self, account_id: AccountId, poll_id: usize) -> bool {
        let poll = self.polls
            .get(&poll_id)
            .expect("Such poll does not exists");

        poll.options.iter().any(|v| v.voted_users.contains(&account_id))
    }
}

/*
 * The rest of this file holds the inline tests for the code above
 * Learn more about Rust tests: https://doc.rust-lang.org/book/ch11-01-writing-tests.html
 */
#[cfg(test)]
mod tests {
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::{testing_env};

    use super::*;

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    #[test]
    fn test_create_poll() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "20223-09-11T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options,
        );

        assert_eq!(created_poll.id, 1);
        assert_eq!(created_poll.description, description);
        assert_eq!(created_poll.start_time, Option::from(start_time.to_string()));
        assert_eq!(created_poll.end_time, Option::from(end_time.to_string()));
        assert_eq!(created_poll.owner, accounts(1));
    }

    #[test]
    fn test_get_poll() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2022-09-18T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options,
        );

        let poll = contract.get_poll(1).unwrap();

        assert_eq!(poll.id, 1);
        assert_eq!(poll.description, description);
        assert_eq!(poll.start_time, Option::from(start_time.to_string()));
        assert_eq!(poll.end_time, Option::from(end_time.to_string()));
        assert_eq!(poll.owner, accounts(1));
    }

    #[test]
    fn test_delete_poll() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2022-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options,
        );

        contract.delete_poll(1);

        assert_eq!(contract.polls.len(), 0);
    }

    #[test]
    #[should_panic(expected = "Only owner can delete the poll!")]
    fn test_delete_poll_not_owned() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2022-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options,
        );

        let context = get_context(accounts(0));
        testing_env!(context.build());

        contract.delete_poll(1);
        assert_eq!(contract.polls.len(), 1);
    }

    #[test]
    fn test_get_polls_for_owner() {
        let context_1 = get_context(accounts(1));
        testing_env!(context_1.build());

        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2022-09-21T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        let context_2 = get_context(accounts(1));
        testing_env!(context_2.build());

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        assert_eq!(contract.get_polls_for_owner(accounts(1), None, None).len(), 3);
        assert_eq!(contract.get_polls_for_owner(accounts(1), Option::from(0), Option::from(1)).len(), 1);
        assert_eq!(contract.get_polls_for_owner(accounts(1), Option::from(1), Option::from(3)).len(), 2);
        assert_eq!(contract.get_polls_for_owner(accounts(2), None, None).len(), 0);
    }

    #[test]
    fn test_get_all_polls() {
        let context_1 = get_context(accounts(1));
        testing_env!(context_1.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2022-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        let context_2 = get_context(accounts(1));
        testing_env!(context_2.build());

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        assert_eq!(contract.get_all_polls(None, None).len(), 3);
        assert_eq!(contract.get_all_polls(Option::from(0), Option::from(1)).len(), 1);
        assert_eq!(contract.get_all_polls(Option::from(1), Option::from(3)).len(), 2);
    }

    #[test]
    fn test_vote() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2029-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.vote(created_poll.id, created_poll.options.first().unwrap().id);

        let poll = contract.polls.get(&created_poll.id).unwrap();

        let option = poll.options.iter().find(|v| v.id == poll.options.first().unwrap().id).unwrap();

        assert_eq!(option.voted_users.contains(&accounts(1)), true);
        assert_eq!(option.votes, 1);
    }

    #[test]
    #[should_panic(expected = "Voting has ended")]
    fn test_vote_ended_poll() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2022-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.vote(created_poll.id, created_poll.options.first().unwrap().id);
    }

    #[test]
    #[should_panic(expected = "Voting has not started yet")]
    fn test_vote_not_started_poll() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2023-09-11T21:00:00.000Z";
        let end_time = "2023-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.vote(created_poll.id, created_poll.options.first().unwrap().id);
    }

    #[test]
    #[should_panic(expected = "This user has already voted!")]
    fn test_vote_again() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-18T21:00:00.000Z";
        let end_time = "2025-09-21T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.vote(created_poll.id, created_poll.options.first().unwrap().id);
        contract.vote(created_poll.id, created_poll.options.last().unwrap().id);
    }

    #[test]
    fn test_is_voted() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2024-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.vote(created_poll.id, created_poll.options.first().unwrap().id);

        assert_eq!(contract.is_voted(accounts(1), created_poll.id), true);
    }

    #[test]
    fn test_get_voted_polls() {
        let context_1 = get_context(accounts(1));
        testing_env!(context_1.build());

        let mut contract = Contract::new_default();

        let description = "Best programming language!";
        let start_time = "2022-09-11T21:00:00.000Z";
        let end_time = "2029-09-19T21:00:00.000Z";
        let options = Vec::from(["Java".to_string(), "Rust".to_string(), "C++".to_string()]);

        let created_poll_1 = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        let context_2 = get_context(accounts(0));
        testing_env!(context_2.build());

        let created_poll_2 = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        let created_poll_3 = contract.create_poll(
            description.to_string(),
            Option::from(start_time.to_string()),
            Option::from(end_time.to_string()),
            options.clone(),
        );

        contract.vote(created_poll_1.id, created_poll_1.options.first().unwrap().id);
        contract.vote(created_poll_2.id, created_poll_2.options.first().unwrap().id);
        contract.vote(created_poll_3.id, created_poll_2.options.last().unwrap().id);

        assert_eq!(contract.get_voted_polls(accounts(0), None, None).len(), 3);
        assert_eq!(contract.get_voted_polls(accounts(0), Option::from(0), Option::from(1)).len(), 1);
        assert_eq!(contract.get_voted_polls(accounts(0), Option::from(1), Option::from(3)).len(), 2);
        assert_eq!(contract.get_voted_polls(accounts(1), None, None).len(), 0);
    }

}

'''
'''--- frontend/App.js ---
import React from 'react'
import {
  Link,
  Route,
  Routes,
  Navigate,
  useLocation,
  useNavigate,
} from 'react-router-dom'
import 'regenerator-runtime/runtime'
import styled from 'styled-components'
import colors from './assets/constants/colors'
import './assets/css/global.css'
import bg2 from './assets/img/bg2.svg'
import footer from './assets/img/footer.svg'
import { login, logout } from './assets/js/near/utils'
import Button from './components/Button'
import AllPolls from './pages/AllPolls'
import CreatePoll from './pages/CreatePoll'
import Main from './pages/Main'
import Modal from './pages/Modal'
import MyPolls from './pages/MyPolls'
import NotFound from './pages/NotFound'
import Poll from './pages/Poll'
import VotedPolls from './pages/VotedPolls'

export default function App() {
  const location = useLocation()
  const navigate = useNavigate()
  let state = location.state
  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (
      <>
        <Routes>
          <Route path='/' element={<Main login={login} />} />
        </Routes>
      </>
    )
  }

  return (
    <>
      {location.pathname === '/' && <Navigate to={`/all`} replace />}
      <Background src={bg2} alt='background image' />
      <HeaderContainer>
        <Logo>Hello, {accountId ? accountId : 'User'}</Logo>

        <MenuContainer>
          <MenuItem>
            <Link to='/all'>All polls</Link>
          </MenuItem>
          <MenuItem>
            <Link to='/my'>My polls</Link>
          </MenuItem>
          <MenuItem>
            <Link to='/voted'>Voted polls</Link>
          </MenuItem>
        </MenuContainer>

        <Button
          text='Log out'
          click={() => {
            navigate('/')
            logout()
          }}
          style={{
            width: 100,
            backgroundColor: colors.violet,
            color: colors.white,
          }}
        />
      </HeaderContainer>
      <ContentContainer>
        <Content>
          <Routes location={state?.backgroundLocation || location}>
            <Route path='/all' element={<AllPolls />} />
            <Route path='/my' element={<MyPolls />} />
            <Route path='/voted' element={<VotedPolls />} />
            <Route path='/create' element={<CreatePoll />} />
            <Route path='/poll/:id' element={<Poll />} />
            <Route path='*' element={<NotFound />} />
          </Routes>
        </Content>
      </ContentContainer>
      <FooterContainer>
        <DevelopersContainer>
          <Text>Developers</Text>
          <Text>Mileshko Olesia, Reut Ksenia</Text>
        </DevelopersContainer>
        <FooterImage src={footer} alt='footer image' />
      </FooterContainer>

      {state?.backgroundLocation && (
        <Routes>
          <Route
            path={'/create'}
            element={<Modal handleClose={() => navigate('my')} />}
          />
        </Routes>
      )}
    </>
  )
}

const ContentContainer = styled.div`
  padding-top: 155px;
  margin: 0 10vw;
  min-height: 1150px;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
`
const Background = styled.img`
  width: 100%;
  z-index: -1;
  position: absolute;
`
const HeaderContainer = styled.div`
  padding-top: 5vh;
  padding-left: 10vw;
  padding-right: 10vw;
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  width: 100%;
`
const Logo = styled.span`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 900;
  font-size: 30px;
  line-height: 41px;
  color: ${colors.white};
`
const MenuContainer = styled.div`
  display: flex;
  width: 550px;
  justify-content: space-between;
`
const MenuItem = styled.div`
  a {
    font-family: 'Nunito';
    font-style: normal;
    font-weight: 700;
    font-size: 17px;
    line-height: 23px;
    color: ${colors.white};
  }
`
const Text = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 500;
  font-size: 17px;
  line-height: 26px;
  color: ${colors.white};
`
const FooterContainer = styled.div`
  position: absolute;
  width: 100%;
`
const FooterImage = styled.img`
  position: relative;
  width: 100%;
  z-index: -1;
  bottom: -10px;
`
const DevelopersContainer = styled.div`
  display: flex;
  flex-direction: column;
  position: absolute;
  bottom: 0px;
  padding: 5vh 10vw;
`
const Content = styled.div`
  width: 55vw;
  background: linear-gradient(
      0deg,
      rgba(63, 61, 86, 0.2),
      rgba(63, 61, 86, 0.2)
    ),
    linear-gradient(
      199.54deg,
      rgba(219, 0, 255, 0) 0%,
      rgba(143, 0, 255, 0.44) 100%
    );
  backdrop-filter: blur(42px);
  border-radius: 16px;
`

'''
'''--- frontend/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- frontend/assets/constants/colors.js ---
const colors = {
  white: '#FFFFFF',
  violet: '#C360FC',
  placeholder: '#E3E3E3',
  active: '#F85656',
}
export default colors

'''
'''--- frontend/assets/css/global.css ---
* {
  box-sizing: border-box;
}

@font-face {
  font-family: Nunito;
  src: url('../fonts/Nunito-Regular.ttf') format('truetype');
  font-weight: 400;
}

@font-face {
  font-family: Nunito;
  src: url('../fonts/Nunito-Medium.ttf') format('truetype');
  font-weight: 500;
}

@font-face {
  font-family: Nunito;
  src: url('../fonts/Nunito-SemiBold.ttf') format('truetype');
  font-weight: 600;
}

@font-face {
  font-family: Nunito;
  src: url('../fonts/Nunito-Bold.ttf') format('truetype');
  font-weight: 700;
}

@font-face {
  font-family: Nunito;
  src: url('../fonts/Nunito-ExtraBold.ttf') format('truetype');
  font-style: normal;
  font-weight: 800;
}

@font-face {
  font-family: Nunito;
  src: url('../fonts/Nunito-Black.ttf') format('truetype');
  font-style: normal;
  font-weight: 900;
}

html {
  --bg: #ffff;
  --fg: #1e1e1e;
  --gray: #555;
  --light-gray: #ccc;
  --shadow: #e6e6e6;
  --success: rgb(90, 206, 132);
  --primary: #ff585d;
  --secondary: #0072ce;

  background-color: var(--bg);
  color: var(--fg);
  font-family: -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Helvetica,
  Arial, sans-serif;
  font-size: calc(0.9em + 0.5vw);
  line-height: 1.3;
}

body {
  margin: 0;
}

/* main {
  margin: 0 auto;
  max-width: 26em;
  text-align: justify;
} */

/* h1 {
  background-image: url(../img/logo-black.svg);
  background-position: center 1em;
  background-repeat: no-repeat;
  background-size: auto 1.5em;
  margin-top: 0;
  padding: 3.5em 0 0.5em;
  text-align: center;
} */

a,
.link {
  color: var(--primary);
  text-decoration: none;
}
a:hover,
a:focus,
.link:hover,
.link:focus {
  text-decoration: none;
}
a:active,
.link:active {
  color: var(--secondary);
}

button,
input {
  font: inherit;
  outline: none;
}

/* button {
  background-color: var(--secondary);
  border-radius: 5px;
  border: none;
  color: #efefef;
  cursor: pointer;
  padding: 0.3em 0.75em;
  transition: transform 30ms;
}
button:hover,
button:focus {
  box-shadow: 0 0 10em rgba(255, 255, 255, 0.2) inset;
}
button:active {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.1) inset;
}
button.link {
  background: none;
  border: none;
  box-shadow: none;
  display: inline;
}
[disabled] button,
button[disabled] {
  box-shadow: none;
  background-color: var(--light-gray);
  color: gray;
  cursor: not-allowed;
  transform: none;
}
[disabled] button {
  text-indent: -900em;
  width: 2em;
  position: relative;
}
[disabled] button:after {
  content: " ";
  display: block;
  width: 0.8em;
  height: 0.8em;
  border-radius: 50%;
  border: 2px solid #fff;
  border-color: var(--fg) transparent var(--fg) transparent;
  animation: loader 1.2s linear infinite;
  position: absolute;
  top: 0.45em;
  right: 0.5em;
} */
@keyframes loader {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}

/* fieldset {
  border: none;
  padding: 2em 0;
}

input {
  background-color: var(--shadow);
  border: none;
  border-radius: 5px 0 0 5px;
  caret-color: var(--primary);
  color: inherit;
  padding: 0.25em 1em;
}
input::selection {
  background-color: var(--secondary);
  color: #efefef;
}
input:focus {
  box-shadow: 0 0 10em rgba(0, 0, 0, 0.02) inset;
}

code {
  color: var(--gray);
}

li {
  padding-bottom: 1em;
}

aside {
  animation: notify ease-in-out 10s;
  background-color: var(--shadow);
  border-radius: 5px;
  bottom: 0;
  font-size: 0.8em;
  margin: 1em;
  padding: 1em;
  position: fixed;
  transform: translateY(10em);
  right: 0;
}
aside footer {
  display: flex;
  font-size: 0.9em;
  justify-content: space-between;
  margin-top: 0.5em;
}
aside footer *:first-child {
  color: var(--success);
}
aside footer *:last-child {
  color: var(--gray);
} */
@keyframes notify {
  0% {
    transform: translateY(10em);
  }
  5% {
    transform: translateY(0);
  }
  95% {
    transform: translateY(0);
  }
  100% {
    transform: translateY(10em);
  }
}

@media (prefers-color-scheme: dark) {
  html {
    --fg: #ffff;
    --gray: #aaa;
    --shadow: #2a2a2a;
    --light-gray: #444;
    /* background-image: url('../img/bg1.svg');
    background-size: cover;
    background-repeat: no-repeat; */
  }
  h1 {
    background-image: url(../img/logo-white.svg);
  }
  input:focus {
    box-shadow: 0 0 10em rgba(255, 255, 255, 0.02) inset;
  }
}

p {
  margin: 0;
}

'''
'''--- frontend/assets/img/arrow1.svg ---
<svg width="364" height="248" viewBox="0 0 364 248" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M3 3C147 3.0001 312.5 146 360.5 244.5" stroke="#C360FC" stroke-width="6" stroke-linecap="round"/>
<line x1="360.919" y1="244.083" x2="359.083" y2="177.081" stroke="#C360FC" stroke-width="6" stroke-linecap="round"/>
<line x1="358.915" y1="244.147" x2="307.147" y2="215.085" stroke="#C360FC" stroke-width="6" stroke-linecap="round"/>
</svg>

'''
'''--- frontend/assets/img/arrow2.svg ---
<svg width="379" height="254" viewBox="0 0 379 254" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M375.086 3.20361C313.371 133.308 113.24 221.552 3.67287 222.705" stroke="#C360FC" stroke-width="6" stroke-linecap="round"/>
<line x1="3.8699" y1="223.262" x2="65.1935" y2="250.32" stroke="#C360FC" stroke-width="6" stroke-linecap="round"/>
<line x1="4.67068" y1="221.425" x2="53.1157" y2="187.108" stroke="#C360FC" stroke-width="6" stroke-linecap="round"/>
</svg>

'''
'''--- frontend/assets/img/bg1.svg ---
<svg width="1920" height="3118" viewBox="0 0 1920 3118" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1389.8 1522.5C1447.05 1435.94 1598.61 1400.91 1941 1336L1921.92 2026.86C1893.93 2035.96 1827.6 2030.67 1786.16 1936.7C1734.37 1819.24 1525.56 1828 1568.08 1690.44C1610.61 1552.89 1332.55 1609.05 1389.8 1522.5Z" fill="url(#paint0_linear_0_1)"/>
<path d="M1435.5 1525.5C1488 1441.5 1627 1407.5 1941 1344.5L1923.5 2015C1897.83 2023.83 1837 2018.7 1799 1927.5C1751.5 1813.5 1560 1822 1599 1688.5C1638 1555 1383 1609.5 1435.5 1525.5Z" fill="url(#paint1_linear_0_1)"/>
<path d="M1474.53 2955.05C1530.75 3017.51 1687.75 3051.09 2043 3117.29L2052.05 2647.07C2023.17 2639.08 1953.6 2638.38 1906.33 2699.5C1847.25 2775.89 1629.29 2756.44 1667.98 2852.57C1706.67 2948.69 1418.31 2892.6 1474.53 2955.05Z" fill="url(#paint2_linear_0_1)"/>
<path d="M1522.44 2955.97C1573.8 3016.39 1717.71 3048.45 2043.36 3111.52L2053.21 2655.22C2026.75 2647.57 1962.93 2647.12 1919.37 2706.57C1864.92 2780.89 1665.06 2762.74 1700.23 2855.89C1735.4 2949.03 1471.07 2895.55 1522.44 2955.97Z" fill="url(#paint3_linear_0_1)"/>
<path d="M-95.7106 2144.57C-211.177 2193.27 -194.33 2312.59 -171.472 2366.16C-68.7635 2524.08 97.4155 2613.74 197.439 2529.39C297.462 2445.03 301.587 2381.21 302.02 2330.84C302.452 2280.47 155.685 2337.61 163.415 2236.8C171.145 2135.99 48.6227 2083.69 -95.7106 2144.57Z" fill="url(#paint4_linear_0_1)"/>
<path d="M-82.1368 2165.87C-185.19 2206.12 -167.718 2315.03 -146.101 2364.46C-50.5576 2511.36 100.833 2598.46 189.291 2525.31C277.749 2452.15 280.234 2394.34 279.653 2348.63C279.073 2302.91 147.993 2349.75 153.013 2258.49C158.033 2167.23 46.6795 2115.54 -82.1368 2165.87Z" fill="url(#paint5_linear_0_1)"/>
<path d="M283.304 1488.65C234.376 1551.06 160.415 1542.45 -5.71205 1526.31C-11.2117 1420.87 -18.9112 1217.85 -5.71205 1249.27C10.7869 1288.54 132.538 1356.86 185.448 1367.08C238.359 1377.3 332.232 1426.25 283.304 1488.65Z" fill="url(#paint6_linear_0_1)"/>
<path d="M254.5 1482C211.5 1540 146.5 1532 0.499992 1517C-4.33334 1419 -11.1 1230.3 0.499992 1259.5C15 1296 122 1359.5 168.5 1369C215 1378.5 297.5 1424 254.5 1482Z" fill="url(#paint7_linear_0_1)"/>
<path d="M488.065 2257.51C452.864 2239.29 441.526 2258.41 434.006 2261.6C417.269 2278.87 386.269 2318.63 396.161 2339.49C408.527 2365.56 487.08 2363.9 517.051 2353.39C547.022 2342.88 523.266 2275.73 488.065 2257.51Z" fill="url(#paint8_linear_0_1)"/>
<path d="M487.337 2249.09C449.818 2229.38 438.058 2249.46 430.136 2252.74C412.634 2270.8 380.319 2312.47 391.068 2334.66C404.504 2362.4 487.679 2361.62 519.285 2350.88C550.891 2340.14 524.856 2268.81 487.337 2249.09Z" fill="url(#paint9_linear_0_1)"/>
<path d="M1797.43 954.316C1916.72 949.443 1917.92 880.366 1932.86 860.195C1950.95 787.832 1972.91 632.817 1915.94 591.668C1844.73 540.232 1641.58 665.439 1578.76 739.874C1515.95 814.309 1678.15 959.189 1797.43 954.316Z" fill="url(#paint10_linear_0_1)"/>
<path d="M1811.88 975.934C1939.46 971.533 1940.33 899.206 1956.18 878.172C1975.1 802.503 1997.65 640.308 1936.47 596.883C1859.98 542.603 1643.4 672.517 1576.66 750.092C1509.91 827.668 1684.3 980.334 1811.88 975.934Z" fill="url(#paint11_linear_0_1)"/>
<path d="M2152.57 171.038C2194.77 68.4153 1837.28 14.2532 1653.25 0H-8V957.196C189.51 1072.25 613.868 1279.9 731.218 1190.05C877.906 1077.75 1361.32 1091.14 1402.51 986.561C1443.7 881.98 1342.54 863.949 1199.46 735.155C1056.39 606.361 1672.04 588.33 1702.39 395.655C1732.74 202.979 2099.82 299.317 2152.57 171.038Z" fill="url(#paint12_linear_0_1)"/>
<path d="M2048.74 165.958C2088.82 66.3831 1749.33 13.8298 1574.58 0H-3V928.764C184.562 1040.4 587.545 1241.88 698.984 1154.71C838.283 1045.73 1297.35 1058.73 1336.46 957.257C1375.58 855.783 1279.51 838.287 1143.64 713.319C1007.77 588.351 1592.42 570.855 1621.24 383.902C1650.06 196.95 1998.65 290.426 2048.74 165.958Z" fill="url(#paint13_linear_0_1)"/>
<path d="M1061.81 228.39C1091.68 193.428 1049.89 146.234 954.328 158.472C917.527 160.319 933.935 260.334 978.541 288.571C1023.15 316.807 1031.94 263.353 1061.81 228.39Z" fill="white" fill-opacity="0.47"/>
<path d="M1305.21 128.356C1305.11 107.251 1277.78 102.505 1249.62 134.506C1237.96 145.808 1271.99 176.727 1294.84 173.896C1317.69 171.065 1305.32 149.46 1305.21 128.356Z" fill="white" fill-opacity="0.47"/>
<defs>
<linearGradient id="paint0_linear_0_1" x1="1460.68" y1="1437.49" x2="1838.36" y2="2049.55" gradientUnits="userSpaceOnUse">
<stop stop-color="#9F58F9" stop-opacity="0.44"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.11"/>
</linearGradient>
<linearGradient id="paint1_linear_0_1" x1="1500.5" y1="1443" x2="1876" y2="2018" gradientUnits="userSpaceOnUse">
<stop stop-color="#9F58F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint2_linear_0_1" x1="1545.07" y1="3017.34" x2="1773.7" y2="2535.24" gradientUnits="userSpaceOnUse">
<stop stop-color="#9F58F9" stop-opacity="0.44"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.11"/>
</linearGradient>
<linearGradient id="paint3_linear_0_1" x1="1586.94" y1="3016.18" x2="1816.23" y2="2556.59" gradientUnits="userSpaceOnUse">
<stop stop-color="#9F58F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint4_linear_0_1" x1="47.8021" y1="2112.2" x2="121.026" y2="2518.45" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.33"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.18"/>
</linearGradient>
<linearGradient id="paint5_linear_0_1" x1="46.4896" y1="2141.4" x2="100.442" y2="2515.61" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint6_linear_0_1" x1="142" y1="1246" x2="142" y2="1538" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.27"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.11"/>
</linearGradient>
<linearGradient id="paint7_linear_0_1" x1="130.316" y1="1256.47" x2="130.316" y2="1527.86" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint8_linear_0_1" x1="450.221" y1="2246.34" x2="501.413" y2="2372.57" gradientUnits="userSpaceOnUse">
<stop offset="0.148014" stop-color="#9B51F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint9_linear_0_1" x1="447.111" y1="2236.81" x2="500.518" y2="2371.94" gradientUnits="userSpaceOnUse">
<stop offset="0.148014" stop-color="#9B51F9" stop-opacity="0.3"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.14"/>
</linearGradient>
<linearGradient id="paint10_linear_0_1" x1="1913.13" y1="926.323" x2="1583.46" y2="674.089" gradientUnits="userSpaceOnUse">
<stop offset="0.148014" stop-color="#9B51F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint11_linear_0_1" x1="1935.48" y1="947.302" x2="1586.1" y2="675.056" gradientUnits="userSpaceOnUse">
<stop offset="0.148014" stop-color="#9B51F9" stop-opacity="0.3"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.14"/>
</linearGradient>
<linearGradient id="paint12_linear_0_1" x1="-8.00002" y1="13.3946" x2="634.506" y2="1413.66" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.43"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.08"/>
</linearGradient>
<linearGradient id="paint13_linear_0_1" x1="-3.00002" y1="12.9967" x2="629.152" y2="1361.35" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.93"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
</defs>
</svg>

'''
'''--- frontend/assets/img/bg2.svg ---
<svg width="1920" height="1170" viewBox="0 0 1920 1170" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M1350.84 122.775C1377.38 49.11 1152.55 10.2312 1036.81 0H-8V687.096C116.22 769.685 383.11 918.741 456.915 854.247C549.171 773.63 853.206 783.245 879.11 708.175C905.015 633.104 841.39 620.161 751.406 527.71C661.423 435.259 1048.62 422.316 1067.71 284.009C1086.8 145.703 1317.67 214.856 1350.84 122.775Z" fill="url(#paint0_linear_0_1)"/>
<path d="M1285.54 119.128C1310.75 47.6513 1097.23 9.92735 987.326 0H-4.85547V666.687C113.107 746.823 366.555 891.452 436.642 828.874C524.251 750.651 812.972 759.98 837.571 687.14C862.171 614.299 801.751 601.741 716.3 512.036C630.849 422.331 998.547 409.772 1016.67 275.574C1034.8 141.375 1254.04 208.474 1285.54 119.128Z" fill="url(#paint1_linear_0_1)"/>
<path d="M23.7953 1112.26C115.99 1197.55 157.645 1157.16 180.729 1156.15C236.974 1126.3 344.87 1049.91 326.494 983.201C303.523 899.819 77.5302 824.417 -13.4195 822.449C-104.369 820.481 -68.399 1026.97 23.7953 1112.26Z" fill="url(#paint2_linear_0_1)"/>
<path d="M864.319 815.344C965.475 944.016 1257.81 1019.32 1920 1170L1969.89 222.132C1916.25 204.627 1785.7 199.858 1692.7 320.819C1576.45 472.022 1168.71 422.274 1234.6 618.006C1300.49 813.737 763.164 686.672 864.319 815.344Z" fill="url(#paint3_linear_0_1)"/>
<path d="M954.179 819.503C1046.36 943.83 1314.23 1015.45 1921.07 1158.38L1971.5 238.627C1922.36 221.908 1802.6 217.921 1716.68 335.719C1609.27 482.966 1235.4 436.704 1294.9 626.256C1354.39 815.809 861.995 695.176 954.179 819.503Z" fill="url(#paint4_linear_0_1)"/>
<defs>
<linearGradient id="paint0_linear_0_1" x1="-8.00001" y1="9.61491" x2="492.069" y2="964.492" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.43"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.08"/>
</linearGradient>
<linearGradient id="paint1_linear_0_1" x1="-4.85548" y1="9.32932" x2="486.269" y2="927.152" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.93"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint2_linear_0_1" x1="126.942" y1="1181.08" x2="116.096" y2="784.235" gradientUnits="userSpaceOnUse">
<stop offset="0.148014" stop-color="#9B51F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
<linearGradient id="paint3_linear_0_1" x1="992.357" y1="944.369" x2="1502.2" y2="8.73159" gradientUnits="userSpaceOnUse">
<stop stop-color="#9F58F9" stop-opacity="0.44"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.11"/>
</linearGradient>
<linearGradient id="paint4_linear_0_1" x1="1071.03" y1="944.041" x2="1580.04" y2="54.865" gradientUnits="userSpaceOnUse">
<stop stop-color="#9F58F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.25"/>
</linearGradient>
</defs>
</svg>

'''
'''--- frontend/assets/img/calendar-time.svg ---
<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">
<title></title>
<g id="icomoon-ignore">
</g>
<path fill="#FFFFFF" d="M458.667 682.667c0-123.712 100.288-224 224-224s224 100.288 224 224c0 123.712-100.288 224-224 224s-224-100.288-224-224zM682.667 394.667c-159.057 0-288 128.943-288 288s128.943 288 288 288c159.057 0 288-128.943 288-288s-128.943-288-288-288zM682.667 523.14c17.673 0 32 14.327 32 32v127.526l69.5 69.5c12.497 12.497 12.497 32.759 0 45.257s-32.759 12.497-45.257 0l-78.869-78.874c-6.003-6.003-9.374-14.14-9.374-22.626v-140.783c0-17.673 14.327-32 32-32z"></path>
<path fill="#FFFFFF" d="M746.667 74.667c0-17.673-14.327-32-32-32s-32 14.327-32 32v21.333h-320v-21.333c0-17.673-14.327-32-32-32s-32 14.327-32 32v21.333h-85.333c-64.801 0-117.333 52.532-117.333 117.333v597.333c0 64.802 52.532 117.333 117.333 117.333h170.667c17.673 0 32-14.327 32-32s-14.327-32-32-32h-170.667c-29.455 0-53.333-23.876-53.333-53.333v-480h704v53.333c0 17.673 14.327 32 32 32s32-14.327 32-32v-170.667c0-64.801-52.531-117.333-117.333-117.333h-64v-21.333zM298.667 160v21.333c0 17.673 14.327 32 32 32s32-14.327 32-32v-21.333h320v21.333c0 17.673 14.327 32 32 32s32-14.327 32-32v-21.333h64c29.457 0 53.333 23.878 53.333 53.333v53.333h-704v-53.333c0-29.455 23.878-53.333 53.333-53.333h85.333z"></path>
</svg>

'''
'''--- frontend/assets/img/done.svg ---
<!-- Generated by IcoMoon.io -->
<svg version="1.1" xmlns="http://www.w3.org/2000/svg" width="1024" height="1024" viewBox="0 0 1024 1024">
<title></title>
<g id="icomoon-ignore">
</g>
<path fill="#9DF856" d="M160 512c0-194.404 157.596-352 352-352 194.402 0 352 157.596 352 352 0 194.402-157.598 352-352 352-194.404 0-352-157.598-352-352zM512 96c-229.751 0-416 186.249-416 416s186.249 416 416 416c229.751 0 416-186.249 416-416s-186.249-416-416-416zM707.221 405.441c11.482-13.436 9.899-33.635-3.537-45.116s-33.634-9.898-45.116 3.538l-194.266 227.327-99.697-107.874c-11.995-12.979-32.241-13.777-45.22-1.783-12.979 11.998-13.777 32.243-1.782 45.222l124.132 134.315c6.204 6.711 14.985 10.453 24.124 10.274 9.139-0.175 17.766-4.254 23.706-11.204l217.655-254.698z"></path>
</svg>

'''
'''--- frontend/assets/img/endCircle.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="30" height="30" rx="15" fill="#F85656"/>
</svg>

'''
'''--- frontend/assets/img/footer.svg ---
<svg width="1920" height="673" viewBox="0 0 1920 673" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M116.033 376.091C-34.5692 360.745 -74.7104 337.089 -311.074 651.975L-390.753 733.594L2135.46 746.175C2146.45 553.178 2155.93 160.79 2105.93 135.209C2043.44 103.232 1863.49 109.841 1665.9 196.997C1468.31 284.152 1323.43 9.17142 1131.95 0.598921C940.459 -7.97358 813.882 351.707 705.808 390.522C597.733 429.338 677.837 176.706 553.744 127.675C429.651 78.6433 266.635 391.437 116.033 376.091Z" fill="url(#paint0_linear_0_1)"/>
<path d="M141.355 398.835C-2.83207 386.297 -41.3518 367.835 -266.12 610.108L-342 672.822L2075.51 693.935C2085.16 544.84 2092.46 241.652 2044.5 221.658C1984.56 196.665 1812.38 200.962 1623.69 267.423C1435 333.884 1295.12 120.73 1111.84 113.242C928.556 105.754 809.051 383.138 705.804 412.647C602.557 442.156 678.073 247.287 559.102 208.837C440.131 170.387 285.543 411.373 141.355 398.835Z" fill="url(#paint1_linear_0_1)"/>
<defs>
<linearGradient id="paint0_linear_0_1" x1="794.722" y1="-68.5476" x2="2114.38" y2="755.568" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9" stop-opacity="0.23"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.07"/>
</linearGradient>
<linearGradient id="paint1_linear_0_1" x1="788.82" y1="58.2866" x2="1894.49" y2="909.97" gradientUnits="userSpaceOnUse">
<stop stop-color="#9B51F9"/>
<stop offset="1" stop-color="#DB00FF" stop-opacity="0.11"/>
</linearGradient>
</defs>
</svg>

'''
'''--- frontend/assets/img/img1.svg ---
<svg width="539" height="479" viewBox="0 0 539 479" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_7_34)">
<path d="M463.215 395.782C454.12 422.422 442.424 449.004 427.441 474.305C427.108 474.875 426.772 475.433 426.433 476.001L389.338 464.265C389.552 463.728 389.785 463.127 390.036 462.471C404.998 423.774 495.266 188.007 491.214 141.522C491.65 145.327 505.772 271.25 463.215 395.782Z" fill="#E6E6E6"/>
<path d="M434.597 476.569C434.093 477.085 433.576 477.596 433.055 478.096L405.227 469.292C405.604 468.837 406.042 468.3 406.546 467.694C414.787 457.628 439.289 427.491 463.215 395.782C488.927 361.706 513.978 325.819 517.489 311.073C516.784 314.426 494.826 416.502 434.597 476.569Z" fill="#E6E6E6"/>
<path d="M448.507 84.0062C448.497 84.0062 448.487 84.0092 448.476 84.0096V24.3528C448.476 17.894 445.911 11.6998 441.344 7.13277C436.778 2.56573 430.584 0 424.126 0H237.373C230.914 0 224.721 2.56573 220.154 7.13277C215.588 11.6998 213.022 17.894 213.022 24.3528V54.936C212.507 54.947 212.016 55.1594 211.655 55.5278C211.294 55.8963 211.092 56.3913 211.091 56.9071V72.0552C211.092 72.571 211.294 73.066 211.655 73.4344C212.016 73.8027 212.507 74.0151 213.022 74.026V89.8951H212.923C212.664 89.8951 212.407 89.9462 212.167 90.0455C211.928 90.1447 211.71 90.2902 211.526 90.4737C211.343 90.6571 211.198 90.8749 211.098 91.1145C210.999 91.3542 210.948 91.6111 210.948 91.8705V121.163C210.948 121.423 210.999 121.68 211.098 121.919C211.198 122.159 211.343 122.377 211.526 122.56C211.71 122.744 211.928 122.889 212.167 122.988C212.407 123.088 212.664 123.139 212.923 123.139H213.022V134.773H212.991C212.732 134.773 212.475 134.824 212.235 134.923C211.996 135.022 211.778 135.168 211.595 135.351C211.411 135.535 211.266 135.753 211.166 135.992C211.067 136.232 211.016 136.489 211.016 136.748V166.328C211.016 166.587 211.067 166.844 211.166 167.084C211.266 167.323 211.411 167.541 211.595 167.724C211.778 167.908 211.996 168.053 212.235 168.153C212.475 168.252 212.732 168.303 212.991 168.303H213.022V454.223C213.022 460.681 215.588 466.876 220.154 471.443C224.721 476.01 230.914 478.576 237.373 478.576H424.126C430.584 478.576 436.778 476.01 441.344 471.443C445.911 466.876 448.476 460.681 448.476 454.223V142.016C448.487 142.016 448.497 142.019 448.507 142.019C448.969 142.019 449.426 141.928 449.853 141.751C450.28 141.575 450.668 141.316 450.994 140.989C451.321 140.662 451.58 140.275 451.757 139.848C451.933 139.421 452.024 138.964 452.024 138.502V87.5239C452.024 86.591 451.654 85.6963 450.994 85.0366C450.335 84.3769 449.44 84.0063 448.507 84.0062Z" fill="#3F3D56"/>
<path d="M433.937 31.1695V447.399C433.935 452.358 431.964 457.114 428.457 460.62C424.95 464.126 420.195 466.095 415.236 466.095H246.263C241.304 466.095 236.548 464.126 233.041 460.62C229.534 457.114 227.563 452.358 227.561 447.399V31.1695C227.561 26.2092 229.532 21.452 233.039 17.9445C236.546 14.437 241.303 12.4665 246.263 12.4665H271.548V15.7486C271.55 19.8325 273.173 23.7486 276.06 26.6364C278.948 29.5241 282.863 31.1473 286.947 31.1491H372.914C376.992 31.14 380.9 29.5135 383.781 26.6263C386.661 23.7391 388.279 19.8271 388.279 15.7486V12.5006H415.236C420.19 12.5006 424.941 14.4664 428.448 17.9665C431.954 21.4667 433.928 26.2151 433.937 31.1695Z" fill="white"/>
<path d="M159.934 233.554C158.934 233.167 157.862 233.004 156.793 233.076C155.724 233.148 154.684 233.454 153.746 233.972C152.808 234.489 151.994 235.206 151.363 236.073C150.732 236.939 150.299 237.933 150.093 238.984L89.8794 271.728L100.466 283.645L156.386 247.754C158.176 247.982 159.987 247.546 161.476 246.528C162.965 245.51 164.029 243.98 164.467 242.23C164.904 240.48 164.684 238.63 163.849 237.031C163.013 235.431 161.62 234.194 159.934 233.554H159.934Z" fill="#FFB8B8"/>
<path d="M144.577 469.146L152.08 464.293L136.931 433.039L125.857 440.202L144.577 469.146Z" fill="#FFB8B8"/>
<path d="M171.057 461.9L147.475 477.154L141.582 468.042L156.393 458.461C158.719 456.957 161.548 456.438 164.256 457.019C166.965 457.6 169.332 459.233 170.836 461.559L171.057 461.9L171.057 461.9Z" fill="#2F2E41"/>
<path d="M60.3891 470.275H69.3249L73.5776 435.805H60.3891V470.275Z" fill="#FFB8B8"/>
<path d="M86.5589 478.574H58.4744V467.722H76.1138C77.4855 467.722 78.8437 467.992 80.111 468.517C81.3782 469.042 82.5297 469.811 83.4996 470.781C84.4695 471.751 85.2389 472.903 85.7638 474.17C86.2887 475.438 86.5589 476.796 86.5589 478.168V478.574Z" fill="#2F2E41"/>
<path d="M265.406 67.5467H246.985C246.532 67.5467 246.099 67.367 245.779 67.0471C245.459 66.7272 245.279 66.2933 245.279 65.8408C245.279 65.3884 245.459 64.9545 245.779 64.6346C246.099 64.3147 246.532 64.135 246.985 64.135H265.406C265.859 64.135 266.293 64.3147 266.612 64.6346C266.932 64.9545 267.112 65.3884 267.112 65.8408C267.112 66.2933 266.932 66.7272 266.612 67.0471C266.293 67.367 265.859 67.5467 265.406 67.5467Z" fill="#3F3D56"/>
<path d="M265.406 72.3231H246.985C246.532 72.3231 246.099 72.1434 245.779 71.8235C245.459 71.5036 245.279 71.0697 245.279 70.6173C245.279 70.1648 245.459 69.7309 245.779 69.411C246.099 69.0911 246.532 68.9114 246.985 68.9114H265.406C265.859 68.9114 266.293 69.0911 266.612 69.411C266.932 69.7309 267.112 70.1648 267.112 70.6173C267.112 71.0697 266.932 71.5036 266.612 71.8235C266.293 72.1434 265.859 72.3231 265.406 72.3231Z" fill="#3F3D56"/>
<path d="M265.406 77.0995H246.985C246.532 77.0995 246.099 76.9198 245.779 76.5999C245.459 76.28 245.279 75.8461 245.279 75.3937C245.279 74.9412 245.459 74.5073 245.779 74.1874C246.099 73.8675 246.532 73.6878 246.985 73.6878H265.406C265.859 73.6878 266.293 73.8675 266.612 74.1874C266.932 74.5073 267.112 74.9412 267.112 75.3937C267.112 75.8461 266.932 76.28 266.612 76.5999C266.293 76.9198 265.859 77.0995 265.406 77.0995Z" fill="#3F3D56"/>
<path d="M408.201 72.3572H407.581L407.342 72.1593C408.126 71.2244 408.556 70.043 408.556 68.8227C408.551 67.8186 408.248 66.8387 407.686 66.0069C407.123 65.1751 406.327 64.5287 405.397 64.1494C404.468 63.7702 403.447 63.6752 402.463 63.8763C401.48 64.0775 400.578 64.5659 399.872 65.2797C399.165 65.9934 398.687 66.9006 398.496 67.8864C398.306 68.8722 398.412 69.8924 398.801 70.8179C399.19 71.7435 399.845 72.5328 400.683 73.0862C401.52 73.6395 402.503 73.932 403.507 73.9266C404.724 73.918 405.9 73.4889 406.837 72.712L407.069 72.9099V73.5376L410.985 77.4611L412.159 76.2875L408.201 72.3572ZM403.507 72.3572C402.808 72.3599 402.124 72.1552 401.542 71.7691C400.959 71.383 400.504 70.8327 400.234 70.1879C399.964 69.5431 399.891 68.8327 400.025 68.1465C400.158 67.4604 400.493 66.8293 400.985 66.3331C401.477 65.8368 402.106 65.4978 402.791 65.3587C403.476 65.2197 404.187 65.287 404.834 65.552C405.48 65.817 406.034 66.2679 406.425 66.8476C406.815 67.4274 407.025 68.11 407.028 68.809L407.028 68.8227C407.031 69.2841 406.942 69.7416 406.768 70.169C406.594 70.5963 406.338 70.9852 406.013 71.3134C405.689 71.6416 405.303 71.9027 404.878 72.0818C404.453 72.2609 403.996 72.3545 403.535 72.3571C403.526 72.3572 403.517 72.3572 403.507 72.3572H403.507Z" fill="#3F3D56"/>
<path d="M302.935 130.322H269.841C267.851 130.322 265.942 129.532 264.534 128.124C263.127 126.716 262.336 124.807 262.336 122.817C262.336 120.826 263.127 118.917 264.534 117.509C265.942 116.102 267.851 115.311 269.841 115.311H302.935C304.926 115.311 306.835 116.102 308.242 117.509C309.65 118.917 310.44 120.826 310.44 122.817C310.44 124.807 309.65 126.716 308.242 128.124C306.835 129.532 304.926 130.322 302.935 130.322Z" fill="#C360FC"/>
<path d="M404.25 146.699H266.43C265.344 146.699 264.303 146.267 263.535 145.499C262.767 144.732 262.336 143.69 262.336 142.605C262.336 141.519 262.767 140.477 263.535 139.71C264.303 138.942 265.344 138.51 266.43 138.51H404.25C405.336 138.51 406.377 138.942 407.145 139.71C407.912 140.477 408.344 141.519 408.344 142.605C408.344 143.69 407.912 144.732 407.145 145.499C406.377 146.267 405.336 146.699 404.25 146.699Z" fill="#E6E6E6"/>
<path d="M317.055 163.075H266.43C265.344 163.075 264.303 162.643 263.535 161.876C262.767 161.108 262.336 160.067 262.336 158.981C262.336 157.895 262.767 156.854 263.535 156.086C264.303 155.318 265.344 154.887 266.43 154.887H317.055C318.141 154.887 319.182 155.318 319.95 156.086C320.717 156.854 321.149 157.895 321.149 158.981C321.149 160.067 320.717 161.108 319.95 161.876C319.182 162.643 318.141 163.075 317.055 163.075Z" fill="#E6E6E6"/>
<path d="M302.935 311.826H269.841C267.851 311.826 265.942 311.035 264.534 309.627C263.127 308.22 262.336 306.311 262.336 304.32C262.336 302.329 263.127 300.42 264.534 299.013C265.942 297.605 267.851 296.814 269.841 296.814H302.935C304.926 296.814 306.835 297.605 308.242 299.013C309.65 300.42 310.44 302.329 310.44 304.32C310.44 306.311 309.65 308.22 308.242 309.627C306.835 311.035 304.926 311.826 302.935 311.826Z" fill="#C360FC"/>
<path d="M404.25 328.202H266.43C265.344 328.202 264.303 327.771 263.535 327.003C262.767 326.235 262.336 325.194 262.336 324.108C262.336 323.022 262.767 321.981 263.535 321.213C264.303 320.445 265.344 320.014 266.43 320.014H404.25C405.336 320.014 406.377 320.445 407.145 321.213C407.912 321.981 408.344 323.022 408.344 324.108C408.344 325.194 407.912 326.235 407.145 327.003C406.377 327.771 405.336 328.202 404.25 328.202Z" fill="#E6E6E6"/>
<path d="M317.055 344.578H266.43C265.344 344.578 264.303 344.147 263.535 343.379C262.767 342.611 262.336 341.57 262.336 340.484C262.336 339.398 262.767 338.357 263.535 337.589C264.303 336.821 265.344 336.39 266.43 336.39H317.055C318.141 336.39 319.182 336.821 319.95 337.589C320.717 338.357 321.149 339.398 321.149 340.484C321.149 341.57 320.717 342.611 319.95 343.379C319.182 344.147 318.141 344.578 317.055 344.578Z" fill="#E6E6E6"/>
<path d="M302.935 395.754H269.841C267.851 395.754 265.942 394.963 264.534 393.556C263.127 392.148 262.336 390.239 262.336 388.248C262.336 386.258 263.127 384.348 264.534 382.941C265.942 381.533 267.851 380.742 269.841 380.742H302.935C304.926 380.742 306.835 381.533 308.242 382.941C309.65 384.348 310.44 386.258 310.44 388.248C310.44 390.239 309.65 392.148 308.242 393.556C306.835 394.963 304.926 395.754 302.935 395.754Z" fill="#C360FC"/>
<path d="M404.25 412.13H266.43C265.344 412.13 264.303 411.699 263.535 410.931C262.767 410.163 262.336 409.122 262.336 408.036C262.336 406.95 262.767 405.909 263.535 405.141C264.303 404.374 265.344 403.942 266.43 403.942H404.25C405.336 403.942 406.377 404.374 407.145 405.141C407.912 405.909 408.344 406.95 408.344 408.036C408.344 409.122 407.912 410.163 407.145 410.931C406.377 411.699 405.336 412.13 404.25 412.13Z" fill="#E6E6E6"/>
<path d="M317.055 428.507H266.43C265.344 428.507 264.303 428.075 263.535 427.307C262.767 426.54 262.336 425.498 262.336 424.413C262.336 423.327 262.767 422.285 263.535 421.518C264.303 420.75 265.344 420.318 266.43 420.318H317.055C318.141 420.318 319.182 420.75 319.95 421.518C320.717 422.285 321.149 423.327 321.149 424.413C321.149 425.498 320.717 426.54 319.95 427.307C319.182 428.075 318.141 428.507 317.055 428.507Z" fill="#E6E6E6"/>
<path d="M423.695 269.179H160.335C158.798 269.178 157.324 268.566 156.237 267.479C155.149 266.391 154.538 264.917 154.536 263.379V191.733C154.538 190.196 155.149 188.721 156.237 187.634C157.324 186.547 158.798 185.935 160.335 185.933H423.695C425.232 185.935 426.706 186.547 427.794 187.634C428.881 188.721 429.493 190.196 429.494 191.733V263.379C429.492 264.917 428.881 266.391 427.794 267.479C426.706 268.566 425.232 269.177 423.695 269.179Z" fill="#C360FC"/>
<path d="M65.6568 354.418C68.1744 372.084 54.8426 450.348 56.3232 450.342L75.4679 450.239C76.1502 448.929 84.9379 406.699 87.6943 399.923C91.5424 390.52 95.4246 381.002 96.9392 370.958C98.3652 361.528 97.6624 351.92 96.7345 342.429C96.7777 342.147 96.753 341.858 96.6627 341.587C96.5723 341.316 96.4189 341.07 96.2149 340.871C96.011 340.671 95.7625 340.522 95.4898 340.437C95.2171 340.352 94.9282 340.333 94.6468 340.382L68.959 339.058C63.6645 338.785 62.4091 337.625 63.2142 342.825C63.7736 346.707 65.0973 350.487 65.6568 354.418Z" fill="#2F2E41"/>
<path d="M70.7056 311.464C65.4862 318.97 60.0143 327.608 61.7473 336.595C63.0641 343.418 68.263 348.707 73.1686 353.654C92.7773 373.346 131.442 460.236 131.442 460.236C150.101 448.295 130.997 460.577 149.932 447.953C148.253 447.824 110.121 310.734 106.962 310.55C94.1828 309.704 83.1572 308.455 70.7056 311.464Z" fill="#2F2E41"/>
<path d="M91.3504 240.023C88.6993 237.659 70.0685 230.367 70.0685 230.367C69.726 230.322 69.3783 230.332 69.0391 230.398C67.9789 230.666 67.4951 231.983 67.7216 233.049C67.948 234.114 66.09 251.625 65.6114 259.588C64.7725 273.486 72.9558 304.966 72.8838 305.929C72.6034 309.362 71.1004 312.58 68.648 314.998C69.2854 315.79 109.766 317.376 112.519 318.313C113.075 317.608 109.385 267.674 109.215 264.854C108.932 260.571 94.8501 243.266 91.3504 240.023Z" fill="#E6E6E6"/>
<path d="M62.4781 348.371C63.4374 347.894 64.2804 347.212 64.9476 346.373C65.6149 345.535 66.0902 344.56 66.3401 343.518C66.59 342.476 66.6084 341.392 66.394 340.342C66.1796 339.292 65.7376 338.302 65.0991 337.441L82.1786 242.909L66.2405 242.699L54.3798 336.179C53.0052 337.347 52.107 338.979 51.8553 340.766C51.6035 342.553 52.0159 344.369 53.0141 345.872C54.0123 347.375 55.5271 348.46 57.2714 348.92C59.0156 349.381 60.8683 349.185 62.4782 348.371H62.4781Z" fill="#FFB8B8"/>
<path d="M62.3409 249.924C61.6762 249.972 61.0142 249.799 60.4578 249.432C59.5094 248.62 67.2465 236.195 68.7748 236.011C73.7486 235.437 78.8657 235.246 83.6894 236.591C88.5131 237.935 93.0502 240.992 95.2062 245.516C96.1069 247.399 89.5774 256.877 86.6095 255.485C83.0549 253.82 67.0213 250.04 62.3409 249.924Z" fill="#E6E6E6"/>
<path d="M79.8962 229.349C89.7833 229.349 97.7983 221.333 97.7983 211.445C97.7983 201.557 89.7833 193.541 79.8962 193.541C70.0091 193.541 61.994 201.557 61.994 211.445C61.994 221.333 70.0091 229.349 79.8962 229.349Z" fill="#FFB8B8"/>
<path d="M62.3124 241.047C64.8002 241.308 67.3135 240.94 69.6224 239.978C71.9313 239.016 73.9621 237.49 75.529 235.54C77.096 233.59 78.1489 231.278 78.5916 228.816C79.0344 226.354 78.8527 223.82 78.0632 221.447C77.3508 219.304 76.1599 217.341 75.5075 215.18C74.8551 213.019 74.8373 210.463 76.2843 208.731C79.1156 205.341 84.5726 207.473 88.9374 206.799C93.5882 206.081 97.1563 201.619 97.5285 196.927C97.9006 192.235 95.4554 187.593 91.8155 184.61C88.1755 181.627 83.4809 180.158 78.7975 179.698C72.7828 179.107 66.7173 180.074 61.185 182.507C55.6526 184.94 50.8398 188.757 47.21 193.59C43.5801 198.422 41.2555 204.108 40.46 210.1C39.6644 216.091 40.4248 222.187 42.6677 227.799C44.6244 232.696 47.8205 237.256 52.3601 239.937C56.8997 242.619 62.8953 243.134 67.4198 240.427" fill="#2F2E41"/>
<path d="M253.997 218.686H208.247C205.342 218.686 202.978 215.319 202.978 211.18C202.978 207.041 205.342 203.674 208.247 203.674H253.997C256.902 203.674 259.266 207.041 259.266 211.18C259.266 215.319 256.902 218.686 253.997 218.686Z" fill="white"/>
<path d="M376.959 235.062H207.071C205.986 235.062 204.945 234.631 204.177 233.863C203.409 233.095 202.978 232.054 202.978 230.968C202.978 229.882 203.409 228.841 204.177 228.073C204.945 227.305 205.986 226.874 207.071 226.874H376.959C378.045 226.874 379.086 227.305 379.853 228.073C380.621 228.841 381.053 229.882 381.053 230.968C381.053 232.054 380.621 233.095 379.853 233.863C379.086 234.631 378.045 235.062 376.959 235.062Z" fill="#E6E6E6"/>
<path d="M289.764 251.438H207.071C205.986 251.438 204.945 251.007 204.177 250.239C203.409 249.471 202.978 248.43 202.978 247.344C202.978 246.258 203.409 245.217 204.177 244.449C204.945 243.682 205.986 243.25 207.071 243.25H289.764C290.849 243.25 291.891 243.682 292.658 244.449C293.426 245.217 293.857 246.258 293.857 247.344C293.857 248.43 293.426 249.471 292.658 250.239C291.891 251.007 290.849 251.438 289.764 251.438Z" fill="#E6E6E6"/>
<path d="M539 477.635H0V479H539V477.635Z" fill="#3F3D56"/>
</g>
<defs>
<clipPath id="clip0_7_34">
<rect width="539" height="479" fill="white"/>
</clipPath>
</defs>
</svg>

'''
'''--- frontend/assets/img/img2.svg ---
<svg width="549" height="382" viewBox="0 0 549 382" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M109.385 382C169.796 382 218.769 378.28 218.769 373.692C218.769 369.103 169.796 365.383 109.385 365.383C48.9732 365.383 0 369.103 0 373.692C0 378.28 48.9732 382 109.385 382Z" fill="#E6E6E6"/>
<path d="M83.6116 84.7591C102.648 76.6617 126.358 81.7921 149.513 85.3529C149.728 81.0408 152.34 75.7928 149.604 72.7845C146.28 69.1296 146.586 65.2894 148.587 61.427C153.701 51.5505 146.373 41.0412 138.974 32.3029C137.307 30.3378 135.199 28.7937 132.823 27.7962C130.446 26.7987 127.868 26.3758 125.298 26.5619L111.592 27.541C108.256 27.7793 105.074 29.0305 102.469 31.1273C99.8641 33.2241 97.9619 36.0664 97.0165 39.274C93.7438 43.7253 91.9922 48.1643 93.095 52.5802C88.193 55.9305 87.3695 59.9745 89.5722 64.5335C91.4401 67.404 91.4202 70.1982 89.4873 72.915C86.9487 76.3788 85.0044 80.241 83.7341 84.3433L83.6116 84.7591Z" fill="#2F2E41"/>
<path d="M535.991 330.233H148.009C144.559 330.233 141.25 328.862 138.81 326.422C136.371 323.982 135 320.673 135 317.223C275.643 300.876 413.643 300.876 549 317.223C549 320.673 547.629 323.982 545.19 326.422C542.75 328.862 539.441 330.233 535.991 330.233Z" fill="#2F2E41"/>
<path d="M549 317.988L135 317.223L182.981 236.482L183.211 236.099V58.1562C183.211 55.9963 183.636 53.8576 184.462 51.8621C185.289 49.8667 186.5 48.0535 188.027 46.5263C189.554 44.999 191.367 43.7876 193.362 42.9611C195.358 42.1347 197.496 41.7094 199.656 41.7096H482.048C484.208 41.7094 486.347 42.1347 488.342 42.9611C490.337 43.7876 492.15 44.999 493.677 46.5263C495.204 48.0535 496.416 49.8667 497.242 51.8621C498.068 53.8576 498.494 55.9963 498.494 58.1562V237.324L549 317.988Z" fill="#3F3D56"/>
<path d="M199.281 53.1893C197.861 53.1909 196.499 53.7559 195.495 54.7602C194.491 55.7645 193.926 57.1262 193.924 58.5465V220.793C193.926 222.213 194.491 223.575 195.495 224.579C196.499 225.584 197.861 226.149 199.281 226.15H484.719C486.139 226.149 487.501 225.584 488.505 224.579C489.509 223.575 490.074 222.213 490.076 220.793V58.5465C490.074 57.1262 489.509 55.7646 488.505 54.7603C487.501 53.7559 486.139 53.191 484.719 53.1893H199.281Z" fill="white"/>
<path d="M200.477 247.579C200.038 247.58 199.609 247.706 199.239 247.943C198.87 248.179 198.575 248.517 198.391 248.915L183.607 281.058C183.446 281.408 183.375 281.793 183.402 282.177C183.429 282.561 183.552 282.932 183.759 283.257C183.967 283.581 184.253 283.848 184.591 284.032C184.928 284.217 185.307 284.314 185.692 284.314H496.602C496.993 284.314 497.378 284.214 497.72 284.023C498.062 283.833 498.349 283.558 498.555 283.225C498.761 282.892 498.878 282.512 498.895 282.121C498.913 281.73 498.83 281.341 498.655 280.991L482.585 248.848C482.395 248.466 482.102 248.145 481.74 247.92C481.377 247.696 480.958 247.578 480.532 247.579H200.477Z" fill="#2F2E41"/>
<path d="M340.852 50.5107C342.754 50.5107 344.296 48.9689 344.296 47.0668C344.296 45.1648 342.754 43.6229 340.852 43.6229C338.95 43.6229 337.409 45.1648 337.409 47.0668C337.409 48.9689 338.95 50.5107 340.852 50.5107Z" fill="white"/>
<path d="M310.292 290.437C309.788 290.437 309.297 290.604 308.897 290.911C308.496 291.218 308.208 291.648 308.076 292.135L304.367 305.911C304.275 306.251 304.263 306.608 304.332 306.954C304.4 307.3 304.547 307.625 304.761 307.905C304.976 308.184 305.252 308.411 305.568 308.567C305.884 308.723 306.231 308.804 306.584 308.804H377.112C377.478 308.804 377.839 308.717 378.164 308.549C378.489 308.381 378.77 308.138 378.982 307.84C379.194 307.542 379.332 307.197 379.384 306.835C379.436 306.472 379.4 306.103 379.281 305.757L374.513 291.981C374.356 291.53 374.063 291.139 373.675 290.862C373.286 290.586 372.821 290.437 372.343 290.437H310.292Z" fill="#2F2E41"/>
<path d="M498.493 233.421V236.482H182.981L183.219 236.1V233.421H498.493Z" fill="#2F2E41"/>
<path d="M489.693 107.144C519.278 107.144 543.261 83.1589 543.261 53.572C543.261 23.985 519.278 0 489.693 0C460.109 0 436.126 23.985 436.126 53.572C436.126 83.1589 460.109 107.144 489.693 107.144Z" fill="#C360FC"/>
<path d="M511.885 76.914H467.501C466.689 76.9132 465.911 76.5904 465.337 76.0165C464.763 75.4426 464.441 74.6644 464.44 73.8527V47.0667C464.441 46.2551 464.764 45.477 465.337 44.9031C465.911 44.3292 466.689 44.0064 467.501 44.0055H511.885C512.697 44.0064 513.475 44.3292 514.049 44.9031C514.623 45.477 514.946 46.2551 514.946 47.0667V73.8527C514.946 74.6644 514.623 75.4426 514.049 76.0165C513.475 76.5904 512.697 76.9132 511.885 76.914ZM467.501 47.0668V73.8527H511.888L511.885 47.0667L467.501 47.0668Z" fill="white"/>
<path d="M503.468 47.0668H475.919V34.8218C475.919 25.9527 481.712 19.5155 489.693 19.5155C497.674 19.5155 503.468 25.9527 503.468 34.8218L503.468 47.0668ZM478.98 44.0056H500.407V34.8218C500.407 27.6122 496.001 22.5768 489.693 22.5768C483.385 22.5768 478.98 27.6122 478.98 34.8218L478.98 44.0056Z" fill="white"/>
<path d="M489.693 62.7557C491.384 62.7557 492.754 61.3851 492.754 59.6944C492.754 58.0037 491.384 56.6332 489.693 56.6332C488.003 56.6332 486.632 58.0037 486.632 59.6944C486.632 61.3851 488.003 62.7557 489.693 62.7557Z" fill="white"/>
<path d="M452.298 171.118H231.702C230.619 171.117 229.58 170.686 228.814 169.92C228.049 169.154 227.618 168.116 227.616 167.032V112.307C227.618 111.224 228.049 110.186 228.814 109.42C229.58 108.654 230.619 108.223 231.702 108.222H452.298C453.381 108.223 454.42 108.654 455.186 109.42C455.951 110.186 456.382 111.224 456.384 112.307V167.032C456.382 168.116 455.951 169.154 455.186 169.92C454.42 170.686 453.381 171.117 452.298 171.118ZM231.702 109.856C231.052 109.857 230.429 110.115 229.969 110.575C229.51 111.034 229.251 111.657 229.251 112.307V167.032C229.251 167.682 229.51 168.305 229.969 168.765C230.429 169.225 231.052 169.483 231.702 169.484H452.298C452.948 169.483 453.571 169.225 454.031 168.765C454.49 168.305 454.749 167.682 454.749 167.032V112.307C454.749 111.657 454.49 111.034 454.031 110.575C453.571 110.115 452.948 109.857 452.298 109.856L231.702 109.856Z" fill="#E6E6E6"/>
<path d="M265.978 154.212C275.168 154.212 282.618 146.761 282.618 137.57C282.618 128.379 275.168 120.928 265.978 120.928C256.787 120.928 249.337 128.379 249.337 137.57C249.337 146.761 256.787 154.212 265.978 154.212Z" fill="#E6E6E6"/>
<path d="M304.41 126.475C304.045 126.475 303.684 126.546 303.347 126.685C303.01 126.824 302.704 127.028 302.446 127.286C302.188 127.544 301.983 127.85 301.843 128.186C301.704 128.523 301.632 128.884 301.632 129.249C301.632 129.614 301.704 129.975 301.843 130.311C301.983 130.648 302.188 130.954 302.446 131.212C302.704 131.469 303.01 131.674 303.347 131.813C303.684 131.952 304.045 132.023 304.41 132.023H435.157C435.893 132.023 436.598 131.73 437.119 131.21C437.639 130.69 437.931 129.985 437.931 129.249C437.931 128.513 437.639 127.808 437.119 127.288C436.598 126.767 435.893 126.475 435.157 126.475H304.41Z" fill="#E6E6E6"/>
<path d="M304.41 143.117C303.674 143.117 302.969 143.41 302.449 143.93C301.929 144.45 301.636 145.155 301.636 145.891C301.636 146.627 301.929 147.332 302.449 147.852C302.969 148.372 303.674 148.665 304.41 148.665H360.671C361.406 148.665 362.112 148.372 362.632 147.852C363.152 147.332 363.444 146.627 363.444 145.891C363.444 145.155 363.152 144.45 362.632 143.93C362.112 143.41 361.406 143.117 360.671 143.117H304.41Z" fill="#E6E6E6"/>
<path d="M182.438 144.239L141.659 165.921L141.143 147.853C154.453 145.631 167.116 141.762 178.825 135.463L183.09 124.925C183.555 123.777 184.31 122.77 185.282 122.001C186.254 121.233 187.408 120.731 188.633 120.544C189.857 120.357 191.109 120.492 192.266 120.935C193.423 121.378 194.444 122.114 195.231 123.071C196.381 124.472 196.956 126.257 196.839 128.066C196.722 129.875 195.922 131.571 194.602 132.812L182.438 144.239Z" fill="#FFB8B8"/>
<path d="M82.7987 269.422C82.5012 268.331 82.4381 267.189 82.6134 266.072C82.7887 264.955 83.1986 263.887 83.816 262.94L92.7739 249.191C94.8927 245.939 98.1438 243.59 101.896 242.6C105.649 241.61 109.636 242.049 113.083 243.832C109.318 250.241 109.843 255.863 114.383 260.749C107.335 264.19 100.821 268.632 95.0426 273.935C93.9878 274.655 92.7763 275.111 91.5092 275.267C90.2421 275.424 88.9561 275.275 87.7582 274.833C86.5603 274.392 85.4852 273.67 84.6226 272.729C83.7599 271.788 83.1346 270.654 82.7987 269.422Z" fill="#2F2E41"/>
<path d="M184.296 251.445C182.94 253.705 181.027 255.578 178.739 256.885C176.451 258.192 173.866 258.889 171.231 258.909L111.72 259.359L109.139 244.389L135.465 236.645L113.269 219.609L137.53 191.217L181.595 232.291C184.171 234.691 185.844 237.903 186.336 241.39C186.827 244.877 186.107 248.426 184.296 251.445Z" fill="#2F2E41"/>
<path d="M102.429 353.83H88.4916C75.9781 268.048 63.2405 182.025 100.88 149.918L145.273 157.145L139.594 194.83L114.817 223.223L102.429 353.83Z" fill="#2F2E41"/>
<path d="M114.68 373.263C113.589 373.56 112.447 373.623 111.33 373.448C110.213 373.273 109.146 372.863 108.198 372.246L93.0651 370.211C89.8134 368.093 87.4645 364.841 86.4742 361.089C85.484 357.336 85.923 353.349 87.706 349.901C94.1145 353.666 99.7363 353.141 104.622 348.6C108.073 355.57 113.761 355.145 119.192 361.017C119.911 362.072 120.368 363.284 120.524 364.551C120.681 365.818 120.532 367.104 120.09 368.302C119.649 369.5 118.928 370.576 117.987 371.438C117.045 372.301 115.912 372.927 114.68 373.263Z" fill="#2F2E41"/>
<path d="M135.465 92.616L109.655 86.4212C113.942 77.6462 114.295 67.8823 112.236 57.5121L129.787 56.9958C130.337 69.8914 132 81.9392 135.465 92.616Z" fill="#FFB8B8"/>
<path d="M142.558 172.689C123.77 185.493 110.495 173.127 100.364 154.048C101.772 142.373 99.4924 128.402 95.2709 113.221C93.3935 106.526 94.0944 99.3694 97.2353 93.1652C100.376 86.9611 105.729 82.1601 112.236 79.7101L134.433 89.0023C153.28 104.366 156.989 121.008 149.918 138.561L142.558 172.689Z" fill="#C360FC"/>
<path d="M88.4916 105.522L67.844 116.363L104.494 138.044L109.593 150.624C109.933 151.464 110.099 152.364 110.08 153.27C110.062 154.176 109.858 155.068 109.483 155.893C109.108 156.718 108.569 157.458 107.899 158.067C107.229 158.677 106.442 159.144 105.585 159.439C104.612 159.775 103.574 159.88 102.552 159.748C101.531 159.615 100.554 159.248 99.6985 158.675C98.8428 158.102 98.1313 157.339 97.6198 156.445C97.1083 155.551 96.8107 154.551 96.7502 153.523L96.2345 144.756L49.6534 129.382C48.084 128.865 46.653 127.996 45.4688 126.843C44.2846 125.69 43.3783 124.283 42.8185 122.728C42.0025 120.461 41.961 117.988 42.7004 115.695C43.4398 113.402 44.9184 111.419 46.9049 110.056L84.3621 84.3562L88.4916 105.522Z" fill="#FFB8B8"/>
<path d="M109.139 107.587C100.528 103.813 92.6974 107.912 82.8136 111.2L81.265 83.8399C91.0793 78.6086 100.436 77.1982 109.139 81.2588L109.139 107.587Z" fill="#C360FC"/>
<path d="M119.44 70.5484C128.541 70.5484 135.919 63.1702 135.919 54.0686C135.919 44.9671 128.541 37.5889 119.44 37.5889C110.34 37.5889 102.962 44.9671 102.962 54.0686C102.962 63.1702 110.34 70.5484 119.44 70.5484Z" fill="#FFB8B8"/>
<path d="M139.154 51.9893C122.839 53.5874 110.407 50.9189 102.462 43.3208V37.2019H137.769L139.154 51.9893Z" fill="#2F2E41"/>
</svg>

'''
'''--- frontend/assets/img/img3.svg ---
<svg width="487" height="350" viewBox="0 0 487 350" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M236.859 49.4359C231.987 55.7229 228.239 62.7184 225.765 70.1453C223.556 76.6278 221.907 83.2679 220.834 90.0006C220.309 89.8058 219.792 89.596 219.283 89.3637C214.605 87.2251 210.835 83.6551 208.589 79.2369C206.343 74.8186 205.754 69.8135 206.919 65.0392C208.083 60.2649 210.931 56.0037 214.999 52.9518C219.066 49.9 224.112 48.2379 229.312 48.2371C231.265 48.2341 233.211 48.4683 235.102 48.9339C235.698 49.0763 236.287 49.2411 236.859 49.4359Z" fill="#FF6584"/>
<path d="M23.968 299.673C25.5484 287.701 33.4241 275.905 45.5437 272.009C40.7641 284.332 40.7652 297.85 45.5467 310.172C47.409 314.918 50.0049 320.014 48.2531 324.797C47.1632 327.773 44.4969 330.05 41.5164 331.474C38.5358 332.897 35.2279 333.576 31.9614 334.241L31.3186 334.742C26.1331 323.711 22.3876 311.646 23.968 299.673Z" fill="#E6E6E6"/>
<path d="M45.664 272.235C38.6061 279.686 34.2194 289.042 33.127 298.974C32.8516 301.109 32.9349 303.271 33.3741 305.38C33.8723 307.423 34.942 309.302 36.472 310.823C37.8683 312.268 39.4742 313.594 40.4733 315.334C40.9706 316.232 41.2609 317.219 41.3251 318.23C41.3893 319.24 41.226 320.253 40.8459 321.2C39.9638 323.583 38.2253 325.526 36.4551 327.37C34.4896 329.418 32.4137 331.515 31.5782 334.23C31.477 334.559 30.9412 334.391 31.0423 334.063C32.4959 329.34 37.3623 326.658 39.683 322.404C40.7659 320.419 41.2205 318.115 40.2053 316.019C39.3175 314.187 37.6627 312.818 36.2355 311.367C34.7199 309.903 33.6076 308.113 32.9959 306.151C32.4442 304.069 32.2726 301.914 32.4884 299.777C32.8929 294.961 34.0987 290.234 36.0617 285.77C38.2721 280.664 41.3935 275.951 45.2906 271.837C45.5319 271.582 45.9038 271.982 45.6641 272.235H45.664Z" fill="white"/>
<path d="M33.279 295.757C31.5349 295.358 29.9982 294.388 28.9432 293.02C27.8882 291.652 27.3836 289.976 27.5196 288.29C27.5483 287.949 28.1122 287.975 28.0834 288.316C27.9538 289.886 28.4239 291.448 29.4091 292.719C30.3943 293.991 31.8296 294.889 33.4559 295.252C33.8093 295.331 33.6303 295.835 33.279 295.757H33.279Z" fill="white"/>
<path d="M35.6616 310.178C38.8115 308.406 41.1368 305.581 42.1739 302.266C42.2763 301.937 42.8121 302.104 42.7098 302.432C41.6238 305.881 39.1976 308.816 35.9154 310.653C35.6024 310.828 35.3503 310.352 35.6616 310.178V310.178Z" fill="white"/>
<path d="M38.7957 281.167C39.4364 281.454 40.1426 281.587 40.8511 281.553C41.5595 281.519 42.2479 281.32 42.8544 280.973C43.1649 280.795 43.4167 281.271 43.1083 281.448C42.4362 281.828 41.6757 282.047 40.8931 282.086C40.1105 282.125 39.3296 281.983 38.6187 281.672C38.5491 281.648 38.4918 281.6 38.4585 281.538C38.4251 281.476 38.4183 281.404 38.4392 281.337C38.463 281.27 38.5138 281.215 38.5806 281.183C38.6473 281.151 38.7246 281.146 38.7957 281.167H38.7957Z" fill="white"/>
<path d="M82.4861 293.393C82.2956 293.51 82.1051 293.626 81.9144 293.747C79.362 295.329 76.9501 297.103 74.7027 299.052C74.5264 299.2 74.3501 299.352 74.1786 299.505C68.8171 304.255 64.4384 309.902 61.2649 316.159C60.0046 318.649 58.9472 321.227 58.1019 323.868C56.9348 327.517 55.9774 331.56 53.6671 334.544C53.4298 334.858 53.1721 335.158 52.8954 335.442H32.0171C31.9696 335.42 31.9219 335.402 31.8742 335.379L31.0406 335.415C31.0741 335.276 31.112 335.132 31.1455 334.993C31.1646 334.912 31.1883 334.832 31.2074 334.751C31.2216 334.697 31.236 334.643 31.2456 334.594C31.2502 334.576 31.2551 334.558 31.2598 334.544C31.2693 334.495 31.2837 334.45 31.2933 334.405C31.5028 333.602 31.7187 332.799 31.941 331.995C31.941 331.991 31.941 331.991 31.9457 331.986C33.5773 325.85 35.9758 319.918 39.0909 314.314C39.1862 314.148 39.2814 313.978 39.3863 313.812C40.8288 311.331 42.484 308.966 44.3356 306.739C45.3536 305.523 46.4363 304.356 47.5795 303.243C50.5394 300.373 53.96 297.959 57.7161 296.09C65.2044 292.365 73.8737 290.938 81.8765 293.213C82.0811 293.272 82.2814 293.33 82.4861 293.393Z" fill="#E6E6E6"/>
<path d="M82.4392 293.642C72.0426 295.588 62.5609 300.57 55.3409 307.881C53.757 309.429 52.4419 311.202 51.4441 313.136C50.5368 315.049 50.1899 317.156 50.4393 319.239C50.6306 321.185 51.0654 323.154 50.7512 325.11C50.5745 326.109 50.1758 327.062 49.581 327.905C48.9863 328.749 48.209 329.464 47.3001 330.005C45.0726 331.408 42.443 331.973 39.851 332.441C36.9732 332.961 33.9752 333.458 31.5734 335.152C31.2824 335.357 30.9614 334.92 31.252 334.715C35.4308 331.768 41.0308 332.387 45.6022 330.307C47.7354 329.336 49.571 327.754 50.0994 325.505C50.5615 323.539 50.115 321.507 49.9033 319.538C49.6283 317.51 49.8846 315.45 50.6497 313.537C51.5398 311.561 52.7802 309.743 54.3177 308.16C57.7189 304.543 61.7025 301.453 66.1226 299.003C71.1508 296.179 76.6546 294.187 82.3959 293.112C82.7512 293.046 82.7922 293.576 82.4392 293.642H82.4392Z" fill="white"/>
<path d="M57.5186 305.398C56.381 304.09 55.7739 302.444 55.8057 300.753C55.8374 299.063 56.506 297.438 57.692 296.169C57.9329 295.913 58.3665 296.254 58.1253 296.51C57.0185 297.69 56.3959 299.203 56.3697 300.778C56.3436 302.352 56.9156 303.883 57.9826 305.095C58.2141 305.359 57.7488 305.66 57.5186 305.398V305.398Z" fill="white"/>
<path d="M50.2044 318.264C53.8519 318.636 57.5141 317.699 60.4609 315.64C60.7526 315.436 61.0737 315.873 60.7822 316.077C57.7115 318.215 53.8983 319.182 50.1036 318.787C49.742 318.75 49.8447 318.227 50.2044 318.264V318.264Z" fill="white"/>
<path d="M71.247 296.878C71.5752 297.471 72.0545 297.977 72.6418 298.352C73.2291 298.727 73.906 298.958 74.6117 299.026C74.9737 299.059 74.8705 299.582 74.5108 299.549C73.7315 299.471 72.9843 299.214 72.3345 298.802C71.6846 298.389 71.152 297.833 70.783 297.181C70.7428 297.123 70.7277 297.052 70.741 296.983C70.7542 296.914 70.7948 296.853 70.8543 296.811C70.916 296.772 70.9918 296.756 71.0653 296.769C71.1388 296.781 71.2041 296.821 71.247 296.878Z" fill="white"/>
<path d="M244.25 307.05C235.575 298.176 231.111 284.89 235.788 273.659C242.68 285.06 253.63 293.796 266.701 298.323C271.748 300.052 277.554 301.479 280.295 305.83C282.002 308.537 282.122 311.925 281.349 314.988C280.576 318.051 278.988 320.868 277.415 323.646L277.405 324.432C265.119 321.03 252.926 315.924 244.25 307.05Z" fill="#E6E6E6"/>
<path d="M236.049 273.719C237.522 283.608 242.265 292.809 249.604 300.014C251.154 301.591 252.959 302.929 254.952 303.977C256.928 304.939 259.142 305.384 261.363 305.268C263.436 305.198 265.548 304.9 267.603 305.307C268.651 305.529 269.638 305.959 270.499 306.566C271.359 307.173 272.073 307.945 272.595 308.83C273.955 311.005 274.405 313.51 274.754 315.974C275.143 318.711 275.5 321.559 277.158 323.914C277.359 324.199 276.878 324.476 276.677 324.191C273.791 320.094 274.764 314.862 272.818 310.444C271.91 308.383 270.338 306.567 267.984 305.942C265.927 305.396 263.748 305.701 261.65 305.789C259.485 305.932 257.316 305.575 255.332 304.747C253.289 303.798 251.432 302.528 249.842 300.992C246.202 297.588 243.152 293.666 240.806 289.37C238.098 284.481 236.299 279.191 235.485 273.73C235.435 273.392 235.999 273.383 236.049 273.719V273.719Z" fill="white"/>
<path d="M247.096 297.825C245.645 298.821 243.866 299.299 242.077 299.173C240.287 299.047 238.603 298.326 237.325 297.139C237.068 296.898 237.453 296.509 237.711 296.751C238.899 297.859 240.468 298.53 242.134 298.644C243.801 298.758 245.456 298.306 246.801 297.371C247.094 297.168 247.386 297.623 247.096 297.825Z" fill="white"/>
<path d="M260.317 305.433C260.917 302.024 260.132 298.526 258.117 295.638C257.917 295.352 258.399 295.074 258.598 295.36C260.689 298.369 261.499 302.011 260.865 305.558C260.805 305.896 260.256 305.769 260.317 305.433Z" fill="white"/>
<path d="M238.845 284.43C239.491 284.155 240.055 283.732 240.485 283.201C240.916 282.67 241.199 282.047 241.311 281.387C241.367 281.048 241.915 281.175 241.86 281.511C241.733 282.24 241.419 282.928 240.944 283.516C240.47 284.104 239.851 284.573 239.139 284.883C239.075 284.918 238.999 284.928 238.927 284.912C238.855 284.895 238.792 284.854 238.751 284.795C238.713 284.735 238.701 284.663 238.718 284.594C238.736 284.526 238.781 284.467 238.845 284.43V284.43Z" fill="white"/>
<path d="M276.985 260.923C276.956 261.136 276.928 261.348 276.903 261.563C276.534 264.42 276.412 267.301 276.538 270.176C276.544 270.399 276.554 270.624 276.566 270.846C276.949 277.77 278.692 284.568 281.709 290.893C282.911 293.409 284.316 295.835 285.909 298.15C288.11 301.347 290.766 304.648 291.69 308.238C291.791 308.612 291.867 308.991 291.918 309.373L278.424 324.382C278.375 324.401 278.33 324.424 278.281 324.444L277.771 325.066C277.68 324.952 277.588 324.832 277.497 324.718C277.444 324.652 277.394 324.583 277.341 324.517C277.306 324.472 277.272 324.427 277.238 324.388C277.227 324.373 277.215 324.358 277.207 324.346C277.174 324.307 277.146 324.268 277.116 324.232C276.601 323.562 276.09 322.888 275.583 322.209C275.579 322.206 275.579 322.206 275.579 322.2C271.663 317.061 268.409 311.502 265.883 305.641C265.81 305.465 265.734 305.287 265.667 305.104C264.59 302.464 263.744 299.745 263.137 296.975C262.81 295.457 262.565 293.925 262.402 292.383C261.991 288.4 262.246 284.381 263.16 280.473C264.983 272.683 269.43 265.528 276.446 261.246C276.625 261.136 276.802 261.03 276.985 260.923Z" fill="#E6E6E6"/>
<path d="M277.157 261.118C272.013 269.85 269.92 279.886 271.175 289.801C271.405 291.94 271.992 294.032 272.913 295.999C273.876 297.888 275.359 299.499 277.207 300.666C278.906 301.786 280.783 302.747 282.164 304.237C282.859 305.009 283.373 305.911 283.671 306.884C283.97 307.857 284.047 308.878 283.898 309.881C283.594 312.389 282.352 314.645 281.057 316.811C279.618 319.215 278.083 321.692 277.902 324.513C277.88 324.855 277.318 324.803 277.34 324.462C277.655 319.553 281.775 315.927 283.045 311.297C283.637 309.136 283.542 306.794 282.062 304.96C280.768 303.357 278.834 302.365 277.103 301.245C275.283 300.132 273.779 298.616 272.724 296.829C271.7 294.913 271.029 292.846 270.74 290.717C270.009 285.935 270.081 281.074 270.953 276.312C271.916 270.873 273.859 265.629 276.7 260.807C276.875 260.508 277.332 260.822 277.157 261.118H277.157Z" fill="white"/>
<path d="M270.572 286.631C268.777 286.604 267.051 285.976 265.703 284.861C264.354 283.745 263.47 282.214 263.209 280.542C263.157 280.203 263.713 280.112 263.765 280.451C264.005 282.009 264.829 283.435 266.087 284.471C267.345 285.507 268.955 286.086 270.626 286.102C270.989 286.106 270.933 286.635 270.572 286.631Z" fill="white"/>
<path d="M276.265 300.205C278.924 297.823 280.532 294.585 280.769 291.136C280.792 290.794 281.354 290.846 281.331 291.187C281.077 294.776 279.396 298.143 276.624 300.616C276.36 300.851 276.002 300.439 276.265 300.205V300.205Z" fill="white"/>
<path d="M272.544 271.256C273.236 271.403 273.956 271.385 274.639 271.205C275.322 271.026 275.947 270.689 276.458 270.225C276.719 269.986 277.076 270.398 276.817 270.635C276.25 271.145 275.559 271.517 274.805 271.717C274.05 271.917 273.256 271.941 272.49 271.785C272.416 271.776 272.349 271.741 272.302 271.687C272.255 271.633 272.231 271.564 272.236 271.495C272.244 271.425 272.28 271.36 272.338 271.316C272.396 271.271 272.47 271.249 272.544 271.256V271.256Z" fill="white"/>
<path d="M159.641 288.47C167.324 288.47 173.552 282.602 173.552 275.364C173.552 268.126 167.324 262.259 159.641 262.259C151.958 262.259 145.73 268.126 145.73 275.364C145.73 282.602 151.958 288.47 159.641 288.47Z" fill="#F2F2F2"/>
<path d="M149.302 162.158C152.16 162.158 154.477 159.975 154.477 157.283C154.477 154.59 152.16 152.408 149.302 152.408C146.444 152.408 144.128 154.59 144.128 157.283C144.128 159.975 146.444 162.158 149.302 162.158Z" fill="#C360FC"/>
<path d="M78.1403 216.568C80.9982 216.568 83.315 214.386 83.315 211.693C83.315 209.001 80.9982 206.818 78.1403 206.818C75.2824 206.818 72.9656 209.001 72.9656 211.693C72.9656 214.386 75.2824 216.568 78.1403 216.568Z" fill="#F0F0F0"/>
<path d="M384.365 0H2.13937C1.57244 0.0014436 1.02918 0.214262 0.628308 0.59193C0.227435 0.969598 0.00155028 1.48141 3.05891e-05 2.0155V13.8762C-0.000115972 14.4115 0.224996 14.925 0.626002 15.3042C1.02701 15.6834 1.5712 15.8974 2.13937 15.8992H384.365C384.933 15.8974 385.478 15.6834 385.879 15.3042C386.28 14.925 386.505 14.4115 386.505 13.8762V2.0155C386.503 1.4814 386.277 0.969586 385.876 0.591919C385.475 0.214251 384.932 0.00144158 384.365 0V0Z" fill="#C360FC"/>
<path d="M12.4266 10.2326C14.1053 10.2326 15.4662 8.9505 15.4662 7.36898C15.4662 5.78745 14.1053 4.50537 12.4266 4.50537C10.7479 4.50537 9.38699 5.78745 9.38699 7.36898C9.38699 8.9505 10.7479 10.2326 12.4266 10.2326Z" fill="white"/>
<path d="M23.964 10.2326C25.6427 10.2326 27.0036 8.9505 27.0036 7.36898C27.0036 5.78745 25.6427 4.50537 23.964 4.50537C22.2853 4.50537 20.9244 5.78745 20.9244 7.36898C20.9244 8.9505 22.2853 10.2326 23.964 10.2326Z" fill="white"/>
<path d="M35.5019 10.2326C37.1806 10.2326 38.5415 8.9505 38.5415 7.36898C38.5415 5.78745 37.1806 4.50537 35.5019 4.50537C33.8232 4.50537 32.4623 5.78745 32.4623 7.36898C32.4623 8.9505 33.8232 10.2326 35.5019 10.2326Z" fill="white"/>
<path d="M373.064 3.54395H359.774C359.514 3.54395 359.264 3.64144 359.08 3.81497C358.896 3.9885 358.792 4.22386 358.792 4.46928C358.792 4.71469 358.896 4.95005 359.08 5.12358C359.264 5.29712 359.514 5.39461 359.774 5.39461H373.064C373.324 5.39461 373.574 5.29712 373.758 5.12358C373.943 4.95005 374.046 4.71469 374.046 4.46928C374.046 4.22386 373.943 3.9885 373.758 3.81497C373.574 3.64144 373.324 3.54395 373.064 3.54395V3.54395Z" fill="white"/>
<path d="M373.064 7.02051H359.774C359.514 7.02051 359.264 7.118 359.08 7.29153C358.896 7.46507 358.792 7.70043 358.792 7.94584C358.792 8.19125 358.896 8.42662 359.08 8.60016C359.264 8.77369 359.514 8.87117 359.774 8.87117H373.064C373.324 8.87117 373.574 8.77369 373.758 8.60016C373.943 8.42662 374.046 8.19125 374.046 7.94584C374.046 7.70043 373.943 7.46507 373.758 7.29153C373.574 7.118 373.324 7.02051 373.064 7.02051V7.02051Z" fill="white"/>
<path d="M373.064 10.4971H359.774C359.513 10.4971 359.262 10.5949 359.077 10.7692C358.892 10.9434 358.788 11.1797 358.788 11.4261C358.788 11.6725 358.892 11.9089 359.077 12.0831C359.262 12.2573 359.513 12.3552 359.774 12.3552H373.064C373.325 12.3552 373.576 12.2573 373.761 12.0831C373.946 11.9089 374.05 11.6725 374.05 11.4261C374.05 11.1797 373.946 10.9434 373.761 10.7692C373.576 10.5949 373.325 10.4971 373.064 10.4971V10.4971Z" fill="white"/>
<path d="M14.2948 103.419C13.191 103.422 12.2979 104.772 12.3001 106.435C12.3022 108.093 13.1941 109.436 14.2948 109.44H164.198C165.302 109.436 166.195 108.086 166.193 106.423C166.191 104.765 165.299 103.422 164.198 103.419H14.2948Z" fill="#E6E6E6"/>
<path d="M14.2948 120.863C13.191 120.866 12.2979 122.217 12.3001 123.879C12.3022 125.537 13.1941 126.881 14.2948 126.884H164.198C165.302 126.881 166.195 125.53 166.193 123.867C166.191 122.21 165.299 120.866 164.198 120.863H14.2948Z" fill="#E6E6E6"/>
<path d="M14.2948 138.096C13.191 138.1 12.2979 139.45 12.3001 141.113C12.3022 142.771 13.1941 144.114 14.2948 144.117H110.514C111.618 144.114 112.511 142.763 112.509 141.101C112.507 139.443 111.615 138.1 110.514 138.096H14.2948Z" fill="#E6E6E6"/>
<path d="M3.5097 330.699C3.56008 330.59 3.61758 330.487 3.66981 330.38C3.76213 329.482 3.5097 330.699 3.5097 330.699Z" fill="#F2F2F2"/>
<path d="M30.7431 317.13C28.8447 317.129 26.9488 317.258 25.0703 317.516L24.7993 317.553C18.788 318.461 13.3352 321.404 9.46508 325.832C5.59491 330.259 3.57367 335.865 3.78102 341.597L3.85286 343.753C3.90024 345.116 3.95068 346.582 3.99227 348.208C3.99724 348.586 4.16053 348.947 4.44662 349.213C4.73271 349.478 5.11846 349.626 5.51998 349.625H309.391C330.816 349.413 352.162 349.146 372.835 348.831C376.728 348.843 380.614 348.515 384.442 347.85C390.187 346.741 394.175 344.542 396.634 341.128H396.635C399.692 336.894 399.789 331.563 399.604 325.54C399.227 313.378 398.854 300.601 398.481 287.863C398.151 276.636 397.824 265.44 397.496 254.721C397.293 248.359 396.843 242.744 393.37 238.453C389.606 233.812 382.742 231.459 372.968 231.459C372.85 231.459 372.733 231.459 372.613 231.46C341.981 231.638 311.63 248.821 297.088 274.218C295.414 277.143 293.853 280.274 292.344 283.302C290.196 287.846 287.763 292.265 285.058 296.537C283.648 298.706 282.037 300.755 280.245 302.658C280.127 302.791 279.992 302.933 279.849 303.069C279.522 303.416 279.18 303.751 278.847 304.05C277.011 305.803 274.949 307.332 272.709 308.603L272.494 308.72C272.332 308.815 272.157 308.909 271.981 308.996C270.763 309.635 269.496 310.187 268.19 310.648C262.647 312.642 256.344 313.119 249.457 312.067C242.922 311.006 236.625 308.913 230.83 305.875C224.453 302.587 218.483 298.487 212.71 294.523C210.175 292.78 207.552 290.98 204.932 289.273C204.44 288.952 203.956 288.638 203.464 288.324C200.265 286.29 197.364 284.61 194.597 283.189C188.077 279.752 180.892 277.581 173.467 276.804C165.849 276.123 159.135 277.407 153.518 280.609C151.911 281.53 150.4 282.592 149.005 283.781C142.351 289.418 138.249 297.738 134.283 305.783C129.349 315.791 124.246 326.14 114.171 331.505C102.546 337.701 85.5765 335.127 73.5707 330.65C69.7961 329.242 66.0261 327.623 62.38 326.056C60.9075 325.424 59.4349 324.791 57.9592 324.171C55.0615 322.95 52.6899 322.015 50.4958 321.226L49.8019 320.974C49.4159 320.837 49.0295 320.7 48.6361 320.57C46.2051 319.728 43.7272 319.011 41.2135 318.423L40.6481 318.288C39.5145 318.044 38.4547 317.842 37.4148 317.671L36.9996 317.604C34.9312 317.286 32.8388 317.128 30.7431 317.13V317.13Z" fill="#E6E6E6"/>
<path d="M201.023 317.484C195.966 299.565 207.196 282.1 220.319 270.009C227.313 263.565 235.102 257.964 242.697 252.178C249.985 246.687 256.925 240.798 263.482 234.543C276.144 222.333 287.189 208.38 294.504 192.696C301.459 177.781 304.747 161.534 303.118 145.26C301.574 129.826 295.701 114.643 284.899 102.802C283.553 101.326 282.137 99.9117 280.651 98.5586C279.854 97.8296 278.633 98.9775 279.431 99.7076C291.494 110.742 298.515 125.696 300.891 141.254C303.342 157.298 300.817 173.654 294.449 188.653C287.665 204.632 276.878 218.89 264.368 231.333C258.067 237.559 251.365 243.413 244.299 248.861C236.754 254.717 228.913 260.25 221.727 266.508C208.485 278.041 196.583 293.906 198.218 311.765C198.408 313.843 198.79 315.901 199.36 317.916C199.427 318.117 199.574 318.286 199.77 318.387C199.967 318.488 200.197 318.513 200.413 318.457C200.629 318.401 200.813 318.268 200.927 318.086C201.04 317.905 201.075 317.689 201.023 317.484V317.484Z" fill="#E6E6E6"/>
<path d="M253.982 215.471C254.089 215.656 254.115 215.873 254.055 216.076C253.995 216.279 253.854 216.453 253.661 216.559C253.468 216.666 253.239 216.699 253.021 216.649C252.804 216.6 252.615 216.473 252.495 216.295C250.515 213.096 248.646 209.842 246.888 206.532C245.703 204.285 244.566 202.007 243.5 199.707C231.537 174.157 226.414 146.232 228.58 118.382C229.169 110.764 230.336 103.194 232.071 95.7324C232.429 94.2189 232.811 92.7054 233.233 91.2069C233.869 91.1095 234.489 90.9821 235.102 90.8323C231.364 103.6 229.86 117.064 229.813 130.236C229.758 145.135 231.793 159.977 235.865 174.374C239.919 188.777 246.013 202.6 253.982 215.471V215.471Z" fill="#E6E6E6"/>
<path d="M367.266 171.415C360.8 184.519 349.936 195.279 337.752 203.85C323.938 213.568 308.294 220.581 292.793 227.542C291.799 227.991 290.924 226.59 291.926 226.14C295.625 224.477 299.323 222.814 302.997 221.12C317.694 214.325 332.265 206.847 344.568 196.552C355.949 187.029 365.222 175.169 369.453 161.255C373.867 146.772 373.032 131.112 368.284 116.802C365.338 108.111 361.111 99.8535 355.726 92.2709C353.945 89.7309 352.06 87.2609 350.072 84.8608C348.624 83.115 347.129 81.4042 345.586 79.7283C340.543 74.2797 335.061 69.207 329.187 64.5559C323.077 59.5898 316.314 55.3844 309.065 52.0434C301.619 48.6307 293.477 46.7751 285.198 46.6038C277.375 46.502 269.671 48.4195 262.921 52.1483C258.307 54.7378 254.161 58.0058 250.642 61.8286C250.411 61.2816 250.157 60.7422 249.87 60.2177C255.947 53.8865 263.526 48.9114 272.346 46.5513C288.642 42.1906 305.844 47.308 319.595 55.7746C326.305 59.9925 332.571 64.8046 338.309 70.1454C340.448 72.1009 342.532 74.1164 344.536 76.1919C346.954 78.6794 349.263 81.2543 351.463 83.9167C351.463 83.9167 351.479 83.9242 351.479 83.9317C352.219 84.8233 352.945 85.7274 353.658 86.644C362.956 98.5572 369.899 112.231 372.666 126.849C375.498 141.797 374.098 157.561 367.266 171.415Z" fill="#E6E6E6"/>
<path d="M356.339 155.71C349.881 168.815 339.017 179.574 326.825 188.146C313.615 197.429 298.734 204.255 283.91 210.916C283.234 211.223 282.55 211.522 281.874 211.83C281.765 211.882 281.645 211.912 281.523 211.917C281.401 211.922 281.279 211.903 281.166 211.86C281.009 211.817 280.868 211.731 280.763 211.613C280.657 211.495 280.591 211.35 280.574 211.197C280.556 211.043 280.587 210.889 280.662 210.752C280.738 210.615 280.855 210.503 280.999 210.429C281.571 210.166 282.152 209.912 282.725 209.657C283.711 209.207 284.689 208.765 285.675 208.323C287.815 207.364 289.949 206.393 292.078 205.409C306.767 198.62 321.345 191.135 333.64 180.84C345.029 171.317 354.303 159.457 358.534 145.543C362.94 131.06 362.105 115.408 357.357 101.097C355.477 95.4809 353.037 90.0446 350.072 84.8608C348.378 81.8937 346.524 78.9941 344.536 76.1919C341.526 71.9369 338.226 67.87 334.658 64.0164C329.621 58.5684 324.14 53.4981 318.267 48.8515C312.155 43.8844 305.39 39.679 298.138 36.3389C290.695 32.924 282.555 31.0658 274.279 30.8918C266.453 30.7901 258.746 32.7075 251.994 36.4363C246.085 39.782 240.94 44.2008 236.859 49.4359C231.987 55.7229 228.239 62.7184 225.765 70.1454C223.556 76.6278 221.907 83.2679 220.834 90.0006C219.54 98.1183 218.889 106.315 218.885 114.524C218.834 129.426 220.869 144.269 224.937 158.67C228.997 173.071 235.09 186.894 243.055 199.767C243.076 199.8 243.095 199.835 243.11 199.872C243.184 200.06 243.18 200.268 243.1 200.455C243.021 200.641 242.871 200.793 242.679 200.882C242.487 200.97 242.268 200.989 242.062 200.934C241.857 200.879 241.681 200.754 241.567 200.583C239.587 197.392 237.721 194.137 235.968 190.821C221.609 163.508 215.284 133.068 217.652 102.671C218.002 98.2201 218.546 93.7845 219.283 89.3638C219.8 86.2319 220.423 83.1175 221.152 80.0206C222.839 72.4139 225.524 65.0345 229.145 58.0524C230.85 54.8583 232.843 51.8077 235.102 48.9339C241.695 40.5348 250.634 33.7315 261.426 30.8469C277.722 26.4787 294.917 31.5961 308.676 40.0627C315.382 44.2844 321.648 49.0962 327.389 54.4335C332.98 59.5229 338.111 65.0415 342.731 70.9321C345.961 75.0619 348.879 79.4008 351.463 83.9167C351.463 83.9167 351.479 83.9242 351.479 83.9317C353.03 86.6515 354.454 89.4312 355.726 92.2709C358.474 98.3275 360.491 104.656 361.739 111.137C364.578 126.092 363.178 141.849 356.339 155.71Z" fill="#E6E6E6"/>
<path d="M303.143 161.362C310.751 161.317 318.107 158.788 323.956 154.205C329.911 149.487 333.83 142.881 334.976 135.631C335.649 131.533 335.432 127.348 334.339 123.33C334.272 123.129 334.125 122.96 333.928 122.86C333.732 122.759 333.501 122.734 333.286 122.79C333.07 122.846 332.886 122.978 332.772 123.16C332.658 123.341 332.623 123.557 332.675 123.762C334.519 130.584 333.687 137.803 330.333 144.093C327.756 148.796 323.857 152.742 319.063 155.501C314.268 158.26 308.762 159.725 303.143 159.737C302.92 159.744 302.708 159.833 302.553 159.985C302.397 160.136 302.31 160.339 302.31 160.55C302.31 160.76 302.397 160.963 302.553 161.115C302.708 161.266 302.92 161.355 303.143 161.362V161.362Z" fill="#E6E6E6"/>
<path d="M238.372 253.725L232.82 244.518C232.7 244.34 232.512 244.212 232.295 244.162C232.077 244.112 231.848 244.144 231.655 244.25C231.461 244.356 231.32 244.529 231.259 244.732C231.199 244.935 231.224 245.152 231.331 245.338L236.883 254.545C237.002 254.723 237.191 254.851 237.408 254.901C237.625 254.951 237.855 254.919 238.048 254.813C238.241 254.706 238.383 254.534 238.443 254.331C238.504 254.128 238.478 253.91 238.372 253.725V253.725Z" fill="#E6E6E6"/>
<path d="M205.957 65.9012C204.296 64.7963 202.478 63.6443 200.445 63.6903C195.525 63.8018 192.872 70.5972 187.956 70.3582C184.822 70.2058 182.741 67.2059 179.822 66.1181C176.022 64.702 171.187 67.4715 170.772 71.3014L171.26 70.8806C186.031 74.273 201.359 74.9401 216.399 72.8452C212.918 70.5305 209.438 68.2158 205.957 65.9012Z" fill="#E6E6E6"/>
<path d="M185.623 342.328C188.367 342.328 190.591 340.233 190.591 337.648C190.591 335.063 188.367 332.967 185.623 332.967C182.879 332.967 180.655 335.063 180.655 337.648C180.655 340.233 182.879 342.328 185.623 342.328Z" fill="white"/>
<path d="M200.031 342.328C202.774 342.328 204.999 340.233 204.999 337.648C204.999 335.063 202.774 332.967 200.031 332.967C197.287 332.967 195.062 335.063 195.062 337.648C195.062 340.233 197.287 342.328 200.031 342.328Z" fill="white"/>
<path d="M214.438 342.328C217.182 342.328 219.406 340.233 219.406 337.648C219.406 335.063 217.182 332.967 214.438 332.967C211.694 332.967 209.47 335.063 209.47 337.648C209.47 340.233 211.694 342.328 214.438 342.328Z" fill="white"/>
<path d="M200.076 341.392C202.271 341.392 204.051 339.716 204.051 337.648C204.051 335.58 202.271 333.903 200.076 333.903C197.881 333.903 196.102 335.58 196.102 337.648C196.102 339.716 197.881 341.392 200.076 341.392Z" fill="#3F3D56"/>
<path d="M433.383 339.291H427.938L425.347 319.502H433.383V339.291Z" fill="#FFB6B6"/>
<path d="M436.258 348.179H432.353L431.656 344.706L429.87 348.179H419.513C419.016 348.179 418.533 348.03 418.133 347.753C417.733 347.475 417.438 347.085 417.29 346.639C417.142 346.192 417.15 345.713 417.312 345.271C417.474 344.828 417.781 344.447 418.19 344.181L426.461 338.799V335.288L435.161 335.777L436.258 348.179Z" fill="#2F2E41"/>
<path d="M402.084 334.904L396.957 336.633L387.437 318.826L395.004 316.274L402.084 334.904Z" fill="#FFB6B6"/>
<path d="M408.67 339.932L405.297 341.786L402.837 339.116L403.152 342.964L394.206 347.881C393.777 348.117 393.279 348.217 392.786 348.167C392.292 348.118 391.828 347.921 391.462 347.605C391.095 347.29 390.845 346.872 390.749 346.413C390.652 345.955 390.714 345.479 390.924 345.055L395.19 336.48L393.312 333.447L401.089 329.74L408.67 339.932Z" fill="#2F2E41"/>
<path d="M434.414 327.2H434.349L433.191 291.639C433.94 290.277 434.32 288.763 434.298 287.23C434.275 285.697 433.851 284.193 433.062 282.851L432.896 282.569L433.326 280.692C433.878 278.281 433.624 275.769 432.601 273.499L431.521 240.327C435.379 216.772 417.295 198.328 417.295 198.328H388.36L383.538 220.55L368.099 276.151C367.415 277.131 366.989 278.251 366.857 279.417C366.725 280.584 366.891 281.763 367.342 282.856L389.268 323.722L389.099 323.803C388.778 323.971 388.538 324.25 388.43 324.58C388.321 324.911 388.352 325.268 388.515 325.578C388.802 326.36 389.528 326.834 390.137 326.636L398.684 322.563C399.005 322.394 399.244 322.116 399.353 321.786C399.461 321.455 399.431 321.098 399.267 320.788C398.981 320.006 398.255 319.532 397.646 319.73L396.657 320.201L390.041 289.482L389.807 283.214L390.289 276.103L404.515 245.66L412.955 284.992L425.392 327.596C425.154 327.799 424.987 328.065 424.913 328.359C424.839 328.653 424.862 328.961 424.977 329.243C425.093 329.525 425.297 329.767 425.562 329.937C425.827 330.107 426.14 330.198 426.461 330.197H434.414C434.836 330.197 435.241 330.039 435.539 329.758C435.837 329.477 436.005 329.096 436.005 328.699C436.005 328.301 435.837 327.92 435.539 327.639C435.241 327.358 434.836 327.2 434.414 327.2Z" fill="#2F2E41"/>
<path d="M420.528 182.594L419.757 190.716C419.757 190.716 419.423 197.459 418.365 198.95C417.315 200.434 388.668 200.621 388.668 200.621C388.668 200.621 386.775 191.008 385.145 182.594H420.528Z" fill="#FFB6B6"/>
<path d="M406.183 131.988C414.312 131.988 420.902 125.78 420.902 118.121C420.902 110.463 414.312 104.254 406.183 104.254C398.053 104.254 391.463 110.463 391.463 118.121C391.463 125.78 398.053 131.988 406.183 131.988Z" fill="#FFB6B6"/>
<path d="M413.736 134.641L401.922 135.951C401.424 136.006 400.957 136.206 400.585 136.524C400.213 136.841 399.956 137.26 399.849 137.721L397.97 145.821L386.259 158.814C386.259 158.814 382.053 166.243 383.63 174.662C385.207 183.081 385.9 189.337 385.9 189.337C385.9 189.337 417.316 200.434 418.368 198.948C419.419 197.463 419.76 190.714 419.76 190.714L423.966 146.637C423.966 146.637 419.235 139.208 416.606 139.208C414.91 139.154 415.127 135.557 413.736 134.641Z" fill="#C360FC"/>
<path opacity="0.2" d="M408.52 163.121L403.263 199.769L397.75 200.039L408.52 163.121Z" fill="black"/>
<path d="M385.581 192.047C387.238 192.047 388.58 190.529 388.58 188.656C388.58 186.783 387.238 185.265 385.581 185.265C383.924 185.265 382.581 186.783 382.581 188.656C382.581 190.529 383.924 192.047 385.581 192.047Z" fill="#C360FC"/>
<path d="M406.132 233.943C406.758 233.357 407.239 232.649 407.542 231.868C407.845 231.088 407.963 230.255 407.888 229.427C407.812 228.599 407.545 227.797 407.105 227.077C406.665 226.357 406.062 225.737 405.34 225.26L415.188 180.36L404.563 183.518L396.64 226.955C395.87 228.151 395.593 229.571 395.86 230.947C396.128 232.323 396.922 233.559 398.092 234.421C399.262 235.282 400.726 235.709 402.208 235.621C403.69 235.533 405.087 234.936 406.132 233.943V233.943Z" fill="#FFB6B6"/>
<path d="M413.965 140.415C413.965 140.415 421.044 137.528 425.342 144.796C429.641 152.065 423.438 177.328 422.567 181.428C421.697 185.528 409.759 205.071 409.759 205.071L397.83 202.824L413.965 140.415Z" fill="#C360FC"/>
<path d="M399.488 104.865C404.592 101.558 409.086 101.054 412.778 101.992C413.257 101.295 413.928 100.733 414.72 100.368C417.599 93.5328 426.362 89.4279 433.882 91.4234C441.451 93.4318 446.673 101.33 445.249 108.616C444.367 113.132 441.35 117.042 440.136 121.49C437.787 130.099 443.517 139.96 452.481 142.736C443.994 144.341 434.652 139.457 431.607 131.823C430.128 128.115 430.039 124.067 429.851 120.109C429.663 116.152 429.325 112.076 427.421 108.544C426.145 106.122 424.026 104.185 421.417 103.056C421.651 103.737 421.709 104.46 421.588 105.167C421.466 105.873 421.168 106.542 420.718 107.118C422.708 109.467 423.792 112.007 423.792 113.528C427.926 120.648 422.014 126.763 414.457 130.658C411.443 132.22 407.962 132.791 404.565 132.283L404.249 131.011L403.82 132.156L402.39 135.996C400.741 136.748 399.105 137.572 397.484 138.468C398.1 135.744 398.598 133.024 398.941 130.365C399.416 126.746 397.761 121.358 396.568 118.082C395.828 116.062 395.448 113.942 395.444 111.805V111.712L394.282 115.229L390.051 113.528C390.838 109.275 390.051 104.446 399.488 104.865Z" fill="#2F2E41"/>
<path d="M487 349.108C486.999 349.345 486.9 349.571 486.722 349.738C486.545 349.905 486.304 349.999 486.054 350H306.878C306.627 350 306.387 349.906 306.209 349.739C306.032 349.572 305.932 349.345 305.932 349.108C305.932 348.872 306.032 348.645 306.209 348.478C306.387 348.311 306.627 348.217 306.878 348.217H486.054C486.178 348.216 486.301 348.239 486.416 348.284C486.531 348.329 486.636 348.394 486.724 348.477C486.812 348.56 486.881 348.658 486.929 348.767C486.976 348.875 487 348.991 487 349.108V349.108Z" fill="#CCCCCC"/>
</svg>

'''
'''--- frontend/assets/img/img4.svg ---
<svg width="549" height="413" viewBox="0 0 549 413" fill="none" xmlns="http://www.w3.org/2000/svg">
<path opacity="0.4" d="M463.352 158.782C470.617 158.782 476.506 152.888 476.506 145.616C476.506 138.344 470.617 132.449 463.352 132.449C456.087 132.449 450.197 138.344 450.197 145.616C450.197 152.888 456.087 158.782 463.352 158.782Z" fill="#C360FC"/>
<path opacity="0.4" d="M185.995 86.3445C196.352 86.3445 204.748 77.9412 204.748 67.5751C204.748 57.209 196.352 48.8057 185.995 48.8057C175.639 48.8057 167.243 57.209 167.243 67.5751C167.243 77.9412 175.639 86.3445 185.995 86.3445Z" fill="#C360FC"/>
<path opacity="0.4" d="M151.289 89.7063C158.554 89.7063 164.444 83.8114 164.444 76.5397C164.444 69.2679 158.554 63.373 151.289 63.373C144.024 63.373 138.134 69.2679 138.134 76.5397C138.134 83.8114 144.024 89.7063 151.289 89.7063Z" fill="#C360FC"/>
<path d="M474.369 292.852C463.975 304.242 463.598 320.834 463.598 320.834C463.598 320.834 480.072 318.959 490.467 307.569C500.861 296.179 501.238 279.587 501.238 279.587C501.238 279.587 484.763 281.462 474.369 292.852Z" fill="#3F3D56"/>
<path d="M480.241 296.13C477.095 311.231 463.874 321.247 463.874 321.247C463.874 321.247 455.753 306.778 458.898 291.677C462.043 276.575 475.264 266.56 475.264 266.56C475.264 266.56 483.386 281.029 480.241 296.13Z" fill="#C360FC"/>
<path d="M466.741 140.303V320.326L406.787 369.898H100.068V181.178L189.564 140.303H466.741Z" fill="#3F3D56"/>
<path opacity="0.1" d="M466.741 140.303V141.025L445.218 155.444L406.787 181.178H100.068L189.564 140.303H466.741Z" fill="black"/>
<path opacity="0.1" d="M466.741 140.303V320.326L406.787 369.898L407.222 180.743L445.218 155.444L466.394 140.303H466.741Z" fill="black"/>
<path d="M385.934 165.089H199.122L213.024 157.262H392.016L385.934 165.089Z" fill="#2F2E41"/>
<path d="M547.166 379.69C547.166 379.69 550.788 394.849 547.495 395.508C544.203 396.167 528.07 395.954 524.119 396.613C520.169 397.272 511.938 396.167 511.938 393.201C511.938 390.235 520.498 388.258 520.498 388.258C520.498 388.258 532.68 381.667 533.009 381.338C533.338 381.008 547.166 379.69 547.166 379.69Z" fill="#2F2E41"/>
<path d="M544.203 290.387C544.203 290.387 543.215 301.591 543.215 302.579C543.215 303.568 544.203 319.056 543.215 319.715C542.227 320.374 543.874 324.988 543.874 326.635C543.874 328.283 549.141 355.634 547.824 366.179C546.507 376.724 549.8 375.736 548.812 376.724C547.824 377.713 547.824 377.713 547.824 379.69C547.824 381.667 537.289 383.315 537.289 383.315L525.766 310.488L531.692 288.739L544.203 290.387Z" fill="#575A89"/>
<path opacity="0.1" d="M544.203 290.387C544.203 290.387 543.215 301.591 543.215 302.579C543.215 303.568 544.203 319.056 543.215 319.715C542.227 320.374 543.874 324.988 543.874 326.635C543.874 328.283 549.141 355.634 547.824 366.179C546.507 376.724 549.8 375.736 548.812 376.724C547.824 377.713 547.824 377.713 547.824 379.69C547.824 381.667 537.289 383.315 537.289 383.315L525.766 310.488L531.692 288.739L544.203 290.387Z" fill="black"/>
<path d="M542.557 384.304C542.557 384.304 545.849 396.167 542.557 396.826C539.264 397.485 523.132 396.071 519.181 396.73C515.23 397.389 506.999 397.485 506.999 394.519C506.999 391.553 515.559 389.576 515.559 389.576C515.559 389.576 527.741 382.985 528.07 382.656C528.399 382.326 542.557 384.304 542.557 384.304Z" fill="#2F2E41"/>
<path d="M547.166 277.206C547.166 277.206 551.117 286.762 546.507 291.705C541.898 296.648 536.63 306.534 536.63 307.193C536.63 307.852 545.849 373.429 544.532 377.713C543.215 381.997 543.544 384.633 543.874 385.292C544.203 385.951 540.581 389.576 536.63 389.576C532.68 389.576 526.753 386.61 526.095 383.974C525.436 381.338 527.083 358.6 526.753 354.316C526.424 350.032 524.778 343.771 524.119 342.453C523.461 341.135 519.839 339.817 519.181 335.862C518.522 331.908 513.255 281.489 514.901 279.842C516.547 278.194 547.166 277.206 547.166 277.206Z" fill="#575A89"/>
<path d="M522.144 201.413C528.326 201.413 533.338 196.397 533.338 190.209C533.338 184.021 528.326 179.005 522.144 179.005C515.962 179.005 510.95 184.021 510.95 190.209C510.95 196.397 515.962 201.413 522.144 201.413Z" fill="#FFB9B9"/>
<path d="M529.058 195.811C529.058 195.811 526.753 208.004 528.399 209.322C530.046 210.64 515.889 212.617 515.889 212.617C515.889 212.617 514.242 196.47 513.913 194.822C513.584 193.175 529.058 195.811 529.058 195.811Z" fill="#FFB9B9"/>
<path d="M513.913 211.629C513.913 211.629 517.864 200.095 533.997 203.39C533.997 203.39 536.96 204.379 535.972 205.367C534.984 206.356 533.997 206.356 535.313 207.345C536.63 208.333 538.277 207.345 537.289 208.333C536.301 209.322 546.178 215.253 545.52 226.458C544.861 237.662 547.824 253.479 545.52 256.115C543.215 258.752 547.166 270.285 546.507 272.592C545.849 274.899 550.458 277.865 548.483 278.853C546.507 279.842 510.95 285.773 509.962 278.853C508.975 271.933 509.633 276.876 508.645 275.228C507.658 273.581 507.328 270.615 507.987 266.99C508.645 263.365 510.292 254.468 509.633 251.172C508.975 247.877 509.633 220.196 511.609 216.901C513.584 213.606 513.913 211.629 513.913 211.629Z" fill="#C360FC"/>
<path d="M520.827 292.034C520.827 292.034 525.766 310.818 519.51 310.818C513.255 310.818 513.584 291.375 513.584 291.375L520.827 292.034Z" fill="#FFB9B9"/>
<path d="M517.206 190.209C517.206 191.165 518.588 191.771 520.732 191.909H520.735C521.644 191.961 522.555 191.943 523.461 191.857C524.831 191.731 525.397 193.02 525.631 194.72C526.013 197.525 525.479 201.456 526.095 202.072C526.944 202.922 533.137 202.069 535.073 200.141C535.374 199.871 535.575 199.506 535.643 199.106C535.846 197.929 536.426 196.85 537.296 196.032C538.438 194.783 540.064 193.399 541.898 191.198C545.191 187.243 541.898 186.914 540.911 183.948C539.923 180.982 538.277 179.993 538.277 178.016C538.277 176.039 530.704 174.391 524.449 174.721C518.193 175.05 519.51 182.959 519.51 182.959C519.51 182.959 519.138 183.915 518.694 185.147C518.092 186.694 517.604 188.282 517.232 189.899C517.216 190.002 517.208 190.105 517.206 190.209Z" fill="#2F2E41"/>
<path opacity="0.1" d="M518.522 216.571C518.522 216.571 529.716 215.912 530.704 232.389C531.692 248.866 531.363 264.354 531.363 264.683C531.363 265.013 526.753 296.318 522.473 296.318C518.193 296.318 514.901 295.659 513.913 294.012C512.925 292.364 516.547 268.638 516.547 268.638C516.547 268.638 518.193 243.593 515.559 235.684C512.925 227.776 512.596 217.56 518.522 216.571Z" fill="black"/>
<path d="M516.876 214.924C516.876 214.924 528.07 214.265 529.058 230.741C530.046 247.218 529.716 262.706 529.716 263.036C529.716 263.365 525.107 294.671 520.827 294.671C516.547 294.671 513.255 294.012 512.267 292.364C511.279 290.716 514.901 266.99 514.901 266.99C514.901 266.99 516.547 241.945 513.913 234.037C511.279 226.128 510.95 215.912 516.876 214.924Z" fill="#C360FC"/>
<path d="M331.255 53.8441C331.255 53.8441 326.377 40.0094 322.853 44.3497C319.33 48.69 328.274 56.0142 328.274 56.0142L331.255 53.8441Z" fill="#A0616A"/>
<path d="M354.292 40.2808L351.357 41.3694C351.357 41.3694 349.956 47.605 350.498 48.69C351.04 49.7751 351.311 48.9613 350.498 51.1315C349.685 53.3016 347.246 58.9982 346.974 59.812C346.703 60.6258 331.255 54.6579 331.255 51.674C331.255 51.674 328.003 55.4717 326.377 56.2855C326.377 56.2855 344.264 69.3063 346.703 70.934C349.143 72.5616 350.498 71.7478 352.666 69.8489C354.834 67.95 364.049 52.2165 364.049 52.2165L354.292 40.2808Z" fill="#575A89"/>
<path d="M346.432 136.581C346.432 136.581 346.703 139.565 347.246 139.836C347.788 140.107 351.853 146.889 347.246 148.245C342.638 149.601 339.928 149.059 338.844 149.602C337.76 150.144 318.788 151.229 318.517 148.245C318.246 145.261 327.732 144.719 327.732 144.719C327.732 144.719 336.405 139.022 337.76 136.038C339.115 133.054 346.432 136.581 346.432 136.581Z" fill="#2F2E41"/>
<path d="M401.45 142.006C401.45 142.006 407.955 153.128 406.328 154.484C404.702 155.84 388.866 160.783 386.544 160.995C383.563 161.266 381.394 158.824 383.834 157.468C386.273 156.112 391.422 150.415 391.422 148.516V143.633L401.45 142.006Z" fill="#2F2E41"/>
<path d="M407.684 69.3064C407.684 69.3064 413.375 76.3594 404.431 87.7526L389.525 106.741C389.525 106.741 398.74 121.39 399.011 128.985C399.282 136.581 401.179 134.953 401.721 138.208C402.263 141.463 404.702 139.836 402.805 142.277C400.908 144.719 393.861 146.889 391.693 144.99C390.947 144.307 390.365 143.465 389.99 142.525C389.614 141.586 389.455 140.574 389.525 139.565C389.525 138.48 385.731 132.24 385.46 130.342C385.189 128.443 375.161 112.98 375.161 112.98C375.161 112.98 371.909 103.757 375.703 98.6032C379.497 93.4492 382.005 86.1392 382.005 86.1392C382.005 86.1392 370.825 99.6883 362.965 102.944C362.965 102.944 359.984 103.486 360.526 104.842C361.068 106.199 360.526 107.013 359.713 108.369C358.9 109.725 353.208 125.459 351.311 129.528C349.414 133.597 350.227 136.038 348.059 137.394C345.89 138.751 336.134 137.666 336.134 136.309C336.134 134.953 337.489 131.427 338.302 129.528C339.115 127.629 345.619 105.656 345.077 101.858C344.535 98.0607 345.348 92.9067 349.414 90.7365C353.479 88.5664 374.077 70.934 375.161 70.934C376.245 70.934 407.684 69.3064 407.684 69.3064Z" fill="#2F2E41"/>
<path d="M353.208 26.7174C359.495 26.7174 364.591 21.6164 364.591 15.3241C364.591 9.03183 359.495 3.93091 353.208 3.93091C346.921 3.93091 341.825 9.03183 341.825 15.3241C341.825 21.6164 346.921 26.7174 353.208 26.7174Z" fill="#A0616A"/>
<path d="M362.423 16.4092C362.423 16.4092 365.946 22.6483 370.282 23.4622C374.619 24.276 358.899 36.7542 358.899 36.7542C358.899 36.7542 355.105 24.8185 351.853 24.276C348.601 23.7334 362.423 16.4092 362.423 16.4092Z" fill="#A0616A"/>
<path d="M351.311 41.9083C351.311 45.4348 361.881 55.4717 361.881 55.4717L371.909 63.8809C371.909 63.8809 372.18 66.8649 373.264 67.1361C374.348 67.4074 375.703 67.4074 374.619 69.035C373.535 70.6626 370.824 74.1891 373.264 74.7316C373.999 74.8436 374.74 74.9142 375.483 74.9432C376.134 74.9812 376.898 75.0164 377.757 75.049C379.763 75.1195 382.272 75.1656 384.991 75.1467C385.763 75.1439 386.549 75.1349 387.349 75.1195C397.596 74.9161 409.467 73.7361 408.497 69.8488C406.87 63.3384 407.955 61.1683 404.431 57.6418C400.908 54.1153 395.216 41.9083 395.216 41.9083C395.216 41.9083 383.834 22.6483 374.348 22.6483L372.377 22.1302C371.462 21.8888 370.494 21.9418 369.61 22.2816C368.726 22.6214 367.972 23.2308 367.453 24.0237C365.55 26.9235 362.55 31.2801 360.797 32.6852C358.086 34.8553 357.664 33.2983 357.664 33.2983C357.664 33.2983 351.311 38.3818 351.311 41.9083Z" fill="#575A89"/>
<path d="M375.432 83.1411C375.432 83.1411 367.572 95.3481 372.451 97.5183C377.329 99.6884 380.039 84.7687 380.039 84.7687L375.432 83.1411Z" fill="#A0616A"/>
<path d="M360.65 14.0373C360.213 13.9821 360.074 13.4304 360.001 12.9958C359.607 10.6688 357.875 8.46222 355.547 8.08657C354.657 7.96809 353.752 8.04107 352.893 8.30064C351.662 8.63876 350.506 9.20808 349.487 9.97829C348.989 10.4343 348.413 10.7966 347.786 11.0478C347.359 11.1734 345.545 11.9804 345.121 12.1169C344.19 12.4171 343.419 13.3932 342.459 13.1999C341.541 13.015 341.193 11.9055 341.045 10.98C340.709 8.87152 341.915 5.72544 343.113 3.95932C344.023 2.61908 345.563 1.84776 347.102 1.34596C348.905 0.798084 350.758 0.429584 352.634 0.245806C355.166 -0.0534855 357.788 -0.212276 360.214 0.571053C362.641 1.35438 364.85 3.27058 365.303 5.78179C365.397 6.3049 365.415 6.8407 365.531 7.35951C365.813 8.62515 366.65 9.68899 367.138 10.8902C367.49 11.7724 367.653 12.7187 367.617 13.668C367.582 14.6173 367.348 15.5486 366.93 16.4018C366.255 17.7621 365.079 19.0693 365.333 20.5671L363.241 18.9165C362.939 18.7446 362.705 18.4742 362.578 18.1503C362.451 17.8265 362.439 17.4688 362.543 17.137L362.847 14.5159C362.953 14.041 362.905 13.545 362.712 13.0987C361.782 11.4735 361.378 14.1293 360.65 14.0373Z" fill="#2F2E41"/>
<path opacity="0.1" d="M380.31 64.4235L377.757 75.049C380.332 75.1412 383.739 75.1901 387.349 75.1195C388.259 72.3852 389.129 69.5341 389.796 66.8649C392.235 57.0993 388.17 42.1796 386.002 35.1266C383.834 28.0737 378.413 26.1748 378.413 26.1748C376.191 26.957 374.092 28.0532 372.18 29.43C368.656 31.8714 380.31 64.4235 380.31 64.4235Z" fill="black"/>
<path opacity="0.1" d="M378.142 63.8811L375.483 74.9433C376.134 74.9813 376.898 75.0166 377.757 75.0491C379.763 75.1197 382.272 75.1658 384.991 75.1468C385.969 72.2415 386.915 69.1762 387.628 66.3225C390.067 56.5569 386.002 41.6372 383.834 34.5842C381.665 27.5313 376.923 35.2624 376.923 35.2624C376.923 35.2624 378.82 30.6508 375.296 33.0922C371.773 35.5336 378.142 63.8811 378.142 63.8811Z" fill="black"/>
<path d="M377.329 25.6323C377.329 25.6323 382.749 27.5312 384.918 34.5841C387.086 41.6371 391.151 56.5568 388.712 66.3224C386.273 76.088 381.123 88.295 381.123 88.295C381.123 88.295 375.974 84.4973 374.077 85.3111L379.226 63.881C379.226 63.881 367.572 31.3289 371.096 28.8875C373.008 27.5107 375.107 26.4145 377.329 25.6323Z" fill="#575A89"/>
<path d="M381.369 161.698L306.386 5.30273L181.008 65.5233L227.119 161.698H381.369Z" fill="#F2F2F2"/>
<path d="M281.012 66.6913L214.419 98.6765L216.403 102.814L282.995 70.8283L281.012 66.6913Z" fill="#3F3D56"/>
<path d="M298.643 103.465L232.05 135.45L234.034 139.588L300.626 107.602L298.643 103.465Z" fill="#3F3D56"/>
<path d="M310.754 45.0537L294.221 52.9949L302.155 69.5431L318.688 61.602L310.754 45.0537Z" fill="#3F3D56"/>
<path d="M328.385 81.8276L311.852 89.7688L319.786 106.317L336.319 98.3759L328.385 81.8276Z" fill="#3F3D56"/>
<path d="M311.893 33.5913L305.084 52.9819L295.905 49.7527L294.649 53.3297L307.39 57.8112L315.466 34.8485L311.893 33.5913Z" fill="#57B894"/>
<path d="M329.524 70.3652L322.715 89.7558L313.537 86.5272L312.281 90.1036L325.021 94.5851L333.098 71.6224L329.524 70.3652Z" fill="#57B894"/>
<path d="M7.23636 341.698L41.1132 334.456L33.8768 300.548L-1.17308e-06 307.791L7.23636 341.698Z" fill="#F2F2F2"/>
<path d="M40.171 291.489C40.171 291.489 27.728 300.384 31.8756 303.943C36.0233 307.501 44.3187 293.268 44.3187 293.268L40.171 291.489Z" fill="#FFB9B9"/>
<path d="M97.6459 305.129C97.6459 305.129 95.2759 334.782 94.6833 338.933C94.0908 343.085 93.4983 380.447 92.3132 384.599C91.1282 388.75 89.9431 398.832 89.9431 398.832H82.8328C82.8328 398.832 83.4253 380.447 81.6478 373.331C79.8702 366.214 80.4627 346.643 80.4627 346.643C80.4627 346.643 76.9076 311.652 78.6852 306.908C80.4628 302.164 97.6459 305.129 97.6459 305.129Z" fill="#FFB9B9"/>
<path d="M88.1655 397.053C88.1655 397.053 91.1282 398.832 91.1282 400.019C91.1282 401.205 90.5356 404.17 91.1282 405.356C91.7207 406.542 95.8684 411.287 93.4983 412.473C91.1281 413.659 80.4627 412.473 80.4627 412.473C80.4627 412.473 81.0552 404.17 81.6477 403.577C82.2403 402.984 81.0552 397.053 81.0552 397.053H88.1655Z" fill="#2F2E41"/>
<path d="M52.3508 304.402C52.3508 304.402 51.5981 334.14 51.752 338.331C51.9058 342.522 48.5768 379.74 49.3199 383.993C50.0631 388.246 50.1843 398.397 50.1843 398.397L57.2553 399.144C57.2553 399.144 58.5941 380.799 61.1082 373.908C63.6223 367.017 65.0855 347.492 65.0855 347.492C65.0855 347.492 72.2905 313.068 71.0203 308.163C69.7501 303.258 52.3508 304.402 52.3508 304.402Z" fill="#FFB9B9"/>
<path d="M52.1387 396.815C52.1387 396.815 49.0058 398.273 48.8814 399.452C48.757 400.632 49.0353 403.643 48.3217 404.76C47.608 405.878 42.9857 410.16 45.2183 411.589C47.4509 413.017 58.1819 412.958 58.1819 412.958C58.1819 412.958 58.4633 404.639 57.9363 403.987C57.4092 403.335 59.2097 397.562 59.2097 397.562L52.1387 396.815Z" fill="#2F2E41"/>
<path d="M89.3506 260.649C89.3506 260.649 94.0908 261.242 95.8684 271.325C97.646 281.407 104.164 306.908 98.831 308.687C93.4983 310.466 77.5001 314.025 76.9076 312.839C76.3151 311.653 75.13 308.687 75.13 308.687C75.13 308.687 76.9076 314.025 74.5375 314.025C72.1674 314.025 49.0589 310.466 49.6515 308.687C50.244 306.908 51.429 293.861 51.429 293.861C51.429 293.861 54.9842 271.918 58.5393 268.359C59.5682 267.37 60.367 266.167 60.879 264.835C61.391 263.502 61.6037 262.073 61.5019 260.649H89.3506Z" fill="#2F2E41"/>
<path d="M98.2385 255.905C98.2385 255.905 90.5356 254.126 89.3506 256.498C88.1655 258.87 92.3132 262.429 94.0908 262.429C95.8684 262.429 98.831 260.649 98.831 260.649L98.2385 255.905Z" fill="#FFB9B9"/>
<path d="M82.2403 205.495C88.1306 205.495 92.9057 200.716 92.9057 194.82C92.9057 188.924 88.1306 184.145 82.2403 184.145C76.3499 184.145 71.5748 188.924 71.5748 194.82C71.5748 200.716 76.3499 205.495 82.2403 205.495Z" fill="#FFB9B9"/>
<path d="M80.4627 202.529C80.4627 202.529 78.6851 210.832 79.8702 210.832C81.0552 210.832 70.9823 216.17 70.9823 216.17L63.2795 214.984L60.9094 211.425C60.9094 211.425 73.3524 203.122 73.3524 198.378C73.3524 193.633 80.4627 202.529 80.4627 202.529Z" fill="#FFB9B9"/>
<path d="M75.13 210.832C75.13 210.832 76.9075 209.646 77.5001 209.646H82.2403C82.8328 209.646 90.5356 211.425 90.5356 211.425L95.2758 238.113C95.2758 238.113 86.9805 251.753 92.9057 262.429C92.9057 262.429 91.1282 261.242 82.8328 261.836C74.5374 262.429 59.7243 264.208 59.1318 264.208C58.5393 264.208 58.5393 259.463 59.1318 258.277C59.7243 257.091 58.5393 257.684 58.5393 254.719C58.5393 251.753 56.7617 246.416 56.7617 246.416L48.4664 216.17C48.4664 216.17 59.1318 210.239 60.9094 210.832C62.687 211.425 68.0197 213.205 69.2047 212.611C70.3898 212.018 75.13 210.832 75.13 210.832Z" fill="#C360FC"/>
<path d="M88.7581 212.019L90.5356 211.425C90.5356 211.425 94.0908 210.832 98.2384 214.391C102.386 217.949 117.792 228.624 117.792 228.624C117.792 228.624 123.717 233.369 121.939 238.706C120.162 244.044 117.199 257.091 108.311 256.498C108.311 256.498 102.979 263.615 100.016 262.429C97.0534 261.243 94.6833 256.498 96.4609 255.905C98.2385 255.312 102.979 249.381 102.979 249.381L97.0534 238.113H95.2759L88.7581 234.555L88.7581 212.019Z" fill="#C360FC"/>
<path d="M53.2066 215.577L48.4664 216.17C48.4664 216.17 44.3187 217.949 44.9112 225.659C45.5037 233.369 41.3561 268.359 43.1337 272.511C43.1337 272.511 37.2084 292.675 38.3935 293.268C39.5785 293.861 46.6888 297.419 46.0963 295.047C45.5038 292.675 52.6141 276.069 52.6141 276.069C52.6141 276.069 60.9094 267.173 57.3543 254.719V244.637L53.2066 215.577Z" fill="#C360FC"/>
<path d="M91.1168 205.141L83.5842 206.783L82.6162 203.071L82.9884 206.913L70.8368 209.563L70.3024 207.513L70.5078 209.634L62.7248 211.332L61.0599 195.335C59.3482 188.77 65.5953 181.774 72.1536 180.061L75.0631 179.301C79.8799 178.043 88.6357 179.187 89.8929 184.008C87.6925 192.414 83.9415 201.629 91.1168 205.141Z" fill="#2F2E41"/>
</svg>

'''
'''--- frontend/assets/img/logo-black.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#24272a"/><stop offset=".42" stop-color="#24272a" stop-opacity="0"/><stop offset=".59" stop-color="#24272a" stop-opacity="0"/><stop offset=".81" stop-color="#24272a"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#24272a"/></svg>
'''
'''--- frontend/assets/img/logo-white.svg ---
<svg viewBox="0 0 288 288" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><linearGradient id="a" gradientUnits="userSpaceOnUse" x1="76.81" x2="211.16" y1="211.17" y2="76.81"><stop offset=".21" stop-color="#fff"/><stop offset=".42" stop-color="#fff" stop-opacity="0"/><stop offset=".59" stop-color="#fff" stop-opacity="0"/><stop offset=".81" stop-color="#fff"/></linearGradient><path d="m88.46 216a16.45 16.45 0 0 0 12.46-5.71l112.56-130.57a16.42 16.42 0 0 0 -13.94-7.72 16.46 16.46 0 0 0 -12.41 5.65l-113.13 129.8a16.46 16.46 0 0 0 14.46 8.55z" fill="url(#a)"/><path d="m88.46 216a16.46 16.46 0 0 0 7.54-1.83v-109l87.45 104.94a16.44 16.44 0 0 0 12.64 5.89h3.45a16.46 16.46 0 0 0 16.46-16.46v-111.08a16.46 16.46 0 0 0 -16.46-16.46 16.36 16.36 0 0 0 -7.54 1.81v109.05l-87.45-104.94a16.44 16.44 0 0 0 -12.64-5.92h-3.45a16.46 16.46 0 0 0 -16.46 16.46v111.08a16.46 16.46 0 0 0 16.46 16.46z" fill="#fff"/></svg>
'''
'''--- frontend/assets/img/startCircle.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="30" height="30" rx="15" fill="#9DF856"/>
</svg>

'''
'''--- frontend/assets/img/voted.svg ---
<svg width="40" height="40" viewBox="0 0 40 40" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="20" cy="20" r="20" fill="white"/>
<line x1="13.366" y1="18.4517" x2="18.0818" y2="27.634" stroke="#58FF4A" stroke-width="5" stroke-linecap="round"/>
<line x1="2.5" y1="-2.5" x2="20.1858" y2="-2.5" transform="matrix(-0.490348 0.871527 -0.854237 -0.519884 26.7324 9)" stroke="#58FF4A" stroke-width="5" stroke-linecap="round"/>
</svg>

'''
'''--- frontend/assets/img/waitCircle.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="30" height="30" rx="15" fill="#F8F156"/>
</svg>

'''
'''--- frontend/assets/js/near/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME

function getConfig(env) {
  switch (env) {
    case 'production':
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org',
        explorerUrl: 'https://explorer.mainnet.near.org',
      }
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
        explorerUrl: 'https://explorer.testnet.near.org',
      }
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org',
        explorerUrl: 'https://explorer.betanet.near.org',
      }
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME,
      }
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      }
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near',
      }
    default:
      throw Error(
        `Unconfigured environment '${env}'. Can be configured in src/config.js.`
      )
  }
}

module.exports = getConfig

'''
'''--- frontend/assets/js/near/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

export async function initContract() {
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  window.walletConnection = new WalletConnection(near)
  window.accountId = window.walletConnection.getAccountId()
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    viewMethods: ['get_poll', 'get_voted_polls', 'get_polls_for_owner', 'get_all_polls', 'is_voted'],
    changeMethods: ['create_poll', 'delete_poll', 'vote'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

export async function create_poll(description, start_time, end_time, options) {
  return await window.contract.create_poll({
    args: { description, start_time, end_time, options }
  })
}

export async function get_poll(poll_id) {
  return await window.contract.get_poll({
     poll_id
  })
}

export async function delete_poll(poll_id) {
  return await window.contract.delete_poll({
    args: { poll_id }
  })
}

export async function get_polls_for_owner(account_id, from_index, limit) {
  return await window.contract.get_polls_for_owner({
     account_id, from_index, limit
  })
}

export async function get_voted_polls(account_id, from_index, limit) {
  return await window.contract.get_voted_polls({
     account_id, from_index, limit
  })
}

export async function get_all_polls(from_index, limit) {
  return await window.contract.get_all_polls({
    args: { from_index, limit }
  })
}

export async function vote(poll_id, variant_id) {
  return await window.contract.vote({
    args: { poll_id, variant_id }
  })
}

export async function is_voted(account_id, poll_id) {
  return await window.contract.is_voted({
    account_id, poll_id
  })
}
'''
'''--- frontend/components/Button.js ---
import React, { useState } from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'

const Button = ({ text, style, click }) => {
  const [btnStyle, setStyle] = useState(style);

  return (
    <ButtonContainer style={btnStyle} onClick={() => {setStyle({...style, color: colors.white, background: colors.violet});click()}}>
      {text}
    </ButtonContainer>
  )
}

const ButtonContainer = styled.div`
  cursor: pointer;
  width: 100px;
  height: 40px;
  background: ${colors.white};
  border-radius: 50px;
  font-family: 'Nunito', serif;
  font-style: normal;
  font-weight: 700;
  font-size: 15px;
  line-height: 20px;
  color: ${colors.violet};
  display: flex;
  align-items: center;
  justify-content: center;
`
export default Button

'''
'''--- frontend/components/Input.js ---
import React from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'

const Input = ({ value, style, setValue, placeholder }) => {
  return (
    <Container style={style}>
      <CustomInput
        value={value}
        onChange={setValue}
        placeholder={placeholder}
      />
    </Container>
  )
}

const Container = styled.div`
  width: 100%;
  border: 1px solid ${colors.white};
  border-radius: 100px;
  height: 40px;
  padding: 10px;
  display: flex;
  align-items: center;
`
const CustomInput = styled.input`
  width: 100%;
  background-color: transparent;
  border: none;
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 500;
  font-size: 17px;
  line-height: 26px;
  color: ${colors.white};
  ::placeholder {
    color: ${colors.placeholder};
  }
`
export default Input

'''
'''--- frontend/components/Modal.js ---
import React from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'

const Modal = ({
                 backgroundStyle,
                 containerStyle,
                 visible,
                 setVisible,
                 children,
               }) => {
  return (
      <Background
        style={backgroundStyle}
        visible={visible}
        onClick={() => setVisible(false)}
      >
        <Container onClick={(e) => e.stopPropagation()} style={containerStyle}>
          {children}
        </Container>
      </Background>
  )
}
const Background = styled.div`
  display: ${(props) => (props.visible ? 'flex' : 'none')};
  z-index: 99;
  position: fixed;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  justify-content: center;
  align-items: center;
  cursor: pointer;
`
const Container = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  background: ${colors.white};
  border-radius: 5px;
  padding: 50px;
  font-family: 'Noto Sans';
  font-style: normal;
  font-weight: 600;
  font-size: 20px;
  line-height: 24px;
  color: ${colors.primary};
  cursor: auto;
`

export default Modal
'''
'''--- frontend/components/Option.js ---
import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import votedIcon from '../assets/img/voted.svg'

const Option = ({
  name,
  percent,
  style,
  textStyle,
  click,
  votedPoll,
  votedOption,
  status,
}) => {
  const [stylePercent, setStylePercent] = useState(style)
  const [styleContainer, setStyleContainer] = useState()
  const [votedValue, setVotedValue] = useState(votedOption)

  const vote = () => {
    click()
    setStylePercent({ ...style, width: `${percent}%` })
    setStyleContainer({
      background: 'none',
      border: `1px solid ${colors.white}`,
    })
    if (!votedPoll && status === 'start') {
      setVotedValue(true)
    }
  }

  useEffect(() => {
    setStylePercent(
      votedPoll || status !== 'start'
        ? { ...style, width: `${percent}%` }
        : null
    )
    setStyleContainer(
      votedPoll || status !== 'start'
        ? { background: 'none', border: `1px solid ${colors.white}` }
        : null
    )
  }, [votedPoll])

  console.log(votedPoll)

  return (
    <>
      <Container style={styleContainer} onClick={vote}>
        <NameOption
          style={
            (votedPoll || status !== 'start') && percent ? textStyle : null
          }
        >
          <div>{name}</div>
          <div>{!percent && '0%'}</div>
        </NameOption>
        <Percent style={stylePercent}>
          <PercentText
            percent={percent}
            style={votedPoll || status !== 'start' ? textStyle : null}
          >
            {percent ? `${percent}%` : ''}
          </PercentText>
        </Percent>
        {votedValue && <VotedIcon src={votedIcon} />}
      </Container>
    </>
  )
}

const Container = styled.div`
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  border: 1px solid ${colors.white};
  border-radius: 100px;
  height: 45px;
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0.38) 0%,
    rgba(255, 255, 255, 0.3) 100%
  );
  border: none;
  :hover {
    background: none;
    border: 1px solid ${colors.white};
  }
`
const Percent = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-end;
  width: 0%;
  background-color: ${colors.violet};
  border-radius: 100px;
  height: 43px;
  transition: width 1s ease-in-out 0.3s;
`
const NameOption = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
  position: absolute;
  font-family: 'Nunito';
  font-weight: 500;
  font-size: 17px;
  line-height: 26px;
  color: ${colors.white};
  padding: 0 20px;
  width: 92%;
`
const PercentText = styled.div`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 500;
  font-size: 17px;
  line-height: 26px;
  color: ${colors.white};
  padding: ${(props) => (props.percent === 100 ? '0px 50px' : '0px 20px')};
`
const VotedIcon = styled.img`
  position: absolute;
  right: 40px;
  height: 25px;
  width: 25px;
`
export default Option

'''
'''--- frontend/components/Poll.js ---
import React from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import start from '../assets/img/startCircle.svg'
import end from '../assets/img/endCircle.svg'
import wait from '../assets/img/waitCircle.svg'

const Poll = ({ name, status, style, click }) => {
  return (
    <Container style={style} onClick={click}>
      <NamePoll>{name}</NamePoll>
      {status === 'start' && (
        <img src={start} style={{ height: 20, width: 20 }} />
      )}
      {status === 'end' && <img src={end} style={{ height: 20, width: 20 }} />}
      {status === 'wait' && (
        <img src={wait} style={{ height: 20, width: 20 }} />
      )}
    </Container>
  )
}

const Container = styled.div`
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  border: 1px solid ${colors.white};
  border-radius: 100px;
  height: 45px;
  padding: 0px 20px;
  background: linear-gradient(
    180deg,
    rgba(255, 255, 255, 0.38) 0%,
    rgba(255, 255, 255, 0.3) 100%
  );
  border: none;
  :hover {
    background: none;
    border: 1px solid ${colors.white};
  }
`
const NamePoll = styled.span`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 500;
  font-size: 17px;
  line-height: 26px;
  color: ${colors.white};
`
export default Poll

'''
'''--- frontend/functions/getPollsWithStatus.js ---
export const getPollsWithStatus = (polls) => {
  polls.map(poll => {
    let now = Date.now()
    if (now > Date.parse(poll.end_time))
      poll.status = 'end'
    else if (now < Date.parse(poll.end_time) && now > Date.parse(poll.start_time))
      poll.status = 'start'
    else if (now < Date.parse(poll.end_time))
      poll.status = 'wait'
  })
  return polls
}
'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./assets/img/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="./assets/img/favicon.ico" />
    <title>Welcome to NEAR with React</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
import React from 'react'
import { createRoot } from 'react-dom/client'
import App from './App'
import { initContract } from './assets/js/near/utils'
import { BrowserRouter as Router } from 'react-router-dom'

const container = document.querySelector('#root')
const root = createRoot(container) // createRoot(container!) if you use TypeScript

window.nearInitPromise = initContract()
  .then(() => {
    ;<App />
    root.render(
      <Router>
        <App />
      </Router>
    )
  })
  .catch(console.error)

'''
'''--- frontend/pages/AllPolls.js ---
import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import Button from '../components/Button'
import Poll from '../components/Poll'
import { useNavigate } from 'react-router-dom'
import { get_all_polls } from '../assets/js/near/utils'
import { getPollsWithStatus } from '../functions/getPollsWithStatus'

const AllPolls = ({}) => {
  const navigate = useNavigate()

  const [polls, setPolls] = useState([])

  useEffect(() => {
    get_all_polls(0, 10)
      .then((polls) => setPolls(getPollsWithStatus(polls)))
      .catch((e) => console.log(e))
  }, [])

  return (
    <Container>
      <Header>All polls</Header>
      {polls.map((item) => {
        return (
          <Poll
            key={item.id}
            name={item.description}
            status={item.status}
            click={() => navigate(`/poll/${item.id}`, {state: { id: item.id }})}
          />
        )
      })}
      <Button
        text='Create poll'
        style={{
          width: 125,
          marginTop: 15,
        }}
        click={() => navigate('/create')}
      />
    </Container>
  )
}

const Container = styled.div`
  padding: 20px 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
`
const Header = styled.div`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 25px;
  line-height: 35px;
  color: ${colors.white};
  margin-bottom: 15px;
`

export default AllPolls

'''
'''--- frontend/pages/CreatePoll.js ---
import React, { useState } from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import Input from '../components/Input'
import DateTimePicker from 'react-datetime-picker'
import calendarTime from '../assets/img/calendar-time.svg'
import Button from '../components/Button'
import { create_poll } from '../assets/js/near/utils'
import { useNavigate } from 'react-router-dom'
import Modal from '../components/Modal'
import done from '../assets/img/done.svg'

const CreatePoll = ({}) => {
  const [description, setDescription] = useState('')
  const [start, setStart] = useState('')
  const [end, setEnd] = useState('')
  const [options, setOptions] = useState({ option1: '', option2: '' })
  const [count, setCount] = useState([{ id: '1' }, { id: '2' }])
  const [visibleModal, setVisibleModal] = useState(false)

  const navigate = useNavigate()

  const handleSubmit = async () => {
    create_poll(
      description.toString(),
      start,
      end,
      Object.values(options)
    )
      .then(() => setVisibleModal(true))
      .catch((e) => console.log(e))
  }

  return (
    <Container>
      <Header>New poll</Header>
      <ContentContainer>
        <Title>Description</Title>
        <Input
          placeholder={'Enter a description'}
          value={description}
          setValue={(e) => setDescription(e.target.value)}
        />

        <DateContainer>
          <div>
            <Title>Start time</Title>
            <DateTimePickerStyled
              calendarIcon={<CalendarIcon src={calendarTime} />}
              clearIcon={null}
              format={'y-MM-dd h:mm:ss a'}
              locale='en'
              onChange={(date) => setStart(date)}
              value={start}
              maxDate={new Date(end) || null}
            />
          </div>
          <div>
            <Title>End time</Title>
            <DateTimePickerStyled
              calendarIcon={<CalendarIcon src={calendarTime} />}
              clearIcon={null}
              format={'y-MM-dd h:mm:ss a'}
              locale='en'
              onChange={(date) => setEnd(date)}
              value={end}
              minDate={new Date(start) || null}
            />
          </div>
        </DateContainer>

        <OptionsTitleContainer>
          <Title>Options</Title>
          <Button
            text='Add option'
            style={{
              width: 120,
              height: 35,
              marginBottom: 15,
              marginLeft: 20,
            }}
            click={() => {
              setCount((prev) => {
                if (prev.length <= 9)
                  return [...prev, { id: `${prev.length + 1}` }]
                return [...prev]
              })
            }}
          />
        </OptionsTitleContainer>
        <InputsContainer>
          {count.map((item) => {
            return (
              <Input
                key={item.id}
                placeholder={`Option ${item.id}`}
                value={options[`option${item.id}`]}
                setValue={(e) =>
                  setOptions((prev) => ({
                    ...prev,
                    [`option${item.id}`]: e.target.value.toString(),
                  }))
                }
              />
            )
          })}
          <Button
            text='Create'
            style={{
              width: 110,
              height: 40,
              marginTop: 20,
            }}
            click={() => handleSubmit()}
          />
          <Modal
            visible={visibleModal}
            setVisible={setVisibleModal}
            backgroundStyle={{}}
            containerStyle={{ height: 300, width: 400 }}
          >
            <TitleContainer>
              <DoneIcon src={done} />
              <TitleModal>The poll was created successfully</TitleModal>
            </TitleContainer>
            <Button
              click={() => {
                navigate('/my')
                setVisibleModal(false)
              }}
              text='OK'
              style={{
                fontSize: 25,
                backgroundColor: colors.violet,
                color: colors.white,
                height: 50,
              }}
            />
          </Modal>
        </InputsContainer>
      </ContentContainer>
    </Container>
  )
}

const Container = styled.div`
  padding: 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
`
const Header = styled.div`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 25px;
  line-height: 35px;
  color: ${colors.white};
  margin-bottom: 15px;
`
const ContentContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: center;
  width: 100%;
`
const Title = styled.div`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 600;
  font-size: 19px;
  line-height: 28px;
  color: ${colors.white};
  margin-bottom: 8px;
`
const DateTimePickerStyled = styled(DateTimePicker)`
  height: 40px;
  border-radius: 100px;
  border: 1px solid ${colors.white};
  display: flex;
  align-items: center;
  color: ${colors.white};
  .react-datetime-picker__wrapper {
    max-width: 430px;
    min-width: 268px;
    border: none;
    margin: 10px;
    font-family: 'Nunito';
    font-style: normal;
    font-weight: 600;
    font-size: 17px;
    line-height: 26px;
    color: ${colors.white};
  }
  .react-datetime-picker__inputGroup__input {
    color: ${colors.white};
    ::placeholder {
      color: ${colors.placeholder};
    }
  }
`
const CalendarIcon = styled.img`
  height: 25px;
  width: 25px;
`
const DateContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 40px;
  margin: 30px 0;
`
const OptionsTitleContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: flex-start;
`
const InputsContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 15px;
  width: 100%;
`

const DoneIcon = styled.img`
  height: 100px;
  width: 100px;
`
const TitleContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
`
const TitleModal = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 23px;
  line-height: 30px;
  color: ${colors.violet};
  text-align: center;
  margin-top: 15px;
`
export default CreatePoll

'''
'''--- frontend/pages/Main.js ---
import React from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import Button from '../components/Button'
import bg1 from '../assets/img/bg1.svg'
import footer from '../assets/img/footer.svg'
import img1 from '../assets/img/img1.svg'
import img2 from '../assets/img/img2.svg'
import img3 from '../assets/img/img3.svg'
import img4 from '../assets/img/img4.svg'
import arrow1 from '../assets/img/arrow1.svg'
import arrow2 from '../assets/img/arrow2.svg'

const Main = ({ login }) => {
  return (
    <>
      <Background src={bg1} alt='background image' />
      <Container>
        <HeaderContainer>
          <Logo>VotingApp</Logo>
          <Button text='Log in' click={login} />
        </HeaderContainer>

        <TitleContainer>
          <Title>Welcome to Voting App with NEAR</Title>
          <Text style={{ width: '286px', height: '52px' }}>
            A convenient application for creating polls based on NEAR.
          </Text>
          <Button style={{ width: 140 }} text='Get started' click={login} />
        </TitleContainer>
        <Image src={img1} alt='image 1' />
      </Container>
      <ContentContainer>
        <SecondTitleContainer>
          <SecondTitle>Creating a poll</SecondTitle>
        </SecondTitleContainer>
        <ItemContainer>
          <StepsContainer>
            <Step style={{ position: 'relative', left: 0 }}>
              <StepTitle>Step 1</StepTitle>
              <Text style={{ color: colors.violet }}>
                Log in to your account on NEAR
              </Text>
              <img src={img2} alt='image 2' />
            </Step>
          </StepsContainer>
          <Arrow src={arrow1} alt='' />
        </ItemContainer>

        <StepsContainer
          style={{
            alignItems: 'flex-end',
            justifyContent: 'flex-end',
            marginBottom: 50,
          }}
        >
          <Step style={{ position: 'relative', right: 0 }}>
            <StepTitle>Step 2</StepTitle>
            <Text style={{ color: colors.violet }}>
              Create a poll using NEAR
            </Text>
            <img src={img3} alt='image 3' />
          </Step>
        </StepsContainer>

        <ItemContainer
          style={{
            marginBottom: 120,
          }}
        >
          <StepsContainer>
            <Step style={{ position: 'relative', left: 0 }}>
              <StepTitle>Step 3</StepTitle>
              <Text style={{ color: colors.violet }}>
                Vote and share with your friends
              </Text>
              <img src={img4} alt='image 4 ' />
            </Step>
          </StepsContainer>
          <img src={arrow2} alt='' style={{ height: 244 }} />
        </ItemContainer>

        <ButtonContainer>
          <Button
            text='Get started'
            click={login}
            style={{
              width: 140,
              backgroundColor: colors.violet,
              color: colors.white,
            }}
          />
        </ButtonContainer>
      </ContentContainer>
      <FooterContainer>
        <DevelopersContainer>
          <Text>Developers</Text>
          <Text>Mileshko Olesia, Reut Ksenia</Text>
        </DevelopersContainer>
        <FooterImage src={footer} alt='footer image' />
      </FooterContainer>
    </>
  )
}

const Background = styled.img`
  width: 100%;
  z-index: -1;
  position: absolute;
`
const Container = styled.div`
  padding: 5vh 11vw;
  height: 130vh;
`
const HeaderContainer = styled.div`
  display: flex;
  justify-content: space-between;
  height: 55px;
  align-items: center;
  margin-bottom: 30vh;
`
const Logo = styled.span`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 900;
  font-size: 30px;
  line-height: 41px;
  color: ${colors.white};
`
const TitleContainer = styled.div`
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  gap: 35px;
`
const Title = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 40px;
  line-height: 55px;
  color: ${colors.white};
  width: 466px;
  height: 110px;
`
const Text = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 500;
  font-size: 17px;
  line-height: 26px;
  color: ${colors.white};
`
const ContentContainer = styled.div`
  padding: 5vh 10vw;
`
const SecondTitleContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
`
const SecondTitle = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 30px;
  line-height: 41px;
  color: ${colors.violet};
  margin-top: 10vh;
  margin-bottom: 18vh;
`
const ItemContainer = styled.div`
  display: flex;
  gap: 12vw;
  position: relative;
  margin-bottom: 50px;
`
const StepsContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: flex-start;
`
const Step = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 20px;
`
const StepTitle = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 30px;
  line-height: 41px;
  color: ${colors.violet};
`
const DevelopersContainer = styled.div`
  display: flex;
  flex-direction: column;
  position: absolute;
  bottom: 0px;
  padding: 5vh 10vw;
`
const Image = styled.img`
  position: relative;
  bottom: 230px;
  left: 450px;
`
const Arrow = styled.img`
  position: relative;
  height: 244px;
  top: 300px;
`
const ButtonContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
`
const FooterContainer = styled.div`
  position: absolute;
  width: 100%;
`
const FooterImage = styled.img`
  position: relative;
  width: 100%;
  z-index: -1;
  bottom: -10px;
`
export default Main

'''
'''--- frontend/pages/Modal.js ---
import React from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import done from '../assets/img/done.svg'
import Button from '../components/Button'

const Modal = ({ handleClose }) => {
  return (
    <Background>
      <Container>
        <TitleContainer>
          <DoneIcon src={done} />
          <Title>The poll was created successfully</Title>
        </TitleContainer>
        <Button
          click={handleClose}
          text='OK'
          style={{
            fontSize: 25,
            backgroundColor: colors.violet,
            color: colors.white,
            height: 50,
          }}
        />
      </Container>
    </Background>
  )
}

const Background = styled.div`
  display: flex;
  cursor: auto;
  background: rgba(63, 69, 72, 0.5);
  width: 100vw;
  height: 100vh;
  z-index: 3;
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  overflow: hidden;
`
const Container = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
  padding: 20px;
  background-color: ${colors.white};
  border-radius: 5px;
  height: 300px;
  width: 400px;
  gap: 25px;
`
const DoneIcon = styled.img`
  height: 100px;
  width: 100px;
`
const TitleContainer = styled.div`
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
`
const Title = styled.p`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 23px;
  line-height: 30px;
  color: ${colors.violet};
  text-align: center;
  margin-top: 15px;
`

export default Modal

'''
'''--- frontend/pages/MyPolls.js ---
import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import Poll from '../components/Poll'
import { useNavigate } from 'react-router-dom'
import Button from '../components/Button'
import { get_polls_for_owner } from '../assets/js/near/utils'
import { getPollsWithStatus } from '../functions/getPollsWithStatus'

const MyPolls = ({}) => {
  const navigate = useNavigate()
  const [myPolls, setMyPolls] = useState([])

  useEffect(() => {
    get_polls_for_owner(accountId, 0, 10)
      .then((polls) => setMyPolls(getPollsWithStatus(polls)))
      .catch((e) => console.log(e))
  }, []);

  return (
    <Container>
      <Header>My polls</Header>
      {myPolls.map((item) => {
        return (<Poll key={item.id} name={item.description} status={item.status} click={() => navigate(`/poll/${item.id}`, {state: { id: item.id }})}/>)
      })}
      <Button
        text="Create poll"
        style={{
          width: 125,
          marginTop: 15,
        }}
        click={() => navigate('/create')}
      />
    </Container>
  )
}

const Container = styled.div`
  padding: 20px 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
`
const Header = styled.div`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 25px;
  line-height: 35px;
  color: ${colors.white};
  margin-bottom: 15px;
`
export default MyPolls

'''
'''--- frontend/pages/NotFound.js ---
import React from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'

const NotFound = ({}) => {
  return (
    <>
      <div>404</div>
    </>
  )
}

export default NotFound

'''
'''--- frontend/pages/Poll.js ---
import React, { useEffect, useState } from 'react'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import Option from '../components/Option'
import { useLocation, useNavigate } from 'react-router-dom'
import {
  delete_poll,
  get_poll,
  is_voted,
  vote,
} from '../assets/js/near/utils'
import { getPollsWithStatus } from '../functions/getPollsWithStatus'
import Button from '../components/Button'

const Poll = ({}) => {
  const location = useLocation()
  const navigate = useNavigate()

  const [votedPoll, setVotedPoll] = useState(false)
  const [votedOption, setVotedOption] = useState(false)
  const [pollId, setPollId] = useState(location.state.id)
  const [poll, setPoll] = useState()

  useEffect(() => {
    get_poll(pollId)
      .then((poll) => {
        setPoll(getPollsWithStatus([poll])[0])
        poll.options.map((option) => {
          if (option.voted_users.includes(accountId)) setVotedOption(option.id)
        })
      })
      .catch((e) => console.log(e))
    is_voted(accountId, pollId)
      .then((res) => setVotedPoll(res))
      .catch((e) => console.log(e))
  }, [])

  const handleVote = (optionId) => {
    if (!votedPoll && poll.status === 'start') {
      vote(pollId, optionId)
        .then(() =>
          is_voted(accountId, pollId)
            .then((res) => setVotedPoll(res))
            .catch((e) => console.log(e))
        )
        .catch((e) => console.log(e))
      setVotedOption(optionId)
    }
  }

  const handleDeletePoll = (pollId) => {
    if (poll.owner === accountId) {
      delete_poll(pollId)
        .then(() => navigate('/my'))
        .catch((e) => console.log(e))
    }
  }

  const getPercent = (optionId) => {
    let sum = 0
    poll.options.forEach((option) => {
      sum += option.votes
    })
    let variant = poll.options.find((v) => v.id === optionId)
    return sum ? (variant.votes * 100) / sum : 0
  }

  return (
    <Container>
      <Header>{poll?.description}</Header>
      {poll?.options.map((option, index) => {
        return (
          <Option
            key={option.id}
            name={option.value}
            percent={getPercent(option.id)}
            votedPoll={votedPoll}
            votedOption={votedOption === option.id}
            click={() => {
              if (!votedPoll) handleVote(option.id)
            }}
            style={index % 2 !== 0 ? { backgroundColor: colors.white } : null}
            textStyle={index % 2 !== 0 ? { color: colors.violet } : null}
            status={poll.status}
          />
        )
      })}
      {poll?.owner === accountId ?
        <Button
          text="Delete"
          style={{
            width: 110,
            height: 40,
            marginTop: 20,
            color: colors.active,
          }}
          click={() => handleDeletePoll(pollId)}
        />
        : null
      }
    </Container>
  )
}

const Container = styled.div`
  padding: 20px 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
`
const Header = styled.div`
  font-family: 'Nunito', serif;
  font-style: normal;
  font-weight: 800;
  font-size: 25px;
  line-height: 35px;
  color: ${colors.white};
  margin-bottom: 15px;
`

export default Poll

'''
'''--- frontend/pages/VotedPolls.js ---
import React, { useEffect, useState } from 'react'
import { useNavigate } from 'react-router-dom'
import styled from 'styled-components'
import colors from '../assets/constants/colors'
import Button from '../components/Button'
import Poll from '../components/Poll'
import { get_voted_polls } from '../assets/js/near/utils'
import { getPollsWithStatus } from '../functions/getPollsWithStatus'

const VotedPolls = ({}) => {
  const navigate = useNavigate()
  const [polls, setPolls] = useState([])
  useEffect(() => {
    get_voted_polls(accountId, 0, 10)
      .then((polls) => setPolls(getPollsWithStatus(polls)))
      .catch((e) => console.log(e))
  }, []);

  return (
    <Container>
      <Header>Voted polls</Header>
      {polls.map((item) => {
        return (<Poll key={item.id} name={item.description} status={item.status} click={() => navigate(`/poll/${item.id}`, {state: { id: item.id }})} />)
      })}
      <Button
        text='Create poll'
        style={{
          width: 125,
          marginTop: 15,
        }}
        click={() => navigate('/create')}
      />
    </Container>
  )
}

const Container = styled.div`
  padding: 20px 30px;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  gap: 10px;
`
const Header = styled.div`
  font-family: 'Nunito';
  font-style: normal;
  font-weight: 800;
  font-size: 25px;
  line-height: 35px;
  color: ${colors.white};
  margin-bottom: 15px;
`
export default VotedPolls

'''
'''--- integration-tests/package.json ---
{
  "name": "ava-testing",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "test": "ava --verbose"
  },
  "devDependencies": {
    "ava": "^4.2.0",
    "near-api-js": "^0.44.2",
    "typescript": "^4.7.2",
    "ts-node": "^10.8.0",
    "@types/bn.js": "^5.1.0"
  },
  "dependencies": {}
}

'''
'''--- integration-tests/src/config.ts ---

import { keyStores, KeyPair } from 'near-api-js'
const fs = require('fs')

const CONTRACT_NAME=fs.readFileSync('../neardev/dev-account', 'utf-8')
const NETWORK_ID='testnet'

// Create an InMemoryKeyStore
const keyStore = new keyStores.InMemoryKeyStore()

// Load credentials
const credPath = `${process.env.HOME}/.near-credentials/${NETWORK_ID}/${CONTRACT_NAME}.json`
let credentials = JSON.parse(fs.readFileSync(credPath))

// Save key in the key store
keyStore.setKey(
  NETWORK_ID,
  CONTRACT_NAME,
  KeyPair.fromString(credentials.private_key)
)

export const nearConfig = {
  networkId: NETWORK_ID,
  nodeUrl: 'https://rpc.testnet.near.org',
  contractName: CONTRACT_NAME,
  walletUrl: 'https://wallet.testnet.near.org',
  helperUrl: 'https://helper.testnet.near.org',
  explorerUrl: 'https://explorer.testnet.near.org',
  headers: {},
  deps: {keyStore}
}
'''
'''--- integration-tests/src/main.ava.ts ---
import anyTest, { TestFn } from 'ava'

import { Near, Account, Contract } from 'near-api-js'
import { nearConfig } from './config'

const test = anyTest as TestFn<{
  accounts: Record<string, any>;
}>

test.beforeEach(async (t) => {
  const near = await new Near(nearConfig)
  const user = await new Account(near.connection, nearConfig.contractName)
  const contract = await new Contract(
    user,
    nearConfig.contractName,
    { viewMethods: ['get_greeting'], changeMethods: ['set_greeting'] }
  )
  t.context.accounts = { contract }
})

test('returns the default greeting', async (t) => {
  const { contract } = t.context.accounts
  const message: string = await contract.get_greeting({})
  t.is(message, 'Hello')
})

test('changes the message', async (t) => {
  const { contract } = t.context.accounts
  await contract.set_greeting({args:{ message: 'Howdy' }})
  const message: string = await contract.get_greeting({})
  t.is(message, 'Howdy')
})
'''
'''--- package.json ---
{
  "name": "greeter",
  "version": "1.0.0",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "npm run build:contract && npm run build:web",
    "build:contract": "cd contract && rustup target add wasm32-unknown-unknown && cargo build --all --target wasm32-unknown-unknown --release && cp ./target/wasm32-unknown-unknown/release/greeter.wasm ../out/main.wasm",
    "build:web": "parcel build frontend/index.html --public-url ./",
    "deploy": "npm run build:contract && near dev-deploy",
    "start": "npm run deploy && echo The app is starting! It will automatically open in your browser when ready && env-cmd -f ./neardev/dev-account.env parcel frontend/index.html --open",
    "dev": "nodemon --watch contract -e ts --exec \"npm run start\"",
    "front": "parcel frontend/index.html --open",
    "test": "npm run build:contract && npm run test:unit && npm run test:integration",
    "test:unit": "cd contract && cargo test",
    "test:integration": "npm run deploy && cd integration-tests && npm run test",
    "test:integration:ts": "echo not supported"
  },
  "devDependencies": {
    "@babel/core": "~7.18.2",
    "@babel/preset-env": "~7.18.2",
    "@babel/preset-react": "~7.17.12",
    "@svgr/webpack": "^6.3.1",
    "ava": "^4.2.0",
    "dotenv": "^16.0.1",
    "env-cmd": "~10.1.0",
    "near-cli": "~3.3.0",
    "nodemon": "~2.0.16",
    "parcel": "^2.6.0",
    "parcel-bundler": "^1.12.5",
    "process": "^0.11.10",
    "react-test-renderer": "~18.1.0",
    "ts-node": "^10.8.0",
    "typescript": "^4.7.2"
  },
  "dependencies": {
    "@mui/x-date-pickers": "^5.0.0-beta.4",
    "near-api-js": "~0.44.2",
    "react": "~18.1.0",
    "react-datetime-picker": "^3.5.0",
    "react-dom": "~18.1.0",
    "react-router-dom": "^6.3.0",
    "react-scripts": "^5.0.1",
    "regenerator-runtime": "~0.13.9",
    "styled-components": "^5.3.5"
  },
  "resolutions": {
    "@babel/preset-env": "7.13.8"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''