*GitHub Repository "ketyung/tm_collections_models"*

'''--- Cargo.toml ---
[package]
name = "tm-collections-models"
version = "0.1.0"
edition = "2021"
authors = ["Christopher Chee <ketyung@techchee.com>"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["lib"]

[dependencies]
near-sdk = "4.0.0"
uint = { version = "0.9.3", default-features = false }
near-contract-standards = "4.0.0"

[profile.release]
codegen-units = 1
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
members = []
'''
'''--- LICENSE.md ---
MIT License

Copyright (c) 2022 Christopher Ket Yung Chee

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

'''
'''--- readme.md ---
The common library for the models used in tm_users_contract and tm_collections_contract

## License 
MIT License
Copyright (c) 2022 Christopher Ket Yung Chee. See [License](https://github.com/ketyung/tm_collections_models/blob/master/LICENSE.md) for details

'''
'''--- src/lib.rs ---
pub mod models;

use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::{AccountId};
use near_sdk::serde::{Serialize, Deserialize};

'''
'''--- src/models.rs ---
use crate::*;

#[derive(BorshDeserialize, BorshSerialize,Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Collection{

    pub title : String, 

    pub symbol : String,

    pub description : Option<String>, 

    // the icon/logo of the collection
    pub icon : Option<String>,

    pub base_uri : Option<String>,
    
    pub contract_id : Option<AccountId>,

    pub ticket_types : Option<Vec<TicketType>>,

    pub total_tickets : Option<u64>,
    
    pub tickets_sold : Option<u64>,

    pub attributes : Option<Vec<Attribute>>,

    pub ticket_template_type : Option<TicketTemplate>,

    pub category : Option<String>,

    pub owner : AccountId, 

    pub date_updated : Option<u64>, 

}

#[derive(Debug, Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub enum TicketTemplateType {

    Fixed,

    Custom,
}

#[derive(Debug, Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize)]
#[serde(crate = "near_sdk::serde")]
pub struct TicketTemplate {

    pub value : String, 

    pub template_type : TicketTemplateType,

}

#[derive(Debug, Clone, Serialize, Deserialize, BorshDeserialize, BorshSerialize, PartialEq)]
#[serde(crate = "near_sdk::serde")]
pub enum AttributeType {

    StartDate,

    EndDate, 
    
    MaxTicketPerWallet,

    Venue,

    LocationCoord,

    SalesPageTemplate,

    NextTicketNumber,

    TicketStartingNumber,

    BuyerRequiredToSignUp,

    Status,

    Twitter,

    Facebook,
    
    Website,

}

#[derive(BorshDeserialize, BorshSerialize,Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct Attribute{

    pub name : AttributeType,

    pub value : String, 
}

impl PartialEq for Attribute {

    fn eq(&self, other: &Self) -> bool {
        self.name == other.name  
    }
}

#[derive(BorshDeserialize, BorshSerialize, Serialize, Deserialize, Debug,Clone, PartialEq)]
#[serde(crate = "near_sdk::serde")]
pub struct CollectionId {

    pub title : String, 

    pub symbol : String, 
    
    pub owner : AccountId, 

}

#[derive(BorshDeserialize, BorshSerialize,Serialize, Deserialize, Debug, Clone)]
#[serde(crate = "near_sdk::serde")]
pub struct TicketType{

    pub ticket_type : String,

    // ticket price is stored as u32 
    // the stored value is always divided by 1000
    // e.g. 3.2 Near token is stored as 3200 
    pub price : u32, 

    pub color_code : Option<String>,
}

impl PartialEq for TicketType {

    fn eq(&self, other: &Self) -> bool {
        self.ticket_type == other.ticket_type  
    }
}

#[derive(BorshDeserialize, BorshSerialize,Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct CollectionDataForUpdate{

    pub description : Option<String>, 
    // the icon/logo of the collection
    pub icon : Option<String>,

    pub base_uri : Option<String>,
    
    pub ticket_types : Option<Vec<TicketType>>,

    pub total_tickets : Option<u64>,
    
    pub attributes : Option<Vec<Attribute>>,

    pub ticket_template_type : Option<TicketTemplate>,

    pub category : Option<String>,

}

'''