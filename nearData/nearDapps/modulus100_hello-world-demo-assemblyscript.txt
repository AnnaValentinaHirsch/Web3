*GitHub Repository "modulus100/hello-world-demo-assemblyscript"*

'''--- .eslintrc.js ---
// yarn add -D eslint prettier typescript eslint-config-airbnb-typescript-prettier
module.exports = {
  extends: ['eslint-config-airbnb-typescript-prettier'], // https://github.com/toshi-toma/eslint-config-airbnb-typescript-prettier https://github.com/airbnb/javascript
  rules: {
    // REMEMBER TO RESTART `yarn dev` or `npm run watch` WHENEVER EDITING THESE RULES!
    'react/jsx-filename-extension': ['warn', { extensions: ['.js', '.jsx', '.ts', '.tsx'] }],
    // ------------------------------
    // Add rules that allow Prettier and ESLint to work together without conflicts (https://stackoverflow.com/a/64166241/):
    indent: ['error', 2, { SwitchCase: 1 }],
    'no-tabs': ['error', { allowIndentationTabs: true }],
    'max-len': [
      'warn',
      {
        code: 180,
        tabWidth: 2,
        comments: 180,
        ignoreComments: false,
        ignoreTrailingComments: true,
        ignoreUrls: true,
        ignoreStrings: true,
        ignoreTemplateLiterals: true,
        ignoreRegExpLiterals: true,
      },
    ],
    // ------------------------------
    'no-use-before-define': 'off', // We must disable the base rule (since it can report incorrect errors) and replace it (https://stackoverflow.com/a/64024916/)
    '@typescript-eslint/no-use-before-define': ['error'],
    'max-lines-per-function': ['error', { max: 30, skipBlankLines: true, skipComments: true }], // https://eslint.org/docs/rules/max-lines-per-function
    'max-lines': ['error', { max: 300, skipBlankLines: true, skipComments: true }], // https://eslint.org/docs/rules/max-lines
    'no-console': 'off', // Console logging is super helpful for development, and we can have our build process strip out all of those statements for production.
    'no-else-return': 'off',
    'prefer-destructuring': 'off', // Disabling this seems to be required for AssemblyScript.
    'react/react-in-jsx-scope': 'off',
    'react/function-component-definition': 'off',
  },
  reportUnusedDisableDirectives: true, // https://eslint.org/docs/user-guide/configuring#report-unused-eslint-disable-comments
};

'''
'''--- README.md ---
# hello-world-demo-assemblyscript

This repository includes a complete project structure for AssemblyScript contracts targeting the NEAR platform.

The example here is very basic. It's a simple contract demonstrating the following concepts:

- a single contract
- the difference between `view` vs. `change` methods
- basic contract storage

## Usage

### Getting started

INSTALL `NEAR CLI` first like this: `npm i -g near-cli`

1. clone this repo to a local folder
2. run `yarn`
3. run `./scripts/1.dev-deploy.sh`
4. run `./scripts/2.use-contract.sh`
5. run `./scripts/2.use-contract.sh` (yes, run it to see changes)
6. run `./scripts/3.cleanup.sh`

# The Challenge

You should try completing the following 3 tasks one at a time. The answer is available for each, but don't look at them until you've tried your best. All 3 probably will only take you 15 minutes.

## Basic overview of the 3 tasks (which will be detailed in the following sections, so keep reading)

1. Change `helloWorld` method so it accepts parameter `name` and greets that person instead.
1. Change `helloWorld` method so it accepts parameter array `names` and greets each of those people.
1. Change `helloWorld` method so it reads the Account ID from Context and greets the account who called the function.

## Task 1 success criteria

- input:

```bash
near view $CONTRACT helloWorld '{"name": "Your Name"}'
```

- incorrect input (don't do it like this, which throws an error):

```bash
near view $CONTRACT helloWorld 'Your Name'
```

- output: `hello Your Name`

Ready to see Task 1 answer? [Check here](answers/challenge-task-1.md)

## Task 2 success criteria

- input:

```bash
near view $CONTRACT helloWorld '{"names": ["Your Name", "Friend Name"]}'
```

- incorrect input (don't do it like this, which throws an error):

```bash
near view $CONTRACT helloWorld "['Your Name', 'Friend Name']"
```

- output:

```
hello Your Name, hello Friend Name
```

**Bonus**
Try instead providing thousands of names in the array. Check the error, and learn why it has failed.

Ready to see Task 2 answer? [Check here](answers/challenge-task-2.md)

## Task 3 success criteria

- input: `near call $CONTRACT helloWorld --accountId <id>.testnet`
- output: `hello <id>.testnet`

Ready to see Task 3 answer? [Check here](answers/challenge-task-3.md)

# Other documentation

- See `./scripts/README.md` for documentation about the scripts
- See the original repo at https://github.com/Learn-NEAR/starter--near-sdk-as
- https://docs.near.org/docs/develop/contracts/as/intro

## The file system

```sh
├── README.md                      # this file
├── as-pect.config.js              # configuration for as-pect (AssemblyScript unit testing)
├── asconfig.json                  # configuration for AssemblyScript compiler (supports multiple contracts)
├── package.json                   # NodeJS project manifest
├── scripts
│   ├── 1.dev-deploy.sh            # helper: build and deploy contracts
│   ├── 2.use-contract.sh          # helper: call methods on ContractPromise
│   ├── 3.cleanup.sh               # helper: delete build and deploy artifacts
│   └── README.md                  # documentation for helper scripts
├── src
│   ├── as_types.d.ts              # AssemblyScript headers for type hints
│   │   __tests__
│   │   ├── as-pect.d.ts           # as-pect unit testing headers for type hints
│   │   └── index.unit.spec.ts     # unit tests for contract 1
│   │   asconfig.json              # configuration for AssemblyScript compiler (one per contract)
│   │   └── assembly
│   │       └── index.ts           # contract code for contract 2
│   ├── tsconfig.json              # Typescript configuration
│   └── utils.ts                   # common contract utility functions
└── yarn.lock                      # project manifest version lock
```

## Other thoughts

You may want to consider using the command `npx asp --init`, which will create the following folders and files (see https://tenner-joshua.gitbook.io/as-pect/getting-started):

```
./assembly/
./assembly/tests/
./assembly/tests/example.spec.ts
./assembly/tests/as-pect.d.ts
```

'''
'''--- answers/challenge-task-1.md ---
# Task #1

In `src/assembly/index.ts`

```ts
export function helloWorld(): string {
  return 'hello world';
}
```

Change to:

```ts
export function helloWorld(name: string): string {
  return `hello ${name}`;
}
```

Build, deploy, and view the contract.

Expected output:

```
hello <your name>
```

'''
'''--- answers/challenge-task-2.md ---
# Task #2

In `src/assembly/index.ts`

```ts
export function helloWorld(name: string): string {
  return `hello ${name}`;
}
```

Change to:

```ts
export function helloWorld(names: Array<string>): string {
  return names.map<string>((name) => `hello ${name}`).join(', ');
}
```

Build, deploy, and run the contract.

Expected output:

```
hello Your Name, hello Friend Name
```

**Bonus**
If the operation is too complex (like passing thousands of names as the parameter), you will receive `GasLimitExceeded` error.

'''
'''--- answers/challenge-task-3.md ---
# Task #3

In `src/assembly/index.ts`

```ts
export function helloWorld(names: Array<string>): string {
  return names.map<string>((name) => `hello ${name}`).join(', ');
}
```

Change to:

```ts
export function helloWorld(): string {
  const predecessor = Context.predecessor;
  return `hello ${predecessor}`;
}
```

Build, deploy, and run the contract.

Expected output:

```
hello <id>.testnet
```

# Congratulations!

**Now you are ready to build a real demo to submit so that we can accept you as a NEAR Certified Developer!**

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports");
module.exports.include.push("**/*.unit.spec.ts");

'''
'''--- asconfig.json ---
{
  "workspaces": [
    "src"
  ]
}

'''
'''--- package.json ---
{
  "name": "hello-world-demo-assemblyscript",
  "version": "0.0.1",
  "description": "very basic smart contract demo",
  "scripts": {
    "dev": "watch -d -n 1 'clear && yarn test'",
    "test": "yarn asp -f unit.spec",
    "clean": "rm -rf ./build && rm -rf ./neardev",
    "build": "asb --target debug",
    "build:release": "asb",
    "asp": "asp --verbose --nologo"
  },
  "keywords": [],
  "author": "hello@near.org",
  "license": "ISC",
  "devDependencies": {
    "@as-pect/cli": "^6.2.4",
    "eslint": "^8.12.0",
    "eslint-config-airbnb-typescript-prettier": "^5.0.0",
    "near-sdk-as": "^3.2.3",
    "prettier": "^2.6.1",
    "typescript": "^4.6.3"
  }
}

'''
'''--- prettier.config.js ---
// Remember to edit .vscode/settings.json like in https://paulintrognon.fr/blog/typescript-prettier-eslint-next-js

// https://prettier.io/docs/en/options.html
module.exports = {
  trailingComma: 'all',
  endOfLine: 'auto', // https://stackoverflow.com/a/53769213/
  printWidth: 180,
  bracketSpacing: true,
  useTabs: false,
  tabWidth: 2,
  semi: true,
  singleQuote: true,
  arrowParens: 'always',
  overrides: [
    {
      files: 'Routes.js',
      options: {
        printWidth: 200,
      },
    },
  ],
};

'''
'''--- scripts/1.dev-deploy.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 1: Build the contract (may take a few seconds)"
echo ---------------------------------------------------------
echo

yarn build

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Deploy the contract"
echo ---------------------------------------------------------
echo

near dev-deploy ./build/debug/src.wasm

echo
echo
echo ---------------------------------------------------------
echo "Step 3: Prepare your environment for next steps"
echo
echo "(a) Find the contract (account) name in the message above."
echo "    It will look like this: [ Account id: dev-###-### ]"
echo
echo "(b) Set an environment variable using this account name."
echo "    See example below (this may not work on Windows)."
echo
echo ---------------------------------------------------------
echo 'export CONTRACT=dev-1648309481351-57754638618310'
echo ---------------------------------------------------------
echo

exit 0

'''
'''--- scripts/2.use-contract.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for environment variable with contract name"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Call 'view' functions on the contract"
echo
echo "(run this script again to see changes made by this file)"
echo ---------------------------------------------------------
echo

near view $CONTRACT helloWorld

echo
echo

near view $CONTRACT read '{"key":"some-key"}'

echo
echo
echo ---------------------------------------------------------
echo "Step 2: Call 'change' functions on the contract"
echo ---------------------------------------------------------
echo

# the following line fails with an error because we can't write to storage without signing the message
# --> FunctionCallError(HostError(ProhibitedInView { method_name: "storage_write" }))
# near view $CONTRACT write '{"key": "some-key", "value":"some value"}'
near call $CONTRACT write '{"key": "some-key", "value":"some value"}' --accountId $CONTRACT

echo
echo "Now run this script again to see changes made by this file."
exit 0

'''
'''--- scripts/3.cleanup.sh ---
#!/usr/bin/env bash

# exit on first error after this point to avoid redeploying with successful build
set -e

echo
echo ---------------------------------------------------------
echo "Step 0: Check for required environment variables"
echo ---------------------------------------------------------
echo

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$BENEFICIARY" ] && echo "Missing \$BENEFICIARY environment variable" && exit 1
[ -z "$CONTRACT" ] || echo "Found it! \$CONTRACT is set to [ $CONTRACT ]"
[ -z "$BENEFICIARY" ] || echo "Found it! \$BENEFICIARY is set to [ $BENEFICIARY ]"

echo
echo
echo ---------------------------------------------------------
echo "Step 1: Delete $CONTRACT, setting $BENEFICIARY as beneficiary"
echo ---------------------------------------------------------
echo
near delete $CONTRACT $BENEFICIARY

echo
echo ---------------------------------------------------------
echo "Step 2: Clean up project folders"
echo ---------------------------------------------------------
echo
yarn clean

exit 0

'''
'''--- src/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />
'''
'''--- src/__tests__/index.unit.spec.ts ---
import * as contract from '../assembly';

describe('Contract', () => {
  // VIEW method tests

  it('says hello', () => {
    expect(contract.helloWorld()).toStrictEqual('hello world');
  });

  it('reads data', () => {
    expect(contract.read('some key')).toStrictEqual('🚫 Key [ some key ] not found in storage. ( storage [ 0 bytes ] )');
  });

  // CHANGE method tests

  it('saves data to contract storage', () => {
    expect(contract.write('some-key', 'some value')).toStrictEqual('✅ Data saved. ( storage [ 18 bytes ] )');
  });
});

'''
'''--- src/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />
'''
'''--- src/asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"
}

'''
'''--- src/assembly/index.ts ---
// eslint-disable-next-line import/no-unresolved
import { storage, Context } from 'near-sdk-as';

// ----------------------------------------------------------------------------
// Simply returns the string 'hello world' (until you edit this function as instructed in the challenge)
export function helloWorld(): string {
  return 'hello world';
}
// ----------------------------------------------------------------------------

// private helper method used by read() and write() below
function storageReport(): string {
  return `storage [ ${Context.storageUsage} bytes ]`;
}

// read the given key from account (contract) storage
export function read(key: string): string {
  if (storage.hasKey(key)) {
    return `✅ Key [ ${key} ] has value [ ${storage.getString(key)!} ]`;
  } else {
    return `🚫 Key [ ${key} ] not found in storage. ( ${storageReport()} )`;
  }
}

// write the given value at the given key to account (contract) storage
export function write(key: string, value: string): string {
  storage.set(key, value);
  return `✅ Data saved. ( ${storageReport()} )`;
}

'''
'''--- src/tsconfig.json ---
{
  "extends": "../node_modules/assemblyscript/std/assembly.json",
  "include": ["./**/*.ts"]
}

'''
'''--- src/utils.ts ---
// eslint-disable-next-line import/no-unresolved
import { u128, Context, ContractPromise } from 'near-sdk-as';

/**
 * == TYPES ====================================================================
 */

/**
 * Account IDs in NEAR are just strings.
 */
export type AccountId = string;

/**
 * Gas is u64
 */
export type Gas = u64;

/**
 * Amounts, Balances, and Money in NEAR is are u128.
 */

export type Amount = u128;

export type Balance = Amount;

export type Money = Amount;

/**
 * Timestamp in NEAR is a number.
 */
export type Timestamp = u64;

/**
 * == CONSTANTS ================================================================
 *
 * ONE_NEAR = unit of NEAR token in yocto Ⓝ (1e24)
 * XCC_GAS = gas for cross-contract calls, ~5 Tgas (teragas = 1e12) per "hop"
 * MIN_ACCOUNT_BALANCE = 3 NEAR min to keep account alive via storage staking
 *
 * TODO: revist MIN_ACCOUNT_BALANCE after some real data is included b/c this
 *  could end up being much higher
 */

export const ONE_NEAR = u128.from('1000000000000000000000000');
export const XCC_GAS: Gas = 20_000_000_000_000;
export const MIN_ACCOUNT_BALANCE: u128 = u128.mul(ONE_NEAR, u128.from(3));

/**
 * == FUNCTIONS ================================================================
 */

/**
 * @function asNEAR
 * @param amount {u128} - Yocto Ⓝ token quantity as an unsigned 128-bit integer
 * @returns {string}    - Amount in NEAR, as a string
 *
 * @example
 *
 *    asNEAR(7000000000000000000000000)
 *    // => '7'
 */
export function asNEAR(amount: u128): string {
  return u128.div(amount, ONE_NEAR).toString();
}

/**
 * @function toYocto
 * @param amount {number} - Integer to convert
 * @returns {u128}        - Amount in yocto Ⓝ as an unsigned 128-bit integer
 *
 * @example
 *
 *    toYocto(7)
 *    // => 7000000000000000000000000
 */
export function toYocto(amount: number): u128 {
  return u128.mul(ONE_NEAR, u128.from(amount));
}

/**
 * Function to assert that the contract has called itself
 */
export function assertSelf(): void {
  const caller = Context.predecessor;
  const self = Context.contractName;
  // eslint-disable-next-line eqeqeq
  assert(caller == self, 'Only this contract may call itself');
}

export function assertSinglePromiseSuccess(): void {
  const x = ContractPromise.getResults();
  assert(x.length === 1, 'Expected exactly one promise result');
  assert(x[0].succeeded, 'Expected PromiseStatus to be successful');
}

'''