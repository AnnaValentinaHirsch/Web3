*GitHub Repository "furkancetinalp/NCD_Appointment"*

'''--- README.md ---
#                                                 NEAR CERTIFIED DEVELOPER PROGRAM 

LOOM VIDEO : https://loom.com/share/6457f1addc764e95967796e1b9d2ff3a

## APPOINTMENT APPLICATION
Appointment application will allow people to register in May.
#### There are some conditions in order to register:
Age, a valid day selection.
Each account can only register for one day.
No accounts can be registered for same day.

The users can change their appointment days if the requested day is valid and available. Otherwise, program will not allow it.
The users can see details about their appointment days.
The users can delete their records.

### USAGE

##### 1) Clone
**`git clone https://github.com/furkancetinalp/NCD_Appointment.git`**

##### 2) Run 'yarn'
**`yarn`**

##### 3) Run 'yarn dev'
**`yarn dev`**

After running 'yarn dev', COPY the highlighted object(Account ID) 
![Ekran Görüntüsü (128)](https://user-images.githubusercontent.com/99509540/164363703-3596ab40-9ca5-4ce7-91b3-22e3eb6cc740.png)

#### 4) Set export 
**`export CONTRACT=<PASTE HERE>`** 

![Ekran Görüntüsü (138)](https://user-images.githubusercontent.com/99509540/164365376-95923215-a736-42f1-ac1e-af337a195212.png)

### FUNCTIONS

### appoint(name:string,age:32,day:u32)
Takes 3 parameters. 
Used for registration. 
Returns a string that validates the registration.

**`near call $CONTRACT appoint '{"name":"Your-name","age":Your-age,"day":Selected-day}' --accountId YOURtestnetAccount`**

Example usage:  near call $CONTRACT appoint '{"name":"Tom","age":30,"day":4}' --accountId fctt.testnet

### info()
Takes no parameters. 
Used for getting information about appointment details.
Returns a class with components. 

**`near call $CONTRACT information --accountId YOURtestnetAccount`**

Example usage: near call $CONTRACT information --accountId fctt.testnet

### changeDay(day:string)
Takes 1 parameter.
Used for changing the appointment date of the user. 
Returns a class with components.

**`near call $CONTRACT changeDay '{"day":New-Day}' --accountId YOURtestnetAccount`**

Example usage: near call $CONTRACT changeDay '{"day":24}' --accountId fctt.testnet

### delete()
Takes no parameters
Used for deleting the appointment info

**`near call $CONTRACT del --accountId YOURtestnetAccount`**

Example usage: near call $CONTRACT del --accountId fctt.testnet

'''
'''--- asconfig.json ---
{
  "extends": "near-sdk-as/asconfig.json"

}
'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" />

'''
'''--- assembly/index.ts ---
import {appointment} from "./model";

export function appoint(name:string,age:u32,day:u32):string{
  const a = new appointment(name,age,day);
  return a.register();
}

export function information():appointment{
  return appointment.info();
}

export function changeDay(day:u32):appointment{
  return appointment.changeDay(day);
}

export function del():string{
  return appointment.delete_account();
}

'''
'''--- assembly/model.ts ---
import { PersistentUnorderedMap, storage } from "near-sdk-as";
import {PersistentVector, Context } from "near-sdk-as";

//PersistentUnorderedMap values will record information about the appointment application.

//string =>class
export const final = new PersistentUnorderedMap<string,appointment>("fl");

//string =>string
export const registers = new PersistentUnorderedMap<string,string>("fk");

//int =>string
export const registered_days = new PersistentUnorderedMap<u32,string>("fj");

//Each person will have different classes.
@nearBindgen
export class appointment{
    
    name:string;
    day:u32;
    age:u32;
    contract_name:string;

    //Constructor will set the values from the user input
    constructor(name:string,age:u32,day:u32){
        this.name=name;
        this.age=age;
        this.day=day;
        this.contract_name=Context.sender;
    }

    //Function that accounts can register. No account is allowed to register more than once(If appointment is deleted, accounts can 
    //gister again)
    register():string{

      // Person object is created. If requirements are met, this will be added to the PersistentUnorderedMap values.
      const person = new appointment(this.name,this.age,this.day);
      
      //Checking if person is over 18
      assert(this.age >18,"Age must be 18 or older!!!");

      //In May, there are 31 days. Requestor cannot select a invalid day
      assert(this.day>0 && this.day<32,"Invalid Day Selection!!  Fifth month of the year(May) has 31 days (1 to 31)");

      //Checks if the person has made a register before. If yes, The program will not allow to register one more time.
      assert(!registers.contains(this.contract_name),"That account already registered before!!!!");

      //If selected day has been registered before, program will warn and tell the requester which account made appointment for that day.
      if(registered_days.contains(this.day)){
        //when if statement works, only the line below will be executed and rest of the lines will become invalid. 
        return `May ${this.day} is registered by ${registered_days.getSome(this.day)}!! Please choose another day!!`;
      }

      registered_days.set(this.day,this.contract_name);

      //If assert methods don't give an alert, appointment will be made. 
      registers.set(this.contract_name,this.name);
      
      final.set(this.contract_name,person);

      //Informs the user about registeration.
      return `${this.contract_name} is registered successfully as ${registers.getSome(this.contract_name)}. Appointment Date: May ${this.day}`;

    }
    //Function that returns information about the person and appointment details.
    static info():appointment{
      const msgsender = Context.sender;
      
      //if the account is not found, program alerts! 
      assert(registers.contains(msgsender),"This account has not made an appointment before");

      //Returns appointment information for the account.
      return final.getSome(msgsender);
    }

    //Function that allows registered users to change their appointment date.
    static changeDay(new_day:u32):appointment{
      //Smart contract gets the acccount that calls the function.
      const msgsender = Context.sender;

      //If no data found, there will be a warning
      assert(registers.contains(msgsender),"No registry found!!!");

      //The user has to choose a valid day.
      assert(new_day<32 && new_day>0,"Invalid day!!!!!!!");
      
      //If 'day' has been registered before, program will not allow to register on the same day.
      assert(!registered_days.contains(new_day),"The day is registered before!!! Please choose another day!!");

      const old_day = final.getSome(msgsender).day;

      const name = final.getSome(msgsender).name;
      const age = final.getSome(msgsender).age;
      const person = new appointment(name,age,new_day);

      final.delete(msgsender)
      final.set(msgsender,person);

      registered_days.delete(old_day);

      //'New day' value is set to unorderedmap.
      registered_days.set(new_day,msgsender);

      return final.getSome(msgsender);

    }

    //Function that allows registered users to delete their appointment date.
    static delete_account():string{
      const msgsender = Context.sender;
      const old_day = final.getSome(msgsender).day;

      //If there is no record for the account, there will be a warning.
      assert(final.contains(msgsender),"No registry found!!");

      registers.delete(msgsender);
      registered_days.delete(old_day);
      final.delete(msgsender);

      //Returns a message after deleting the appointment.
      return `Registry for ${msgsender} has been removed successfully!!!`;
    }
   

}
'''
'''--- assembly/tsconfig.json ---
{
  "extends": "assemblyscript/std/assembly.json",
  "include": [
    "./**/*.ts"
  ]
}
'''
'''--- index.html ---
<!DOCTYPE html>
<html lang="en">
<head>
<script type="module">
import { add } from "./build/release.js";
document.body.innerText = add(1, 2);
</script>
</head>
<body></body>
</html>

'''
'''--- package.json ---
{
  "name": "ncd",
  "version": "1.0.0",
  "main": "index.js",
  "repository": "https://github.com/furkancetinalp/final.git",
  "author": "Furkan Cetinalp <cetinalp.furkan0@gmail.com>",
  "license": "MIT",
  "dependencies": {
    "@assemblyscript/loader": "^0.20.4",
    "asbuild": "^0.2.0",
    "assemblyscript": "^0.20.4",
    "near-cli": "^3.2.0",
    "near-sdk-as": "^3.2.3"
  },
  "type": "module",
  "exports": {
    ".": {
      "import": "./build/release.js",
      "types": "./build/release.d.ts"
    }
  },
  "scripts": {
    "build:release": "asb",
    "deploy": "near dev-deploy build/release/ncd.wasm",
    "dev": "yarn build:release && yarn deploy",
    "test": "asp"
  },
  "devDependencies": {
    "assemblyscript": "^0.20.4"
  }
}
'''
'''--- scripts/1.init-contract.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable"
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable"

echo --------------------------------------------
echo
echo "cleaning up the /neardev folder"
echo
rm -rf ./neardev

# exit on first error after this point to avoid redeploying with successful build
set -e

echo --------------------------------------------
echo
echo "rebuilding the contract (release build)"
echo
yarn build:release

echo --------------------------------------------
echo
echo "redeploying the contract"
echo
near dev-deploy ./build/release/ncd.wasm

echo --------------------------------------------
echo run the following commands
echo
echo 'export CONTRACT=<dev-123-456>'
echo 'export OWNER=<your own account>'
echo
echo

exit 0
'''
'''--- scripts/2.add-appointment.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

echo
echo 'About to call add() on the contract to make an appointment date'
echo
echo 'ATTEMPT TO MAKE AN APPOINTMENT DATE'
echo
echo \$CONTRACT is $CONTRACT
echo \$OWNER is $OWNER

echo \$1 is [ $1 ] '(name)'
echo \$2 is [ $2 ] '(age)'
echo \$3 is [ $3 ] '(day)'
echo

near call $CONTRACT appoint '{"name":"'$1'", "age": '$2', "day":'$3'}' --account_id $OWNER 

'''
'''--- scripts/3.show-record.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

echo
echo 'About to call information() on the contract'
echo
echo
echo 'SHOWING INFORMATION ABOUT APPOINTMENT DETAILS FOR THIS ACCOUNT'
echo
echo
echo "CONTRACT is [ $CONTRACT ]"
echo "OWNER is [ $OWNER ]"
echo
echo

near call $CONTRACT information '{}' --accountId $OWNER

echo
echo

'''
'''--- scripts/4.change-day.sh ---
#!/usr/bin/env bash
set -e

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

echo
echo 'About to call changeDay() on the contract'
echo 
echo
echo 'ATTEMPTING TO CHANGE THE APPOINTMENT DATE!!!!'
echo
echo \$CONTRACT is $CONTRACT
echo \$OWNER is $OWNER
echo
echo \$1 is [ $1 ] '(new day)'

near call $CONTRACT changeDay '{"day":'$1'}' --account_id $OWNER 

'''
'''--- scripts/5.delete-appointment.sh ---
#!/usr/bin/env bash

[ -z "$CONTRACT" ] && echo "Missing \$CONTRACT environment variable" && exit 1
[ -z "$OWNER" ] && echo "Missing \$OWNER environment variable" && exit 1

set -e

echo
echo 'About to call del() on the contract'
echo
echo
echo 'REMOVING APPOINTMENT RECORD FOR THIS ACCOUNT!!!'
echo
echo \$CONTRACT is $CONTRACT
echo \$OWNER is $OWNER
echo

near call $CONTRACT del '{}' --accountId $OWNER
'''
'''--- tests/index.js ---
import assert from "assert";
import { add } from "../build/debug.js";
assert.strictEqual(add(1, 2), 3);
console.log("ok");

'''