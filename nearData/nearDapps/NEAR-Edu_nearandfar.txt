*GitHub Repository "NEAR-Edu/nearandfar"*

'''--- .vscode/settings.json ---
{
  "cSpell.ignoreWords": [
    "frontmatter",
    "vuepress"
  ]
}
'''
'''--- README.md ---
# NEAR and FAR from _any_ Coding

An introductory course to NEAR for non-programmers

## This is the project folder for the course website
 - built with [VuePress 2](//v2.vuepress.vuejs.org/)
 - used the [VuePress Mix Theme](//vuepress-theme-mix.vercel.app/)

### To run this site locally:
 - Clone this repo 
 - Open your terminal cd to the root folder of this project and run `yarn` 
 - `yarn dev` - spins up a dev server at `localhost:8080`
 - `yarn clean` - cleans the directory using the configs from  `lerna.json`
 - `yarn build` - builds the static site in the  `public` directory

'''
'''--- lerna.json ---
{
  "version": "1.3.0",
  "npmClient": "yarn",
  "useWorkspaces": false,
  "command": {
    "version": {
      "allowBranch": "release",
      "conventionalCommits": true,
      "exact": true,
      "ignoreChanges": [
        "**/*.md"
      ],
      "message": "chore(release): %s"
    }
  }
}
'''
'''--- package.json ---
{
  "name": "near-and-far-course",
  "version": "0.0.4",
  "description": "intro course to NEAR for non-programmers",
  "main": "index.js",
  "authors": {
    "name": "Ben",
    "email": "ben@near.foundation"
  },
  "repository": "https://github.com/humanman/near-and-far-course.git/near-and-far-course",
  "scripts": {
    "clean": "lerna run clean --stream",
    "dev": "vuepress dev src",
    "build": "vuepress build src"
  },
  "license": "MIT",
  "devDependencies": {
    "@vuepress-theme-mix/vuepress-plugin-back-top": "^1.3.2",
    "@vuepress/plugin-docsearch": "^2.0.0-alpha.1",
    "@vuepress/plugin-google-analytics": "^2.0.0-beta.43",
    "lerna": "^4.0.0",
    "node-sass": "^7.0.1",
    "sass-loader": "^12.6.0",
    "vuepress": "^2.0.0-beta.43",
    "vuepress-theme-mix": "^1.3.2"
  },
  "engines" : {
    "node" : ">=16.14.2"
  }
}

'''
'''--- src/.vuepress/clientAppEnhance.js ---
import { defineClientAppEnhance } from '@vuepress/client'
import Quiz1 from './components/Quiz1.vue'
import Quiz2 from './components/Quiz2.vue'
import Quiz3 from './components/Quiz3.vue'
import Quiz4 from './components/Quiz4.vue'
import Quiz5 from './components/Quiz5.vue'
import SheildDetect from './components/SheildDetect.vue'

export default defineClientAppEnhance(({ app, router, siteData }) => {
  app.component('Quiz1', Quiz1)
  app.component('Quiz2', Quiz2)
  app.component('Quiz3', Quiz3)
  app.component('Quiz4', Quiz4)
  app.component('Quiz5', Quiz5)
  app.component('SheildDetect', SheildDetect)
})
'''
'''--- src/.vuepress/config.ts ---
import { defineUserConfig } from 'vuepress'
import { mixTheme } from 'vuepress-theme-mix'
import { navbar, sidebar } from './configs'
import { googleAnalyticsPlugin } from '@vuepress/plugin-google-analytics' 

const isProd = process.env.NODE_ENV === 'production'

export default defineUserConfig({
  // Site Config
  base: '/',

  head: [['script', {}, `
      (function() {
        if (typeof window.GleapActions === 'undefined') {
          !function(Gleap,e,key){if(window.GleapActions=[],Gleap=window.Gleap=window.Gleap||[],!Gleap.invoked){for(Gleap.invoked=!0,Gleap.methods=['identify','clearIdentity','attachCustomData','setCustomData','removeCustomData','clearCustomData','registerCustomAction','logEvent','sendSilentBugReport','startFeedbackFlow','open','hide','on','setLanguage','setLiveSite','initialize'],Gleap.f=function(e){return function(){var a=Array.prototype.slice.call(arguments);window.GleapActions.push({e,a});};},e=0;e<Gleap.methods.length;e++)key=Gleap.methods[e],Gleap[key]=Gleap.f(key);Gleap.load=function(k){var b='https://gleapcdn.com/latest/';var h=document.getElementsByTagName('head')[0];var n=document.createElement('link');n.onload=function(){var t=document.createElement('script');t.type='text/javascript',t.async=!0,t.src=b+'index.js',h.appendChild(t);},n.rel='stylesheet',n.type='text/css',n.href=b+'index.min.css',n.media='all',h.appendChild(n);},Gleap.load(),
          Gleap.initialize('yZroETjHPuk4gvs2lbKFnxf6Lc8R8HMu');
          }}();
        }
      })();
  `],
  ['script', {}, `
    window._mfq = window._mfq || [];
    (function() {
      if (document.getElementById('mfScript') !== null) return;
      var mf = document.createElement("script");
      mf.id="mfScript"
      mf.type = "text/javascript"; mf.defer = true;
      mf.src = "//cdn.mouseflow.com/projects/7c7a81fc-0346-4408-8125-b1b1e6249fa8.js";
      document.getElementsByTagName("head")[0].appendChild(mf);
    })();
  `],
  ['script', {}, `
    window.dataLayer = window.dataLayer || [];
    function gtag(){dataLayer.push(arguments);}
    (function() {
      if (document.getElementById('gaScript') !== null) return;
      var gascript = document.createElement("script");
      gascript.id="gaScript";
      gascript.type = "text/javascript"; gascript.async = true;
      gascript.src = "//www.googletagmanager.com/gtm.js?id=GTM-KBSZS97";
      document.getElementsByTagName("head")[0].appendChild(gascript);
      gtag('js', new Date());
    })();
  `]
],

  locales: {
    '/': {
      lang: 'en-US',
      title: 'NEAR and Far from Any Coding', // for broswer tabs
      description: 'An intro to NEAR for non-programmers',
    }
  },

  // Theme Config
  theme: mixTheme({
    logo: '/images/logos/near_icon.svg',
    title: 'NEAR and Far from Any Coding', // for navbar
    docsRepo: 'gavinliu6/vuepress-theme-mix',
    docsDir: 'docs',
    editLink: true,
    lastUpdated: true,

    locales: {
      '/': {
        navbar: navbar.en,
        sidebar: sidebar.en,
      }
    },

    themePlugins: {
      git: isProd,
    },
  }),

  // Directory Config
  dest: 'public',

  // ga plugin not working. using head injection instead
  plugins: [
    // googleAnalyticsPlugin({
    //   id: 'G-M2T62EJLD6'
    // })
  ]
})
'''
'''--- src/.vuepress/configs/index.ts ---
export * as navbar from './navbar'
export * as sidebar from './sidebar'
'''
'''--- src/.vuepress/configs/navbar/en.ts ---
import type { NavbarConfig } from 'vuepress-theme-mix'

export const en: NavbarConfig = [
  {
    text: 'Home',
    link: '/',
  },
  {
    text: 'Course Chapters',
    children: [
      '/computer/',
      '/internet/',
      '/web2/',
      '/web3/',
      '/near/',
    ],
  },
  {
    text: 'Activities',
    children: [
      '/activities/'
    ],
  },
  // {
  //   text: 'VuePress',
  //   link: 'https://v2.vuepress.vuejs.org/',
  // },
  // {
  //   text: 'GitHub',
  //   link: 'https://github.com/gavinliu6/vuepress-theme-mix',
  // },
]
'''
'''--- src/.vuepress/configs/navbar/index.ts ---
export * from './en'
'''
'''--- src/.vuepress/configs/sidebar/en.ts ---
import type { SidebarConfig } from 'vuepress-theme-mix'

export const en: SidebarConfig = {
  '/': [
    {
      type: 'group',
      text: 'Sections',
      link: '',
      children: [
        '/computer',
        '/internet',
        '/web2',
        '/web3',
        '/near'
      ],
    },
  ],
  '/activities/': [
    {
      type: 'group',
      text: 'Sections',
      link: '',
      children: [
        ''
      ],
    },
  ],

  '/configuration/': [
    {
      type: 'link-group',
      text: 'Configuration',
      link: '',
      children: [
        'basic',
        'navbar',
        'sidebar',
        'page',
        'markdown',
        'i18n',
        'plugins',
      ],
    },
  ],
}
'''
'''--- src/.vuepress/configs/sidebar/index.ts ---
export * from './en'
'''
'''--- src/.vuepress/public/images/logos/near_icon.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 288 288"><g id="Layer_1" data-name="Layer 1"><path d="M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z"/></g></svg>
'''
'''--- src/activities/README.md ---
# Exploring Contracts

No matter what you end up doing in web3, you will eventually need to understand what’s going on in a smart contract since it connects us to the blockchain. 

Just remember, source code is just a set of instructions. It’s written by humans, and should be readable by humans.

## :mag_right: Scavenger Hunt

We all know what a scavenger hunts are. They task us with finding certain things in unfamiliar territory. It’s a great way to explore unfamiliar spaces, and that’s exactly what we will be doing today.

This exercise is about getting familiar reading code. There is no writing code, but by the end, you will be able to make sense and reason about what is going on a simple AssemblyScript contract. 

Just pretend you’re strolling through a museum looking at art. 

Some art you might understand, and some might seem very puzzling. 

That’s all you’re doing here. You’re just strolling through a page of code, and seeing what you think of it.

Ok, You ready? Just take 15-20 seconds max to glance through it.

Seriously, it’s fine. It’s just instructions written by a human, so it needs to be readable by humans too!

Ok here it comes...

## Contract

```tsx
import { context, logging, storage, PersistentDeque } from "near-sdk-as";

/**
 * showYouKnow is a
 * - "view" function (ie. does not alter state)
 * - that takes no parameters
 * - and returns nothing
 *
 * - it has the side effect of appending to the log
 */
export function showYouKnow(): void {
  logging.log("showYouKnow() was called");
}

/**
 * sayHello is a
 * - "view" function (ie. does not alter state)
 * - that takes no parameters
 * - and returns a string
 *
 * - it has the side effect of appending to the log
 */
export function sayHello(): string {
  logging.log("sayHello() was called");

  return "Hello!";
}

/**
 * sayMyName is a
 * - "call" function (although it does NOT alter state, it DOES read from context)
 * - that takes no parameters
 * - and returns a string
 *
 * - it has the side effect of appending to the log
 */
export function sayMyName(): string {
  logging.log("sayMyName() was called");

  return "Hello, " + context.sender + "!";
}

/**
 * saveMyName is a
 * - "call" function (ie. alters state)
 * - that takes no parameters
 * - saves the sender account name to contract state
 * - and returns nothing
 *
 * - it has the side effect of appending to the log
 */
export function saveMyName(): void {
  logging.log("saveMyName() was called");

  storage.setString("sender", context.sender);
}

/**
 * saveMyMessage is a
 * - "call" function (ie. alters state)
 * - that takes one parameters
 * - saves the sender account name and message to contract state
 * - and returns nothing
 *
 * - it has the side effect of appending to the log
 */
export function saveMyMessage(message: string): bool {
  logging.log("saveMyMessage() was called");

  assert(message.length > 0, "Message can not be blank.");
  const messages = new PersistentDeque<string>("messages");
  messages.pushFront(context.sender + " says " + message);

  return true;
}

/**
 * getAllMessages is a
 * - "view" function (ie. does not alter state)
 * - that takes no parameters
 * - reads all recorded messages from contract state (this can become expensive!)
 * - and returns an array of messages if any are found, otherwise empty array
 *
 * - it has the side effect of appending to the log
 */
export function getAllMessages(): Array<string> {
  logging.log("getAllMessages() was called");

  const messages = new PersistentDeque<string>("messages");
  let results = new Array<string>();

  while (!messages.isEmpty) {
    results.push(messages.popBack());
  }

  return results;
}
```

In that 20 seconds what do you *think* might be going on? It’s totally fine if you have no idea, and got caught up in the pretty colors (syntax highlighting); that’s supposed to happen.

This is an AssemblyScript code. Contracts built for NEAR can also be written in Rust.

Now that you have a sense of what a contract looks like, let’s start the hunt:

## **First Step: Identifying**

*Note, some of these may only take you **a few seconds** to complete so don't overthink things. This activity is about exposure to smart contracts written using AssemblyScript for the NEAR platform.* 

Find examples of the following (*HINT*: read ****the comments 😉 ):

- [ ]  a contract method that takes no parameters
- [ ]  a contract method that takes one parameter
- [ ]  a contract method that returns something
- [ ]  a contract method that does *not* return something
- [ ]  a contract method that is considered a “view” call
- [ ]  a contract method that is considered a “call” function

Without know much of anything about this contract, you found 4 types of methods(functions), and 2 types of contract-specific methods. Congratulations! You know read your first AssemblyScript contract 🥳

## **Second Step: Reasoning**

*Let’s drill a little deeper, and try to figure out what this contract actually does. You may already have an idea from the previous step, since the developer who wrote this contract comments their code* 🙏

1. From just reading the code(ie method names, comments, parameters, return values, etc.) what do you think a good name for this contract should be? 

1. Look at the very first line of the code that starts with `import`
    1. What would you guess each resource that’s imported from `near-sdk-as` does?
    2. Spend about 10 seconds on each resource, and see where it appears in the code. 
    
    Look at how each one is used, and try to reason what each one might be doing in just a few words:
    
    - [ ]  context
    - [ ]  logging
    - [ ]  storage
    - [ ]  PersistentDeque
    
2. Finally, what general questions do you have about this contract? Is it doing everything you think it should be doing? Based on the name you gave it, what else do you think it should do?

You did it! You’ve both read and reasoned about a smart contract! I mean, there’s a ton more to learn about contracts, but this is a solid first step.
'''
'''--- src/activities/scavenger-hunt-standard.md ---

'''
'''--- src/computer/README.md ---
---
next: '/internet/'
---

<!-- <ClientOnly>
  <SheildDetect/> 
</ClientOnly> -->

![](/images/course/computer_thumbs-up.gif)

# 1. You and Your Computer

## Introduction

### Think of your computer as your house

<div class="asset-container">
    <img :src="$withBase('/images/course/house.png')" alt="home" class="course-asset">
</div>

#### How would you describe your house to a computer?
- It's broken down into smaller rooms maybe?
    - what is a room?
        - a component of your house? :heavy_check_mark: 
- Each room connects via one or more doorways.
- You can add rooms to your house.
- You can upgrade and / or merge existing rooms.
- You can "optimize" the layout so it warms and cools more efficiently or creates feng shui.
- If it burns down, you can rebuild it based on blueprints, and you can replace most of the items in it. Unfortunately, some things may not be replaceable.

### Your Computer is a Machine

#### How do you think your computer is organized?

- you might think of words like "hard drive", and "motherboard"
- your setup might involve 1-2 external monitors, a bluetooth mouse, and wireless keyboard
- you might mention whether your computer is a Mac or Windows or Linux

#### Now think about how you use everything you mentioned. 
- your description of using your mouse is probably different than that of using your keyboard
- you may mention why you chose to buy a Mac as opposed to a Windows computer

## _Interfaces_ of your computer

#### When we talk about how each part of a computer is organized, we are talking about its various _interfaces_

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_sl_kitchen.png')" alt="kitchen" class="slide">
</div>

- let's return to the analogy of your house
    - your kitchen is made up of a collection of interfaces
        - your stove has an interface
        - your fridge has an interface
        - even your faucet has an interface
        - you can interface with your kitchen's circuitry through your breaker panel 

::: tip interfaces
Another way to think about interfacing is human-to-human communication
- we have interfaces of our own to communicate with each other without the need of any technology. They include:
    - our faces
    - our 5 senses
    - our expressions

:::

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_sl_interfaces.png')" alt="diagram of interfaces" class="slide">
</div>

Your computer is organized through two types of **interfaces**

### _peripheral_ interfaces :desktop_computer:
  
- hard drive 
- keyboard
- mouse
- screen

----

### _software_ interfaces :blue_book:

- interface drivers
  - programs or sets of programs
      - set of instructions that tell a piece of hardware how to function
- operating system
  - software that enables other software to communicate with hardware
- applications
  - programs designed for an end user
- scripts
  - set of instructions for another program to use

----

#### All of these interfaces "play" together to extend how your computer is used.

- hardware parts can be put together and taken apart again
- you can add new software and delete other software
- you can easily add multiple monitors, switch out keyboards, add a camera, etc.
- you can even run a _virtual machine_(**vm**), which is essentially a computer running inside your computer. In fact your computer has numerous VMs running at any given time.

#### this ability to break components down, and mix and match them is called _modularity_ :building_construction:
- the rooms in your house can be considered **modules**; same with your TV (a module), and your entertainment system as a whole (also a module).

---

## _Data_ and your Computer

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_data-st.gif')" alt="Data from Star Trek" class="course-asset">
</div>

#### What comes to mind when you hear "data"?

- information? :heavy_check_mark: 
- stuff that is stored on hard drives? :heavy_check_mark: 
- electrical signals? :heavy_check_mark: 

How does information pass through your computer, and how is it stored for later use? 

It may seem trivial, but when we talk about technology, we soon start to look at what data is doing when it's **in motion** and **at rest**

- when we press a key on our keyboard, a signal travels to our computer's brain and registers the key we pressed. It's always listening for something to interface with it.
  
- when we save a file, our computer's operating system gets instructions to store the contents of the file along with information about the file on our hard drive.

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_sl_data.png')" alt="diagram of states of data" class="slide">
</div>

### **data in motion** :runner: 
 
- from keyboard to machine
- from mouse to machine
- from monitor to your eyes
- from speakers to your ears

### **data at rest** :sleeping: 
- database
    - structure of how data is stored
- hard drive
    - physical addresses where data is stored as 1s and 0s.

::: tip your home's data

- back to the house analogy. What is the "data" of your house?
    - electricity and water systems?
        - water moving through your pipes when faucet is _on_ vs water stored in your pipes when faucet is _off_
    - pictures on the wall?
    - food in the fridge?
    - what about how your house is used - wear and tear?
        - in a way _you_ are your house's data since it's whole purpose is to handle _you_ in motion and _you_ at rest when you're using it

:::

## _Time_ and your Computer

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_time.gif')" alt="dancing clocks">
</div>

- it may feel strange to talk about time. Isn't it self-evident?
    - not as evident as you might think
    - our computers don't have to rely on time the same way we do
    - time is extremely important in web3, and we will soon learn that our idea of time is essentially thrown out the window when it comes to blockchain. 

- You can set time to whatever you want on your machine, but when two machines with different times talk to each other, we need to agree on what time to use.
    - this is just like when you make travel plans 
        - you need to double check timezones of flight and train times, for instance.

- What if _your_ computer is set 6 hours ahead of _my_ computer?
    - How do our computers do things at the "same" time?

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_sl_time.png')" alt="cpu clock" class="slide">
</div>
    
---

## Your Relationship with Your Computer

<div class="asset-container" style="position: relative; height:500px; top:-.5%;">
    <img :src="$withBase('/images/course/pc_vint.gif')" alt="vintage pc" style="position: absolute; left:50%;margin-right:-50%;top:50%;transform:translate(-50%,-50%);">
    <img :src="$withBase('/images/course/pc_pc.gif')" alt="pc" style="width:35%;position: absolute; left:0;margin-right:-50%;top:30%;transform:rotate(-15deg);">
    <img :src="$withBase('/images/course/hacker.gif')" alt="hacker" style="width:35%;position: absolute; right:0;top:30%;transform:rotate(25deg);">
    <img :src="$withBase('/images/course/canunot.gif')" alt="annoyed girl meme" style="width:25%;position: absolute; left:40%;top:60%;">
</div>

---

### _Identity_ 
    
<div class="asset-container">
    <img :src="$withBase('/images/course/pc_id.gif')" alt="scooby doo unmasking">
</div>

- Your _User Profile_ is your **identity** on your computer
    - _Guest Profile_ can't change your password.
    - but if I have your password, I have your identity as far as your computer is concerned. 
  
<div class="asset-container" style="position:relative; height: 500px;">
    <img :src="$withBase('/images/course/pc_sl_id.png')" alt="pc login page" class="slide">
    <img :src="$withBase('/images/course/spidey.gif')" alt="spidermen" class="animate-flicker" style="position:absolute; top: 55%; left: 50%;transform:translate(-50%,-50%);">
</div>

----

### _Ownership_ 

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_ownership.jpeg')" alt="angry pc user">
</div>

#### What does it mean to "own" your computer?
- just like your house. You can remodel it, tear it down - anything you want, because it's yours, right?
- you can add / remove the programs you want
- you can add / delete files, media and other **digital assets**
- you can replace your mouse, your hard drive, and your monitor
- you can even toss your computer in a pond (make sure to remove it though. We don’t want to pollute any ponds). 

----

## _Structure_ of your Computer :classical_building: 

#### What happens if you do throw your computer in a pond?
- Is the data on it gone forever, because it was all **centralized** on your computer and your computer alone?

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_vint-2.jpeg')" alt="vintage pc">
</div>

- Or is all or much of the data **distributed** accross one or more _other_ machines, and you only lost a portion of your data?

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_dist-1.jpeg')" alt="vintage pc distribution room">
</div>

- Or, even better, is the data not only distributed accross multiple machines, but **decentralized** so that each machine has a copy of _all_ your data? :crossed_fingers:

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_dist.jpeg')" alt="multiple vintage pc">
</div>

---
## Quiz

<div class="asset-container">
  <ClientOnly>
    <Quiz1 :nextChapter="$frontmatter['next']"/> 
  </ClientOnly>
</div>
'''
'''--- src/index.md ---
---
home: true
heroImage: /images/course/near_splash.jpg
tagline: An Intro course to NEAR for non-programmers
actions:
  - text: Start Course
    link: /computer/
footer: Made by Ben with ❤️
---

<!-- <ClientOnly>
  <SheildDetect/> 
</ClientOnly> -->

## Welcome to the Course!

Anyone with a computer and internet connection can take this course.

If you are interested in making sense of Web3, but you don't know how to read or write code, then you are in the right place :wink: 

You might even be considering attending a NEAR certification course, but already feel lost. Don't worry. This course is a great first step for you.

--- 

## Learning Objectives

### a novice to Web3 will be able to:
- confidently describe the idea of the open web
- confidently describe broad blockchain concepts 
- identify core features of any smart contract (view function, change function, etc.) :heart:
- confidently reason about a dApp
- learn to ask good questions
- reduce anxiety about taking a certification course
- understand the difference between testnet and mainnet
- identify and navigate to core primitives in the NEAR ecosystem
- describe why NEAR is carbon neutral and Bitcoin is not
- discuss identity, governance, and ownership in Web3

---

## Course Overview :teacher: 

----

1. **You and your Computer** :computer: 

<div class="asset-container">
    <img :src="$withBase('/images/course/pc_vint.gif')" alt="vintage computer">
</div>

- _Today computers take many different forms beyond laptops, tablets, and phones. The microchip to track your pet if they get lost? That’s a computer. Your AirPods are actually two computers, but they behave as one. These tiny computers are inside so many things we touch, but what are they? How can we learn to see them clearly?_

---

1. **You and the Internet** :computer: :telephone_receiver: :computer: 

<div class="asset-container">
    <img :src="$withBase('/images/course/arpanet.jpg')" alt="vintage computer">
</div>

 - _We often use the internet and web interchangeably, but in fact these are different things._ 
     - "The internet" refers to the _infrastructure_ 
         - **a network of networks** with rules for communicating, which keeps the web accessible at all times.

 - _The **web**, the pages we browse when we're online, is built on top of the internet._ 

---

1. **You and Web2.0** :spider_web: 

<div class="asset-container">
    <img :src="$withBase('/images/course/modern-web.jpeg')" alt="modern web">
</div>

 - _Once we start talking about browsers and web pages, we are in the domain of the modern web._ 

 - _You've heard of servers, but when we talk about using those servers to access and share information, we can start to see the differences between infrastructure and how it's used:_
     - the internet (infrastructure) = highway
     - the web (information) = rush hour, and billboards, and buses - oh my!

---

1. **You and Web3.0** :question: :spider_web::question: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web-3.jpg')" alt="web 3">
</div>

 - _Now that we understand that visiting a web site(Web2.0) is different than the WiFi(Internet) that brought it to your device(computer), we can start to imagine other ways to connect to each other. That's exactly what Web3.0, or Web3, is doing. It's re-imagining the web!_

 - _When we talk about the “open web” we are talking about a system in which users have both freedom and transparency. As opposed to the "closed" systems used by certain governments to limit free access to information, the open web is designed to be a cooperative effort among a community of users and builders_

 - _Why is Web3 so powerful and important? Because it has the ability to side-step centralized power structures that govern the internet. Web3 is all about open access to information with a level of privacy not attainable previously. Getting around Big Brother is a pretty big deal, isn’t it?_

 - _Why is it called Web3? Today, Web3 generally refers to a type of network consisting of many smaller networks that is still accessed through the existing internet, but with very different rules. Until Web3 fully breaks away from centralization, we can think of it and its infrastructure as another type of highway (like web2.0), but one where the toll roads pay YOU!_ 

---

1. **You and NEAR Protocol** :rocket: 

<div class="asset-container">
    <img :src="$withBase('/images/course/near_layers.jpeg')" alt="NEAR">
</div>

 
 - _It's an exciting time for Web3. By now you've seen dozens of ads that mention cryptocurrency. You may have scratched your head at whatever an NFT is, or perhaps gawked at the idea of pixel art selling for millions of dollars in “imaginary” money with silly names like Dogecoin, Ethereum, or even NEAR._
 
- _It can feel a bit overwhelming at first, but at it's core, Web3 is simply a decentralized network consisting of smaller decentralized networks_

 - _Decentralized networks can pretty much make up their own rules of engagement, so long as the outside world can access the information passing through them._

- _That's why Web3 can appear reliant on Web2, because it is! Pretty much everything in Web3 can be accessed through a modern browser._
 
 - _NEAR Protocol is no different - it's a system of distributed networks with its own rules, or **protocol**, for communicating, but it's accessible to anyone through any modern browser._

- _If you are eager to learn more about all this, then click the "Start Course" button below to get started!_
---

<div class="footer-link">
	<p class="actions">
    <router-link to="/computer/" class="nav-link action-button primary" aria-label="Start Course">Start Course</router-link>
	</p>
</div>
'''
'''--- src/internet/README.md ---
---
next: '/web2/'
---

<!-- <ClientOnly>
  <SheildDetect/> 
</ClientOnly> -->

# 2. You and the Internet

---
## Introduction

<div class="asset-container" style="position:relative;top:-25px;">
    <img :src="$withBase('/images/course/int_sl_intro.png')" alt="neighborhood and network" class="slide">
</div>

### The Internet is a Network (of networks) of Computers :satellite:

#### Think of your neighborhood. How is it organized?

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_net.png')" alt="neighborhood" class="slide">
</div>

- houses connect to each other through shared **interfaces**
    - electrical grids
    - sewage
    - waste management
- each house has its own address
- clusters of houses comprise neighborhoods
- apartment buildings can be considered neighborhoods with each floor being a cluster of condos, have one main entrance, and maybe a front desk, to handle traffic in / out of the building
- neighborhoods help cities manage how resources are distributed
- some neighborhoods are very densely populated :house_buildings::house_buildings::house_buildings:
- some neighborhoods are spread out :house::desert::desert::house:

## _Interfaces_ of the Internet

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_ip.png')" alt="network diagram" class="slide">
</div>

#### the internet is organized in a similar way to your neighborhood

- networks generally have one Network Access Point (NAP) to handle traffic in / out of the network
- networks facilitate traffic (data) across the internet
- some networks are densely populated :computer:  :computer:  :computer: 
- some are sparsely populated:computer:    :desert:    :desert:  :computer:

### peripheral interfaces
- clusters ( or **modules**) of computers, called **nodes**, comprise networks
    - these network computers are not designed to be used like your personal computer
    -  they are referred to as **nodes** to help clarify the distinction

### software interfaces
- computers connect to each other through their network **interfaces**
    - ethernet 2.0
    - IEEE 802.11 
    - VPC / VPN
- each computer has an address

::: tip mailboxes

When you mail a letter, you must properly address it, add correct postage, and any other rules or protocols set up by your region's mail delivery system or it will be returned. 

Networking **nodes** and **modules** isn't all that different (I mean, it is! But you get the idea )

:::

----

#### Neighborhood health relies on people getting along, usually through some set of rules every neighbor agrees to follow
- some neighborhoods have HOAs 
- some neighborhoods have community boards
- some employ neighborhood watch shifts
- some have regular block parties

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_net-health.png')" alt="neighborhood and network" class="slide">
</div>

---

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_net-diag-simple.png')" alt="neighborhood and network" class="flex-multi-row">
    <img :src="$withBase('/images/course/int_sl_net-diag-mid.png')" alt="neighborhood and network" class="flex-multi-row">
    <img :src="$withBase('/images/course/int_sl_net-diag-big.png')" alt="neighborhood and network" class="flex-multi-row">
</div>
<small style="margin: 0 0 0 25%;">three diagrams demonstrating progressively complex network systems</small>

----

#### _Network_ health relies on good node-to-node communication, and good module-to-module communication 

- each network has at least one Network Access Point (**NAP**)
    - _i.e. a front desk_
        - outsiders must talk to the front desk of your apartment building in order to talk to you
- these connections need to agree on basic rules called **protocols** that every **node** and **module** (cluster of nodes) must follow
- network protocols ensure that a connection between any two **nodes** will be available, reliable, and consistent 24 / 7

#### The set of rules that comprise how the internet works are called Internet Protocols (IP)
- Each node connected to the internet must have its own **IP address** so other nodes can find it. 

---

## _Data_ and the internet

<div class="asset-container">
    <img :src="$withBase('/images/course/int_data-st.jpg')" alt="Twin Datas from Star Trek">
</div>

#### Internet data is about connectivity

- **data** travels through the internet from one node to another until it reaches it's destination IP address. 
- think of it as the difference between a letter and the entire postal system
    - what is the "data" of a letter?
        - journal entry? :heavy_check_mark: 
        - to / from addresses? :heavy_check_mark: 
        - stamp? :heavy_check_mark: 

    - what is the "data" of a postal system?
        - routes? :heavy_check_mark: 
        - zipcodes? :heavy_check_mark: 
        - letter / package volume? :heavy_check_mark: 
    
#### data is handled in two basic ways on the internet

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_data.png')" alt="neighborhood and network" class="slide">
</div>

### **data in motion** :runner: 
  - data is broken down into packets
  - data reassembles when it reaches its destination

### **data at rest** :sleeping: 
  - some data is cached at NAPs
      - _your building's front desk "caches" info for all tenants_
          - i.e. _"Notice to all tenants: there will be..."_
  - service outages :skull_and_crossbones: 
      - nodes go offline
      - routers fail
      - congestion :traffic_light: 
  - data packets are cached in the nearest node
  - networks spin back up, and data packets resume travel
  - errors often occur when systems shutdown mid-execution

----

## _Time_ and the internet :clock11: 

<div class="asset-container">
    <img :src="$withBase('/images/course/int_time_sync-diag.png')" alt="network time diagram" style="max-width: 40%;">
    <img :src="$withBase('/images/course/int_sl_net-sync-time.png')" alt="network time sync diagram">
</div>

- Network Time Protocols (NTP) help networks sync time
    - one node is cast as the **layer 1** source of truth 
    - other nodes that sync with this node become **layer 2** nodes
    - other nodes that sync to layer 2 nodes become **layer 3** nodes, etc.
    - accuracy to 1ms
        - that's a long time for modern networks
        - if I have $100 and a super fast connection, I can wire you $100, my friend Bob $100, and my other friend Alice $100 - all before my bank realizes what happened.

- Your internet relies on whatever the network _thinks_ is the correct time.
    - it assumes the time given it by the network is trustworthy

#### We need to adjust and re-adjust how our computers measure time
- Y2K
    - Date formatted as YY instead of YYYY
        - '97...'98...'99...:fearful:
- Y2038
    - Unix time
        - counting the seconds since 1970
    - Imagine if a system could only count to 2,147,483,648 seconds 
        - and resets to zero each second after that...
        - we don't need to imagine it - just wait until 2038

  
---

## Your Relationship with the Internet

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_the-web.png')" alt="the 90s web" class="slide">
</div>

----

### _Identity_ 

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_comic.png')" alt="early internet comic" class="slide">
</div>

- Your IP Address is your identity
    - I may not know _who_ you are, but I know _where_ you're calling from

----

### _Ownership_ 

#### Who owns the internet? Not you!

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_own.png')" alt="internet ownership" class="slide">
</div>

- you don't own your apartment building or the roads and sidewalks that make it accessible

- businesses built their own networks and eventually agreed to connect those networks
- network owners can take a node or entire network offline
- your computer's access to the internet is entirely governed by centralized networks 
    - You are at their mercy
    - You pay for a service, not a right
- you have no say in how internet protocols are decided

----

## _Structure_ of the internet :classical_building: 

<div class="asset-container">
    <img :src="$withBase('/images/course/int_sl_struct.png')" alt="neighborhood and network" class="slide">
</div>

- The Internet is **distributed**
    - It doesn't go down when one node or network goes offline
        - _your_ internet going down isn't the same as _the_ internet going down

- The Internet _used_ to be **decentralized**
    - One computer connected to another computer, and so on

- The Internet quickly became **centralized**
    - each network has one access point (NAP)
        - one door to open or close
        - one point of failure for the entire network
    - network owners in control
        - access decided by a small group of people
        - vast distributed systems with numerous access points still controlled by a a handful of decision makers

---

## Quiz

<div class="asset-container">
  <ClientOnly>
    <Quiz2 :nextChapter="$frontmatter['next']"/> 
  </ClientOnly>
</div>

'''
'''--- src/near/README.md ---
<!-- <ClientOnly>
  <SheildDetect/> 
</ClientOnly> -->

# 5. You and NEAR Protocol :fireworks: 

## Introduction

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_intro.png')" alt="NEAR intro" class="slide">
</div>

#### Web3 is a network of blockchain networks, and NEAR is one of them 
- not all blockchains are alike

- **NEAR** is a Layer 1 (L1) blockchain
    - layer 2(L2) blockchains use architecture of existing blockchains
        - Polygon is built on top of Ethereum, which is a layer 1 blockchain
    - NEAR is built from the ground up
        - NEAR has its own chain with its own rules and architecture
- Instead of **PoW** to create trust, NEAR uses Proof of Stake(**PoS**)
    - **PoS** is humans validating transactions, and staking a large amount of money that they will be honest about it
        - validators can earn historical returns on their staking
        - it's cheaper to tell the truth than to lie
        - validators get "kicked" off the network if they don't follow certain rules 
        - PoS is CARBON NEUTRAL :earth_americas: :heart: 

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_mission.png')" alt="NEAR mission" class="slide">
</div>

## Interfaces on NEAR are similar to other Web3 networks

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_layers.png')" alt="NEAR layer model" class="slide">
</div>

#### **protocol layer** 
- base layer
    - L1 blockchain
- blockchain architecture
    - nodes split into mini processors (sharding) to improve network availability
    - PoS validation
    - localnet (aka devnet) for dApp development
    - testnet for testing dApps
    - mainnet for launching dApps

<div class="asset-container">
    <img :src="$withBase('/images/course/near_env.png')" alt="NEAR environments" class="slide">
</div>

#### **infrastructure layer**

- nodes are virtual computers you can download locally
    - when you download a node locally, you can refer to it as a client node since it will be interacting with the network in a similar way that your computer does.

- indexer nodes
    - nodes anyone can run locally to listen to network updates
    - querying all blocks in the chain can be cumbersome
    - Indexer makes it easier to search the blockchain
        - Google indexes web pages so they are easier to find

- block nodes
    - contain copy of the blockchain to increase network availability 

- archival nodes
    - contain copy of the _entire_ blockchain from its genesis

- validator nodes
    - nodes used by validators to review transactions

- [Wallet](https://wallet.near.org)
    - account management

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_wallet.png')" alt="NEAR wallet" class="slide">
</div>

- [Explorer](https://explorer.near.org/)
    - transaction history of any account

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_exp.png')" alt="NEAR explorer" class="slide">
</div>

- [JSON RPC](https://docs.near.org/docs/api/rpc) (Response-Procedure-Call) 
    - API for interacting with the blockchain

<div class="asset-container">
    <img :src="$withBase('/images/course/near_rpc-diag.png')" alt="NEAR explorer" class="slide">
</div>

#### **use case layer**
- DeFi
    - [ref.finance](https://ref.finance)
- Gaming
    - [berry.club](https://berryclub.io/)
- Bussiness Development
    - DAO
        - [Sputnik](httos://sputnik.fund) 

#### **access points layer**
- top layer
    - Wallet
    - Explorer
    - JSON RPC

- NEAR's infrastructure of **modules** can be broken down and reconfigured for new use cases
    
    - create new primitives like message protocols
        - [Machina](https://medium.com/nearprotocol/introducing-machina-the-worlds-first-proof-of-stake-storage-solution-built-on-near-fed2ed23dbfb) is a PoS decentralized storage solution built on NEAR
    - dApps can use any number of primitives for their use cases
        - how would you create AirBnB on NEAR? 

<div class="asset-container">
    <img :src="$withBase('/images/course/near_eco.jpeg')" alt="NEAR ecosystem" class="slide">
</div>

---

## **_Data_** and NEAR

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_data-st.png')" alt="NEAR ecosystem" class="slide">
</div>

----

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_data-states.png')" alt="NEAR ecosystem" class="slide">
</div>

### **data in motion** :runner: 
  - data travels accross many different protocols within the network
      - data fetched from centralized and /or decentralized database 
      - transaction data retrieved from JSON RPC and broken down into http packets that are returned to client
      - data about chain state propagated to entire network like gossip

### **data at rest** :sleeping: 
  - immutable data stored on chain
  - data stored in browser local storage
      - access keys
  - data stored on local machine
      - access keys
  - data temporalily stored in memory while dApp is running
      - access keys
  - data stored on _decentralized_ databases
      - IPFS
      - Machina

----

## **_Time_** on NEAR :clock12: 

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_time-diag.png')" alt="NEAR block height" class="slide">
</div>

- current block height is accessible to anyone with a computer and an internet connection
- new blocks are added every second
- some blocks contain zero transactions
- transactions _you_ make are queued using **nonces** (tally of transactions a given _key_ on _your_ account has made)
    - tx with nonce#4 isn't added to the chain until nonce#3 has been added

----

## Your Relationship with NEAR

<div class="asset-container">
    <img :src="$withBase('/images/course/near_basics-diag.png')" alt="NEAR ecosystem" class="slide">
</div>

----

### **_Identity_** :selfie: 

<div class="asset-container">
    <img :src="$withBase('/images/course/near_sl_id.png')" alt="NEAR Transaction diagram" class="slide">
</div>

- your mainnet account (_yourname_.near) allows you to interface with any other account
    - subaccounts you create (_myname_.yourname.near) can build your reputation
    - you are paid in $NEAR for your engagement in the network
        - earn to play
        - earn to learn

- contracts have accounts as well
- accounts can have zero or one contract deployed to them
- your account associated with your NEAR wallet does not have a contract deployed on it

----

### **_Ownership_** :key: 

<div class="asset-container">
    <img :src="$withBase('/images/course/near_tokens.jpg')" alt="NEAR token usecases" class="slide">
</div>

#### **you have complete control of your account**
- your wallet works like a keychain
- you can create keys for your account
    - key pairs - private and public, actually
    - private key is stored on your machine
    - public key is used to sign transactions
    - when you sign a transaction the transaction verifies that your hidden private key and your public key are indeed a valid key pair
- you can authorize dApps to add permissioned keys to your account
    - like when you give a valet a special "valet key" to park your car
        - the valet key has just enough functionality to get the task done
        - dApps basically do the same thing
            - they give you a **functional access** key
                - you can only call certain functions on the dApp's contract with it
                - you don't have **full access** 
                    - **full access** keys allow you complete control over an account
- you can de-authorize a dApp on your account
    - this is like signing in with google
        - google confirms you are authorizing the app on your google account
            - you can set special permissions like allowing google to read and edit your calendar
        - you can de-authorize any web apps associated with you google account too - web3 is very similar
- you can delete all keys from your account, and render it inaccessible by anyone (including you!) forever

#### **you are your own security** :lock_with_ink_pen: 
- no one can remove assets from your wallet without your permission
- if someone gets your private key, however, they have full access to your account
    - your funds are at the whim of whoever has your private key
    - :warning: **!!!NEVER SHARE YOUR PRIVATE KEYS!!!** :warning: 
    - there are no middlemen in Web3
        - no one at NEAR has the ability to "reset your password"
    - be vigilant! 
        - store your seed phrase outside of any devices connected to the internet
        - rotate your keys periodically

::: warning

**Beware of phishing scams!** Quite often scammers will try to trick you into revealing your password with fake wallet sites. Always check the url of the web page you are on. 

:::

#### **transactions are irreversible**
- if you send / receive funds **no one can reverse the transaction**
- your transaction history is available to anyone at anytime
    - hyper-transparency
    - no privacy on the blockchain
        - do not store anything you aren't ready to share with the rest of the world

- NEAR has standards the NFT contracts must follow to be considered current and credible
    - if an NFT contract lists you as the owner of a digital asset, your ownership is indisputable.

----

## _Structure_ of NEAR :classical_building: 

#### NEAR is _decentralized_
- NEAR is community based
- NEAR doesn't own any nodes on its network

#### NEAR is part of Web3, and therefore relies on Web2, which is very much centralized

<div class="asset-container">
    <img :src="$withBase('/images/course/near_splash.jpg')" alt="NEAR ecosystem" class="slide">
</div>

---
## Quiz

<div class="asset-container">
  <ClientOnly>
    <Quiz5/> 
  </ClientOnly>
</div>

---
## Epilogue

#### **What questions to ask?**
- remember, although we are building something new, the ideas have been around for a long time.
    - at it's core, the web is just requests and responses between clients and servers; if that relationship isn't clear when reviewing a dApp then your questions should investigate that 
- Hopefully, the analogy of your house and neighborhoods being like computers and networks will help you make sense of distributed systems
    - When you hear "node", you now know that could mean several different things:
        - some sort of computer, right?
            - probably a computer in a network
        - did you know "node" could also refer to a programming language called NodeJs?
            - many contracts are built in a "node environment". When you hear "environment" it's usually a clue that they are talking about NodeJs.

---

## What Next?

- [Smart Contract Scavenger Hunt](/activities/)

- [Check out NEAR University](https://near.university)

- [Learn to build on NEAR!](https://near.academy/)

- [Take a NEAR Certification course](https://airtable.com/shrr8CbYRDHflkgI9?prefill_schedule=rec36OOvSYh1Roh8n)

- [Learn the Fundamentals of Computer Science](https://www.youtube.com/playlist?list=PLhQjrBD2T383f9scHRNYJkior2VvYjpSL)
'''
'''--- src/web2/README.md ---
---
next: '/web3/'
---
<!-- 
<ClientOnly>
  <SheildDetect/> 
</ClientOnly> -->

# 3. You and Web2.0

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_intro.png')" alt="web 2 intro" class="slide">
</div>

----
## Introduction

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_web2.png')" alt="web1 vs web2" class="slide">
</div>

- neighborhood layout vs block parties
- infrastructure vs information
- highway vs rush hour (and billboards and bus rides...)
- _network_ **interfaces** vs _web_ **interfaces**

::: tip what about web 1??

- Web1.0 worked like a giant encyclopedia
- it can be considered a content delivery network (CDN)
    - content was simply delivered to your computer
    - _generally_ you couldn't update the information served to you.
- Web2.0 extended how the web was used by allowing users to "interact" more with the web
    - think of the book "Tarzan" vs the book "Choose your own adventure: Tarzan" (or "MadLibs: Tarzan")

:::

----

### The web is the information users access on the internet
- it's the mail that is delivered to houses in your neighborhood

#### Web _interfaces_ = applications and browsers
- application interfaces interpret each other's instructions
    - Application Programming Interface (**API**)
        - APIs are each application's **interpreter** when other applications talk to them 
    
----

#### The Web is servers and clients
- servers and clients are computers
- servers are the _back_ end of the web
- clients are the _front_ end of the web
- clients make requests to servers
- servers listen and respond to requests from clients 
- servers talk to other servers on behalf of clients

::: tip How do servers "listen"?

Servers use **ports** to listen for events. Ports are like your mailbox. Your mailbox isn't your address, but it's where you send and receive mail. Ports are like a server's mailbox.

:::

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_servers-everywhere.png')" alt="web 2 intro" class="slide">
</div>

- your keyboard sends requests to the input server running on your computer that listens and responds to every key you press
- your dog's smart collar is a server
- servers just need a port so they can listen and respond to requests
- web servers are servers that use web protocols like "http"

::: tip why are appliances becoming "smart" now?

- more and more consumer goods now have tiny servers in them

##### for example:
- alexa listens to me say "turn off lights" 
     - her microphone receives my sound vibrations
        - it transduces my command to bytecode her api can understand
- alexa converts the bytecode of my request to a signal that my smart bulb's API can hear.
    - my smart bulb's server has been listening for any requests to its API all day
- my smart bulb receives the request and routes it to a function that executes the turning off of the bulb
- this networking of objects with tiny servers in our homes is called the Internet of Things (**IoT**)

:::

----

### The web is _organized_ and _designed_ for user experience (U/X)

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_evolve.png')" alt="web 1 to web2 evolution" class="slide">
</div>

- WordPress used to be the convention for web design
    - each page was a pre-designed template
        - limited control of layout
        - all pages looked / behaved the same    
<!-- - **modular** design breaks the page into the tiniest, customizable components or web resources -->
<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_mod.png')" alt="web 2 modularity" class="slide">
</div>

  - it allows flexibility in deployment, arrangement, and customization
    - a web app is composed of different scripts, libraries, smaller apps, etc., but can be deployed as a single entity, and therefore follows this idea of modularity
  - granular control
  - web pages grow / shrink responsively to screen size and device type

---

### Data and the web

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_data-st.jpg')" alt="Data from Star Trek" class="slide">
</div>

----

#### **Data** is broken down and passes back and forth between your computer and multiple servers

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_data-flow.gif')" alt="web2 data flow">
</div>

::: tip web data as postcards

if I want to send you a postcard, but I have so much to tell you that I have to write it out across 10 postcards, I might number each postcard in case they don't all get delivered at the same time, so you can reconstruct them in the right order once they all arrive

:::
- **data in motion** :runner: 
    - data broken into smaller web packets that travel between client and server(s)
        - if a packet says it's number 4 in a list of packets, and your computer hasn't seen number 3 yet then your data waits until the other packets arrive before it gets reassembled

- **data at rest** :sleeping: 
    - local storage
        - data stored in your browser with no expiration
    - session storage
        - data cached in your browser until you close the browser window

----

### _time_ and the web :clock1: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_time-diag.png')" alt="web2 time diagrams">
</div>

- "trusting" what a server somewhere in the world tells us is the correct time
- UCT solution - time based on the Sun and Earth's rotation
    - needs mass adoption
    - impractical that noon UCT would mean noon all around the world
- faster connections make syncing time more and more difficult
    - bad things can and do happen on the web in a blink of an eye

---

## Your Relationship with the Web

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_relate.jpg')" alt="people with smart phones">
</div>

### _Identity_ :selfie:

<div class="asset-container" style="position:relative;">
    <img :src="$withBase('/images/course/web2_map-1.jpg')" alt="google maps" style="position:absolute; left:1%;width: 35%; transform: rotate(-15deg);border:1px solid blue;">
    <img :src="$withBase('/images/course/web2_sl_comic.png')" alt="comic about the modern web" class="slide">
    <img :src="$withBase('/images/course/web2_map-2.jpg')" alt="google maps" style="position:absolute;right:1%;width: 35%; transform: rotate(15deg);border:1px solid blue;">
</div>

- you are your _activity_ on the web
    - your browser history 
    - requests coming from your IP address
    - your activity in and accross other web apps (shared data)

- your email is your _main_ source of identity
    - it relies on a web mail protocol to function
    - you can use it to log into numerous web apps
    - password _plus_ information from another device (2FA) required for identity verification

- access to your identity is at the mercy of internet service providers and app owners
    - Twitter can lock you out of your account
    - your ISP can shut your internet access at any point
        - new internet plan? no problem - except now your router is no longer compatable, and you'll need to upgrade that before you service is restored :shrug: 

----

### _Ownership_ :key: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_own.png')" alt="Facebook owns your data" class="slide">
</div>

#### you don't own your data
- your data (activity history) is being sold constantly
    - you don't make a dime from it
- cloud admins can delete any data you store on it
- your accounts can be taken offline with just a few strokes
- Instagram can use any pics you posted any way they want
- it only takes a handful of people to completely block your access to any digital assets you "own"

----

### _Structure_ of the web :classical_building: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web2_sl_struct.png')" alt="Bezos controls web2" class="slide">
</div>

- The modern web is distributed in a _centralized_ way
    - _distributed_ networks managed by handful of tech companies
    - very few points of failure can bring entire regions offline

- The modern web is _very_ centralized
    - 4 big box stores to shop at
    - monopolies mean that fewer and fewer people hold the keys to the kingdom

---
## Quiz

<div class="asset-container">
  <ClientOnly>
    <Quiz3 :nextChapter="$frontmatter['next']"/> 
  </ClientOnly>
</div>

'''
'''--- src/web3/README.md ---
---
next: '/near/'
---

<!-- <ClientOnly>
  <SheildDetect/> 
</ClientOnly> -->

# 4. You and Web3.0

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_crypto-hist.png')" alt="history of crypto">
</div>

## Introduction

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_intro.png')" alt="web 3 intro" class="slide">
</div>

---

### Web3 is the _decentralized_ or "open" web :open_hands: 

- network interfaces follow new rules
    - no one node is in charge
    - no single NAP
        - _no front desk_

- no one can "turn it off"
    - it's accessible to all
    - it's owned and operated by the people using it
    - there are no middlemen
        - no brokers between you and the stock market
        - no bank fees for managing your money
        - no HR between you and payroll

#### A network of computers across the globe act as one computer sharing a single state

<div class="asset-container p-rel">
    <img :src="$withBase('/images/course/web3_sl_org.png')" alt="web 3 organization" class="slide">
    <img :src="$withBase('/images/course/web3_walle.gif')" alt="wall-e gif" style="position:absolute; top: 20%; left: .2%; max-width:50%;">
</div>

::: tip what's "state" in the neighborhood analogy?

Before the internet, when a new house was built in your neighborhood, all the phone books needed to be updated to reflect the new addition. So, a new phone book was sent out to all the neighbors with the address, etc. of the new house. 

:::

- change state of one, you change state of all
    - we are Borg :robot: 
- when one node registers a change in the network (state) it gossips about it to the other nodes
    - gossip spreads about the change in state to the entire network

#### Web3 _interfaces_ are accessed using Web3 accounts

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_el5.png')" alt="web 3 intro" class="slide">
</div>

- "log in with your email" becomes "log in with your Web3 wallet"
- connections to Web3 architecture occur through http connections and **smart contracts**

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_interfaces.png')" alt="smart contracts" class="slide">
</div>

---

### Organization of Web3

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_smrt-ct.png')" alt="smart contracts" class="slide">
</div>

- they are a set of instructions (like any other program) for updating state/data/transaction history
- the updates that nodes gossip about are triggered by methods in these contracts
- contract methods allow Web3 accounts to either  _view_ state/data/transaction history or _change_ state/data/transaction history
- contracts that take a lot of time to run can congest the network
    - transaction fees (GAS) help prevent this
    - they incentivize developers to optimize their code so it execute faster, and consumes fewer resources (cheaper!:money_with_wings:)

----

### Interconnected layers of Web3

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_layers.png')" alt="web 3 layer model">
</div>

- these layers behave like **modules** and can be broken apart and reconfigured to create new use cases

#### protocol layer 
- base layer
- blockchain architecture
- changes to data are stored as transaction receipts on a digital ledger
    - ledger is copied and distributed to all nodes in the network

#### infrastructure layer
- interoperable building blocks
- modules connect together for specific tasks
    - storage
    - naming service
- **smart contracts** serve as the _back_ end of Web3 infrastructure
    - contracts manage state
        - they are like interpreters 
    - web3 accounts "sign" transactions the same way one might sign a lease agreement or credit card receipt

#### use case layer
- where it all comes together
- DeFi, Gaming

#### access points
- top layer
- users sign into their account(s) and send / receive crypto-currency

----

### Web3 needs Web2... for now

<div class="asset-container p-rel">
    <img :src="$withBase('/images/course/web3_web2.jpeg')" alt="handshake meme">
    <p style="position:absolute;bottom:5%;left:35%;font-weight:bold;color:#fff;">Web2</p>
    <p style="position:absolute;bottom:5%;right:35%;font-weight:bold;color:#fff;">Web3</p>
</div>

- Web3 infrastructure is different than web2, but still new and generally limited, so it can't operate without web2 yet 
    - you still need the centralized web to access the decentralized web
    - it's not immediately apparent when you are using a Web3 app (dApp)

---

### Let's finally talk about the "blockchain"

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_blockchain.png')" alt="Blockchain" class="slide">
</div>

#### The blockchain is..

- transaction history

the blockchain is like a stack of milk crates with each crate containing piles of various transaction receipts. The stack of crates gets higher with every new batch of receipts.

::: tip If the Phone Book behaved like a blockchain

Imagine if instead of receiving a new phone book every time a new neighbor moves in / out, you (and everyone you know) receives a single page from the phone book with just the updated information. 

:::

---

## _Data_ and Web3

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_data-st.jpeg')" alt="Data from Star Trek">
</div>

---

### **Data in motion**

<div class="asset-container p-rel">
    <img :src="$withBase('/images/course/web3_sl_data-in-motion.png')" alt="Web3 data in motion" class="slide">
    <img :src="$withBase('/images/course/web3_gossip.gif')" alt="Gossip protocol" style="position:absolute; right: 0;top: 10%;">
</div>

### **Data at rest**

<div class="asset-container p-rel">
    <img :src="$withBase('/images/course/web3_sl_data-at-rest.png')" alt="Web3 data at rest" class="slide">
    <img :src="$withBase('/images/course/web3_data-at-rest.png')" alt="web3 data diagram" style="position:absolute; left: 0;top: 30%;">
</div>

#### Once **data** is added to the blockchain it is **immutable** - it can't be changed.

---

## _Time_ and Web3 :clock1030: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_time.png')" alt="consensus diagram" class="slide">
</div>

#### The blockchain is... 
- a clock :exploding_head: 

### Time is measured in _block height_
- each block added to the chain increases its height 
- some blockchains add a new block at a constant rate even if the block is empty of updates to transaction history
    - this allows for planning
        - _"let's meet at 3pm"_ becomes _"let's meet when the block height reaches 89489830340"_

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_sl_time-2.png')" alt="consensus diagram" class="slide">
</div>

- community board meetings exist for the purpose of finding consensus community-related initiatives. Community-based blockchain networks are no different, and people don't always agree

- sometimes two nodes with different block heights claim to have the most current (highest) chain
    - ( generally ) longest chain wins

- sometimes nodes do not agree with the consensus and continue with _their_ version of the blockchain
    - if other nodes join them, then a fork is created
        - two versions now exist
            - Ethereum vs Ethereum _classic_

- sometimes infrastructure updates require a fork
    - if a node with the old version of the chain exists, the old infrastructure is still accessible

        - you can keep your old phone books, and use them, but they will become more and more unreliable
        - you can keep your computer from 1997, but it won't be able to "dial into" today's internet like it did when Austin Powers was in theaters. 
  

#### trustless proofs provide integrity of the blockchain so you can trust the time it gives

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_pow-pos.jpeg')" alt="types of consensus protocols" class="slide">
</div>

- proof that a transaction is valid can be achieved through cryptography
    - if anything changes in one block, all subsequent blocks are _immediately_ invalidated
        - we see this in time travel movies
            - change the past, you change the future 
    - _mining_ or Proof of Work (**PoW**) is how BitCoin and Ethereum create trust in their networks
    - PoW has become very energy-intensive as the blockchains that rely on it continue to grow
        - other proof concepts are being employed in new and existing blockchain networks to address these and related issues

---

## Your Relationship with Web3

<p style="font-size:2vw"> <strong>time</strong>: enabled by a chain of discrete “data moments”</p>
<p style="font-size:2vw"> <strong>identity</strong>: enabled by public/private key cryptography</p>
<p style="font-size:2vw"> <strong>money</strong>: time + value</p>
<p style="font-size:2vw"> <strong>ownership</strong>: identity + money</p>
<p style="font-size:2vw"> <strong>provenance</strong>: identity + money + time</p>

### _Identity_ :selfie: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_id.png')" alt="types of identification protocols" class="slide">
</div>

- your web3 account is your identity
- no Oauth
- your offline identity is yours to reveal or keep hidden as you see fit
- the account(s) you use to explore the space build reputation
    - reputation / street cred helps build trust in the platform
- active engagement in the community is core to a successful, community-run web

----

### _Ownership_ :key: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_own.png')" alt="diagram of ownership in web3" class="slide">
</div>

- _you_ own your data, and _you_ own the network

    - no. seriously!
    - everything is flipped on its head
    - you earn money from simply engaging the network
    - ad companies pay _you_ to see their ads rather than google

- networks have their own economies based on their specific token or **crypto-currency**
    - Bitcoin, ether, doge, $NEAR
        - if it's not Bitcoin, then it's an altcoin
    - tokens in your wallet are yours to do as you wish
        - if your country freezes bank accounts, your crypto is still safe and accessible
    - digital assets are yours
        - whatever digital assets are associated with your account are yours for as long as you desire
        - there is no repo man 
        - you are your own security

----

## _Structure_ of Web3 :classical_building: 

<div class="asset-container">
    <img :src="$withBase('/images/course/web3_struct.png')" alt="centralized vs decentralized internet" class="slide">
</div>

- Web3 is _decentralized_

    - there is no single point of entry or failure 
    - if one node goes offline, the data is preserved on all the other nodes
    - no _one_ controls the network
    - everyone controls the network
    - the wealth that is generated by the network is distributed among the people using it

- Web3 relies on Web2 to exist
    
    - Web3's infrastructure is decentralized
    - Web3's access layer relies on Web2 servers
    - contracts compile to webassembly so they can run in Web2 browsers

---
## Quiz 

<div class="asset-container">
  <ClientOnly>
    <Quiz4 :nextChapter="$frontmatter['next']"/> 
  </ClientOnly>
</div>
'''