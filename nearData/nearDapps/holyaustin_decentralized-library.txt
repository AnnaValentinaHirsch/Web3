*GitHub Repository "holyaustin/decentralized-library"*

'''--- README.md ---
Decentralized Library

A Decentralized digital Library that uses Web3 to log user in to read books and earn.
=======
The need to implement more web2 solutions into web3 have necesitated this idea. Decentralized library is a no-censorship library where users go to read testbooks and watch video books using the wallet.

The following benefit awaits users of this project
1.  Hundreds of Academic E-Books: The Library has more books that you could imagine. E-books repository are decentralized (IPFS Storage).
2. Lot of Video-Books: The full video books are here for you. if you cannot read the ebook format, you can read you favorite textbooks by watching them (IPFS Storage).
3. No Political Censorship: No fear from government of your country not allowing certain books. You can read or watch them here.
4. Learn and Earn: The very First decentralized Library where you LEARN and EARN.
5. Live Class Streaming: Lecturers / Teachers can use this platform to shedule live teaching and learning. just contact us
6. No Loss of Books: Prevent the accidental or intentional loss of information from human consciousness

Local setup
To run this project locally, follow these steps.

Clone the project locally, change into the directory, and install the dependencies:
git clone https://github.com/holyaustin/decentralized-library.git

cd decentralized-library

# install using NPM or Yarn
npm install

# or

yarn

Start the local Hardhat node

npx hardhat node

With the network running, deploy the contracts to the local network in a separate terminal window

npx hardhat run scripts/deploy.js --network localhost

Start the app

npm run dev

'''
'''--- components/footer/index.js ---
function Footer() {

    return (
      <div className="main">
        <br />
        <br />
      <center>
        <footer>
          <div className="space-x-2 align-middle">
            <div className="inline-block align-middle text-xl">Powered by</div>
            <div className="inline-block align-middle">
              {' '}
              <img
                className="h-10 w-18"
                src="https://upload.wikimedia.org/wikipedia/commons/c/c2/IPFS_logo.png"
                alt="ipfs logo"
              />
            </div>
            {' '}
            +
            <div className="inline-block align-middle pt-1">
              {' '}
              <img
                className="h-10 w-100"
                src="https://seeklogo.com/images/L/livepeer-lpt-coin-logo-673456A2D1-seeklogo.com.png"
                alt="livepeer logo"
              />
            </div>
            +
            <div className="inline-block align-middle pt-1">
              {' '}
              <img
                className="h-10 w-100"
                src="https://assets.website-files.com/609ab8eae6dd417c085cc925/609b2ba76d637745d781160e_logo-ceramic.png"
                alt="Ceramic logo"
                height="20px"
              />
            </div>
            +
            <div className="inline-block align-middle pt-1">
              {' '}
              <img
                className="h-10 w-100"
                src="https://assets.website-files.com/60f51fac359e025bed0dd19b/6173ff84da7f630e1961bc98_new%20logo-p-500.png"
                alt="NFTPort logo"
                height="20px"
              />
            </div>
            +
            <div className="inline-block align-middle pt-1">
              {' '}
              <img
                className="h-40 w-100"
                src="https://logowik.com/content/uploads/images/polygon-matic5119.jpg"
                alt="polygon logo"
              />
            </div>
          </div>
        </footer>
      </center>
      </div>
    )
  }
  
  export default Footer
'''
'''--- components/layout/index.js ---
/*import Header from '../header';*/
import Footer from '../footer';

function Layout({children}) {
  return (
    <div className="main">
 

      <div className="min-h-60vh">
        {children}
      </div>
      <Footer/>
    </div>
  )
}

export default Layout
'''
'''--- components/navbar.js ---
import { Fragment } from 'react';
import { Disclosure, Menu, Transition } from '@headlessui/react';
import { SearchIcon } from '@heroicons/react/solid';
import { MenuIcon, XIcon } from '@heroicons/react/outline';

function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Navbar() {
  return (
   
    <Disclosure as="nav" className="bg-white shadow">
      {({ open }) => (
        <>
        <div className="max-w-7xl mx-auto px-2 sm:px-4 lg:px-8">
            <div className="flex justify-between h-16">
              <div className="flex px-2 lg:px-0">

                <div className="flex-shrink-0 flex items-center">
                  <a
                    href="/"
                    className="font-medium text-4xl pb-2"
                  >
                    DeLibrary
                  </a>
                </div>

                <div className="flex-shrink-0 flex items-center">
                  <img
                    className="h-10 w-18"
                    src="/b1.png"
                    alt="Delibrary logo"
                  />
                </div>

                
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                  <a
                    href="/catebooks"
                    className="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium"
                  >
                    E-books
                  </a>
                </div>
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                  <a
                    href="/catvideos"
                    className="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium"
                  >
                    Video-Books
                  </a>
                </div>
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                  <a
                    href="/liveclass"
                    className="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium"
                  >
                    Live Class 
                  </a>
                </div>
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                  <a
                    href="/community"
                    className="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium"
                  >
                    Community
                  </a>
                </div>
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                  <a
                    href="/about"
                    className="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium"
                  >
                    About
                  </a>
                </div>
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                  <a
                    href="/upload"
                    className="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium"
                  >
                    Upload
                  </a>
                </div>
                <div className="hidden lg:ml-6 lg:flex lg:space-x-8">
                <span lassName="border-indigo-500 text-gray-900 inline-flex items-center text-md font-medium" id="userDID">Not Connected</span>
                </div>
                
              </div>

              <div className="flex-1 flex items-center justify-center px-2 lg:ml-6 lg:justify-end">
                <div className="max-w-lg w-full lg:max-w-xs">
                  <label htmlFor="search" className="sr-only">
                    Search
                  </label>
                  <div className="relative">
                    <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                      <SearchIcon className="h-5 w-5 text-gray-400" aria-hidden="true" />
                    </div>
                    <input
                      id="search"
                      name="search"
                      className="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
                      placeholder="Search"
                      type="search"
                    />
                  </div>
                </div>
              </div>
              <div className="flex items-center lg:hidden">
                {/* Mobile menu button */}
                <Disclosure.Button className="inline-flex items-center justify-center p-2 rounded-md text-gray-400 hover:text-gray-500 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500">
                  <span className="sr-only">Open main menu</span>
                  {open ? (
                    <XIcon className="block h-6 w-6" aria-hidden="true" />
                  ) : (
                    <MenuIcon className="block h-6 w-6" aria-hidden="true" />
                  )}
                </Disclosure.Button>
              </div>
              <div className="hidden lg:ml-4 lg:flex lg:items-center">

                {/* Profile dropdown */}
                <Menu as="div" className="ml-4 relative flex-shrink-0">
                  {({ open }) => (
                    <>
                      <div>
                        <Menu.Button className="bg-white rounded-full flex text-sm focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                          <span className="sr-only">User menu</span>
                        </Menu.Button>
                      </div>
                      <Transition
                        show={open}
                        as={Fragment}
                        enter="transition ease-out duration-100"
                        enterFrom="transform opacity-0 scale-95"
                        enterTo="transform opacity-100 scale-100"
                        leave="transition ease-in duration-75"
                        leaveFrom="transform opacity-100 scale-100"
                        leaveTo="transform opacity-0 scale-95"
                      >
                        <Menu.Items
                          static
                          className="origin-top-right absolute right-0 mt-2 w-48 rounded-md shadow-lg py-1 bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
                        />
                      </Transition>
                    </>
                  )}
                </Menu>
              </div>
            </div>
          </div>

          <Disclosure.Panel className="lg:hidden">
            <div className="pt-2 pb-3 space-y-1">
              {/* Current: "bg-indigo-50 border-indigo-500 text-indigo-700", Default: "border-transparent text-gray-600 hover:bg-gray-50 hover:border-gray-300 hover:text-gray-800" */}
              <a
                href="/"
                className="bg-indigo-50 border-indigo-500 text-indigo-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium"
              >
                Home
              </a>
              <a
                href="/upload"
                className="bg-indigo-50 border-indigo-500 text-indigo-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium"
              >
                Upload
              </a>
              <a
                href="/new"
                className="bg-indigo-50 border-indigo-500 text-indigo-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium"
              >
                New
              </a>
              <a
                href="/about"
                className="bg-indigo-50 border-indigo-500 text-indigo-700 block pl-3 pr-4 py-2 border-l-4 text-base font-medium"
              >
                About
              </a>

            </div>

          </Disclosure.Panel>
        </>
      )}
    </Disclosure>
  );
}

'''
'''--- config.js ---

  export const nftlibraryaddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  export const nftaddress = "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512"
  export const nftvideoaddress = "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  
'''
'''--- data/applieddata.js ---
import {

  CloudIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Medicine and health', href: '', icon: CloudIcon },
  { name: 'Agriculture', href: '', icon: CloudIcon },
  { name: 'Architecture and design', href: '', icon: CloudIcon },
  { name: 'Business', href: '/history', icon: CloudIcon },
  { name: 'Divinity', href: '', icon: CloudIcon },
  { name: 'Education', href: '', icon: CloudIcon },
  { name: 'Environmental studies and forestry', href: '', icon: CloudIcon },
  { name: 'Family and consumer science', href: '', icon: CloudIcon },
  { name: 'Human physical performance and recreation', href: '', icon: CloudIcon },
  { name: 'Journalism, media studies and communication', href: '', icon: CloudIcon },
  { name: 'Law', href: '', icon: CloudIcon },
  { name: 'Library and museum studies', href: '', icon: CloudIcon },
  { name: 'Military sciences', href: '', icon: CloudIcon },
  { name: 'Public administration', href: '', icon: CloudIcon },
  { name: 'Social work', href: '', icon: CloudIcon },
  { name: 'Transportation', href: '', icon: CloudIcon },
];
export default gencat;

'''
'''--- data/catebooksdata.js ---
import {
  AcademicCapIcon,
  BeakerIcon,
  CalculatorIcon, ChartBarIcon,
  CurrencyDollarIcon, DesktopComputerIcon,
  LightningBoltIcon,
  CashIcon,
  CloudIcon,
} from '@heroicons/react/solid';

const gencat = [
  { name: 'Physical science', href: '/physical', icon: DesktopComputerIcon  },
  { name: 'Humanities', href: '/humanities', icon: CalculatorIcon },
  { name: 'Social science', href: '/social', icon: CurrencyDollarIcon },
  { name: 'Natural science', href: '/natural', icon: BeakerIcon },
  { name: 'Formal science', href: '/formal', icon: ChartBarIcon },
  { name: 'Applied science', href: '/applied', icon: CloudIcon },
  
];

export default gencat;

'''
'''--- data/catevideodata.js ---
import {
  AcademicCapIcon,
  BeakerIcon,
  CalculatorIcon, ChartBarIcon,
  CurrencyDollarIcon, DesktopComputerIcon,
  LightningBoltIcon,
  CashIcon,
  CloudIcon,
} from '@heroicons/react/solid';

const gencat = [
  { name: 'Physical science', href: '/physicalvid', icon: DesktopComputerIcon  },
  { name: 'Humanities', href: '/humanities', icon: CalculatorIcon },
  { name: 'Social science', href: '/social', icon: CurrencyDollarIcon },
  { name: 'Natural science', href: '/natural', icon: BeakerIcon },
  { name: 'Formal science', href: '/formal', icon: ChartBarIcon },
  { name: 'Applied science', href: '/applied', icon: CloudIcon },
  
];

export default gencat;

'''
'''--- data/formaldata.js ---
import {

  ChartBarIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Mathematics', href: '/mathematics', icon: ChartBarIcon },
  { name: 'Statistics', href: '/mathematics', icon: ChartBarIcon },
];

export default gencat;

'''
'''--- data/humanitiesdata.js ---
import {

  CalculatorIcon, ChartBarIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Performing arts', href: '', icon: CalculatorIcon },
  { name: 'Visual arts', href: '', icon: CalculatorIcon },
  { name: 'History', href: '/history', icon: CalculatorIcon },
  { name: 'Languages and literatures', href: '', icon: CalculatorIcon },
  { name: 'Law', href: '', icon: CalculatorIcon },
  { name: 'Philosophy', href: '', icon: CalculatorIcon },
  { name: 'Theology', href: '', icon: CalculatorIcon },
];

export default gencat;

'''
'''--- data/myindex.js ---
import {
  BookOpenIcon,
  VideoCameraIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Electronic Books', href: '../catebooks', icon: BookOpenIcon },
  { name: 'Video Books', href: '../catvideos', icon: VideoCameraIcon },

];

export default gencat;

'''
'''--- data/naturaldata.js ---
import {

  BeakerIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Chemistry', href: '/chemistry', icon: BeakerIcon },
  { name: 'Biology', href: '', icon: BeakerIcon },
  { name: 'Earth science', href: '', icon: BeakerIcon },
  { name: 'Space sciences', href: '', icon: BeakerIcon },
  { name: 'Physics', href: '', icon: BeakerIcon },
];

export default gencat;

'''
'''--- data/physicaldata.js ---
import {

  DesktopComputerIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Computer Science', href: '/csbooks', icon: DesktopComputerIcon },
  { name: 'Engineering and technology', href: '', icon: DesktopComputerIcon },
];

export default gencat;

'''
'''--- data/physicalviddata.js ---
import {

  DesktopComputerIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Computer Science', href: '/csvideos', icon: DesktopComputerIcon },
  { name: 'Engineering and technology', href: '', icon: DesktopComputerIcon },
];

export default gencat;

'''
'''--- data/recent.json ---
{"2107.00183.pdf":
"bafybeid7waeeqr43lvwj3wc4fiooansynjyhfxdl7zoacul33gdyu2223e",
"2107.00347.pdf":
"bafybeicbl7e4mxvmu6el7gqpfzz3ndhvusi4dfeku6ln53zw3uvbjdm6ii",
"2107.00495.pdf":
"bafybeiho3xejlxsdcxkobstp3xwxqddry5niu5h6wwbsiilgflap3qu53q",
"2107.00561.pdf":
"bafybeicjx4gtfh6ybmpvt7m2ohq27gy6xe7p5co4oaowjoirawmajwlad4",
"2107.00577.pdf":
"bafybeida7nc76sdjv65pezr7ddprozykhgpnivuybphkk6gpsx7tr22h7m"}
'''
'''--- data/socialdata.js ---
import {

  CurrencyDollarIcon, ChartBarIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Anthropology', href: '', icon: CurrencyDollarIcon},
  { name: 'Archaeology', href: '', icon: CurrencyDollarIcon },
  { name: 'Economics', href: '/economics', icon: CurrencyDollarIcon },
  { name: 'Geography', href: '', icon: CurrencyDollarIcon },
  { name: 'Political science', href: '', icon: CurrencyDollarIcon },
  { name: 'Psychology', href: '', icon: CurrencyDollarIcon },
  { name: 'Sociology', href: '', icon: CurrencyDollarIcon },
  { name: 'Social work', href: '', icon: CurrencyDollarIcon },
];

export default gencat;

'''
'''--- data/uploaddata.js ---
import {
  BookOpenIcon,
  VideoCameraIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Electronic Books', href: '../create-item-ebook', icon: BookOpenIcon },
  { name: 'Video Books', href: '../create-item-video', icon: VideoCameraIcon },

];

export default gencat;

'''
'''--- data/uploadvideodata.js ---
import {
  BookOpenIcon,
  VideoCameraIcon,

} from '@heroicons/react/solid';

const gencat = [
  { name: 'Electronic Books', href: '../create-item-ebook', icon: BookOpenIcon },
  { name: 'Video Books', href: '../create-item-video', icon: VideoCameraIcon },

];

export default gencat;

'''
'''--- hardhat.config.js ---
require("@nomiclabs/hardhat-waffle");
const fs = require('fs');
const privateKey = fs.readFileSync(".secret").toString().trim() || "01234567890123456789";
const infuraId = fs.readFileSync(".infuraid").toString().trim() || "";
const alchemyId = fs.readFileSync(".alchemyid").toString().trim() || "";

module.exports = {
  defaultNetwork: "hardhat",
  networks: {
    hardhat: {
      chainId: 1337
    },
    
    mumbai: {
      // Infura
      url: `https://polygon-mumbai.infura.io/v3/${infuraId}`,
     // url: "https://rpc-mumbai.matic.today",
      accounts: [privateKey]
    },
    matic: {
      // Infura
       url: `https://polygon-mainnet.infura.io/v3/${infuraId}`,
      //url: "https://rpc-mainnet.maticvigil.com",
      accounts: [privateKey]
    },
    
    Ropsten: {
      // Alchemy
      url: `https://eth-ropsten.alchemyapi.io/v2/${alchemyId}`,
      //url: "https://rpc-mainnet.maticvigil.com",
      accounts: [privateKey]
    }
  
  },
  solidity: {
    version: "0.8.8",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200
      }
    }
  }
};

'''
'''--- next.config.js ---
const path = require('path');

module.exports = {
  experimental: { granularChunks: true },
  webpack: (config) => {
    config.resolve.modules.push(path.resolve('./'));
    return config;
  },
  eslint: {
    // Warning: Dangerously allow production builds to successfully complete even if
    // your project has ESLint errors.
    ignoreDuringBuilds: true,
  },
  trailingSlash: true,
  async exportPathMap() {
    const paths = {
      '/': { page: '/' },
      '/cs': { page: '/cs' },
      '/bio': { page: '/bio' },
      '/econ': { page: '/econ' },
      '/eess': { page: '/eess' },
      '/math': { page: '/math' },
      '/physics': { page: '/physics' },
      '/stat': { page: '/stat' },
      '/about': { page: '/about' },
      '/upload': { page: '/upload' },
      '/finance': { page: '/finance' },
      '/new': { page: '/new' },
    };
    return paths;
  },
};

'''
'''--- package.json ---
{
  "name": "decentralized-library",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next",
    "build": "NODE_OPTIONS=\"--max_old_space_size=4096\" next build",
    "start": "next start",
    "export": "NODE_OPTIONS=\"--max_old_space_size=4096\" next export",
    "lint": "next lint"
  },
  "dependencies": {
    "@3id/connect": "^0.2.5",
    "@ceramicnetwork/ceramic-core": "^0.12.4",
    "@ceramicnetwork/common": "^1.8.0",
    "@ceramicnetwork/core": "^1.11.0",
    "@ceramicnetwork/http-client": "^1.5.0",
    "@ceramicnetwork/key-did-resolver": "^0.2.2",
    "@ceramicnetwork/stream-tile": "^1.5.0",
    "@headlessui/react": "^1.4.0",
    "@heroicons/react": "^1.0.3",
    "@nomiclabs/hardhat-ethers": "^2.0.2",
    "@nomiclabs/hardhat-waffle": "^2.0.1",
    "@openzeppelin/contracts": "^4.3.3",
    "axios": "^0.24.0",
    "chai": "^4.3.4",
    "dids": "^0.5.1",
    "ethereum-waffle": "^3.4.0",
    "ethers": "^5.4.7",
    "express": "^4.17.1",
    "file-saver": "^2.0.5",
    "fs": "^0.0.1-security",
    "graceful-fs": "^4.2.8",
    "grid-container": "^0.1.0",
    "hardhat": "^2.6.4",
    "ipfs": "^0.60.0",
    "ipfs-http-client": "^52.0.5",
    "key-did-resolver": "^1.4.0",
    "next": "11.1.2",
    "nft.storage": "^3.3.0",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-grid-system": "^7.3.1",
    "react-slick": "^0.28.1",
    "reactstrap": "^8.10.0",
    "slick-carousel": "^1.8.1",
    "ts-node": "^10.4.0",
    "web3.storage": "^3.1.0",
    "web3modal": "^1.9.4"
  },
  "devDependencies": {
    "autoprefixer": "^10.3.5",
    "eslint": "7.32.0",
    "eslint-config-next": "11.1.2",
    "postcss": "^8.3.7",
    "tailwindcss": "^2.2.15"
  }
}

'''
'''--- pages/_app.js ---
import '../styles/globals.css'
import Link from 'next/link'
import Head from 'next/head'
import { Fragment } from 'react';
import { Disclosure, Menu, Transition } from '@headlessui/react';
import { SearchIcon } from '@heroicons/react/solid';
import { MenuIcon, XIcon } from '@heroicons/react/outline';
import Layout from '../components/layout'

function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

function Library({ Component, pageProps }) {
  return (
    <Layout>
    <div>
        <Head>
        <title>Decentralized Library | Ebooks and Videos : Learn and Earn </title>
        <meta name="Decentralized Library | Learn and Earn as you use the Decentralized Library" content="DeLib" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
        <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
        <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
        <link rel="manifest" href="/site.webmanifest" />
      </Head>

      <Component {...pageProps} />
    </div>
    </Layout>
  )
}

export default Library
'''
'''--- pages/about.js ---
import { React } from 'react';
import { CodeIcon, LightningBoltIcon,
  AcademicCapIcon,   CalculatorIcon,
  LightBulbIcon,  BookOpenIcon,  
  VideoCameraIcon,} from '@heroicons/react/outline';
import Navbar from '../components/navbar';

const features = [
  {
    name: 'Hundreds of Academic E-Books ',
    description:
      'The Library has more books that you could imagine. E-books repository are decentralized (IPFS Storage). ',
    icon: BookOpenIcon,
    href: '',
  },
  {
    name: 'Lot of Video-Books',
    description:
      'The full video books are here for you. if you cannot read the ebook format, you can read you favorite textbooks by watching them. ',
    icon: VideoCameraIcon,
    href: '',
  },
  {
    name: 'No Political Censorship',
    description:
      'No fear from government of your country not allowing certain books. You can read or watch them here',
    icon:LightBulbIcon,
    href: '',
  },
  {
    name: 'Learn and Earn',
    description:
      'The very First decentralized Library where you LEARN and EARN',
    icon: AcademicCapIcon,
    href: '',
  },
  {
    name: 'No Loss of Books',
    description:
      'Prevent the accidental or intentional loss of information from human consciousness',
    icon: LightningBoltIcon,
    href: '',
  },
  {
    name: 'Live Class Streaming',
    description:
      'Lecturers / Teachers can use this platform to shedule live teaching and learning. just contact us',
    icon: LightningBoltIcon,
    href: '',
  },

];

export default function CS() {
  return (
    <>
      <Navbar />
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">About the Project</h2>
            <br />
            <br />
          </center>
        </div>
        
        <div className="py-12 bg-white">
         
          <div className="max-w-xl mx-auto px-4 sm:px-6 lg:max-w-7xl lg:px-8">
            <h2 className="sr-only"></h2>
            <dl className="space-y-10 lg:space-y-0 lg:grid lg:grid-cols-2 lg:gap-8">
              {features.map((feature) => (feature.name === 'Open Source' ? (
                <div key={feature.name}>
                  <dt>
                    <div className="flex items-center justify-center h-12 w-12 rounded-md bg-gray-500 text-white">
                      <feature.icon className="h-6 w-6" aria-hidden="true" />
                    </div>
                    <p className="mt-5 text-lg leading-6 font-medium text-gray-900">{feature.name}</p>
                  </dt>
                  <dd className="mt-2 text-base text-gray-500">
                    {feature.description}
                    {' '}
                    <a href={feature.href} className="hover:underline text-indigo-500"></a>
    
                  </dd>

                </div>
              ) : (
                <div key={feature.name}>
                  <dt>
                    <div className="flex items-center justify-center h-12 w-12 rounded-md bg-gray-500 text-white">
                      <feature.icon className="h-6 w-6" aria-hidden="true" />
                    </div>
                    <p className="mt-5 text-lg leading-6 font-medium text-gray-900">{feature.name}</p>
                  </dt>
                  <dd className="mt-2 text-base text-gray-500">{feature.description}</dd>
                </div>
              )

              ))}
            </dl>
          </div>
        
        </div>

      </div>
    </>
  );
}

'''
'''--- pages/catebooks.js ---
import router from 'next/router';
import { React } from 'react';
import Navbar from '../components/navbar';
import actions from '../data/catebooksdata';

// eslint-disable-next-line no-unused-vars
function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Home() {
  return (
    <>
      <Navbar />

      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-12">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">E-Book Section</h2>
            <br />
            <br />
          </center>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          {actions.map((person) => (
            <div
              key={person.name}
              className="relative rounded-lg border-2 border-gray-700 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:bg-red-200 focus-within:ring-6 focus-within:ring-offset-6 focus-within:ring-indigo-900"
            >
              <div className="flex-shrink-0">
                <person.icon className="h-6 w-6" aria-hidden="true" />
              </div>
              <div className="flex-1 min-w-0">
                <a
                  className="focus:outline-none text-center"
                  onClick={() => { router.push(person.href); }}
                >
                  <span className="absolute inset-0" aria-hidden="true" />
                  <p className="text-md font-medium text-gray-900">{person.name}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
        <br />
        <br />
        <br />
      </div>
    </>
  );
}

'''
'''--- pages/catvideos.js ---
import router from 'next/router';
import { React } from 'react';
import Navbar from '../components/navbar';
import actions from '../data/catevideodata';

// eslint-disable-next-line no-unused-vars
function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Home() {
  return (
    <>
      <Navbar />

      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-12">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Video-Book Section</h2>
            <br />
            <br />
          </center>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          {actions.map((person) => (
            <div
              key={person.name}
              className="relative rounded-lg border-2 border-gray-700 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:bg-red-200 focus-within:ring-6 focus-within:ring-offset-6 focus-within:ring-indigo-900"
            >
              <div className="flex-shrink-0">
                <person.icon className="h-6 w-6" aria-hidden="true" />
              </div>
              <div className="flex-1 min-w-0">
                <a
                  className="focus:outline-none text-center"
                  onClick={() => { router.push(person.href); }}
                >
                  <span className="absolute inset-0" aria-hidden="true" />
                  <p className="text-md font-medium text-gray-900">{person.name}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
        <br />
        <br />
        <br />

      </div>
    </>
  );
}

'''
'''--- pages/community.js ---
import { React } from 'react';
import { CodeIcon, LightningBoltIcon, 
  LinkIcon,  HashtagIcon,
  LightBulbIcon,  BookOpenIcon,  
  } from '@heroicons/react/outline';

import Navbar from '../components/navbar';
import { PlayIcon } from '@heroicons/react/solid';

const features = [
  {
    name: 'Discord Server ',
    description:
      'Join our Discord Server',
    icon: BookOpenIcon,
    href: 'https://discord.com/',
  },
  {
    name: 'Twitter',
    description:
      'Join us on Twitter ',
    icon: HashtagIcon,
    href: 'https://twitter.com',
  },
  {
    name: 'Telegram',
    description:
      'Join us on Telegram',
    icon:LightBulbIcon,
    href: 'https://telegram.org/',
  },
  {
    name: 'Facebook',
    description:
      'Join us on Facebook',
    icon: LinkIcon,
    href: 'https://facebook.com',
  },
  {
    name: 'YouTube',
    description:
      'Join us on YouTubes',
    icon: PlayIcon,
    href: 'https://www.youtube.com/',
  },
  {
    name: 'GitHub',
    description:
      'Explore our code on Github ',
    icon: CodeIcon,
    href: 'https://www.github.com/',
  },

];

export default function CS() {
  return (
    <>
      <Navbar />
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Join our Community</h2>
            <br />
            <br />
          </center>
        </div>
        <div className="py-12 bg-white">
         
          <div className="max-w-xl mx-auto px-4 sm:px-6 lg:max-w-7xl lg:px-8">
            <h2 className="sr-only"></h2>
            <dl className="space-y-10 lg:space-y-0 lg:grid lg:grid-cols-2 lg:gap-8">
              {features.map((feature) => (feature.name === 'Open Source' ? (
                <div key={feature.name}>
                  <dt>
                    <div className="flex items-center justify-center h-12 w-12 rounded-md bg-gray-500 text-white">
                      <feature.icon className="h-6 w-6" aria-hidden="true" />
                    </div>
                    <p className="mt-5 text-lg leading-6 font-medium text-gray-900">{feature.name}</p>
                  </dt>
                  <dd className="mt-2 text-base text-gray-500">
                    {feature.description}
                    {' '}
                    <a href={feature.href} className="hover:underline text-indigo-500"></a>
    
                  </dd>

                </div>
              ) : (
                <div key={feature.name}>
                  <dt>
                    <div className="flex items-center justify-center h-12 w-12 rounded-md bg-gray-500 text-white">
                      <feature.icon className="h-6 w-6" aria-hidden="true" />
                    </div>
                    <p className="mt-5 text-lg leading-6 font-medium text-gray-900">{feature.name}</p>
                  </dt>
                  <dd className="mt-2 text-base text-gray-500">{feature.description}</dd>
                </div>
              )

              ))}
            </dl>
          </div>
        
        </div>

      </div>
    </>
  );
}

'''
'''--- pages/create-item-ebook.js ---
/* pages/create-item-ebook.js */
import { useState } from 'react'
import { ethers } from 'ethers'
import { create as ipfsHttpClient } from 'ipfs-http-client'
import { useRouter } from 'next/router'
import Web3Modal from 'web3modal'
import Navbar from '../components/navbar'
import { NFTStorage, File } from 'nft.storage'

const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')
const apiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGJCNUQ0NTM4NUMzODQ0MTUzZjNlNEU5ZjcwNTFiQUMxYTU3RUMyMjQiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzNzE0NTg0Mzc4MCwibmFtZSI6ImxpYnJhcnkifQ.ZC5aGh9LnQPv5R86pXYKMzXdXcqjTBLWoBl-DshrFhA'
const client2 = new NFTStorage({ token: apiKey })

import {
  nftaddress, nftlibraryaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Library from '../artifacts/contracts/Library.sol/NFTLibrary.json'

export default function CreateItem() {
  const [fileUrl, setFileUrl] = useState(null)
  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })
  const router = useRouter()

  async function onChange(e) {
    const file = e.target.files[0]
    try {
      const added = await client.add(
        file,
        {
          progress: (prog) => console.log(`received: ${prog}`)
        }
      )
      const url = `https://ipfs.infura.io/ipfs/${added.path}`
      setFileUrl(url)
    } catch (error) {
      console.log('Error uploading file: ', error)
    }  
  }
  async function createMarket() {
    const { name, description, price } = formInput
    if (!name || !description || !price || !fileUrl) return
    /* first, upload to IPFS */
    const data = JSON.stringify({
      name, description, image: fileUrl
    })
          /* after file is uploaded Store to NFT.Storage */
    const metadata = await client2.store({
      name: formInput.name,
      description: formInput.description,
      image: new File([/* data */], 'asset1.jpg', { type: 'image/jpg' })
    })
    console.log(metadata.url)
    try {
      const added = await client.add(data)
      const url = `https://ipfs.infura.io/ipfs/${added.path}`

      createSale(url)
    } catch (error) {
      console.log('Error uploading file: ', error)
    }  
  }

  async function createSale(url) {
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)    
    const signer = provider.getSigner()

    /* next, create the item */
    let contract = new ethers.Contract(nftaddress, NFT.abi, signer)
    let transaction = await contract.createToken(url)
    let tx = await transaction.wait()
    let event = tx.events[0]
    let value = event.args[2]
    let tokenId = value.toNumber()

    const price = ethers.utils.parseUnits(formInput.price, 'ether')
  
    /* then list the item for reading or selling on the Library */
    contract = new ethers.Contract(nftlibraryaddress, Library.abi, signer)
    let listingPrice = await contract.getListingPrice()
    listingPrice = listingPrice.toString()

    transaction = await contract.createMarketItem(nftaddress, tokenId, price, { value: listingPrice })
    await transaction.wait()
    router.push('/csbooks')
  }

  return (
    <>
      <Navbar />
    <br />
    <div className="flex justify-center">
      <div className="w-1/2 flex flex-col pb-12">
        <input 
          placeholder="Title of Book"
          className="mt-8 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}
        />
        <textarea
          placeholder="Description of Book ( Add Author, Copyright, Publisher, ISBN and Language of book here.)"
          className="mt-2 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}
          rows={6}
        />
        <input
          placeholder="Asset Price in MATIC (Add 0 for free Books)"
          className="mt-2 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}
        />
        <input
          type="file"
          name="Asset"
          className="my-4"
          onChange={onChange}
        />
        <br />
        {
          fileUrl && (
            <>
            <iframe className="rounded mt-4"
              src={fileUrl}
              frameBorder="0"
              scrolling="auto"
             height="100%"
             width="100%"
            ></iframe>

            </>
          )
        }
        <button onClick={createMarket} className="font-bold mt-4 bg-black text-white rounded p-4 shadow-lg">
          Upload Book
        </button>
      </div>
    </div>

    </>
  )
}
'''
'''--- pages/create-item-video.js ---
/* pages/create-item-ebook.js */
import { useState } from 'react'
import { ethers } from 'ethers'
import { create as ipfsHttpClient } from 'ipfs-http-client'
import { useRouter } from 'next/router'
import Web3Modal from 'web3modal'
import Navbar from '../components/navbar'
import { NFTStorage, File } from 'nft.storage'

const client = ipfsHttpClient('https://ipfs.infura.io:5001/api/v0')
const apiKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGJCNUQ0NTM4NUMzODQ0MTUzZjNlNEU5ZjcwNTFiQUMxYTU3RUMyMjQiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTYzNzE0NTg0Mzc4MCwibmFtZSI6ImxpYnJhcnkifQ.ZC5aGh9LnQPv5R86pXYKMzXdXcqjTBLWoBl-DshrFhA'
const client2 = new NFTStorage({ token: apiKey })

import {
  nftaddress, nftlibraryaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Library from '../artifacts/contracts/Library.sol/NFTLibrary.json'

export default function CreateItem() {
  const [fileUrl, setFileUrl] = useState(null)
  const [formInput, updateFormInput] = useState({ price: '', name: '', description: '' })
  const router = useRouter()

  async function onChange(e) {
    const file = e.target.files[0]
    try {
      const added = await client.add(
        file,
        {
          progress: (prog) => console.log(`received: ${prog}`)
        }
      )
      const url = `https://ipfs.infura.io/ipfs/${added.path}`
      setFileUrl(url)
    } catch (error) {
      console.log('Error uploading file: ', error)
    }  
  }
  async function createMarket() {
    const { name, description, price } = formInput
    if (!name || !description || !price || !fileUrl) return
    /* first, upload to IPFS */
    const data = JSON.stringify({
      name, description, image: fileUrl
    })
          /* after file is uploaded Store to NFT.Storage */
    const metadata = await client2.store({
      name: formInput.name,
      description: formInput.description,
      image: new File([/* data */], 'asset1.jpg', { type: 'image/jpg' })
    })
    console.log(metadata.url)
    try {
      const added = await client.add(data)
      const url = `https://ipfs.infura.io/ipfs/${added.path}`

      createSale(url)
    } catch (error) {
      console.log('Error uploading file: ', error)
    }  
  }

  async function createSale(url) {
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)    
    const signer = provider.getSigner()

    /* next, create the item */
    let contract = new ethers.Contract(nftaddress, NFT.abi, signer)
    let transaction = await contract.createToken(url)
    let tx = await transaction.wait()
    let event = tx.events[0]
    let value = event.args[2]
    let tokenId = value.toNumber()

    const price = ethers.utils.parseUnits(formInput.price, 'ether')
  
    /* then list the item for reading or selling on the Library */
    contract = new ethers.Contract(nftlibraryaddress, Library.abi, signer)
    let listingPrice = await contract.getListingPrice()
    listingPrice = listingPrice.toString()

    transaction = await contract.createMarketItem(nftaddress, tokenId, price, { value: listingPrice })
    await transaction.wait()
    router.push('/csvideos')
  }

  return (
    <>
      <Navbar />
    <br />
    <div className="flex justify-center">
      <div className="w-1/2 flex flex-col pb-12">
        <input 
          placeholder="Title of Video Book"
          className="mt-8 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}
        />
        <textarea
          placeholder="Description of Author of Video Book )"
          className="mt-2 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, description: e.target.value })}
          rows={6}
        />
        <input
          placeholder="Asset Price in MATIC (Add 0 for free videos)"
          className="mt-2 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, price: e.target.value })}
        />
        <input
          type="file"
          name="Asset"
          className="my-4"
          onChange={onChange}
        />
        <br />
        {
          fileUrl && (
            <>
            <iframe className="rounded mt-4"
              src={fileUrl}
              frameBorder="0"
              scrolling="auto"
             height="100%"
             width="100%"
            ></iframe>

            </>
          )
        }
        <button onClick={createMarket} className="font-bold mt-4 bg-black text-white rounded p-4 shadow-lg">
          Upload Video (mp4)
        </button>
      </div>
    </div>

    </>
  )
}
'''
'''--- pages/csbooks.js ---
/* pages/csbooks.js */
import { ethers } from 'ethers'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Web3Modal from "web3modal"
import Navbar from '../components/navbar'
import Head from 'next/head'
import { useRouter } from 'next/router'

import {
  nftaddress, nftlibraryaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Library from '../artifacts/contracts/Library.sol/NFTLibrary.json'

export default function Home() {
  const [nfts, setNfts] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')
  useEffect(() => {
    loadNFTs()
  }, [])
  const router = useRouter()
  
  async function loadNFTs() {
    /* create a generic provider and query for unsold market items */
    const provider = new ethers.providers.JsonRpcProvider()
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const libraryContract = new ethers.Contract(nftlibraryaddress, Library.abi, provider)
    const data = await libraryContract.fetchMarketItems()

     const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenURI(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items)
    setLoadingState('loaded') 
  }
  async function buyNft(nft) {
    /* needs the user to sign the transaction, so will use Web3Provider and sign it */
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()
    const contract = new ethers.Contract(nftlibraryaddress, Library.abi, signer)

    /* user will be prompted to pay the asking proces to complete the transaction */
    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')   
    const transaction = await contract.createMarketSale(nftaddress, nft.tokenId, {
      value: price
    })
    await transaction.wait()
    //loadNFTs()
    router.push('/reading')
  }
  if (loadingState === 'loaded' && !nfts.length) return ( <><Navbar />
 
  <h1 className="px-20 py-10 text-3xl">No Book in Library</h1></>)
  return (
 <div> 
     <Navbar />
    <br />
      <Head>
        <title>Decentralized Library - Explore available ebooks</title>
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
      </Head> 
  <>
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Computer Science Book Collections</h2>
            <br />
            <br />
          </center>
  </>

    <div className="flex justify-center pb-6">
      <div className="px-4" style={{ maxWidth: '1600px' }}>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4" >
  
          {
            
            nfts.map((nft, i) => (
              <div key={i} className="-bg-white border shadow rounded-xl overflow-hidden">
                <>
                <iframe className="object-fill h-400 w-full" 
                src={nft.image}
                  frameBorder="0"
                 scrolling="no"
                height="300px"
                width="100%"
                ></iframe> </>
                <div className="p-4">
                  <p style={{ height: '20px' }} className="text-2xl font-semibold">{nft.name}</p>
                  <div style={{ height: '30px', overflow: 'hidden' }}>
                    <p className="text-black">{nft.description}</p>
                  </div>
                </div>
                <div className="p-4 bg-black">
                  <p className="text-2xl mb-4 font-bold text-white">{nft.price} MATIC</p>
                  <button className="w-full bg-blue-500 text-white font-bold py-2 px-12 rounded" onClick={() => buyNft(nft)}>Read</button>
                </div>
                
              </div>
            ))
          }
        </div>
        
      </div>
    </div>
    <div>
    <>

</>
        </div>

    </div>
  )
}

'''
'''--- pages/csvideos.js ---
/* pages/csbooks.js */
import { ethers } from 'ethers'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Web3Modal from "web3modal"
import Navbar from '../components/navbar'
import Head from 'next/head'
import { useRouter } from 'next/router'

import {
  nftaddress, nftlibraryaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Library from '../artifacts/contracts/Library.sol/NFTLibrary.json'

export default function Home() {
  const [nfts, setNfts] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')
  useEffect(() => {
    loadNFTs()
  }, [])
  const router = useRouter()
  
  async function loadNFTs() {
    /* create a generic provider and query for unsold market items */
    const provider = new ethers.providers.JsonRpcProvider()
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const libraryContract = new ethers.Contract(nftlibraryaddress, Library.abi, provider)
    const data = await libraryContract.fetchMarketItems()

     const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenURI(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items)
    setLoadingState('loaded') 
  }
  async function buyNft(nft) {
    /* needs the user to sign the transaction, so will use Web3Provider and sign it */
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()
    const contract = new ethers.Contract(nftlibraryaddress, Library.abi, signer)

    /* user will be prompted to pay the asking proces to complete the transaction */
    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')   
    const transaction = await contract.createMarketSale(nftaddress, nft.tokenId, {
      value: price
    })
    await transaction.wait()
    //loadNFTs()
    router.push('/watching')
  }
  if (loadingState === 'loaded' && !nfts.length) return ( <><Navbar />
 
  <h1 className="px-20 py-10 text-3xl">No Video in Library</h1></>)
  return (
 <div> 
     <Navbar />
    <br />
      <Head>
        <title>Decentralized Library - Computer Science Video Books</title>
        <meta name="viewport" content="initial-scale=1.0, width=device-width" />
      </Head> 
  <>
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Computer Science Video Books Collections</h2>
            <br />
            <br />
          </center>
  </>

    <div className="flex justify-center pb-6">
      <div className="px-4" style={{ maxWidth: '1600px' }}>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4" >
  
          {
            
            nfts.map((nft, i) => (
              <div key={i} className="-bg-white border shadow rounded-xl overflow-hidden">
                <>
                <iframe className="object-fill h-400 w-full" 
                src={nft.image}
                  frameBorder="0"
                 scrolling="no"
                height="300px"
                width="100%"
                ></iframe> </>
                <div className="p-4">
                  <p style={{ height: '20px' }} className="text-2xl font-semibold">{nft.name}</p>
                  <div style={{ height: '30px', overflow: 'hidden' }}>
                    <p className="text-black">{nft.description}</p>
                  </div>
                </div>
                <div className="p-4 bg-black">
                  <p className="text-2xl mb-4 font-bold text-white">{nft.price} MATIC</p>
                  <button className="w-full bg-blue-500 text-white font-bold py-2 px-12 rounded" onClick={() => buyNft(nft)}>Watch Video Book</button>
                </div>
                
              </div>
            ))
          }
        </div>
        
      </div>
    </div>
    <div>
    <>

</>
        </div>

    </div>
  )
}

'''
'''--- pages/earn.js ---
import { React } from 'react';
import { CodeIcon, LightningBoltIcon, 
  AcademicCapIcon,   CalculatorIcon,
  LightBulbIcon,  BookOpenIcon,  
  VideoCameraIcon,} from '@heroicons/react/outline';

import Navbar from '../components/navbar';

const features = [
  {
    name: 'Discord Server ',
    description:
      'Join our Discord Server',
    icon: BookOpenIcon,
    href: 'https://discord.com/',
  },
  {
    name: 'Twitter',
    description:
      'Join us on Twitter ',
    icon: VideoCameraIcon,
    href: 'https://twitter.com',
  },
  {
    name: 'Telegram',
    description:
      'Join us on Telegram',
    icon:LightBulbIcon,
    href: 'https://telegram.org/',
  },
  {
    name: 'Facebook',
    description:
      'Join us on Facebook',
    icon: AcademicCapIcon,
    href: 'https://facebook.com',
  },
  {
    name: 'YouTube',
    description:
      'Join us on YouTubes',
    icon: LightningBoltIcon,
    href: 'https://www.youtube.com/',
  },
  

];

export default function CS() {
  return (
    <>
      <Navbar />
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Learn and Earn</h2>
            <br />
            <br />
          </center>
          <div>
          <center>
          <p> For a user to earn, you have to go to the section of the book or video</p>
          <br />
            <br />
          <ul>
              <li>1. Select a book to read or a video to watch.</li>
              <li>2. After reading or watching,</li>
              <li>3. Take a short quiz to ascertain that knowledge was impacted.</li>
              <li>4. If you successully passed the quiz, you earn an Delibrary NFT.</li>
              <li>5. Five Delibrary NFT qualifies you access to Premium contents.</li>
          </ul>
          </center>
          </div>
        </div>
        

      </div>
    </>
  );
}

'''
'''--- pages/index.js ---
import router from 'next/router';
import { React } from 'react';
import Navbar from '../components/navbar';
import actions from '../data/myindex';
import Image from 'next/image'
import banner from '../images/l1.jpg'
//import '../public/ceramic.css';
import { ThreeIdConnect, EthereumAuthProvider } from '@3id/connect'

// eslint-disable-next-line no-unused-vars
function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Home() {

  async function Connect() {
    const threeIdConnect = new ThreeIdConnect()
    const addresses = await window.ethereum.enable()
    
    const authProvider = new EthereumAuthProvider(window.ethereum, addresses[0])
    
    await threeIdConnect.connect(authProvider)
    // await threeIdConnect.connect(authProvider)
    const provider = await threeIdConnect.getDidProvider()
    const didProvider = await threeIdConnect.getDidProvider()
    
  }

  return (
    <>
    
      <Navbar />

      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-12">
        <br />
        <div> 
        <Image 
          src={banner}
          alt="Decentralized Library"
          height={450} //automatically provided
        //width={1360}
        />

      </div> 

        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Welcome to Decentralized Library</h2>
            <br />
            <h2 className="text-3xl leading-7 text-black sm:text-xl sm:truncate hover:opacity-25">
            No political censorship, No Restriction to Knowledge 
              {' '}
              <br />
              Read, Learn and Earn!!!
            </h2>
            <br />
            <br />
          </center>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          {actions.map((person) => (
            <div
              key={person.name}
              className="relative rounded-lg border-2 border-gray-700 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:bg-red-200 focus-within:ring-6 focus-within:ring-offset-6 focus-within:ring-indigo-900"
            >
              <div className="flex-shrink-0">
                <person.icon className="h-12 w-12" aria-hidden="true" />
              </div>
              <div className="flex-1 min-w-0 ">
                <a
                  className="focus:outline-none text-center "
                  onClick={() => { router.push(person.href); }}
                >
                  <span className="absolute inset-0" aria-hidden="true" />
                  <p className="text-lg font-medium text-gray-900">{person.name}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
        <br />
        <br />
        <div className="flex-1 min-w-0 ">
          <center>
          <button onClick={Connect} class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-full">
            Connect wallet
          </button>

      </center>
      </div>
        <br />
      </div>
    </>
  );
}

'''
'''--- pages/listbooks.js ---
import { ethers } from 'ethers'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Web3Modal from "web3modal"

import {
  nftaddress, nftmarketaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Market from '../artifacts/contracts/Market.sol/NFTMarket.json'

let rpcEndpoint = null

if (process.env.NEXT_PUBLIC_WORKSPACE_URL) {
  rpcEndpoint = process.env.NEXT_PUBLIC_WORKSPACE_URL
}

export default function Home() {
  const [nfts, setNfts] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')
  useEffect(() => {
    loadNFTs()
  }, [])
  async function loadNFTs() {    
    const provider = new ethers.providers.JsonRpcProvider(rpcEndpoint)
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const marketContract = new ethers.Contract(nftmarketaddress, Market.abi, provider)
    const data = await marketContract.fetchMarketItems()
    
    const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenURI(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        itemId: i.itemId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items)
    setLoadingState('loaded') 
  }
  async function buyNft(nft) {
    const web3Modal = new Web3Modal()
    const connection = await web3Modal.connect()
    const provider = new ethers.providers.Web3Provider(connection)
    const signer = provider.getSigner()
    const contract = new ethers.Contract(nftmarketaddress, Market.abi, signer)

    const price = ethers.utils.parseUnits(nft.price.toString(), 'ether')
    const transaction = await contract.createMarketSale(nftaddress, nft.itemId, {
      value: price
    })
    await transaction.wait()
    loadNFTs()
  }
  if (loadingState === 'loaded' && !nfts.length) return (<h1 className="px-20 py-10 text-3xl">No items in marketplace</h1>)
  return (
    <div className="flex justify-center">
      <div className="px-4" style={{ maxWidth: '1600px' }}>
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 pt-4">
          {
            nfts.map((nft, i) => (
              <div key={i} className="border shadow rounded-xl overflow-hidden">
                <img src={nft.image} />
                <div className="p-4">
                  <p style={{ height: '64px' }} className="text-2xl font-semibold">{nft.name}</p>
                  <div style={{ height: '70px', overflow: 'hidden' }}>
                    <p className="text-gray-400">{nft.description}</p>
                  </div>
                </div>
                <div className="p-4 bg-black">
                  <p className="text-2xl mb-4 font-bold text-white">{nft.price} ETH</p>
                  <button className="w-full bg-pink-500 text-white font-bold py-2 px-12 rounded" onClick={() => buyNft(nft)}>Buy</button>
                </div>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  )
}

'''
'''--- pages/liveclass.js ---
import { React } from 'react';
import Navbar from '../components/navbar';
import { useRouter } from 'next/router'

export default function ReadBook() {
  const router = useRouter()

  async function MoreBooks() {
    /* Link to Library Categories*/

    router.push('/community')
  }
   return (
    <>
      <Navbar />
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <br />
        <div className="md:items-center">
          <center>
         
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25"> Streaming Live Class</h2>

          </center>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-1 lg:grid-cols-1 gap-4 pt-4" >
  
          {
           
              <div className="-bg-white border shadow rounded-xl overflow-hidden">
                <>
                <video id='stream'  cclassName="object-fill h-400 w-full" width="100%" height="450px" controls>
                  <source src="https://cdn.livepeer.com/hls/12c8kni7n2mjt3cp/index.m3u8" type="application/x-mpegURL"/>
                </video>
                </>
                <div className="p-4 bg-black">
                  <button className="w-full bg-blue-500 text-white font-bold py-2 px-12 rounded" onClick={() => MoreBooks()}>contact us to schedule a live class</button>
                </div>
                
              </div>

          }
        </div>

      </div>
    </>
  )
  }

'''
'''--- pages/mint.js ---
/* pages/create-item-ebook.js */
import { useState } from 'react'
import { useRouter } from 'next/router'
import Navbar from '../components/navbar'
import axios from "axios";

export default function CreateItem() {
  const [fileUrl, setFileUrl] = useState(null)
  const [formInput, updateFormInput] = useState({  name: '' })
  const router = useRouter()

  async function mintNFT() {
    const { name } = formInput
    const options = {
        method: 'POST',
        url: 'https://api.nftport.xyz/v0/mints/easy/urls',
        headers: {
          'Content-Type': 'application/json',
          Authorization: '768bfb7a-087d-4ee1-8bb0-5498cc36ad46'
        },
        data: {
          chain: 'polygon',
          name: 'DLIB NFT',
          description: 'An NFT you earn at Decentralized Library',
          file_url: 'https://thumbs.dreamstime.com/b/conceptual-hand-writing-showing-well-done-concept-meaning-used-praising-demonstrating-group-something-have-good-way-young-142552626.jpg',
          mint_to_address: formInput.name
        }
      };

        axios.request(options).then(function (response) {
          console.log(response.data);
          alert("Your DLIB NFT have just been minted. Check your NFT on polygon explorer");
        }).catch(function (error) {
          console.error(error);
        });
       router.push('/')
 }

 return (
    <>
      <Navbar />
    <br />
    <div className="flex justify-center">
      <div className="w-1/2 flex flex-col pb-12">
        <input 
          placeholder="Enter you Ethereum Wallet Address"
          className="mt-8 border rounded p-4"
          onChange={e => updateFormInput({ ...formInput, name: e.target.value })}
        />

        <button onClick={mintNFT} className="font-bold mt-4 bg-black text-white rounded p-4 shadow-lg">
          Mint you NFT
        </button>
      </div>
    </div>

    </>
  )
}
'''
'''--- pages/physical.js ---
import router from 'next/router';
import { React } from 'react';
import Navbar from '../components/navbar';
import actions from '../data/physicaldata';

// eslint-disable-next-line no-unused-vars
function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Home() {
  return (
    <>
      <Navbar />

      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-12">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Physical Science Section</h2>
            <br />
            <br />
          </center>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          {actions.map((person) => (
            <div
              key={person.name}
              className="relative rounded-lg border-2 border-gray-700 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:bg-red-200 focus-within:ring-6 focus-within:ring-offset-6 focus-within:ring-indigo-900"
            >
              <div className="flex-shrink-0">
                <person.icon className="h-6 w-6" aria-hidden="true" />
              </div>
              <div className="flex-1 min-w-0">
                <a
                  className="focus:outline-none text-center"
                  onClick={() => { router.push(person.href); }}
                >
                  <span className="absolute inset-0" aria-hidden="true" />
                  <p className="text-md font-medium text-gray-900">{person.name}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
        <br />
        <br />
        <br />
      </div>
    </>
  );
}

'''
'''--- pages/physicalvid.js ---
import router from 'next/router';
import { React } from 'react';
import Navbar from '../components/navbar';
import actions from '../data/physicalviddata';

// eslint-disable-next-line no-unused-vars
function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Home() {
  return (
    <>
      <Navbar />

      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-12">
        <br />
        <div className="md:items-center">
          <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Physical Science Section</h2>
            <br />
            <br />
          </center>
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          {actions.map((person) => (
            <div
              key={person.name}
              className="relative rounded-lg border-2 border-gray-700 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:bg-red-200 focus-within:ring-6 focus-within:ring-offset-6 focus-within:ring-indigo-900"
            >
              <div className="flex-shrink-0">
                <person.icon className="h-6 w-6" aria-hidden="true" />
              </div>
              <div className="flex-1 min-w-0">
                <a
                  className="focus:outline-none text-center"
                  onClick={() => { router.push(person.href); }}
                >
                  <span className="absolute inset-0" aria-hidden="true" />
                  <p className="text-md font-medium text-gray-900">{person.name}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
        <br />
        <br />
        <br />
      </div>
    </>
  );
}

'''
'''--- pages/reading.js ---
import { React } from 'react';
import Navbar from '../components/navbar';
import { useRouter } from 'next/router'
import { ethers } from 'ethers'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Web3Modal from "web3modal"
import Head from 'next/head'

import {
  nftaddress, nftlibraryaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Library from '../artifacts/contracts/Library.sol/NFTLibrary.json'

export default function ReadBook() {
  const [nfts, setNfts] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')
  useEffect(() => {
    loadNFTs()
  }, [])
  const router = useRouter()

  async function MoreBooks() {
    /* Link to Library Categories*/
    router.push('/catebooks')
  }

  async function Quiz() {
    /* Link to Library Categories*/
    router.push('http://127.0.0.1:8080')
  }
  
  async function loadNFTs() {
    /* create a generic provider and query for unsold market items */
    const provider = new ethers.providers.JsonRpcProvider()
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const libraryContract = new ethers.Contract(nftlibraryaddress, Library.abi, provider)
    const data = await libraryContract.fetchMyNFTs()

     const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenURI(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items)
    setLoadingState('loaded') 
  }

  if (loadingState === 'loaded' && !nfts.length) return (<><Navbar /><h1 className="py-10 px-20 text-3xl">No book for you</h1></>)
  {
   return (
    <>
      <Navbar />
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <br />
        <div className="md:items-center">
          <center>
         
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25"> My Reading Space</h2>

          </center>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-1 lg:grid-cols-1 gap-4 pt-4" >
  
          {
            nfts.map((nft, i) => (
              <div key={i} className="-bg-white border shadow rounded-xl overflow-hidden">
                <>
                <iframe className="object-fill h-400 w-full" 
                src={nft.image}
                  frameBorder="0"
                 scrolling="no"
                height="450px"
                width="100%"
                ></iframe> </>
                <div className="p-4">
                  <p style={{ height: '20px' }} className="text-2xl font-semibold">{nft.name}</p>
                </div>
                <div className="p-4 bg-black">
                  <button className="w-full bg-blue-500 text-white font-bold py-2 px-12 rounded" onClick={() => Quiz()}>Take a quiz and Earn an NFT</button>
                </div>
                <div className="p-4 bg-black">
                  <button className="w-full bg-blue-500 text-white font-bold py-2 px-12 rounded" onClick={() => MoreBooks()}>Read more book</button>
                </div>
                
              </div>
            ))
          }
        </div>

      </div>
    </>
  )
  }
}

'''
'''--- pages/upload.js ---
import router from 'next/router';
import { React } from 'react';
import Navbar from '../components/navbar';
import actions from '../data/uploadvideodata';

// eslint-disable-next-line no-unused-vars
function classNames(...classes) {
  return classes.filter(Boolean).join(' ');
}

export default function Home() {
  return (
    <>
      <Navbar />
      <div className="max-w-3xl mx-auto px-4 sm:px-6 lg:px-12">
        <div className="md:items-center">
        <center>
            <br />
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25">Choose a section and make your upload</h2>
            <br />
            <br />
          </center>
        
        </div>

        <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
          {actions.map((person) => (
            <div
              key={person.name}
              className="relative rounded-lg border-2 border-gray-700 bg-white px-6 py-5 shadow-sm flex items-center space-x-3 hover:bg-red-200 focus-within:ring-6 focus-within:ring-offset-6 focus-within:ring-indigo-900"
            >
              <div className="flex-shrink-0">
                <person.icon className="h-12 w-12" aria-hidden="true" />
              </div>
              <div className="flex-1 min-w-0 ">
                <a
                  className="focus:outline-none text-center "
                  onClick={() => { router.push(person.href); }}
                >
                  <span className="absolute inset-0" aria-hidden="true" />
                  <p className="text-lg font-medium text-gray-900">{person.name}</p>
                </a>
              </div>
            </div>
          ))}
        </div>
        <br />
        <br />
        <br />

      </div>
    </>
  );
}

'''
'''--- pages/watching.js ---
import { React } from 'react';
import Navbar from '../components/navbar';
import { useRouter } from 'next/router'
import { ethers } from 'ethers'
import { useEffect, useState } from 'react'
import axios from 'axios'
import Web3Modal from "web3modal"
import Head from 'next/head'

import {
  nftaddress, nftlibraryaddress
} from '../config'

import NFT from '../artifacts/contracts/NFT.sol/NFT.json'
import Library from '../artifacts/contracts/Library.sol/NFTLibrary.json'

export default function ReadBook() {
  const [nfts, setNfts] = useState([])
  const [loadingState, setLoadingState] = useState('not-loaded')
  useEffect(() => {
    loadNFTs()
  }, [])
  const router = useRouter()

  async function MoreBooks() {
    /* Link to Library Categories*/

    router.push('/catebooks')
  }
  
  async function loadNFTs() {
    /* create a generic provider and query for unsold market items */
    const provider = new ethers.providers.JsonRpcProvider()
    const tokenContract = new ethers.Contract(nftaddress, NFT.abi, provider)
    const libraryContract = new ethers.Contract(nftlibraryaddress, Library.abi, provider)
    const data = await libraryContract.fetchMyNFTs()

     const items = await Promise.all(data.map(async i => {
      const tokenUri = await tokenContract.tokenURI(i.tokenId)
      const meta = await axios.get(tokenUri)
      let price = ethers.utils.formatUnits(i.price.toString(), 'ether')
      let item = {
        price,
        tokenId: i.tokenId.toNumber(),
        seller: i.seller,
        owner: i.owner,
        image: meta.data.image,
        name: meta.data.name,
        description: meta.data.description,
      }
      return item
    }))
    setNfts(items)
    setLoadingState('loaded') 
  }

  if (loadingState === 'loaded' && !nfts.length) return (<><Navbar /><h1 className="py-10 px-20 text-3xl">No Video book for you</h1></>)
  {
   return (
    <>
      <Navbar />
      <div className="max-w-5xl mx-auto px-4 sm:px-6 lg:px-8">
        <br />
        <div className="md:items-center">
          <center>
         
            <h2 className="text-6xl font-bold leading-1 text-black-900 sm:text-5xl hover:opacity-25"> My Watching Tube</h2>

          </center>
        </div>
        
        <div className="grid grid-cols-1 sm:grid-cols-1 lg:grid-cols-1 gap-4 pt-4" >
  
          {
            nfts.map((nft, i) => (
              <div key={i} className="-bg-white border shadow rounded-xl overflow-hidden">
                <>
                <iframe className="object-fill h-400 w-full" 
                src={nft.image}
                  frameBorder="0"
                 scrolling="no"
                height="450px"
                width="100%"
                ></iframe> </>
                <div className="p-4">
                  <p style={{ height: '20px' }} className="text-2xl font-semibold">{nft.name}</p>
                </div>
                <div className="p-4 bg-black">
                  <button className="w-full bg-blue-500 text-white font-bold py-2 px-12 rounded" onClick={() => MoreBooks()}>Watch more Video Books</button>
                </div>
                
              </div>
            ))
          }
        </div>

      </div>
    </>
  )
  }
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en" >
<head>
  <meta charset="UTF-8">
  <title>CodePen -  Dynamic JS JQuery Quiz</title>
  <link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/bootstrap/5.0.2/css/bootstrap.min.css'>
<link rel='stylesheet' href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css'><link rel="stylesheet" href="./style.css">

</head>
<body>
<!-- partial:index.partial.html -->
<body>
    <!-- website section start -->
    <div class="container-fluid px-0">
    <section class="quizbody">
       <div class="container">
           <div class="row">
               <div class="col-12 d-flex text-center justify-content-center align-items-center flex-column" style="padding: 50px 0; background-color: #007bff; color: white;">
                    <h1 class="quizh1" style="font-size: 3rem; font-weight: 700;">
                        Quiz
                    </h1>
                    <h3 class="descriptionh3">
                        Click below Button to Start the Quiz
                    </h3>
               </div>
               <div class="col-12 button-div d-flex justify-content-center align-items-center">
                   <div>
                        <button class="btn" id="mainButton">
                            Start Your Quiz
                            <span></span><span></span><span></span><span></span>
                        </button>
                   </div>
               </div>
               <div class="col-12 d-flex justify-content-center align-items-center flex-column">
                        <div class="info_box">
                            <div class="info-title"><span>Some Rules of this Quiz</span></div>
                            <div class="info-list">
                                <div class="info">1. You will have only <span>20 seconds</span> per each question.</div>
                                <div class="info">2. You can skip any question you want.</div>
                                <div class="info">3. You can't select any option once time goes off.</div>
                                <div class="info">4. You can't exit from the Quiz while you're playing.</div>
                                <div class="info">5. You'll get points on the basis of your correct answers.</div>
                                <div class="info">6. Your skipped question will be result 0 points.</div>
                            </div>
                            <div class="buttons">
                                <button class="quit btn">Exit Quiz</button>
                                <button class="continue btn">Continue</button>
                            </div>
                    </div>
               </div>
           </div>
       </div>
    </section>
    <section class="questionbody">
        <div class="container-fluid" style="background-color: #007bff;">
            <div class="row">
                <div class="col-12 d-flex justify-content-center align-items-center">
                        <div class="quiz_box">
                            <header>
                                <div class="title">Quiz Application</div>
                                <div class="timer">
                                    <div class="time_left_txt">Time Left</div>
                                    <div class="timer_sec">20</div>
                                </div>
                                <div class="time_line"></div>
                            </header>
                            <section class="qasection">
                                <div class="que_text">
                                    How old am I?
                                </div>
                                <div class="option_list containerr">
                                    <div class="option">
                                        <input type="radio" name="option" id="opt1" value="opt1input">
                                        <label for="opt1" aria-label="opt1">
                                            <span></span>
                                            option 1
                                        </label>
                                    </div>
                                
                                    <div class="option">
                                        <input type="radio" name="option" id="opt2" value="opt1input">
                                        <label for="opt2" aria-label="opt2">
                                            <span></span>
                                            option 2
                                        </label>
                                    </div>
                                
                                    <div class="option">
                                        <input type="radio" name="option" id="opt3" value="opt1input">
                                        <label for="opt3" aria-label="opt3">
                                            <span></span>
                                            option 3
                                        </label>
                                    </div>
                                    <div class="option">
                                        <input type="radio" name="option" id="opt4" value="opt1input">
                                        <label for="opt4" aria-label="opt4">
                                            <span></span>
                                            option 4
                                        </label>
                                    </div>
                                </div>
                            </section>
                        
                        
                            <footer>
                                <div class="total_que">
                                    <span class="QNO"></span>  of 20
                                </div>
                                <div class="btns">
                                <button class="back btn">back</button>
                                <button class="btn skip">Skip</button>
                                <button class="btn next">Next</button>
                                <button class="btn result">Result</button>
                                </div>
                            </footer>
                        </div>
                </div>
            </div>
        </div>
    </section>
    <section class="resultbody">
        <div class="container-fluid" style="background-color: #007bff;">
            <div class="row">
                <div class="col-12 d-flex justify-content-center align-items-center">
                    <div class="result_box">
                        <header class="d-flex flex-column">
                            <div class="title" style="
                                margin-top: 10px;
                                font-size: 30px;
                                font-weight: 700;
                                color: var(--bgprm);
                            ">Your Result</div>
                            <div class="time_line"></div>
                        </header>
                        <section class="result-showing-box">
                            <div class="answer-info">
                                <div class="total-ans d-flex justify-content-between">
                                    <h3>ALL Questions</h3>
                                    <h3 style="color: #007bff;">20</h3>
                                </div>
                                <div class="correct-ans d-flex justify-content-between">
                                    <h4>Correct Answers</h4>
                                    <h4 class="Correct-ans-given" style="color: #007bff;"></h4>
                                </div>
                                <div class="wrong-ans d-flex justify-content-between">
                                    <h4>Wrong Answers</h4>
                                    <h4 class="wrong-ans-given" style="color: #007bff;"></h4>
                                </div>
                                <div class="skipped-ans d-flex justify-content-between">
                                    <h4>Skipped Answers</h4>
                                    <h4 style="color: #007bff;" class="skip-ans-given"></h4>
                                </div>
                            </div>
                            <div class="perc-result">
                                <h3>Your Percentage is <span class="percentage" style="color: #007bff;"></span></h3>
                                <div class="perc-line-div">
                                    <div class="perc-line"></div>
                                </div>
                            </div>
                            <div class="time-result">
                                <h3>You completed the Quiz in <span class="time" style="color: #007bff;"></span> Seconds</h3>
                                <div class="time-line-div">
                                    <div class="time-line"></div>
                                </div>
                            </div>
                        </section>
                        <footer style="height: 100px;">
                            <div class="replay-btn-icons">
                                <div>
                                    <p class="icons-text mb-0">
                                        How you felt about the Quiz
                                    </p>
                                    <div class="icons">
                                    <i class="far fa-surprise"></i>
                                    <i class="far fa-smile-beam"></i>
                                    <i class="far fa-sad-cry"></i>
                                    <i class="far fa-meh"></i>
                                    <i class="far fa-grin-hearts"></i>
                                    </div>
                                </div>
                            </div>
                            <div class="btns">
                                <button class="restart btn" onclick="window.location.href = 'http://localhost:3000/';" >Go back to library</button>
                            </div>
                        </footer>
                    </div>
                </div>
            </div>
        </div>
    </section>
    </div>

</body>
<!-- partial -->
  <script src='https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js'></script><script  src="./script.js"></script>

</body>
</html>

'''
'''--- public/script.js ---
$(document).ready(function () {
let quizJSON=[
    {
        "title":"When did the programming language C++ came out?",
        "choices":[
            1997,
            1995,
            2000,
            1998
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"When Node.js came out?",
        "choices":[
            2010,
            2011,
            2009,
            2006
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"What brand of laptop do I have?",
        "choices":[
            "HP",
            "Acer",
            "Dell",
            "Lenovo"
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"How old am I?",
        "choices":[
            12,
            20,
            9,
            16
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"How old is Google?",
        "choices":[
            12,
            20,
            18,
            16
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"	Grand Central Terminal, Park Avenue, New York is the world's?",
        "choices":[
           "Central park",
            "Central Gym",
            "Central Class",
            "Central Bus"
        ],
        "correctAnswer":1,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Divide 10 by half and add ten?",
        "choices":[
            12,
            20,
            18,
            16
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    }
     ,
    {
        "title":"Divide 50 by half and add ten?",
        "choices":[
            12,
            20,
            18,
            16
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Divide 20 by half and add ten?",
        "choices":[
            12,
            20,
            18,
            16
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Divide 30 by half and add ten?",
        "choices":[
            12,
            20,
            18,
            16
        ],
        "correctAnswer":1,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"How many months have 28 days?",
        "choices":[
            1,
            2,
            "All of them",
            "Depends if there's a leap year or not."
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"The answer is really big.",
        "choices":[
            
         "THE ANSWER",
            "Really big",
            "An elephant",
            "The data given is insufficient"
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Potato was introduced to Europe by?",
        "choices":[
            "Dutch",
            "Germans",
            "Germans",
            "Portuguese"
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Private Sector Mutual Funds in Pakistan were permitted in the year:",
        "choices":[
            1964,
            1993,
            1994,
            2001
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"The 17th Asian Games were held in?",
        "choices":[
            2018,
            2014,
            2016,
            2015
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Who is the Author of “The Myth of independence”?",
        "choices":[
            "Zulfikar Ali Bhutto",
            "Aysha Jalal",
            "I.H. Qureshi",
            "Shahid Rafique"
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"How many sports were played in summer Olympic 2016?",
        "choices":[
            40,
            24,
            34,
            16
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"How many Sports were in Winter Olympic 2018?",
        "choices":[
            "9 Sports",
            "12 Sports",
            "7 Sports",
            "19 Sports"
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Ryanair airline belongs to which Country?",
        "choices":[
            "Finland",
            "Switzerland",
            "Ireland",
            "Tajikistan"
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Easyjet airline belongs to which Country?",
        "choices":[
            "Germany",
            "France",
            "England",
            "Australia"
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Divide 100 by half and add ten.",
        "choices":[
            12,
            20,
            18,
            16
        ],
        "correctAnswer":1,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Braathens airline belong to which Country?",
        "choices":[
            "Swedon",
            "Uraguay",
            "Iceland",
            "Norway"
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Iberia Airline belong to which Country?",
        "choices":[
            "Serbia",
            "Poland",
            "Latvia",
            "Spain"
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Katla Volcano located in which country?",
        "choices":[
            "Sawaziland",
            "Finiland",
            "England",
            "Iceland"
        ],
        "correctAnswer":2,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title": "What is always coming, but never arrives?",
        "choices":[
            "Tomorrow",
            "Today",
            "Yesterday",
            "Day"
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"What can be broken, but is never held?",
        "choices":[
            "Gold",
            "Pores",
            "Wood",
            "Promise"
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"What can one catch that is not thrown?",
        "choices":[
            "Cold",
            "Fever",
            "Fear",
            "Nothing"
        ],
        "correctAnswer":1,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"What has a head, a tail, but does not have a body?",
        "choices":[
            "Coin",
            "Cone",
            "Corn",
            "Chair"
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"How many Questions you Answered?",
        "choices":[
            12,
            20,
            11,
            "Not Present"
        ],
        "correctAnswer":3,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    },
    {
        "title":"Which room has no walls?",
        "choices":[
            "Mushroom",
            "Dinning room",
            "Grand ROOM",
            "Room"
        ],
        "correctAnswer":0,
        "pointerEvents":false,
        "secondsLeft":20,
        "AnsweredQue":""
    }
]
 quizJSON=JSON.stringify(quizJSON);
const quiz=JSON.parse(quizJSON);
console.log(quiz);
// Json work finished
 
var questionnumber=-1;
let scndsLftOfQueArr=[];
let radioBtnChecked=[];

// Some work for DOM Manipulation start

    $("#mainButton").click(function(){
        $(".quizh1").text("Rules");
        $(".descriptionh3").text("Read the Rules and understand them.");
        $(this).parent().fadeIn();
        $(this).parent().parent().remove();
        $(".info_box").fadeIn();
   });

   $(".quit").click(function(){
    location.reload();
   });

   $(".continue").click(function(){
    $(".quizbody").slideUp(1000);
    $(".questionbody").fadeIn(1000);
    questionnumber++;
    countTotalTime();
    showquestionnum();
    showquestion();
    diablingButtons();
    saveRadioBtnValue();
    // startTimeLeft();
    // checkTODisabelPointer();
   });

   $('.btn').on('mouseenter', function () {
    $(this).addClass('active');
   });
   $('.btn').on('mouseleave', function () {
    $(this).removeClass('active');
   });
   function diablingButtons() {
       if (questionnumber==0) {
         $(".back").addClass('disable');  
       }
       else
       {
         $(".back").removeClass('disable');  
       }
   }
// Some work for DOM Manipulation end

//allowing uncheck the radio button -->
        document.querySelectorAll('input[type=radio][name=option]').forEach((elem) => {
            elem.addEventListener('click', allowUncheck);
            elem.previous = elem.checked;
        });
     

    function allowUncheck(e) {
    if (this.previous) {
        this.checked = false;
    }
    document.querySelectorAll(
        `input[type=radio][name=${this.name}]`).forEach((elem) => {
        elem.previous = elem.checked;
    });
    };
//allowing uncheck the radio button <--

// starting the quiz's logical work
   
   let randomnumber;
   let randomnumarr=[];
   let indexpre=randomnumarr[questionnumber];
   let index =quiz[indexpre];

   //getting the random number function -->
        function getrandomnumber(){
        randomnumber=Math.floor(Math.random()*29)+1;
        };
   //getting the random number function <--

     //checking the Random Number for not getting same number -->
     function checkRandomNumber() {
         for (let i = 0; i < 31; i++) {     
                getrandomnumber()
                let checkRN= jQuery.inArray( randomnumber,  randomnumarr);
                if (checkRN==-1) {
                    randomnumarr[questionnumber]=randomnumber;
                    break;
                }
                }
                indexpre=randomnumarr[questionnumber];
                index =quiz[indexpre]
     }        
    //checking the Random Number for not getting same number <--

    //showing the QUESTIONS function -->
     function showquestion() {
         radioButtons = $("input:radio[name='option']");
         if (questionnumber<randomnumarr.length) {
             indexpre=randomnumarr[questionnumber];
             index =quiz[indexpre]
            $(".que_text").text(index.title);
            $("label").eq(0).text(index.choices[0]);
            $("label").eq(1).text(index.choices[1]);
            $("label").eq(2).text(index.choices[2]);
            $("label").eq(3).text(index.choices[3]);
            for (var x = 0; x < radioButtons.length; x++) {
                var idVal = $(radioButtons[x]).attr("id");
                radioBtnCheckedVal=$("label[for='"+idVal+"']").text();
                if (radioBtnCheckedVal === radioBtnChecked[questionnumber]) {
                    radioButtons[x].checked = true;
                }
                if (radioBtnChecked[questionnumber]===" ") {
                    radioButtons[x].checked = false;
                }
            }
            if (questionnumber>0) {
                 resetingTheTime();
             }
             startTimeLeft();
        }
        else
        {
             checkRandomNumber();
            $(".que_text").text(index.title);
            $("label").eq(0).text(index.choices[0]);
            $("label").eq(1).text(index.choices[1]);
            $("label").eq(2).text(index.choices[2]);
            $("label").eq(3).text(index.choices[3]);
            $("input:radio[name='option']").each(function(i) {
                this.checked = false;
            }); 
            console.log(index.correctAnswer);
            if (questionnumber>0) {
                 resetingTheTime();
             }
             startTimeLeft();
        } 
     };
     //showing the QUESTIONS function <--

    //  starting the time of question start function-->
    let secondSetInterval;
    let width;
    function startTimeLeft() {
      secondSetInterval = setInterval(function () {
          index.secondsLeft-=1;
          width=(index.secondsLeft/20)*100;
        //   $(".time_line").css(
        //       {
        //           "width":`${width}%`,
        //           "transition": "width 1s linear"
        //       }
        //   )
            if (index.secondsLeft<10) {
              $(".timer_sec").text("0" + index.secondsLeft);
            }
            else
            {
                $(".timer_sec").text(index.secondsLeft); 
            }
            if (index.secondsLeft==0) {
            $(".option_list").addClass("pointerNone");
            index.pointerEvents=true;
            $(".quiz_box").prepend(`<marquee id="marquee" class="marquee my-2" width="100%" direction="right" height="20px">
            You cannot select any option Now.
            </marquee>`);
            // $(".time_line").hide();
            clearInterval(secondSetInterval);
            }
      },1000);
    };
    //  starting the time of question end function <--

    //  resetting the time of question start function -->
    function resetingTheTime() {
      clearInterval(secondSetInterval);
      secondsForTimeOut=index.secondsLeft;
     scndsLftOfQueArr[questionnumber] = index.secondsLeft;
      secondCount = index.secondsLeft;
      $(".timer_sec").text(index.secondsLeft);    
    };
    //  resetting  the time of question end function <--

    //  starting the time of question start function-->
    let totalSetInterval;
    let totaltime=0;
    function countTotalTime() {
      totalSetInterval = setInterval(function () {
          totaltime+=1;
      },1000);
    };
    //  starting the time of question end function <--

    //  calculating the score and storing the checked values in-->
    let radioBtnCheckedVal;
    function saveRadioBtnValue() {
        $("input:radio[name='option']").each(function(i){
            if($(this).is(':checked'))
            {
                var idVal = $(this).attr("id");
                radioBtnCheckedVal=$("label[for='"+idVal+"']").text();
                return false;
            }
            else{
                radioBtnCheckedVal=" "
            }
        });
          var userAns = radioBtnCheckedVal;
        radioBtnChecked[questionnumber] = userAns;
    }
    // calculating the score <--

     //showing the QUESTIONS Number function -->
     function showquestionnum() {
          $(".QNO").text(questionnumber+1 + " ");
     }
     //showing the QUESTIONS Number function <--

// ending the quiz's logical work

// adding the functionalities to buttons starts

$(".back").click(function(){
        if (questionnumber<20 && questionnumber>=1) {
            $(".result").hide();
            $(".next").show();
            $(".skip").removeClass('disable');
            $("#marquee").remove();
            saveRadioBtnValue();
            clearInterval(secondSetInterval);
            questionnumber--;
            showquestionnum();
            showquestion();
            diablingButtons();
            if (index.pointerEvents===true) {   
              $(".option_list").addClass("pointerNone");
               $(".quiz_box").prepend(`<marquee id="marquee" class="marquee my-2" width="100%" direction="right" height="20px">
                You cannot select any option Now.
                </marquee>`)
                clearInterval(secondSetInterval);
                $(".timer_sec").text("00");
            }
            else
            {
             $(".option_list").removeClass("pointerNone");   
            }
            
        }
        else
        {
            diablingButtons();
        }
   });

   $(".next, .skip").click(function(){
        if (questionnumber<19) {
            $("#marquee").remove(); 
            clearInterval(secondSetInterval); 
            saveRadioBtnValue();
            questionnumber++;
            showquestionnum();
            showquestion();
            diablingButtons();
            indexpre=randomnumarr[questionnumber];
            index =quiz[indexpre]
            if (index.pointerEvents===true) {   
              $(".option_list").addClass("pointerNone");
              $(".quiz_box").prepend(`<marquee id="marquee" class="marquee my-2" width="100%" direction="right" height="20px">
                You cannot select any option Now.
                </marquee>`)
                clearInterval(secondSetInterval);
                $(".timer_sec").text("00");
            }
            else
            {
             $(".option_list").removeClass("pointerNone");   
            }
        }
        if (questionnumber==19) {
            $(".skip").addClass('disable');
            $(".next").hide();
            $(".result").show();
        }
   });

//    making a function for checking results -->
let CA=0;
let SA=0;
let WA=0;
function checkResults() {
    for (let i = 0; i < randomnumarr.length; i++) {
        let indexpre=randomnumarr[i];
        let index =quiz[indexpre]; 
        if (radioBtnChecked[i]==index.choices[index.correctAnswer]) {
            CA++;
        }  
        else if (radioBtnChecked[i]== " ") {
            SA++;
        }
        else
        {
             WA++;
        }      
    }
}

//    making a function for checking results <--

// CHECKING THE PECENTAGE

let width1=0;
let perc1=0;
function gettingPerc() {
    perc1=(CA/20)*100;
    perc1=Math.round(perc1);
    width1=perc1;
    $(".perc-line").css({
        "width":`${width1}%`,
        "transition": "width 1s linear"
    });

    if (perc1 >= 10 ) {
        alert("You just earned a DLIB NFT. Congratulations!!!");
        location.href = 'http://localhost:3000/mint'
    }  
    else
    {
       
    }  

}

let width2=0;
let perc2=0;
function gettingPercTime() {
    perc2=(totaltime/400)*100;
    width2=perc2;
    $(".time-line").css({
        "width":`${width2}%`,
        "transition": "width 1s linear"
    });
}
// CHECKING THE PECENTAGE

    $(".result").click(function () {
    $(".questionbody").remove();
    $(".resultbody").fadeIn();
    saveRadioBtnValue();
    clearInterval(totalSetInterval);
    checkResults();
    gettingPerc();
    gettingPercTime();
    $(".percentage").text(`${perc1}%`);
    $(".skip-ans-given").text(SA);
    $(".wrong-ans-given").text(WA);
    $(".Correct-ans-given").text(CA);
    $(".time").text(totaltime);
    });
// adding the functionalities to buttons ends
    $(".icons i").click(function () {
        $(this).siblings().css(
            {
                "display" : "none"
            }, 1000);
            $(this).css({
                "color": "#007bff"
            });
    });
    $("library").onclick(function(){
     location.href = 'http://localhost:3000/';
     // document.write("PLEASE RELOAD THE WEB PAGE location.reload doesnot 
   });
});
'''
'''--- public/style.css ---
@import url("https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,100;0,300;0,400;0,500;0,700;0,900;1,100;1,300;1,400;1,500;1,700;1,900&display=swap");
:root {
  --bgprm: #007bff;
  --bgfont: white;
}
* {
  margin: 0;
  padding: 0;
  font-family: "Roboto", sans-serif;
  box-sizing: border-box;
}
html {
  max-width: 100%;
}
body {
  font-family: "Roboto", sans-serif;
  color: black;
}
.quizbody {
  background-color: var(--bgfont);
}
.btn {
  --c: var(--bgprm);
  color: var(--c);
  font-size: 16px;
  border: 0.2em solid var(--c);
  background: transparent;
  text-transform: uppercase;
  font-weight: bold;
  letter-spacing: 0.1em;
  text-align: center;
  position: relative;
  overflow: hidden;
  z-index: 1;
  padding: 10px 30px;
  transition: 0.5s;
}

.btn span {
  position: absolute;
  width: 25%;
  height: 100%;
  background-color: var(--c);
  transform: translateY(150%);
  border-radius: 50%;
  left: calc((var(--n) - 1) * 25%);
  transition: 0.5s;
  transition-delay: calc((var(--n) - 1) * 0.1s);
  z-index: -1;
}

.btn:hover {
  color: var(--bgfont);
  text-align: left;
}

.btn:hover span {
  transform: translateY(0) scale(2);
}

.btn span:nth-child(1) {
  --n: 1;
}

.btn span:nth-child(2) {
  --n: 2;
}
.btn span:nth-child(3) {
  --n: 3;
}

.btn span:nth-child(4) {
  --n: 4;
}
#mainButton {
  font-size: 20px;
  padding: 16px 100px;
}
.btn:focus {
  box-shadow: none;
}
.btn:focus span {
  transform: translateY(150%);
}
.button-div {
  padding: 150px 0;
}
.bgblue {
  background-color: var(--bgprm);
}
.info_box {
  width: 540px;
  background: var(--bgprm);
  border-radius: 5px;
  margin-top: 20px;
  transition: all 0.3s ease;
  color: var(--bgfont);
}

.info-title {
  height: 60px;
  width: 100%;
  border-bottom: 1px solid lightgrey;
  display: flex;
  align-items: center;
  padding: 0 30px;
  border-radius: 5px 5px 0 0;
  font-size: 25px;
  font-weight: 600;
}
.info-list {
  padding: 15px 30px;
}

.info {
  margin: 5px 0;
  font-size: 17px;
}

.info span {
  font-weight: 700;
  color: lightgray;
}
.buttons {
  height: 60px;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  padding: 0 20px;
  border-top: 1px solid lightgrey;
}

.buttons button {
  margin: 0 5px;
  font-size: 16px;
  font-weight: 500;
  cursor: pointer !important;
  border-radius: 5px;
  transition: all 0.3s ease;
  color: var(--bgprm);
  background-color: var(--bgfont);
  padding: 10px 15px;
}
.buttons button:hover {
  color: #007bff;
  transform: scale(1.05);
}
.info_box {
  display: none;
}

.containerr {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

[type="radio"] {
  z-index: -1;
  position: absolute;
  opacity: 0;
}
[type="radio"]:checked ~ label {
  border-color: var(--bgprm);
  background-color: rgba(97, 154, 234, 0.16);
  color: var(--bgprm);
}
[type="radio"]:checked ~ label:before {
  will-change: transform, border-width, border-color;
  -webkit-animation: bubble 1s ease-in;
  animation: bubble 1s ease-in;
}
[type="radio"]:checked ~ label:after {
  will-change: opacity, box-shadow;
  -webkit-animation: sparkles 700ms ease-in-out;
  animation: sparkles 700ms ease-in-out;
}
[type="radio"]:checked ~ label > span {
  will-change: transform;
  border: 0;
  background-image: linear-gradient(to top right, var(--bgprm), #4363ee);
  -webkit-animation: radio 400ms cubic-bezier(0.17, 0.89, 0.32, 1.49);
  animation: radio 400ms cubic-bezier(0.17, 0.89, 0.32, 1.49);
}
[type="radio"]:checked ~ label > span:after {
  content: "";
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 6px;
  height: 6px;
  border-radius: 10px;
  background-color: #fff;
}
label {
  position: relative;
  display: grid;
  align-items: center;
  grid-template-columns: 100px 10 10px;
  grid-gap: 20px;
  width: 310px;
  height: 50px;
  padding: 0 20px;
  border-radius: 30px;
  border: 1px solid var(--bgprm);
  cursor: pointer;
  background-color: transparent;
  transition: all 300ms ease-in;
}
label:hover {
  border-color: #4062f6;
  background-color: rgba(97, 154, 234, 0.16);
}
label:before,
label:after {
  position: absolute;
  left: 29px;
  border-radius: 50%;
  content: "";
}
label:before {
  margin: -2rem;
  border: solid 2rem #545461;
  width: 4rem;
  height: 4rem;
  transform: scale(0);
}
label:after {
  margin: -0.1875rem;
  width: 0.375rem;
  height: 0.375rem;
  box-shadow: 0.32476rem -2.6875rem 0 -0.1875rem #ff8080,
    -0.32476rem -2.3125rem 0 -0.1875rem #ffed80,
    2.30366rem -1.42172rem 0 -0.1875rem #ffed80,
    1.6055rem -1.69573rem 0 -0.1875rem #a4ff80,
    2.54785rem 0.91464rem 0 -0.1875rem #a4ff80,
    2.32679rem 0.19796rem 0 -0.1875rem #80ffc8,
    0.87346rem 2.56226rem 0 -0.1875rem #80ffc8,
    1.29595rem 1.94258rem 0 -0.1875rem #80c8ff,
    -1.45866rem 2.28045rem 0 -0.1875rem #80c8ff,
    -0.71076rem 2.2244rem 0 -0.1875rem #a480ff,
    -2.69238rem 0.28141rem 0 -0.1875rem #a480ff,
    -2.18226rem 0.8312rem 0 -0.1875rem #ff80ed,
    -1.89869rem -1.92954rem 0 -0.1875rem #ff80ed,
    -2.01047rem -1.18791rem 0 -0.1875rem #ff8080;
}
label > span {
  position: relative;
  display: inline-flex;
  width: 20px;
  height: 20px;
  border-radius: 20px;
  border: 2px solid #454861;
  background-image: linear-gradient(to bottom, #3b4059, #1c1e2d);
}

.option:not(:last-child) {
  margin-bottom: 4px;
}

@keyframes radio {
  0%,
  17.5% {
    transform: scale(0);
  }
}
@keyframes bubble {
  15% {
    transform: scale(1);
    border-color: #545461;
    border-width: 1rem;
  }
  30%,
  100% {
    transform: scale(1);
    border-color: #545461;
    border-width: 0;
  }
}
@keyframes sparkles {
  0%,
  10% {
    opacity: 0;
    transform: scale(0);
  }
  15% {
    opacity: 1;
    transform: scale(1.2) rotate(-20deg);
    box-shadow: 0.32476rem -2.1875rem 0 0rem #ff8080,
      -0.32476rem -1.8125rem 0 0rem #ffed80,
      1.91274rem -1.10998rem 0 0rem #ffed80,
      1.21459rem -1.38398rem 0 0rem #a4ff80,
      2.06039rem 0.80338rem 0 0rem #a4ff80, 1.83932rem 0.0867rem 0 0rem #80ffc8,
      0.65652rem 2.11178rem 0 0rem #80ffc8, 1.07901rem 1.4921rem 0 0rem #80c8ff,
      -1.24172rem 1.82996rem 0 0rem #80c8ff,
      -0.49382rem 1.77391rem 0 0rem #a480ff,
      -2.20492rem 0.17015rem 0 0rem #a480ff,
      -1.69479rem 0.71994rem 0 0rem #ff80ed,
      -1.50777rem -1.61779rem 0 0rem #ff80ed,
      -1.61955rem -0.87617rem 0 0rem #ff8080;
  }
}

.quiz_box,
.result_box {
  margin: 60px 0;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
}
.quiz_box,
.result_box {
  width: 550px;
  background: #fff;
  border-radius: 5px;
  transition: all 0.3s ease;
}
.quiz_box header,
.result_box header {
  position: relative;
  z-index: 2;
  height: 70px;
  padding: 0 30px;
  background: #fff;
  border-radius: 5px 5px 0 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
  box-shadow: 0px 3px 5px 1px rgba(0, 0, 0, 0.1);
}
.quiz_box header .title {
  font-size: 20px;
  font-weight: 600;
}
.timer {
  color: #081e35;
  background: #83a5c9;
  height: 45px;
  padding: 0 8px;
  border-radius: 30px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 145px;
}

.time_left_txt {
  font-weight: 400;
  font-size: 17px;
  user-select: none;
}
.timer_sec {
  font-size: 18px;
  font-weight: 500;
  height: 30px;
  width: 45px;
  color: #fff;
  border-radius: 30px;
  line-height: 30px;
  text-align: center;
  background: #0c86ff;
  user-select: none;
}

.time_line {
  position: absolute;
  bottom: 0px;
  left: 0px;
  height: 3px;
  width: 100%;
  transition: width 1s linear;
  background: #007bff;
}
.qasection {
  padding: 25px 30px 20px 30px;
  background: #fff;
  height: 360px;
}
.que_text {
  font-size: 25px;
  font-weight: 600;
}

.option_list {
  padding: 20px 0px;
}

.option_list .option:last-child {
  margin-bottom: 0px;
}
footer {
  height: 60px;
  padding: 0 30px;
  display: flex;
  align-items: center;
  justify-content: space-between;
  border-top: 1px solid lightgrey;
  padding-right: 10px;
}
.total_que span {
  user-select: none;
}

.total_que span p {
  font-weight: 500;
  padding: 0 5px;
}
.total_que span p:first-child {
  padding-left: 0px;
}
.btns button:hover {
  color: var(--bgprm);
}
.questionbody {
  display: none;
}
/* .total_que {
  display: flex;
} */
.pointerNone {
  pointer-events: none;
}
.btns > button.btn.active {
  border-color: black;
  color: black;
}
.disable {
  pointer-events: none;
  border-color: #545461;
  color: #545461;
}
.result {
  display: none;
}
section.result-showing-box {
  padding: 32px 20px;
}
.perc-line-div,
.time-line-div {
  height: 5px;
  background: aliceblue;
  border-radius: 30px;
}
.perc-line,
.time-line {
  height: 5px;
  background-color: #007bff;
  width: 100%;
  border-radius: 29px;
}
.time-result,
.perc-result {
  margin-top: 16px;
}
p.icons-text.mb-0 {
  font-size: 23px;
  font-weight: 700;
  margin-bottom: 10px;
}
.icons i {
  font-size: 32px;
  color: cornflowerblue;
  padding-right: 10px;
  padding-top: 10px;
  cursor: pointer;
}
.icons i:hover {
  color: #007bff;
}
.icons {
  display: flex;
  justify-content: center;
  align-items: center;
}
.resultbody {
  display: none;
}
'''
'''--- public/vercel.svg ---
<svg width="283" height="64" viewBox="0 0 283 64" fill="none" 
    xmlns="http://www.w3.org/2000/svg">
    <path d="M141.04 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.46 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM248.72 16c-11.04 0-19 7.2-19 18s8.96 18 20 18c6.67 0 12.55-2.64 16.19-7.09l-7.65-4.42c-2.02 2.21-5.09 3.5-8.54 3.5-4.79 0-8.86-2.5-10.37-6.5h28.02c.22-1.12.35-2.28.35-3.5 0-10.79-7.96-17.99-19-17.99zm-9.45 14.5c1.25-3.99 4.67-6.5 9.45-6.5 4.79 0 8.21 2.51 9.45 6.5h-18.9zM200.24 34c0 6 3.92 10 10 10 4.12 0 7.21-1.87 8.8-4.92l7.68 4.43c-3.18 5.3-9.14 8.49-16.48 8.49-11.05 0-19-7.2-19-18s7.96-18 19-18c7.34 0 13.29 3.19 16.48 8.49l-7.68 4.43c-1.59-3.05-4.68-4.92-8.8-4.92-6.07 0-10 4-10 10zm82.48-29v46h-9V5h9zM36.95 0L73.9 64H0L36.95 0zm92.38 5l-27.71 48L73.91 5H84.3l17.32 30 17.32-30h10.39zm58.91 12v9.69c-1-.29-2.06-.49-3.2-.49-5.81 0-10 4-10 10V51h-9V17h9v9.2c0-5.08 5.91-9.2 13.2-9.2z" fill="#000"/>
</svg>
'''
'''--- routes/stat.js ---
const stat = [{ code: 'stat.AP ', name: 'Applications', desc: 'Biology, Education, Epidemiology, Engineering, Environmental Sciences, Medical, Physical Sciences, Quality Control, Social Sciences' }, { code: 'stat.CO ', name: 'Computation', desc: 'Algorithms, Simulation, Visualization' }, { code: 'stat.ME ', name: 'Methodology', desc: 'Design, Surveys, Model Selection, Multiple Testing, Multivariate Methods, Signal and Image Processing, Time Series, Smoothing, Spatial Statistics, Survival Analysis, Nonparametric and Semiparametric Methods' }, { code: 'stat.ML ', name: 'Machine Learning', desc: 'Covers machine learning papers (supervised, unsupervised, semi-supervised learning, graphical models, reinforcement learning, bandits, high dimensional inference, etc.) with a statistical or theoretical grounding' }, { code: 'stat.OT ', name: 'Other Statistics', desc: 'Work in statistics that does not fit into the other stat classifications' }, { code: 'stat.TH ', name: 'Statistics Theory', desc: 'stat.TH is an alias for math.ST. Asymptotics, Bayesian Inference, Decision Theory, Estimation, Foundations, Inference, Testing.' }];
export default stat;

'''
'''--- scripts/deploy.js ---
const hre = require("hardhat");
const fs = require('fs');

async function main() {
  const NFTLibrary = await hre.ethers.getContractFactory("NFTLibrary");
  const nftlibrary = await NFTLibrary.deploy();
  await nftlibrary.deployed();
  console.log("nftlibrary deployed to:", nftlibrary.address);

  const NFT = await hre.ethers.getContractFactory("NFT");
  const nft = await NFT.deploy(nftlibrary.address);
  await nft.deployed();
  console.log("nft deployed to:", nft.address);

  const NFTVideo = await hre.ethers.getContractFactory("NFTVideo");
  const nftvideo = await NFTVideo.deploy();
  await nftvideo.deployed();
  console.log("nftVideo deployed to:", nftvideo.address);

  let config = `
  export const nftlibraryaddress = "${nftlibrary.address}"
  export const nftaddress = "${nft.address}"
  export const nftvideoaddress = "${nftlibrary.address}"
  `

  let data = JSON.stringify(config)
  fs.writeFileSync('config.js', JSON.parse(data))

}

main()
  .then(() => process.exit(0))
  .catch(error => {
    console.error(error);
    process.exit(1);
  });

'''
'''--- server.js ---
var express = require('express');
var app = express();
app.use(express.static(__dirname + '/public/quiz')); //__dir and not _dir
var port = 8000; // you can use any port
app.listen(port);
console.log('server on' + port);
'''
'''--- src/app.ts ---
import { DID } from 'dids'
import ThreeIdResolver from '@ceramicnetwork/3id-did-resolver'
import KeyDidResolver from 'key-did-resolver'

import { createCeramic } from './ceramic'
import { createIDX } from './idx'
import { getProvider } from './wallet'
import type { ResolverRegistry } from 'did-resolver'

declare global {
  interface Window {
    did?: DID
  }
}

const ceramicPromise = createCeramic()

const authenticate = async (): Promise<string> => {
  const [ceramic, provider] = await Promise.all([ceramicPromise, getProvider()])
  const keyDidResolver = KeyDidResolver.getResolver()
  const threeIdResolver = ThreeIdResolver.getResolver(ceramic)
  const resolverRegistry: ResolverRegistry = {
    ...threeIdResolver,
    ...keyDidResolver,
  }
  const did = new DID({
    provider: provider,
    resolver: resolverRegistry,
  })
  await did.authenticate()
  await ceramic.setDID(did)
  const idx = createIDX(ceramic)
  window.did = ceramic.did
  return idx.id
}

const updateAlert = (status: string, message: string) => {
  const alert = document.getElementById('alerts')

  if (alert !== null) {
    alert.textContent = message
    alert.classList.add(`alert-${status}`)
    alert.classList.remove('hide')
    setTimeout(() => {
      alert.classList.add('hide')
    }, 5000)
  }
}

document.getElementById('activate_ceramic')?.addEventListener('click', () => {
  const ceramicIframe = document.getElementById('ceramic_docs')
  if (ceramicIframe?.classList.contains('show')) {
    ceramicIframe?.classList.remove('show')
    document.getElementById('activate_ceramic')?.classList.remove('active')
  } else {
    document.getElementById('activate_ceramic')?.classList.add('active')
    ceramicIframe?.classList.add('show')
  }
})

document.getElementById('activate_idx')?.addEventListener('click', () => {
  const idxIframe = document.getElementById('idx_docs')
  if (idxIframe?.classList.contains('show')) {
    idxIframe?.classList.remove('show')
    document.getElementById('activate_idx')?.classList.remove('active')
  } else {
    document.getElementById('activate_idx')?.classList.add('active')
    idxIframe?.classList.add('show')
  }
})

document.getElementById('bauth')?.addEventListener('click', () => {
  document.getElementById('loader')?.classList.remove('hide')
  authenticate().then(
    (id) => {
      const userDid = document.getElementById('userDID')
      const concatId = id.split('did:3:')[1]
      if (userDid !== null) {
        userDid.textContent = `${concatId.slice(0, 4)}...${concatId.slice(
          concatId.length - 4,
          concatId.length
        )}`
      }
      updateAlert('success', `Successfully connected with ${id}`)
      document.getElementById('loader')?.classList.add('hide')
      document.getElementById('bauth')?.classList.add('hide')
      document.getElementById('instructions')?.classList.remove('hide')
    },
    (err) => {
      console.error('Failed to authenticate:', err)
      updateAlert('danger', err)
      document.getElementById('loader')?.classList.add('hide')
    }
  )
})

'''
'''--- src/ceramic.ts ---
import type { CeramicApi } from '@ceramicnetwork/common'
import Ceramic from '@ceramicnetwork/http-client'
import { Caip10Link } from '@ceramicnetwork/stream-caip10-link'
import { TileDocument } from '@ceramicnetwork/stream-tile'

declare global {
  interface Window {
    ceramic?: CeramicApi
    [index: string]: any
  }
}

export async function createCeramic(): Promise<CeramicApi> {
  const ceramic = new Ceramic('https://ceramic-clay.3boxlabs.com')
  window.ceramic = ceramic
  window.TileDocument = TileDocument
  window.Caip10Link = Caip10Link
  return Promise.resolve(ceramic as CeramicApi)
}

'''
'''--- src/components/footer/index.js ---
import { Container, Row, Col } from 'react-grid-system';

function Footer() {
  return (
    <footer className="text-gray-600 body-font bg-gray-900">
      <div className="container px-5 py-10 mx-auto flex items-center md:flex-row flex-col">
        <div className="flex flex-col md:pr-10 md:mb-0 mb-6 pr-0 w-full md:w-auto md:text-left text-center">
          <h2 className="text-xs text-indigo-500  font-medium title-font mb-1 text-pink-500 font-sans">Join this new Project</h2>
          <h1 className="text-white md:text-3xl text-2xl font-medium title-font">AfricaNFT MarketPlace App <i>
          ...bringing out the best from African arts.</i></h1>
        </div>
        <div className="flex md:ml-auto md:mr-0 mx-auto items-center flex-shrink-0 space-x-4">
          <button
            className="bg-gray-100 inline-flex py-3 px-5 rounded-lg items-center hover:bg-gray-200 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" className="w-6 h-6" viewBox="0 0 512 512">
              <path
                d="M99.617 8.057a50.191 50.191 0 00-38.815-6.713l230.932 230.933 74.846-74.846L99.617 8.057zM32.139 20.116c-6.441 8.563-10.148 19.077-10.148 30.199v411.358c0 11.123 3.708 21.636 10.148 30.199l235.877-235.877L32.139 20.116zM464.261 212.087l-67.266-37.637-81.544 81.544 81.548 81.548 67.273-37.64c16.117-9.03 25.738-25.442 25.738-43.908s-9.621-34.877-25.749-43.907zM291.733 279.711L60.815 510.629c3.786.891 7.639 1.371 11.492 1.371a50.275 50.275 0 0027.31-8.07l266.965-149.372-74.849-74.847z"/>
            </svg>
            <span className="ml-4 flex items-start flex-col leading-none">
          <span className="text-xs text-gray-600 mb-1">GET IT ON</span>
          <span className="title-font font-medium">Google Play</span>
          </span>
          </button>
          <button
            className="bg-gray-100 inline-flex py-3 px-5 rounded-lg items-center hover:bg-gray-200 focus:outline-none">
            <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" className="w-6 h-6" viewBox="0 0 305 305">
              <path
                d="M40.74 112.12c-25.79 44.74-9.4 112.65 19.12 153.82C74.09 286.52 88.5 305 108.24 305c.37 0 .74 0 1.13-.02 9.27-.37 15.97-3.23 22.45-5.99 7.27-3.1 14.8-6.3 26.6-6.3 11.22 0 18.39 3.1 25.31 6.1 6.83 2.95 13.87 6 24.26 5.81 22.23-.41 35.88-20.35 47.92-37.94a168.18 168.18 0 0021-43l.09-.28a2.5 2.5 0 00-1.33-3.06l-.18-.08c-3.92-1.6-38.26-16.84-38.62-58.36-.34-33.74 25.76-51.6 31-54.84l.24-.15a2.5 2.5 0 00.7-3.51c-18-26.37-45.62-30.34-56.73-30.82a50.04 50.04 0 00-4.95-.24c-13.06 0-25.56 4.93-35.61 8.9-6.94 2.73-12.93 5.09-17.06 5.09-4.64 0-10.67-2.4-17.65-5.16-9.33-3.7-19.9-7.9-31.1-7.9l-.79.01c-26.03.38-50.62 15.27-64.18 38.86z"/>
              <path
                d="M212.1 0c-15.76.64-34.67 10.35-45.97 23.58-9.6 11.13-19 29.68-16.52 48.38a2.5 2.5 0 002.29 2.17c1.06.08 2.15.12 3.23.12 15.41 0 32.04-8.52 43.4-22.25 11.94-14.5 17.99-33.1 16.16-49.77A2.52 2.52 0 00212.1 0z"/>
            </svg>
            <span className="ml-4 flex items-start flex-col leading-none">
          <span className="text-xs text-gray-600 mb-1">Download on the</span>
          <span className="title-font font-medium">App Store</span>
          </span>
          </button>
        </div>
      </div>
        <Container className="text-white">
      <Row>
      <Col sm={4}>
      <h2 className="text-left text-2xl font-bold text-pink-500 font-sans">About</h2>
                <ul className="">
                  <li>
                    <a href="#">Blog</a>
                  </li>
                  <li>
                    <a href="#">About us</a>
                  </li>
                  <li>
                    <a href="#">Presentation</a>
                  </li>
                  <li>
                    <a href="#">Contact us</a>
                  </li>
                  <li>
                    <a href="#">Terms & conditions</a>
                  </li>
                </ul>
    </Col>
    <Col sm={4}>
    <h2 className="text-left text-2xl font-bold text-pink-500 font-sans">Marketplace</h2>
                <ul className="">
                  <li>
                    <a href="#">Marketplace FAQ</a>
                  </li>
                  <li>
                    <a href="#">How to Join the Community</a>
                  </li>
                  <li>
                    <a href="#">Sell Digital Asset</a>
                  </li>
                  <li>
                    <a href="#">Receive Payment</a>
                  </li>
                  <li>
                    <a href="#">Transactions FAQs</a>
                  </li>
                </ul>
    </Col>
    <Col sm={4}>
    <h2 className="text-left text-2xl font-bold text-pink-500 font-sans">Connet with us</h2>
    <ul className="">
                  <li>
                    <a href="#">Twitter</a>
                  </li>
                  <li>
                    <a href="#">Youtube</a>
                  </li>
                  <li>
                    <a href="#">Follow us on Github</a>
                  </li>
                  <li>
                    <a href="#">Join our Discord</a>
                  </li>
                  <li>
                    <a href="#">Join our Telegram</a>
                  </li>
                </ul>
                </Col>
            </Row>
          </Container>

      <div className="bg-gray-900">
                <div className="bg-gray-200 container mx-auto px-6 pt-4 pb-4 text-center font-semibold" >
                    
                   Copyright © 2021 - AfricaNFT. All rights reserved.
        </div>
            </div>
    </footer>
  )
}

export default Footer

'''
'''--- src/components/header/index.js ---
import Link from 'next/link';
import Nav from './nav';

function Header() {
  return (
    <header className="text-gray-600 body-font">
      <div className="container mx-auto flex flex-wrap p-5 flex-col md:flex-row items-center">
        <Link href="/">
          <a className="flex title-font font-medium items-center text-gray-900 mb-4 md:mb-0">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" stroke="currentColor" strokeLinecap="round"
                 strokeLinejoin="round" strokeWidth="2" className="w-10 h-10 text-white p-2 bg-indigo-500 rounded-full"
                 viewBox="0 0 24 24">
              <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
            </svg>
            <span className="ml-3 text-xl">Tailblocks</span>
          </a>
        </Link>
        <Nav/>
        <button
          className="inline-flex items-center bg-gray-100 border-0 py-1 px-3 focus:outline-none hover:bg-gray-200 rounded text-base mt-4 md:mt-0">Button
          <svg fill="none" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="2"
               className="w-4 h-4 ml-1" viewBox="0 0 24 24">
            <path d="M5 12h14M12 5l7 7-7 7"/>
          </svg>
        </button>
      </div>
    </header>
  )
}

export default Header

'''
'''--- src/components/header/nav.js ---
import Link from 'next/link';

function Nav() {
  return (
    <nav
      className="md:mr-auto md:ml-4 md:py-1 md:pl-4 md:border-l md:border-gray-400	flex flex-wrap items-center text-base justify-center">
      <Link href="/about">
        <a className="mr-5 hover:text-gray-900">About</a>
      </Link>
      <Link href="/events">
        <a className="mr-5 hover:text-gray-900">Events</a>
      </Link>
      <Link href="/contact-us">
        <a className="mr-5 hover:text-gray-900">Contact Us</a>
      </Link>
    </nav>
  )
}

export default Nav;

'''
'''--- src/components/home/posts.js ---
function Posts() {
  return (
    <section className="text-gray-600 body-font">
      <div className="container px-5 py-24 mx-auto">
        <div className="flex flex-wrap w-full mb-20">
          <div className="lg:w-1/2 w-full mb-6 lg:mb-0">
            <h1 className="sm:text-3xl text-2xl font-medium title-font mb-2 text-gray-900">Pitchfork Kickstarter
              Taxidermy</h1>
            <div className="h-1 w-20 bg-indigo-500 rounded"/>
          </div>
          <p className="lg:w-1/2 w-full leading-relaxed text-gray-500">Whatever cardigan tote bag tumblr hexagon
            brooklyn asymmetrical gentrify, subway tile poke farm-to-table. Franzen you probably haven't heard of them
            man bun deep jianbing selfies heirloom prism food truck ugh squid celiac humblebrag.</p>
        </div>
        <div className="flex flex-wrap -m-4">
          <div className="xl:w-1/4 md:w-1/2 p-4">
            <div className="bg-gray-100 p-6 rounded-lg">
              <img className="h-40 rounded w-full object-cover object-center mb-6" src="https://dummyimage.com/720x400"
                   alt="content"/>
                <h3 className="tracking-widest text-indigo-500 text-xs font-medium title-font">SUBTITLE</h3>
                <h2 className="text-lg text-gray-900 font-medium title-font mb-4">Chichen Itza</h2>
                <p className="leading-relaxed text-base">Fingerstache flexitarian street art 8-bit waistcoat. Distillery
                  hexagon disrupt edison bulbche.</p>
            </div>
          </div>
          <div className="xl:w-1/4 md:w-1/2 p-4">
            <div className="bg-gray-100 p-6 rounded-lg">
              <img className="h-40 rounded w-full object-cover object-center mb-6" src="https://dummyimage.com/721x401"
                   alt="content"/>
                <h3 className="tracking-widest text-indigo-500 text-xs font-medium title-font">SUBTITLE</h3>
                <h2 className="text-lg text-gray-900 font-medium title-font mb-4">Colosseum Roma</h2>
                <p className="leading-relaxed text-base">
                  Fingerstache flexitarian street art 8-bit waistcoat. Distillery
                  hexagon disrupt edison bulbche.</p>
            </div>
          </div>
          <div className="xl:w-1/4 md:w-1/2 p-4">
            <div className="bg-gray-100 p-6 rounded-lg">
              <img className="h-40 rounded w-full object-cover object-center mb-6" src="https://dummyimage.com/722x402"
                   alt="content"/>
                <h3 className="tracking-widest text-indigo-500 text-xs font-medium title-font">SUBTITLE</h3>
                <h2 className="text-lg text-gray-900 font-medium title-font mb-4">Great Pyramid of Giza</h2>
                <p className="leading-relaxed text-base">Fingerstache flexitarian street art 8-bit waistcoat. Distillery
                  hexagon disrupt edison bulbche.</p>
            </div>
          </div>
          <div className="xl:w-1/4 md:w-1/2 p-4">
            <div className="bg-gray-100 p-6 rounded-lg">
              <img className="h-40 rounded w-full object-cover object-center mb-6" src="https://dummyimage.com/723x403"
                   alt="content"/>
                <h3 className="tracking-widest text-indigo-500 text-xs font-medium title-font">SUBTITLE</h3>
                <h2 className="text-lg text-gray-900 font-medium title-font mb-4">San Francisco</h2>
                <p className="leading-relaxed text-base">Fingerstache flexitarian street art 8-bit waistcoat. Distillery
                  hexagon disrupt edison bulbche.</p>
            </div>
          </div>
        </div>
      </div>
    </section>
  )
}

export default Posts

'''
'''--- src/components/layout/index.js ---
/*import Header from '../header';*/
import Footer from '../footer';

function Layout({children}) {
  return (
    <div className="main">
 

      <div className="min-h-60vh">
        {children}
      </div>
      <Footer/>
    </div>
  )
}

export default Layout

'''
'''--- src/idx.ts ---
import type { CeramicApi } from '@ceramicnetwork/common'
import { IDX } from '@ceramicstudio/idx'

declare global {
  interface Window {
    idx?: IDX
  }
}

export function createIDX(ceramic: CeramicApi): IDX {
  const idx = new IDX({ ceramic })
  window.idx = idx
  return idx
}

'''
'''--- src/skydb.ts ---
import { createDefinition, publishSchema } from '@ceramicstudio/idx-tools'
import type { JWE } from 'did-jwt'
import type { DID } from 'dids'
import { SkynetClient, genKeyPairFromSeed } from 'skynet-js'
import { fromString, toString } from 'uint8arrays'

import { createCeramic } from './ceramic'
import { createIDX } from './idx'
import { getProvider } from './wallet'

window.skynet = new SkynetClient('https://siasky.net')

declare global {
  interface Window {
    did?: DID
    skynet: SkynetClient
  }
}

const ceramicPromise = createCeramic()

const SkyDBSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  title: 'SkyDB',
  type: 'object',
}

const authenticate = async (): Promise<void> => {
  console.log('Authenticating...')

  const [ceramic, provider] = await Promise.all([ceramicPromise, getProvider()])
  await ceramic.setDIDProvider(provider)
  const idx = createIDX(ceramic)

  window.did = ceramic.did
  console.log('Authenticated with DID:', idx.id)

  console.log('Creating IDX setup...')
  // @ts-ignore
  const schema = await publishSchema(ceramic, { content: SkyDBSchema })
  const definition = await createDefinition(ceramic, {
    name: 'SkyDB',
    description: 'SkyDB seed',
    schema: schema.commitId.toUrl(),
  })
  const seedKey = definition.id.toString()
  console.log('IDX setup created with definition ID:', seedKey)

  const createKeyPair = async (seed: string): Promise<ReturnType<typeof genKeyPairFromSeed>> => {
    const jwe = await ceramic.did!.createJWE(fromString(seed), [idx.id])
    await idx.set(seedKey, jwe)
    return genKeyPairFromSeed(seed)
  }
  // @ts-ignore
  window.createKeyPair = createKeyPair

  const loadKeyPair = async (): Promise<ReturnType<typeof genKeyPairFromSeed> | null> => {
    const jwe = await idx.get<JWE>(seedKey)
    if (jwe == null) {
      return null
    }
    const decrypted = await ceramic.did!.decryptJWE(jwe)
    return genKeyPairFromSeed(toString(decrypted))
  }
  // @ts-ignore
  window.loadKeyPair = loadKeyPair

  console.log('Next steps:')
  console.log(
    'Run `kp = await createKeyPair("my seed phrase")` to save your seed with IDX and create the SkyDB key pair'
  )
  console.log(
    'You can then run `kp = await loadKeyPair()` to retrieve the saved seed and create the SkyDB key pair'
  )
  console.log(
    'Run `await skynet.db.setJSON(kp.privateKey, "hello", {hello: "SkyDB with IDX"})` to save data in SkyDB'
  )
  console.log(
    'You can then run `await skynet.db.getJSON(kp.publicKey, "hello")` to load the saved data'
  )
}

document.getElementById('bauth')?.addEventListener('click', () => {
  authenticate().catch((err) => {
    console.error('Failed to authenticate:', err)
  })
})

'''
'''--- src/wallet.ts ---
import WalletConnectProvider from '@walletconnect/web3-provider'
import { ThreeIdConnect, EthereumAuthProvider } from '@3id/connect'
import Authereum from 'authereum'
import type { DIDProvider } from 'dids'
import Fortmatic from 'fortmatic'
import Web3Modal from 'web3modal'

// @ts-ignore
export const threeID = new ThreeIdConnect()

export const web3Modal = new Web3Modal({
  network: 'mainnet',
  cacheProvider: true,
  providerOptions: {
    walletconnect: {
      package: WalletConnectProvider,
      options: {
        infuraId: 'e87f83fb85bf4aa09bdf6605ebe144b7',
      },
    },
    fortmatic: {
      package: Fortmatic,
      options: {
        key: 'pk_live_EC842EEAC7F08995',
      },
    },
    authereum: {
      package: Authereum,
      options: {},
    },
  },
})

export async function getProvider(): Promise<DIDProvider> {
  const ethProvider = await web3Modal.connect()
  const addresses = await ethProvider.enable()
  await threeID.connect(new EthereumAuthProvider(ethProvider, addresses[0]))
  return threeID.getDidProvider()
}

'''
'''--- styles/Home.module.css ---
.container {
  min-height: 100vh;
  padding: 0 0.5rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: 100vh;
}

.main {
  padding: 5rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  width: 100%;
  height: 100px;
  border-top: 1px solid #eaeaea;
  display: flex;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
  margin-top: 3rem;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  width: 45%;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.5rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

'''
'''--- styles/globals.css ---
@tailwind base;
@tailwind components;
@tailwind utilities;
'''
'''--- tailwind.config.js ---
module.exports = {
  purge: [],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
};

'''