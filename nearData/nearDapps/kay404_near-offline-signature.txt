*GitHub Repository "kay404/near-offline-signature"*

'''--- 1_get_nonce_and_blockHash.js ---
const { providers } = require("near-api-js");
const sender = "SENDER_ID";
const networkId = "testnet";
const publicKey = "ed25519:Hr61mCNpgBxuCNJNAH82A6fKhsXsSsUB8zp1m2VYTars";
const provider = new providers.JsonRpcProvider({
  url: `https://rpc.${networkId}.near.org`,
});

(async () => {
  const accessKey = await provider.query(
    `access_key/${sender}/${publicKey}`,
    ""
  );
  const nonce = ++accessKey.nonce;
  const blockHash = accessKey.block_hash;
  console.log("nonce =", nonce, ", blockHash =", blockHash);
})();

'''
'''--- 2_offline_sign_transaction.js ---
/*
 * @Description: 
 * @Author: kay
 * @Date: 2022-03-22 14:46:35
 * @LastEditTime: 2022-04-02 17:34:26
 * @LastEditors: kay
 */
const { utils, transactions } = require("near-api-js");
const sha256 = require("js-sha256");
const path = require("path");
const homedir = require("os").homedir();
// const CREDENTIALS_DIR = ".near-credentials";
const networkId = "testnet";
const sender = "shanks.testnet";
const contractId = "ft.shanks.testnet";

// get pirvate key from key file
const keyFilePath = path.resolve(
  homedir,
  `./.near-credentials/${networkId}/${sender}.json`
);
const keyFile = require(keyFilePath);
const keyPair = utils.key_pair.KeyPairEd25519.fromString(keyFile.private_key);

// get PrivateKey from mnemonic
// const { parseSeedPhrase } = require("near-seed-phrase");
// let mnemonic = "put lemon lunch resource space gloom lonely melody crew lazy among grace";
// let { secretKey, publicKey } = parseSeedPhrase(mnemonic);
// const keyPair = utils.key_pair.KeyPairEd25519.fromString(secretKey);

const nonce = 78589014000036;
const blockHash = utils.serialize.base_decode(
  "GB7pyWEqQY9jhFKLQBKju9cdSw43P5F6DZU1J6tYe3QC"
);

const actions = [
  transactions.functionCall(
    "mint",
    { account_id: "shanks.testnet", amount: "10000000000000000000" },
    "30000000000000",
    "0"
  ),
];
// create transaction

const transaction = transactions.createTransaction(
  sender,
  keyPair.getPublicKey(),
  contractId,
  nonce,
  actions,
  blockHash
);

const serializedTx = utils.serialize.serialize(
  transactions.SCHEMA,
  transaction
);

const serializedTxHash = new Uint8Array(sha256.sha256.array(serializedTx));
const signature = keyPair.sign(serializedTxHash);
const signedTransaction = new transactions.SignedTransaction({
  transaction,
  signature: new transactions.Signature({
    keyType: transaction.publicKey.keyType,
    data: signature.signature,
  }),
});
const signedSerializedTx = signedTransaction.encode();
console.log(Buffer.from(signedSerializedTx).toString("base64"));

'''
'''--- 3_send_transaction.js ---
const nearAPI = require("near-api-js");
const networkId = "testnet";

// sets up a NEAR API/RPC provider to interact with the blockchain
const provider = new nearAPI.providers.JsonRpcProvider({
  url: `https://rpc.${networkId}.near.org`,
});

const signedTx =
  "DgAAAHNoYW5rcy50ZXN0bmV0APpOHmxD1aOeKBMfmimcW1Bvj+rpitANaFDvllRHBO2wpEFD7nlHAAARAAAAZnQuc2hhbmtzLnRlc3RuZXThdtTaiObV6W4KLt2sW8Gb8FIZI+vMIxOlfSxa+tJK4QEAAAACBAAAAG1pbnQ/AAAAeyJhY2NvdW50X2lkIjoic2hhbmtzLnRlc3RuZXQiLCJhbW91bnQiOiIxMDAwMDAwMDAwMDAwMDAwMDAwMCJ9AOBX60gbAAAAAAAAAAAAAAAAAAAAAAAAAOFDOwrhQd/irp5MXpwgiQPypd3aWDrYPE4yJ05LwDzyltQ4Prtyfm0yFhPZrngPt3/g6GmM8bI/VFsIgPUtPw4=";

(async () => {
  console.log("Processing transaction...");
  // send the transaction!
  try {
    // sends transaction to NEAR blockchain via JSON RPC call and records the result
    const result = await provider.sendJsonRpc("broadcast_tx_commit", [
      signedTx,
    ]);
    // console results :)
    console.log("Transaction Results: ", result.transaction);
    console.log(
      "--------------------------------------------------------------------------------------------"
    );
    console.log("OPEN LINK BELOW to see transaction in NEAR Explorer!");
    console.log(
      `$https://explorer.${networkId}.near.org/transactions/${result.transaction.hash}`
    );
    console.log(
      "--------------------------------------------------------------------------------------------"
    );
  } catch (error) {
    console.log(error);
  }
})();
'''
'''--- README.md ---
# NEAR Offline transaction

## 1. Get sender nonce and recent block hash (online)

```sh
node 1_get_nonce_and_blockHash.js
```

## 2. sign transaction (offline)

```sh
node 2_offline_sign_transaction.js
```

## 3. send transaction to chain (online)

```sh
node 3_send_transaction.js
```

'''
'''--- package.json ---
{
  "name": "near-offline-signature",
  "version": "1.0.0",
  "main": "index.js",
  "author": "<kay20475@hotmail.com>",
  "license": "MIT",
  "dependencies": {
    "js-sha256": "^0.9.0",
    "near-api-js": "^0.44.2",
    "near-seed-phrase": "^0.2.0"
  }
}

'''