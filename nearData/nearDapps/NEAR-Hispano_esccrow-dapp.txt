*GitHub Repository "NEAR-Hispano/esccrow-dapp"*

'''--- .env ---
REACT_APP_NETWORK_ID=testnet
REACT_APP_NODE_URL=https://rpc.testnet.near.org
REACT_APP_WALLET_URL=https://wallet.testnet.near.org
REACT_APP_HELPER_URL=https://helper.testnet.near.org
REACT_APP_EXPLORE_URL=https://explorer.testnet.near.org
REACT_APP_ESCCROW_CONTRACT_ID=nft-v00.escrow-ftl.testnet
REACT_APP_URL=http://localhost:3000
'''
'''--- README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- package.json ---
{
  "name": "Sccrow",
  "homepage": ".",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.16.2",
    "@testing-library/react": "^12.1.3",
    "@testing-library/user-event": "^13.5.0",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-qr-code": "^2.0.3",
    "react-router-dom": "^6.2.2",
    "react-scripts": "5.0.0",
    "styled-components": "^5.3.3",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "build:test": "sh -ac '. ./.env.test; react-scripts build'",
    "build:prod": "sh -ac '. ./.env.prod; react-scripts build'",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="%PUBLIC_URL%/logo.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <meta name="theme-color" content="#000000" />
  <meta name="description" content="Esccrow" />
  <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo.svg" />
  <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
  <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
  <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
  <title>Esccrow</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
</body>

</html>
'''
'''--- public/logo.svg ---
<svg width="50" height="48" viewBox="0 0 50 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M31.2921 24.4664L17.1394 0.125336H31.9165C31.9165 0.125336 38.5741 0.851305 41.3466 7.2215L31.2921 24.4664Z" fill="#EC00FF"/>
<path d="M24.7807 35.2989L41.2401 7.01086L48.4949 19.5084C48.4949 19.5084 50.9949 23.6537 48.4949 28.7751L39.4116 44.1988C39.4116 44.1988 36.9735 48.1012 32.1568 47.9179L24.7807 35.2989Z" fill="url(#paint0_linear_0_1)"/>
<path d="M18.3139 23.5843L32.4666 47.9254H17.6895C17.6895 47.9254 11.0319 47.1994 8.25934 40.8292L18.3139 23.5843Z" fill="#0086FF"/>
<path d="M24.8253 12.7493L8.36585 41.0373L1.11112 28.5397C1.11112 28.5397 -1.38889 24.3945 1.11112 19.2731L10.1944 3.84933C10.1944 3.84933 12.6325 -0.0530629 17.4491 0.130288L24.8253 12.7493Z" fill="url(#paint1_linear_0_1)"/>
<defs>
<linearGradient id="paint0_linear_0_1" x1="37.1934" y1="7.01089" x2="37.1934" y2="47.9241" gradientUnits="userSpaceOnUse">
<stop stop-color="#EC00FF"/>
<stop offset="1" stop-color="#0086FF"/>
</linearGradient>
<linearGradient id="paint1_linear_0_1" x1="12.4126" y1="0.124019" x2="12.4126" y2="41.0373" gradientUnits="userSpaceOnUse">
<stop stop-color="#EC00FF"/>
<stop offset="1" stop-color="#0086FF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- public/manifest.json ---
{
  "short_name": "Esccrow",
  "name": "Esccrow",
  "icons": [
    {
      "src": "logo.svg",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo.svg",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}
'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- src/assets/css/colors.css ---
:root {
  --text-secondary-perpetuo: rgba(131, 131, 131, 1);
  --dark-perpetuo: rgba(26, 35, 126, 1);
  --info: rgb(181, 220, 255);
  --info-co: rgb(26, 35, 126);
  --info-sha: rgba(0, 134, 255, 0.29);
  --info-up: rgba(181, 200, 255, 1);
  --primary: rgba(0, 134, 255, 1);
  --primary-co: rgba(255, 255, 255, 1);
  --primary-sha: rgba(0, 0, 0, 0.3);
  --primary-up: rgba(0, 114, 255, 1);
  --secondary: rgba(52, 170, 223, 0.08);
  --secondary-co: var(--dark-perpetuo);
  --secondary-up: rgba(52, 190, 223, 0.08);
  --accent: rgba(236, 0, 255, 1);
  --accent-co: rgba(255, 255, 255, 1);
  --accent-sha: rgba(0, 0, 0, 0.3);
  --accent-up: rgba(216, 0, 255, 1);
  --white: rgba(255, 255, 255, 1);
  --sky-blue: rgba(232, 244, 255, 1);
  --black: rgba(0, 0, 0, 0.7);
  --dark: var(--dark-perpetuo);
  --text-secondary: var(--text-secondary-perpetuo);
  --bg-white: var(--white);
  --purple: rgba(174, 195, 255, 1);
  --purple-up: rgba(79, 89, 255, 1);
  --purple-down: rgba(52, 104, 255, 0.1);
  --placeholder: rgba(131, 131, 131, 1);
}

/* @media (prefers-color-scheme: dark) {
  :root {
    --dark: rgba(255, 255, 255, 1);
    --info: rgba(18, 64, 163, 1);
    --info-co: var(--white);
    --info-sha: transparent;
    --info-up: rgba(18, 64, 143, 1);
    --text-secondary: var(--white);
    --bg-white: var(--dark-perpetuo);
    --sky-blue: rgba(6, 30, 64, 1);
    --black: var(--white);
    --purple: rgba(36, 63, 178, 1);
  }
} */

:root .theme-dark {
  --dark: rgba(255, 255, 255, 1) !important;
  --info: rgba(18, 64, 163, 1) !important;
  --info-co: var(--white) !important;
  --info-sha: transparent !important;
  --info-up: rgba(18, 64, 143, 1) !important;
  --text-secondary: var(--white) !important;
  --bg-white: var(--dark-perpetuo) !important;
  --sky-blue: rgba(6, 30, 64, 1) !important;
  --black: var(--white) !important;
  --purple: rgba(36, 63, 178, 1) !important;
}

:root .theme-light {
  --dark: var(--dark-perpetuo) !important;
  --info: rgb(181, 220, 255) !important;
  --info-co: rgb(26, 35, 126) !important;
  --info-sha: rgba(0, 134, 255, 0.29) !important;
  --info-up: rgba(181, 200, 255, 1) !important;
  --sky-blue: rgba(232, 244, 255, 1) !important;
  --text-secondary: var(--text-secondary-perpetuo) !important;
}

.page-container.theme-light {
  background: var(--white) !important;
}

.page-container.theme-dark {
  background: linear-gradient(
    180deg,
    #1a237e 7.2%,
    #000000 80.73%,
    #000000 98.73%
  );
}
.page-container.theme-dark .select svg.icon ellipse {
  fill: var(--white);
  fill-opacity: 1;
}
.page-container.theme-dark .select svg.chevron circle {
  fill: var(--dark-perpetuo);
}
.page-container.theme-dark .select svg.chevron path,
.page-container.theme-dark .powered-block svg path {
  fill: var(--white);
}

.page-container.theme-dark .powered-block span {
  opacity: 0.7;
}

'''
'''--- src/assets/css/fonts.css ---
/* Ultra Light */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-Ultralight.otf');
    font-weight: 100;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-UltralightItalic.otf');
    font-weight: 100;
    font-style: italic;
}

/* Thin */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-Thin.otf');
    font-weight: 200;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-ThinItalic.otf');
    font-weight: 200;
    font-style: italic;
}

/* Light */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-Light.otf');
    font-weight: 300;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-LightItalic.otf');
    font-weight: 300;
    font-style: italic;
}

/* Regular */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-Regular.otf');
    font-weight: 400;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-RegularItalic.otf');
    font-weight: 400;
    font-style: italic;
}

/* Medium */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-Medium.otf');
    font-weight: 500;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-MediumItalic.otf');
    font-weight: 500;
    font-style: italic;
}

/* Semi bold */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-SemiBold.otf');
    font-weight: 600;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-SemiBoldItalic.otf');
    font-weight: 600;
    font-style: italic;
}

/* Bold */

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-Bold.otf');
    font-weight: 700;
}

@font-face {
    font-family: 'SuiseIntl';
    src: url('../fonts/suisse/SuisseIntl-BoldItalic.otf');
    font-weight: 700;
    font-style: italic;
}

@font-face {
    font-family: 'LTWave';
    src: url('../fonts/LTWave/LTWave-light.ttf');
}

'''
'''--- src/assets/icons/20px/chevron-down.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="9.61532" cy="8.84615" r="8.84615" fill="white"/>
<path d="M13.825 6.91251L10 10.7292L6.175 6.91251L5 8.08751L10 13.0875L15 8.08751L13.825 6.91251Z" fill="#1A237E"/>
</svg>

'''
'''--- src/assets/icons/20px/near.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<ellipse cx="10" cy="9.95" rx="9" ry="9.45" fill="#FFFFFF"/>
<path d="M14.0229 4.05617L11.3597 8.01026C11.3218 8.06721 11.3057 8.13596 11.3146 8.20381C11.3234 8.27165 11.3565 8.33401 11.4078 8.37933C11.459 8.42465 11.525 8.44988 11.5934 8.45035C11.6618 8.45081 11.7281 8.42649 11.78 8.38187L14.4016 6.10798C14.4169 6.09423 14.436 6.08526 14.4563 6.08215C14.4767 6.07904 14.4976 6.08193 14.5163 6.09047C14.5351 6.09901 14.551 6.11282 14.562 6.13023C14.5731 6.14764 14.5788 6.16788 14.5785 6.18849V13.3075C14.5785 13.3292 14.5718 13.3505 14.5593 13.3684C14.5468 13.3862 14.5291 13.3998 14.5086 13.4072C14.4881 13.4146 14.4658 13.4156 14.4448 13.4099C14.4237 13.4043 14.4049 13.3923 14.391 13.3756L6.46684 3.88983C6.33939 3.73932 6.18068 3.61838 6.00176 3.53542C5.82283 3.45245 5.62799 3.40944 5.43076 3.40939H5.15383C4.79386 3.40939 4.44864 3.55239 4.1941 3.80692C3.93957 4.06146 3.79657 4.40668 3.79657 4.76665V14.793C3.79657 15.153 3.93957 15.4982 4.1941 15.7527C4.44864 16.0073 4.79386 16.1503 5.15383 16.1503V16.1503C5.38592 16.1503 5.61415 16.0909 5.81675 15.9777C6.01935 15.8644 6.18956 15.7012 6.31112 15.5035L8.97432 11.5494C9.01225 11.4924 9.02827 11.4237 9.01943 11.3558C9.01059 11.288 8.97748 11.2256 8.92622 11.1803C8.87496 11.135 8.80903 11.1098 8.74061 11.1093C8.67219 11.1088 8.60592 11.1332 8.55404 11.1778L5.93243 13.4517C5.91707 13.4654 5.89804 13.4744 5.87766 13.4775C5.85728 13.4806 5.83644 13.4777 5.81767 13.4692C5.79891 13.4606 5.78303 13.4468 5.77199 13.4294C5.76095 13.412 5.75521 13.3918 5.75548 13.3712V6.25043C5.75549 6.22864 5.7622 6.20737 5.77471 6.18952C5.78722 6.17168 5.80492 6.15811 5.82541 6.15067C5.84589 6.14323 5.86817 6.14228 5.88922 6.14794C5.91026 6.15359 5.92906 6.16559 5.94305 6.1823L13.8663 15.6698C13.9937 15.8203 14.1524 15.9413 14.3314 16.0242C14.5103 16.1072 14.7051 16.1502 14.9024 16.1503H15.1793C15.3576 16.1504 15.5342 16.1154 15.699 16.0472C15.8637 15.979 16.0135 15.8791 16.1396 15.753C16.2657 15.627 16.3658 15.4773 16.434 15.3126C16.5023 15.1479 16.5374 14.9713 16.5374 14.793V4.76665C16.5374 4.40668 16.3944 4.06146 16.1399 3.80692C15.8854 3.55239 15.5401 3.40939 15.1802 3.40939C14.9481 3.40933 14.7199 3.46875 14.5173 3.58198C14.3147 3.6952 14.1444 3.85846 14.0229 4.05617V4.05617Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/20px/wallet.svg ---
<svg width="20" height="20" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M16.2214 19C11.7219 19 7.22211 19 2.72255 19C2.69004 18.9891 2.65832 18.9738 2.62501 18.9681C2.01977 18.8618 1.5537 18.5452 1.25752 18.0099C1.13877 17.7955 1.08406 17.5458 1 17.3124C1 13.9601 1 10.608 1 7.25573C1.0109 7.22281 1.02498 7.19067 1.03231 7.15716C1.20399 6.35429 1.6885 5.84496 2.47494 5.62124C2.57922 5.59169 2.68806 5.5788 2.8068 5.55579C2.7279 5.33841 2.65297 5.13611 2.581 4.93262C2.3334 4.2315 2.62997 3.5643 3.32561 3.30845C5.36119 2.55973 7.39915 1.81716 9.43889 1.08014C10.1052 0.83936 10.7703 1.15709 11.0237 1.81934C11.1553 2.16345 11.283 2.50935 11.3979 2.85921C11.4416 2.9917 11.4987 3.03831 11.6432 3.03752C12.7149 3.03058 13.7868 3.02939 14.8587 3.03593C15.5411 3.0401 16.0696 3.57243 16.0797 4.25352C16.0852 4.63432 16.0809 5.01513 16.0809 5.39593C16.0809 5.45147 16.0809 5.5068 16.0809 5.55896C17.2485 5.69165 17.9436 6.46834 17.944 7.61412C17.9442 8.18831 17.944 8.76249 17.944 9.33647C17.944 9.4283 17.944 9.52013 17.944 9.60799C17.9852 9.62247 18.0066 9.63199 18.0288 9.63774C18.6337 9.79403 18.9965 10.2526 18.9979 10.8726C19 11.7982 19.0016 12.7239 18.9971 13.6495C18.9943 14.2191 18.6291 14.6872 18.082 14.8411C18.0386 14.8534 17.9949 14.8649 17.944 14.879C17.944 14.9514 17.944 15.0152 17.944 15.0791C17.9436 15.7528 17.9509 16.4266 17.941 17.1003C17.9287 17.9373 17.3719 18.6668 16.5753 18.9088C16.4587 18.9443 16.3394 18.9699 16.2214 19ZM16.8893 14.8827C16.2105 14.8827 15.5603 14.8901 14.9103 14.8812C13.5009 14.8617 12.3392 13.7001 12.32 12.3004C12.2998 10.8115 13.4637 9.62148 14.956 9.60958C15.5359 9.60502 16.116 9.60879 16.696 9.60859C16.7577 9.60859 16.8193 9.60859 16.8893 9.60859C16.8893 8.89636 16.8915 8.21111 16.8885 7.52606C16.8862 6.99393 16.5135 6.62105 15.9782 6.62086C11.643 6.61947 7.30756 6.61947 2.97234 6.62066C2.42598 6.62086 2.05546 6.99214 2.05526 7.53697C2.05407 10.6955 2.05407 13.8542 2.05526 17.0127C2.05546 17.5666 2.42796 17.9415 2.98066 17.9417C7.31014 17.9429 11.6396 17.9429 15.9691 17.9415C16.5119 17.9413 16.8866 17.5656 16.8887 17.0244C16.8913 16.3621 16.8893 15.7001 16.8893 15.0378C16.8893 14.9924 16.8893 14.9472 16.8893 14.8827ZM10.3344 3.01649C10.2404 2.75251 10.151 2.49388 10.0564 2.23703C9.98882 2.05337 9.923 2.02442 9.73289 2.09364C7.73279 2.82113 5.7329 3.54903 3.7334 4.27791C3.54665 4.34594 3.51474 4.41417 3.58075 4.59842C3.6775 4.86816 3.78772 5.13353 3.87336 5.40644C3.91519 5.53973 3.98259 5.56829 4.11205 5.56789C5.63497 5.56353 7.15788 5.56511 8.6808 5.56511C8.74245 5.56511 8.80391 5.56511 8.85843 5.56511C8.86675 5.53239 8.86933 5.52683 8.86933 5.52128C8.87131 5.09367 8.86834 4.66606 8.87568 4.23844C8.88539 3.67001 9.27851 3.18706 9.8332 3.06767C9.9908 3.03395 10.1551 3.03375 10.3344 3.01649ZM16.2916 10.6637C15.87 10.6637 15.4483 10.6625 15.0266 10.6645C14.9216 10.6651 14.8147 10.6659 14.7118 10.6838C13.8784 10.8293 13.3096 11.5537 13.3786 12.3768C13.4472 13.1973 14.129 13.8216 14.9751 13.8268C15.8771 13.8324 16.7789 13.8286 17.6809 13.8278C17.8893 13.8276 17.9434 13.7748 17.9436 13.5709C17.9446 12.6864 17.9446 11.8016 17.9436 10.917C17.9434 10.7103 17.8944 10.6643 17.6799 10.6639C17.217 10.6629 16.7543 10.6637 16.2916 10.6637ZM9.92954 5.55301C11.639 5.55301 13.3267 5.55301 15.0262 5.55301C15.0262 5.15555 15.0264 4.76998 15.0262 4.38442C15.026 4.12341 14.9919 4.0883 14.7352 4.0883C13.2311 4.0881 11.727 4.0881 10.2229 4.0883C10.1879 4.0883 10.1528 4.08791 10.1177 4.08929C9.99814 4.09405 9.93133 4.15812 9.93054 4.27633C9.92796 4.69719 9.92954 5.11806 9.92954 5.55301Z" fill="white"/>
<path d="M14.9497 12.7729C14.6664 12.7691 14.4283 12.5267 14.4291 12.2429C14.4299 11.9492 14.6747 11.7126 14.9705 11.7197C15.2569 11.7266 15.4883 11.9684 15.4824 12.2548C15.4764 12.5388 15.2318 12.7766 14.9497 12.7729Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/24px/bulb.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.8981 23.5C13.2193 23.3684 13.5714 23.284 13.8549 23.096C14.4225 22.7191 14.6711 22.1424 14.6936 21.4673C14.6976 21.3475 14.6948 21.2276 14.6948 21.1084C14.6959 20.6684 14.6486 20.2419 15.0216 19.8689C15.3225 19.5679 15.3704 19.1224 15.3704 18.692C15.3704 17.7226 15.6944 16.8967 16.3767 16.1827C19.4678 12.9517 18.1571 7.64404 13.9095 6.24202C11.4006 5.41387 8.6898 6.27297 7.12991 8.40019C5.60434 10.4807 5.53234 13.1537 6.93191 15.3231C7.1496 15.6601 7.42074 15.9667 7.69357 16.2626C8.32978 16.9518 8.62848 17.7642 8.62792 18.692C8.62792 19.1308 8.72749 19.5353 8.97669 19.8993C8.98906 19.9179 8.99469 19.9443 9.01156 19.9561C9.34402 20.1919 9.30014 20.5396 9.30801 20.8833C9.31701 21.2698 9.30464 21.6715 9.40477 22.0383C9.62528 22.8468 10.1929 23.3155 11.0187 23.4674C11.0468 23.4724 11.0732 23.4887 11.1002 23.5C11.6999 23.5 12.299 23.5 12.8981 23.5ZM12.0087 19.4565C11.5896 19.4565 11.1705 19.4577 10.7509 19.456C10.2412 19.4537 10.0134 19.1927 9.96954 18.6801C9.92454 18.1547 9.85423 17.6241 9.7226 17.115C9.51502 16.3121 8.98456 15.6989 8.44847 15.084C7.37968 13.8592 7.02247 12.4155 7.43649 10.8543C7.94895 8.92285 9.23376 7.73743 11.2099 7.36386C13.6991 6.89352 16.1236 8.54084 16.6073 11.0112C16.8684 12.3446 16.6372 13.588 15.8468 14.7019C15.5881 15.0665 15.2578 15.3788 14.9816 15.7321C14.2999 16.6036 14.0254 17.6118 14.0197 18.7055C14.0175 19.1887 13.7492 19.4526 13.2654 19.4554C12.8469 19.4582 12.4278 19.4565 12.0087 19.4565ZM10.6536 20.8186C11.5626 20.8186 12.4469 20.8186 13.3441 20.8186C13.3441 21.0628 13.3554 21.294 13.3413 21.523C13.3199 21.8718 13.0499 22.1379 12.6972 22.1469C12.2343 22.1587 11.7708 22.1587 11.3078 22.1475C10.9444 22.1385 10.6738 21.8673 10.6558 21.5072C10.6446 21.2845 10.6536 21.0605 10.6536 20.8186Z" fill="#1A237E"/>
<path d="M23.5 11.8198C23.3211 11.4316 23.0134 11.3089 22.596 11.3196C21.7669 11.3404 20.9366 11.3202 20.1068 11.3286C19.6073 11.3337 19.2844 11.7956 19.4611 12.24C19.5674 12.5078 19.775 12.6659 20.0624 12.6687C20.9894 12.6777 21.9159 12.6749 22.843 12.671C23.1771 12.6693 23.3582 12.4471 23.5 12.1798C23.5 12.0589 23.5 11.939 23.5 11.8198Z" fill="#1A237E"/>
<path d="M12.673 2.53667C12.673 2.11752 12.6742 1.69838 12.673 1.27924C12.6714 0.806086 12.4008 0.496652 11.9941 0.500027C11.5941 0.503403 11.3269 0.808336 11.3264 1.26799C11.3247 2.11415 11.3252 2.95975 11.3264 3.80591C11.3269 4.27906 11.5986 4.5885 12.0053 4.58512C12.4115 4.58174 12.6725 4.274 12.6736 3.79466C12.6742 3.37551 12.673 2.95637 12.673 2.53667Z" fill="#1A237E"/>
<path d="M2.55889 12.673C2.97797 12.673 3.39705 12.6742 3.8167 12.6725C4.27684 12.6708 4.58117 12.4047 4.58511 12.0047C4.58904 11.6041 4.28247 11.3267 3.82851 11.3256C2.96785 11.3234 2.10662 11.3234 1.24596 11.3256C0.806062 11.3267 0.503986 11.6007 0.500048 11.9929C0.49611 12.3934 0.802124 12.6697 1.25664 12.6719C1.69091 12.6747 2.12518 12.673 2.55889 12.673Z" fill="#1A237E"/>
<path d="M17.8016 6.96227C17.895 6.91107 18.0823 6.85368 18.2083 6.7316C18.8384 6.12342 19.4554 5.50174 20.0708 4.87837C20.3696 4.57568 20.3718 4.16779 20.0939 3.89662C19.8211 3.62994 19.4234 3.62994 19.1281 3.91968C18.498 4.53911 17.8759 5.16586 17.2548 5.79373C17.0394 6.01146 16.9815 6.27251 17.108 6.55663C17.2228 6.81374 17.4365 6.93582 17.8016 6.96227Z" fill="#1A237E"/>
<path d="M6.20286 6.96216C6.56569 6.93403 6.77776 6.81082 6.89195 6.55427C7.01008 6.28928 6.96789 6.03611 6.77101 5.82569C6.52069 5.55789 6.2563 5.30303 5.99754 5.04367C5.62234 4.66728 5.24826 4.28977 4.86912 3.91733C4.66605 3.7176 4.42135 3.64446 4.1474 3.74517C3.89483 3.838 3.71651 4.02872 3.72045 4.29484C3.72326 4.4805 3.78458 4.71229 3.90664 4.84169C4.52373 5.49432 5.16332 6.125 5.8091 6.74949C5.92948 6.86595 6.11342 6.91602 6.20286 6.96216Z" fill="#1A237E"/>
</svg>

'''
'''--- src/assets/icons/24px/moon.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M12.9756 23.184H11.5973L11.5358 23.1715C11.5142 23.1671 11.4924 23.1624 11.4709 23.1577C11.4396 23.1508 11.4098 23.1446 11.3891 23.1415C11.2347 23.1184 11.0807 23.0988 10.9178 23.0782C10.5689 23.034 10.2082 22.988 9.84623 22.9055C7.124 22.2846 4.75156 20.6888 3.16578 18.4122C1.57844 16.1335 0.908442 13.3577 1.27911 10.596C1.66155 7.7464 2.95711 5.38173 5.13022 3.56773C7.60689 1.49996 10.5016 0.649067 13.7331 1.03862C14.8958 1.17862 16.04 1.51996 17.1342 2.05307C17.7693 2.36262 18.044 3.04218 17.7873 3.66929C17.5658 4.2104 17.0691 4.36529 16.8571 4.43151C14.1127 5.28796 12.5653 7.94262 13.178 10.744C13.6933 13.1 15.8222 14.84 18.2405 14.8808C19.2249 14.8971 20.1176 14.678 20.9709 14.21C21.6669 13.828 22.1853 14.1073 22.4322 14.3077C22.8631 14.6573 22.9913 15.2091 22.7753 15.7835L22.7538 15.8408C22.6449 16.1308 22.5322 16.4308 22.3889 16.7262C20.7565 20.0893 18.0809 22.1895 14.4365 22.9688C14.1007 23.0406 13.7669 23.082 13.4442 23.1222C13.2976 23.1404 13.1589 23.1575 13.0198 23.1775L12.9756 23.184ZM11.726 21.9248H12.8864C13.0222 21.906 13.1576 21.8891 13.2891 21.8728C13.5987 21.8344 13.8911 21.798 14.1733 21.7377C17.4647 21.034 19.7816 19.2148 21.2565 16.1766C21.3745 15.9337 21.472 15.6737 21.5753 15.3984L21.5971 15.3406C21.6036 15.3235 21.6082 15.3086 21.6118 15.2962C21.6018 15.3006 21.59 15.3066 21.5767 15.314C20.5409 15.8822 19.4113 16.1602 18.2193 16.14C15.2242 16.0893 12.5869 13.9331 11.9482 11.0131C11.5851 9.3524 11.8424 7.65284 12.6731 6.22707C13.5036 4.80151 14.8565 3.73707 16.4825 3.22973C16.5345 3.21351 16.57 3.20084 16.5945 3.19084C16.5909 3.18907 16.5871 3.18707 16.5831 3.18507C15.6153 2.71373 14.6058 2.41218 13.5827 2.28884C10.7093 1.94262 8.13711 2.69818 5.93733 4.53462C4.01378 6.1404 2.86644 8.23618 2.52733 10.7637C1.84533 15.8422 5.11222 20.5344 10.126 21.678C10.428 21.7468 10.7429 21.7868 11.0764 21.8293C11.2391 21.85 11.4071 21.8713 11.5751 21.8964C11.6313 21.9048 11.6813 21.9153 11.726 21.9248Z" fill="#1A237E"/>
</svg>

'''
'''--- src/assets/icons/24px/sun.svg ---
<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M11.7968 0C11.1862 0.197136 10.9563 0.627393 10.9837 1.25244C11.0095 1.85245 10.9821 2.45403 10.9978 3.05405C11.0103 3.51403 11.3496 3.89344 11.7859 3.97636C12.2417 4.06319 12.7046 3.8379 12.8821 3.41233C12.9486 3.25275 12.972 3.06578 12.9752 2.89055C12.9869 2.34451 12.9595 1.79769 12.9845 1.25244C13.0127 0.627393 12.782 0.197136 12.1714 0C12.0463 0 11.9219 0 11.7968 0Z" fill="white"/>
<path d="M23.97 11.8055C23.7729 11.1945 23.3429 10.9645 22.7182 10.9919C22.1185 11.0177 21.5173 10.9903 20.9176 11.006C20.4578 11.0185 20.0786 11.358 19.9957 11.7945C19.909 12.2506 20.1341 12.7137 20.5595 12.8913C20.719 12.9578 20.9058 12.9813 21.081 12.9844C21.6267 12.9961 22.1732 12.9688 22.7182 12.9938C23.3429 13.0219 23.7729 12.7912 23.97 12.1802C23.97 12.055 23.97 11.9299 23.97 11.8055Z" fill="white"/>
<path d="M11.9861 18.4894C15.5546 18.484 18.4835 15.552 18.478 11.9902C18.4725 8.41985 15.5421 5.4894 11.9822 5.49488C8.41365 5.50036 5.48472 8.43237 5.49019 11.9941C5.49645 15.5653 8.42616 18.4957 11.9861 18.4894ZM11.9923 7.49597C14.4678 7.50301 16.4897 9.53539 16.478 12.0066C16.467 14.4755 14.4529 16.486 11.9876 16.4891C9.51532 16.4923 7.4879 14.4638 7.49024 11.9902C7.49181 9.51505 9.52157 7.48971 11.9923 7.49597Z" fill="white"/>
<path d="M19.7478 3.22541C19.4647 3.22228 19.2294 3.33414 19.0339 3.52815C18.5679 3.98892 18.0988 4.44734 17.6453 4.92062C17.2442 5.33914 17.2481 5.94229 17.6312 6.33108C18.0151 6.72066 18.6234 6.73552 19.0402 6.33656C19.5359 5.86171 20.0214 5.37513 20.4929 4.87603C20.7814 4.57016 20.8283 4.19309 20.6547 3.80977C20.482 3.42724 20.1676 3.23714 19.7478 3.22541Z" fill="white"/>
<path d="M3.22207 4.22511C3.21895 4.5083 3.33153 4.74377 3.52466 4.93934C3.98518 5.40558 4.44335 5.87495 4.91638 6.32868C5.33468 6.72999 5.9375 6.7253 6.32609 6.34198C6.71546 5.95787 6.72953 5.34926 6.33078 4.9323C5.85619 4.43633 5.36987 3.95053 4.87103 3.47959C4.56532 3.19093 4.18846 3.14399 3.80535 3.31844C3.42301 3.49054 3.23302 3.80502 3.22207 4.22511Z" fill="white"/>
<path d="M19.6385 20.7658C20.1662 20.7463 20.4735 20.5601 20.6494 20.1885C20.8207 19.8271 20.8027 19.4516 20.5306 19.159C20.0216 18.6106 19.493 18.0779 18.9418 17.5718C18.5774 17.2369 17.9957 17.2956 17.6423 17.643C17.2834 17.9958 17.2224 18.5887 17.5641 18.9603C18.0708 19.5111 18.6064 20.0368 19.1537 20.5468C19.3015 20.6821 19.5384 20.7228 19.6385 20.7658Z" fill="white"/>
<path d="M3.2174 19.6407C3.23147 20.1688 3.41443 20.4793 3.78426 20.6577C4.15331 20.8361 4.5333 20.8149 4.83276 20.5349C5.37382 20.0295 5.90159 19.5069 6.40278 18.9617C6.74524 18.5893 6.68582 17.9979 6.32772 17.6443C5.96962 17.2899 5.38243 17.2383 5.00947 17.5833C4.46606 18.0863 3.94533 18.6159 3.44102 19.158C3.30419 19.3059 3.26118 19.5414 3.2174 19.6407Z" fill="white"/>
<path d="M2.00871 12.9843C2.35117 12.9843 2.69442 12.996 3.0361 12.982C3.58341 12.9593 3.98451 12.5353 3.98607 11.9978C3.98842 11.4588 3.58966 11.02 3.04548 11.0067C2.34492 10.9895 1.64357 10.9895 0.943796 11.0067C0.405084 11.02 -0.00383787 11.4698 7.15083e-05 12.0002C0.00398089 12.5306 0.414466 12.9601 0.957869 12.982C1.30737 12.996 1.65843 12.9843 2.00871 12.9843Z" fill="white"/>
<path d="M10.9916 21.9946C10.9916 22.3295 10.9823 22.6651 10.994 22.9999C11.0135 23.5608 11.4373 23.9785 11.976 23.9832C12.5226 23.9879 12.9636 23.5655 12.9753 22.9944C12.9886 22.3248 12.9886 21.6544 12.9761 20.9847C12.9651 20.4058 12.5382 19.9936 11.9831 19.9951C11.4287 19.9967 11.012 20.4097 10.994 20.9902C10.9838 21.325 10.9924 21.6598 10.9924 21.9954C10.9909 21.9946 10.9909 21.9946 10.9916 21.9946Z" fill="white"/>
</svg>

'''
'''--- src/assets/icons/32px/near-white.svg ---
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<ellipse cx="16" cy="16" rx="15.5" ry="16" fill="white" fill-opacity="0.83"/>
<path d="M20.9138 8.23356L17.5161 13.2781C17.4677 13.3507 17.4473 13.4384 17.4586 13.525C17.4699 13.6116 17.5121 13.6911 17.5775 13.7489C17.6429 13.8067 17.727 13.8389 17.8143 13.8395C17.9016 13.8401 17.9861 13.8091 18.0523 13.7522L21.3969 10.8512C21.4165 10.8337 21.4408 10.8222 21.4668 10.8182C21.4928 10.8143 21.5194 10.818 21.5433 10.8289C21.5672 10.8398 21.5875 10.8574 21.6016 10.8796C21.6157 10.9018 21.623 10.9276 21.6226 10.9539V20.0361C21.6226 20.0639 21.6141 20.091 21.5981 20.1138C21.5822 20.1366 21.5596 20.1539 21.5334 20.1634C21.5073 20.1729 21.4789 20.1741 21.452 20.1669C21.4252 20.1596 21.4012 20.1443 21.3833 20.123L11.274 8.02135C11.1114 7.82933 10.9089 7.67504 10.6806 7.56919C10.4524 7.46334 10.2038 7.40848 9.95217 7.40842H9.59886C9.13962 7.40842 8.6992 7.59085 8.37447 7.91558C8.04974 8.24031 7.86731 8.68073 7.86731 9.13997V21.9313C7.86731 22.3906 8.04974 22.831 8.37447 23.1557C8.6992 23.4804 9.13962 23.6629 9.59886 23.6629C9.89496 23.663 10.1861 23.5872 10.4446 23.4427C10.7031 23.2983 10.9202 23.09 11.0753 22.8377L14.4729 17.7932C14.5213 17.7206 14.5418 17.6328 14.5305 17.5463C14.5192 17.4597 14.477 17.3802 14.4116 17.3224C14.3462 17.2645 14.2621 17.2324 14.1748 17.2318C14.0875 17.2312 14.0029 17.2622 13.9368 17.3191L10.5922 20.2201C10.5726 20.2376 10.5483 20.2491 10.5223 20.253C10.4963 20.257 10.4697 20.2533 10.4458 20.2424C10.4218 20.2315 10.4016 20.2139 10.3875 20.1917C10.3734 20.1695 10.3661 20.1437 10.3664 20.1174V11.0329C10.3664 11.0051 10.375 10.978 10.391 10.9552C10.4069 10.9325 10.4295 10.9152 10.4556 10.9057C10.4818 10.8962 10.5102 10.895 10.5371 10.9022C10.5639 10.9094 10.5879 10.9247 10.6057 10.946L20.714 23.05C20.8766 23.242 21.0791 23.3963 21.3073 23.5021C21.5356 23.608 21.7842 23.6628 22.0358 23.6629H22.3891C22.6166 23.663 22.8419 23.6184 23.0521 23.5314C23.2623 23.4444 23.4533 23.3169 23.6142 23.1561C23.7751 22.9953 23.9028 22.8044 23.9899 22.5942C24.0769 22.3841 24.1218 22.1588 24.1218 21.9313V9.13997C24.1218 8.68073 23.9393 8.24031 23.6146 7.91558C23.2899 7.59085 22.8495 7.40842 22.3902 7.40842C22.0941 7.40834 21.8029 7.48414 21.5445 7.62859C21.286 7.77305 21.0689 7.98132 20.9138 8.23356Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/Layer 1.svg ---
<svg width="18" height="19" viewBox="0 0 18 19" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M14.4475 1.75712L10.685 7.34332C10.6314 7.42377 10.6088 7.5209 10.6213 7.61676C10.6338 7.71261 10.6805 7.80069 10.7529 7.86472C10.8254 7.92875 10.9185 7.9644 11.0152 7.96506C11.1118 7.96572 11.2055 7.93135 11.2787 7.86832L14.9825 4.65585C15.0042 4.63643 15.0311 4.62375 15.0599 4.61936C15.0887 4.61496 15.1181 4.61905 15.1446 4.63111C15.1711 4.64317 15.1936 4.66269 15.2092 4.68728C15.2248 4.71187 15.2329 4.74047 15.2325 4.7696V14.827C15.2325 14.8578 15.223 14.8878 15.2053 14.913C15.1877 14.9383 15.1627 14.9574 15.1337 14.9679C15.1048 14.9784 15.0733 14.9798 15.0436 14.9718C15.0138 14.9638 14.9873 14.9469 14.9675 14.9232L3.7725 1.52213C3.59243 1.3095 3.36822 1.13864 3.11544 1.02142C2.86266 0.90421 2.58738 0.843455 2.30875 0.843384H1.9175C1.40895 0.843384 0.921224 1.0454 0.561623 1.405C0.202022 1.7646 0 2.25232 0 2.76086V16.9257C0 17.4343 0.202022 17.922 0.561623 18.2816C0.921224 18.6412 1.40895 18.8432 1.9175 18.8432C2.24539 18.8433 2.56784 18.7594 2.85407 18.5994C3.1403 18.4394 3.38076 18.2088 3.5525 17.9295L7.315 12.3433C7.36859 12.2628 7.39123 12.1657 7.37874 12.0698C7.36625 11.974 7.31947 11.8859 7.24705 11.8219C7.17464 11.7578 7.08149 11.7222 6.98483 11.7215C6.88816 11.7209 6.79453 11.7552 6.72125 11.8183L3.0175 15.0307C2.99579 15.0502 2.9689 15.0628 2.94011 15.0672C2.91132 15.0716 2.88188 15.0675 2.85537 15.0555C2.82886 15.0434 2.80643 15.0239 2.79083 14.9993C2.77523 14.9747 2.76712 14.9461 2.7675 14.917V4.8571C2.76751 4.8263 2.777 4.79626 2.79467 4.77105C2.81235 4.74584 2.83735 4.72668 2.86629 4.71616C2.89523 4.70565 2.92671 4.7043 2.95644 4.7123C2.98618 4.72029 3.01273 4.73724 3.0325 4.76085L14.2262 18.1645C14.4063 18.3771 14.6305 18.548 14.8833 18.6652C15.1361 18.7824 15.4114 18.8431 15.69 18.8432H16.0812C16.3332 18.8434 16.5826 18.7939 16.8154 18.6976C17.0482 18.6013 17.2597 18.4601 17.4379 18.282C17.6161 18.104 17.7575 17.8925 17.8539 17.6598C17.9504 17.4271 18 17.1776 18 16.9257V2.76086C18 2.25232 17.798 1.7646 17.4384 1.405C17.0788 1.0454 16.5911 0.843384 16.0825 0.843384C15.7546 0.843298 15.4322 0.927241 15.1459 1.0872C14.8597 1.24717 14.6192 1.47781 14.4475 1.75712Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/close.svg ---
<svg width="30" height="30" viewBox="0 0 30 30" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M30 3.02143L26.9786 0L15 11.9786L3.02143 0L0 3.02143L11.9786 15L0 26.9786L3.02143 30L15 18.0214L26.9786 30L30 26.9786L18.0214 15L30 3.02143Z" fill="#1A237E"/>
</svg>

'''
'''--- src/assets/icons/copy.svg ---
<svg width="20" height="21" viewBox="0 0 20 21" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M13.7544 1.55191H4.19525C3.31899 1.55191 2.60205 2.30658 2.60205 3.22896V14.9683H4.19525V3.22896H13.7544V1.55191ZM16.1442 4.90601H7.38165C6.50539 4.90601 5.78845 5.66069 5.78845 6.58306V18.3224C5.78845 19.2448 6.50539 19.9995 7.38165 19.9995H16.1442C17.0205 19.9995 17.7374 19.2448 17.7374 18.3224V6.58306C17.7374 5.66069 17.0205 4.90601 16.1442 4.90601ZM16.1442 18.3224H7.38165V6.58306H16.1442V18.3224Z" fill="black"/>
</svg>

'''
'''--- src/assets/icons/near.svg ---
<svg width="26" height="27" viewBox="0 0 26 27" fill="none" xmlns="http://www.w3.org/2000/svg">
<ellipse cx="12.9303" cy="13.6218" rx="12.9032" ry="13.3195" fill="white" fill-opacity="0.83"/>
<path d="M17.0208 7.15647L14.1924 11.3559C14.1521 11.4164 14.1351 11.4894 14.1444 11.5614C14.1538 11.6335 14.189 11.6997 14.2434 11.7478C14.2979 11.796 14.3679 11.8228 14.4406 11.8233C14.5132 11.8238 14.5836 11.7979 14.6387 11.7505L17.423 9.33558C17.4393 9.32098 17.4595 9.31145 17.4811 9.30814C17.5028 9.30484 17.5249 9.30791 17.5448 9.31698C17.5648 9.32605 17.5816 9.34072 17.5934 9.35921C17.6051 9.37769 17.6112 9.39919 17.6109 9.42109V16.9817C17.6109 17.0048 17.6037 17.0274 17.5905 17.0464C17.5772 17.0653 17.5584 17.0797 17.5366 17.0876C17.5149 17.0955 17.4912 17.0966 17.4689 17.0905C17.4465 17.0845 17.4265 17.0718 17.4117 17.0541L8.99597 6.97982C8.8606 6.81997 8.69205 6.69153 8.50203 6.60341C8.312 6.5153 8.10507 6.46963 7.89561 6.46957H7.60149C7.21919 6.46957 6.85255 6.62144 6.58223 6.89177C6.3119 7.16209 6.16003 7.52873 6.16003 7.91103V18.5594C6.16003 18.9417 6.3119 19.3083 6.58223 19.5787C6.85255 19.849 7.21919 20.0009 7.60149 20.0009C7.84798 20.0009 8.09038 19.9378 8.30555 19.8176C8.52072 19.6973 8.70148 19.5239 8.83058 19.314L11.659 15.1146C11.6993 15.0541 11.7163 14.9811 11.7069 14.909C11.6975 14.837 11.6624 14.7707 11.6079 14.7226C11.5535 14.6745 11.4835 14.6477 11.4108 14.6472C11.3381 14.6467 11.2677 14.6725 11.2127 14.7199L8.4284 17.1349C8.41209 17.1495 8.39187 17.159 8.37023 17.1623C8.34859 17.1656 8.32645 17.1625 8.30652 17.1535C8.28659 17.1444 8.26974 17.1297 8.25801 17.1112C8.24628 17.0927 8.24018 17.0712 8.24047 17.0494V9.48686C8.24048 9.46372 8.24761 9.44113 8.2609 9.42218C8.27418 9.40323 8.29298 9.38882 8.31474 9.38092C8.33649 9.37302 8.36015 9.372 8.3825 9.37801C8.40486 9.38402 8.42482 9.39676 8.43968 9.41451L16.8545 19.4906C16.9898 19.6505 17.1584 19.7789 17.3484 19.867C17.5384 19.9551 17.7454 20.0008 17.9548 20.0009H18.2489C18.4383 20.001 18.6258 19.9638 18.8008 19.8914C18.9758 19.819 19.1348 19.7129 19.2688 19.579C19.4028 19.4451 19.509 19.2862 19.5815 19.1112C19.654 18.9363 19.6913 18.7488 19.6913 18.5594V7.91103C19.6913 7.52873 19.5395 7.16209 19.2691 6.89177C18.9988 6.62144 18.6322 6.46957 18.2499 6.46957C18.0034 6.46951 17.761 6.53261 17.5458 6.65286C17.3306 6.77312 17.1499 6.9465 17.0208 7.15647Z" fill="black"/>
</svg>

'''
'''--- src/assets/images/await.svg ---
<svg width="249" height="295" viewBox="0 0 249 295" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M124.48 265.553C193.175 265.553 248.863 209.865 248.863 141.17C248.863 72.4758 193.175 16.7878 124.48 16.7878C55.7857 16.7878 0.0976562 72.4758 0.0976562 141.17C0.0976562 209.865 55.7857 265.553 124.48 265.553Z" fill="#E6E6E6"/>
<path d="M231.541 141.17C231.541 175.051 215.516 206.872 188.35 227.094C187.435 227.78 186.519 228.391 185.603 229.078C148.899 254.641 100.138 254.641 63.4336 229.078C62.5179 228.467 61.6022 227.78 60.6865 227.094C13.2227 191.839 3.37896 124.764 38.6334 77.3766C44.8907 68.9827 52.2926 61.5044 60.6865 55.3235C61.6022 54.6367 62.5179 54.0262 63.4336 53.3394C100.138 27.7762 148.899 27.7762 185.603 53.3394C186.519 53.9499 187.435 54.6367 188.35 55.3235C215.516 75.3926 231.541 107.289 231.541 141.17Z" fill="white"/>
<path d="M124.48 238.921C178.467 238.921 222.231 195.157 222.231 141.17C222.231 87.184 178.467 43.4194 124.48 43.4194C70.4941 43.4194 26.7295 87.184 26.7295 141.17C26.7295 195.157 70.4941 238.921 124.48 238.921Z" fill="#3468FF"/>
<path opacity="0.2" d="M124.785 43.6483C123.335 43.6483 121.809 43.7246 120.359 43.7246C174.156 48.4558 213.913 95.9196 209.182 149.641C204.909 198.478 165.152 236.556 116.238 238.769C119.062 238.998 121.885 239.15 124.785 239.15C178.811 239.15 222.536 195.349 222.536 141.399C222.536 87.4493 178.735 43.6483 124.785 43.6483Z" fill="black"/>
<path d="M124.785 36.4754C123.03 36.4754 121.58 37.9253 121.58 39.6804V53.5685C121.58 55.3236 123.03 56.7735 124.785 56.7735C126.54 56.7735 127.99 55.3236 127.99 53.5685V39.6041C127.99 37.849 126.54 36.4754 124.785 36.4754Z" fill="white"/>
<path d="M188.351 55.2472C187.435 54.5604 186.52 53.95 185.604 53.2632C184.459 53.1869 183.391 53.7211 182.78 54.6368L174.997 66.083C174.005 67.5329 174.387 69.5169 175.836 70.5089C177.286 71.5009 179.27 71.1194 180.262 69.6695L188.046 58.2232C188.656 57.3839 188.732 56.2392 188.351 55.2472Z" fill="white"/>
<path d="M223.833 107.518C223.147 105.916 221.315 105.077 219.713 105.763L206.817 110.952C205.214 111.639 204.375 113.47 205.062 115.073C205.748 116.675 207.58 117.515 209.182 116.828L222.078 111.639C223.757 111.029 224.52 109.197 223.833 107.518Z" fill="white"/>
<path d="M74.0403 66.1594L66.2568 54.7131C65.6464 53.7974 64.5781 53.2633 63.4334 53.3396C62.5177 53.95 61.602 54.6368 60.6863 55.3236C60.3048 56.3156 60.3811 57.4602 60.9916 58.2996L68.775 69.7459C69.767 71.1957 71.751 71.5773 73.2009 70.5853C74.6508 69.5933 75.0323 67.6092 74.0403 66.1594Z" fill="white"/>
<path d="M42.1438 111.029L29.2477 105.84C27.6452 105.153 25.7375 105.992 25.1271 107.595C24.4403 109.197 25.2797 111.105 26.8821 111.715L39.7783 116.904C41.3807 117.591 43.2884 116.752 43.8989 115.149C44.5857 113.547 43.8226 111.715 42.1438 111.029Z" fill="white"/>
<path d="M124.785 225.644C123.03 225.644 121.58 227.094 121.58 228.849V242.66C121.58 244.416 123.03 245.865 124.785 245.865C126.54 245.865 127.99 244.416 127.99 242.66V228.772C127.99 227.017 126.54 225.644 124.785 225.644Z" fill="white"/>
<path d="M188.046 224.041L180.262 212.595C179.27 211.145 177.286 210.764 175.836 211.756C174.387 212.748 174.005 214.732 174.997 216.182L182.78 227.628C183.391 228.544 184.459 229.078 185.604 229.001C186.52 228.391 187.435 227.704 188.351 227.017C188.732 226.102 188.656 224.957 188.046 224.041Z" fill="white"/>
<path d="M222.078 170.626L209.182 165.437C207.58 164.75 205.672 165.589 205.062 167.192C204.375 168.794 205.214 170.702 206.817 171.312L219.713 176.501C221.315 177.188 223.223 176.349 223.833 174.746C224.52 173.144 223.757 171.312 222.078 170.626Z" fill="white"/>
<path d="M73.2009 211.756C71.751 210.764 69.767 211.145 68.775 212.595L60.9916 224.041C60.3811 224.957 60.3048 226.025 60.6863 227.017C61.602 227.704 62.5177 228.315 63.4334 229.001C64.5781 229.078 65.6464 228.544 66.2568 227.628L74.0403 216.182C75.0323 214.732 74.6508 212.748 73.2009 211.756Z" fill="white"/>
<path d="M43.8989 167.115C43.2121 165.513 41.3807 164.673 39.7783 165.36L26.8821 170.549C25.2797 171.236 24.4403 173.067 25.1271 174.67C25.8138 176.272 27.6452 177.112 29.2477 176.425L42.1438 171.236C43.8226 170.625 44.5857 168.794 43.8989 167.115Z" fill="white"/>
<path d="M128.906 139.568C129.516 143.155 127.074 146.588 123.488 147.275L67.0195 156.89C63.433 157.501 59.9991 155.059 59.3123 151.472C58.7019 147.886 61.1437 144.452 64.7302 143.765L121.198 134.15C124.861 133.54 128.295 135.982 128.906 139.568Z" fill="#1A237E"/>
<path d="M188.349 202.141C186.671 203.82 183.923 203.82 182.245 202.141L121.503 141.857C119.824 140.178 119.824 137.431 121.503 135.753C123.182 134.074 125.929 134.074 127.608 135.753L188.349 196.036C190.028 197.715 190.028 200.462 188.349 202.141Z" fill="#1A237E"/>
<path d="M124.479 148.725C128.652 148.725 132.034 145.343 132.034 141.17C132.034 136.998 128.652 133.616 124.479 133.616C120.307 133.616 116.925 136.998 116.925 141.17C116.925 145.343 120.307 148.725 124.479 148.725Z" fill="#0086FF"/>
<path d="M170.724 248.918C169.198 249.757 168.663 251.741 169.503 253.267L187.893 286.08C188.732 287.606 190.717 288.14 192.243 287.301C193.769 286.462 194.303 284.478 193.464 282.951L175.073 250.139C174.234 248.613 172.326 248.078 170.724 248.918Z" fill="#E6E6E6"/>
<path d="M73.9634 250.139L55.5731 282.951C54.7337 284.478 55.2679 286.462 56.7941 287.301C58.3202 288.14 60.3043 287.606 61.1436 286.08L79.5339 253.267C80.3733 251.741 79.8392 249.757 78.313 248.918C76.7105 248.078 74.8028 248.613 73.9634 250.139Z" fill="#E6E6E6"/>
<path d="M191.632 294.474C197.068 294.474 201.476 290.067 201.476 284.63C201.476 279.194 197.068 274.786 191.632 274.786C186.195 274.786 181.788 279.194 181.788 284.63C181.788 290.067 186.195 294.474 191.632 294.474Z" fill="#E6E6E6"/>
<path d="M123.946 19.6876C129.383 19.6876 133.79 15.2803 133.79 9.84378C133.79 4.40721 129.383 0 123.946 0C118.51 0 114.103 4.40721 114.103 9.84378C114.103 15.2803 118.51 19.6876 123.946 19.6876Z" fill="#E6E6E6"/>
<path d="M59.1612 294.474C64.5977 294.474 69.0049 290.067 69.0049 284.63C69.0049 279.194 64.5977 274.786 59.1612 274.786C53.7246 274.786 49.3174 279.194 49.3174 284.63C49.3174 290.067 53.7246 294.474 59.1612 294.474Z" fill="#E6E6E6"/>
</svg>

'''
'''--- src/assets/images/congrats.svg ---
<svg width="430" height="319" viewBox="0 0 430 319" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M350.011 262.343C351.251 259.728 345.555 254.43 337.287 250.509C329.02 246.588 321.313 245.529 320.073 248.144C318.832 250.758 324.529 256.057 332.796 259.978C341.064 263.899 348.771 264.957 350.011 262.343Z" fill="#2F2E41"/>
<path d="M386.539 296.689H376.444V314.721H386.539V296.689Z" fill="#2F2E41"/>
<path d="M366.348 296.689H356.253V314.721H366.348V296.689Z" fill="#2F2E41"/>
<path d="M378.138 318.112C382.777 318.112 386.538 316.698 386.538 314.953C386.538 313.208 382.777 311.793 378.138 311.793C373.499 311.793 369.738 313.208 369.738 314.953C369.738 316.698 373.499 318.112 378.138 318.112Z" fill="#2F2E41"/>
<path d="M357.948 317.727C362.587 317.727 366.348 316.312 366.348 314.567C366.348 312.822 362.587 311.408 357.948 311.408C353.309 311.408 349.549 312.822 349.549 314.567C349.549 316.312 353.309 317.727 357.948 317.727Z" fill="#2F2E41"/>
<path d="M217.543 265.094H207.448V283.126H217.543V265.094Z" fill="#2F2E41"/>
<path d="M237.733 265.094H227.638V283.126H237.733V265.094Z" fill="#2F2E41"/>
<path d="M215.848 286.517C220.487 286.517 224.248 285.103 224.248 283.358C224.248 281.613 220.487 280.198 215.848 280.198C211.209 280.198 207.448 281.613 207.448 283.358C207.448 285.103 211.209 286.517 215.848 286.517Z" fill="#2F2E41"/>
<path d="M236.037 286.132C240.676 286.132 244.437 284.717 244.437 282.972C244.437 281.228 240.676 279.813 236.037 279.813C231.398 279.813 227.638 281.228 227.638 282.972C227.638 284.717 231.398 286.132 236.037 286.132Z" fill="#2F2E41"/>
<path d="M59.0286 296.689H48.9336V314.721H59.0286V296.689Z" fill="#2F2E41"/>
<path d="M79.218 296.689H69.123V314.721H79.218V296.689Z" fill="#2F2E41"/>
<path d="M57.3332 318.112C61.9722 318.112 65.7329 316.698 65.7329 314.953C65.7329 313.208 61.9722 311.793 57.3332 311.793C52.6942 311.793 48.9336 313.208 48.9336 314.953C48.9336 316.698 52.6942 318.112 57.3332 318.112Z" fill="#2F2E41"/>
<path d="M77.5227 317.727C82.1617 317.727 85.9223 316.312 85.9223 314.567C85.9223 312.822 82.1617 311.408 77.5227 311.408C72.8837 311.408 69.123 312.822 69.123 314.567C69.123 316.312 72.8837 317.727 77.5227 317.727Z" fill="#2F2E41"/>
<path d="M377.599 181.945C378.706 181.945 379.603 181.048 379.603 179.942C379.603 178.835 378.706 177.938 377.599 177.938C376.493 177.938 375.596 178.835 375.596 179.942C375.596 181.048 376.493 181.945 377.599 181.945Z" fill="#CCCCCC"/>
<path d="M185.794 148.347C188.007 148.347 189.801 146.553 189.801 144.34C189.801 142.127 188.007 140.333 185.794 140.333C183.581 140.333 181.787 142.127 181.787 144.34C181.787 146.553 183.581 148.347 185.794 148.347Z" fill="#CCCCCC"/>
<path d="M62.5735 186.569C63.8503 186.569 64.8854 185.534 64.8854 184.257C64.8854 182.98 63.8503 181.945 62.5735 181.945C61.2968 181.945 60.2617 182.98 60.2617 184.257C60.2617 185.534 61.2968 186.569 62.5735 186.569Z" fill="#CCCCCC"/>
<path d="M341.457 209.919C342.819 209.919 343.923 208.815 343.923 207.453C343.923 206.091 342.819 204.987 341.457 204.987C340.095 204.987 338.991 206.091 338.991 207.453C338.991 208.815 340.095 209.919 341.457 209.919Z" fill="#CCCCCC"/>
<path d="M289.287 204.91C290.393 204.91 291.29 204.013 291.29 202.906C291.29 201.8 290.393 200.903 289.287 200.903C288.18 200.903 287.283 201.8 287.283 202.906C287.283 204.013 288.18 204.91 289.287 204.91Z" fill="#CCCCCC"/>
<path d="M223.091 163.374C225.304 163.374 227.098 161.58 227.098 159.367C227.098 157.153 225.304 155.359 223.091 155.359C220.878 155.359 219.084 157.153 219.084 159.367C219.084 161.58 220.878 163.374 223.091 163.374Z" fill="#CCCCCC"/>
<path d="M199.896 200.902C201.173 200.902 202.208 199.867 202.208 198.59C202.208 197.314 201.173 196.279 199.896 196.279C198.619 196.279 197.584 197.314 197.584 198.59C197.584 199.867 198.619 200.902 199.896 200.902Z" fill="#CCCCCC"/>
<path d="M343.923 137.867C345.285 137.867 346.389 136.762 346.389 135.401C346.389 134.039 345.285 132.935 343.923 132.935C342.561 132.935 341.457 134.039 341.457 135.401C341.457 136.762 342.561 137.867 343.923 137.867Z" fill="#CCCCCC"/>
<path d="M372.435 303.856C390.778 303.856 405.648 288.986 405.648 270.643C405.648 252.299 390.778 237.429 372.435 237.429C354.092 237.429 339.222 252.299 339.222 270.643C339.222 288.986 354.092 303.856 372.435 303.856Z" fill="#1A237E"/>
<path d="M362.032 228.875C365.037 216.931 378.061 209.918 391.238 213.155C404.415 216.391 412.661 228.721 409.733 240.666C406.804 252.61 396.94 252.61 383.763 249.374C370.586 246.137 359.104 240.82 362.032 228.875Z" fill="#EC00FF"/>
<path d="M367.503 274.727C373.632 274.727 378.6 269.759 378.6 263.63C378.6 257.502 373.632 252.533 367.503 252.533C361.374 252.533 356.406 257.502 356.406 263.63C356.406 269.759 361.374 274.727 367.503 274.727Z" fill="white"/>
<path d="M362.957 263.399C365 263.399 366.656 261.743 366.656 259.7C366.656 257.657 365 256.001 362.957 256.001C360.914 256.001 359.258 257.657 359.258 259.7C359.258 261.743 360.914 263.399 362.957 263.399Z" fill="#3F3D56"/>
<path d="M374.438 286.671C375.208 290.678 372.511 294.531 368.504 295.225C364.497 295.996 360.644 293.299 359.95 289.291C359.257 285.284 362.339 283.897 366.346 283.126C370.277 282.433 373.744 282.664 374.438 286.671Z" fill="white"/>
<path d="M99.6586 247.478C102.925 238.931 103.382 231.165 100.679 230.131C97.9752 229.098 93.1356 235.19 89.8689 243.737C86.6023 252.284 86.1456 260.051 88.8489 261.084C91.5522 262.117 96.3919 256.026 99.6586 247.478Z" fill="#2F2E41"/>
<path d="M97.2087 273.017C98.509 254.719 84.7302 238.832 66.4329 237.532C48.1356 236.232 32.2485 250.011 30.9482 268.308C29.6479 286.605 43.4267 302.492 61.724 303.793C80.0213 305.093 95.9083 291.314 97.2087 273.017Z" fill="#1A237E"/>
<path d="M64.8856 273.571C71.1418 273.571 76.2135 268.499 76.2135 262.243C76.2135 255.987 71.1418 250.915 64.8856 250.915C58.6293 250.915 53.5576 255.987 53.5576 262.243C53.5576 268.499 58.6293 273.571 64.8856 273.571Z" fill="white"/>
<path d="M64.8844 266.019C66.9698 266.019 68.6604 264.328 68.6604 262.243C68.6604 260.158 66.9698 258.467 64.8844 258.467C62.799 258.467 61.1084 260.158 61.1084 262.243C61.1084 264.328 62.799 266.019 64.8844 266.019Z" fill="#3F3D56"/>
<path d="M31.9031 239.741C29.206 227.72 37.7597 215.621 51.0142 212.693C64.2687 209.764 77.1379 217.085 79.835 229.107C82.5321 241.128 73.7472 245.521 60.4927 248.526C47.2382 251.531 34.5232 251.763 31.9031 239.741Z" fill="#3468FF"/>
<path d="M41.6302 262.337C42.8703 259.722 37.1737 254.424 28.9064 250.503C20.6391 246.582 12.9318 245.524 11.6917 248.138C10.4516 250.753 16.1483 256.051 24.4156 259.972C32.6829 263.893 40.3901 264.952 41.6302 262.337Z" fill="#2F2E41"/>
<path d="M47.7773 282.587C47.7773 285.824 56.0999 292.22 65.4243 292.22C74.7487 292.22 83.3795 283.049 83.3795 279.813C83.3795 276.576 74.6716 280.429 65.4243 280.429C56.177 280.429 47.7773 279.351 47.7773 282.587Z" fill="white"/>
<path d="M222.629 272.261C240.972 272.261 255.843 257.391 255.843 239.048C255.843 220.704 240.972 205.834 222.629 205.834C204.286 205.834 189.416 220.704 189.416 239.048C189.416 257.391 204.286 272.261 222.629 272.261Z" fill="#1A237E"/>
<path d="M190.418 208.146C187.721 196.125 196.274 184.026 209.529 181.098C222.783 178.169 235.653 185.49 238.35 197.512C241.047 209.533 232.262 213.926 219.007 216.931C205.753 219.936 193.115 220.168 190.418 208.146Z" fill="#9D2DFF"/>
<path d="M258.355 224.474C265.544 217.278 269.542 209.616 267.284 207.36C265.026 205.104 257.367 209.108 250.178 216.304C242.988 223.499 238.991 231.161 241.249 233.417C243.507 235.673 251.165 231.669 258.355 224.474Z" fill="#2F2E41"/>
<path d="M195.821 235.839C198.079 233.583 194.081 225.921 186.892 218.725C179.702 211.53 172.044 207.526 169.786 209.782C167.528 212.038 171.525 219.7 178.715 226.895C185.904 234.091 193.563 238.095 195.821 235.839Z" fill="#2F2E41"/>
<path d="M121.756 318.266H0.770609C0.385305 318.266 0 317.881 0 317.496C0 317.11 0.385305 316.725 0.770609 316.725H121.756C122.219 316.725 122.527 317.11 122.527 317.496C122.527 317.881 122.219 318.266 121.756 318.266Z" fill="#CCCCCC"/>
<path d="M429.23 318.266H308.244C307.859 318.266 307.474 317.881 307.474 317.496C307.474 317.11 307.859 316.725 308.244 316.725H429.23C429.615 316.725 430.001 317.11 430.001 317.496C430.001 317.881 429.692 318.266 429.23 318.266Z" fill="#CCCCCC"/>
<path d="M285.126 286.671H164.141C163.678 286.671 163.37 286.286 163.37 285.901C163.37 285.515 163.678 285.13 164.141 285.13H285.126C285.512 285.13 285.897 285.515 285.897 285.901C285.897 286.286 285.589 286.671 285.126 286.671Z" fill="#CCCCCC"/>
<path d="M221.165 245.675C227.421 245.675 232.493 240.603 232.493 234.347C232.493 228.09 227.421 223.019 221.165 223.019C214.909 223.019 209.837 228.09 209.837 234.347C209.837 240.603 214.909 245.675 221.165 245.675Z" fill="white"/>
<path d="M221.165 238.123C223.25 238.123 224.941 236.432 224.941 234.347C224.941 232.261 223.25 230.571 221.165 230.571C219.079 230.571 217.389 232.261 217.389 234.347C217.389 236.432 219.079 238.123 221.165 238.123Z" fill="#3F3D56"/>
<path d="M206.446 253.15C206.446 256.386 214.846 262.782 224.093 262.782C233.341 262.782 242.048 253.612 242.048 250.375C242.048 247.139 233.341 250.992 224.093 250.992C214.846 250.992 206.446 249.913 206.446 253.15Z" fill="white"/>
<path d="M418.36 289.076C420.579 287.218 417.616 280.025 411.741 273.009C405.867 265.994 399.306 261.813 397.087 263.671C394.868 265.529 397.832 272.722 403.706 279.738C409.581 286.753 416.142 290.934 418.36 289.076Z" fill="#2F2E41"/>
<path d="M92.1647 134.707C84.6127 134.707 78.3708 129.004 77.5231 121.53L69.0464 43.3127C68.1987 35.2213 74.0553 27.9776 82.1467 27.0529L332.287 0.0815491C340.378 -0.766121 347.622 5.09051 348.546 13.1819L356.946 91.4758C357.794 99.5672 351.937 106.811 343.846 107.736V107.427V107.736L93.7059 134.707C93.2435 134.707 92.7041 134.707 92.1647 134.707Z" fill="#E6E6E6"/>
<path d="M329.512 3.78041C329.05 3.78041 328.588 3.78041 328.125 3.85747L87.0016 29.827C79.912 30.5976 74.7489 36.9937 75.5196 44.0833L79.7579 83.6155C82.6862 110.51 106.806 129.929 133.701 127.078L303.235 108.814C330.052 105.963 349.471 81.8431 346.543 55.0259L342.304 15.3396C341.611 8.78937 336.14 3.78041 329.512 3.78041Z" fill="white"/>
<path d="M278.729 45.008L143.95 59.4955C142.331 59.6496 140.867 58.4937 140.713 56.8754C140.559 55.2571 141.715 53.793 143.333 53.6388L278.113 39.1514C279.731 38.9973 281.195 40.1532 281.349 41.7715C281.503 43.3897 280.424 44.7768 278.729 45.008Z" fill="#1A237E"/>
<path d="M280.732 62.9633L145.952 77.4508C144.334 77.6049 142.87 76.449 142.716 74.8307C142.562 73.2124 143.718 71.7483 145.336 71.5941L280.116 57.1067C281.734 56.9526 283.198 58.1085 283.352 59.7267C283.506 61.345 282.35 62.8092 280.732 62.9633Z" fill="#1A237E"/>
<path d="M163.6 93.7876L147.879 95.483C146.261 95.6371 144.797 94.4812 144.643 92.8629C144.489 91.2446 145.644 89.7805 147.263 89.6264L162.983 87.931C164.601 87.7769 166.066 88.9328 166.22 90.5511C166.374 92.1694 165.218 93.6335 163.6 93.7876Z" fill="#1A237E"/>
<path d="M86.8475 46.6262C89.7841 46.6262 92.1647 44.2456 92.1647 41.309C92.1647 38.3724 89.7841 35.9918 86.8475 35.9918C83.9109 35.9918 81.5303 38.3724 81.5303 41.309C81.5303 44.2456 83.9109 46.6262 86.8475 46.6262Z" fill="#694AFF"/>
<path d="M329.674 15.5953C330.145 12.6965 328.176 9.96525 325.277 9.49481C322.379 9.02436 319.647 10.9929 319.177 13.8916C318.707 16.7903 320.675 19.5216 323.574 19.992C326.473 20.4625 329.204 18.494 329.674 15.5953Z" fill="#694AFF"/>
<path d="M252.606 129.082C251.604 128.234 251.065 126.924 251.142 125.614C251.373 117.908 250.14 110.202 247.443 103.035C246.98 101.802 247.057 100.415 247.751 99.2591C248.368 98.1802 249.446 97.4096 250.679 97.1784C256.844 93.4795 263.163 92.4007 269.482 94.096C271.563 93.7878 273.566 95.0207 274.26 97.1014C276.803 105.424 278.267 113.978 278.498 122.686C278.575 124.843 277.034 126.693 274.876 127.078L256.228 130.161C254.918 130.315 253.608 129.929 252.606 129.082Z" fill="#0086FF"/>
<path d="M254.3 106.58L270.021 103.959C270.56 103.882 270.946 103.343 270.869 102.804C270.792 102.264 270.252 101.879 269.713 101.956L253.992 104.576C253.453 104.653 253.068 105.192 253.145 105.732C253.222 106.348 253.761 106.657 254.3 106.58Z" fill="white"/>
<path d="M255.611 114.44L271.331 111.82C271.871 111.743 272.256 111.203 272.179 110.664C272.102 110.125 271.563 109.739 271.023 109.816L255.303 112.436C254.763 112.513 254.378 113.053 254.455 113.592C254.532 114.209 255.072 114.517 255.611 114.44Z" fill="white"/>
<path d="M256.843 122.3L272.564 119.68C273.103 119.603 273.489 119.064 273.412 118.524C273.335 117.985 272.795 117.599 272.256 117.676L256.535 120.297C255.996 120.374 255.61 120.913 255.688 121.452C255.842 122.069 256.304 122.377 256.843 122.3Z" fill="white"/>
<path d="M40.9969 149.194C43.7711 146.42 48.3177 146.497 51.0919 149.272C53.9431 152.123 53.8661 156.746 50.9378 159.521C48.0865 162.218 43.5399 162.141 40.8428 159.289C38.1457 156.515 38.2227 151.969 40.9969 149.194ZM47.9324 152.431C46.6994 151.506 45.3894 151.275 44.1564 152.508C43.0005 153.664 43.0005 155.128 44.1564 156.284C45.2353 157.363 46.6224 157.363 47.7783 156.361C49.0883 155.128 48.9342 153.818 47.9324 152.431Z" fill="#EC00FF"/>
<path d="M400.64 124.997C403.415 122.223 407.961 122.3 410.735 125.074C413.587 127.926 413.51 132.549 410.581 135.323C407.73 138.021 403.183 137.944 400.486 135.092C397.789 132.318 397.866 127.771 400.64 124.997ZM407.576 128.234C406.343 127.309 405.033 127.078 403.8 128.311C402.644 129.467 402.644 130.931 403.8 132.087C404.879 133.166 406.266 133.166 407.422 132.164C408.655 130.931 408.578 129.621 407.576 128.234Z" fill="#EC00FF"/>
<path d="M148.651 177.938C145.877 175.164 145.877 170.617 148.651 167.843C151.502 164.992 156.126 165.069 158.9 167.92C161.597 170.772 161.52 175.318 158.746 178.015C155.972 180.79 151.425 180.712 148.651 177.938ZM155.586 171.003C154.276 170.001 152.966 169.924 151.81 171.157C150.655 172.39 150.809 173.777 152.042 174.856C153.198 175.935 154.585 175.858 155.664 174.779C156.742 173.623 156.665 172.236 155.586 171.003Z" fill="#EC00FF"/>
<path d="M320.419 141.72C323.271 138.945 327.74 138.945 330.514 141.72C333.289 144.571 333.289 149.271 330.437 151.969C327.586 154.666 323.039 154.589 320.342 151.737C317.568 148.963 317.645 144.494 320.419 141.72ZM323.502 145.033C322.5 146.343 322.423 147.653 323.656 148.809C324.812 149.888 326.199 149.811 327.278 148.732C328.434 147.576 328.511 146.112 327.278 144.956C326.122 143.8 324.812 143.877 323.502 145.033Z" fill="#EC00FF"/>
<path d="M47.7016 86.2358C50.6299 89.6265 50.707 93.9419 48.2411 96.7931C46.6228 98.7197 46.1604 100.415 47.7016 102.573C48.164 103.189 47.8558 105.193 47.3934 105.424C46.6228 105.809 45.0045 105.732 44.311 105.193C41.6138 102.881 41.3826 98.2573 43.7715 95.2519C45.3898 93.1713 46.0834 91.3989 44.311 89.0871C43.9257 88.5476 44.388 86.6211 44.9274 86.3129C45.8522 85.7734 47.1622 86.2358 47.7016 86.2358Z" fill="#0086FF"/>
<path d="M341.842 167.997C341.071 168.691 339.684 168.46 339.53 167.458C339.299 166.456 339.376 165.3 339.607 164.298C339.838 163.374 341.226 163.219 341.919 163.913C342.536 164.607 342.459 167.381 341.842 167.997Z" fill="#4F59FF"/>
<path d="M337.681 169.385C337.989 170.001 338.297 170.309 338.22 170.541C338.066 171.08 337.835 172.005 337.604 172.005C336.448 172.159 335.215 172.159 334.059 171.928C333.828 171.851 333.597 171.003 333.52 170.463C333.52 170.232 333.828 169.693 334.059 169.693C335.292 169.539 336.525 169.462 337.681 169.385Z" fill="#4F59FF"/>
<path d="M348.085 171.619C347.083 172.698 344.154 172.775 343.692 171.927C343.461 171.388 343.461 170.463 343.769 170.001C344.232 169.23 347.237 169.23 347.699 170.001C348.085 170.463 348.008 171.234 348.085 171.619Z" fill="#4F59FF"/>
<path d="M339.838 173.469C340.532 173.623 341.687 173.7 341.764 173.931C341.996 175.241 342.073 176.628 341.764 177.784C341.533 178.555 340.454 178.555 339.761 177.861C339.067 177.245 339.067 174.547 339.838 173.469Z" fill="#4F59FF"/>
<path d="M28.8987 179.556C28.1281 180.25 26.741 180.019 26.5869 179.017C26.3557 178.015 26.4327 176.859 26.6639 175.858C26.8951 174.933 28.2822 174.779 28.9757 175.472C29.5922 176.166 29.5922 178.94 28.8987 179.556Z" fill="#4F59FF"/>
<path d="M24.7375 180.944C25.0457 181.56 25.3539 181.868 25.2769 182.1C25.1228 182.639 24.8916 183.564 24.6604 183.564C23.5045 183.718 22.2715 183.718 21.1156 183.487C20.8844 183.41 20.6532 182.562 20.5762 182.022C20.5762 181.791 20.8844 181.252 21.1156 181.252C22.3486 181.098 23.5815 181.021 24.7375 180.944Z" fill="#4F59FF"/>
<path d="M35.1412 183.178C34.1395 184.257 31.2111 184.334 30.7488 183.487C30.5176 182.947 30.5176 182.022 30.8258 181.56C31.2882 180.789 34.2936 180.789 34.7559 181.56C35.1412 182.022 35.0642 182.793 35.1412 183.178Z" fill="#4F59FF"/>
<path d="M26.8946 184.951C27.5882 185.105 28.7441 185.182 28.8211 185.413C29.0523 186.723 29.1294 188.11 28.8211 189.266C28.5899 190.037 27.5111 190.037 26.8175 189.343C26.124 188.804 26.124 186.107 26.8946 184.951Z" fill="#4F59FF"/>
<path d="M381.298 70.5154C380.759 70.5154 379.294 70.8237 378.601 70.2843C378.061 69.8219 377.907 67.9724 378.37 67.2018C379.757 65.1212 379.603 63.4258 378.061 61.4993C375.364 58.1086 375.441 53.6391 378.061 50.8649C379.063 49.786 380.142 49.2466 381.375 50.2484C382.608 51.2502 382.531 52.4832 381.606 53.562C379.988 55.5656 380.45 57.338 381.914 59.1875C384.689 62.5011 384.535 67.1248 381.298 70.5154Z" fill="#0086FF"/>
<path d="M381.838 78.5296C382.917 80.1479 382.994 83.8468 381.838 84.4633C381.067 84.9257 379.68 84.9257 378.909 84.4633C377.753 83.8468 377.676 79.9938 378.832 79.2232C379.603 78.6838 380.836 78.7608 381.838 78.5296Z" fill="#0086FF"/>
<path d="M263.01 166.841C261.931 164.529 260.39 162.603 258.617 160.908C256.845 159.212 254.841 157.825 252.529 156.746C252.915 155.899 253.223 155.128 253.608 154.203C253.762 154.28 253.916 154.357 254.071 154.435C259.234 156.978 263.164 160.831 265.63 166.071C265.784 166.456 266.015 166.61 266.4 166.61C268.404 166.61 270.407 166.841 272.334 167.304C272.719 167.381 272.873 167.304 273.105 166.995C276.649 162.449 281.273 159.521 286.898 158.211C287.053 158.133 287.284 158.133 287.515 158.056C287.515 158.211 287.592 158.288 287.592 158.365C287.746 159.135 287.9 159.906 288.054 160.754C285.588 161.293 283.277 162.141 281.119 163.451C278.961 164.761 277.189 166.302 275.648 168.151C276.726 168.845 277.882 169.538 278.884 170.309C279.269 170.617 279.655 171.08 279.886 171.465C280.502 172.39 280.502 173.392 279.886 174.316C275.571 180.943 271.255 187.648 267.017 194.275C266.786 194.66 266.477 194.969 265.938 194.892C265.398 194.814 265.244 194.429 265.09 194.044C262.393 186.646 259.773 179.171 257.076 171.773C256.614 170.617 256.845 169.693 257.846 168.845C259.079 167.766 260.544 167.304 262.085 166.918C262.547 166.995 262.778 166.918 263.01 166.841ZM267.017 169.076C267.325 170.54 267.556 171.85 267.864 173.314C266.94 173.083 266.169 172.929 265.398 172.775C265.013 172.698 264.936 172.544 264.859 172.159C264.705 171.234 264.474 170.309 264.243 169.461C262.701 169.538 260.544 170.309 259.927 171.003C260.004 171.08 260.081 171.157 260.158 171.234C260.39 171.388 260.621 171.619 260.852 171.773C263.549 173.623 266.631 174.47 269.868 174.624C272.334 174.779 274.8 174.547 277.112 173.546C277.42 173.392 277.728 173.237 278.114 173.006C276.958 171.85 275.648 171.157 274.26 170.617C273.952 171.157 273.644 171.696 273.336 172.159C272.488 171.773 271.717 171.311 270.87 170.926C271.101 170.54 271.255 170.155 271.563 169.616C269.945 169.461 268.481 169.307 267.017 169.076Z" fill="#9D2DFF"/>
<path d="M270.561 161.216C269.636 161.062 268.712 160.985 267.787 160.908C268.326 155.282 266.862 150.196 263.395 145.65C264.088 145.033 264.859 144.494 265.552 143.877C269.482 149.04 271.178 154.743 270.561 161.216Z" fill="#9D2DFF"/>
<path d="M280.194 153.433C279.654 154.127 279.115 154.82 278.653 155.514C278.19 156.207 277.805 156.978 277.343 157.826C276.495 157.517 275.57 157.132 274.646 156.747C275.57 154.666 276.957 152.894 278.576 151.275C279.038 152.046 279.654 152.739 280.194 153.433Z" fill="#9D2DFF"/>
<path d="M283.046 168.845C282.507 168.229 281.967 167.535 281.351 166.764C282.429 165.917 283.585 165.377 284.972 165.069C285.127 166.071 285.281 166.996 285.512 167.843C284.664 168.229 283.894 168.537 283.046 168.845Z" fill="#9D2DFF"/>
<path d="M255.458 162.526C256.691 163.066 257.692 163.836 258.463 164.838C257.769 165.454 257.076 165.994 256.382 166.533C255.689 166.071 254.995 165.531 254.225 164.992C254.61 164.221 254.995 163.374 255.458 162.526Z" fill="#9D2DFF"/>
<path d="M272.18 152.2C271.718 151.583 271.795 150.736 272.411 150.273C273.028 149.811 273.875 149.965 274.338 150.505C274.8 151.121 274.723 151.969 274.107 152.431C273.49 152.894 272.642 152.816 272.18 152.2Z" fill="#9D2DFF"/>
<path d="M265.168 155.359C265.63 155.976 265.553 156.824 264.937 157.286C264.32 157.748 263.472 157.671 263.01 157.055C262.548 156.438 262.625 155.591 263.241 155.128C263.858 154.666 264.705 154.82 265.168 155.359Z" fill="#9D2DFF"/>
<path d="M258.463 150.659C259.08 150.196 259.927 150.273 260.39 150.89C260.852 151.506 260.775 152.354 260.235 152.816C259.619 153.279 258.771 153.202 258.309 152.662C257.77 152.046 257.847 151.121 258.463 150.659Z" fill="#9D2DFF"/>
<path d="M275.031 144.571C275.648 144.109 276.496 144.186 276.958 144.802C277.42 145.419 277.343 146.266 276.727 146.729C276.11 147.191 275.263 147.114 274.8 146.498C274.338 145.958 274.415 145.11 275.031 144.571Z" fill="#9D2DFF"/>
<path d="M291.137 164.915C290.52 165.377 289.673 165.3 289.21 164.684C288.748 164.067 288.825 163.22 289.441 162.757C290.058 162.295 290.906 162.372 291.368 162.988C291.83 163.528 291.753 164.453 291.137 164.915Z" fill="#9D2DFF"/>
<path d="M282.737 157.363C282.121 157.825 281.273 157.748 280.811 157.132C280.349 156.515 280.426 155.668 281.042 155.205C281.659 154.743 282.506 154.82 282.969 155.436C283.508 156.053 283.354 156.901 282.737 157.363Z" fill="#9D2DFF"/>
<path d="M112.433 187.417C113.897 187.956 115.361 188.65 116.363 189.883C117.21 190.807 117.288 191.809 116.748 192.888C113.203 199.9 109.581 206.913 106.037 214.003C105.805 214.388 105.574 214.773 105.112 214.773C104.572 214.773 104.341 214.388 104.187 214.003C100.796 206.836 97.3287 199.746 93.861 192.58C93.3216 191.501 93.4757 190.576 94.2463 189.728C94.5545 189.343 94.9399 188.958 95.4022 188.65C96.5581 188.033 97.714 187.494 98.87 186.954C97.637 184.951 96.0187 183.101 94.0151 181.56C92.0886 180.019 89.8538 178.863 87.542 178.015C87.7732 177.167 88.0814 176.474 88.3126 175.703C88.3126 175.626 88.3897 175.549 88.4667 175.395C88.6979 175.472 88.852 175.549 89.0062 175.549C94.4775 177.553 98.6388 181.021 101.644 186.029C101.798 186.338 102.029 186.415 102.415 186.415C104.418 186.184 106.422 186.184 108.426 186.492C108.888 186.569 109.042 186.415 109.273 186.107C112.356 181.252 116.748 177.938 122.219 176.012C122.374 175.934 122.528 175.934 122.759 175.857C123.067 176.782 123.298 177.63 123.529 178.477C121.141 179.248 118.906 180.327 116.979 181.868C114.976 183.332 113.28 185.105 111.893 187.262C112.047 187.262 112.279 187.34 112.433 187.417ZM103.031 188.804C103.262 189.343 103.339 189.805 103.494 190.191C102.646 190.499 101.798 190.807 100.874 191.116C100.642 190.576 100.411 190.037 100.18 189.42C98.7158 189.805 97.3287 190.345 96.0958 191.347C96.4811 191.578 96.7122 191.809 97.0205 192.04C99.1782 193.35 101.567 193.89 104.11 194.044C107.347 194.275 110.506 193.813 113.357 192.271C113.589 192.117 113.82 191.963 114.128 191.809C114.205 191.732 114.282 191.655 114.359 191.578C113.82 190.884 111.816 189.805 110.275 189.497C109.967 190.345 109.581 191.193 109.273 192.117C109.196 192.503 108.965 192.58 108.657 192.657C107.886 192.734 107.038 192.811 106.114 192.888C106.576 191.501 106.961 190.268 107.501 188.804C106.037 188.881 104.572 188.881 103.031 188.804Z" fill="#3468FF"/>
<path d="M105.034 180.635C105.959 180.635 106.884 180.635 107.808 180.635C107.962 175.01 110.043 170.078 114.127 166.071C113.511 165.377 112.817 164.761 112.201 164.067C107.577 168.691 105.265 174.162 105.034 180.635Z" fill="#3468FF"/>
<path d="M96.4824 171.696C96.9448 172.467 97.4072 173.237 97.7925 174.008C98.1778 174.779 98.4089 175.549 98.7942 176.474C99.719 176.243 100.644 176.012 101.646 175.78C100.952 173.546 99.796 171.696 98.486 169.847C97.7154 170.463 97.0989 171.08 96.4824 171.696Z" fill="#3468FF"/>
<path d="M91.7035 186.646C92.32 186.03 92.9365 185.413 93.63 184.797C92.7053 183.795 91.6265 183.101 90.3164 182.639C90.0082 183.564 89.6999 184.488 89.4688 185.336C90.1623 185.798 90.8559 186.184 91.7035 186.646Z" fill="#3468FF"/>
<path d="M119.831 183.795C118.521 184.18 117.442 184.797 116.518 185.721C117.134 186.415 117.751 187.031 118.367 187.648C119.138 187.263 119.908 186.877 120.679 186.415C120.525 185.567 120.217 184.72 119.831 183.795Z" fill="#3468FF"/>
<path d="M104.572 171.465C105.112 170.926 105.112 170.001 104.572 169.461C104.033 168.922 103.108 168.922 102.569 169.461C102.029 170.001 102.029 170.926 102.569 171.465C103.185 172.004 104.033 172.004 104.572 171.465Z" fill="#3468FF"/>
<path d="M111.122 175.472C110.583 176.012 110.583 176.936 111.122 177.476C111.662 178.015 112.587 178.015 113.126 177.476C113.665 176.936 113.665 176.012 113.126 175.472C112.509 175.01 111.585 174.933 111.122 175.472Z" fill="#3468FF"/>
<path d="M118.367 171.696C117.827 171.157 116.98 171.08 116.44 171.619C115.901 172.159 115.824 173.006 116.363 173.546C116.903 174.085 117.75 174.162 118.29 173.623C118.906 173.083 118.906 172.236 118.367 171.696Z" fill="#3468FF"/>
<path d="M102.723 163.605C102.183 163.065 101.336 163.065 100.796 163.605C100.257 164.144 100.257 164.992 100.796 165.531C101.336 166.071 102.183 166.071 102.723 165.531C103.262 164.992 103.262 164.144 102.723 163.605Z" fill="#3468FF"/>
<path d="M84.1516 181.714C84.6911 182.254 85.5387 182.254 86.0782 181.791C86.6176 181.252 86.6176 180.404 86.0782 179.865C85.5387 179.325 84.6911 179.248 84.1516 179.788C83.6122 180.25 83.6122 181.175 84.1516 181.714Z" fill="#3468FF"/>
<path d="M93.3987 175.241C93.9381 175.781 94.7858 175.781 95.3252 175.241C95.8647 174.702 95.8647 173.854 95.3252 173.315C94.7858 172.775 93.9381 172.775 93.3987 173.315C92.8593 173.854 92.8593 174.702 93.3987 175.241Z" fill="#3468FF"/>
</svg>

'''
'''--- src/assets/images/esccrow-logo.svg ---
<svg width="49" height="47" viewBox="0 0 49 47" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M30.8301 23.677L17.0635 0H31.4374C31.4374 0 37.9134 0.706164 40.6103 6.90257L30.8301 23.677Z" fill="#EC00FF"/>
<path d="M24.2698 12.282L8.25937 39.7983L1.20255 27.6416C1.20255 27.6416 -1.22925 23.6095 1.20255 18.6278L10.038 3.62482C10.038 3.62482 12.4096 -0.171111 17.0949 0.00723784L24.2698 12.282Z" fill="url(#paint0_linear_366_485)"/>
<path d="M24.5999 34.4164L40.6103 6.90015L47.6672 19.0568C47.6672 19.0568 50.099 23.0889 47.6672 28.0706L38.8317 43.0736C38.8317 43.0736 36.4601 46.8695 31.7749 46.6912L24.5999 34.4164Z" fill="url(#paint1_linear_366_485)"/>
<path d="M18.0396 23.0214L31.8062 46.6984H17.4323C17.4323 46.6984 10.9563 45.9922 8.2594 39.7958L18.0396 23.0214Z" fill="#0086FF"/>
<defs>
<linearGradient id="paint0_linear_366_485" x1="12.1961" y1="-6.48088e-05" x2="12.1961" y2="39.7974" gradientUnits="userSpaceOnUse">
<stop stop-color="#EC00FF"/>
<stop offset="1" stop-color="#0086FF"/>
</linearGradient>
<linearGradient id="paint1_linear_366_485" x1="39.7789" y1="4.63531" x2="34.5508" y2="46.1231" gradientUnits="userSpaceOnUse">
<stop stop-color="#EC00FF"/>
<stop offset="1" stop-color="#0086FF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/images/fintechlab-logo.svg ---
<svg width="68" height="11" viewBox="0 0 68 11" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M5.88323 2.7951C5.60557 1.88962 5.24308 1.24638 4.7726 0.891591C4.30058 0.536805 3.60026 0.314677 2.65776 0.248348V0.169678H5.98041V2.7951H5.88323Z" fill="black"/>
<path d="M4.91607 6.09762C4.56591 5.42815 4.03373 5.06103 3.32107 4.99624L2.65623 4.92991V4.85124L3.32107 4.78491C4.00905 4.72012 4.54123 4.35145 4.91607 3.65576H5.01325V6.09608H4.91607V6.09762Z" fill="black"/>
<path d="M15.5706 10.2087V5.36661C15.5706 4.61847 15.2559 4.25134 14.6157 4.25134C14.2779 4.25134 13.9756 4.38246 13.6979 4.65858V4.57991C14.0481 4.00299 14.8456 3.51709 15.7032 3.51709C16.8509 3.51709 17.5635 4.12023 17.5635 5.36661V10.2087H15.5706Z" fill="black"/>
<path d="M23.8894 9.40792C23.2739 8.7909 22.9593 7.95176 22.9593 6.90128C22.9593 5.86469 23.2616 5.05176 23.8539 4.44708C24.4586 3.83006 25.1466 3.52926 25.9194 3.51538V3.59405C25.5693 3.63261 25.3271 3.88251 25.1944 4.31596C25.0741 4.74942 25.0139 5.60091 25.0139 6.84883C25.0139 8.68601 25.7513 9.77505 26.8619 9.77505C27.5021 9.77505 28.0821 9.53904 28.6266 9.07936V9.15803C28.3366 9.56526 27.9494 9.85372 27.4666 10.0496C26.9838 10.2455 26.5118 10.3381 26.0644 10.3381C25.2299 10.3396 24.5049 10.0234 23.8894 9.40792ZM25.6772 6.42926V6.35059C26.7524 6.35059 27.1874 5.96958 27.1874 4.88054C27.1874 4.19873 26.9221 3.66038 26.4022 3.59559V3.51692C27.1396 3.51692 27.7196 3.75293 28.1422 4.21261C28.5649 4.67229 28.77 5.18442 28.77 5.74745C28.77 5.98346 28.7454 6.20713 28.7099 6.42926H25.6772Z" fill="black"/>
<path d="M33.0214 3.59567C32.6466 3.63578 32.3813 3.89801 32.224 4.35615C32.0666 4.81583 31.9941 5.64264 31.9941 6.84891C31.9941 7.75439 32.1761 8.4763 32.5494 9.00077C32.9243 9.5129 33.3824 9.77513 33.9516 9.77513C34.5918 9.77513 35.1718 9.53912 35.7163 9.07944V9.15811C35.4263 9.56534 35.0391 9.8538 34.5563 10.0497C34.0735 10.2456 33.6014 10.3382 33.1541 10.3382C32.3196 10.3382 31.5715 10.0235 30.9066 9.40646C30.2541 8.7771 29.9271 7.93795 29.9271 6.89981C29.9271 6.20412 30.0844 5.58865 30.4115 5.06264C31.0763 3.99982 32.0419 3.5278 33.0214 3.51392V3.59567ZM33.5043 3.517C34.9897 3.517 35.7024 4.16024 35.7024 4.99939C35.7024 5.72131 35.2319 6.25966 34.4946 6.25966C33.9269 6.25966 33.5289 5.86631 33.4441 5.43285C33.7711 5.28785 34.0241 4.82971 34.0241 4.47492C34.0241 3.9628 33.856 3.67434 33.5043 3.60955V3.517Z" fill="black"/>
<path d="M18.3409 3.85484L18.4735 3.65894H22.5813L22.4487 3.85484H18.3409Z" fill="black"/>
<path d="M41.3049 10.1948V5.43448C41.3049 4.65858 40.9918 4.27911 40.3501 4.27911C40.0123 4.27911 39.7099 4.41485 39.4323 4.70023V4.61847C39.7824 4.01996 40.5799 3.51709 41.4376 3.51709C42.5853 3.51709 43.2979 4.14337 43.2979 5.43448V10.1948H41.3049Z" fill="black"/>
<path d="M2.05468 0.169678H0V10.1947H2.05468V0.169678Z" fill="black"/>
<path d="M9.44811 3.65735V10.3366C8.19094 10.3366 7.45514 9.75968 7.45514 8.55186V3.65735H9.44811Z" fill="black"/>
<path d="M13.3245 3.65735V10.3366C12.0689 10.3366 11.3316 9.75968 11.3316 8.55186V3.65735H13.3245Z" fill="black"/>
<path d="M21.3798 0.169678V10.3382C20.1226 10.3382 19.3868 9.76126 19.3868 8.55344V0.169678H21.3798Z" fill="black"/>
<path d="M39.0682 0.169678V10.3366C37.8111 10.3366 37.0753 9.75971 37.0753 8.5519V0.169678H39.0682Z" fill="black"/>
<path d="M8.45011 0.169678C9.10261 0.169678 9.55921 0.583081 9.55921 1.19702C9.55921 1.82329 9.10261 2.2367 8.45011 2.2367C7.79761 2.2367 7.34102 1.82329 7.34102 1.19702C7.34102 0.584624 7.79916 0.169678 8.45011 0.169678Z" fill="black"/>
<path d="M55.7771 5.69348C55.4562 5.69348 55.231 5.8971 55.231 6.19944C55.231 6.50641 55.4562 6.71002 55.7771 6.71002C56.0979 6.71002 56.3231 6.50795 56.3231 6.19944C56.3231 5.8971 56.0979 5.69348 55.7771 5.69348Z" fill="black"/>
<path d="M66.305 5.07808C67.0331 4.60451 67.5036 3.84558 67.5036 2.92468C67.5036 1.40835 66.2047 0.175851 64.5943 0.175851H62.1016H61.6666H61.0634H60.5976V3.65585H61.6666V1.19239H62.1016H64.5943C65.6062 1.19239 66.4346 1.96367 66.4346 2.92468C66.4346 3.89957 65.6062 4.67084 64.5943 4.67084H62.7371V5.68584H64.9938C66.0212 5.68584 66.8341 6.44323 66.8341 7.40579C66.8341 8.38068 66.0212 9.17972 64.9938 9.17972H60.6007H60.2906L56.3617 0.365584C56.263 0.135744 56.0486 0 55.8064 0C55.5781 0 55.3637 0.135744 55.2496 0.365584L51.2837 9.17972H46.3598V0.175851H45.2893V9.61318C45.2893 9.93865 45.5593 10.1947 45.9171 10.1947H50.8271H52.0256L55.8049 1.80016L59.5271 10.1947H60.1549H60.7395H64.9908C66.6027 10.1947 67.9 8.936 67.9 7.40579C67.9016 6.3368 67.2599 5.48377 66.305 5.07808Z" fill="black"/>
<path d="M62.7339 3.65576H61.6649V4.67076H62.7339V3.65576Z" fill="black"/>
</svg>

'''
'''--- src/assets/logo.svg ---
<svg width="50" height="48" viewBox="0 0 50 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M31.2921 24.4664L17.1394 0.125336H31.9165C31.9165 0.125336 38.5741 0.851305 41.3466 7.2215L31.2921 24.4664Z" fill="#EC00FF"/>
<path d="M24.7807 35.2989L41.2401 7.01086L48.4949 19.5084C48.4949 19.5084 50.9949 23.6537 48.4949 28.7751L39.4116 44.1988C39.4116 44.1988 36.9735 48.1012 32.1568 47.9179L24.7807 35.2989Z" fill="url(#paint0_linear_0_1)"/>
<path d="M18.3139 23.5843L32.4666 47.9254H17.6895C17.6895 47.9254 11.0319 47.1994 8.25934 40.8292L18.3139 23.5843Z" fill="#0086FF"/>
<path d="M24.8253 12.7493L8.36585 41.0373L1.11112 28.5397C1.11112 28.5397 -1.38889 24.3945 1.11112 19.2731L10.1944 3.84933C10.1944 3.84933 12.6325 -0.0530629 17.4491 0.130288L24.8253 12.7493Z" fill="url(#paint1_linear_0_1)"/>
<defs>
<linearGradient id="paint0_linear_0_1" x1="37.1934" y1="7.01089" x2="37.1934" y2="47.9241" gradientUnits="userSpaceOnUse">
<stop stop-color="#EC00FF"/>
<stop offset="1" stop-color="#0086FF"/>
</linearGradient>
<linearGradient id="paint1_linear_0_1" x1="12.4126" y1="0.124019" x2="12.4126" y2="41.0373" gradientUnits="userSpaceOnUse">
<stop stop-color="#EC00FF"/>
<stop offset="1" stop-color="#0086FF"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/assets/social/whatsapp.svg ---
<svg width="51" height="51" viewBox="0 0 51 51" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M25.2425 50.9402C39.1836 50.9402 50.485 39.6574 50.485 25.7393C50.485 11.8212 39.1836 0.5383 25.2425 0.5383C11.3015 0.5383 0 11.8212 0 25.7393C0 39.6574 11.3015 50.9402 25.2425 50.9402Z" fill="#00E676"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M36.1499 14.7927C33.2578 11.8998 29.4094 10.3084 25.3048 10.3084C16.8565 10.3084 9.9794 17.1685 9.97371 25.6086C9.97371 28.3026 10.6796 30.9398 12.0175 33.2587L9.84277 41.1873L17.9666 39.0616C20.2039 40.2779 22.7259 40.9201 25.2934 40.9258H25.2991C33.7474 40.9258 40.6245 34.0601 40.6302 25.6256C40.6359 21.5278 39.0419 17.68 36.1499 14.7927ZM25.3048 38.3284C23.0162 38.3284 20.7732 37.7146 18.8149 36.5552L18.348 36.2823L13.5261 37.5441L14.8127 32.8495L14.511 32.372C13.2358 30.3487 12.564 28.0071 12.564 25.6029C12.564 18.5894 18.2797 12.8888 25.3105 12.8888C28.7149 12.8888 31.9143 14.213 34.3167 16.6172C36.7192 19.0213 38.0456 22.2155 38.0456 25.6143C38.0456 32.6221 32.3299 38.3284 25.3048 38.3284ZM32.2957 28.8028C31.9143 28.6095 30.0299 27.6888 29.677 27.5581C29.324 27.433 29.0678 27.3648 28.8174 27.7513C28.5612 28.1321 27.8268 28.996 27.6048 29.2518C27.3827 29.5075 27.1607 29.5416 26.7736 29.3484C26.3922 29.1551 25.1568 28.7516 23.6937 27.4501C22.5551 26.4384 21.7866 25.1823 21.5645 24.8015C21.3425 24.4207 21.5418 24.2104 21.7353 24.0229C21.9061 23.8524 22.1168 23.5739 22.3103 23.3522C22.5039 23.1306 22.5665 22.9714 22.6917 22.7157C22.817 22.4599 22.7544 22.2382 22.6576 22.045C22.5608 21.8517 21.798 19.9705 21.4792 19.2089C21.166 18.4643 20.8529 18.5666 20.6195 18.5553C20.3975 18.5439 20.1413 18.5439 19.8851 18.5439C19.6289 18.5439 19.2134 18.6405 18.8661 19.0213C18.5131 19.4021 17.5282 20.3285 17.5282 22.2098C17.5282 24.0911 18.9002 25.9098 19.0938 26.1656C19.2874 26.4213 21.7923 30.2805 25.635 31.9401C26.5516 32.3323 27.2632 32.571 27.8211 32.7472C28.7377 33.037 29.5745 32.9972 30.2349 32.9006C30.9693 32.7926 32.5007 31.9742 32.8195 31.0819C33.1383 30.1895 33.1383 29.4223 33.0415 29.2631C32.9334 29.0926 32.6772 28.996 32.2957 28.8028Z" fill="white"/>
</svg>

'''
'''--- src/components/Modal/ModalContainer.js ---
import { useState } from "react";
import { ModalView } from "./ModalView";

let showModal;
let hideModal;

export function ModalContainer() {
  const [visible, setVisible] = useState(false);
  const [content, setContent] = useState(undefined);
  showModal = (content) => {
    setVisible(true);
    setContent(content);
  };

  hideModal = () => {
    setVisible(false);
    setContent(undefined);
  };
  return <ModalView visible={visible} content={content} />;
}

export { showModal, hideModal };

'''
'''--- src/components/Modal/index.js ---
export { ModalContainer as Modal } from "./ModalContainer";

'''
'''--- src/components/Modal/styles.js ---
import styled from "styled-components";

export const Modal = styled.div`
  ${(props) => (props.visible ? "display: flex;" : "display: none;")}
  justify-content: center;
  align-items: center;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.5);
`;

export const ModalContent = styled.div`
  width: 882px;
  max-width: 100%;
  background-color: var(--white);
  border-radius: 10px;
  max-height: calc(100vh - 40px);
  overflow-y: auto;
  position: relative;
`;

export const ModalHeader = styled.div``;

export const ModalBody = styled.div`
  padding: 40px 47px;
`;

'''
'''--- src/components/breakpoints.js ---
const breakpoints = {
    xs: '480px',
    sm: '576px',
    md: '768px',
    lg: '992px',
    xl: '1200px',
    xxl: '1600px'
};

export default breakpoints;
'''
'''--- src/components/button/index.js ---
export { ButtonView as Button } from "./ButtonView";

'''
'''--- src/components/button/styles.js ---
import styled from "styled-components";
import * as Font from "../font";

const weights = {
  xs: "400",
  sm: "400",
  md: "400",
  lg: "700",
  xl: "800",
};

const paddings = {
  xs: "7px 13px",
  sm: "7px 13px",
  md: "7px 13px",
  lg: "10px 42px",
  xl: "7px 13px",
};

function getButtonColorStyles(color) {
  const colorStyle = color ?? "secondary";
  const backgroundColor = `var(--${colorStyle})`;
  const fontColor = `var(--${colorStyle + "-co"})`;
  const shadowColor = `var(--${colorStyle + "-sha"})`;
  const styles = `
      background-color: ${backgroundColor};
      color: ${fontColor};
      box-shadow: 0px 2px 4px ${shadowColor};
      & span {
        color: ${fontColor};
      }
    `;
  return styles;
}

function getButtonSizeStyles(size, color) {
  const sizeStyle = size ?? "md";
  const fontSize = Font.sizes[sizeStyle];
  const fontWeight = color === "secondary" ? 400 : weights[sizeStyle];
  const padding = paddings[sizeStyle];
  const styles = `
      font-size: ${fontSize};
      font-weight: ${fontWeight};
      border-radius: 10px;
      padding: ${padding};
    `;
  return styles;
}

export const Button = styled.a`
  font-family: ${Font.primary};
  font-weight: 400;
  color: var(--white);
  text-decoration: none;
  transition: all 0.3s ease-in-out;
  display: flex;
  align-items: center;
  cursor: pointer;
  ${(props) => getButtonColorStyles(props.color)}
  ${(props) => getButtonSizeStyles(props.size, props.color)}
  & > svg {
    margin-right: 5px;
    ${(props) => (props.iconMR ? "margin-right: 0px!important;" : "")}
  }
  &:hover {
    ${(props) =>
      props.color
        ? "background-color: var(--" + props.color + "-up);"
        : "background-color: var(--secondary-up);"}
  }
`;

'''
'''--- src/components/buyerFlow/BuyerFlowContainer.js ---
import { useState, useEffect, useMemo } from "react";
import { BuyerFlowView } from "./BuyerFlowView";
import { hideMenu, showMenu } from "../tab-navigation/TabNavigationView";
import { changeTitle, showSubTitle } from "../../pages/home/HomeView";
import { showModal, hideModal } from "../Modal/ModalContainer";
import { TokenSelector } from "../token-selector";
import { NearService } from "../../services/NearService";
// import { useLocation } from "react-router-dom";
import { validate, validateStep2 } from "./validate";
import { Query } from "../fleek-router/utils/Query";

// function useQuery() {
//   const { search } = useLocation();
//   return useMemo(() => new URLSearchParams(search), [search]);
// }

export function BuyerFlowContainer(props) {
  const [activeStep, setStep] = useState(1);
  const [errors, setErrors] = useState({});
  const [data, setData] = useState({
    transactionId: "",
    tokenId: "",
    contractAddress: "",
    amount: 0,
    sellerWallet: "",
    maxDatePayment: "",
  });
  // // const query = useQuery();
  const query = new Query();
  const nearService = new NearService();

  const validateTransactionStatus = async () => {
    const transactionHashes = query.params.transactionHashes;

    if (!transactionHashes) return;

    const result = await nearService.getTransactionResult(transactionHashes);

    setData({ ...data, transactionId: result.transaction_id });
    changeTitle("Begin a transaction");
    showSubTitle();
    setStep(5);
  };

  const handleClickReset = async () => {
    setData({
      transactionId: "",
      tokenId: "",
      contractAddress: "",
      amount: 0,
      sellerWallet: "",
      maxDatePayment: "",
    });
    showMenu();
    changeTitle(
      "Easiest, safest and most decentralized way to buy and sell NFTs"
    );
    setStep(1);
  };

  const handleSubmitStepOne = async () => {
    const validation = await validate(data);
    if (validation !== undefined) {
      setErrors(validation);
      return;
    }

    setErrors({});
    hideMenu();
    changeTitle("Begin a transaction");
    setStep(2);
  };

  const handleSubmitStepTwo = async () => {
    if (!validateStep2(data)) return;
    changeTitle("Confirm transaction details");
    setStep(3);
  };

  const handleSubmitStepThree = () => {
    changeTitle("Approve payment");
    setStep(4);
  };

  const handleSubmitStepFour = async () => {
    nearService.createTransaction(data);
  };

  const handleChangeData = (patch) => {
    setData({ ...data, ...patch });
  };

  const handleClickSelectTokenBtn = async () => {
    const content = (
      <TokenSelector
        contractAddress={data.contractAddress}
        sellerWallet={data.sellerWallet}
        onSubmitTokenSelector={(tokenId) => {
          handleChangeData({ tokenId });
          hideModal();
        }}
      />
    );
    showModal(content);
  };

  const resumeTransaction = () => {
    const pausedTransaction = JSON.parse(
      localStorage.getItem("new-transaction")
    );
    if (pausedTransaction) {
      changeTitle("Approve payment");
      setStep(4);
      setData(pausedTransaction);
      localStorage.removeItem("new-transaction");
    }
  };

  // const startBuyerFlow = () => {};

  useEffect(() => {
    validateTransactionStatus();
    resumeTransaction();
  }, []);

  return (
    <BuyerFlowView
      step={activeStep}
      data={data}
      errors={errors}
      onChangeData={handleChangeData}
      onSubmitStepOne={handleSubmitStepOne}
      onSubmitStepTwo={handleSubmitStepTwo}
      onSubmitStepThree={handleSubmitStepThree}
      onSubmitStepFour={handleSubmitStepFour}
      onClickSelectTokenBtn={handleClickSelectTokenBtn}
      // startBuyerFlow={startBuyerFlow}
      reset={handleClickReset}
    />
  );
}

'''
'''--- src/components/buyerFlow/index.js ---
export { BuyerFlowContainer as BuyerFlow } from "./BuyerFlowContainer";

'''
'''--- src/components/buyerFlow/styles.js ---
import styled from "styled-components";
import { CopyButton as CopyButtonComponent } from "../copy-button";
import { Row } from "../row";

export const PoweredBlock = styled(Row)`
  align-items: center;
  margin-top: 12px;
  svg {
    margin-left: 5px;
  }
  span {
    font-size: 12px;
    color: var(--black);
  }
`;

export const OneColumn = styled(Row)`
  gap: 30px;
  > div {
    width: 100%;
    background-color: var(--purple);
    padding: 12px 20px;
    border-radius: 6px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.3);
    label {
      font-size: 14px;
      font-weight: 400;
      color: var(--dark);
      margin-bottom: 12px;
    }
    p {
      font-size: 18px;
      font-weight: 600;
      color: var(--dark);
    }
  }
  margin-top: 20px;
`;

export const TwoColumns = styled(Row)`
  gap: 30px;
  margin-top: 20px;
  > div {
    width: 50%;
    background-color: var(--purple);
    padding: 12px 20px;
    border-radius: 6px;
    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.3);
    label {
      font-size: 14px;
      font-weight: 400;
      color: var(--dark);
      margin-bottom: 12px;
    }
    p {
      font-size: 18px;
      font-weight: 600;
      color: var(--dark);
    }
  }
`;

export const Tbl = styled.table`
  background-color: var(--purple-down);
  border-radius: 6px;
  padding: 20px 32px;
`;

export const Th = styled.th`
  font-size: 18px;
  color: var(--dark);
  font-weight: 400;
  text-align: left;
  padding-right: 20px;
  b {
    font-weight: 600;
    font-size: 20px;
  }
`;

export const Tr = styled.tr`
  white-space: nowrap;
`;

export const Td = styled.td`
  font-size: 16px;
  color: var(--dark);
  text-align: right;
  border-bottom: solid 1px rgba(26, 35, 126, 0.3);
  width: 100%;
  padding-top: 9px;
  b {
    font-weight: 600;
    font-size: 18px;
  }
`;

export const WalletBlock = styled.div`
  padding: 20px;
  background-color: var(--purple-down);
  border-radius: 6px;
`;

export const PriceBlock = styled.div`
  padding: 20px;
  background-color: var(--purple-down);
  border-radius: 6px;
  margin-top: 15px;
`;

export const H4 = styled.h4`
  color: var(--dark);
  font-weight: 600;
  font-size: 21px;
`;

export const H5 = styled.h5`
  color: var(--dark);
  font-weight: 600;
  font-size: 18px;
`;

export const BtnWallet = styled.button`
  color: var(--dark);
  background: rgba(52, 104, 255, 0.4);
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.3);
  border-radius: 6px;
  border: 0;
  padding: 6px 20px 4px;
  cursor: pointer;
`;

export const P = styled.p`
  color: var(--text-secondary);
  font-size: 18px;
  margin-top: 20px;
  font-weight: 300;
`;

export const Data = styled.p`
  font-size: 18px;
  color: var(--dark);
  font-weight: 400;
`;

export const Value = styled(Data)`
  font-weight: 500;
`;

export const StepRow = styled(Row)`
  margin-bottom: 8px;
`;

export const StepFiveP = styled.p`
  font-size: 16px;
  color: var(--dark);
  font-weight: 400;
  margin-top: 13px;
  max-width: 440px;
  text-align: center;
`;

export const QrBlock = styled.div`
  margin-top: 17px;
`;

export const UrlBlock = styled.div`
  background: #eaeaea;
  border-radius: 15px;
  width: 458px;
  max-width: 100%;
  padding: 7px 20px 5px;
  margin-top: 20px;
  margin-bottom: 24px;
  position: relative;
`;

export const SocialBlock = styled.div`
  margin-top: 22px;
  width: 100%;
  display: flex;
  justify-content: center;
`;

export const SocialButton = styled.button`
  display: flex;
  flex-direction: column;
  align-items: center;
  border: 0;
  background-color: transparent;
  cursor: pointer;
  label {
    font-size: 10px;
    margin-top: 5px;
  }
`;

export const TokenIdBtn = styled.button`
  background-color: var(--purple);
  height: 47px;
  margin-top: auto;
  border: 0;
  border-radius: 6px;
  width: 140px;
  color: var(--dark);
  font-size: 14px;
  font-weight: 400;
  cursor: pointer;
`;

export const CloseButton = styled.button`
  background-color: transparent;
  cursor: pointer;
  padding: 5px;
  border: 0;
  position: absolute;
  right: 20px;
  top: 20px;
`;

export const CopyButton = styled(CopyButtonComponent)`
  position: absolute;
  right: 20px;
`;

'''
'''--- src/components/buyerFlow/validate.js ---
import { NearService } from "../../services/NearService";

function isEmpty(value) {
  if (!value || value.trim() === "") return true;
  return false;
}

export function validateStep2({ tokenId }) {
  if (isEmpty(tokenId)) {
    return false;
  }
  return true;
}

export async function validate({ contractAddress, sellerWallet }) {
  const nearService = new NearService();
  const errors = {};

  if (isEmpty(contractAddress)) {
    errors.contractAddress = "You must put a contract address";
  }

  if (isEmpty(sellerWallet)) {
    errors.sellerWallet = "You must put a seller wallet";
  }

  if (!(await nearService.isAnAccount(sellerWallet))) {
    errors.sellerWallet = "Please put a valid seller wallet";
  }

  if (!(await nearService.isAContract(contractAddress))) {
    errors.contractAddress = "Please put a valid contract address";
  }

  if (Object.keys(errors).length === 0) {
    return undefined;
  }

  return errors;
}

'''
'''--- src/components/color.js ---
/* Primary Colors */
export const primary = "rgba(0, 134, 255, 1)";
export const primaryCo = "rgba(255, 255, 255, 1)";
export const primaryUp = "rgba(0, 114, 255, 1)";
export const primarySha = "rgba(0, 0, 0, 0.3)";
export const secondary = "blue";
export const secondaryUp = "blue";
/* Info Colors */
export const info = "rgb(181, 220, 255)";
export const infoCo = "rgb(26, 35, 126)";
export const infoSha = "rgba(0, 134, 255, 0.29)";
export const infoUp = "rgb(181, 200, 255)";
/* Accent Colors */
export const accent = "rgba(236, 0, 255, 1)";
export const accentCo = "rgba(255, 255, 255, 1)";
export const accentSha = "rgba(0, 0, 0, 0.3)";
export const accentUp = "rgba(216, 0, 255, 1)";
/* Text Secondary */
export const textSecondary = "rgba(131, 131, 131, 1)";
/* General */
export const dark = "rgba(26, 35, 126, 1)";
export const white = "rgb(255, 255, 255)";
export const success = "purple";
export const skyblue = "rgba(232, 244, 255, 1)";

'''
'''--- src/components/column/index.js ---
export { ColumnView as Column } from "./ColumnView";

'''
'''--- src/components/column/styles.js ---
import styled from "styled-components";

export const Column = styled.div`
  display: flex;
  flex-direction: column;
  ${(props) => (props.width ? "width: " + props.width + ";" : "")}
  ${(props) => (props.ml ? "margin-left: " + props.ml + ";" : "")}
  ${(props) => (props.mt ? "margin-top: " + props.mt + ";" : "")}
  ${(props) => (props.pt ? "padding-top: " + props.pt + ";" : "")}
  ${(props) => (props.pb ? "padding-bottom: " + props.pb + ";" : "")}
  ${(props) => (props.pl ? "padding-left: " + props.pl + ";" : "")}
  ${(props) =>
    props.alignItems ? "align-items: " + props.alignItems + ";" : ""}
`;

'''
'''--- src/components/container/index.js ---
export { ContainerView as Container } from "./ContainerView";

'''
'''--- src/components/container/styles.js ---
import styled from "styled-components";
import Breakpoints from "../breakpoints";

function size(size) {
  let sizeStyles = "";
  if (size === "md") {
    sizeStyles = `max-width: 864px!important;`;
  }
  return sizeStyles;
}

export const Container = styled.div`
  margin-right: auto;
  margin-left: auto;
  padding: 0 12px;
  ${(props) => (props.size ? size(props.size) : "")}

  @media (min-width: ${Breakpoints.md}) {
    padding: 0 32px;
  }

  @media (min-width: ${Breakpoints.lg}) {
    padding: 0;
    width: 896px;
  }

  @media (min-width: ${Breakpoints.xl}) {
    width: 1152px;
  }

  @media (min-width: ${Breakpoints.xxl}) {
    width: 1440px;
  }
`;

'''
'''--- src/components/content/index.js ---
export { ContentView as Content } from "./ContentView";

'''
'''--- src/components/content/styles.js ---
import styled from "styled-components";
import breakpoints from "../breakpoints";

export const Content = styled.div`
  padding-left: 12px;
  padding-right: 12px;
  @media (min-width: ${breakpoints.xs}) {
    padding-left: 82px;
    padding-right: 82px;
  }
`;

'''
'''--- src/components/copy-button/index.js ---
import { ReactComponent as CopySVG } from "../../assets/icons/copy.svg";
import { Button } from "./styles";

export function CopyButton({ className, text }) {
  const copy = () => {
    navigator.clipboard.writeText(text);
  };
  return (
    <Button className={className} onClick={copy}>
      <CopySVG />
    </Button>
  );
}

'''
'''--- src/components/copy-button/styles.js ---
import styled from "styled-components";

export const Button = styled.button`
  border: 0;
  padding: 0;
  cursor: pointer;
  background-color: transparent;
`;

'''
'''--- src/components/fleek-router/FleekRouter.js ---
import { useState, isValidElement, Children, cloneElement } from "react";
import { Query } from "./utils/Query";

let navigate;

export function FleekRouter({ children }) {
  const query = new Query();
  const [page, setPage] = useState(query.params.page);

  const childrenWithProps = Children.map(children, (child) => {
    if (isValidElement(child)) {
      return cloneElement(child, { page });
    }
    return child;
  });

  navigate = (page, params = {}) => {
    query.setParams({ page, ...params });
    setPage(page);
  };

  return <>{childrenWithProps}</>;
}

export { navigate };

'''
'''--- src/components/fleek-router/Link.js ---
import { navigate } from "./FleekRouter";

export function Link({ className, children, to, foreign }) {
  if (foreign) {
    return (
      <a className={className} href={to} target="_blank">
        {children}
      </a>
    );
  } else {
    return (
      <a
        className={className}
        onClick={() => {
          navigate(to);
        }}
      >
        {children}
      </a>
    );
  }
}

'''
'''--- src/components/fleek-router/Route.js ---
export function Route({ element }) {
  return element;
}

'''
'''--- src/components/fleek-router/Routes.js ---
import { Children } from "react";

export function Routes({ children, page }) {
  const getDefaultRoute = () => {
    return Children.toArray(children).find((route) => route.props.index);
  };

  const getSelectedRoute = () => {
    return Children.toArray(children).find(
      (route) => route.props.page === page
    );
  };

  const getRoute = () => {
    if (!page) {
      return getDefaultRoute();
    }
    return getSelectedRoute();
  };

  return getRoute();
}

'''
'''--- src/components/fleek-router/index.js ---
export { FleekRouter } from "./FleekRouter";
export { Routes } from "./Routes";
export { Route } from "./Route";
export { navigate } from "./FleekRouter";

'''
'''--- src/components/fleek-router/utils/Query.js ---
export class Query {
  static instance;
  urlSearchParams;
  params;

  constructor() {
    if (Query.instance) {
      return Query.instance;
    }
    this.init();
    Query.instance = this;
  }

  init() {
    this.urlSearchParams = new URLSearchParams(window.location.search);
    this.updateParams();
  }

  updateParams() {
    this.params = Object.fromEntries(this.urlSearchParams.entries());
  }

  cleanParams() {
    for (let param in this.params) {
      this.urlSearchParams.delete(param);
    }
  }

  setParams(params) {
    this.cleanParams();
    for (let param in params) {
      this.urlSearchParams.set(param, params[param]);
    }
    this.updateParams();
    const paramsStr = this.urlSearchParams.toString();
    window.history.pushState(
      "",
      "",
      `${window.location.pathname}?${paramsStr}`
    );
  }
}

'''
'''--- src/components/font.js ---
export const primary = 'SuiseIntl, sans-serif';
export const sizes = {
    xs: '14px',
    sm: '14px',
    md: '14px',
    lg: '20px',
    xl: '14px'
};
'''
'''--- src/components/footer/index.js ---
export { FooterView as Footer } from "./FooterView";

'''
'''--- src/components/footer/styles.js ---
import styled from "styled-components";

export const Footer = styled.footer`
  border-top: 0.5px solid rgba(131, 131, 131, 0.5);
  padding-top: 18px;
  padding-bottom: 18px;

  & .footer-content {
    justify-content: space-between;

    & span,
    & a {
      color: var(--text-secondary-perpetuo);
    }
    & ul {
      display: flex;
      list-style: none;
      gap: 20px;
      & a {
        text-decoration: none;
      }
    }
  }
`;

'''
'''--- src/components/header/index.js ---
export { HeaderView as Header } from "./HeaderView";

'''
'''--- src/components/header/styles.js ---
import styled from "styled-components";

export const Header = styled.header`
  padding: 25px 0px;
  border-bottom: 0.5px solid rgba(131, 131, 131, 0.5);
`;

'''
'''--- src/components/icons.js ---
import { ReactComponent as NearWhite } from "../assets/icons/32px/near-white.svg";

export { ReactComponent as Wallet } from "../assets/icons/20px/wallet.svg";
export { ReactComponent as Moon } from "../assets/icons/24px/moon.svg";
export { ReactComponent as Sun } from "../assets/icons/24px/sun.svg";
export { ReactComponent as Near } from "../assets/icons/20px/near.svg";
export { ReactComponent as Bulb } from "../assets/icons/24px/bulb.svg";
export { ReactComponent as ChevronDown } from "../assets/icons/20px/chevron-down.svg";
export { ReactComponent as Near2 } from "../assets/icons/near.svg";

// export { Wallet, Moon, Near, NearWhite };
export const test = NearWhite;

'''
'''--- src/components/input/index.js ---
export { InputTextView as InputText } from "./InputTextView";
export { InputDateView as InputDate } from "./InputDateView";
export { InputNumberView as InputNumber } from "./InputNumberView";
export { InputCheckboxView as InputCheckbox } from "./InputCheckboxView";

'''
'''--- src/components/input/styles.js ---
import styled from "styled-components";

export const Label = styled.label`
  font-size: 22px;
  font-weight: 600;
  text-indent: 8px;
  color: var(--dark);
`;
export const Input = styled.input`
  background-color: transparent;
  font-size: 18px;
  font-weight: 300;
  padding: 8px;
  border: 0;
  border-bottom: solid 1px var(--dark);
  color: var(--dark);
  max-width: calc(100% - 50px);
  width: 100%;
  ${(props) => (props.error ? "border-color: red;" : "")}

  &:focus-visible {
    outline: 0;
  }

  &::placeholder {
    color: var(--placeholder);
  }
`;
export const CheckboxLabel = styled.label`
  font-size: 14px;
  font-weight: 400;
  color: var(--dark);
  display: flex;
  align-items: center;
  input {
    margin-right: 5px;
    width: auto;
  }
  a {
    color: var(--dark);
  }
  ${(props) => (props.mt ? "margin-top: " + props.mt + ";" : "")}
`;

'''
'''--- src/components/logo/index.js ---
export { LogoView as Logo } from "./LogoView";

'''
'''--- src/components/logo/styles.js ---
import styled from "styled-components";
import { ReactComponent as LogoSVG } from "../../assets/images/esccrow-logo.svg";

export const Span = styled.span`
  font-family: LTWave;
  color: var(--dark);
  letter-spacing: -1px;
  font-size: 40px;
  line-height: 40px;
  margin-top: -6px;
`;

export const LogoImg = styled(LogoSVG)`
  margin-right: 15px;
`;

'''
'''--- src/components/menu-item/index.js ---
export { MenuItemView as MenuItem } from "./MenuItemView";

'''
'''--- src/components/menu-item/styles.js ---
import styled from "styled-components";
import * as Font from "../font";
// import { Link } from "react-router-dom";
import { Link } from "../fleek-router/Link";

// export const STLink = styled(Link)`
export const STLink = styled(Link)`
  font-family: ${Font.primary};
  text-decoration: none;
  font-weight: 400;
  color: var(--dark);
  font-size: 17px;
`;

export const ListItem = styled.li`
  padding: 0px 40px;
  cursor: pointer;
`;

'''
'''--- src/components/navbar/NavbarContainer.js ---
import { useState } from "react";
import { NavbarView } from "./NavbarView";
import { UtilService } from "../../services/UtilService";
import { NearService } from "../../services/NearService";

export function NavbarContainer({ className, chilchen }) {
  const utilService = new UtilService();
  const nearService = new NearService();
  const [themeMode, setThemeMode] = useState(utilService.getThemeMode());
  const walletUserText = nearService.isSigned()
    ? nearService.wallet.getAccountId()
    : "Connect Wallet";

  const handleChangeMode = () => {
    if (themeMode === "dark") {
      utilService.setThemeMode("light");
    } else {
      utilService.setThemeMode("dark");
    }
    setThemeMode(utilService.getThemeMode());
  };

  return (
    <NavbarView
      onChangeMode={handleChangeMode}
      walletUserText={walletUserText}
      themeMode={themeMode}
      onClickLogin={async () => {
        if (!nearService.isSigned()) {
          nearService.signIn();
        }
        // await nearService.signIn();
      }}
    />
  );
}

'''
'''--- src/components/navbar/index.js ---
export { NavbarContainer as Navbar } from "./NavbarContainer";

'''
'''--- src/components/navbar/styles.js ---
import styled from "styled-components";
import { Row } from "../row";

export const MenuNav = styled.ul`
  text-decoration: none;
  padding: 0;
  list-style: none;
  display: none;
  margin: 0px auto;

  @media (min-width: 1200px) {
    display: flex;
  }
`;

export const Toolbar = styled(Row)`
  margin-left: auto;
  & a span {
    display: none;
  }
  & a svg {
    margin-right: 0px;
  }
  @media (min-width: 1200px) {
    margin-left: inherit;
    & a svg {
      margin-right: 5px;
    }
    & a span {
      display: inline-block;
    }
  }
`;

'''
'''--- src/components/receive-nft-modal/index.js ---
import { useState, useEffect } from "react";
import { hideModal } from "../Modal/ModalContainer";
import { ModalContent } from "../Modal/styles";
import {
  CloseBtn,
  CloseImg,
  Title,
  SubTitle,
  ModalBody,
  CongratsImg,
  AwaitImg,
} from "./styles";
import { Button } from "../../components/button";
import { NearService } from "../../services/NearService";

export function ReceiveNFTModal({
  transactionId,
  seeMoreDetails,
  refreshTransactions,
}) {
  const [transaction, setTransaction] = useState({});
  const nearService = new NearService();

  const handleClickWithdraw = async () => {
    await nearService.collectNFT(transaction);
    refreshTransactions();
    hideModal();
  };

  const getAction = () => {
    const { transaction_status } = transaction;
    if (transaction_status === "Payed") {
      return (
        <Button size="lg" color="accent" onClick={handleClickWithdraw}>
          Withdraw
        </Button>
      );
    } else {
      return (
        <Button
          size="lg"
          color="accent"
          onClick={() => {
            seeMoreDetails();
          }}
        >
          See more details
        </Button>
      );
    }
  };

  useEffect(async () => {
    const result = await nearService.getTransactionById(transactionId);
    setTransaction(result);
  }, []);

  return (
    <ModalContent>
      <CloseBtn onClick={() => hideModal()}>
        <CloseImg></CloseImg>
      </CloseBtn>
      <ModalBody>
        <Title>
          {transaction.transaction_status === "Payed"
            ? "Congratulations!"
            : "Your transaction"}
        </Title>
        <SubTitle>
          {transaction.transaction_status === "Payed"
            ? "your NFT is available"
            : "is waiting for approvement"}
        </SubTitle>
        {transaction.transaction_status === "Payed" ? (
          <CongratsImg />
        ) : (
          <AwaitImg />
        )}
        {getAction()}
      </ModalBody>
    </ModalContent>
  );
}

'''
'''--- src/components/receive-nft-modal/styles.js ---
import styled from "styled-components";
import { ReactComponent as CloseSvg } from "../../assets/icons/close.svg";
import { ModalBody as ModalBodyComp } from "../Modal/styles";
import { ReactComponent as CongratsSVG } from "../../assets/images/congrats.svg";
import { ReactComponent as AwaitSVG } from "../../assets/images/await.svg";

export const CloseBtn = styled.button`
  border: 0;
  background: transparent;
  position: absolute;
  right: 20px;
  top: 30px;
  cursor: pointer;
`;

export const CloseImg = styled(CloseSvg)``;

export const Title = styled.h3`
  font-size: 31px;
  font-weight: 700;
  color: var(--dark);
  text-align: center;
`;

export const SubTitle = styled.h4`
  font-size: 22px;
  font-weight: 400;
  color: var(--dark);
  text-align: center;
`;

export const ModalBody = styled(ModalBodyComp)`
  display: flex;
  flex-direction: column;
  align-items: center;
`;

export const CongratsImg = styled(CongratsSVG)`
  margin-top: 25px;
  margin-bottom: 25px;
`;

export const AwaitImg = styled(AwaitSVG)`
  margin-top: 25px;
  margin-bottom: 25px;
`;

'''
'''--- src/components/receive-tokens-modal/index.js ---
import { hideModal } from "../Modal/ModalContainer";
import { ModalContent } from "../Modal/styles";
import {
  CloseBtn,
  CloseImg,
  Title,
  SubTitle,
  ModalBody,
  CongratsImg,
} from "./styles";
import { Button } from "../../components/button";
import { NearService } from "../../services/NearService";
import { navigate } from "../fleek-router";

export function ReceiveTokensModal({ transaction }) {
  const nearService = new NearService();

  const handleClickWithdraw = async () => {
    await nearService.collectTransaction(transaction);
    hideModal();
    navigate("transactions");
  };

  return (
    <ModalContent>
      <CloseBtn onClick={() => hideModal()}>
        <CloseImg></CloseImg>
      </CloseBtn>
      <ModalBody>
        <Title>Congratulations!</Title>
        <SubTitle>your NEARs are available</SubTitle>
        <CongratsImg />
        <Button size="lg" color="accent" onClick={handleClickWithdraw}>
          Withdraw
        </Button>
      </ModalBody>
    </ModalContent>
  );
}

'''
'''--- src/components/receive-tokens-modal/styles.js ---
import styled from "styled-components";
import { ReactComponent as CloseSvg } from "../../assets/icons/close.svg";
import { ModalBody as ModalBodyComp } from "../Modal/styles";
import { ReactComponent as CongratsSVG } from "../../assets/images/congrats.svg";

export const CloseBtn = styled.button`
  border: 0;
  background: transparent;
  position: absolute;
  right: 20px;
  top: 30px;
  cursor: pointer;
`;

export const CloseImg = styled(CloseSvg)``;

export const Title = styled.h3`
  font-size: 31px;
  font-weight: 700;
  color: var(--dark);
  text-align: center;
`;

export const SubTitle = styled.h4`
  font-size: 22px;
  font-weight: 400;
  color: var(--dark);
  text-align: center;
`;

export const ModalBody = styled(ModalBodyComp)`
  display: flex;
  flex-direction: column;
  align-items: center;
`;

export const CongratsImg = styled(CongratsSVG)`
  margin-top: 25px;
  margin-bottom: 25px;
`;

'''
'''--- src/components/row/index.js ---
export { RowView as Row } from "./RowView";

'''
'''--- src/components/row/styles.js ---
import styled from "styled-components";

function alignItems(alignItems) {
  let alignItemsStyles = "";
  switch (alignItems) {
    case "center":
      alignItemsStyles = "align-items: center;";
      break;
    case "baseline":
      alignItemsStyles = "align-items: baseline;";
      break;
    default:
      break;
  }
  return alignItemsStyles;
}

function gap(gap) {
  let gapStyles = "";
  if (gap) {
    gapStyles = `gap: ${gap};`;
  }
  console.log(gapStyles);
  return gapStyles;
}

export const Row = styled.div`
  display: flex;
  --bs-gutter-x: 1.5rem;
  --bs-gutter-y: 0;
  flex-direction: row;
  ${(props) => (props.alignItems ? gap(props.gap) : "")}
  ${(props) => (props.alignItems ? alignItems(props.alignItems) : "")}  
  ${(props) => (props.pt ? "padding-top: " + props.pt + ";" : "")}
  ${(props) => (props.pb ? "padding-bottom: " + props.pb + ";" : "")}
  ${(props) => (props.mt ? "margin-top: " + props.mt + ";" : "")}
  ${(props) => (props.mb ? "margin-bottom: " + props.mb + ";" : "")}
  ${(props) => (props.ml ? "margin-left: " + props.ml + ";" : "")}
  ${(props) =>
    props.justifyContent
      ? "justify-content: " + props.justifyContent + ";"
      : ""}
`;

'''
'''--- src/components/select/index.js ---
export { SelectView as Select } from "./SelectView";

'''
'''--- src/components/select/styles.js ---
import styled from "styled-components";
import { Row } from "../row";

export const Select = styled(Row)`
  border-radius: 6px;
  background-color: var(--purple);
  max-height: 57px;
  margin-top: auto;
  padding: 10px 15px;
  align-items: center;
  max-width: 110px;
  min-width: 110px;
  span {
    font-size: 13px;
    line-height: 1em;
    color: var(--dark);
  }
  span:nth-child(2) {
    font-size: 10px;
    opacity: 0.8;
  }
  .text {
    margin-left: 8px;
  }
  svg {
    ellipse {
      fill: #f1f5ff;
    }
  }
  .chevron {
    margin-left: auto;
  }
`;

'''
'''--- src/components/sellerFlow/index.js ---
export { SellerFlow } from "./sellerFlow";

'''
'''--- src/components/sellerFlow/sellerFlow.js ---
import { useMemo, useEffect, useState } from "react";
import { useLocation } from "react-router-dom";
import { NearService } from "../../services/NearService";
import { formatNearAmount } from "near-api-js/lib/utils/format";

function useQuery() {
  const { search } = useLocation();

  return useMemo(() => new URLSearchParams(search), [search]);
}

export function SellerFlow() {
  const [transaction, setTransaction] = useState(undefined);
  const nearService = new NearService();
  const query = useQuery();

  const onStart = async () => {
    if (!query.has("transactionId")) return;
    getTransaction();
  };

  const checkIfTokenBelongsToEsccrow = async () => {
    if (
      !query.has("transactionId") ||
      !query.has("transactionHashes") ||
      !transaction ||
      transaction.transaction_status === "change_to_nft_locked" ||
      transaction.transaction_status !== "TokensLocked" ||
      !(await nearService.belonsToEsccrow(
        transaction.nft_contract_id,
        transaction.nft_id
      ))
    )
      return;

    setTransaction({
      ...transaction,
      transaction_status: "change_to_nft_locked",
    });
  };

  const getTransaction = async () => {
    const transactionId = query.get("transactionId");

    if (!transactionId) return;
    const result = await nearService.getTransactionById(transactionId);
    console.log(result);
    setTransaction(result);
  };

  const handleClickSendToken = () => {
    nearService.sendToken(transaction);
  };

  const handleClickLockToken = () => {
    nearService.lockToken(transaction);
  };

  const handleClickCollect = () => {
    nearService.collectTransaction(transaction);
  };

  const getStatusElm = () => {
    if (transaction.transaction_status === "TokensLocked") {
      return <button onClick={handleClickSendToken}>send token</button>;
    } else if (transaction.transaction_status === "change_to_nft_locked") {
      return <button onClick={handleClickLockToken}>Check NFT</button>;
    } else if (transaction.transaction_status === "TokensAndNFTLocked") {
      return <button onClick={handleClickCollect}>Collect</button>;
    } else return transaction.transaction_status;
  };

  const getTransactionRow = () => {
    if (!transaction) return "";

    const { transaction_id, nft_id, price } = transaction;
    const parsePrice = formatNearAmount(
      price.toLocaleString("es-PE").replace(/,/g, ""),
      4
    );

    return (
      <tr>
        <td>{transaction_id}</td>
        <td>{nft_id}</td>
        <td>Seller</td>
        <td>{parsePrice}</td>
        <td>Near</td>
        <td>{getStatusElm()}</td>
      </tr>
    );
  };

  useEffect(() => {
    onStart();
  }, []);

  useEffect(() => {
    checkIfTokenBelongsToEsccrow();
  }, [transaction]);

  return (
    <>
      <table>
        <thead>
          <tr>
            <th>TRX</th>
            <th>Token ID</th>
            <th>Role</th>
            <th>Amount</th>
            <th>Currency</th>
            <th>Status</th>
          </tr>
        </thead>
        <tbody>{getTransactionRow()}</tbody>
      </table>
    </>
  );
}

'''
'''--- src/components/stepbar/index.js ---
export { StepbarView as Stepbar } from "./StepbarView";

'''
'''--- src/components/stepbar/styles.js ---
import styled from "styled-components";

export const List = styled.ul`
  display: flex;
  justify-content: center;
  margin-top: 20px;
  margin-bottom: 30px;
  gap: 50px;
`;

export const Item = styled.li`
  width: 28px;
  height: 28px;
  border-radius: 50%;
  display: inline-flex;
  justify-content: center;
  align-items: center;
  color: var(--white);
  position: relative;
  font-size: 16px;
  ::after {
    content: "";
    display: block;
    position: absolute;
    width: 50px;
    height: 5px;
    left: 100%;
    top: calc(50% - 2.5px);
    ${(props) =>
      props.active
        ? "background-color: var(--purple-up)"
        : "background-color: #e5e3e3;"}
  }
  :nth-last-child(1)::after {
    display: none;
  }
  ${(props) =>
    props.active
      ? "background-color: var(--purple-up)"
      : "background-color: #e5e3e3;"}
`;

'''
'''--- src/components/tab-navigation-item/index.js ---
export { TabNavigationItemView as TabNavigationItem } from "./TabNavigationItemView";

'''
'''--- src/components/tab-navigation-item/styles.js ---
import styled from "styled-components";
import { Content } from "../content";

export const TabNavigationItem = styled(Content)``;

'''
'''--- src/components/tab-navigation/index.js ---
export { TabNavigationView as TabNavigation } from "./TabNavigationView";

'''
'''--- src/components/tab-navigation/styles.js ---
import styled from "styled-components";
import { Content } from "../content";

export const TabNavigationContainer = styled.div`
  box-shadow: 0px 6px 20px rgba(0, 0, 0, 0.28);
  border-radius: 10px;
  margin-top: 45px;
  background-color: var(--bg-white);
`;

export const MenuItem = styled.li`
  padding: 24px 47px 19px;
  font-size: 24px;
  font-weight: 400;
  cursor: pointer;
  border-bottom: solid 5px transparent;
  color: var(--dark);
  ${(props) =>
    props.active ? "border-color: var(--dark);font-weight: 500;" : ""}
`;

export const MenuContainer = styled(Content)`
  border-bottom: solid 1px var(--dark);
  ${(props) => (!props.menuIsVisible ? "display: none!important;" : "")}
`;

export const Menu = styled.ul`
  display: flex;
  list-style: none;
`;

export const TabContent = styled.div`
  position: relative;
`;

'''
'''--- src/components/text/index.js ---
export { H1, Text, H3 } from "./styles";

'''
'''--- src/components/text/styles.js ---
import styled from "styled-components";

function align(align) {
  let alignStyles = "";
  if (align) {
    alignStyles = `text-align: ${align};`;
  }
  return alignStyles;
}

export const H1 = styled.h1`
  font-size: 41px;
  color: var(--dark);
  ${(props) => (props.align ? align(props.align) : "")}
`;

export const H3 = styled.h3`
  font-size: 20px;
  font-weight: 500;
  ${(props) => (props.align ? align(props.align) : "")}
`;

export const Text = styled.p`
  font-size: 26px;
  ${(props) => (props.align ? align(props.align) : "")}
  color: var(--text-secondary);
`;

'''
'''--- src/components/token-selector/index.js ---
export { TokenSelector } from "./TokenSelector";

'''
'''--- src/components/token-selector/styles.js ---
import styled from "styled-components";
import * as Icons from "../icons";
import { ReactComponent as CloseSvg } from "../../assets/icons/close.svg";

export const NearIcon = styled(Icons.Near)`
  margin-right: 3px;
  width: 12px;
  height: 12px;
`;

export const Title = styled.h2`
  font-size: 28px;
  font-weight: 500;
  color: var(--dark);
`;

export const SubTitle = styled.h3`
  font-size: 20px;
  font-weight: 400;
  color: var(--dark);
  margin-bottom: 12px;
`;

export const TokenList = styled.div`
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(176px, 1fr));
  grid-gap: 20px;
`;

export const Token = styled.div`
  margin-bottom: 28px;
  position: relative;
  ${(props) =>
    props.selected
      ? `
    &::after {
      content: "";
      display: block;
      background: rgba(0, 134, 255, 0.1);
      border-radius: 10px;
      position: absolute;
      z-index: 1;
      top: -10px;
      left: -10px;
      width: calc(100% + 20px);
      height: calc(100% + 20px);
    }    
    `
      : ""}
`;

export const TokenImg = styled.img`
  width: 100%;
  height: 117px;
  object-fit: contain;
  background-color: rgba(196, 196, 196, 1);
`;

export const TokenTitle = styled.h5`
  font-size: 14px;
  font-weight: 500;
  color: var(--dark);
`;

export const TokenCaption = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;

export const NearSlug = styled.label`
  font-size: 10px;
  color: var(--dark);
  background-color: var(--info);
  border-radius: 10px;
  padding: 6px 5px 4px;
  display: inline-flex;
  align-items: center;
`;

export const CloseBtn = styled.button`
  border: 0;
  background: transparent;
  position: absolute;
  right: 20px;
  top: 30px;
  cursor: pointer;
`;

export const CloseImg = styled(CloseSvg)``;

'''
'''--- src/config.js ---
export const _CONFIG_ = {
  networkId: process.env.REACT_APP_NETWORK_ID,
  nodeUrl: process.env.REACT_APP_NODE_URL,
  esccrowContractId: process.env.REACT_APP_ESCCROW_CONTRACT_ID,
  walletUrl: process.env.REACT_APP_WALLET_URL,
  helperUrl: process.env.REACT_APP_HELPER_URL,
  explorerUrl: process.env.REACT_APP_EXPLORE_URL,
  url: process.env.REACT_APP_URL,
};

'''
'''--- src/index.css ---
@import "./assets/css/fonts.css";
@import "./assets/css/colors.css";

* {
  padding: 0;
  margin: 0;
  font-family: "SuiseIntl";
}

input[type=number] { -moz-appearance:textfield; }

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="./assets/favicon.svg" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="apple-touch-icon" href="./assets/logo.svg" />
  <title>Esccrow</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  <script src="./index.js"></script>
</body>

</html>
'''
'''--- src/index.js ---
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";
import { NearService } from "./services/NearService";

const nearService = new NearService();
nearService.connect().then(() => {
  ReactDOM.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>,
    document.getElementById("root")
  );
});

'''
'''--- src/pages/home/index.js ---
export { HomeView as Home } from "./HomeView";

'''
'''--- src/pages/home/styles.js ---
import styled from "styled-components";
import { Text } from "../../components/text";
import { Content } from "../../components/content";
import { Row } from "../../components/row";

export const SubTitle = styled(Text)`
  margin-top: 20px;
  ${(props) => (!props.subTitleVisibility ? "display: none!important;" : "")}
`;

export const Reminder = styled(Content)`
  background-color: var(--sky-blue);
  border-radius: 10px;
  padding-top: 20px;
  padding-bottom: 25px;
  margin-top: 25px;
  ${(props) => (!props.reminderVisibility ? "display: none!important;" : "")}
  h3 {
    color: var(--dark);
  }
  svg {
    margin-right: 8px;
  }
  svg path {
    fill: var(--dark);
  }
`;

export const List = styled.ul`
  padding-left: 20px;
`;

export const Item = styled.li`
  font-size: 16px;
  color: var(--dark);
`;

export const PoweredBlock = styled(Row)`
  align-items: center;
  margin-top: 12px;
  svg {
    margin-left: 5px;
  }
  span {
    font-size: 12px;
    color: var(--black);
  }
`;

'''
'''--- src/pages/layout/index.js ---
export { LayoutView as Layout } from "./LayoutView";

'''
'''--- src/pages/layout/styles.js ---
import styled from "styled-components";

export const Main = styled.main`
  padding: 32px 0;
  min-height: calc(100vh - 220px);
`;

'''
'''--- src/pages/transaction/styles.js ---
import styled from "styled-components";
import { DataComponent } from "./utils";
import { Table } from "../../components/table";
import { CopyButton as CopyButtonComponent } from "../../components/copy-button";

export const Title = styled.h3`
  font-size: 28px;
  font-weight: 600;
  color: var(--dark);
`;

export const Header = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  border-bottom: solid 1px rgba(131, 131, 131, 1);
  padding-bottom: 13px;
`;

export const TimeBlock = styled.div`
  width: 434px;
`;

export const Data = styled(DataComponent)`
  display: flex;
  justify-content: space-between;
  width: 100%;
  span {
    font-size: 18px;
    color: var(--dark);
  }
  &:nth-child(1) {
    margin-bottom: 8px;
  }
`;

export const Table2 = styled(Table)`
  margin-top: 30px;
  width: 100%;
  td {
    font-size: 24px;
    font-weight: 400;
    color: var(--dark);
    font-style: normal;
    position: relative;
  }
  td b {
    font-size: 18px;
    font-weight: 600;
    color: var(--dark);
  }
  td div {
    padding-bottom: 40px;
    display: flex;
    align-items: center;
  }
  td span {
    display: block;
    align-items: center;
    max-width: 263px;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
  }
`;

export const Table1 = styled(Table)`
  margin-top: 50px;
  th,
  td {
    color: var(--dark);
    padding: 5px 50px 5px 0px;
    text-align: left;
  }
  th {
    font-size: 21px;
    font-weight: 600;
  }
  td {
    font-size: 26px;
    font-weight: 400;
  }
  td div {
    display: flex;
    align-items: center;
  }
`;

export const Card = styled.div`
  margin-top: 50px;
  box-shadow: 0px 6px 20px rgba(0, 0, 0, 0.28);
  border-radius: 10px;
  padding: 0 32px;
`;

export const CardHeader = styled.div`
  border-bottom: 1px solid rgba(131, 131, 131, 0.7);
  padding: 25px 12px 17px;
`;

export const CardTitle = styled.h4`
  font-size: 24px;
  font-weight: 600;
  color: var(--dark);
`;

export const CardBody = styled.div`
  padding-bottom: 60px;
`;

export const MaxTime = styled.p`
  color: var(--dark);
  font-size: 24px;
  font-weight: 400;
`;

export const Confirm = styled.p`
  color: var(--dark);
  font-size: 16px;
  font-weight: 400;
  margin-top: 18px;
`;

export const ButtonBlock = styled.div`
  display: flex;
  gap: 50px;
  margin-top: 25px;
`;

export const CopyButton = styled(CopyButtonComponent)`
  margin-left: 15px;
`;

'''
'''--- src/pages/transactions/styles.js ---
import styled from "styled-components";
import { Link as RRLink } from "react-router-dom";

export const Title = styled.h1`
  font-size: 41px;
  font-weight: 700;
  color: var(--dark);
`;

export const StatusFilter = styled.ul`
  display: flex;
  list-style: none;
  margin-top: 30px;
  border-bottom: solid 1px rgba(131, 131, 131, 1);
`;

export const StatusFilterItm = styled.li`
  font-size: 21px;
  font-weight: 600;
  padding: 16px 20px;
  color: var(--dark);
  &:nth-child(1) {
    padding-left: 0px;
  }
`;

export const FilterBlock = styled.div`
  display: flex;
  justify-content: space-between;
  margin-top: 30px;
  align-items: baseline;
`;

export const SearchBlock = styled.div`
  display: flex;
`;

export const SearchIpt = styled.input`
  border-radius: 15px;
  width: 605px;
  background-color: var(--purple-down);
  padding: 12px 20px;
  border: 0;
  margin-right: 28px;
  &:focus-visible {
    outline: 0;
  }
`;

export const FilterBtn = styled.button`
  border: 0;
  border-radius: 10px;
  background-color: var(--purple-down);
  padding: 12px 20px;
  color: var(--dark);
  cursor: pointer;
`;

export const TransactionsCount = styled.div`
  color: var(--dark);
`;

export const Table = styled.table`
  margin-top: 32px;
  width: 100%;
  border-spacing: 0;
  thead tr {
    background-color: var(--purple-down);
  }
  th {
    font-size: 21px;
    font-weight: 600;
    color: var(--dark);
    padding: 25px 29px;
  }
  td {
    font-size: 18px;
    color: var(--dark);
    text-align: center;
    padding: 20px 12px 22px;
    border-bottom: 1px solid rgba(131, 131, 131, 0.7);
  }
  tbody tr td:nth-child(1) {
    text-decoration: underline;
    cursor: pointer;
  }
`;

export const RefreshButton = styled.button`
  cursor: pointer;
  background-color: var(--purple-down);
  border: 0;
  font-size: 18px;
  font-weight: 400;
  color: var(--dark);
  box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.3);
  border-radius: 6px;
  padding: 5px 25px 4px;
`;

export const Link = styled(RRLink)`
  color: var(--dark);
`;

'''
'''--- src/services/NearService.js ---
import { connect, keyStores, WalletConnection, Contract } from "near-api-js";
import {
  parseNearAmount,
  formatNearAmount,
} from "near-api-js/lib/utils/format";
import * as buffer from "buffer";
import { _CONFIG_ } from "../config";

const config = {
  networkId: _CONFIG_.networkId,
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: _CONFIG_.nodeUrl,
  walletUrl: _CONFIG_.walletUrl,
  helperUrl: _CONFIG_.helperUrl,
  explorerUrl: _CONFIG_.explorerUrl,
};

export class NearService {
  static instance;

  constructor() {
    if (NearService.instance) {
      return NearService.instance;
    }
    window.Buffer = buffer.Buffer;
    NearService.instance = this;
  }

  async connect() {
    if (!this.near) {
      this.near = await connect(config);
      this.wallet = new WalletConnection(this.near);
    }
  }

  async signIn() {
    this.wallet.requestSignIn(
      _CONFIG_.esccrowContractId, // contract requesting access
      "Esccrow", // optional
      _CONFIG_.url, // optional
      _CONFIG_.url // optional
    );
  }

  async belonsToEsccrow(contract_id, nft_id) {
    const contract = new Contract(this.wallet.account(), contract_id, {
      viewMethods: ["nft_token"],
      sender: this.wallet.account(),
    });

    return contract.nft_token({
      token_id: nft_id,
    });
  }

  async getNFTByContract(contract_id, owner_account_id) {
    const contract = new Contract(this.wallet.account(), contract_id, {
      viewMethods: ["nft_tokens_for_owner"],
      sender: this.wallet.account(),
    });

    return contract.nft_tokens_for_owner({
      account_id: owner_account_id,
    });
  }

  async getNFTById(nft_contract_id, nft_id) {
    const contract = new Contract(this.wallet.account(), nft_contract_id, {
      viewMethods: ["nft_token"],
      sender: this.wallet.account(),
    });

    const params = { token_id: nft_id };

    return contract.nft_token(params);
  }

  async sendToken({ nft_id, nft_contract_id, transaction_id }) {
    const contract = new Contract(this.wallet.account(), nft_contract_id, {
      changeMethods: ["nft_transfer_call"],
      sender: this.wallet.account(),
    });

    const params = {
      receiver_id: _CONFIG_.esccrowContractId,
      token_id: nft_id,
      msg: String(transaction_id),
    };

    contract.nft_transfer_call(params, "200000000000000", "1");
  }

  async getTransferTokenResult(transactionHashes) {
    const result = await this.near.connection.provider.txStatus(
      transactionHashes,
      this.wallet.getAccountId()
    );
    return result;
  }

  async getTransactionResult(transactionHashes) {
    const result = await this.near.connection.provider.txStatus(
      transactionHashes,
      this.wallet.getAccountId()
    );
    return JSON.parse(atob(result.status.SuccessValue));
  }

  async lockToken({ transaction_id, nft_contract_id, nft_id }) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        changeMethods: ["is_nft_locked"],
        sender: this.wallet.account(),
      }
    );

    const params = { transaction_id, nft_contract_id, token_id: nft_id };
    contract.is_nft_locked(params, undefined, undefined);
  }

  async cancelTransaction({ transaction_id }) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        changeMethods: ["cancel_transaction"],
        sender: this.wallet.account(),
      }
    );
    const params = { transaction_id };
    return contract.cancel_transaction(params, undefined, undefined);
  }

  async collectTransaction({ transaction_id }) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        changeMethods: ["pay_transaction"],
        sender: this.wallet.account(),
      }
    );

    const params = { transaction_id };
    return contract.pay_transaction(params, undefined, undefined);
  }

  async collectNFT({ transaction_id }) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        changeMethods: ["transfer_nft"],
        sender: this.wallet.account(),
      }
    );

    const params = { transaction_id };
    return contract.transfer_nft(params, undefined, undefined);
  }

  async createTransaction({ sellerWallet, amount, tokenId, contractAddress }) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        changeMethods: ["create_transaction"],
        sender: this.wallet.account(),
      }
    );

    const params = {
      seller_id: sellerWallet,
      buyer_id: this.wallet.getAccountId(),
      price: Number(amount * 1),
      nft_id: tokenId,
      nft_contract_id: contractAddress,
    };

    const deposit = String(amount * 1 + 0.1);
    contract.create_transaction(params, undefined, parseNearAmount(deposit));
  }

  isSigned() {
    return this.wallet.isSignedIn();
  }

  async isAnAccount(account_id) {
    try {
      await this.near.connection.provider.query({
        request_type: "view_account",
        finality: "final",
        account_id,
      });
      return true;
    } catch (err) {
      return false;
    }
  }

  async isAContract(contract_id) {
    try {
      await this.near.connection.provider.query({
        request_type: "view_code",
        finality: "final",
        account_id: contract_id,
      });
      return true;
    } catch (err) {
      return false;
    }
  }

  async getTransactionById(transactionId) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        viewMethods: ["get_transaction_by_id"],
        sender: this.wallet.account(),
      }
    );
    const params = { transaction_id: Number(transactionId) };
    return contract.get_transaction_by_id(params);
  }

  parseYoctoToNears(yocto) {
    const numberStr = Number(yocto).toLocaleString("fullwide", {
      useGrouping: false,
    });
    return formatNearAmount(numberStr, 2);
  }

  getTransactionsByAccount(fromIndex, limit) {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        viewMethods: ["get_transactions_by_account"],
        sender: this.wallet.account(),
      }
    );

    const params = {
      account_id: this.wallet.getAccountId(),
      from_index: String(fromIndex),
      limit,
    };

    return contract.get_transactions_by_account(params);
  }

  getNumberOfTransactionsByAccount() {
    const contract = new Contract(
      this.wallet.account(),
      _CONFIG_.esccrowContractId,
      {
        viewMethods: ["get_number_of_transactions_by_account"],
        sender: this.wallet.account(),
      }
    );

    const params = {
      account_id: this.wallet.getAccountId(),
    };

    return contract.get_number_of_transactions_by_account(params);
  }
}

'''
'''--- src/services/UtilService.js ---
export class UtilService {
  static instancia;

  constructor() {
    if (!!UtilService.instancia) {
      return UtilService.instancia;
    }
    UtilService.instancia = this;
  }

  setThemeMode(mode) {
    localStorage.setItem("themeMode", mode);
    if (this.changeThemeListeners) {
      this.changeThemeListeners.forEach((callback) => {
        callback(mode);
      });
    }
  }

  listenChangeThemeMode(callback) {
    if (this.changeThemeListeners) {
      this.changeThemeListeners.push(callback);
    } else {
      this.changeThemeListeners = [callback];
    }
  }

  getThemeMode() {
    const lsThemeMode = localStorage.getItem("themeMode");
    if (!lsThemeMode) {
      if (
        window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches
      ) {
        return "dark";
      } else {
        return "light";
      }
    } else {
      return lsThemeMode;
    }
  }
}

'''
'''--- src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''