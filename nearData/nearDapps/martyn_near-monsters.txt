*GitHub Repository "martyn/near-monsters"*

'''--- Cargo.toml ---
[package]
name = "near_monsters"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]

'''
'''--- README.md ---
![NEAR Monsters logo](logo.jpeg)

# About

NEAR Monsters is a collectible trading card game on the NEAR blockchain.

# Mainnet

NEAR Monsters ALPHA sale is LIVE on mainnet. There are 25,000 limited edition packs for sale at 4 NEAR each.

Check it out at [nearmonsters.com](https://nearmonsters.com)

# Testing

NEAR Monsters is currently deployed to the testnet. To open testnet ALPHA packs:

1. Create or login to a testnet NEAR account
2. Navigate to [https://test.near.org/monstersdev.testnet/widget/purchase](https://test.near.org/monstersdev.testnet/widget/purchase)
3. Register & purchase 1 or more packs
4. Navigate to open packs
5. Open your ALPHA pack
6. You will receive 5 NEP-0171 NFT collectibles in your wallet randomly selected out of 198 different options

# Project components

## contracts-alpha

Contains the FT contract for ALPHA packs.

## contracts-nfts

NFT contract for the opened cards.

## bos-frontend

React frontend for purchasing and opening packs.

# License

MIT

'''
'''--- bos-frontend/build.sh ---
#!/bin/bash

# Ensure the build/src directory exists, or create it
mkdir -p build/src

# Loop over each .jsx file in the src directory
for src_file in src/*.jsx; do
  # Extract the filename without the path
  file_name=$(basename "$src_file")

  # Create or truncate the output file
  : > "build/src/$file_name"

  # Read the source file line by line
  while IFS= read -r line; do
		# Append the original line to the output file
		echo "$line" >> "build/src/$file_name"
    # Check if the line contains "//include "
    if [[ "$line" == "//include "* ]]; then
      # Extract the name of the file to be included
      include_name="${line#//include }"

      # Check if the file exists in the includes directory and concatenate its contents to the output file
      if [ -f "includes/$include_name.jsx" ]; then
        cat "includes/$include_name.jsx" >> "build/src/$file_name"
      else
        echo "Warning: includes/$include_name.jsx does not exist."
      fi
    fi

  done < "$src_file"
done

echo "Build complete. Files in build/src/ have been dynamically prepended based on '//include [name]' directives."

'''
'''--- bos-frontend/deploy-prod.sh ---
#!/bin/bash
json_data=$(cat ~/.near-credentials/mainnet/monsters-bos.near.json)
BOS_SIGNER_PUBLIC_KEY=$(echo $json_data | jq -r '.public_key')
BOS_SIGNER_PRIVATE_KEY=$(echo $json_data | jq -r '.private_key')

./build.sh
(cd build && bos components deploy monsters-bos.near sign-as monsters-bos.near network-config mainnet sign-with-plaintext-private-key --signer-public-key "$BOS_SIGNER_PUBLIC_KEY" --signer-private-key "$BOS_SIGNER_PRIVATE_KEY" send)

'''
'''--- bos-frontend/deploy.sh ---
#!/bin/bash
json_data=$(cat ~/.near-credentials/testnet/monstersdev.testnet.json)
BOS_SIGNER_PUBLIC_KEY=$(echo $json_data | jq -r '.public_key')
BOS_SIGNER_PRIVATE_KEY=$(echo $json_data | jq -r '.private_key')

./build.sh
(cd build && bos components deploy monstersdev.testnet sign-as monstersdev.testnet network-config testnet sign-with-plaintext-private-key --signer-public-key "$BOS_SIGNER_PUBLIC_KEY" --signer-private-key "$BOS_SIGNER_PRIVATE_KEY" send)

'''
'''--- contracts-alpha/Cargo.toml ---
[package]
name = "contracts-alpha"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[dependencies]
near-contract-standards = { git = "https://github.com/near/near-sdk-rs.git", branch = "master", package = "near-contract-standards" }
near-sdk = { git = "https://github.com/near/near-sdk-rs.git", branch = "master", package = "near-sdk" }
near-sdk-macros = { git = "https://github.com/near/near-sdk-rs.git", branch = "master", package = "near-sdk-macros" }
serde = { version = "1.0.188", features = ["derive"] }

[features]
use_prod_chain = []

'''
'''--- contracts-alpha/build-prod.sh ---
#!/bin/bash

RUSTFLAGS='-C link-arg=-s' cargo build --features "use_prod_chain" --target wasm32-unknown-unknown --release

'''
'''--- contracts-alpha/build.sh ---
#!/bin/bash

RUSTFLAGS='-C link-arg=-s' cargo build --target wasm32-unknown-unknown --release

'''
'''--- contracts-alpha/deploy-prod.sh ---
#!/bin/bash

./build-prod.sh && NEAR_ENV=mainnet near deploy monsters-alpha.near target/wasm32-unknown-unknown/release/contracts_alpha.wasm

'''
'''--- contracts-alpha/deploy.sh ---
#!/bin/bash
#cargo build --all --target wasm32-unknown-unknown --release && near deploy monsters.test.near target/wasm32-unknown-unknown/release/contracts.wasm
./build.sh && near dev-deploy target/wasm32-unknown-unknown/release/contracts_alpha.wasm

'''
'''--- contracts-alpha/neardev/dev-account.env ---
CONTRACT_NAME=dev-1693882284306-75813657022630
'''
'''--- contracts-alpha/src/lib.rs ---
use near_contract_standards::fungible_token::metadata::{
    FungibleTokenMetadata, FungibleTokenMetadataProvider, FT_METADATA_SPEC,
};
use near_contract_standards::fungible_token::{
    FungibleToken, FungibleTokenCore, FungibleTokenResolver,
};
use near_contract_standards::storage_management::{
    StorageBalance, StorageBalanceBounds, StorageManagement,
};
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LazyOption;
use near_sdk::json_types::U128;
use near_sdk::{
    env, log, near_bindgen, require, AccountId, BorshStorageKey, PanicOnDefault, Balance, Promise, PromiseOrValue, ONE_NEAR, serde_json, Gas
};

#[cfg(feature = "use_prod_chain")]
const MONSTERS_NFT_CONTRACT: &str = "monsters-nfts.near";

#[cfg(not(feature = "use_prod_chain"))]
const MONSTERS_NFT_CONTRACT: &str = "dev-1697387315613-37447934459971";

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    token: FungibleToken,
    metadata: LazyOption<FungibleTokenMetadata>,
}

const DATA_IMAGE_SVG_NEAR_ICON: &str = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 288 288'%3E%3Cg id='l' data-name='l'%3E%3Cpath d='M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z' fill='%23AABBCD'/%3E%3Ccircle cx='144' cy='144' r='15' fill='%23000'/%3E%3Ccircle cx='180' cy='108' r='7' fill='%23000'/%3E%3Ccircle cx='108' cy='108' r='7' fill='%23000'/%3E%3Cpath d='M120,168c15,10 48,10 65,0' fill='none' stroke='%23000' stroke-width='3'/%3E%3Cpath d='M130,175l-10,30' fill='none' stroke='%23000' stroke-width='3'/%3E%3Cpath d='M160,175l10,30' fill='none' stroke='%23000' stroke-width='3'/%3E%3C/g%3E%3C/svg%3E";

#[derive(BorshSerialize, BorshStorageKey)]
enum StorageKey {
    FungibleToken,
    Metadata,
}

#[near_bindgen]
impl Contract {
    const CARDS_PER_PACK: U128 = U128(5);
    const TOTAL_SUPPLY: U128 = U128(25000);
    const NEAR_COST_PER_PACK: u128 = 4*ONE_NEAR;
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        Self::new(
            owner_id,
            FungibleTokenMetadata {
                spec: FT_METADATA_SPEC.to_string(),
                name: "NEAR Monsters ALPHA packs".to_string(),
                symbol: "MONSTERS_ALPHA".to_string(),
                icon: Some(DATA_IMAGE_SVG_NEAR_ICON.to_string()),
                reference: None,
                reference_hash: None,
                decimals: 0,
            },
        )
    }

    #[init]
    pub fn new(owner_id: AccountId, metadata: FungibleTokenMetadata) -> Self {
        require!(!env::state_exists(), "Already initialized");
        metadata.assert_valid();
        let mut this = Self {
            token: FungibleToken::new(StorageKey::FungibleToken),
            metadata: LazyOption::new(StorageKey::Metadata, Some(&metadata)),
        };
        let total_supply = Self::TOTAL_SUPPLY;
        this.token.internal_register_account(&owner_id);
        this.token.internal_deposit(&owner_id, total_supply.into());

        near_contract_standards::fungible_token::events::FtMint {
            owner_id: &owner_id,
            amount: &total_supply,
            memo: Some("ALPHA has been created."),
        }
        .emit();

        this
    }

    #[payable]
    pub fn purchase(&mut self) {
        let buyer_id = env::predecessor_account_id();
        let buyer_deposit = env::attached_deposit();
        let num_packs = buyer_deposit / Self::NEAR_COST_PER_PACK;
        assert!(num_packs > 0, "You must purchase at least 1 pack at {} NEAR per pack.", Self::NEAR_COST_PER_PACK / ONE_NEAR);
        let refund_amount = buyer_deposit % Self::NEAR_COST_PER_PACK;
        let sender_id = env::current_account_id();
        log!("Sending {} packs from {} to {}", num_packs, buyer_id, sender_id);
        let amount: Balance = num_packs.into();
        let memo = format!("Purchase of {} MONSTER ALPHA packs for {} NEAR", num_packs, num_packs * Self::NEAR_COST_PER_PACK / ONE_NEAR);
        log!(memo);
        
        self.token.internal_transfer(&sender_id, &buyer_id, amount, Some(memo));
        log!("Sent {} packs with {} refund", num_packs, refund_amount);
        if refund_amount > 0 {
            Promise::new(buyer_id.clone())
                .transfer(refund_amount);
        }
    }

    #[payable]
    pub fn open_pack(&mut self) {
        let num_packs = U128(1); //Limit to 1 for now
        let sender_id = &env::predecessor_account_id();
        let receiver_id = AccountId::new_unchecked("system".into());
        let mint_gas = env::prepaid_gas() - Gas(100000000000000); //TODO

        let memo = "Open pack";
        self.token.internal_transfer(&sender_id, &receiver_id, num_packs.into(), Some(memo.into()));
        let mint_promise = env::promise_create(
            AccountId::new_unchecked(MONSTERS_NFT_CONTRACT.into()),
            "mint_random",
            &serde_json::to_vec(&(Self::CARDS_PER_PACK,sender_id)).unwrap(),
            10000000000000000000000,
            mint_gas,
        );
        env::promise_return(mint_promise)
    }
}

#[near_bindgen]
impl FungibleTokenCore for Contract {
    #[payable]
    fn ft_transfer(&mut self, receiver_id: AccountId, amount: U128, memo: Option<String>) {
        self.token.ft_transfer(receiver_id, amount, memo)
    }

    #[payable]
    fn ft_transfer_call(
        &mut self,
        receiver_id: AccountId,
        amount: U128,
        memo: Option<String>,
        msg: String,
    ) -> PromiseOrValue<U128> {
        self.token.ft_transfer_call(receiver_id, amount, memo, msg)
    }

    fn ft_total_supply(&self) -> U128 {
        self.token.ft_total_supply()
    }

    fn ft_balance_of(&self, account_id: AccountId) -> U128 {
        self.token.ft_balance_of(account_id)
    }
}

#[near_bindgen]
impl FungibleTokenResolver for Contract {
    #[private]
    fn ft_resolve_transfer(
        &mut self,
        sender_id: AccountId,
        receiver_id: AccountId,
        amount: U128,
    ) -> U128 {
        let (used_amount, burned_amount) =
            self.token.internal_ft_resolve_transfer(&sender_id, receiver_id, amount);
        if burned_amount > 0 {
            log!("Account @{} burned {}", sender_id, burned_amount);
        }
        used_amount.into()
    }
}

#[near_bindgen]
impl StorageManagement for Contract {
    #[payable]
    fn storage_deposit(
        &mut self,
        account_id: Option<AccountId>,
        registration_only: Option<bool>,
    ) -> StorageBalance {
        self.token.storage_deposit(account_id, registration_only)
    }

    #[payable]
    fn storage_withdraw(&mut self, amount: Option<U128>) -> StorageBalance {
        self.token.storage_withdraw(amount)
    }

    #[payable]
    fn storage_unregister(&mut self, force: Option<bool>) -> bool {
        #[allow(unused_variables)]
        if let Some((account_id, balance)) = self.token.internal_storage_unregister(force) {
            log!("Closed @{} with {}", account_id, balance);
            true
        } else {
            false
        }
    }

    fn storage_balance_bounds(&self) -> StorageBalanceBounds {
        self.token.storage_balance_bounds()
    }

    fn storage_balance_of(&self, account_id: AccountId) -> Option<StorageBalance> {
        self.token.storage_balance_of(account_id)
    }
}

#[near_bindgen]
impl FungibleTokenMetadataProvider for Contract {
    fn ft_metadata(&self) -> FungibleTokenMetadata {
        self.metadata.get().unwrap()
    }
}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::{testing_env, Balance};

    use super::*;

    const TOTAL_SUPPLY: Balance = 25000;

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    #[test]
    fn test_new() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = Contract::new_default_meta(accounts(1).into());
        testing_env!(context.is_view(true).build());
        assert_eq!(contract.ft_total_supply().0, TOTAL_SUPPLY);
        assert_eq!(contract.ft_balance_of(accounts(1)).0, TOTAL_SUPPLY);
    }

    #[test]
    #[should_panic(expected = "The contract is not initialized")]
    fn test_default() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let _contract = Contract::default();
    }

    #[test]
    fn test_transfer() {
        let mut context = get_context(accounts(2));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(2).into());
        testing_env!(context
                     .storage_usage(env::storage_usage())
                     .attached_deposit(contract.storage_balance_bounds().min.into())
                     .predecessor_account_id(accounts(1))
                     .build());
        // Paying for account registration, aka storage deposit
        contract.storage_deposit(None, None);

        testing_env!(context
                     .storage_usage(env::storage_usage())
                     .attached_deposit(1)
                     .predecessor_account_id(accounts(2))
                     .build());
        let transfer_amount = TOTAL_SUPPLY / 3;
        contract.ft_transfer(accounts(1), transfer_amount.into(), None);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert_eq!(contract.ft_balance_of(accounts(2)).0, (TOTAL_SUPPLY - transfer_amount));
        assert_eq!(contract.ft_balance_of(accounts(1)).0, transfer_amount);
    }

    #[test]
    #[should_panic(expected ="You must purchase at least 1 pack at 4 NEAR per pack.")]
    fn test_purchase() {
        let mut context = get_context(accounts(3));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(3).into());
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(0)
            .predecessor_account_id(accounts(1))
            .build());
        contract.purchase();
    }

    #[test]
    fn test_purchase_one() {
        let buyer_account = accounts(1);
        let contract_account = accounts(0);
        let mut context = get_context(buyer_account.clone());
        testing_env!(context.build());
        let mut contract:Contract = Contract::new_default_meta(contract_account.clone()).into();
        let refund_amount = 9;

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(4*ONE_NEAR + refund_amount)
            .predecessor_account_id(buyer_account.clone())
            .build());
        contract.storage_deposit(Some(buyer_account.clone()), None);
        contract.purchase();
        assert_eq!(contract.ft_balance_of(buyer_account.clone()), U128(1));
        assert_eq!(contract.ft_balance_of(contract_account.clone()), U128(24999));
    }

}

'''
'''--- contracts-nfts/Cargo.toml ---
[package]
name = "contracts-nfts"
version = "0.1.0"
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
crate-type = ["cdylib"]

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[dependencies]
near-contract-standards = { git = "https://github.com/near/near-sdk-rs.git", branch = "master", package = "near-contract-standards" }
near-sdk = { git = "https://github.com/near/near-sdk-rs.git", branch = "master", package = "near-sdk" }
near-sdk-macros = { git = "https://github.com/near/near-sdk-rs.git", branch = "master", package = "near-sdk-macros" }
serde = { version = "1.0.188", features = ["derive"] }
csv = "1.1"

[build-dependencies]
csv = "1.1"

[features]
use_prod_chain = []

'''
'''--- contracts-nfts/build-prod.sh ---
#!/bin/bash

RUSTFLAGS='-C link-arg=-s' cargo build --features "use_prod_chain" --target wasm32-unknown-unknown --release

'''
'''--- contracts-nfts/build.rs ---
extern crate csv;

use std::fs::File;
use std::path::Path;
use std::io::Write;

fn main() {
    // Define output path
    let out_dir = "src";
    let dest_path = Path::new(&out_dir).join("generated_data.rs");
    let mut f = File::create(&dest_path).unwrap();

    writeln!(f, "use near_sdk::serde::Deserialize;").unwrap();
    writeln!(f, "use near_sdk::serde::Serialize;").unwrap();
    writeln!(f, "#[derive(Debug, Clone, Serialize, Deserialize, PartialEq, Eq)]").unwrap();
    writeln!(f, "#[cfg_attr(feature = \"abi\", derive(schemars::JsonSchema))]").unwrap();
    writeln!(f, "#[serde(crate = \"near_sdk::serde\")]").unwrap();

    let mut rdr = csv::Reader::from_path("cards.csv").unwrap();

    // Extract headers from CSV to dynamically generate the struct
    let headers = rdr.headers().unwrap();
    writeln!(f, "pub struct NFTCardTemplate<'a> {{").unwrap();
    for header in headers.iter() {
        writeln!(f, "    pub {}: &'a str,", header).unwrap();
    }
    writeln!(f, "}}\n").unwrap();
    let mut rdr = csv::Reader::from_path("cards.csv").unwrap();
    let record_count = rdr.records().count();

    let mut rdr = csv::Reader::from_path("cards.csv").unwrap();
    writeln!(f, "const NFT_CARDS: [NFTCardTemplate; {}] = [", record_count).unwrap();

    // Populate struct instances dynamically using headers
    for result in rdr.records() {
        let record = result.unwrap();

        write!(f, "    NFTCardTemplate {{").unwrap();
        for (index, header) in headers.iter().enumerate() {
            let value = &record[index];
            write!(f, "        {}: \"{}\",", header, value).unwrap();
        }
        writeln!(f, "    }},").unwrap();
    }

    writeln!(f, "];").unwrap();

    writeln!(f, "pub fn get_nft_card_list<'a>() -> &'a [NFTCardTemplate<'a>] {{").unwrap();
    writeln!(f, "    &NFT_CARDS").unwrap();
    writeln!(f, "}}").unwrap();
}

'''
'''--- contracts-nfts/build.sh ---
#!/bin/bash

cargo build --all --target wasm32-unknown-unknown --release
#cp $TARGET/wasm32-unknown-unknown/release/defi.wasm ./res/
#cp $TARGET/wasm32-unknown-unknown/release/fungible_token.wasm ./res/

'''
'''--- contracts-nfts/deploy-prod.sh ---
#!/bin/bash
./build-prod.sh && NEAR_ENV=mainnet near deploy monsters-nfts.near target/wasm32-unknown-unknown/release/contracts_nfts.wasm

'''
'''--- contracts-nfts/deploy.sh ---
#!/bin/bash
./build.sh && near dev-deploy target/wasm32-unknown-unknown/release/contracts_nfts.wasm

'''
'''--- contracts-nfts/src/lib.rs ---
use std::collections::HashMap;
use near_contract_standards::non_fungible_token::metadata::{
    NFTContractMetadata, NonFungibleTokenMetadataProvider, TokenMetadata, NFT_METADATA_SPEC,
};
use near_sdk::collections::LookupMap;
use near_contract_standards::non_fungible_token::NonFungibleToken;
use near_contract_standards::non_fungible_token::{Token, TokenId};
use near_contract_standards::non_fungible_token::approval::NonFungibleTokenApproval;
use near_contract_standards::non_fungible_token::core::{NonFungibleTokenCore, NonFungibleTokenResolver};
use near_contract_standards::non_fungible_token::enumeration::NonFungibleTokenEnumeration;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LazyOption;
use near_sdk::{
    env, log, near_bindgen, require, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue, ONE_NEAR
};
use near_sdk::json_types::U128;
use near_sdk::env::random_seed;
use near_sdk::serde_json;

fn get_current_datetime() -> String {
    // Get the current block timestamp in nanoseconds.
    let timestamp_ns = env::block_timestamp();
    
    // Convert nanoseconds to seconds.
    let timestamp_s = timestamp_ns / 1_000_000_000;
    
    // Calculate the remaining nanoseconds after the seconds are accounted for.
    let remaining_ns = timestamp_ns % 1_000_000_000;

    //#TODO This is not actually iso8601. Adding chronos library causes smart contract panick.
    let datetime_str = format!("{}.{:09}Z", timestamp_s, remaining_ns);
    
    datetime_str
}

fn get_token_id(card_id:&str, card_count:u64) -> String {
    format!("{}:{}", card_id, card_count)
}

include!("generated_data.rs");

pub fn get_nft_cards_by_rarity<'a>(rarity: &str) -> Vec<NFTCardTemplate<'a>> {
    get_nft_card_list()
        .iter()
        .filter(|&card| card.rarity == rarity)
        .cloned()
        .collect()
}

pub fn get_land_nft_cards<'a>() -> Vec<NFTCardTemplate<'a>> {
    get_nft_cards_by_rarity("Land")
}

pub fn get_rare_nft_cards<'a>() -> Vec<NFTCardTemplate<'a>> {
    get_nft_cards_by_rarity("Rare")
}

pub fn get_uncommon_nft_cards<'a>() -> Vec<NFTCardTemplate<'a>> {
    get_nft_cards_by_rarity("Uncommon")
}

pub fn get_common_nft_cards<'a>() -> Vec<NFTCardTemplate<'a>> {
    get_nft_cards_by_rarity("Common")
}

pub fn get_nft_card_map<'a>() -> HashMap<String, NFTCardTemplate<'a>> {
    let mut nft_card_map: HashMap<String, NFTCardTemplate> = HashMap::new();
    for card in NFT_CARDS.iter().cloned() {
        let id_str = card.id.to_string();
        nft_card_map.insert(id_str, card);
    }
    nft_card_map
}

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    tokens: NonFungibleToken,
    metadata: LazyOption<NFTContractMetadata>,
    copies_by_card_id: Option<LookupMap<String, u64>>,
}

const DATA_IMAGE_SVG_NEAR_ICON: &str = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 288 288'%3E%3Cg id='l' data-name='l'%3E%3Cpath d='M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z' fill='%23AABBCD'/%3E%3Ccircle cx='144' cy='144' r='15' fill='%23000'/%3E%3Ccircle cx='180' cy='108' r='7' fill='%23000'/%3E%3Ccircle cx='108' cy='108' r='7' fill='%23000'/%3E%3Cpath d='M120,168c15,10 48,10 65,0' fill='none' stroke='%23000' stroke-width='3'/%3E%3Cpath d='M130,175l-10,30' fill='none' stroke='%23000' stroke-width='3'/%3E%3Cpath d='M160,175l10,30' fill='none' stroke='%23000' stroke-width='3'/%3E%3C/g%3E%3C/svg%3E";

#[derive(BorshSerialize, BorshStorageKey)]
enum StorageKey {
    NonFungibleToken,
    Metadata,
    TokenMetadata,
    Enumeration,
    Approval,
}

#[cfg(feature = "use_prod_chain")]
const MONSTERS_ALPHA_CONTRACT: &str = "monsters-alpha.near";

#[cfg(not(feature = "use_prod_chain"))]
const MONSTERS_ALPHA_CONTRACT: &str = "dev-1693882284306-75813657022630";

#[near_bindgen]
impl Contract {
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: NFT_METADATA_SPEC.to_string(),
                name: "NEAR MONSTERS NFT Collection".to_string(),
                symbol: "MONSTERS".to_string(),
                icon: Some(DATA_IMAGE_SVG_NEAR_ICON.to_string()),
                base_uri: None,
                reference: None,
                reference_hash: None,
            },
        )
    }

    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        require!(!env::state_exists(), "Already initialized");
        metadata.assert_valid();
        Self {
            tokens: NonFungibleToken::new(
                StorageKey::NonFungibleToken,
                owner_id,
                Some(StorageKey::TokenMetadata),
                Some(StorageKey::Enumeration),
                Some(StorageKey::Approval),
            ),
            metadata: LazyOption::new(StorageKey::Metadata, Some(&metadata)),
            copies_by_card_id: Some(LookupMap::new(b"m"))
        }
    }

    #[payable]
    pub fn mint_random(&mut self, amount: U128, token_owner_id: AccountId) -> Vec<Token> {
        assert_eq!(env::predecessor_account_id(), AccountId::new_unchecked(MONSTERS_ALPHA_CONTRACT.into()), "Unauthorized");
        (0..amount.into()).map(|index| {
            let i = index as usize;
            let roll = random_seed()[i*2] as usize;
            let cards = if roll < 8 {
                get_land_nft_cards()
            } else if roll < 35 {
                get_rare_nft_cards()
            } else if roll < 96 {
                get_uncommon_nft_cards()
            } else {
                get_common_nft_cards()
            };

            let card_index = ((random_seed()[i*2+1] as f64 / 256.0) * ((cards.len()-1) as f64)).round() as usize; 
            let card = &cards[card_index];
            let card_count: u64 = match &self.copies_by_card_id {
                Some(copies) => {
                    copies.get(&card.id.to_string()).map_or(1, |count| count + 1)
                },
                None => 1,
            };
            let token_id = get_token_id(card.id, card_count);

            let token_metadata = TokenMetadata {
                title: None,
                description: None,
                media: None,
                media_hash: None,
                copies: None,
                issued_at: Some(get_current_datetime()),
                expires_at: None,
                starts_at: None,
                updated_at: None,
                extra: None,
                reference: None,
                reference_hash: None,
            };

            log!("Creating card with token_id {}", token_id);
            if let Some(copies_count) = &mut self.copies_by_card_id {
                copies_count.insert(&card.id.to_string(), &card_count);
            }
            self.tokens.internal_mint(token_id.into(), token_owner_id.clone(), Some(token_metadata))

        }).collect()
    }

    pub fn full_set_listing(&self) -> Vec<NFTCardTemplate> {
        get_nft_card_list().to_vec()
    }

    fn enrich_token_with_card_data(&self, token: &mut Token) {
        let card_id = token.token_id.split(':')
            .next()
            .map(|s| s.to_string())
            .unwrap();
        let card_count: u64 = match &self.copies_by_card_id {
            Some(copies) => {
                copies.get(&card_id).map_or(1, |count| count)
            },
            None => 1,
        };
        let nft_card_map = get_nft_card_map();
        if let Some(card) = nft_card_map.get(&card_id) {
            let existing_metadata = token.metadata.clone().unwrap_or_default();

            let mut json_value: serde_json::Value = serde_json::to_value(&card).unwrap();
            let obj = json_value.as_object_mut().unwrap();

            obj.remove("name");
            obj.remove("url");
            obj.remove("description");

            let extra = Some(serde_json::to_string(&json_value).unwrap());

            let token_metadata = TokenMetadata {
                title: Some(card.name.to_string()),
                description: Some(card.description.to_string()),
                media: Some(card.url.to_string()),
                media_hash: None,
                copies: Some(card_count),  // we can look this up later
                issued_at: existing_metadata.issued_at,
                expires_at: None,
                starts_at: None,
                updated_at: None,
                extra: extra,
                reference: None,
                reference_hash: None,
            };

            token.metadata = Some(token_metadata);
        }
    }

}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {
    #[payable]
    fn nft_transfer(&mut self, receiver_id: AccountId, token_id: TokenId, approval_id: Option<u64>, memo: Option<String>) {
        self.tokens.nft_transfer(receiver_id, token_id, approval_id, memo);
    }

    #[payable]
    fn nft_transfer_call(&mut self, receiver_id: AccountId, token_id: TokenId, approval_id: Option<u64>, memo: Option<String>, msg: String) -> PromiseOrValue<bool> {
        self.tokens.nft_transfer_call(receiver_id, token_id, approval_id, memo, msg)
    }

    fn nft_token(&self, token_id: TokenId) -> Option<Token> {
        let original_token = self.tokens.nft_token(token_id);

        original_token.map(|mut token| {
            self.enrich_token_with_card_data(&mut token);
            token
        })
    }
}

#[near_bindgen]
impl NonFungibleTokenResolver for Contract {
    #[private]
    fn nft_resolve_transfer(&mut self, previous_owner_id: AccountId, receiver_id: AccountId, token_id: TokenId, approved_account_ids: Option<HashMap<AccountId, u64>>) -> bool {
        self.tokens.nft_resolve_transfer(previous_owner_id, receiver_id, token_id, approved_account_ids)
    }
}

#[near_bindgen]
impl NonFungibleTokenApproval for Contract {
    #[payable]
    fn nft_approve(&mut self, token_id: TokenId, account_id: AccountId, msg: Option<String>) -> Option<Promise> {
        self.tokens.nft_approve(token_id, account_id, msg)
    }

    #[payable]
    fn nft_revoke(&mut self, token_id: TokenId, account_id: AccountId) {
        self.tokens.nft_revoke(token_id, account_id);
    }

    #[payable]
    fn nft_revoke_all(&mut self, token_id: TokenId) {
        self.tokens.nft_revoke_all(token_id);

    }

    fn nft_is_approved(&self, token_id: TokenId, approved_account_id: AccountId, approval_id: Option<u64>) -> bool {
        self.tokens.nft_is_approved(token_id, approved_account_id, approval_id)
    }
}

#[near_bindgen]
impl NonFungibleTokenEnumeration for Contract {
    fn nft_total_supply(&self) -> U128 {
        self.tokens.nft_total_supply()
    }

    fn nft_tokens(&self, from_index: Option<U128>, limit: Option<u64>) -> Vec<Token> {
        let original_tokens = self.tokens.nft_tokens(from_index, limit);

        original_tokens.into_iter().map(|mut token| {
            self.enrich_token_with_card_data(&mut token);
            token
        }).collect()
    }

    fn nft_supply_for_owner(&self, account_id: AccountId) -> U128 {
        self.tokens.nft_supply_for_owner(account_id)
    }

    fn nft_tokens_for_owner(&self, account_id: AccountId, from_index: Option<U128>, limit: Option<u64>) -> Vec<Token> {
        let original_tokens = self.tokens.nft_tokens_for_owner(account_id, from_index, limit);

        original_tokens.into_iter().map(|mut token| {
            self.enrich_token_with_card_data(&mut token);
            token
        }).collect()
    }

}

#[near_bindgen]
impl NonFungibleTokenMetadataProvider for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::testing_env;

    use super::*;

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    #[test]
    fn test_new() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = Contract::new_default_meta(accounts(1).into());
        testing_env!(context.is_view(true).build());
        assert_eq!(contract.nft_token("1".to_string()), None);
    }

    #[test]
    #[should_panic(expected = "The contract is not initialized")]
    fn test_default() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let _contract = Contract::default();
    }

    #[test]
    fn test_mint_random() {
        let account = AccountId::new_unchecked(MONSTERS_ALPHA_CONTRACT.into());
        let mut context = get_context(account.clone());
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(account.clone().into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(false)
            .attached_deposit(ONE_NEAR)
            .build());

        let card = contract.mint_random(1.into(), account.clone());
        assert!(card[0].token_id.ends_with("1"));
        let card = contract.mint_random(1.into(), account.clone());
        assert!(card[0].token_id.ends_with("2"));
        let card = contract.mint_random(1.into(), account.clone());
        assert!(card[0].token_id.ends_with("3"));
        let card = contract.mint_random(5.into(), account.clone());
        assert!(card[0].token_id.ends_with("4"));
        assert!(card[4].token_id.ends_with("8"));
        let card = contract.mint_random(16.into(), account.clone());
    }

    #[test]
    fn test_nft_tokens_enriched() {
        let account = AccountId::new_unchecked(MONSTERS_ALPHA_CONTRACT.into());
        let mut context = get_context(account.clone());
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(account.clone().into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(false)
            .attached_deposit(ONE_NEAR)
            .build());

        contract.mint_random(1.into(), account.clone());
        contract.mint_random(1.into(), account.clone());
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .build());

        let card = &contract.nft_tokens(None, None)[0];
        assert!(card.metadata.clone().unwrap().title != None);
        assert!(card.metadata.clone().unwrap().description != None);
        assert!(card.metadata.clone().unwrap().extra != None);
        assert!(card.metadata.clone().unwrap().copies == Some(2));
    }

    #[test]
    fn test_full_set_listings() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        println!("{:?}", contract.full_set_listing());
        assert!(contract.full_set_listing().len() > 0);
    }
}

'''