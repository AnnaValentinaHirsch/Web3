*GitHub Repository "near/cargo-near-new-project-template"*

'''--- .devcontainer/devcontainer.json ---
{
  "name": "NEAR Devcontainer Rust",

  "image": "ghcr.io/near/near-devcontainer:latest",

  // Uncomment and modify the following lines if necessary
  // "forwardPorts": [8000],
}

'''
'''--- .github/workflows/deploy-production.yml ---
name: Deploy to production
on:
  push:
    branches: [main]

jobs:
  test:
    uses: ./.github/workflows/test.yml

  deploy-staging:
    name: Deploy to production
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install cargo-near CLI
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/cargo-near/releases/download/cargo-near-v0.6.1/cargo-near-installer.sh | sh
      - name: Deploy to production
        run: |
          cargo near deploy "${{ vars.NEAR_CONTRACT_PRODUCTION_ACCOUNT_ID }}" \
            without-init-call \
            network-config "${{ vars.NEAR_CONTRACT_PRODUCTION_NETWORK }}" \
            sign-with-plaintext-private-key \
              --signer-public-key "${{ vars.NEAR_CONTRACT_PRODUCTION_ACCOUNT_PUBLIC_KEY }}" \
              --signer-private-key "${{ secrets.NEAR_CONTRACT_PRODUCTION_ACCOUNT_PRIVATE_KEY }}" \
            send

'''
'''--- .github/workflows/deploy-staging.yml ---
name: Deploy to staging
on:
  pull_request:

jobs:
  test:
    uses: ./.github/workflows/test.yml

  deploy-staging:
    name: Deploy to staging subaccount
    permissions:
      pull-requests: write
    needs: [test]
    runs-on: ubuntu-latest
    env:
      NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID: gh-${{ github.event.number }}.${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install near CLI
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/download/v0.8.0/near-cli-rs-installer.sh | sh
      - name: Create staging account
        if: github.event.action == 'opened' || github.event.action == 'reopened'
        run: |
          near account create-account fund-myself "${{ env.NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID }}" '10 NEAR' \
            use-manually-provided-public-key "${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_PUBLIC_KEY }}" \
            sign-as "${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_ID }}" \
            network-config "${{ vars.NEAR_CONTRACT_STAGING_NETWORK }}" \
            sign-with-plaintext-private-key \
              --signer-public-key "${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_PUBLIC_KEY }}" \
              --signer-private-key "${{ secrets.NEAR_CONTRACT_STAGING_ACCOUNT_PRIVATE_KEY }}" \
            send

      - name: Install cargo-near CLI
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/cargo-near/releases/download/cargo-near-v0.6.1/cargo-near-installer.sh | sh
      - name: Deploy to staging
        run: |
          cargo near deploy "${{ env.NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID }}" \
            without-init-call \
            network-config "${{ vars.NEAR_CONTRACT_STAGING_NETWORK }}" \
            sign-with-plaintext-private-key \
              --signer-public-key "${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_PUBLIC_KEY }}" \
              --signer-private-key "${{ secrets.NEAR_CONTRACT_STAGING_ACCOUNT_PRIVATE_KEY }}" \
            send

      - name: Comment on pull request
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh pr comment "${{ github.event.number }}" --body "Staging contract is deployed to ["'`'"${{ env.NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID }}"'`'" account](https://explorer.${{ vars.NEAR_CONTRACT_STAGING_NETWORK }}.near.org/accounts/${{ env.NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID }})"

'''
'''--- .github/workflows/test.yml ---
name: Test
on:
  workflow_call:

jobs:
  code-formatting:
    name: Code Formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - run: cargo fmt --check

  code-linter:
    name: Code Linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run cargo clippy
        run: |
          rustup component add clippy
          cargo clippy --all-features --workspace --tests -- --warn clippy::all --warn clippy::nursery

  tests:
    name: Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run cargo test
        run: cargo test

'''
'''--- .github/workflows/undeploy-staging.yml ---
name: Undeploy staging
on:
  pull_request:
    types: [closed]

jobs:
  cleanup-staging:
    name: Cleanup staging account
    runs-on: ubuntu-latest
    env:
      NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID: gh-${{ github.event.number }}.${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_ID }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install near CLI
        run: curl --proto '=https' --tlsv1.2 -LsSf https://github.com/near/near-cli-rs/releases/download/v0.7.0/near-cli-rs-installer.sh | sh
      - name: Remove staging account
        run: |
          near account delete-account "${{ env.NEAR_CONTRACT_PR_STAGING_ACCOUNT_ID }}" \
            beneficiary "${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_ID }}" \
            network-config "${{ vars.NEAR_CONTRACT_STAGING_NETWORK }}" \
            sign-with-plaintext-private-key \
              --signer-public-key "${{ vars.NEAR_CONTRACT_STAGING_ACCOUNT_PUBLIC_KEY }}" \
              --signer-private-key "${{ secrets.NEAR_CONTRACT_STAGING_ACCOUNT_PRIVATE_KEY }}" \
            send

'''
'''--- Cargo.toml ---
[package]
name = "cargo-near-new-project-name"
description = "cargo-near-new-project-description"
version = "0.1.0"
edition = "2021"
# TODO: Fill out the repository field to help NEAR ecosystem tools to discover your project.
# NEP-0330 is automatically implemented for all contracts built with https://github.com/near/cargo-near.
# Link to the repository will be available via `contract_source_metadata` view-function.
#repository = "https://github.com/xxx/xxx"

[lib]
crate-type = ["cdylib", "rlib"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[dependencies]
near-sdk = "5.1.0"

[dev-dependencies]
near-sdk = { version = "5.1.0", features = ["unit-testing"] }
near-workspaces = { version = "0.10.0", features = ["unstable"] }
tokio = { version = "1.12.0", features = ["full"] }
serde_json = "1"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- README.md ---
# cargo-near-new-project-name

cargo-near-new-project-description

## Quickstart Guide

You can start coding on the NEAR Rust stack in less than a minute, thanks to [NEAR Devcontainers](https://github.com/near/near-devcontainers). How?

1. Click **Use this template** > **Create a new repository**

<img width="750" alt="Create a new repository" src="https://github.com/njelich/cargo-near-new-project-template/assets/12912633/d59d89f1-8bc4-42f1-8e0d-842521d87768">

2. In your newly created repo, click **Code** > **Codespaces** > **Create codespace on main**

<img width="750" alt="Create Codespace" src="https://github.com/njelich/cargo-near-new-project-template/assets/12912633/352566cf-2eca-4d42-8232-6136ea8ec9d3">

## Where to Get Started?

Start writing your contract logic in [src/lib.rs](src/lib.rs) and integration tests in [tests/test_basics.rs](tests/test_basics.rs).

## How to Build Locally?

Install [`cargo-near`](https://github.com/near/cargo-near) and run:

```bash
cargo near build
```

## How to Test Locally?

```bash
cargo test
```

## How to Deploy?

Deployment is automated with GitHub Actions CI/CD pipeline.
To deploy manually, install [`cargo-near`](https://github.com/near/cargo-near) and run:

```bash
cargo near deploy <account-id>
```

## Useful Links

- [cargo-near](https://github.com/near/cargo-near) - NEAR smart contract development toolkit for Rust
- [near CLI](https://near.cli.rs) - Iteract with NEAR blockchain from command line
- [NEAR Rust SDK Documentation](https://docs.near.org/sdk/rust/introduction)
- [NEAR Documentation](https://docs.near.org)
- [NEAR StackOverflow](https://stackoverflow.com/questions/tagged/nearprotocol)
- [NEAR Discord](https://near.chat)
- [NEAR Telegram Developers Community Group](https://t.me/neardev)
- NEAR DevHub: [Telegram](https://t.me/neardevhub), [Twitter](https://twitter.com/neardevhub)

'''
'''--- rust-toolchain.toml ---
[toolchain]
channel = "stable"
components = ["rustfmt"]
targets = ["wasm32-unknown-unknown"]

'''
'''--- src/lib.rs ---
use near_sdk::borsh::BorshSerialize;
use near_sdk::store::LookupMap;
use near_sdk::{env, near, AccountId, BorshStorageKey};

#[near(contract_state)]
pub struct StatusMessage {
    records: LookupMap<AccountId, String>,
}

#[derive(BorshSerialize, BorshStorageKey)]
#[borsh(crate = "near_sdk::borsh")]
enum StorageKey {
    StatusMessageRecords,
}

impl Default for StatusMessage {
    fn default() -> Self {
        Self {
            records: LookupMap::new(StorageKey::StatusMessageRecords),
        }
    }
}

#[near]
impl StatusMessage {
    pub fn set_status(&mut self, message: String) {
        let account_id = env::predecessor_account_id();
        self.records.insert(account_id, message);
    }

    pub fn get_status(&self, account_id: AccountId) -> Option<&String> {
        self.records.get(&account_id)
    }
}

#[cfg(not(target_arch = "wasm32"))]
#[cfg(test)]
mod tests {
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::testing_env;

    use super::*;

    // Allows for modifying the environment of the mocked blockchain
    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    #[test]
    fn set_get_message() {
        let mut context = get_context(accounts(1));
        // Initialize the mocked blockchain
        testing_env!(context.build());

        // Set the testing environment for the subsequent calls
        testing_env!(context.predecessor_account_id(accounts(1)).build());

        let mut contract = StatusMessage::default();
        contract.set_status("hello".to_string());
        assert_eq!("hello", contract.get_status(accounts(1)).unwrap());
    }

    #[test]
    fn get_nonexistent_message() {
        let contract = StatusMessage::default();
        assert_eq!(None, contract.get_status("francis.near".parse().unwrap()));
    }
}

'''
'''--- tests/test_basics.rs ---
use serde_json::json;

#[tokio::test]
async fn test_contract_is_operational() -> Result<(), Box<dyn std::error::Error>> {
    let sandbox = near_workspaces::sandbox().await?;
    let contract_wasm = near_workspaces::compile_project("./").await?;

    let contract = sandbox.dev_deploy(&contract_wasm).await?;

    let user1_account = sandbox.dev_create_account().await?;
    let user2_account = sandbox.dev_create_account().await?;

    let outcome = user1_account
        .call(contract.id(), "set_status")
        .args_json(json!({"message": "test status"}))
        .transact()
        .await?;
    assert!(outcome.is_success());

    let user1_message_outcome = contract
        .view("get_status")
        .args_json(json!({"account_id": user1_account.id()}))
        .await?;
    assert_eq!(user1_message_outcome.json::<String>()?, "test status");

    let user2_message_outcome = contract
        .view("get_status")
        .args_json(json!({"account_id": user2_account.id()}))
        .await?;
    assert_eq!(user2_message_outcome.result, b"null");

    Ok(())
}

'''