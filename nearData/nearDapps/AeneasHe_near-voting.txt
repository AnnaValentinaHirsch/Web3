*GitHub Repository "AeneasHe/near-voting"*

'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
}

'''
'''--- contract/compile.js ---
// This file does two things:
//
// 1. Compile the Rust contract using cargo (see buildCmd below). This will
//    create a wasm file in the 'build' folder.
// 2. Create a symbolic link (symlink) to the generated wasm file in the root
//    project's `out` folder, for easy use with near-cli.
//
// First, import some helper libraries. `shelljs` is included in the
// devDependencies of the root project, which is why it's available here. It
// makes it easy to use *NIX-style scripting (which works on Linux distros,
// macOS, and Unix systems) on Windows as well.
const sh = require('shelljs')

// Figure out which directory the user called this script from, which we'll use
// later to set up the symlink.
const calledFromDir = sh.pwd().toString()

// For the duration of this script, we want to operate from within the
// Rust project's folder. Let's change into that directory.
sh.cd(__dirname)

// You can call this script with `node compile.js` or `node compile.js
// --debug`. Let's set a variable to track whether `--debug` was used.
const debug = process.argv.pop() === '--debug'

// You can call this script with `node compile.js` or `node compile.js --debug`.
// Let's set a variable to track whether `--debug` was used.
// Note: see other flags in ./cargo/config. Unfortunately, you cannot set the
// `--target option` in Cargo.toml.
const buildCmd = debug
  ? 'cargo build --target wasm32-unknown-unknown'
  : 'cargo build --target wasm32-unknown-unknown --release'

// Execute the build command, storing exit code for later use
const { code } = sh.exec(buildCmd)

// Assuming this is compiled from the root project directory, link the compiled
// contract to the `out` folder –
// When running commands like `near deploy`, near-cli looks for a contract at
// <CURRENT_DIRECTORY>/out/main.wasm
if (code === 0 && calledFromDir !== __dirname) {
  const linkDir = `${calledFromDir}/out`
  const link = `${calledFromDir}/out/main.wasm`
  const packageName = require('fs').readFileSync(`${__dirname}/Cargo.toml`).toString().match(/name = "([^"]+)"/)[1]
  const outFile = `./target/wasm32-unknown-unknown/${debug ? 'debug' : 'release'}/${packageName}.wasm`
  sh.mkdir('-p', linkDir)
  sh.rm('-f', link)
  //fixes #831: copy-update instead of linking .- sometimes sh.ln does not work on Windows
  sh.cp('-u',outFile,link)
}

// exit script with the same code as the build command
process.exit(code)

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
import { logout } from './utils'
import './global.css'

import Voting from './views/Voting'
import Greeting from './views/Greeting'
import Login from './views/Login'
import Notification from './views/Notification'

import getConfig from './config'
const { networkId } = getConfig(process.env.NODE_ENV || 'development')

export default function App() {
  // use React Hooks to store greeting in component state

  // after submitting the form, we want to show Notification
  const [showNotification, setShowNotification] = React.useState(false)

  const [page, setPage] = React.useState('Voting')

  // if not signed in, return early with sign-in prompt
  if (!window.walletConnection.isSignedIn()) {
    return (<Login />)
  }

  return (
    // use React Fragment, <>, to avoid wrapping elements in unnecessary divs
    <>
      <button className="link" style={{ float: 'right' }} onClick={logout}>
        Sign out
      </button>
      <main>
        <div className="navigation">
          <div className="nav" onClick={() => setPage('Voting')}> Voting </div>
          <div className="nav" onClick={() => setPage('Greeting')}> Greeting </div>
        </div>
        {page == 'Voting' ?
          <Voting />
          :
          < Greeting />
        }
      </main>
      {showNotification && <Notification />}
    </>
  )
}

'''
'''--- src/__mocks__/fileMock.js ---
// NOTE: This is used to mock resource imports in JSX for tests
module.exports = '' 

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME ||'voting'

function getConfig(env) {
  switch (env) {

  case 'production':
  case 'mainnet':
    return {
      networkId: 'mainnet',
      nodeUrl: 'https://rpc.mainnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.near.org',
      helperUrl: 'https://helper.mainnet.near.org',
      explorerUrl: 'https://explorer.mainnet.near.org',
    }
  case 'development':
  case 'testnet':
    return {
      networkId: 'testnet',
      nodeUrl: 'https://rpc.testnet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.testnet.near.org',
      helperUrl: 'https://helper.testnet.near.org',
      explorerUrl: 'https://explorer.testnet.near.org',
    }
  case 'betanet':
    return {
      networkId: 'betanet',
      nodeUrl: 'https://rpc.betanet.near.org',
      contractName: CONTRACT_NAME,
      walletUrl: 'https://wallet.betanet.near.org',
      helperUrl: 'https://helper.betanet.near.org',
      explorerUrl: 'https://explorer.betanet.near.org',
    }
  case 'local':
    return {
      networkId: 'local',
      nodeUrl: 'http://localhost:3030',
      keyPath: `${process.env.HOME}/.near/validator_key.json`,
      walletUrl: 'http://localhost:4000/wallet',
      contractName: CONTRACT_NAME,
    }
  case 'test':
  case 'ci':
    return {
      networkId: 'shared-test',
      nodeUrl: 'https://rpc.ci-testnet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  case 'ci-betanet':
    return {
      networkId: 'shared-test-staging',
      nodeUrl: 'https://rpc.ci-betanet.near.org',
      contractName: CONTRACT_NAME,
      masterAccount: 'test.near',
    }
  default:
    throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
  }
}

module.exports = getConfig

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="utf-8" />
  <link rel="icon" href="./assets/favicon.ico" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <link rel="apple-touch-icon" href="./assets/favicon.ico" />
  <title>Welcome to NEAR Voting Dapp</title>
</head>

<body>
  <noscript>You need to enable JavaScript to run this app.</noscript>
  <div id="root"></div>
  <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  <script src="./index.js"></script>
</body>

</html>
'''
'''--- src/index.js ---
import React from 'react'
import ReactDOM from 'react-dom'
import App from './App'
import { initContract } from './utils'

window.nearInitPromise = initContract()
  .then(() => {
    ReactDOM.render(
      <App />,
      document.querySelector('#root')
    )
  })
  .catch(console.error)

'''
'''--- src/jest.init.js ---
import 'regenerator-runtime/runtime'

'''
'''--- src/main.test.js ---
beforeAll(async function () {
  // NOTE: nearlib and nearConfig are made available by near-cli/test_environment
  const near = await nearlib.connect(nearConfig)
  window.accountId = nearConfig.contractName
  window.contract = await near.loadContract(nearConfig.contractName, {
    viewMethods: ['get_greeting'],
    changeMethods: [],
    sender: window.accountId
  })

  window.walletConnection = {
    requestSignIn() {
    },
    signOut() {
    },
    isSignedIn() {
      return true
    },
    getAccountId() {
      return window.accountId
    }
  }
})

test('get_greeting', async () => {
  const message = await window.contract.get_greeting({ account_id: window.accountId })
  expect(message).toEqual('Hello')
})

'''
'''--- src/utils.js ---
import { connect, Contract, keyStores, WalletConnection } from 'near-api-js'
import getConfig from './config'

const nearConfig = getConfig(process.env.NODE_ENV || 'development')

// 合约部署及初始化
// Initialize contract & set global variables
export async function initContract() {
  // Initialize connection to the NEAR testnet
  const near = await connect(Object.assign({ deps: { keyStore: new keyStores.BrowserLocalStorageKeyStore() } }, nearConfig))

  // Initializing Wallet based Account. It can work with NEAR testnet wallet that
  // is hosted at https://wallet.testnet.near.org
  window.walletConnection = new WalletConnection(near)

  // Getting the Account ID. If still unauthorized, it's just empty string
  window.accountId = window.walletConnection.getAccountId()

  // Initializing our contract APIs by contract name and configuration
  window.contract = await new Contract(window.walletConnection.account(), nearConfig.contractName, {
    // View methods are read only. They don't modify the state, but usually return some value.
    viewMethods: ['get_greeting', 'total_votes_for',],
    // Change methods can modify the state. But you don't receive the returned value when called.
    changeMethods: ['set_greeting', 'set_candidates', 'vote_for_candidate', 'reset_votes'],
  })
}

export function logout() {
  window.walletConnection.signOut()
  // reload page
  window.location.replace(window.location.origin + window.location.pathname)
}

export function login() {
  // Allow the current app to make calls to the specified contract on the
  // user's behalf.
  // This works by creating a new access key for the user's account and storing
  // the private key in localStorage.
  window.walletConnection.requestSignIn(nearConfig.contractName)
}

'''
'''--- src/views/Greeting.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
// import './bootstrap.min.css'

export default function Greeting() {
    const [greeting, set_greeting] = React.useState()

    // when the user has not yet interacted with the form, disable the button
    const [buttonDisabled, setButtonDisabled] = React.useState(true)

    // The useEffect hook can be used to fire side-effects during render
    // Learn more: https://reactjs.org/docs/hooks-intro.html
    React.useEffect(
        () => {
            // in this case, we only care to query the contract when signed in
            if (window.walletConnection.isSignedIn()) {

                // window.contract is set by initContract in index.js
                window.contract.get_greeting({ account_id: window.accountId })
                    .then(greetingFromContract => {
                        set_greeting(greetingFromContract)
                    })
            }
        },

        // The second argument to useEffect tells React when to re-run the effect
        // Use an empty array to specify "only run on first render"
        // This works because signing into NEAR Wallet reloads the page
        []
    )

    return (<div>
        <h1>
            <label
                htmlFor="greeting"
                style={{
                    color: 'var(--secondary)',
                    borderBottom: '2px solid var(--secondary)'
                }}
            >
                {greeting}
            </label>
            {' '/* React trims whitespace around tags; insert literal space character when needed */}
            {window.accountId}!
        </h1>
        <form onSubmit={async event => {
            event.preventDefault()

            // get elements from the form using their id attribute
            const { fieldset, greeting } = event.target.elements

            // hold onto new user-entered value from React's SynthenticEvent for use after `await` call
            const newGreeting = greeting.value

            // disable the form while the value gets updated on-chain
            fieldset.disabled = true

            try {
                // make an update call to the smart contract
                await window.contract.set_greeting({
                    // pass the value that the user entered in the greeting field
                    message: newGreeting
                })
            } catch (e) {
                alert(
                    'Something went wrong! ' +
                    'Maybe you need to sign out and back in? ' +
                    'Check your browser console for more info.'
                )
                throw e
            } finally {
                // re-enable the form, whether the call succeeded or failed
                fieldset.disabled = false
            }

            // update local `greeting` variable to match persisted value
            set_greeting(newGreeting)

            // show Notification
            setShowNotification(true)

            // remove Notification again after css animation completes
            // this allows it to be shown again next time the form is submitted
            setTimeout(() => {
                setShowNotification(false)
            }, 11000)
        }}>
            <fieldset id="fieldset">
                <label
                    htmlFor="greeting"
                    style={{
                        display: 'block',
                        color: 'var(--gray)',
                        marginBottom: '0.5em'
                    }}
                >
                    Change greeting
                </label>
                <div style={{ display: 'flex' }}>
                    <input
                        autoComplete="off"
                        defaultValue={greeting}
                        id="greeting"
                        onChange={e => setButtonDisabled(e.target.value === greeting)}
                        style={{ flex: 1 }}
                    />
                    <button
                        disabled={buttonDisabled}
                        style={{ borderRadius: '0 5px 5px 0' }}
                    >
                        Save
                    </button>
                </div>
            </fieldset>
        </form>

        <p>
            Look at that! A Hello World app! This greeting is stored on the NEAR blockchain. Check it out:
        </p>
        <ol>
            <li>
                Look in <code>src/App.js</code> and <code>src/utils.js</code> – you'll see <code>get_greeting</code> and <code>set_greeting</code> being called on <code>contract</code>. What's this?
            </li>
            <li>
                Ultimately, this <code>contract</code> code is defined in <code>assembly/main.ts</code> – this is the source code for your <a target="_blank" rel="noreferrer" href="https://docs.near.org/docs/develop/contracts/overview">smart contract</a>.</li>
            <li>
                When you run <code>yarn dev</code>, the code in <code>assembly/main.ts</code> gets deployed to the NEAR testnet. You can see how this happens by looking in <code>package.json</code> at the <code>scripts</code> section to find the <code>dev</code> command.</li>
        </ol>
        <hr />
        <p>
            To keep learning, check out <a target="_blank" rel="noreferrer" href="https://docs.near.org">the NEAR docs</a> or look through some <a target="_blank" rel="noreferrer" href="https://examples.near.org">example apps</a>.
        </p>
    </div>
    )

}
'''
'''--- src/views/Login.js ---
import 'regenerator-runtime/runtime'
import React from 'react'

import { login } from '../utils'

export default function Login() {
    return (
        <main>
            <h1>Welcome to NEAR Decentralized Voting!</h1>
            <p>
                To make use of the NEAR blockchain, you need to sign in. The button
                below will sign you in using NEAR Wallet.
            </p>
            <p>
                By default, when your app runs in "development" mode, it connects
                to a test network ("testnet") wallet. This works just like the main
                network ("mainnet") wallet, but the NEAR Tokens on testnet aren't
                convertible to other currencies – they're just for testing!
            </p>
            <p>
                Go ahead and click the button below to try it out:
            </p>
            <p style={{ textAlign: 'center', marginTop: '2.5em' }}>
                <button onClick={login}>Sign in</button>
            </p>
        </main>
    )

}
'''
'''--- src/views/Notification.js ---

import 'regenerator-runtime/runtime'
import React from 'react'

// this component gets rendered by App after the form is submitted
export default function Notification() {
    const urlPrefix = `https://explorer.${networkId}.near.org/accounts`
    return (
        <aside>
            <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.accountId}`}>
                {window.accountId}
            </a>
            {' '/* React trims whitespace around tags; insert literal space character when needed */}
            called method: 'set_greeting' in contract:
            {' '}
            <a target="_blank" rel="noreferrer" href={`${urlPrefix}/${window.contract.contractId}`}>
                {window.contract.contractId}
            </a>
            <footer>
                <div>✔ Succeeded</div>
                <div>Just now</div>
            </footer>
        </aside>
    )
}

'''
'''--- src/views/Voting.js ---
import 'regenerator-runtime/runtime'
import React from 'react'
// import './bootstrap.min.css'

let candidates = {
    "Alice": "candidate-1",
    "Bob": "candidate-2",
    "Carol": "candidate-3"
}

let candidate_hashes = {
    "Alice": "Vote for Alice",
    "Bob": "Vote for Bob",
    "Carol": "Vote for Carol"
}
let votes_received_default = {
    "Alice": "0",
    "Bob": "0",
    "Carol": "0"
}

export default function Voting() {
    // 注意为了防止引用问题，votes_received存储map的json字符串，而不是直接存储map
    const [votes_received, set_votes_received] = React.useState(votes_received_default)

    const [candidate_name, set_candidate_name] = React.useState('')

    const [signature, set_signature] = React.useState('')

    const [votes_change, set_votes_change] = React.useState(false)

    const voter = window.accountId

    let setCandidates = React.useCallback(() => {
        console.log("init voting set candidate")

        let hashes = ['Alice', 'Bob', 'Carol'].map(name => { return candidate_hashes[name] })
        window.contract.set_candidates({ candidate_names: ['Alice', 'Bob', 'Carol'], candidate_hashes: hashes })
            .then(res => {
                console.log("set candidatets result: ", res)
            })
    }, [])

    let resetVotes = React.useCallback(() => {
        window.contract.reset_votes({}).then(res => {
            console.log('reset result:', res)
            set_votes_change(!votes_change)
        })
    })

    let voteForCandidate = React.useCallback(() => {
        console.log(candidate_name)
    }, [candidate_name])

    let handleCandidateNameChange = React.useCallback((e) => {
        set_candidate_name(e.target.value)
        if (candidate_hashes[e.target.value]) {
            set_signature(candidate_hashes[e.target.value])
        }
    }, [])

    // let handleSignatureChange = React.useCallback((e) => {
    //     e.preventDefault();
    //     //set_signature(e.target.value);

    // })

    // 提交投票数据
    let submitVote = React.useCallback(() => {
        window.contract.vote_for_candidate({ candidate: candidate_name, voter: voter, signed_message: signature })
            .then(res => {
                console.log("submit vote result:", res),
                    set_votes_change(!votes_change)
            })
    })

    // 查询投票数据后更新结果
    React.useEffect(() => {
        let votes_recieved_current_str = JSON.stringify(votes_received)

        let tasks = Object.keys(candidates).map(candidate => {
            return new Promise((resolve, reject) => {
                window.contract.total_votes_for({ candidate: candidate })
                    .then(votes => {
                        if (votes_received[candidate] != votes) {
                            console.log('votes status:', candidate, votes)
                            votes_received[candidate] = votes
                        }
                        resolve(true)
                    }).catch((error) => {
                        resolve(false)
                    })
            })
        })

        Promise.all(tasks).then((result) => {
            console.log("task result:", result)
            let votes_received_new_str = JSON.stringify(votes_received)
            if (votes_recieved_current_str != votes_received_new_str) {
                set_votes_change(!votes_change)
            }
        }).catch((error) => {
            console.log(error)
        })

    }, [])

    return (
        <main>
            <div className="banner">
                <h1 className="text-center">Decentralized Voting DAPP</h1>
            </div>
            <div className="container col-margin-top-2">

                <div id="address"></div>

                <button type="submit" className="btn btn-primary" onClick={setCandidates}>Init</button>
                <button type="submit" className="btn btn-primary" onClick={resetVotes}>Reset</button>
                <div className="table-responsive">
                    <h2>Current Votes</h2>
                    <table className="table table-bordered">
                        <thead>
                            <tr>
                                <th>Candidate</th>
                                <th>Votes</th>
                            </tr>
                        </thead>
                        <tbody>
                            {
                                Object.keys(candidates).map(key => {
                                    return (
                                        <tr key={key}>
                                            <td>{key}</td>
                                            <td id={candidates[key]}>{votes_received[key]}</td>
                                        </tr>
                                    )
                                })
                            }
                        </tbody>
                    </table>
                </div>

                <div className="row">
                    <div className="col-sm-6">
                        <h2>Vote for your favorite candidate</h2>
                        <div className="form-inline">
                            <div className="form-group">
                                <label id="candidate">Candidate</label>
                                <input value={candidate_name} onChange={handleCandidateNameChange} type="text" className="form-control" id="candidate" placeholder="Ex: Carol" />
                            </div>
                            <button type="submit" className="btn btn-primary" onClick={voteForCandidate}>Generate Vote</button>
                        </div>
                        <strong><div id="msg"></div></strong>
                        <div id="vote-for"></div>
                        <div id="addr"></div>
                        <div id="signature"></div>

                    </div>
                    <div className="col-sm-6">
                        <h2>Submit vote to blockchain</h2>
                        <div className="form-horizontal">
                            <div className="form-group">
                                <label id="candidate" className="col-sm-2 control-label">Candidate</label>
                                <div className="col-sm-10">
                                    <input value={candidate_name} onChange={handleCandidateNameChange} className="form-control" id="candidate-name" placeholder="Ex: Carol" />
                                </div>
                            </div>
                            <div className="form-group">
                                <label id="voter-address" className="col-sm-2 control-label">Voter Address</label>
                                <div className="col-sm-10">
                                    <input defaultValue={voter} className="form-control" id="voter-address" />
                                </div>
                            </div>
                            <div className="form-group">
                                <label id="vote-signature" className="col-sm-2 control-label">Signature</label>
                                <div className="col-sm-10">
                                    <div className="form-control" id="voter-signature" > {signature} </div>
                                </div>
                            </div>
                            <div className="form-group">
                                <div className="col-sm-offset-2 col-sm-10">
                                    <button type="submit" onClick={submitVote} className="btn btn-primary">Submit Vote</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    )

}
'''
'''--- src/wallet/login/index.html ---
<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
</head>
<body style="background: #fff; margin-top: 3em">
  <div>For local account login, Please run the following command in NEAR CLI, then enter account id here.
  </div>
  <div>
      <code id="shell-command"></code>
  </div>
  <input type="text" id="accountId" name="accountId" placeholder="Account id"></input>
  <button type="button" onClick="done()">done</button>
  <script>
    const currentUrl = new URL(window.location.href);
    const message = `NODE_ENV=local near create_account {newAccountId} --masterAccount {masterAccountId} --publicKey ${currentUrl.searchParams.get('public_key')} --initialAmount 10000000000000000000`;
    document.getElementById('shell-command').innerText = message;

    function done() {
      const successUrl = new URL(currentUrl.searchParams.get('success_url'));
      successUrl.searchParams.set('account_id', document.getElementById('accountId').value);
      successUrl.searchParams.set('public_key', currentUrl.searchParams.get('public_key'));
      window.location.assign(successUrl.toString());
    }
  </script>
</body>
</html>
'''