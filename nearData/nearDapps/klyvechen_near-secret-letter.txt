*GitHub Repository "klyvechen/near-secret-letter"*

'''--- sl-contract/Cargo.toml ---
[package]
name = "secret-letter"
version = "0.0.2"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[dependencies]
near-sdk = "4.0.0-pre.6"
near-sdk-sim = "4.0.0-pre.6"
near-contract-standards = "4.0.0-pre.7"
hex = "0.4.3"

# remember to include a line for each contract
secret-letter-contract = { path = "./nft" }
approval-receiver = { path = "./test-approval-receiver" }
token-receiver = { path = "./test-token-receiver" }

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
overflow-checks = true

[workspace]
# remember to include a member for each contract
members = [
  "nft",
  "test-approval-receiver",
  "test-token-receiver",
]

'''
'''--- sl-contract/README.md ---
Non-fungible Token (NFT)
===================

[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/near-examples/NFT)

This repository includes an example implementation of a [non-fungible token] contract which uses [near-contract-standards] and [simulation] tests.

  [non-fungible token]: https://nomicon.io/Standards/NonFungibleToken/README.html
  [near-contract-standards]: https://github.com/near/near-sdk-rs/tree/master/near-contract-standards
  [simulation]: https://github.com/near/near-sdk-rs/tree/master/near-sdk-sim
Prerequisites
=============
If you're using Gitpod, you can skip this step.

  * Make sure Rust is installed per the prerequisites in [`near-sdk-rs`](https://github.com/near/near-sdk-rs).
  * Make sure [near-cli](https://github.com/near/near-cli) is installed.

Explore this contract
=====================

The source for this contract is in `nft/src/lib.rs`. It provides methods to manage access to tokens, transfer tokens, check access, and get token owner. Note, some further exploration inside the rust macros is needed to see how the `NonFungibleToken` contract is implemented.

Building this contract
======================
Run the following, and we'll build our rust project up via cargo. This will generate our WASM binaries into our `res/` directory. This is the smart contract we'll be deploying onto the NEAR blockchain later.
```bash
./build.sh
```

Testing this contract
=====================
We have some tests that you can run. For example, the following will run our simple tests to verify that our contract code is working.
```bash
cargo test -- --nocapture
```
The more complex simulation tests aren't run with this command, but we can find them in `tests/sim`.

Using this contract
===================

### Quickest deploy

You can build and deploy this smart contract to a development account. [Dev Accounts](https://docs.near.org/docs/concepts/account#dev-accounts) are auto-generated accounts to assist in developing and testing smart contracts. Please see the [Standard deploy](#standard-deploy) section for creating a more personalized account to deploy to.

```bash
near dev-deploy --wasmFile res/non_fungible_token.wasm
```

Behind the scenes, this is creating an account and deploying a contract to it. On the console, notice a message like:

>Done deploying to dev-1234567890123

In this instance, the account is `dev-1234567890123`. A file has been created containing a key pair to
the account, located at `neardev/dev-account`. To make the next few steps easier, we're going to set an
environment variable containing this development account id and use that when copy/pasting commands.
Run this command to set the environment variable:

```bash
source neardev/dev-account.env
```

You can tell if the environment variable is set correctly if your command line prints the account name after this command:
```bash
echo $CONTRACT_NAME
```

The next command will initialize the contract using the `new` method:

```bash
near call $CONTRACT_NAME new_default_meta '{"owner_id": "'$CONTRACT_NAME'"}' --accountId $CONTRACT_NAME
```

To view the NFT metadata:

```bash
near view $CONTRACT_NAME nft_metadata
```

### Standard deploy

This smart contract will get deployed to your NEAR account. For this example, please create a new NEAR account. Because NEAR allows the ability to upgrade contracts on the same account, initialization functions must be cleared. If you'd like to run this example on a NEAR account that has had prior contracts deployed, please use the `near-cli` command `near delete`, and then recreate it in Wallet. To create (or recreate) an account, please follow the directions in [Test Wallet](https://wallet.testnet.near.org) or ([NEAR Wallet](https://wallet.near.org/) if we're using `mainnet`).

In the project root, log in to your newly created account with `near-cli` by following the instructions after this command.

    near login

To make this tutorial easier to copy/paste, we're going to set an environment variable for our account id. In the below command, replace `MY_ACCOUNT_NAME` with the account name we just logged in with, including the `.testnet` (or `.near` for `mainnet`):

    ID=MY_ACCOUNT_NAME

We can tell if the environment variable is set correctly if our command line prints the account name after this command:

    echo $ID

Now we can deploy the compiled contract in this example to your account:

    near deploy --wasmFile res/non_fungible_token.wasm --accountId $ID

NFT contract should be initialized before usage. More info about the metadata at [nomicon.io](https://nomicon.io/Standards/NonFungibleToken/Metadata.html). But for now, we'll initialize with the default metadata.

    near call $ID new_default_meta '{"owner_id": "'$ID'"}' --accountId $ID

We'll be able to view our metadata right after:

    near view $ID nft_metadata

Then, let's mint our first token. This will create a NFT based on Olympus Mons where only one copy exists:

    near call $ID nft_mint '{"token_id": "0", "receiver_id": "'$ID'", "token_metadata": { "title": "Olympus Mons", "description": "Tallest mountain in charted solar system", "media": "https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Olympus_Mons_alt.jpg/1024px-Olympus_Mons_alt.jpg", "copies": 1}}' --accountId $ID --deposit 0.1

Transferring our NFT
====================

Let's set up an account to transfer our freshly minted token to. This account will be a sub-account of the NEAR account we logged in with originally via `near login`.

    near create-account alice.$ID --masterAccount $ID --initialBalance 10

Checking Alice's account for tokens:

    near view $ID nft_tokens_for_owner '{"account_id": "'alice.$ID'"}'

Then we'll transfer over the NFT into Alice's account. Exactly 1 yoctoNEAR of deposit should be attached:

    near call $ID nft_transfer '{"token_id": "0", "receiver_id": "alice.'$ID'", "memo": "transfer ownership"}' --accountId $ID --depositYocto 1

Checking Alice's account again shows us that she has the Olympus Mons token.

Notes
=====

* The maximum balance value is limited by U128 (2**128 - 1).
* JSON calls should pass U128 as a base-10 string. E.g. "100".
* This does not include escrow functionality, as ft_transfer_call provides a superior approach. An escrow system can, of course, be added as a separate contract or additional functionality within this contract.

AssemblyScript
==============
Currently, AssemblyScript is not supported for this example. An old version can be found in the [NEP4 example](https://github.com/near-examples/NFT/releases/tag/nep4-example), but this is not recommended as it is out of date and does not follow the standards the NEAR SDK has set currently.

'''
'''--- sl-contract/build.sh ---
#!/bin/bash
set -e
cd "`dirname $0`"
source flags.sh
cargo build --all --target wasm32-unknown-unknown --release
cp target/wasm32-unknown-unknown/release/*.wasm ./res/
'''
'''--- sl-contract/nft/Cargo.toml ---
[package]
name = "secret-letter-contract"
version = "1.1.0"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "4.0.0-pre.7"
near-contract-standards = "4.0.0-pre.7"
rand = "0.8.4"
getrandom = { version = "0.2", features = ["js"] }
hex = "0.4.3"
'''
'''--- sl-contract/nft/src/lib.rs ---
/*!
Non-Fungible Token implementation with JSON serialization.
NOTES:
  - The maximum balance value is limited by u128 (2**128 - 1).
  - JSON calls should pass u128 as a base-10 string. E.g. "100".
  - The contract optimizes the inner trie structure by hashing account IDs. It will prevent some
    abuse of deep tries. Shouldn't be an issue, once NEAR clients implement full hashing of keys.
  - The contract tracks the change in storage before and after the call. If the storage increases,
    the contract requires the caller of the contract to attach enough deposit to the function call
    to cover the storage cost.
    This is done to prevent a denial of service attack on the contract by taking all available storage.
    If the storage decreases, the contract will issue a refund for the cost of the released storage.
    The unused tokens from the attached deposit are also refunded, so it's safe to
    attach more deposit than required.
  - To prevent the deployed contract from being modified or deleted, it should not have any access
    keys on its account.
*/
use near_contract_standards::non_fungible_token::metadata::{
    NFTContractMetadata, NonFungibleTokenMetadataProvider, TokenMetadata, NFT_METADATA_SPEC,
};
use near_contract_standards::non_fungible_token::{Token, TokenId};
use near_contract_standards::non_fungible_token::NonFungibleToken;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::{ LazyOption, UnorderedMap };
use near_sdk::{
    env, near_bindgen, ext_contract, log, AccountId, BorshStorageKey, PanicOnDefault, Promise, PromiseOrValue, Balance, PromiseResult, Gas
};
use hex;

// near_sdk::setup_alloc!();

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct Contract {
    id: u128,
    aid: u32,
    account_to_aid: UnorderedMap<AccountId, u32>,
    aid_to_account: UnorderedMap<u32, AccountId>,
    token_to_creator: UnorderedMap<u128, u32>,
    tokens: NonFungibleToken,
    metadata: LazyOption<NFTContractMetadata>,
    secret_message: UnorderedMap<u128, String>,
    aid_to_access_token: UnorderedMap<u32, String>,
}

const DATA_IMAGE_SVG_NEAR_ICON: &str = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 288 288'%3E%3Cg id='l' data-name='l'%3E%3Cpath d='M187.58,79.81l-30.1,44.69a3.2,3.2,0,0,0,4.75,4.2L191.86,103a1.2,1.2,0,0,1,2,.91v80.46a1.2,1.2,0,0,1-2.12.77L102.18,77.93A15.35,15.35,0,0,0,90.47,72.5H87.34A15.34,15.34,0,0,0,72,87.84V201.16A15.34,15.34,0,0,0,87.34,216.5h0a15.35,15.35,0,0,0,13.08-7.31l30.1-44.69a3.2,3.2,0,0,0-4.75-4.2L96.14,186a1.2,1.2,0,0,1-2-.91V104.61a1.2,1.2,0,0,1,2.12-.77l89.55,107.23a15.35,15.35,0,0,0,11.71,5.43h3.13A15.34,15.34,0,0,0,216,201.16V87.84A15.34,15.34,0,0,0,200.66,72.5h0A15.35,15.35,0,0,0,187.58,79.81Z'/%3E%3C/g%3E%3C/svg%3E";

#[derive(BorshSerialize, BorshStorageKey)]
enum StorageKey {
    NonFungibleToken,
    Metadata,
    TokenMetadata,
    Enumeration,
    Approval,
}

#[near_bindgen]
impl Contract {
    /// Initializes the contract owned by `owner_id` with
    /// default metadata (for example purposes only).
    #[init]
    pub fn new_default_meta(owner_id: AccountId) -> Self {
        Self::new(
            owner_id,
            NFTContractMetadata {
                spec: NFT_METADATA_SPEC.to_string(),
                name: "Secret Letter".to_string(),
                symbol: "SL-NEAR".to_string(),
                icon: Some(DATA_IMAGE_SVG_NEAR_ICON.to_string()),
                base_uri: None,
                reference: None,
                reference_hash: None,
            }
        )
    }

    #[init]
    pub fn new(owner_id: AccountId, metadata: NFTContractMetadata) -> Self {
        assert!(!env::state_exists(), "Already initialized");
        metadata.assert_valid();
        Self {
            id: 0,
            aid: 0,
            account_to_aid: UnorderedMap::new(b"a"),
            aid_to_account: UnorderedMap::new(b"n"),
            token_to_creator: UnorderedMap::new(b"c"),
            tokens: NonFungibleToken::new(
                StorageKey::NonFungibleToken,
                owner_id,
                Some(StorageKey::TokenMetadata),
                Some(StorageKey::Enumeration),
                Some(StorageKey::Approval),
            ),
            metadata: LazyOption::new(StorageKey::Metadata, Some(&metadata)),
            secret_message: UnorderedMap::new(b"m"), 
            aid_to_access_token: UnorderedMap::new(b"p"), 
        }
    }

    pub fn get_access_token(&mut self) -> Option<String> {
        log!("predecessor_account_id {}", &env::predecessor_account_id());
        if self.account_to_aid.get(&env::predecessor_account_id()).is_none() {
            self.aid_to_account.insert(&self.aid, &env::predecessor_account_id());
            self.account_to_aid.insert(&env::predecessor_account_id(), &self.aid);
            self.aid = self.aid + 1;
        }
        let mut access_token : Option<String> = self.aid_to_access_token.get(&self.get_aid(env::predecessor_account_id()));
        match access_token {
            None => {
                let test : String = env::block_timestamp().to_string();
                log!("test {}, access id none", test);
                access_token =  hex::encode(&env::sha256(&env::block_timestamp().to_be_bytes())).get(0..8).map(|s| format!("{}", s));
                log!("test hash {:?}", env::sha256(&env::block_timestamp().to_be_bytes()));
                log!("test hash string {:?}", hex::encode(&env::sha256(&env::block_timestamp().to_be_bytes())).get(0..8).map(|s| format!("{}", s)));
                log!("access_token {:?}", &access_token.as_ref());
                self.aid_to_access_token.insert(&self.get_aid(env::predecessor_account_id()), &access_token.as_ref().unwrap());
            },
            _ => {
                log!("access_token is {:?}", access_token.as_ref());
            }
        }
        access_token
    }

    pub fn remove_access_token(&mut self) {
        self.aid_to_access_token.remove(&self.get_aid(env::predecessor_account_id()));
    }        

    // deprecated
    pub fn set_password(&mut self, password: String) {
        self.aid_to_access_token.insert(&self.get_aid(env::predecessor_account_id()), &password);
    }

    pub fn get_creator_id(&self, token_id: u128) -> Option<AccountId> {
        self.aid_to_account.get(&self.token_to_creator.get(&token_id).unwrap())
    }

    pub fn get_sequence(&self, token_id: u128) -> u128 {
        self.id
    }

    pub fn get_aid(&self, account: AccountId) -> u32 {
        return self.account_to_aid.get(&account).unwrap();
    }

    pub fn get_access_token_by_aid(&self) -> Option<String> {
        return self.aid_to_access_token.get(&self.get_aid(env::predecessor_account_id()));
    }

    pub fn read_message(&self, token_id: u128, account: AccountId, access_token_input: String) -> String {
        let aid = self.get_aid(account.clone());
        let access_token = self.aid_to_access_token.get(&aid);
        match access_token {
            None => {
                "Secret Letter: Please get the access_token first".to_string()
            },
            Some(access_token_input) => {
                let owner_id = self.tokens.owner_by_id.get(&token_id.to_string());
                match self.tokens.owner_by_id.get(&token_id.to_string()) {
                    None => {
                        log!("token_id {}, owner_by token_id {:?}, account {}", token_id, owner_id, account);
                        "Invalid token id!".to_string()
                    },
                    Some(account) => {
                        self.secret_message.get(&token_id).unwrap().to_string()
                    },
                    _ => {
                        log!("token_id {}, owner_by token_id {:?}, account {}", token_id, owner_id, account);
                        "Secret Letter: Only the holder can read the message".to_string() 
                    }
                }
            },
            _ => {
                log!("token_id {}, access_token store {:?}, access_token {}", token_id, access_token, access_token_input);
                "Secret Letter: Password wrong, cannot read the message".to_string()
            }
        }
    }

    pub fn set_message(&mut self, token_id: u128, message: String) -> String {
        if self.token_to_creator.get(&token_id).unwrap() != self.get_aid(env::predecessor_account_id()) {
            return "only owner can set the message".to_string();
        }
        self.secret_message.insert(&token_id, &message);
        "setting message completed".to_string()
    }

    #[payable]
    pub fn nft_mint(&mut self, message : Option<String>) -> Token{
        let amount: Balance = near_sdk::env::attached_deposit();
        log!("attach money is {}, singer_account_id {}, predecessor_account_id {}", amount, env::signer_account_id(), env::predecessor_account_id());
        let token_id = self.id;
        let token: Token = self.tokens.internal_mint_with_refund(self.id.to_string().clone(), env::predecessor_account_id(), 
            Some(TokenMetadata {
                title: Some(format!("Letter #{}", token_id.to_string())), // ex. "Arch Nemesis: Mail Carrier" or "Parcel #5055"
                description: Some(format!("Secret message inside the letter")), // free-form description
                media: Some("https://mndaily.com/wp-content/uploads/2019/06/graphics_6.25.19-letterstotheeditor-CMYK-01-900x900.jpeg".to_string()), // URL to associated media, preferably to decentralized, content-addressed storage
                media_hash: None, // Base64-encoded sha256 hash of content referenced by the `media` field. Required if `media` is included.
                copies: Some(1), // number of copies of this set of metadata in existence when token was minted.
                issued_at: None, // When token was issued or minted, Unix epoch in milliseconds
                expires_at: None, // When token expires, Unix epoch in milliseconds
                starts_at: None, // When token starts being valid, Unix epoch in milliseconds
                updated_at: None, // When token was last updated, Unix epoch in milliseconds
                extra: None, // anything extra the NFT wants to store on-chain. Can be stringified JSON.
                reference: None, // URL to an off-chain JSON file with more info.
                reference_hash: None 
            }),
            None
        );
        self.token_to_creator.insert(&token_id, &self.get_aid(env::predecessor_account_id()));
        self.secret_message.insert(&token_id, &message.unwrap());
        self.id = self.id + 1;
        token
    }
}

near_contract_standards::impl_non_fungible_token_core!(Contract, tokens);
near_contract_standards::impl_non_fungible_token_approval!(Contract, tokens);
near_contract_standards::impl_non_fungible_token_enumeration!(Contract, tokens);

#[near_bindgen]
impl NonFungibleTokenMetadataProvider for Contract {
    fn nft_metadata(&self) -> NFTContractMetadata {
        self.metadata.get().unwrap()
    }
}

#[cfg(all(test, not(target_arch = "wasm32")))]
mod tests {
    use near_sdk::test_utils::{accounts, VMContextBuilder};
    use near_sdk::testing_env;

    use super::*;

    const MINT_STORAGE_COST: u128 = 5870000000000000000000;

    fn get_context(predecessor_account_id: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder
            .current_account_id(accounts(0))
            .signer_account_id(predecessor_account_id.clone())
            .predecessor_account_id(predecessor_account_id);
        builder
    }

    fn sample_token_metadata() -> TokenMetadata {
        TokenMetadata {
            title: Some("Olympus Mons".into()),
            description: Some("The tallest mountain in the charted solar system".into()),
            media: None,
            media_hash: None,
            copies: Some(1u64),
            issued_at: None,
            expires_at: None,
            starts_at: None,
            updated_at: None,
            extra: None,
            reference: None,
            reference_hash: None,
        }
    }

    #[test]
    fn test_random_seed() {
        log!("{}", env::random_seed().get(..16).unwrap().to_vec());
    }

    #[test]
    fn test_ran() {
        log!("{}", get_img_uri());
    }

    #[test]
    fn test_new() {
        let mut context = get_context(accounts(1));
        testing_env!(context.build());
        let contract = Contract::new_default_meta(accounts(1).into());
        testing_env!(context.is_view(true).build());
        assert_eq!(contract.nft_token("1".to_string()), None);
    }

    #[test]
    #[should_panic(expected = "The contract is not initialized")]
    fn test_default() {
        let context = get_context(accounts(1));
        testing_env!(context.build());
        let _contract = Contract::default();
    }

    #[test]
    fn test_mint() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());

        let token_id = "0".to_string();
        let token = contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());
        assert_eq!(token.token_id, token_id);
        assert_eq!(token.owner_id, accounts(0).to_string());
        assert_eq!(token.metadata.unwrap(), sample_token_metadata());
        assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
    }

    #[test]
    fn test_transfer() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_transfer(accounts(1), token_id.clone(), None, None);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        if let Some(token) = contract.nft_token(token_id.clone()) {
            assert_eq!(token.token_id, token_id);
            assert_eq!(token.owner_id, accounts(1).to_string());
            assert_eq!(token.metadata.unwrap(), sample_token_metadata());
            assert_eq!(token.approved_account_ids.unwrap(), HashMap::new());
        } else {
            panic!("token not correctly created, or not found by nft_token");
        }
    }

    #[test]
    fn test_approve() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
    }

    #[test]
    fn test_revoke() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        // alice revokes bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_revoke(token_id.clone(), accounts(1));
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), None));
    }

    #[test]
    fn test_revoke_all() {
        let mut context = get_context(accounts(0));
        testing_env!(context.build());
        let mut contract = Contract::new_default_meta(accounts(0).into());

        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(MINT_STORAGE_COST)
            .predecessor_account_id(accounts(0))
            .build());
        let token_id = "0".to_string();
        contract.nft_mint(token_id.clone(), accounts(0), sample_token_metadata());

        // alice approves bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(150000000000000000000)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_approve(token_id.clone(), accounts(1), None);

        // alice revokes bob
        testing_env!(context
            .storage_usage(env::storage_usage())
            .attached_deposit(1)
            .predecessor_account_id(accounts(0))
            .build());
        contract.nft_revoke_all(token_id.clone());
        testing_env!(context
            .storage_usage(env::storage_usage())
            .account_balance(env::account_balance())
            .is_view(true)
            .attached_deposit(0)
            .build());
        assert!(!contract.nft_is_approved(token_id.clone(), accounts(1), Some(1)));
    }
}

'''
'''--- sl-contract/nft/src/payouts.rs ---
#[derive(Serialize, Deserialize)]
#[serde(crate = "near_sdk::serde")]
pub struct Payout {
  pub payout: HashMap<AccountId, U128>,
}

pub trait Payouts{
  /// Given a `token_id` and NEAR-denominated balance, return the `Payout`.
  /// struct for the given token. Panic if the length of the payout exceeds
  /// `max_len_payout.`
  fn nft_payout(&self, token_id: String, balance: U128, max_len_payout: u32) -> Payout;
  /// Given a `token_id` and NEAR-denominated balance, transfer the token
  /// and return the `Payout` struct for the given token. Panic if the
  /// length of the payout exceeds `max_len_payout.`
  #[payable]
  fn nft_transfer_payout(
    &mut self,
    receiver_id: AccountId,
    token_id: String,
    approval_id: u64,
    balance: U128,
    max_len_payout: u32,
  ) -> Payout{
    assert_one_yocto();
    let payout = self.nft_payout(token_id, balance);
    self.nft_transfer(receiver_id, token_id, approval_id);
    payout
  }
}

'''
'''--- sl-contract/nft/src/royalty.rs ---
use crate::*;

pub trait NonFungibleTokenCore {
    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout;
    
    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout;
}

#[near_bindgen]
impl NonFungibleTokenCore for Contract {

    //calculates the payout for a token given the passed in balance. This is a view method
    fn nft_payout(&self, token_id: TokenId, balance: U128, max_len_payout: u32) -> Payout {
        //get the token object
		let token = self.tokens_by_id.get(&token_id).expect("No token");

        //get the owner of the token
        let owner_id = token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
	}

    //transfers the token to the receiver ID and returns the payout object that should be payed given the passed in balance. 
    #[payable]
    fn nft_transfer_payout(
        &mut self,
        receiver_id: AccountId,
        token_id: TokenId,
        approval_id: u64,
        memo: Option<String>,
        balance: U128,
        max_len_payout: u32,
    ) -> Payout { 
        //assert that the user attached 1 yocto NEAR for security reasons
        assert_one_yocto();
        //get the sender ID
        let sender_id = env::predecessor_account_id();
        //transfer the token to the passed in receiver and get the previous token object back
        let previous_token = self.internal_transfer(
            &sender_id,
            &receiver_id,
            &token_id,
            Some(approval_id),
            memo,
        );

        //refund the previous token owner for the storage used up by the previous approved account IDs
        refund_approved_account_ids(
            previous_token.owner_id.clone(),
            &previous_token.approved_account_ids,
        );

        //get the owner of the token
        let owner_id = previous_token.owner_id;
        //keep track of the total perpetual royalties
        let mut total_perpetual = 0;
        //get the u128 version of the passed in balance (which was U128 before)
        let balance_u128 = u128::from(balance);
		//keep track of the payout object to send back
        let mut payout_object = Payout {
            payout: HashMap::new()
        };
        //get the royalty object from token
		let royalty = previous_token.royalty;

        //make sure we're not paying out to too many people (GAS limits this)
		assert!(royalty.len() as u32 <= max_len_payout, "Market cannot payout to that many receivers");

        //go through each key and value in the royalty object
		for (k, v) in royalty.iter() {
            //get the key
			let key = k.clone();
            //only insert into the payout if the key isn't the token owner (we add their payout at the end)
			if key != owner_id {
                //
				payout_object.payout.insert(key, royalty_to_payout(*v, balance_u128));
				total_perpetual += *v;
			}
		}

		// payout to previous owner who gets 100% - total perpetual royalties
		payout_object.payout.insert(owner_id, royalty_to_payout(10000 - total_perpetual, balance_u128));

        //return the payout object
		payout_object
    }
}
'''
'''--- sl-contract/test-approval-receiver/Cargo.toml ---
[package]
name = "approval-receiver"
version = "0.0.1"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
near-contract-standards = "3.1.1"

'''
'''--- sl-contract/test-approval-receiver/src/lib.rs ---
/*!
A stub contract that implements nft_on_approve for simulation testing nft_approve.
*/
use near_contract_standards::non_fungible_token::approval::NonFungibleTokenApprovalReceiver;
use near_contract_standards::non_fungible_token::TokenId;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::ValidAccountId;
use near_sdk::{
    env, ext_contract, log, near_bindgen, setup_alloc, AccountId, Balance, Gas, PanicOnDefault,
    PromiseOrValue,
};

setup_alloc!();

const BASE_GAS: Gas = 5_000_000_000_000;
const PROMISE_CALL: Gas = 5_000_000_000_000;
const GAS_FOR_NFT_ON_APPROVE: Gas = BASE_GAS + PROMISE_CALL;

const NO_DEPOSIT: Balance = 0;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct ApprovalReceiver {
    non_fungible_token_account_id: AccountId,
}

// Defining cross-contract interface. This allows to create a new promise.
#[ext_contract(ext_self)]
pub trait ValueReturnTrait {
    fn ok_go(&self, msg: String) -> PromiseOrValue<String>;
}

// Have to repeat the same trait for our own implementation.
trait ValueReturnTrait {
    fn ok_go(&self, msg: String) -> PromiseOrValue<String>;
}

#[near_bindgen]
impl ApprovalReceiver {
    #[init]
    pub fn new(non_fungible_token_account_id: ValidAccountId) -> Self {
        Self { non_fungible_token_account_id: non_fungible_token_account_id.into() }
    }
}

#[near_bindgen]
impl NonFungibleTokenApprovalReceiver for ApprovalReceiver {
    /// Could do anything useful to the approval-receiving contract, such as store the given
    /// approval_id for use later when calling the NFT contract. Can also return whatever it wants,
    /// maybe after further promise calls. This one simulates "return anything" behavior only.
    /// Supports the following `msg` patterns:
    /// * "return-now" - immediately return `"cool"`
    /// * anything else - return the given `msg` after one more cross-contract call
    fn nft_on_approve(
        &mut self,
        token_id: TokenId,
        owner_id: AccountId,
        approval_id: u64,
        msg: String,
    ) -> PromiseOrValue<String> {
        // Verifying that we were called by non-fungible token contract that we expect.
        assert_eq!(
            &env::predecessor_account_id(),
            &self.non_fungible_token_account_id,
            "Only supports the one non-fungible token contract"
        );
        log!(
            "in nft_on_approve; sender_id={}, previous_owner_id={}, token_id={}, msg={}",
            &token_id,
            &owner_id,
            &approval_id,
            msg
        );
        match msg.as_str() {
            "return-now" => PromiseOrValue::Value("cool".to_string()),
            _ => {
                let prepaid_gas = env::prepaid_gas();
                let account_id = env::current_account_id();
                ext_self::ok_go(msg, &account_id, NO_DEPOSIT, prepaid_gas - GAS_FOR_NFT_ON_APPROVE)
                    .into()
            }
        }
    }
}

#[near_bindgen]
impl ValueReturnTrait for ApprovalReceiver {
    fn ok_go(&self, msg: String) -> PromiseOrValue<String> {
        log!("in ok_go, msg={}", msg);
        PromiseOrValue::Value(msg)
    }
}

'''
'''--- sl-contract/test-token-receiver/Cargo.toml ---
[package]
name = "token-receiver"
version = "0.0.1"
authors = ["Near Inc <hello@near.org>"]
edition = "2018"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
near-sdk = "3.1.0"
near-contract-standards = "3.1.1"

'''
'''--- sl-contract/test-token-receiver/src/lib.rs ---
/*!
A stub contract that implements nft_on_transfer for simulation testing nft_transfer_call.
*/
use near_contract_standards::non_fungible_token::core::NonFungibleTokenReceiver;
use near_contract_standards::non_fungible_token::TokenId;
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::json_types::ValidAccountId;
use near_sdk::{
    env, ext_contract, log, near_bindgen, setup_alloc, AccountId, Balance, Gas, PanicOnDefault,
    PromiseOrValue,
};

setup_alloc!();

const BASE_GAS: Gas = 5_000_000_000_000;
const PROMISE_CALL: Gas = 5_000_000_000_000;
const GAS_FOR_NFT_ON_TRANSFER: Gas = BASE_GAS + PROMISE_CALL;

const NO_DEPOSIT: Balance = 0;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize, PanicOnDefault)]
pub struct TokenReceiver {
    non_fungible_token_account_id: AccountId,
}

// Defining cross-contract interface. This allows to create a new promise.
#[ext_contract(ext_self)]
pub trait ValueReturnTrait {
    fn ok_go(&self, return_it: bool) -> PromiseOrValue<bool>;
}

// Have to repeat the same trait for our own implementation.
trait ValueReturnTrait {
    fn ok_go(&self, return_it: bool) -> PromiseOrValue<bool>;
}

#[near_bindgen]
impl TokenReceiver {
    #[init]
    pub fn new(non_fungible_token_account_id: ValidAccountId) -> Self {
        Self { non_fungible_token_account_id: non_fungible_token_account_id.into() }
    }
}

#[near_bindgen]
impl NonFungibleTokenReceiver for TokenReceiver {
    /// Returns true if token should be returned to `sender_id`
    /// Four supported `msg`s:
    /// * "return-it-now" - immediately return `true`
    /// * "keep-it-now" - immediately return `false`
    /// * "return-it-later" - make cross-contract call which resolves with `true`
    /// * "keep-it-later" - make cross-contract call which resolves with `false`
    /// Otherwise panics, which should also return token to `sender_id`
    fn nft_on_transfer(
        &mut self,
        sender_id: AccountId,
        previous_owner_id: AccountId,
        token_id: TokenId,
        msg: String,
    ) -> PromiseOrValue<bool> {
        // Verifying that we were called by non-fungible token contract that we expect.
        assert_eq!(
            &env::predecessor_account_id(),
            &self.non_fungible_token_account_id,
            "Only supports the one non-fungible token contract"
        );
        log!(
            "in nft_on_transfer; sender_id={}, previous_owner_id={}, token_id={}, msg={}",
            &sender_id,
            &previous_owner_id,
            &token_id,
            msg
        );
        match msg.as_str() {
            "return-it-now" => PromiseOrValue::Value(true),
            "return-it-later" => {
                let prepaid_gas = env::prepaid_gas();
                let account_id = env::current_account_id();
                ext_self::ok_go(
                    true,
                    &account_id,
                    NO_DEPOSIT,
                    prepaid_gas - GAS_FOR_NFT_ON_TRANSFER,
                )
                .into()
            }
            "keep-it-now" => PromiseOrValue::Value(false),
            "keep-it-later" => {
                let prepaid_gas = env::prepaid_gas();
                let account_id = env::current_account_id();
                ext_self::ok_go(
                    false,
                    &account_id,
                    NO_DEPOSIT,
                    prepaid_gas - GAS_FOR_NFT_ON_TRANSFER,
                )
                .into()
            }
            _ => env::panic(b"unsupported msg"),
        }
    }
}

#[near_bindgen]
impl ValueReturnTrait for TokenReceiver {
    fn ok_go(&self, return_it: bool) -> PromiseOrValue<bool> {
        log!("in ok_go, return_it={}", return_it);
        PromiseOrValue::Value(return_it)
    }
}

'''
'''--- sl-contract/tests/sim/main.rs ---
mod test_approval;
mod test_core;
mod test_enumeration;
mod utils;

'''
'''--- sl-contract/tests/sim/test_approval.rs ---
use crate::utils::{init, TOKEN_ID};
use near_contract_standards::non_fungible_token::Token;
use near_sdk_sim::{call, view};
use std::collections::HashMap;

#[test]
fn simulate_simple_approve() {
    let (root, nft, alice, token_receiver, _) = init();

    // root approves alice
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), alice.valid_account_id(), None),
        deposit = 170000000000000000000
    )
    .assert_success();

    // check nft_is_approved, don't provide approval_id
    let alice_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), None)).unwrap_json();
    assert!(alice_approved);

    // check nft_is_approved, with approval_id=1
    let alice_approval_id_is_1: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), Some(1)))
            .unwrap_json();
    assert!(alice_approval_id_is_1);

    // check nft_is_approved, with approval_id=2
    let alice_approval_id_is_2: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), Some(2)))
            .unwrap_json();
    assert!(!alice_approval_id_is_2);

    // alternatively, one could check the data returned by nft_token
    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    let mut expected_approvals = HashMap::new();
    expected_approvals.insert(alice.account_id(), 1);
    assert_eq!(token.approved_account_ids.unwrap(), expected_approvals);

    // root approves alice again, which changes the approval_id and doesn't require as much deposit
    call!(root, nft.nft_approve(TOKEN_ID.into(), alice.valid_account_id(), None), deposit = 1)
        .assert_success();

    let alice_approval_id_is_2: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), Some(2)))
            .unwrap_json();
    assert!(alice_approval_id_is_2);

    // approving another account gives different approval_id
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), token_receiver.valid_account_id(), None),
        // note that token_receiver's account name is longer, and so takes more bytes to store and
        // therefore requires a larger deposit!
        deposit = 260000000000000000000
    )
    .assert_success();

    let token_receiver_approval_id_is_3: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), token_receiver.valid_account_id(), Some(3)))
            .unwrap_json();
    assert!(token_receiver_approval_id_is_3);
}

#[test]
fn simulate_approval_with_call() {
    let (root, nft, _, _, approval_receiver) = init();

    let outcome = call!(
        root,
        nft.nft_approve(
            TOKEN_ID.into(),
            approval_receiver.valid_account_id(),
            Some("return-now".to_string())
        ),
        deposit = 290000000000000000000
    );
    assert!(outcome.is_ok());
    let res: String = outcome.unwrap_json();
    assert_eq!("cool".to_string(), res);

    // Approve again; will set different approval_id (ignored by approval_receiver).
    // The approval_receiver implementation will return given `msg` after subsequent promise call,
    // if given something other than "return-now".
    let msg = "hahaha".to_string();
    let outcome = call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), approval_receiver.valid_account_id(), Some(msg.clone())),
        deposit = 1
    );
    assert!(outcome.is_ok());
    let res: String = outcome.unwrap_json();
    assert_eq!(msg, res);
}

#[test]
fn simulate_approved_account_transfers_token() {
    let (root, nft, alice, _, _) = init();

    // root approves alice
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), alice.valid_account_id(), None),
        deposit = 170000000000000000000
    )
    .assert_success();

    // alice sends to self
    call!(
        alice,
        nft.nft_transfer(
            alice.valid_account_id(),
            TOKEN_ID.into(),
            Some(1),
            Some("gotcha! bahahaha".to_string())
        ),
        deposit = 1
    )
    .assert_success();

    // token now owned by alice
    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, alice.account_id());
}

#[test]
fn simulate_revoke() {
    let (root, nft, alice, token_receiver, _) = init();

    // root approves alice
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), alice.valid_account_id(), None),
        deposit = 170000000000000000000
    )
    .assert_success();

    // root approves token_receiver
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), token_receiver.valid_account_id(), None),
        deposit = 260000000000000000000
    )
    .assert_success();

    // root revokes alice
    call!(root, nft.nft_revoke(TOKEN_ID.into(), alice.valid_account_id()), deposit = 1)
        .assert_success();

    // alice is revoked...
    let alice_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), None)).unwrap_json();
    assert!(!alice_approved);

    // but token_receiver is still approved
    let token_receiver_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), token_receiver.valid_account_id(), None))
            .unwrap_json();
    assert!(token_receiver_approved);

    // root revokes token_receiver
    call!(root, nft.nft_revoke(TOKEN_ID.into(), token_receiver.valid_account_id()), deposit = 1)
        .assert_success();

    // alice is still revoked...
    let alice_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), None)).unwrap_json();
    assert!(!alice_approved);

    // ...and now so is token_receiver
    let token_receiver_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), token_receiver.valid_account_id(), None))
            .unwrap_json();
    assert!(!token_receiver_approved);
}

#[test]
fn simulate_revoke_all() {
    let (root, nft, alice, token_receiver, _) = init();

    // root approves alice
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), alice.valid_account_id(), None),
        deposit = 170000000000000000000
    )
    .assert_success();

    // root approves token_receiver
    call!(
        root,
        nft.nft_approve(TOKEN_ID.into(), token_receiver.valid_account_id(), None),
        deposit = 260000000000000000000
    )
    .assert_success();

    // root revokes all
    call!(root, nft.nft_revoke_all(TOKEN_ID.into()), deposit = 1).assert_success();

    // alice is revoked...
    let alice_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), alice.valid_account_id(), None)).unwrap_json();
    assert!(!alice_approved);

    // but token_receiver is still approved
    let token_receiver_approved: bool =
        view!(nft.nft_is_approved(TOKEN_ID.into(), token_receiver.valid_account_id(), None))
            .unwrap_json();
    assert!(!token_receiver_approved);
}

'''
'''--- sl-contract/tests/sim/test_core.rs ---
use crate::utils::{init, TOKEN_ID};
use near_contract_standards::non_fungible_token::Token;
use near_sdk_sim::{call, view};

#[test]
fn simulate_simple_transfer() {
    let (root, nft, alice, _, _) = init();

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, root.account_id());

    call!(
        root,
        nft.nft_transfer(
            alice.valid_account_id(),
            TOKEN_ID.into(),
            None,
            Some("simple transfer".to_string())
        ),
        deposit = 1
    )
    .assert_success();

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, alice.account_id());
}

#[test]
fn simulate_transfer_call_fast_return_to_sender() {
    let (root, nft, _, receiver, _) = init();

    call!(
        root,
        nft.nft_transfer_call(
            receiver.valid_account_id(),
            TOKEN_ID.into(),
            None,
            Some("transfer & call".into()),
            "return-it-now".into()
        ),
        deposit = 1
    );

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, root.account_id());
}

#[test]
fn simulate_transfer_call_slow_return_to_sender() {
    let (root, nft, _, receiver, _) = init();

    call!(
        root,
        nft.nft_transfer_call(
            receiver.valid_account_id(),
            TOKEN_ID.into(),
            None,
            Some("transfer & call".into()),
            "return-it-later".into()
        ),
        deposit = 1
    );

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, root.account_id());
}

#[test]
fn simulate_transfer_call_fast_keep_with_sender() {
    let (root, nft, _, receiver, _) = init();

    call!(
        root,
        nft.nft_transfer_call(
            receiver.valid_account_id(),
            TOKEN_ID.into(),
            None,
            Some("transfer & call".into()),
            "keep-it-now".into()
        ),
        deposit = 1
    );

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, receiver.account_id());
}

#[test]
fn simulate_transfer_call_slow_keep_with_sender() {
    let (root, nft, _, receiver, _) = init();

    call!(
        root,
        nft.nft_transfer_call(
            receiver.valid_account_id(),
            TOKEN_ID.into(),
            None,
            Some("transfer & call".into()),
            "keep-it-later".into()
        ),
        deposit = 1
    );

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, receiver.account_id());
}

#[test]
fn simulate_transfer_call_receiver_panics() {
    let (root, nft, _, receiver, _) = init();

    call!(
        root,
        nft.nft_transfer_call(
            receiver.valid_account_id(),
            TOKEN_ID.into(),
            None,
            Some("transfer & call".into()),
            "incorrect message".into()
        ),
        deposit = 1
    );

    let token: Token = view!(nft.nft_token(TOKEN_ID.into())).unwrap_json();
    assert_eq!(token.owner_id, root.account_id());
}

'''
'''--- sl-contract/tests/sim/test_enumeration.rs ---
use crate::utils::{helper_mint, init};
use near_contract_standards::non_fungible_token::Token;
use near_sdk::json_types::U128;
use near_sdk_sim::{view, ContractAccount, UserAccount};
use non_fungible_token::ContractContract as NftContract;

fn mint_more(root: &UserAccount, nft: &ContractAccount<NftContract>) {
    helper_mint(
        "1".to_string(),
        &root,
        &nft,
        "Black as the Night".to_string(),
        "In charcoal".to_string(),
    );
    helper_mint(
        "2".to_string(),
        &root,
        &nft,
        "Hamakua".to_string(),
        "Vintage recording".to_string(),
    );
    helper_mint(
        "3".to_string(),
        &root,
        &nft,
        "Aloha ke akua".to_string(),
        "Original with piano".to_string(),
    );
}

#[test]
fn simulate_enum_total_supply() {
    let (root, nft, _, _, _) = init();
    mint_more(&root, &nft);

    let total_supply: U128 = view!(nft.nft_total_supply()).unwrap_json();
    assert_eq!(total_supply, U128::from(4));
}

#[test]
fn simulate_enum_nft_tokens() {
    let (root, nft, _, _, _) = init();
    mint_more(&root, &nft);

    // No optional args should return all
    let mut tokens: Vec<Token> = view!(nft.nft_tokens(None, None)).unwrap_json();
    assert_eq!(tokens.len(), 4);
    // Start at "1", with no limit arg
    tokens = view!(nft.nft_tokens(Some(U128::from(1)), None)).unwrap_json();
    assert_eq!(tokens.len(), 3);
    assert_eq!(tokens.get(0).unwrap().token_id, "1".to_string());
    assert_eq!(tokens.get(1).unwrap().token_id, "2".to_string());
    assert_eq!(tokens.get(2).unwrap().token_id, "3".to_string());

    // Start at "2", with limit 1
    tokens = view!(nft.nft_tokens(Some(U128::from(2)), Some(1u64))).unwrap_json();
    assert_eq!(tokens.len(), 1);
    assert_eq!(tokens.get(0).unwrap().token_id, "2".to_string());

    // Don't specify from_index, but limit 2
    tokens = view!(nft.nft_tokens(None, Some(2u64))).unwrap_json();
    assert_eq!(tokens.len(), 2);
    assert_eq!(tokens.get(0).unwrap().token_id, "0".to_string());
    assert_eq!(tokens.get(1).unwrap().token_id, "1".to_string());
}

#[test]
fn simulate_enum_nft_supply_for_owner() {
    let (root, nft, alice, _, _) = init();

    // Get number from account with no NFTs
    let mut owner_num_tokens: U128 =
        view!(nft.nft_supply_for_owner(alice.valid_account_id())).unwrap_json();
    assert_eq!(owner_num_tokens, U128::from(0));

    owner_num_tokens = view!(nft.nft_supply_for_owner(root.valid_account_id())).unwrap_json();
    assert_eq!(owner_num_tokens, U128::from(1));

    mint_more(&root, &nft);

    owner_num_tokens = view!(nft.nft_supply_for_owner(root.valid_account_id())).unwrap_json();
    assert_eq!(owner_num_tokens, U128::from(4));
}

#[test]
fn simulate_enum_nft_tokens_for_owner() {
    let (root, nft, alice, _, _) = init();
    mint_more(&root, &nft);

    // Get tokens from account with no NFTs
    let mut owner_tokens: Vec<Token> =
        view!(nft.nft_tokens_for_owner(alice.valid_account_id(), None, None)).unwrap_json();
    assert_eq!(owner_tokens.len(), 0);

    // Get tokens with no optional args
    owner_tokens =
        view!(nft.nft_tokens_for_owner(root.valid_account_id(), None, None)).unwrap_json();
    assert_eq!(owner_tokens.len(), 4);

    // With from_index and no limit
    owner_tokens =
        view!(nft.nft_tokens_for_owner(root.valid_account_id(), Some(U128::from(2)), None))
            .unwrap_json();
    assert_eq!(owner_tokens.len(), 2);
    assert_eq!(owner_tokens.get(0).unwrap().token_id, "2".to_string());
    assert_eq!(owner_tokens.get(1).unwrap().token_id, "3".to_string());

    // With from_index and limit 1
    owner_tokens =
        view!(nft.nft_tokens_for_owner(root.valid_account_id(), Some(U128::from(1)), Some(1)))
            .unwrap_json();
    assert_eq!(owner_tokens.len(), 1);
    assert_eq!(owner_tokens.get(0).unwrap().token_id, "1".to_string());

    // No from_index but limit 3
    owner_tokens =
        view!(nft.nft_tokens_for_owner(root.valid_account_id(), None, Some(3))).unwrap_json();
    assert_eq!(owner_tokens.len(), 3);
    assert_eq!(owner_tokens.get(0).unwrap().token_id, "0".to_string());
    assert_eq!(owner_tokens.get(1).unwrap().token_id, "1".to_string());
    assert_eq!(owner_tokens.get(2).unwrap().token_id, "2".to_string());
}

'''
'''--- sl-contract/tests/sim/utils.rs ---
use approval_receiver::ApprovalReceiverContract;
use near_contract_standards::non_fungible_token::metadata::TokenMetadata;
use non_fungible_token::ContractContract as NftContract;
use token_receiver::TokenReceiverContract;

use near_contract_standards::non_fungible_token::TokenId;
use near_sdk_sim::{call, deploy, init_simulator, to_yocto, ContractAccount, UserAccount};

// Load in contract bytes at runtime
near_sdk_sim::lazy_static_include::lazy_static_include_bytes! {
    NFT_WASM_BYTES => "res/non_fungible_token.wasm",
    TOKEN_RECEIVER_WASM_BYTES => "res/token_receiver.wasm",
    APPROVAL_RECEIVER_WASM_BYTES => "res/approval_receiver.wasm",
}

const NFT_ID: &str = "nft";
const TOKEN_RECEIVER_ID: &str = "token-receiver";
const APPROVAL_RECEIVER_ID: &str = "approval-receiver";

// TODO: how to export String instead of &str? Way too much `into`/`to_string` with &str.
pub const TOKEN_ID: &str = "0";

/// Initialize simulator and return:
/// * root: the root user, set as owner_id for NFT contract, owns a token with ID=1
/// * nft: the NFT contract, callable with `call!` and `view!`
/// * alice: a user account, does not yet own any tokens
/// * token_receiver: a contract implementing `nft_on_transfer` for use with `transfer_and_call`
pub fn init() -> (
    UserAccount,
    ContractAccount<NftContract>,
    UserAccount,
    ContractAccount<TokenReceiverContract>,
    ContractAccount<ApprovalReceiverContract>,
) {
    let root = init_simulator(None);
    // uses default values for deposit and gas
    let nft = deploy!(
        // Contract Proxy
        contract: NftContract,
        // Contract account id
        contract_id: NFT_ID,
        // Bytes of contract
        bytes: &NFT_WASM_BYTES,
        // User deploying the contract,
        signer_account: root,
        // init method
        init_method: new_default_meta(
            root.valid_account_id()
        )
    );

    call!(
        root,
        nft.nft_mint(
            TOKEN_ID.into(),
            root.valid_account_id(),
            TokenMetadata {
                title: Some("Olympus Mons".into()),
                description: Some("The tallest mountain in the charted solar system".into()),
                media: None,
                media_hash: None,
                copies: Some(1u64),
                issued_at: None,
                expires_at: None,
                starts_at: None,
                updated_at: None,
                extra: None,
                reference: None,
                reference_hash: None,
            }
        ),
        deposit = 7000000000000000000000
    );

    let alice = root.create_user("alice".to_string(), to_yocto("100"));

    let token_receiver = deploy!(
        contract: TokenReceiverContract,
        contract_id: TOKEN_RECEIVER_ID,
        bytes: &TOKEN_RECEIVER_WASM_BYTES,
        signer_account: root,
        init_method: new(
            nft.valid_account_id()
        )
    );

    let approval_receiver = deploy!(
        contract: ApprovalReceiverContract,
        contract_id: APPROVAL_RECEIVER_ID,
        bytes: &APPROVAL_RECEIVER_WASM_BYTES,
        signer_account: root,
        init_method: new(
            nft.valid_account_id()
        )
    );

    (root, nft, alice, token_receiver, approval_receiver)
}

pub fn helper_mint(
    token_id: TokenId,
    root: &UserAccount,
    nft: &ContractAccount<NftContract>,
    title: String,
    desc: String,
) {
    call!(
        root,
        nft.nft_mint(
            token_id,
            root.valid_account_id(),
            TokenMetadata {
                title: Some(title),
                description: Some(desc),
                media: None,
                media_hash: None,
                copies: Some(1u64),
                issued_at: None,
                expires_at: None,
                starts_at: None,
                updated_at: None,
                extra: None,
                reference: None,
                reference_hash: None,
            }
        ),
        deposit = 7000000000000000000000
    );
}

'''
'''--- sl-fe/README.md ---
# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)

'''
'''--- sl-fe/package.json ---
{
  "name": "secret-letter",
  "version": "0.1.0",
  "private": true,
  "homepage": ".",
  "dependencies": {
    "@material-ui/core": "4.11.3",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.1.1",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^0.27.2",
    "bootstrap": "^5.1.3",
    "buffer": "^6.0.3",
    "near-api-js": "^0.44.2",
    "react": "^18.0.0",
    "react-bootstrap": "^2.2.3",
    "react-bootstrap-icons": "^1.8.2",
    "react-dom": "^18.0.0",
    "react-images-uploading": "^3.1.6",
    "react-router-bootstrap": "^0.26.1",
    "react-router-dom": "^6.3.0",
    "react-scripts": "5.0.1",
    "safe-buffer": "^5.2.1",
    "stream-browserify": "^3.0.0",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- sl-fe/public/index.html ---
<!-- <!DOCTYPE html> -->
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/sllogo2.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="Secret Letter"
      content="A message transfer example by the web3 solution."
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/sllogo2.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Secret Letter</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM" crossorigin="anonymous"></script> -->
    <script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.14.7/dist/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>
  </body>
</html>

'''
'''--- sl-fe/public/manifest.json ---
{
  "short_name": "Secret Letter",
  "name": "A message transfer example by the web3 solution.",
  "icons": [
    {
      "src": "sllogo128.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "sllogo.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "sllogo.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- sl-fe/public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- sl-fe/src/App.css ---
.App {
  text-align: center;
  width: 90%;
  margin-left: auto;
  margin-right: auto;
  font-family: "Nunito_Black";
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  font-family: "Nunito_Black";
  background-color:#FFFFFF;
  min-height: 65vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color:#383838;
}

.App-article {
  background-color:#FFFFFF;
  font-family: Rubik-VariableFont_wght;
  text-align: left;
  /* min-height: 60vh; */
  display: flex;
  flex-direction: column;
  justify-content: center;
  font-size: calc(10px + 1vmin);
  color:#383838;
}

.App-article .h2 {
  text-align: center;
}

.App-link {
  color: #61dafb;
}

.square {
  background: #FFFFFF;
  margin: 0% 5%;
  position: relative;
  width: 90%;
  height: 0;
  padding-bottom: 55.62%;
}
.square h1 {
  color: #fff;
}

.sl-navbar-brand-container-first {
  border: whitesmoke;
  border-style: solid;
  padding: 15px;
  /* border-width: thin; */
}

.sl-navbar-brand-container {
  border: whitesmoke;
  border-left-style: solid;
  border-right-style: solid;
  border-bottom-style: solid;
  padding: 15px;
  /* border-width: thin; */
}

.sl-navbar-brand {
  padding-top: 0.3125rem;
  padding-bottom: 0.3125rem;
  margin-right: 1rem;
  font-size: 1.25rem;
  text-decoration: none;
  white-space: nowrap;
  /* border-style:solid; */
  border-color:dimgrey;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@font-face {
  font-family: 'Merienda';
  src: url('ttf/MeriendaOne-Regular.ttf')
}

@font-face {
  font-family: 'RacingSansOne';
  src: url('ttf/RacingSansOne-Regular.ttf')
}

@font-face {
  font-family: 'Nunito_Black';
  src: url('ttf/Nunito-Black.ttf')
}

@font-face {
  font-family: 'Nunito_Bold';
  src: url('ttf/Nunito-Bold.ttf')
}

@font-face {
  font-family: 'FuzzyBubbles-Bold';
  src: url('ttf/FuzzyBubbles-Bold.ttf')
}

@font-face {
  font-family: 'Knewave-Regular';
  src: url('ttf/Knewave-Regular.ttf')
}

@font-face {
  font-family: 'LibreBarcode39-Regular';
  src: url('ttf/LibreBarcode39-Regular.ttf')
}

@font-face {
  font-family: 'PressStart2P-Regular';
  src: url('ttf/PressStart2P-Regular.ttf')
}

@font-face {
  font-family: 'Rubik-VariableFont_wght';
  src: url('ttf/Rubik-VariableFont_wght.ttf')
}

@import url("https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css");

'''
'''--- sl-fe/src/App.js ---
import { util } from './utils/util';
import React, { useState, useEffect } from 'react';
import {Navbar, Nav, NavItem, Container, Row, Col} from 'react-bootstrap'
import {BrowserRouter, Route, Routes, Link} from 'react-router-dom'
import SecretLetter from './SecretLetter'
import SecretMessage from './SecretMessage'
import MessageBox from './MessageBox'
import Home from './Home'
import Loading from './Loading'
import './App.css';

import {Buffer} from 'buffer';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require('buffer').Buffer;

let nftContractName = 'secret-letter.klyve-hack-2.testnet';

async function connectSLContract() {
  console.log('do connectContract in')
  // const viewMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner', 'read_message']
  // const changeMethods = ['nft_mint', 'set_message', 'set_password', 'nft_transfer']
  const viewNftMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner', 'read_message']
  const changeNftMethods = ['get_access_token', 'nft_mint', 'nft_transfer']
  await util.connectContract(nftContractName, viewNftMethods, changeNftMethods)
  console.log('do connectContract out')
}

let connecting = false
const accessTokenPrifix = 'sl-access-token:' + nftContractName + ':'

function App() {

  async function initApp() {
    if (connecting) {
      return
    }
    const localToken = window.localStorage.getItem(accessTokenPrifix + util.getWallet().getAccountId());
    connecting = true
    console.log('start to initiate app')
    await connectSLContract()
    let connected = util.isContractConnected(nftContractName)
    setContractConnected(connected)
    if (accessToken == null) {
      if (!localToken && connected) {
        let accToken = await util.call(nftContractName, ['get_access_token'], [{}])
        window.localStorage.setItem(accessTokenPrifix + util.getWallet().getAccountId(), accToken)
        util.setAccountToken(accToken)
        setAccessToken(accToken)
        console.log(accToken)
      } else {
        util.setAccountToken(localToken)
        setAccessToken(localToken)
      }
    }
    console.log('end to initiate app')
    connecting = false
  }

  const [login, setLogin] = useState(util.isConnected() ? util.getWallet().getAccountId() : 'Login')
  const [contractConnected, setContractConnected] = useState(false)
  const [accessToken, setAccessToken] = useState(null)

  useEffect(() => {
    if (util.isConnected()) {
      setLogin(util.getWallet().getAccountId())
      initApp()
    }
  }, [])

  return (
      <BrowserRouter>
      { ((contractConnected && accessToken != null) || !contractConnected) ?
        <>
        <nav className='navbar navbar-light bg-light d-flex justify-content-between'>
          <div style={{paddingLeft: '10px'}}>
            <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarToggleExternalContent' aria-controls='navbarToggleExternalContent' 
              aria-expanded='true' aria-label='Toggle navigation'>
              <span className='navbar-toggler-icon'></span>
            </button>
          </div>
          <div style={{paddingRight: '10px'}}>
            {login === 'Login' ? 
            <button className='btn btn-success' style={{color: 'white', fontFamily: 'Rubik-VariableFont_wght' }} type='button'
              onClick={()=> { 
                util.signIn(nftContractName, ['set_access_token', 'get_access_token'])
              }}
            >{login}</button> :
            <button className='btn btn-success' style={{color: 'white', fontFamily: 'Rubik-VariableFont_wght' }} type='button'
              onClick={()=> { 
                setLogin('Login')
                util.signOut()
              }}
            >{login}</button>
            }
          </div>
        </nav>
        <div className='collapse' id='navbarToggleExternalContent' style={{width: '100%', position: 'absolute', zIndex: '2'}}>
          <div className='bg-light'>
            <div className='sl-navbar-brand-container-first'>
              <Link className='sl-navbar-brand' style={{color: 'DimGrey'}} to='/home' 
                onClick={()=>{document.getElementById('navbarToggleExternalContent').classList.remove('show')}}
                >Home</Link>
            </div>
            <div className='sl-navbar-brand-container'>
              <Link className='sl-navbar-brand' style={{color: 'DimGrey'}} to='/messagebox'
                onClick={()=>{document.getElementById('navbarToggleExternalContent').classList.remove('show')}}
                >Messagebox</Link>
            </div>
            <div className='sl-navbar-brand-container'>
              <Link className='sl-navbar-brand' style={{color: 'DimGrey'}} to='/secretmessage'
                onClick={()=>{document.getElementById('navbarToggleExternalContent').classList.remove('show')}}
                >Secret Message</Link>
            </div>
            <div className='sl-navbar-brand-container'>
              <Link className='sl-navbar-brand' style={{color: 'DimGrey'}} to='/about'
                onClick={()=>{document.getElementById('navbarToggleExternalContent').classList.remove('show')}}
                >About</Link>
            </div>
          </div>
        </div>
        <Container fluid={true}>
          <Routes>
            <Route path='/' element={<Home/>}/>
            <Route path='/home' element={<Home/>}/>
            <Route path='/messagebox' element={<MessageBox/>}/>
            <Route path='/secretmessage' element={<SecretMessage contractConnected={contractConnected}/>}/>
          </Routes>
        </Container>
        </>:
        <Container fluid={true}>
          <Routes>
            <Route path='/' element={<Loading/>}/>
            <Route path='/home' element={<Loading/>}/>
            <Route path='/messagebox' element={<Loading/>}/>
            <Route path='/secretmessage' element={<Loading/>}/>
          </Routes>
        </Container>
        }
      </BrowserRouter>    
  );
}

export default App;

'''
'''--- sl-fe/src/App.test.js ---
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});

'''
'''--- sl-fe/src/Home.css ---
.btn-enter {
  border-radius:3rem;
  padding-top: 15px;
  padding-bottom: 15px;
  padding-left: 50px; 
  padding-right: 50px;
}
'''
'''--- sl-fe/src/Home.js ---
import './App.css';
import './Home.css';
import { Link } from 'react-router-dom'
import { Buffer } from 'buffer';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require('buffer').Buffer;

const Home = () => {
  return (
    <div className='App'>
      <header className='App-header'>
        <div>
          <h1 style={{color: 'DarkBlue', fontSize: '60px'}}>Secret Letter</h1>
        </div>
        <div>
          <h2 style={{color: 'Indigo'}}>
            Send a secret to your friend.   Keep your secret on the NFT.
          </h2>
        </div>
      </header>
      <article className='App-article'>
        <div className='row'>
          <section className='col-lg-6 col-md-12'>
            <h2 style={{textAlign: 'center'}}>Introduction</h2>
            <div style={{width: '80%', marginLeft: 'auto', marginRight: 'auto'}}>
              <p>The secret letter is an NFT project based on NEAR protocol. We want to show the NFT is not just a JPEG or a certificate. It can apply to things by your imagination.</p>
              <br/>
              <p>In phase one, we want to create two kinds of letters (an NFT minted by the site). The first one we call it secret letter. It's rewritable, and you can write some messages in the letter and send it to your friend, and others know your friends have the message but aren't capable of reading the content.</p>
              <br/>
              <p>The second one we call secret messages. The content is immutable, and can be traded on the secondary market. Each secret message has its credit start from 5. The holder who has read the message can like or dislike the message. Wen a message's credit goes to 0, it'll be burned and we'll disclose the content of the message. And there is also a scoreboard for these messages, everyone who joins the project can see the messages' scores.</p>
            </div>
          </section>
          <section className='col-lg-6 col-md-12'>
            <div className='d-flex justify-content-center align-items-center' style={{width: '100%', height:'50%', minHeight: '120px'}}>
              <Link className='btn btn-warning btn-enter' to='/secretmessage'>start</Link>
            </div>
            <div style={{height:'50%'}}>
            </div>
          </section>
        </div>
      </article>
    </div>
  );
}

export default Home;

'''
'''--- sl-fe/src/Loading.js ---

function Loading() {
    console.log("do loading")
    return(
    <div className="d-flex justify-content-around align-items-center" style={{height:'100%'}}>
        <div/>
        <div/>
        <div className="spinner-grow spinner-grow-sm" role="status" style={{color: 'Gainsboro'}}>
            {/* <span className="sr-only">Loading...</span> */}
        </div>
        <div className="spinner-grow spinner-grow-sm" role="status" style={{color: 'Gainsboro'}}>
            {/* <span className="sr-only">Loading...</span> */}
        </div>
        <div className="spinner-grow spinner-grow-sm" role="status" style={{color: 'Gainsboro'}}>
            {/* <span className="sr-only">Loading...</span> */}
        </div>
        <div/>
        <div/>
    </div>);

}

export default Loading;
'''
'''--- sl-fe/src/MessageBox.js ---
import { util } from './utils/util';
import './App.css';
import React, { useEffect, useState } from 'react';
import { Buffer } from 'buffer';
import { Button } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';

Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

let nfts = {}
let nftContractName = 'secret-letter.klyve-hack.testnet';

const ONE_NEAR = 1000000000000000000000000;

async function mintWithMessage(message) {
  await connectNFtContract()
  const yoctoAmount = (0.025 * 1000000000000000000000000).toLocaleString('fullwide', { useGrouping: false })
  await util.call(nftContractName, 'nft_mint', [{ message: message }, "300000000000000", yoctoAmount])
}

async function readMessage(tokenId, password) {
  await connectNFtContract()
  tokenId = tokenId || 0
  password = password || ''
  return await util.call(nftContractName, 'read_message', [{ token_id: parseInt(tokenId), password: password, account: util.getWallet().getAccountId() }])
}

async function transferNft(tokenId, receiver) {
  await connectNFtContract()
  tokenId = tokenId || 0
  return await util.call(nftContractName, 'nft_transfer', [{ token_id: tokenId, receiver_id: receiver }, "300000000000000", "1"])
}

async function setAccountPassword(password) {
  await connectNFtContract()
  return await util.call(nftContractName, 'set_password', [{ password: password }])
}

async function connectNFtContract() {
  const viewMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner', 'read_message']
  const changeMethods = ['nft_mint', 'set_message', 'set_password', 'nft_transfer']
  await util.connectContract(nftContractName, viewMethods, changeMethods)
  console.log('nft contract connected')
}

async function handleLikelyNFTs(setShowNfts) {
  const nftContracts = await util.getLikelyNFTs()
  var filtered = nftContracts.filter(function(value, index, arr){ 
    return value !== nftContractName;
  });
  filtered = [nftContractName, ...filtered]
  const viewNftMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner']
  const changeNftMethods = []
  const walletId = util.getWallet().getAccountId()
  for (var c of filtered) {
    await util.connectContract(c, viewNftMethods, changeNftMethods)
    nfts[c] = await util.call(c, 'nft_tokens_for_owner', [{ account_id: walletId }])
  }
  let show = []
  for (var prop in nfts) {
    show = [...show, ...nfts[prop]]
  }
  setShowNfts(show)
}

async function initPage(setShowNfts, setConnected) {
  setConnected(util.isConnected())
  handleLikelyNFTs(setShowNfts)
}

function SecretLetter() {

  const [connected, setConnected] = useState(false);
  const [showNfts, setShowNfts] = useState([]);
  const [secretMessage, setSecretMessage] = useState('');
  const [letterNumber, setLetterNumber] = useState('');
  const [messageToShow, setMessageToShow] = useState('');
  const [password, setPassword] = useState('');
  const [passwordToSend, setPasswordToSend] = useState('');
  const [tokenToTransfer, setTokenToTransfer] = useState('');
  const [receiver, setReceiver] = useState('');

  useEffect(() => {
    console.log(util.getWallet())
    console.log(util.isConnected())
    if (util.getWallet().isSignedIn()) {
      initPage(setShowNfts, setConnected)
    }
  }, [connected])
  return (
    <div className="App">
      <header className="App-article">
        <div>
          <div className="row">
            <div className="col-md-8 col-sm-12">
            </div>
            <div className="col-12">
              <p>Step</p>
              <p>1. Set up password for the account</p>
              <p>2. mint secret message with a letter</p>
              <p>3. Check the secret message with your password</p>
              <p>4. Send the letter to a friend, let him know the secret message</p>
            </div>
            <br/>
          </div>
          <br/>
        </div>
        {connected &&
          <div>
            <div className="d-flex bd-highlight flex-column">
              <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={password} onChange={(e)=>{setPassword(e.target.value)}} placeholder="password"/>
              <Button variant="alert alert-success" id="mintBtn" 
                onClick={()=> {
                  setAccountPassword(password)
                }}> set password
              </Button>
            </div>
            <br/>
            <div className="d-flex bd-highlight flex-column">
              <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={secretMessage} onChange={(e)=>{setSecretMessage(e.target.value)}} placeholder="message to mint"/>
              <Button variant="alert alert-success" id="mintBtn" 
                onClick={()=> {
                  mintWithMessage(secretMessage)
                }}> mint with message
              </Button>
            </div>
            <br/>
            <div className="d-flex bd-highlight flex-column">
              <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={passwordToSend} onChange={(e)=>{setPasswordToSend(e.target.value)}} placeholder="enter password"/>
              <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={letterNumber} onChange={(e)=>{setLetterNumber(e.target.value)}} placeholder="enter the #number of the letter"/>
              <Button variant="alert alert-success" id="mintBtn" 
                onClick={async ()=> {
                  const msg = await readMessage(letterNumber, passwordToSend)
                  setMessageToShow(msg)
                }}> read message
              </Button>
              <div className="border border-secondary">
                <div className="border border-secondary">
                  <p>{messageToShow}</p>
                </div>
              </div>
            </div>
            <br/>
            <div className="d-flex bd-highlight flex-column">
              <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={tokenToTransfer} onChange={(e)=>{setTokenToTransfer(e.target.value)}} placeholder="transfer token id"/>
              <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={receiver} onChange={(e)=>{setReceiver(e.target.value)}} placeholder="receiver id"/>
              <Button variant="alert alert-success" id="mintBtn" 
                onClick={async ()=> {
                  await transferNft(tokenToTransfer, receiver)
                }}> transfer nft
              </Button>
            </div>

            <br/>
            <div className="border border-secondary">
              <div>
                Your currnet NFTs
              </div>
              <div className="row">      
                { showNfts.length > 0 && showNfts.map((n, i) => {
                  return ( 
                    <div className="col-lg-6 col-md-6 col-sm-12">
                      <div className="card d-flex justify-content-around" key={'nft-card' + i}>
                        <img className="card-img-top" alt="Card image cap" src={n.metadata.media} key={'nft' + i}></img>
                        <div className="card-body">
                          <h5 className="card-title text-primary">{n.metadata.title}</h5>
                          <small className="card-text text-secondary">{n.metadata.description}</small>
                          {/* <a href="#" className="btn btn-primary">Go somewhere</a> */}
                        </div>
                      </div>
                    </div>)
                })}
              </div>
            </div>
          </div>
        }

      </header>
    </div>
  );
}

export default SecretLetter
'''
'''--- sl-fe/src/RankingList.js ---
import React, { useEffect, useState } from 'react';

function RankList() {
    const [rankList, setRankList] = useState([]);

    return(
        rankList.map((n, i)=>{
            <ul class="list-group list-group-horizontal">
            <li class="list-group-item">An item</li>
            <li class="list-group-item">A second item</li>
            <li class="list-group-item">A third item</li>
          </ul>
        }));

}

export default RankList;
'''
'''--- sl-fe/src/SecretLetter.js ---
// import { util } from './utils/util';
// import './App.css';
// import React, { useEffect, useState } from 'react';
// import { Buffer } from 'buffer';
// import { Button } from 'react-bootstrap';
// import 'bootstrap/dist/css/bootstrap.min.css';

// Buffer.from('anything','base64');
// window.Buffer = window.Buffer || require("buffer").Buffer;

// let nfts = {}
// let nftContractName = 'secret-letter.klyve-hack.testnet';

// const ONE_NEAR = 1000000000000000000000000;

// async function mintWithMessage(message) {
//   await connectNFtContract()
//   const yoctoAmount = (0.025 * 1000000000000000000000000).toLocaleString('fullwide', { useGrouping: false })
//   await util.call(nftContractName, 'nft_mint', [{ message: message }, "300000000000000", yoctoAmount])
// }

// async function readMessage(tokenId, password) {
//   await connectNFtContract()
//   tokenId = tokenId || 0
//   password = password || ''
//   return await util.call(nftContractName, 'read_message', [{ token_id: parseInt(tokenId), password: password, account: util.getWallet().getAccountId() }])
// }

// async function transferNft(tokenId, receiver) {
//   await connectNFtContract()
//   tokenId = tokenId || 0
//   return await util.call(nftContractName, 'nft_transfer', [{ token_id: tokenId, receiver_id: receiver }, "300000000000000", "1"])
// }

// async function setAccountPassword(password) {
//   await connectNFtContract()
//   return await util.call(nftContractName, 'set_password', [{ password: password }])
// }

// async function connectNFtContract() {
//   const viewMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner', 'read_message']
//   const changeMethods = ['nft_mint', 'set_message', 'set_password', 'nft_transfer']
//   await util.connectContract(nftContractName, viewMethods, changeMethods)
//   console.log('nft contract connected')
// }

// async function handleLikelyNFTs(setShowNfts) {
//   const nftContracts = await util.getLikelyNFTs()
//   var filtered = nftContracts.filter(function(value, index, arr){ 
//     return value !== nftContractName;
//   });
//   filtered = [nftContractName, ...filtered]
//   const viewNftMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner']
//   const changeNftMethods = []
//   const walletId = util.getWallet().getAccountId()
//   for (var c of filtered) {
//     await util.connectContract(c, viewNftMethods, changeNftMethods)
//     nfts[c] = await util.call(c, 'nft_tokens_for_owner', [{ account_id: walletId }])
//   }
//   let show = []
//   for (var prop in nfts) {
//     show = [...show, ...nfts[prop]]
//   }
//   setShowNfts(show)
// }

// async function initPage(setShowNfts, setConnected) {
//   setConnected(util.isConnected())
//   handleLikelyNFTs(setShowNfts)
// }

// function SecretLetter() {

//   const [connected, setConnected] = useState(false);
//   const [showNfts, setShowNfts] = useState([]);
//   const [secretMessage, setSecretMessage] = useState('');
//   const [letterNumber, setLetterNumber] = useState('');
//   const [messageToShow, setMessageToShow] = useState('');
//   const [password, setPassword] = useState('');
//   const [passwordToSend, setPasswordToSend] = useState('');
//   const [tokenToTransfer, setTokenToTransfer] = useState('');
//   const [receiver, setReceiver] = useState('');

//   useEffect(() => {
//     console.log(util.getWallet())
//     console.log(util.isConnected())
//     if (util.getWallet().isSignedIn()) {
//       initPage(setShowNfts, setConnected)
//     }
//   }, [connected])
//   return (
//     <div className="App">
//       <header className="App-header">
//         {/* <img src={logo} className="App-logo" alt="logo" /> */}
//         <div>
//           {connected &&
//             <p>Welcome <strong style={{color: "silver"}}>{util.getWallet().getAccountId()}</strong> ! You are connected!</p>
//           }
//         </div>
//         <div className={connected ? "d-flex flex-row" : "d-flex flex-column"}>
//         <h1 style={{color: "teal"}}>Secret Letter</h1> 
//           {connected ? <>&nbsp;&nbsp;</> : <></>}
//           <div>
//             <Button variant="alert alert-success" id="btn" 
//               onClick={()=> {
//                 if (!connected) {
//                   // util.signIn();
//                 } else {
//                   util.signOut()
//                   setConnected(false)
//                   setShowNfts([])
//                 }
//               }}>{!connected ? "Sign In": "Disconnect" }
//             </Button>
//           </div>
//         </div> 

//         <br/>
//         <div style={{width:"60%"}} >
//           <div className="border border-secondary">
//             <div className="border border-secondary">
//               <div className="row">
//                 <div className="col-md-8 col-sm-12">
//                 </div>
//                 <div className="col-12" style={{fontSize:"16px", textAlign: "left"}}>
//                   <p>
//                     It is the project to play with NFT. Every nft created by the contract can be seen as a letter. 
//                     The holder can set the message at the NFT and only the holder can read the message. <br/><br/>
//                     When the NFT is sold or transferred to other, and the receiver can read the secret message by his own password
//                   </p>

//                   <p>
//                     Since I want to optimize the user experience, I choose the password rather than verify by wallet, 
//                     and we can use the view function to read the message.
//                   </p>
//                 </div>
//                 <br/>
//               </div>
//             </div>
//           </div>
//         </div>
//         {connected &&
//           <div style={{width:"60%"}} >
//             <div className="border border-secondary">
//               <div className="border border-secondary">
//                 <div className="row">
//                   <div className="col-md-8 col-sm-12">
//                   </div>
//                   <div className="col-12" style={{fontSize:"16px", textAlign: "left"}}>
//                     <p>Step</p>
//                     <p>1. Set up password for the account</p>
//                     <p>2. mint secret message with a letter</p>
//                     <p>3. Check the secret message with your password</p>
//                     <p>4. Send the letter to a friend, let him know the secret message</p>
//                   </div>
//                   <br/>
//                 </div>
//               </div>
//             </div>
//             <br/>
//             <div className="d-flex bd-highlight flex-column">
//               <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={password} onChange={(e)=>{setPassword(e.target.value)}} placeholder="password"/>
//               <Button variant="alert alert-success" id="mintBtn" 
//                 onClick={()=> {
//                   setAccountPassword(password)
//                 }}> set password
//               </Button>
//             </div>
//             <br/>
//             <div className="d-flex bd-highlight flex-column">
//               <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={secretMessage} onChange={(e)=>{setSecretMessage(e.target.value)}} placeholder="message to mint"/>
//               <Button variant="alert alert-success" id="mintBtn" 
//                 onClick={()=> {
//                   if (util.isConnected()) {
//                     mintWithMessage(secretMessage)
//                   } else {
//                     alert('please login before create your letter')
//                   }
//                 }}> mint with message
//               </Button>
//             </div>
//             <br/>
//             <div className="d-flex bd-highlight flex-column">
//               <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={passwordToSend} onChange={(e)=>{setPasswordToSend(e.target.value)}} placeholder="enter password"/>
//               <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={letterNumber} onChange={(e)=>{setLetterNumber(e.target.value)}} placeholder="enter the #number of the letter"/>
//               <Button variant="alert alert-success" id="mintBtn" 
//                 onClick={async ()=> {
//                   const msg = await readMessage(letterNumber, passwordToSend)
//                   setMessageToShow(msg)
//                 }}> read message
//               </Button>
//               <div className="border border-secondary">
//                 <div className="border border-secondary">
//                   <p>{messageToShow}</p>
//                 </div>
//               </div>
//             </div>
//             <br/>
//             <div className="d-flex bd-highlight flex-column">
//               <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={tokenToTransfer} onChange={(e)=>{setTokenToTransfer(e.target.value)}} placeholder="transfer token id"/>
//               <input style={{fontSize: "14px", textAlign: "center"}} type="text" value={receiver} onChange={(e)=>{setReceiver(e.target.value)}} placeholder="receiver id"/>
//               <Button variant="alert alert-success" id="mintBtn" 
//                 onClick={async ()=> {
//                   await transferNft(tokenToTransfer, receiver)
//                 }}> transfer nft
//               </Button>
//             </div>

//             <br/>
//             <div className="border border-secondary">
//               <div>
//                 Your currnet NFTs
//               </div>
//               <div className="row">      
//                 { showNfts.length > 0 && showNfts.map((n, i) => {
//                   return ( 
//                     <div className="col-lg-6 col-md-6 col-sm-12">
//                       <div className="card d-flex justify-content-around" key={'nft-card' + i}>
//                         <img className="card-img-top" alt="Card image cap" src={n.metadata.media} key={'nft' + i}></img>
//                         <div className="card-body">
//                           <h5 className="card-title text-primary">{n.metadata.title}</h5>
//                           <small className="card-text text-secondary">{n.metadata.description}</small>
//                           {/* <a href="#" className="btn btn-primary">Go somewhere</a> */}
//                         </div>
//                       </div>
//                     </div>)
//                 })}
//               </div>
//             </div>
//           </div>
//         }

//       </header>
//     </div>
//   );
// }

// export default SecretLetter
'''
'''--- sl-fe/src/SecretMessage.css ---
.circle-icon {
    background: Gainsboro;
    width: 50px;
    height: 50px;
    border-radius: 50%;
    text-align: center;
    line-height: 100px;
    vertical-align: middle;
}

.circle-icon-sm {
    background: Gainsboro;
    width: 40px;
    height: 40px;
    border-radius: 50%;
    text-align: center;
    line-height: 100px;
    vertical-align: middle;
}

.process-flow {
    min-height: 20vh;
    /* display: flex; */
    flex-direction: row;
    /* justify-content: space-between; */
}

.step-line {
    margin-top: 15px;
    margin-bottom: 15px;
    text-align: center;
    flex-direction: row;
}

.step-text {
    margin-top: auto;
    margin-bottom: auto;
    text-align: center;
}

.sl-title {
    font-family: "Nunito_Bold";
}

.sl-letter-botton {
    margin: 10px;
    width: 30%;
}

.input-prepend-ext {
    width: '30%';
}
'''
'''--- sl-fe/src/SecretMessage.js ---
import { util } from './utils/util';
import './App.css';
import './SecretMessage.css';
import React, { useEffect, useState } from 'react';
import { Buffer } from 'buffer';
import { Modal, Button } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import * as Icon from 'react-bootstrap-icons';

Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

let nftContractName = 'secret-letter.klyve-hack-2.testnet';

const ONE_NEAR = 1000000000000000000000000;

async function mintWithMessage(message) {
  const yoctoAmount = (0.025 * ONE_NEAR).toLocaleString('fullwide', { useGrouping: false })
  await util.call(nftContractName, 'nft_mint', [{ message: message }, "300000000000000", yoctoAmount])
}

async function readMessage(tokenId, accToken) {
  tokenId = tokenId || 0
  accToken = accToken || ''
  return await util.call(nftContractName, 'read_message', [{ token_id: parseInt(tokenId), access_token_input: accToken, account: util.getWallet().getAccountId() }])
}

async function transferNft(tokenId, receiver) {
  tokenId = tokenId || 0
  return await util.call(nftContractName, 'nft_transfer', [{ token_id: tokenId, receiver_id: receiver }, "300000000000000", "1"])
}

async function initPage(setShowNfts) {
  setShowNfts(await util.call(nftContractName, 'nft_tokens_for_owner', [{ account_id: util.getWallet().getAccountId() }]))
}

async function like() {

}

async function dislike() {
  
}

function SecretLetter(contractConnected) {

  const [showNfts, setShowNfts] = useState([])
  const [secretMessage, setSecretMessage] = useState('')
  const [smTitle, setSmTitle] = useState('')
  const [smDescription, setSmDescription] = useState('')
  const [tokenToTransfer, setTokenToTransfer] = useState('')
  const [receiver, setReceiver] = useState('')
  const [messageContent, setMessageContent] = useState('')

  const [showMessage, setShowMessage] = useState(false);
  const [showSendbox, setShowSendbox] = useState(false);
  const handleClose = () => setShowMessage(false);
  const handleShowMessage = () => setShowMessage(true);
  const handleSendbox = (t) => {
    setTokenToTransfer(t)
    setShowSendbox(true)
  };
  const handleSendboxClose = () => {
    setReceiver('')
    setTokenToTransfer('')
    setShowSendbox(false)
  };

  useEffect(() => {
    if (util.getWallet().isSignedIn() && util.isContractConnected(nftContractName)) {
      initPage(setShowNfts)
    }
  }, [contractConnected])
  return (
    <div className="App">
      <header>
        <ul class="list-group list-group-horizontal-xxl">
          <li class="list-group-item">An item</li>
          <li class="list-group-item">A second item</li>
          <li class="list-group-item">A third item</li>
        </ul>
      </header>
      <article className="App-article">

        {/* {connected && */}
          <div className='row'>
            <div className='col-lg-6 col-md-12'>
              score dashboard
            </div>
            <div className='col-lg-6 col-md-12'>
              <div className="row" style={{marginTop: '5vh'}}>
                <div className="col-12">
                  <div className='d-flex flex-row step-line'>
                    <i className="circle-icon-sm d-flex justify-content-center align-items-center">
                      <Icon.Pencil style={{display: 'block', width:'70%', height: '60%'}}></Icon.Pencil>
                    </i>
                    <p className='step-text'>&nbsp;&nbsp;Write the secret in the letter</p>
                  </div>
                  <div className='d-flex flex-row step-line'>
                    <i className="circle-icon-sm d-flex justify-content-center align-items-center">
                        <Icon.EnvelopePlus style={{display: 'block', width:'70%', height: '60%'}}></Icon.EnvelopePlus>
                    </i> 
                    <p className='step-text'>&nbsp;&nbsp; Mint the letter</p>
                  </div>
                  <div className='d-flex flex-row step-line'>
                    <i className="circle-icon-sm d-flex justify-content-center align-items-center">
                        <Icon.Send style={{display: 'block', width:'70%', height: '60%'}}></Icon.Send>
                    </i> 
                    <p className='step-text'>&nbsp;&nbsp; Sale the letter on the market</p>
                  </div>
                </div>
                <br/>
              </div>
              <div className="d-flex bd-highlight flex-column">
                <div className="input-group mb-1">
                  <span className="input-group-text" id="sm-title" style={{width: '15%'}}><b>T</b><small>itle</small></span>
                  <input type="text" className="form-control" aria-label="Title" aria-describedby="sm-title"
                      value={smTitle} onChange={(e)=>{setSmTitle(e.target.value)}} placeholder="title"></input>
                </div>
                <div className="input-group mb-1">
                  <span className="input-group-text" id="sm-description" style={{width: '15%'}}><b>D</b><small>scp</small></span>
                  <textarea className="form-control" aria-label="Description" aria-describedby="sm-description"
                      value={smDescription} onChange={(e)=>{setSmDescription(e.target.value)}} placeholder="description"></textarea>
                </div>
                <div className="input-group mb-1">
                  <span className="input-group-text" id="sm-secret" style={{width: '15%'}}><b>S</b><small>crt</small></span>  
                  <textarea className="form-control" aria-label="S" aria-describedby="sm-secret"
                      value={secretMessage} onChange={(e)=>{setSecretMessage(e.target.value)}} placeholder="secret"></textarea>
                </div>

                <div className='row d-flex p-2 bd-highlight justify-content-end'>
                  <div className='col-lg-2 col-md-3 col-sm-8' id="mintBtn">
                    <Button className='btn btn-success' id="mintBtn" style={{width: '100%'}}
                      onClick={()=> {
                        if (util.isConnected()) {
                          mintWithMessage(secretMessage)
                        } else {
                          alert('please login before create your letter')
                        }
                      }}> mint
                    </Button> 
                  </div>
                </div>
              </div>
              <br/>
              <br/>
              <h4 className='sl-title'>Your Secret Messages</h4>
              <div className='border border-2 rounded'>
                <div className='row'>      
                  { showNfts.length > 0 && showNfts.map((n, i) => {
                    return ( 
                      <div className='col-lg-6 col-md-6 col-sm-12'>
                        <div className='card d-flex justify-content-around' key={'nft-card' + i}>
                          <img className='card-img-top' alt='Card image cap' src={n.metadata.media} key={'nft' + i}></img>
                          <div className="card-body">
                            <h5 className="card-title text-primary">{n.metadata.title}</h5>
                            <small className="card-text text-secondary">{n.metadata.description}</small>
                          </div>
                        </div>
                        <div>
                          <div className='card d-flex flex-row justify-content-between'>
                            <Button className='btn btn-warning sl-letter-botton' id={'read-' + i} 
                              onClick={async ()=> {
                                const msg = await readMessage(n.token_id, util.getAccountToken())
                                setMessageContent(msg)
                                handleShowMessage()
                              }}  data-bs-toggle="modal" data-bs-target="#exampleModal"> read
                            </Button>
                            <Button className='btn btn-danger sl-letter-botton' id={'transfer-' + i}
                              onClick={async ()=> {
                                handleSendbox(n.token_id)
                              }}> send
                            </Button>
                          </div>
                        </div>
                      </div>)
                  })}
                </div>

                
                <Modal show={showMessage} onHide={handleClose}>
                  <Modal.Header closeButton>
                    <Modal.Title>Secret Message</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>{messageContent}</Modal.Body>
                  <Modal.Footer>
                    <Button variant="primary" onClick={like}>
                      Like
                    </Button>
                    <Button variant="warning" onClick={()=>{dislike()}}>
                      Dislike
                    </Button>
                    <Button variant="secondary" onClick={()=>{handleClose()}}>
                      Close
                    </Button>
                  </Modal.Footer>
                </Modal>

                <Modal show={showSendbox} onHide={handleSendboxClose}>
                  <Modal.Header closeButton>
                    <Modal.Title>Transfer Message</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>
                    <span className="input-group-text" id="sm-title" style={{width: '15%'}}><b>To</b></span>
                    <input type="text" className="form-control" aria-label="receiver" aria-describedby="sm-title"
                        value={receiver} onChange={(e)=>{setReceiver(e.target.value)}} placeholder="receiver"></input>
                  </Modal.Body>
                  <Modal.Footer>
                    <Button variant="secondary" onClick={async () => await transferNft(tokenToTransfer, receiver)}>
                      Submit
                    </Button>
                    <Button variant="secondary" onClick={handleSendboxClose}>
                      Close
                    </Button>
                  </Modal.Footer>
                </Modal>

              </div>
            </div>
          </div>
        {/* } */}

      </article>
    </div>
  );
}

export default SecretLetter
'''
'''--- sl-fe/src/SecretMessage2.js ---
import { util } from './utils/util';
import './App.css';
import './SecretMessage.css';
import React, { useEffect, useState } from 'react';
import { Buffer } from 'buffer';
import { Modal, Button } from 'react-bootstrap';
import 'bootstrap/dist/css/bootstrap.min.css';
import * as Icon from 'react-bootstrap-icons';

Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

let nfts = {}
let nftContractName = 'secret-letter.klyve-hack.testnet';

const ONE_NEAR = 1000000000000000000000000;

async function mintWithMessage(message) {
  await connectNFtContract()
  const yoctoAmount = (0.025 * 1000000000000000000000000).toLocaleString('fullwide', { useGrouping: false })
  await util.call(nftContractName, 'nft_mint', [{ message: message }, "300000000000000", yoctoAmount])
}

async function readMessage(tokenId, password) {
  await connectNFtContract()
  tokenId = tokenId || 0
  password = password || ''
  return await util.call(nftContractName, 'read_message', [{ token_id: parseInt(tokenId), password: password, account: util.getWallet().getAccountId() }])
}

async function transferNft(tokenId, receiver) {
  await connectNFtContract()
  tokenId = tokenId || 0
  return await util.call(nftContractName, 'nft_transfer', [{ token_id: tokenId, receiver_id: receiver }, "300000000000000", "1"])
}

async function connectNFtContract() {
  const viewMethods = ['nft_total_supply', 'nft_tokens', 'nft_supply_for_owner', 'nft_tokens_for_owner', 'read_message']
  const changeMethods = ['nft_mint', 'set_message', 'set_password', 'nft_transfer']
  await util.connectContract(nftContractName, viewMethods, changeMethods)
  console.log('nft contract connected')
}

async function showSecretMessageList(setShowNfts) {
  const filtered = [nftContractName]
  const walletId = util.getWallet().getAccountId()
  nfts[nftContractName] = await util.call(nftContractName, 'nft_tokens_for_owner', [{ account_id: walletId }])
  let show = []
  for (var prop in nfts) {
    show = [...show, ...nfts[prop]]
  }
  setShowNfts(show)
}

async function initPage(setShowNfts, setConnected) {
  setConnected(util.isConnected())
  showSecretMessageList(setShowNfts)
}

function SecretLetter() {

  const [connected, setConnected] = useState(false)
  const [showNfts, setShowNfts] = useState([])
  const [secretMessage, setSecretMessage] = useState('')
  const [smTitle, setSmTitle] = useState('')
  const [smDescription, setSmDescription] = useState('')
  const [tokenToTransfer, setTokenToTransfer] = useState('')
  const [receiver, setReceiver] = useState('')
  const [messageContent, setMessageContent] = useState('')

  const [show, setShow] = useState(false);
  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  useEffect(() => {
    console.log(util.getWallet())
    console.log(util.isConnected())
    if (util.getWallet().isSignedIn() && util.isContractConnected(nftContractName)) {
      initPage(setShowNfts, setConnected)
    }
  }, [connected])
  return (
    <div className="App">
      <header>
      </header>
      <article className="App-article">
        {/* {connected && */}
          <div className='row'>
            <div className='col-lg-6 col-md-12'>
              score dashboard
            </div>
            <div className='col-lg-6 col-md-12'>
              <div className="row" style={{marginTop: '5vh'}}>
                <div className="col-12">
                  <div className='d-flex flex-row step-line'>
                    <i className="circle-icon-sm d-flex justify-content-center align-items-center">
                      <Icon.Pencil style={{display: 'block', width:'70%', height: '60%'}}></Icon.Pencil>
                    </i>
                    <p className='step-text'>&nbsp;&nbsp;Write the secret in the letter</p>
                  </div>
                  <div className='d-flex flex-row step-line'>
                    <i className="circle-icon-sm d-flex justify-content-center align-items-center">
                        <Icon.EnvelopePlus style={{display: 'block', width:'70%', height: '60%'}}></Icon.EnvelopePlus>
                    </i> 
                    <p className='step-text'>&nbsp;&nbsp; Mint the letter</p>
                  </div>
                  <div className='d-flex flex-row step-line'>
                    <i className="circle-icon-sm d-flex justify-content-center align-items-center">
                        <Icon.Send style={{display: 'block', width:'70%', height: '60%'}}></Icon.Send>
                    </i> 
                    <p className='step-text'>&nbsp;&nbsp; Sale the letter on the market</p>
                  </div>
                </div>
                <br/>
              </div>
              <div className="d-flex bd-highlight flex-column">
                <div className="input-group mb-1">
                  <span className="input-group-text" id="sm-title" style={{width: '15%'}}><b>T</b><small>itle</small></span>
                  <input type="text" className="form-control" aria-label="Title" aria-describedby="sm-title"
                      value={smTitle} onChange={(e)=>{setSmTitle(e.target.value)}} placeholder="title"></input>
                </div>
                <div className="input-group mb-1">
                  <span className="input-group-text" id="sm-description" style={{width: '15%'}}><b>D</b><small>scp</small></span>
                  <textarea className="form-control" aria-label="Description" aria-describedby="sm-description"
                      value={smDescription} onChange={(e)=>{setSmDescription(e.target.value)}} placeholder="description"></textarea>
                </div>
                <div className="input-group mb-1">
                  <span className="input-group-text" id="sm-secret" style={{width: '15%'}}><b>S</b><small>crt</small></span>  
                  <textarea className="form-control" aria-label="S" aria-describedby="sm-secret"
                      value={secretMessage} onChange={(e)=>{setSecretMessage(e.target.value)}} placeholder="secret"></textarea>
                </div>

                <div className='row d-flex p-2 bd-highlight justify-content-end'>
                  <div className='col-lg-2 col-md-3 col-sm-8' id="mintBtn">
                    <Button className='btn btn-success' id="mintBtn" style={{width: '100%'}}
                      onClick={()=> {
                        if (util.isConnected()) {
                          mintWithMessage(secretMessage)
                        } else {
                          alert('please login before create your letter')
                        }
                      }}> mint
                    </Button> 
                  </div>
                </div>
              </div>
              <br/>
              <br/>
              <h4 className='sl-title'>Your Secret Messages</h4>
              <div className='border border-2 rounded'>
                <div className='row'>      
                  { showNfts.length > 0 && showNfts.map((n, i) => {
                    return ( 
                      <div className='col-lg-6 col-md-6 col-sm-12'>
                        <div className='card d-flex justify-content-around' key={'nft-card' + i}>
                          <img className='card-img-top' alt='Card image cap' src={n.metadata.media} key={'nft' + i}></img>
                          <div className="card-body">
                            <h5 className="card-title text-primary">{n.metadata.title}</h5>
                            <small className="card-text text-secondary">{n.metadata.description}</small>
                          </div>
                        </div>
                        <div>
                          <div className='card d-flex flex-row justify-content-between'>
                            <Button className='btn btn-warning sl-letter-botton' id={'read-' + i} 
                              onClick={async ()=> {
                                const msg = await readMessage(n.token_id, util.getAccountToken())
                                setMessageContent(msg)
                                handleShow()
                              }}  data-bs-toggle="modal" data-bs-target="#exampleModal"> read
                            </Button>
                            <Button className='btn btn-danger sl-letter-botton' id={'transfer-' + i}
                              onClick={async ()=> {
                                await transferNft(tokenToTransfer, receiver)
                              }}> send
                            </Button>
                          </div>
                        </div>
                      </div>)
                  })}
                </div>

                
                <Modal show={show} onHide={handleClose}>
                  <Modal.Header closeButton>
                    <Modal.Title>Modal heading</Modal.Title>
                  </Modal.Header>
                  <Modal.Body>{messageContent}</Modal.Body>
                  <Modal.Footer>
                    <Button variant="secondary" onClick={handleClose}>
                      Close
                    </Button>
                    <Button variant="primary" onClick={handleClose}>
                      Save Changes
                    </Button>
                  </Modal.Footer>
                </Modal>
              </div>
            </div>
          </div>
        {/* } */}

      </article>
    </div>
  );
}

export default SecretLetter
'''
'''--- sl-fe/src/index.css ---
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  /* -webkit-font-smoothing: antialiased; */
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}

'''
'''--- sl-fe/src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';
import { util } from './utils/util';

const root = ReactDOM.createRoot(document.getElementById('root'));

util.init()
.then(() => {
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  )
})
.catch(console.error)

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();

'''
'''--- sl-fe/src/logo.svg ---
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>
'''
'''--- sl-fe/src/reportWebVitals.js ---
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;

'''
'''--- sl-fe/src/setupTests.js ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

'''
'''--- sl-fe/src/styles.css ---
body {
    margin: 0;
    padding: 0;
  }
  
  .App {
    /* position: absolute; */
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
  
  .crop-container {
    /* position: absolute; */
    top: 0;
    left: 0;
    right: 0;
    bottom: 80px;
  }
  
  .controls {
    position: absolute;
    bottom: 0;
    left: 50%;
    width: 50%;
    transform: translateX(-50%);
    height: 80px;
    display: flex;
    align-items: center;
  }
  
  .slider {
    padding: 22px 0px;
  }
  
'''
'''--- sl-fe/src/utils/axiosUtil.js ---
import axios from "axios"

export const axiosUtil = {

    postImage: async ( url, data ) => {
        var bodyFormData = new FormData();
        // for (const d of data) {
        bodyFormData.append("image", data["image"]);
        // }
        return await axios({
            method: "post",
            url: url,
            data: bodyFormData,
            headers: { "Content-Type": "multipart/form-data" },
        })
    }

} 

export default axiosUtil
'''
'''--- sl-fe/src/utils/util.js ---
import * as nearApi from "near-api-js";
import { Buffer } from 'buffer';
import 'bootstrap/dist/css/bootstrap.min.css';
Buffer.from('anything','base64');
window.Buffer = window.Buffer || require("buffer").Buffer;

const { keyStores, KeyPair, connect, WalletConnection } = nearApi;
const keyStore = new keyStores.BrowserLocalStorageKeyStore();
const testnetConfig = {
  networkId: "testnet",
  keyStore, 
  nodeUrl: "https://rpc.testnet.near.org",
  walletUrl: "https://wallet.testnet.near.org",
  helperUrl: "https://helper.testnet.near.org",
  explorerUrl: "https://explorer.testnet.near.org",
}

let _near;
let _wallet;
let _likelyNFTsContracts;
let _contracts = {};
let _accToken;

export const util = {

    async getLikelyNFTs() {
        if (!_wallet.isSignedIn()) {
            return
        }
        return _likelyNFTsContracts
    },

    setAccountToken(accToken) {
        _accToken = accToken;
    },

    getAccountToken() {
        return _accToken;
    },

    getWallet() {
        return _wallet
    },

    isConnected() {
        return _wallet.isSignedIn()
    },

    async signOut() {
        return await _wallet.signOut()
    },

    async signIn(contractName, methods) {
        _wallet.requestSignIn({contractId: contractName, methodNames: methods})
        // , successUrl: 'https://webhook.site/aa398144-e525-43c9-b907-87ae071b5614'})
    },

    async connectLikelyNFTs() {
        // const url = 'https://helper.testnet.near.org/account/{0}/likelyNFTs'.replace('{0}', _wallet.getAccountId())
        // const res = await fetch(url)
        // console.log(res)
        // return await res.json();
    },

    async init() {
        _near = await connect(testnetConfig)
        _wallet = new WalletConnection(_near)
    },

    async connectContract(contractName, viewMethods, changeMethods) {
        _contracts[contractName] = await new nearApi.Contract(
            _wallet.account(), // the account object that is connecting
            contractName,
            {
                // name of contract you're connecting to
                viewMethods: viewMethods, // view methods do not change state but usually return a value
                changeMethods: changeMethods, // change methods modify state
                sender: _wallet.account(), // account object to initialize and sign transactions.
            }
        );
    },

    isContractConnected(contractName) {
        return _contracts[contractName] !== undefined
    }, 

    async call(contractName, method, args) {
        return await _contracts[contractName][method](...args)
    }

}
'''