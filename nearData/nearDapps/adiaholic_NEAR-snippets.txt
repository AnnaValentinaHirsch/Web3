*GitHub Repository "adiaholic/NEAR-snippets"*

'''--- src/functions/access_keys.js ---
import { get_account } from "./get_account.js";
import chalk from 'chalk';

export async function add_key(new_key) {
    var explorer_url = process.env.CONFIG_EXPLORE_URL;

    try {
        const account = await get_account();
        var response = await account.addKey(
            new_key, // public key for new account 
        );
        explorer_url =  explorer_url + "/transactions/" + response['transaction_outcome']['id']

        console.log(explorer_url)
        console.log(chalk.bgMagenta(explorer_url))
        console.log("Key added");
        return true;
    } catch(e) {
        console.log("Error encountered: ", e);
        return false;
    }
}

export async function delete_key(key) {
    var explorer_url = process.env.CONFIG_EXPLORE_URL;

    try {
        const account = await get_account();
        var response = await account.deleteKey(
            key,
        );
        explorer_url =  explorer_url + "/transactions/" + response['transaction_outcome']['id']

        console.log(chalk.bgMagenta(explorer_url))
        console.log("Key deleted");
        return true;
    } catch(e) {
        console.log("Error encountered: ", e);
        return false;
    }
}

export async function list_keys() {
    var keys;
    try {
        const account = await get_account();
        keys = await account.getAccessKeys();
    } catch(e) {
        console.log("Error encountered: ", e);
    }
    return keys;
}

'''
'''--- src/functions/create_account.js ---
import dotenv from 'dotenv';
dotenv.config();
import { get_account } from "./get_account.js";

const wallet_id = process.env.NEAR_WALLET_ID

async function create_account(child_address) {
    const explorer_url =  explorer_url + "/transactions/" + response['transaction_outcome']['id']

    try {
        const account = await get_account();

        // Incorrect way to generate random keys
        const shuffle = str => [...str].sort(()=>Math.random()-.5).join('');
        var new_key = shuffle("a8hSHprDq2StXwMtNd43wDTXQYsjXcD4MJTXQYsjXca")

        const response = await account.createAccount(
            child_address + '.' + wallet_id,
            new_key, // public key for new account
            "10000000000000000000000" // initial balance for new account in yoctoNEAR
        );
        const explorer_url =  explorer_url + "/transactions/" + response['transaction_outcome']['id']
        console.log(explorer_url)
        console.log("Account created")
    } catch(e) {
        console.log("Error encountered: ", e)
    }
}

export default create_account;

'''
'''--- src/functions/delete_account.js ---
import * as nearAPI from "near-api-js";
const { connect } = nearAPI;
import { get_account } from "./get_account.js";

async function delete_account() {
    try {
        const account = await get_account();
        await account.deleteAccount();
        console.log("Account Deleted")
    } catch(e) {
        console.log("Error encountered: ", e)
    }
}

export default delete_account;

'''
'''--- src/functions/function_call.js ---
import * as nearAPI from "near-api-js";
const { connect } = nearAPI;
import { get_account } from "./get_account.js";

async function function_call() {
    try {
        const account = await get_account();
        const methodOptions = {
          viewMethods: ['getMessageByAccountId'],
          changeMethods: ['addMessage']
        };
        const contract = new Contract(
          account,
          'contract-id.testnet',
          methodOptions
        );
        // use a contract view method
        const messages = await contract.getMessages({
          accountId: 'example-account.testnet'
        });
        // use a contract change method
        await contract.addMessage({
          meta: 'some info',
          callbackUrl: 'https://example.com/callback',
          args: { text: 'my message' },
          amount: 1
        })
    } catch(e) {
        console.log("Error encountered: ", e)
    }
}

export default function_call;

'''
'''--- src/functions/get_account.js ---
import dotenv from 'dotenv';
dotenv.config();
import * as nearAPI from "near-api-js";
const { keyStores, KeyPair } = nearAPI;
const { connect } = nearAPI;

export async function get_config() {
    var PRIVATE_KEY = process.env.NEAR_PRIVATE_KEY;
    var NEAR_WALLET_ID = process.env.NEAR_WALLET_ID;
    var CONFIG_NETWORK_ID = process.env.CONFIG_NETWORK_ID
    const keyStore = new keyStores.InMemoryKeyStore();
    const keyPair = KeyPair.fromString(PRIVATE_KEY);
    await keyStore.setKey(CONFIG_NETWORK_ID, NEAR_WALLET_ID, keyPair);

    const config = {
        networkId: process.env.CONFIG_NETWORK_ID,
        keyStore,
        nodeUrl: process.env.CONFIG_NODE_URL,
        walletUrl: process.env.CONFIG_WALLET_URL,
        helperUrl: process.env.CONFIG_HELPER_URL,
        explorerUrl: process.env.CONFIG_EXPLORE_URL
    }
    return config;
}

export async function get_account() {
    var NEAR_WALLET_ID = process.env.NEAR_WALLET_ID;
    const config = await get_config();
    const near = await connect(config);
    const account = await near.account(NEAR_WALLET_ID);
    return account;
}

'''
'''--- src/functions/send_tokens.js ---
import dotenv, { config } from 'dotenv';
dotenv.config();

import * as nearAPI from "near-api-js";
const { connect, transactions } = nearAPI;
import { get_account } from "./get_account.js";

async function send_tokens(receiver_account) {
    const explorer_url = process.env.CONFIG_EXPLORE_URL;

    try {
        const account = await get_account();
        var response = await account.sendMoney(
            // "child.adiaholic.testnet", // receiver account
            receiver_account,
            "10000000000000000000000" // amount in yoctoNEAR
        );
        const explorer_url =  explorer_url + "/transactions/" + response['transaction_outcome']['id']
        console.log(explorer_url)
        console.log("Tokens sent")
    } catch(e) {
        console.log("Error encountered: ", e.type)
    }
}

export default send_tokens;

'''
'''--- src/functions/staking.js ---
import * as nearAPI from "near-api-js";
const { connect } = nearAPI;
import { get_account } from "./get_account.js";

export async function stake_tokens(amount) {
    try {
        const account = await get_account();
        const account_details = await account.getAccountDetails();
        res = await account.stake(account_details['authorizedApps'][0]['publicKey'], amount);
        console.log(res);
        console.log("Tokens staked");
    } catch(e) {
        console.log("Error encountered: ", e.type);
    }
}

'''
'''--- src/index.js ---
#!/usr/bin/env node
import dotenv from 'dotenv';
dotenv.config();
import chalk from 'chalk';

import inquirer from "inquirer";
import create_account from "./functions/create_account.js";
import send_tokens from "./functions/send_tokens.js";
import function_call from './functions/function_call.js';
import delete_account from './functions/delete_account.js';
import {add_key, delete_key, list_keys} from './functions/access_keys.js'
import {stake_tokens} from './functions/staking.js'
import { all_questions } from './utils.js'

async function start() {
  var choices = process.env.CHOICES;
  var choice_array = choices.split(",");

  inquirer
    .prompt([
      {
        type: 'list',
        name: 'task',
        message: 'What do you want to try?',
        choices: choice_array,
        pageSize: 9,
        loop: false
      },
    ])
    .then(answers => {
      console.log("You choise ", answers.task);
      switch(answers.task) {
        case 'Create account':
          console.log(chalk.green("Creating ... "))
          inquirer.prompt(all_questions['create_account']).then(answers => {
              var child_address = answers.response;
              create_account(child_address);
            }
          );
          break;

        case 'Deploy contract':
          console.log(chalk.green("Deploying ... "))
          break;

        case 'Function call':
          console.log(chalk.green("Calling function ... "))
          function_call();
          break;

        case 'Transfer':
          console.log(chalk.green("Transferring tokens ... "))
          inquirer.prompt(all_questions['transfer_tokens']).then(answers => {
              var receiver_address = answers.response;
              send_tokens(receiver_address);
            }
          );
          break;

        case 'Stake':
          console.log(chalk.green("Staking tokens ... "))
          inquirer.prompt(all_questions['stake_tokens']).then(answers => {
              var token_count = answers.response;
              stake_tokens(token_count);
            }
          );
          break;

        case 'Add key':
          console.log(chalk.green("Adding key ...  "))
          inquirer.prompt(all_questions['add_key']).then(answers => {
              var new_key = answers.response;
              add_key(new_key);
            }
          );
          break;

        case 'Delete key':
          console.log(chalk.green("Deleting key ... "))
          inquirer.prompt(all_questions['delete_key']).then(answers => {
              var key = answers.response;
              delete_key(key);
            }
          );
          break;

        case 'List keys':
          console.log(chalk.green("Listing all keys ... "))
          list_keys();
          break;
  
        case 'Delete account':
          console.log(chalk.green("Deleting account ... "))
          delete_account();
          break;
        default:
      }
    });
  }

start()

'''
'''--- src/utils.js ---

export const all_questions = {
    create_account: {
      type: 'input',
      name: 'response',
      message: "Enter child account name",
    },
    deploy_contract: {
      type: 'input',
      name: 'response',
      message: "This is in WIP!",
    },
    function_call: {
      type: 'input',
      name: 'response',
      message: "Enter receiver's address",
    },
    transfer_tokens: {
      type: 'input',
      name: 'response',
      message: "Enter receiver's address",
    },
    stake_tokens: {
      type: 'input',
      name: 'response',
      message: "How many tokens to stake",
    },
    add_key: {
      type: 'input',
      name: 'response',
      message: "Enter new key",
    },
    delete_key: {
      type: 'input',
      name: 'response',
      message: "Enter the key to be deleted",
    },
    list_keys: {
    },
    delete_account: {
    }
  }
  
'''
'''--- test/index.js ---
import dotenv from 'dotenv';
dotenv.config();
import chai from 'chai';
import { get_config, get_account } from '../src/functions/get_account.js'
import { add_key, delete_key, list_keys } from '../src/functions/access_keys.js'

const expect = chai.expect;

describe("Testing NEAR-API-JS", () => {
    it("Extrapolate config from .env", async () => {
        const config = await get_config();
        expect(config.networkId).to.equal(process.env.CONFIG_NETWORK_ID);
        expect(config.nodeUrl).to.equal(process.env.CONFIG_NODE_URL);
        expect(config.walletUrl).to.equal(process.env.CONFIG_WALLET_URL);
        expect(config.helperUrl).to.equal(process.env.CONFIG_HELPER_URL);
        expect(config.explorerUrl).to.equal(process.env.CONFIG_EXPLORE_URL);
    });

    it("Get account", async () => {
        const account = await get_account();
        expect(account.accountId).to.equal(process.env.NEAR_WALLET_ID);
    });

    it("Add & delete key", async () => {
        const key = "8hSHprDq2StXwMtNd43wDTXQYsjXcD4MJTXUYsjYfcx"
        var success = await add_key(key);
        expect(true).to.equal(success);

        var all_keys = await list_keys();
        all_keys = all_keys.map(x => {
            return x['public_key'];
        });
        var key_with_encryption_algo = "ed25519:" + key
        expect(true).to.equal(all_keys.includes(key_with_encryption_algo));

        success = await delete_key(key);
        expect(true).to.equal(success);

        var all_keys = await list_keys();
        all_keys = all_keys.map(x => {
            return x['public_key'];
        });
        key_with_encryption_algo = "ed25519:" + key
        expect(false).to.equal(all_keys.includes(key_with_encryption_algo));
    });

 });

'''