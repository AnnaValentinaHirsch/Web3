*GitHub Repository "ajju10/gif-library-near"*

'''--- frontend/App.js ---
import 'regenerator-runtime/runtime';
import React from 'react';
import {nanoid} from 'nanoid';

import './assets/global.css';

import {GifList, SignInPrompt, SignOutButton} from './ui-components';
import {Button, Center, Input, VStack} from "@chakra-ui/react";

export default function App({isSignedIn, gifCollection, wallet}) {
  const [_uiPleaseWait, setUiPleaseWait] = React.useState(true);
  const [inputValue, setInputValue] = React.useState('');
  const [gifList, setGifList] = React.useState([]);
  const [_gifCount, setGifCount] = React.useState(0);

  const getGifCount = async () => {
    gifCollection.getGifCount()
        .then(setGifCount)
        .catch((err) => {
          alert(err);
          console.log(err)
        })
  };

  const getGifList = async () => {
    gifCollection.getGifs()
        .then((res) => {
          console.log("GIF List", res);
          setGifList(res);
        })
        .catch((error) => {
          alert(error);
          console.log(error);
        })
        .finally(async () => {
          await getGifCount();
        });
  };

  const sendGifToNear = async () => {
    if (inputValue.length === 0) {
      console.log("No gif link given!");
      return;
    }
    setInputValue('');
    let gifId = nanoid();
    console.log('Gif link:', inputValue, "Gif ID", gifId);
    gifCollection.addGif(inputValue, gifId)
        .then(async () => {
          await getGifList();
        })
        .catch((error) => {
          alert(error);
          console.log(error);
        })
  };

  const onInputChange = (event) => {
    const {value} = event.target;
    setInputValue(value);
  };

  React.useEffect(() => {
    getGifList()
        .finally(() => {
          setUiPleaseWait(false);
        })
  }, []);

  /// If user not signed-in with wallet - show prompt
  if (!isSignedIn) {
    // Sign-in flow will reload the page later
    return <SignInPrompt gifList={gifList} onClick={() => wallet.signIn()}/>;
  }

  return (
      <>
        <SignOutButton accountId={wallet.accountId} onClick={() => wallet.signOut()}/>
        <Center>
          <form onSubmit={(event) => {
            event.preventDefault();
            sendGifToNear();
          }}>
            <VStack>
              <Input
                  value={inputValue}
                  onChange={onInputChange}
                  placeholder='Enter GIF Link'/>
              <Button colorScheme='teal'>Add GIF</Button>
            </VStack>
          </form>
        </Center>
        <br/>
        <div className="gif-list-container">
          <GifList gifList={gifList}/>
        </div>
      </>
  );
}

'''
'''--- frontend/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="assets/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="apple-touch-icon" href="assets/favicon.ico" />
    <title>GIF Library</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <script src="./index.js" type="module"></script>
  </body>
</html>

'''
'''--- frontend/index.js ---
// React
import React from 'react';
import {createRoot} from 'react-dom/client';
import App from './App';

// NEAR
import {GifCollectionContract} from './near-interface';
import {Wallet} from './near-wallet';

const CONTRACT_NAME = 'gif-library.ajju0.testnet';

let contractId = process.env.CONTRACT_NAME || CONTRACT_NAME;

console.log("Account Id", contractId);

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
const wallet = new Wallet({
  createAccessKeyFor: contractId
});

// Abstract the logic of interacting with the contract to simplify your flow
const gifCollection = new GifCollectionContract({
  contractId: contractId,
  walletToUse: wallet,
});

// Setup on page load
window.onload = async () => {
  const isSignedIn = await wallet.startUp()
  const container = document.getElementById('root');
  const root = createRoot(container);
  root.render(<App isSignedIn={isSignedIn} gifCollection={gifCollection} wallet={wallet}/>)
}

'''
'''--- frontend/near-interface.js ---
export class GifCollectionContract {
  constructor({contractId, walletToUse}) {
    this.contractId = contractId;
    this.wallet = walletToUse;
  }

  async getGifCount() {
    return await this.wallet.viewMethod({
      contractId: this.contractId,
      method: 'get_gif_count',
    })
  }

  async getGifs() {
    return await this.wallet.viewMethod({
      contractId: this.contractId,
      method: 'get_gifs',
    });
  }

  async addGif(link, gifId) {
    return await this.wallet.callMethod({
      contractId: this.contractId,
      method: 'add_gif',
      args: {'link': link, 'gif_id': gifId},
    });
  }
}

'''
'''--- frontend/near-wallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';

// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';

const THIRTY_TGAS = '30000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  walletSelector;
  wallet;
  network;
  createAccessKeyFor;

  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor
    this.network = 'testnet'
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [setupMyNearWallet({ iconUrl: MyNearIconUrl }),
      setupLedger({ iconUrl: LedgerIconUrl })],
    });

    const isSignedIn = this.walletSelector.isSignedIn();

    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId = this.walletSelector.store.getState().accounts[0].accountId;
    }

    return isSignedIn;
  }

  // Sign-in method
  signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, { contractId: this.createAccessKeyFor, description });
    modal.show();
  }

  // Sign-out method
  signOut() {
    this.wallet.signOut();
    this.wallet = this.accountId = this.createAccessKeyFor = null;
    window.location.replace(window.location.origin + window.location.pathname);
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({ contractId, method, args = {}, gas = THIRTY_TGAS, deposit = NO_DEPOSIT }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return providers.getTransactionLastResult(transaction);
  }
}
'''
'''--- frontend/ui-components.js ---
import React from 'react';
import {Image, SimpleGrid} from "@chakra-ui/react";

export function SignInPrompt({gifList, onClick}) {
  return (
      <>
        <GifList gifList={gifList}/>
        <br/>
        <p style={{textAlign: 'center'}}>
          <button onClick={onClick}>Sign in with NEAR Wallet</button>
        </p>
      </>
  );
}

export function SignOutButton({accountId, onClick}) {
  return (
      <button style={{float: 'right'}} onClick={onClick}>
        Sign out {accountId}
      </button>
  );
}

export function GifList({gifList}) {
  return (
      <SimpleGrid columns={[2, null, 3]} spacing='40px'>
        {gifList.map((gif) => (
            <Image key={gif.gif_id} src={gif.gif_link} alt="GIF Image"/>
        ))}
      </SimpleGrid>
  );
}

'''