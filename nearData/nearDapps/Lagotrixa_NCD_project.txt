*GitHub Repository "Lagotrixa/NCD_project"*

'''--- .github/dependabot.yml ---
version: 2
updates:
- package-ecosystem: cargo
  directory: "/contract"
  schedule:
    interval: daily
  open-pull-requests-limit: 10

'''
'''--- .github/workflows/tests.yml ---
name: Tests
on: 
  repository_dispatch:
    types: [tests-report]
  push:
jobs:
  tests:
    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '12'
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: wasm32-unknown-unknown
      - name: Install modules
        run: yarn
      - name: Run tests
        env:
          IS_GITHUB_ACTION: true
        run: yarn test

'''
'''--- .gitpod.yml ---
image:
  file: .gitpod.Dockerfile
# Options to prebuild the image after github events and set notifications/badges
github:
  prebuilds:
    # enable for the master/default branch (defaults to true)
    master: true
    # enable for all branches in this repo (defaults to false)
    branches: true
    # enable for pull requests coming from this repo (defaults to true)
    pullRequests: true
    # enable for pull requests coming from forks (defaults to false)
    pullRequestsFromForks: true
    # add a check to pull requests (defaults to true)
    addCheck: true
    # add a "Review in Gitpod" button as a comment to pull requests (defaults to false)
    addComment: true
    # add a "Review in Gitpod" button to the pull request's description (defaults to false)
    addBadge: false
    # add a label once the prebuild is ready to pull requests (defaults to false)
    addLabel: false

# List the start up tasks. You can start them in parallel in multiple terminals. See https://www.gitpod.io/docs/config-start-tasks/
tasks:
  - before: echo "nvm use default" >> ~/.bashrc && npm install -g near-cli && nvm use default
    init: yarn && yarn build
    command: source ~/.bashrc; gp open README-Gitpod.md && yarn deploy:dev && source ./neardev/dev-account.env && yarn start:dev

ports:
  - port: 1234
    onOpen: open-browser
  - port: 5000
    onOpen: ignore
'''
'''--- .theia/settings.json ---
{
    "editor.wordWrap": "on",
    "editor.fontSize": 19,
    "terminal.integrated.fontSize": 17,
    "editor.suggestFontSize": 16
}

'''
'''--- .travis.yml ---
language: rust
rust:
  - stable
os:
  - linux
  - osx
  - windows
env:
  - NODE_ENV=ci YARN_GPG=no
cache: cargo
before_install:
  - rustup target add wasm32-unknown-unknown
  - if [[ "$TRAVIS_OS_NAME" == "windows" ]]; then HOME="/c/Users/travis" && export NVS_HOME=$ProgramData/nvs && git clone --single-branch https://github.com/jasongin/nvs $NVS_HOME && source $NVS_HOME/nvs.sh && nvs --version && nvs add 12 && nvs use 12; fi
  - if [[ ! "$TRAVIS_OS_NAME" == "windows" ]]; then nvm install 12 && nvm use 12; fi
  - npm install -g yarn
  - yarn
git:
  autocrlf: false
script:
  - yarn test
'''
'''--- README-Gitpod.md ---
Counter example in Rust - Gitpod version
==================================================

This README is specific to Gitpod and this example. For local development, please see [README.md](README.md).

## Description

In Gitpod, the counter will start automatically. Please look in the terminal for a link to follow.

This contract implements simple counter backed by storage on blockchain.
Contract in `contract/src/lib.rs` provides methods to increment / decrement counter and get it's current value or reset.

Plus and minus buttons increase and decrease value correspondingly. When button L is toggled, a little light turns on, just for fun. RS button is for reset. LE and RE buttons to let the robot wink at you.

## To Test

```
cd contract
cargo test -- --nocapture
```

## To Explore

- `contract/src/lib.rs` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts
- `src/test.js` for the JS tests for the contract

## Data collection

By using Gitpod in this project, you agree to opt-in to basic, anonymous analytics. No personal information is transmitted. Instead, these usage statistics aid in discovering potential bugs and user flow information.

'''
'''--- README.md ---
NCD project (Near Wallet)
=================================

[![Open in Gitpod!](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/Lagotrixa/NCD_project/)

<!-- MAGIC COMMENT: DO NOT DELETE! Everything above this line is hidden on NEAR Examples page -->

## Description

The basis of the project is the repositories [Guest book in AS](https://github.com/near-examples/guest-book), [Simple counter in Rust](https://github.com/near-examples/rust-counter), [Lottery](https://github.com/ryantanwk/lottery). Used information from sources [Near SDK docs](https://www.near-sdk.io/contract-interface/payable-methods), [Examples near](https://examples.near.org/).
Contract in `contract/src/lib.rs` provides methods get/send Near. Only those users who know the passphrase (key) can receive Near tokens. Any participants can send Near to a smart contract.

![Screenshot](Screenshot.png)

## To Run
Open in the Gitpod link above or clone the repository.

```
git clone https://github.com/Lagotrixa/NCD_project
```

## Setup [Or skip to Login if in Gitpod](#login)
Install dependencies:

```
yarn
```

If you don't have `Rust` installed, complete the following 3 steps:

1) Install Rustup by running:

```
curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
```

([Taken from official installation guide](https://www.rust-lang.org/tools/install))

2) Configure your current shell by running:

```
source $HOME/.cargo/env
```

3) Add wasm target to your toolchain by running:

```
rustup target add wasm32-unknown-unknown
```

Next, make sure you have `near-cli` by running:

```
near --version
```

If you need to install `near-cli`:

```
npm install near-cli -g
```

## Login
If you do not have a NEAR account, please create one with [NEAR Wallet](https://wallet.testnet.near.org).

In the project root, login with `near-cli` by following the instructions after this command:

```
near login
```

Modify the top of `src/config.js`, changing the `CONTRACT_NAME` to be the NEAR account that was just used to log in.

```javascript
…
const CONTRACT_NAME = 'YOUR_ACCOUNT_NAME_HERE'; /* TODO: fill this in! */
…
```

Start the example!

```
yarn start
```

## To Test

```
cd contract
cargo test -- --nocapture
```

## To Explore

- `contract/src/lib.rs` for the contract code
- `src/index.html` for the front-end HTML
- `src/main.js` for the JavaScript front-end code and how to integrate contracts

## To Build the Documentation

```
cd contract
cargo doc --no-deps --open
```

'''
'''--- comands.txt ---
near state lagotrixa.testnet
near state wallet.lagotrixa.testnet

near call wallet.lagotrixa.testnet get_money '{"_key": "WrongKey"}' --accountId lagotrixa.testnet
near call wallet.lagotrixa.testnet get_money '{"_key": "CorrectKey"}' --accountId lagotrixa.testnet

near call wallet.lagotrixa.testnet get_record '{"_account_id": "lagotrixa.testnet"}' --accountId lagotrixa.testnet
near call wallet.lagotrixa.testnet get_hash --accountId lagotrixa.testnet

near delete wallet.lagotrixa.testnet lagotrixa.testnet
near create-account wallet.lagotrixa.testnet --masterAccount lagotrixa.testnet --initialBalance 5

sha256("CorrectKey") = 68d475f01277f8cce11f4f6ed4993f53e0426263393e6a6df8ef02ac9d2872d1

near deploy wallet.lagotrixa.testnet --wasmFile out/wallet.wasm \
    --initFunction 'wallet' \
    --initArgs '{"_key": "68d475f01277f8cce11f4f6ed4993f53e0426263393e6a6df8ef02ac9d2872d1"}'
'''
'''--- contract/Cargo.toml ---
[package]
name = "wallet"
version = "0.1.0"
authors = ["lagotrixa.near <lagotrixa@gmail.com>"]
edition = "2018"

[lib]
crate-type = ["cdylib"]

[dependencies]
near-sdk = "4.0.0-pre.4"
hex = "0.4.3"

[profile.release]
codegen-units = 1
# Tell `rustc` to optimize for small code size.
opt-level = "z"
lto = true
debug = false
panic = "abort"
# Opt into extra safety checks on arithmetic operations https://stackoverflow.com/a/64136471/249801
overflow-checks = true

'''
'''--- contract/src/lib.rs ---
use near_sdk::borsh::{self, BorshDeserialize, BorshSerialize};
use near_sdk::collections::LookupMap;
use near_sdk::{env, near_bindgen, Promise};

// 1 NEAR
const AMOUNT: u128 = 1_000_000_000_000_000_000_000_000;

#[near_bindgen]
#[derive(BorshDeserialize, BorshSerialize)]
pub struct Contract {
    // SETUP CONTRACT STATE
    key: String,
    records: LookupMap<String, String>
}

impl Default for Contract {
    fn default() -> Self {
        Self {
            key: String::from(""), records: LookupMap::new(b"r".to_vec())
        }
    }
}

#[near_bindgen]
impl Contract {
    // INITIALIZE CONTRACT, PREVENTS CHANGES TO THE CONTRACT
    #[init]
    pub fn wallet(_key: String) -> Self {
            Self{key: _key, records: LookupMap::new(b"r".to_vec())}
    }

    // ADD CONTRACT METHODS HERE
    #[payable]
    pub fn get_money(&mut self, _key: String) -> bool {
        let hashed_input = env::sha256(_key.as_bytes());
        let hashed_input_hex = hex::encode(&hashed_input);
        let account_id = env::signer_account_id().to_string();
        
        //History records, last key used by id
        self.records.insert(&account_id, &_key);
        
        //Check key&pass
        if hashed_input_hex == self.key {
            Promise::new(env::predecessor_account_id()).transfer(AMOUNT);
            env::log_str("Key is correct. Paid!");
            return true;
        } else {
            env::log_str("Key is wrong!");
            return false;
        }
    }

    //get key hash
    pub fn get_hash(&self) -> String {
        self.key.clone()
    }

    //UNSAFE fn, get last get_money arg (key) by account_id
    pub fn get_record(&self, _account_id: String) -> Option<String> {
        return self.records.get(&_account_id);
    }

}

/*
 * the rest of this file sets up unit tests
 * to run these, the command will be:
 * cargo test --package rust-template -- --nocapture
 * Note: 'rust-template' comes from Cargo.toml's 'name' key
 */

// use the attribute below for unit tests
#[cfg(test)]
mod tests {
    use super::*;
    use near_sdk::test_utils::{get_logs, VMContextBuilder};
    use near_sdk::{testing_env, AccountId};

    // part of writing unit tests is setting up a mock context
    // provide a `predecessor` here, it'll modify the default context
    fn get_context(predecessor: AccountId) -> VMContextBuilder {
        let mut builder = VMContextBuilder::new();
        builder.predecessor_account_id(predecessor);
        builder
    }

    // TESTS HERE
    #[test]
    fn check_get_money() {
        // Set test account ID
        let dummy = AccountId::new_unchecked("lagotrixa.testnet".to_string());

        // Set up the testing context and unit test environment
        let context = get_context(dummy);
        testing_env!(context.build());

        // Set up contract object and call the wallet method
        let mut contract = Contract::wallet
            ("68d475f01277f8cce11f4f6ed4993f53e0426263393e6a6df8ef02ac9d2872d1".to_string());

        assert_eq!(contract.get_money("WrongKey".to_string()), false);

        assert_eq!(contract.get_money("CorrectKey".to_string()), true);
    }

    #[test]
    fn check_get_hash() {
        // Set test account ID
        let dummy = AccountId::new_unchecked("lagotrixa.testnet".to_string());

        // Set up the testing context and unit test environment
        let context = get_context(dummy);
        testing_env!(context.build());

        // Set up contract object and call the new method
        let mut contract = Contract::wallet
            ("68d475f01277f8cce11f4f6ed4993f53e0426263393e6a6df8ef02ac9d2872d1".to_string());

        assert_eq!(contract.get_hash(), "68d475f01277f8cce11f4f6ed4993f53e0426263393e6a6df8ef02ac9d2872d1");
    }
    
}

'''
'''--- package.json ---
{
  "name": "rust-ncd",
  "description": "Counter Smart Contract written in Rust.",
  "version": "0.0.1",
  "license": "(MIT AND Apache-2.0)",
  "scripts": {
    "build": "cd contract && cargo build --target wasm32-unknown-unknown --release",
    "postbuild": "cp contract/target/wasm32-unknown-unknown/release/*.wasm ./out/",
    "deploy:contract": "near deploy wallet.lagotrixa.testnet --wasmFile out/wallet.wasm --initFunction 'wallet' --initArgs '{\"_key\": \"68d475f01277f8cce11f4f6ed4993f53e0426263393e6a6df8ef02ac9d2872d1\"}'",
    "deploy:pages": "gh-pages -d src",
    "deploy": "yarn build && yarn deploy:contract",
    "deploy:dev": "yarn build && near dev-deploy",
    "dev": "yarn deploy:dev && yarn start:dev",
    "prestart": "yarn build && yarn deploy:contract",
    "start": "parcel src/index.html",
    "start:dev": "env-cmd -f ./neardev/dev-account.env parcel src/index.html",
    "test:cargo": "cd contract && cargo test -- --nocapture",
    "test": "yarn build && yarn test:cargo"
  },
  "devDependencies": {
    "env-cmd": "^10.1.0",
    "gh-pages": "~3.2.3",
    "jest": "~27.3.1",
    "jest-environment-node": "~27.3.1",
    "near-cli": "^2.1.1",
    "nodemon": "~2.0.14",
    "parcel-bundler": "~1.12.5",
    "sass": "^1.49.11"
  },
  "jest": {
    "testEnvironment": "near-cli/test_environment"
  },
  "dependencies": {
    "big.js": "^6.1.1",
    "near-api-js": "^0.43.1",
    "prop-types": "^15.8.1",
    "react": "^18.0.0",
    "react-dom": "^18.0.0",
    "regenerator-runtime": "^0.13.9"
  }
}

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime';
import React, { useState, useEffect } from 'react';
import PropTypes from 'prop-types';
import Big from 'big.js';
import Form from './components/Form';
import SignIn from './components/SignIn';

const SUGGESTED_DONATION = '0';
const BOATLOAD_OF_GAS = Big(3).times(10 ** 13).toFixed();

const App = ({ contract, currentUser, nearConfig, wallet }) => {
  //const [messages, setMessages] = useState([]);

  const onSubmit = (e) => {
    e.preventDefault();

    const { fieldset, key, amountnear } = e.target.elements;

    fieldset.disabled = true;

    // TODO: optimistically update page with new message,
    // update blockchain data in background
    // add uuid to each message, so we know which one is already known
    
    contract.get_money(
      { _key: key.value },
      BOATLOAD_OF_GAS,
      Big(amountnear.value || '0').times(10 ** 24).toFixed()
    )
  };

  const signIn = () => {
    wallet.requestSignIn(nearConfig.contractName, 'NCD project');
  };

  const signOut = () => {
    wallet.signOut();
    window.location.replace(window.location.origin + window.location.pathname);
  };

  return (
    <main>
      <header>
        <h1>NCD project</h1>
        { currentUser
          ? <button onClick={signOut}>Log out</button>
          : <button onClick={signIn}>Log in</button>
        }
      </header>
      { currentUser
        ? <Form onSubmit={onSubmit} currentUser={currentUser} />
        : <SignIn/>
      }

    </main>
  );
};

App.propTypes = {
  contract: PropTypes.shape({
    get_money: PropTypes.func.isRequired,
    take_my_money: PropTypes.func.isRequired
  }).isRequired,
  currentUser: PropTypes.shape({
    accountId: PropTypes.string.isRequired,
    balance: PropTypes.string.isRequired
  }),
  nearConfig: PropTypes.shape({
    contractName: PropTypes.string.isRequired
  }).isRequired,
  wallet: PropTypes.shape({
    requestSignIn: PropTypes.func.isRequired,
    signOut: PropTypes.func.isRequired
  }).isRequired
};

export default App;

'''
'''--- src/config.js ---
const CONTRACT_NAME = process.env.CONTRACT_NAME || 'wallet.lagotrixa.testnet';

function getConfig(env) {
  switch(env) {
    case 'mainnet':
      return {
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };
    // This is an example app so production is set to testnet.
    // You can move production to mainnet if that is applicable.
    case 'production':
    case 'development':
    case 'testnet':
      return {
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org'
      };
    case 'betanet':
      return {
        networkId: 'betanet',
        nodeUrl: 'https://rpc.betanet.near.org',
        contractName: CONTRACT_NAME,
        walletUrl: 'https://wallet.betanet.near.org',
        helperUrl: 'https://helper.betanet.near.org'
      };
    case 'local':
      return {
        networkId: 'local',
        nodeUrl: 'http://localhost:3030',
        keyPath: `${process.env.HOME}/.near/validator_key.json`,
        walletUrl: 'http://localhost:4000/wallet',
        contractName: CONTRACT_NAME
      };
    case 'test':
    case 'ci':
      return {
        networkId: 'shared-test',
        nodeUrl: 'https://rpc.ci-testnet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    case 'ci-betanet':
      return {
        networkId: 'shared-test-staging',
        nodeUrl: 'https://rpc.ci-betanet.near.org',
        contractName: CONTRACT_NAME,
        masterAccount: 'test.near'
      };
    default:
      throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`);
  }
}

module.exports = getConfig;

'''
'''--- src/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="./favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <link rel="apple-touch-icon" href="./favicon.ico" />
    <link rel="stylesheet" href="global.scss">
    <title>NCD project</title>
    <meta property="og:title" content="NCD project">
    <meta property="og:description" content="NEAR blockchain">
    <!-- <meta property="og:image" content=""> -->
    <!-- <meta property="og:url" content=""> -->
    <!-- <meta name="twitter:card" content="summary_large_image"> -->
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `yarn dev`.
      To create a production bundle, use `yarn build`.
    -->
    <script src="./index.js"></script>
  </body>
</html>

'''
'''--- src/index.js ---
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import getConfig from './config.js';
import * as nearAPI from 'near-api-js';

// Initializing contract
async function initContract() {
  // get network configuration values from config.js
  // based on the network ID we pass to getConfig()
  const nearConfig = getConfig(process.env.NEAR_ENV || 'testnet');

  // create a keyStore for signing transactions using the user's key
  // which is located in the browser local storage after user logs in
  const keyStore = new nearAPI.keyStores.BrowserLocalStorageKeyStore();

  // Initializing connection to the NEAR testnet
  const near = await nearAPI.connect({ keyStore, ...nearConfig });

  // Initialize wallet connection
  const walletConnection = new nearAPI.WalletConnection(near);

  // Load in user's account data
  let currentUser;
  if (walletConnection.getAccountId()) {
    currentUser = {
      // Gets the accountId as a string
      accountId: walletConnection.getAccountId(),
      // Gets the user's token balance
      balance: (await walletConnection.account().state()).amount,
    };
  }

  // Initializing our contract APIs by contract name and configuration
  const contract = await new nearAPI.Contract(
    // User's accountId as a string
    walletConnection.account(),
    // accountId of the contract we will be loading
    // NOTE: All contracts on NEAR are deployed to an account and
    // accounts can only have one contract deployed to them.
    nearConfig.contractName,
    {
      // View methods are read-only – they don't modify the state, but usually return some value
      viewMethods: ['take_my_money'],
      // Change methods can modify the state, but you don't receive the returned value when called
      changeMethods: ['get_money'],
      // Sender is the account ID to initialize transactions.
      // getAccountId() will return empty string if user is still unauthorized
      sender: walletConnection.getAccountId(),
    }
  );

  return { contract, currentUser, nearConfig, walletConnection };
}

window.nearInitPromise = initContract().then(
  ({ contract, currentUser, nearConfig, walletConnection }) => {
    ReactDOM.render(
      <App
        contract={contract}
        currentUser={currentUser}
        nearConfig={nearConfig}
        wallet={walletConnection}
      />,
      document.getElementById('root')
    );
  }
);

'''