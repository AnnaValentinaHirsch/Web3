*GitHub Repository "near-ndc/i-am-human-dapp"*

'''--- .env ---
REACT_APP_ENV="dev"
REACT_APP_GA_TRACKING_ID=""
REACT_APP_RE_CAPTCHA_KEY=""
'''
'''--- .eslintrc.js ---
const unusedVarsCfg = [
  'warn',
  {
    vars: 'all',
    args: 'none',
    ignoreRestSiblings: false,
    varsIgnorePattern: '_',
  },
];

module.exports = {
  env: {
    browser: true,
    es2021: true,
    jest: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:react/recommended',
    'plugin:react-hooks/recommended',
    'plugin:prettier/recommended',
  ],
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: ['react', 'react-hooks'],
  rules: {
    'react/prop-types': 'off',
    'react/react-in-jsx-scope': 'off',
    'react/no-unknown-property': 'off',
    'no-unused-vars': unusedVarsCfg,
    'react/jsx-key': 'off',
    'no-extra-boolean-cast': 'off',
    'no-useless-escape': 'off',
    'react/no-unescaped-entities': 'off',
  },
  globals: {
    process: 'readonly',
    Buffer: true,
  },
  overrides: [
    {
      files: ['**/__tests__/**/*.js'],
      globals: {
        global: true,
      },
    },
  ],
};

'''
'''--- .github/pull_request_template.md ---
<!--- Provide a general summary of your changes in the Title above -->

## Description

<!--- Describe your changes in detail -->

## Related Issue

<!--- If suggesting a new feature or change, please discuss it in an issue first -->
<!--- If fixing a bug, there should be an issue describing it with steps to reproduce -->
<!--- Please link to the issue here: -->

## Type of change

Please delete options that are not relevant.

- [ ] Bug fix (non-breaking change which fixes an issue)
- [ ] New feature (non-breaking change which adds functionality)
- [ ] Breaking change (fix or feature that would cause existing functionality to not work as expected)
- [ ] This change requires a documentation update

## How Has This Been Tested?

<!--- Please describe in detail how you tested your changes. -->

- [ ] The existing website flow works well with the changes

## Screenshots (if appropriate):

'''
'''--- .github/workflows/main.yml ---
name: Run package tests on push

on:
  pull_request:
    branches:
      - develop
      - master
  merge_group:
    types: [checks_requested]

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: technote-space/get-diff-action@v6.1.2
        with:
          PATTERNS: |
            **/*.js
            **/*.ts
      - name: Setup Node
        if: env.GIT_DIFF
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Check Yarn version
        if: env.GIT_DIFF
        run: yarn --version
      - name: Install dependencies
        if: env.GIT_DIFF
        run: yarn install
      - name: Build packages
        if: env.GIT_DIFF
        env:
          CI: false
        run: yarn build
      # - name: Run tests
      #   if: env.GIT_DIFF
      #   run: yarn test

  lint:
    name: Lint and Format code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v3
      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Check Yarn version
        run: yarn --version
      - name: Install dependencies
        run: yarn install
      - name: lint
        run: yarn lint
      - name: format
        run: yarn format

'''
'''--- CHANGELOG.md ---
## v1.0.1 2023-05-16

### Bug Fixes

### Features

- added report issue link directing to github New Issue Page.
- added support for community application.
- moved IAH to GoodWeb3Mono to fix gooddollar bug.
- added Google Analytics.

### Tests

- added test for FV SBT Applications Table test.
- added test for Verification of Email and Phone No.

'''
'''--- README.md ---
# I Am Human Dapp

Frontend for I Am Human and Soulbound Tokens.

## Contributing

Master is our `CI` branch for production (production dapp must use latest version of this branch), and `develop` is our ongoing development branch. Workflow:

1. Start a discussion in `NDC Technical WG` telegram (_IAH UI_ sub-channel) or create an issue.
2. Create a feature branch based on the latest `develop`.
3. Make a Pull Request targeting `develop`. Ask for reviews.
4. Once you will get approvals, use the Merge Queue - Github automatic mechanism to merge and squash your branch into `develop`.

To update the production:

1. Make a Pull Request from `develop` to `master`.
   - `master` must be ONLY updated by merging develop → master.
2. Use the Merge Queue - this time, it is configured to preserve commits (not squashing them).
3. CI will automatically build new prod version.

'''
'''--- __mocks__/fileMock.js ---
// for svg and images
module.exports = 'test-file-stub';

'''
'''--- babel.config.js ---
module.exports = {
  presets: ['@babel/preset-env', '@babel/preset-react'],
  plugins: [
    '@babel/plugin-transform-runtime',
    '@babel/plugin-transform-modules-commonjs',
  ],
};

'''
'''--- config-overrides.js ---
const webpack = require('webpack');
const ModuleScopePlugin = require('react-dev-utils/ModuleScopePlugin');

module.exports = function override(config) {
    const fallback = config.resolve.fallback || {};
    Object.assign(fallback, {
        "crypto": require.resolve("crypto-browserify"),
        "stream": require.resolve("stream-browserify"),
        "assert": require.resolve("assert"),
        "http": require.resolve("stream-http"),
        "https": require.resolve("https-browserify"),
        "os": require.resolve("os-browserify"),
        "url": require.resolve("url")
    })
    config.resolve.fallback = fallback;
    config.ignoreWarnings = [/Failed to parse source map/];
    config.plugins = (config.plugins || []).concat([
        new webpack.ProvidePlugin({
            process: 'process/browser',
            Buffer: ['buffer', 'Buffer']
        })
    ])
    config.resolve.plugins = config.resolve.plugins.filter(plugin => !(plugin instanceof ModuleScopePlugin));
    return config;
}
'''
'''--- docs/logs.md ---
# App Logs

We log various information related to debug the flows on errors.
We use [Supabase](https://supabase.io/) to collect logs.

## Logging information

Logs are created through the log_event function in src/utils/utilityFunctions
As a developer if you want to implement logging at any step in the app just add the code `log_event({ event_log: 'Message you want to log' })` and it will be stored inside the supabase db instantly.

## Accessing Supabase

If you have been granted access to Supabase, you can easily access logs in the Supabase Events table. 

1. Log in to Supabase
2. Navigate to i-am-humna project
3. In your project's dashboard, you'll see a menu on the left-hand side of the page. Click on `Database` to open the database interface.
4. Open the Events Table
5. Review the Logs

## Note

Please remember to respect privacy and data security when accessing logs. Only use the data in accordance with your project's data handling policies.

If you face any problems or have any questions during this process, don't hesitate to reach out to your project admins for support.

For more detailed information about Supabase, please refer to the [official Supabase documentation](https://supabase.io/docs).

'''
'''--- jest.config.js ---
module.exports = {
  testEnvironment: 'jsdom',
  moduleNameMapper: {
    '\\.(jpg|jpeg|png|gif|svg)$': '<rootDir>/__mocks__/fileMock.js',
    '\\.(css|less)$': 'identity-obj-proxy',
    '^.+\\.mp4$': 'identity-obj-proxy',
  },
  transform: {
    '^.+\\.jsx?$': 'babel-jest',
  },
  transformIgnorePatterns: ['/node_modules/'],
  testPathIgnorePatterns: ['<rootDir>/node_modules/'],
};

'''
'''--- package.json ---
{
  "name": "imhuman",
  "version": "0.1.0",
  "private": true,
  "main": "src/index.js",
  "dependencies": {
    "@fingerprintjs/fingerprintjs-pro": "^3.8.5",
    "@headlessui/react": "^1.7.16",
    "@heroicons/react": "^2.0.18",
    "@near-wallet-selector/core": "^8.2.1",
    "@near-wallet-selector/here-wallet": "^8.2.1",
    "@near-wallet-selector/ledger": "^8.2.1",
    "@near-wallet-selector/math-wallet": "^8.2.1",
    "@near-wallet-selector/meteor-wallet": "^8.2.1",
    "@near-wallet-selector/modal-ui": "^8.2.1",
    "@near-wallet-selector/my-near-wallet": "^8.2.1",
    "@near-wallet-selector/near-wallet": "^8.2.1",
    "@near-wallet-selector/nightly": "^8.2.1",
    "@near-wallet-selector/nightly-connect": "^8.2.1",
    "@near-wallet-selector/sender": "^8.2.1",
    "@near-wallet-selector/wallet-connect": "^8.2.1",
    "@reduxjs/toolkit": "^1.9.5",
    "@rollbar/react": "^0.11.2",
    "@supabase/supabase-js": "^2.31.0",
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^14.0.0",
    "@testing-library/user-event": "^14.4.3",
    "@usedapp/core": "^1.2.10",
    "@web3-onboard/coinbase": "^2.2.5",
    "@web3-onboard/injected-wallets": "^2.10.3",
    "@web3-onboard/react": "^2.8.10",
    "@web3-onboard/walletconnect": "^2.4.3",
    "axios": "^1.4.0",
    "ethers": "^6.6.7",
    "jsonp": "^0.2.1",
    "moment": "^2.29.4",
    "moment-timezone": "^0.5.43",
    "near-api-js": "^2.1.4",
    "react": "^18.2.0",
    "react-confetti": "^6.1.0",
    "react-dom": "^18.2.0",
    "react-ga": "^3.3.1",
    "react-google-recaptcha-v3": "^1.10.1",
    "react-native": "^0.72.3",
    "react-native-web": "^0.19.7",
    "react-redux": "^8.1.2",
    "react-router-dom": "^6.14.2",
    "react-scripts": "5.0.1",
    "react-spinners-kit": "^1.9.1",
    "react-toastify": "^9.1.3",
    "recharts": "^2.7.2",
    "regenerator-runtime": "^0.13.11",
    "rollbar": "^2.26.2",
    "styled-components": "^6.0.5",
    "web-vitals": "^3.4.0",
    "yup": "^1.2.0"
  },
  "scripts": {
    "start": "react-app-rewired start",
    "build": "react-app-rewired build",
    "test": "REACT_APP_ENV=dev jest",
    "lint": "eslint src --ext .js,.jsx",
    "format": "prettier --write \"src/**/*.js\"",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@babel/preset-env": "^7.22.9",
    "@babel/preset-react": "^7.22.5",
    "assert": "^2.0.0",
    "babel-jest": "^29.6.2",
    "buffer": "^6.0.3",
    "crypto-browserify": "^3.12.0",
    "eslint": "^8.46.0",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-prettier": "^5.0.0",
    "eslint-plugin-react": "^7.33.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "https-browserify": "^1.0.0",
    "identity-obj-proxy": "^3.0.0",
    "jest": "^29.6.2",
    "jest-environment-jsdom": "^29.6.2",
    "os-browserify": "^0.3.0",
    "prettier": "^3.0.0",
    "process": "^0.11.10",
    "react-app-rewired": "^2.2.1",
    "react-test-renderer": "^18.2.0",
    "stream-browserify": "^3.0.0",
    "stream-http": "^3.2.0",
    "url": "^0.11.1"
  },
  "peerDependencies": {
    "ethers": "5.*"
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="%PUBLIC_URL%/logo.png" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="I-AM-HUMAN - Proof of Personhood Protocol on NEAR"
    />
    <link rel="apple-touch-icon" href="%PUBLIC_URL%/logo.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="%PUBLIC_URL%/manifest.json" />

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://i-am-human.app/" />
    <meta
      property="og:title"
      content="I-AM-HUMAN - Get your Proof of Personhood with I-AM-HUMAN"
    />
    <meta
      property="og:description"
      content="Welcome, I-AM-HUMAN is your launchpad for several different types of Soul Bound Tokens (SBTs). Each of which will identify you as a human. With enough of these SBTs, you will have a strong proof-of-personhood, which give you access to voting on governance, on-chain reputation, DAOs, grassroots funding, and much more."
    />
    <meta property="og:image" content="https://i-am-human.app/twitter.jpg" />

    <!-- Twitter -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content="@neardc" />
    <meta name="twitter:creator" content="@neardc" />
    <meta
      name="twitter:title"
      content="I-AM-HUMAN - Get your Proof of Personhood with I-AM-HUMAN"
    />
    <meta
      name="twitter:description"
      content="Welcome, I-AM-HUMAN is your launchpad for several different types of Soul Bound Tokens (SBTs). Each of which will identify you as a human. With enough of these SBTs, you will have a strong proof-of-personhood, which give you access to voting on governance, on-chain reputation, DAOs, grassroots funding, and much more."
    />
    <meta name="twitter:image" content="https://i-am-human.app/twitter.jpg" />
    <meta
      name="twitter:image:src"
      content="https://i-am-human.app/twitter.jpg"
    />

    <meta http-equiv="cache-control" content="no-cache" />
    <meta http-equiv="expires" content="0" />
    <meta http-equiv="pragma" content="no-cache" />

    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>I-AM-HUMAN - Proof of Personhood Protocol on NEAR</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="embed.typeform.com/next/embed.js"></script>
    <script
      type="text/javascript"
      src="//s3.amazonaws.com/downloads.mailchimp.com/js/mc-validate.js"
    ></script>
    <script type="text/javascript">
      (function ($) {
        window.fnames = new Array();
        window.ftypes = new Array();
        fnames[0] = 'EMAIL';
        ftypes[0] = 'email';
      })(jQuery);
      var $mcj = jQuery.noConflict(true);
    </script>
  </head>

  <!-- Google tag (gtag.js) -->
  <script
    async
    src="https://www.googletagmanager.com/gtag/js?id=G-E1XZYSXM34"
  ></script>
  <script>
    window.dataLayer = window.dataLayer || [];
    function gtag() {
      dataLayer.push(arguments);
    }
    gtag('js', new Date());

    gtag('config', 'G-E1XZYSXM34');
  </script>

  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "IAmHuman",
  "name": "Proof of Personhood Protocol on NEAR",
  "icons": [
    {
      "src": "logo.png",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- setupTests.js ---
global.global = true;

module.exports = {};

'''
'''--- src/App.js ---
import 'regenerator-runtime/runtime';
import React, { useEffect } from 'react';
import { ToastContainer } from 'react-toastify';
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import IndexPage from './pages/index';
import ScoreboardPage from './pages/Scoreboard';
import CommunitySBTPage from './pages/CommunitySBT';
import { URLs } from './utils/constants';
import ProgressTracker from './components/common/ProgressTracker';
import CustomHeader from './components/common/Header';
import CustomFooter from './components/common/Footer';
import ActivatePage from './pages/Activate';
import { wallet } from '.';
import { useDispatch } from 'react-redux';
import { updateUserLogin } from './redux/reducer/commonReducer';

const Wrapper = ({ children }) => {
  return (
    <>
      {/* commenting for right now -> IAH FV minting is at hault */}
      {/* <ProgressTracker /> */}
      <CustomHeader />
      {children}
      <CustomFooter />
    </>
  );
};

export function App() {
  const dispatch = useDispatch();
  useEffect(() => {
    wallet
      .startUp()
      .then((value) => {
        dispatch(updateUserLogin(value));
      })
      .catch(() => {
        dispatch(updateUserLogin(false));
      });
  });

  return (
    <>
      <Router>
        <Routes>
          <Route
            exact
            path={URLs.SCOREBOARD}
            element={
              <Wrapper>
                <ScoreboardPage />
              </Wrapper>
            }
          />

          <Route
            exact
            path={URLs.SBTs}
            element={
              <Wrapper>
                <CommunitySBTPage />
              </Wrapper>
            }
          />

          <Route
            exact
            path={URLs.HOME}
            element={
              <Wrapper>
                <IndexPage />
              </Wrapper>
            }
          />

          <Route
            path="*"
            element={
              <Wrapper>
                <IndexPage />
              </Wrapper>
            }
          />
          <Route
            path={URLs.ACTIVATE}
            element={
              <Wrapper>
                <ActivatePage />
              </Wrapper>
            }
          />
        </Routes>
      </Router>
    </>
  );
}

'''
'''--- src/images/CheckCircle.js ---
export const CheckCircle = () => (
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M12 2.25C10.0716 2.25 8.18657 2.82183 6.58319 3.89317C4.97982 4.96451 3.73013 6.48726 2.99218 8.26884C2.25422 10.0504 2.06114 12.0108 2.43735 13.9021C2.81355 15.7934 3.74215 17.5307 5.10571 18.8943C6.46928 20.2579 8.20656 21.1865 10.0979 21.5627C11.9892 21.9389 13.9496 21.7458 15.7312 21.0078C17.5127 20.2699 19.0355 19.0202 20.1068 17.4168C21.1782 15.8134 21.75 13.9284 21.75 12C21.745 9.41566 20.7162 6.93859 18.8888 5.11118C17.0614 3.28378 14.5843 2.25496 12 2.25ZM16.6406 10.2938L11.1469 15.5438C11.0049 15.6774 10.8169 15.7512 10.6219 15.75C10.5266 15.7514 10.4319 15.7338 10.3434 15.6984C10.2549 15.663 10.1743 15.6105 10.1063 15.5438L7.35938 12.9188C7.28319 12.8523 7.22123 12.7711 7.17722 12.6801C7.13321 12.589 7.10806 12.49 7.10328 12.389C7.0985 12.2881 7.11419 12.1871 7.14941 12.0924C7.18463 11.9976 7.23865 11.9109 7.30822 11.8375C7.3778 11.7642 7.46149 11.7056 7.55426 11.6654C7.64703 11.6252 7.74698 11.6042 7.84809 11.6036C7.94919 11.603 8.04938 11.6229 8.14261 11.662C8.23585 11.7011 8.32021 11.7587 8.39063 11.8312L10.6219 13.9594L15.6094 9.20625C15.7552 9.07902 15.9446 9.01309 16.1379 9.02223C16.3312 9.03138 16.5135 9.1149 16.6467 9.25533C16.7798 9.39576 16.8536 9.58222 16.8524 9.77575C16.8513 9.96928 16.7754 10.1549 16.6406 10.2938Z"
      fill="#16C784"
    />
  </svg>
);

'''
'''--- src/images/CircleWavyCheck.js ---
export const CircleWavyCheck = ({ styles = '' }) => (
  <svg
    width="300"
    height="300"
    viewBox="0 0 300 300"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    stroke="currentColor"
    class={styles}
  >
    <path d="M264.727 120.469C260.273 115.898 255.703 111.094 253.945 106.992C252.188 102.891 252.305 96.7969 252.188 90.5859C252.07 79.2188 251.836 66.2109 242.812 57.1875C233.789 48.1641 220.781 47.9297 209.414 47.8125C203.203 47.6953 196.875 47.5781 193.008 46.0547C189.141 44.5312 184.102 39.7266 179.531 35.2734C171.445 27.5391 162.188 18.75 150 18.75C137.812 18.75 128.555 27.5391 120.469 35.2734C115.898 39.7266 111.094 44.2969 106.992 46.0547C102.891 47.8125 96.7969 47.6953 90.5859 47.8125C79.2188 47.9297 66.2109 48.1641 57.1875 57.1875C48.1641 66.2109 47.9297 79.2188 47.8125 90.5859C47.6953 96.7969 47.5781 103.125 46.0547 106.992C44.5312 110.859 39.7266 115.898 35.2734 120.469C27.5391 128.555 18.75 137.812 18.75 150C18.75 162.188 27.5391 171.445 35.2734 179.531C39.7266 184.102 44.2969 188.906 46.0547 193.008C47.8125 197.109 47.6953 203.203 47.8125 209.414C47.9297 220.781 48.1641 233.789 57.1875 242.812C66.2109 251.836 79.2188 252.07 90.5859 252.188C96.7969 252.305 103.125 252.422 106.992 253.945C110.859 255.469 115.898 260.273 120.469 264.727C128.555 272.461 137.812 281.25 150 281.25C162.188 281.25 171.445 272.461 179.531 264.727C184.102 260.273 188.906 255.703 193.008 253.945C197.109 252.188 203.203 252.305 209.414 252.188C220.781 252.07 233.789 251.836 242.812 242.812C251.836 233.789 252.07 220.781 252.188 209.414C252.305 203.203 252.422 196.875 253.945 193.008C255.469 189.141 260.273 184.102 264.727 179.531C272.461 171.445 281.25 162.188 281.25 150C281.25 137.812 272.461 128.555 264.727 120.469ZM208.008 128.672L139.336 194.297C137.561 195.967 135.211 196.89 132.773 196.875C130.372 196.884 128.061 195.96 126.328 194.297L91.9922 161.484C91.0398 160.653 90.2653 159.639 89.7152 158.501C89.1651 157.363 88.8507 156.126 88.791 154.863C88.7312 153.601 88.9274 152.339 89.3676 151.154C89.8079 149.97 90.4831 148.886 91.3527 147.969C92.2224 147.052 93.2685 146.32 94.4282 145.818C95.5879 145.315 96.8372 145.053 98.101 145.045C99.3649 145.038 100.617 145.286 101.783 145.775C102.948 146.264 104.003 146.984 104.883 147.891L132.773 174.492L195.117 115.078C196.94 113.488 199.307 112.664 201.724 112.778C204.14 112.892 206.419 113.936 208.083 115.692C209.748 117.447 210.669 119.778 210.655 122.197C210.641 124.616 209.693 126.936 208.008 128.672Z" />
  </svg>
);

'''
'''--- src/images/ExclamationIcon.js ---
export const ExclamationIcon = () => (
  <svg
    width="600"
    height="600"
    viewBox="0 0 400 400"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <circle
      opacity="0.2"
      cx="200"
      cy="200"
      r="200"
      fill="url(#paint0_linear_559_4266)"
    />
    <circle
      opacity="0.57"
      cx="200"
      cy="200"
      r="180"
      fill="url(#paint1_linear_559_4266)"
    />
    <g filter="url(#filter0_i_559_4266)">
      <circle cx="200" cy="200" r="160" fill="white" fill-opacity="0.9" />
    </g>
    <path
      d="M284.921 246.875L216.25 128.125C214.606 125.269 212.238 122.897 209.385 121.247C206.532 119.598 203.295 118.729 200 118.729C196.704 118.729 193.467 119.598 190.614 121.247C187.761 122.897 185.394 125.269 183.75 128.125V128.125L115.078 246.875C113.409 249.717 112.523 252.949 112.508 256.244C112.493 259.539 113.35 262.779 114.993 265.636C116.635 268.492 119.005 270.863 121.86 272.508C124.715 274.153 127.955 275.012 131.25 275H268.75C272.045 275.012 275.284 274.153 278.139 272.508C280.995 270.863 283.364 268.492 285.006 265.636C286.649 262.779 287.506 259.539 287.491 256.244C287.476 252.949 286.59 249.717 284.921 246.875V246.875ZM193.75 181.25C193.75 179.593 194.408 178.003 195.58 176.831C196.752 175.659 198.342 175 200 175C201.657 175 203.247 175.659 204.419 176.831C205.591 178.003 206.25 179.593 206.25 181.25V212.5C206.25 214.158 205.591 215.747 204.419 216.92C203.247 218.092 201.657 218.75 200 218.75C198.342 218.75 196.752 218.092 195.58 216.92C194.408 215.747 193.75 214.158 193.75 212.5V181.25ZM200 250C198.145 250 196.333 249.45 194.791 248.42C193.249 247.39 192.048 245.926 191.338 244.213C190.629 242.5 190.443 240.615 190.805 238.796C191.166 236.978 192.059 235.307 193.37 233.996C194.682 232.685 196.352 231.792 198.171 231.43C199.989 231.069 201.874 231.254 203.587 231.964C205.3 232.673 206.764 233.875 207.795 235.417C208.825 236.958 209.375 238.771 209.375 240.625C209.375 243.112 208.387 245.496 206.629 247.254C204.871 249.012 202.486 250 200 250Z"
      fill="url(#paint2_linear_559_4266)"
    />
    <defs>
      <filter
        id="filter0_i_559_4266"
        x="40"
        y="40"
        width="320"
        height="320"
        filterUnits="userSpaceOnUse"
        color-interpolation-filters="sRGB"
      >
        <feFlood flood-opacity="0" result="BackgroundImageFix" />
        <feBlend
          mode="normal"
          in="SourceGraphic"
          in2="BackgroundImageFix"
          result="shape"
        />
        <feColorMatrix
          in="SourceAlpha"
          type="matrix"
          values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0"
          result="hardAlpha"
        />
        <feOffset />
        <feGaussianBlur stdDeviation="2" />
        <feComposite in2="hardAlpha" operator="arithmetic" k2="-1" k3="1" />
        <feColorMatrix
          type="matrix"
          values="0 0 0 0 1 0 0 0 0 1 0 0 0 0 1 0 0 0 1 0"
        />
        <feBlend
          mode="normal"
          in2="shape"
          result="effect1_innerShadow_559_4266"
        />
      </filter>
      <linearGradient
        id="paint0_linear_559_4266"
        x1="1.06072e-06"
        y1="177.143"
        x2="400"
        y2="177.143"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="#9333EA" />
        <stop offset="1" stop-color="#4F46E5" />
      </linearGradient>
      <linearGradient
        id="paint1_linear_559_4266"
        x1="20"
        y1="179.429"
        x2="380"
        y2="179.429"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="#9333EA" />
        <stop offset="1" stop-color="#4F46E5" />
      </linearGradient>
      <linearGradient
        id="paint2_linear_559_4266"
        x1="112.508"
        y1="187.935"
        x2="287.491"
        y2="187.935"
        gradientUnits="userSpaceOnUse"
      >
        <stop stop-color="#9333EA" />
        <stop offset="1" stop-color="#4F46E5" />
      </linearGradient>
    </defs>
  </svg>
);

'''
'''--- src/images/FaceSVG.js ---
export const FaceSVG = ({ styles = '' }) => (
  <svg
    width="100"
    height="100"
    viewBox="0 0 100 100"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    stroke="currentColor"
    class={styles}
  >
    <path d="M87.5 18.75V29.6875C87.5 30.5163 87.1708 31.3112 86.5847 31.8972C85.9987 32.4833 85.2038 32.8125 84.375 32.8125C83.5462 32.8125 82.7513 32.4833 82.1653 31.8972C81.5792 31.3112 81.25 30.5163 81.25 29.6875V18.75H70.3125C69.4837 18.75 68.6888 18.4208 68.1028 17.8347C67.5167 17.2487 67.1875 16.4538 67.1875 15.625C67.1875 14.7962 67.5167 14.0013 68.1028 13.4153C68.6888 12.8292 69.4837 12.5 70.3125 12.5H81.25C82.9076 12.5 84.4973 13.1585 85.6694 14.3306C86.8415 15.5027 87.5 17.0924 87.5 18.75ZM84.375 67.1875C83.5462 67.1875 82.7513 67.5167 82.1653 68.1028C81.5792 68.6888 81.25 69.4837 81.25 70.3125V81.25H70.3125C69.4837 81.25 68.6888 81.5792 68.1028 82.1653C67.5167 82.7513 67.1875 83.5462 67.1875 84.375C67.1875 85.2038 67.5167 85.9987 68.1028 86.5847C68.6888 87.1708 69.4837 87.5 70.3125 87.5H81.25C82.9076 87.5 84.4973 86.8415 85.6694 85.6694C86.8415 84.4973 87.5 82.9076 87.5 81.25V70.3125C87.5 69.4837 87.1708 68.6888 86.5847 68.1028C85.9987 67.5167 85.2038 67.1875 84.375 67.1875ZM29.6875 81.25H18.75V70.3125C18.75 69.4837 18.4208 68.6888 17.8347 68.1028C17.2487 67.5167 16.4538 67.1875 15.625 67.1875C14.7962 67.1875 14.0013 67.5167 13.4153 68.1028C12.8292 68.6888 12.5 69.4837 12.5 70.3125V81.25C12.5 82.9076 13.1585 84.4973 14.3306 85.6694C15.5027 86.8415 17.0924 87.5 18.75 87.5H29.6875C30.5163 87.5 31.3112 87.1708 31.8972 86.5847C32.4833 85.9987 32.8125 85.2038 32.8125 84.375C32.8125 83.5462 32.4833 82.7513 31.8972 82.1653C31.3112 81.5792 30.5163 81.25 29.6875 81.25ZM15.625 32.8125C16.4538 32.8125 17.2487 32.4833 17.8347 31.8972C18.4208 31.3112 18.75 30.5163 18.75 29.6875V18.75H29.6875C30.5163 18.75 31.3112 18.4208 31.8972 17.8347C32.4833 17.2487 32.8125 16.4538 32.8125 15.625C32.8125 14.7962 32.4833 14.0013 31.8972 13.4153C31.3112 12.8292 30.5163 12.5 29.6875 12.5H18.75C17.0924 12.5 15.5027 13.1585 14.3306 14.3306C13.1585 15.5027 12.5 17.0924 12.5 18.75V29.6875C12.5 30.5163 12.8292 31.3112 13.4153 31.8972C14.0013 32.4833 14.7962 32.8125 15.625 32.8125ZM39.4922 55.2734C33.926 57.7059 29.343 61.9448 26.4844 67.3047C26.2345 67.7781 26.1138 68.309 26.1344 68.8438C26.155 69.3787 26.3161 69.8987 26.6016 70.3516C26.8735 70.8147 27.2615 71.1988 27.7274 71.466C28.1933 71.7332 28.7208 71.8742 29.2578 71.875H70.7422C71.2792 71.8742 71.8067 71.7332 72.2726 71.466C72.7385 71.1988 73.1265 70.8147 73.3984 70.3516C73.6839 69.8987 73.845 69.3787 73.8656 68.8438C73.8862 68.309 73.7655 67.7781 73.5156 67.3047C70.657 61.9448 66.074 57.7059 60.5078 55.2734C62.124 53.8212 63.4153 52.0441 64.2972 50.0583C65.179 48.0725 65.6315 45.9228 65.625 43.75C65.625 39.606 63.9788 35.6317 61.0485 32.7015C58.1183 29.7712 54.144 28.125 50 28.125C45.856 28.125 41.8817 29.7712 38.9515 32.7015C36.0212 35.6317 34.375 39.606 34.375 43.75C34.3685 45.9228 34.821 48.0725 35.7028 50.0583C36.5847 52.0441 37.876 53.8212 39.4922 55.2734V55.2734Z" />
  </svg>
);

'''
'''--- src/images/InfoIcon.js ---
export const InfoIcon = ({ styles = '' }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    x="0px"
    y="0px"
    width="20"
    height="20"
    viewBox="0 0 50 50"
  >
    <path d="M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 25 11 A 3 3 0 0 0 22 14 A 3 3 0 0 0 25 17 A 3 3 0 0 0 28 14 A 3 3 0 0 0 25 11 z M 21 21 L 21 23 L 22 23 L 23 23 L 23 36 L 22 36 L 21 36 L 21 38 L 22 38 L 23 38 L 27 38 L 28 38 L 29 38 L 29 36 L 28 36 L 27 36 L 27 21 L 26 21 L 22 21 L 21 21 z"></path>
  </svg>
);

'''
'''--- src/images/MintSVG.js ---
export const MintSVG = ({ styles = '' }) => (
  <svg
    viewBox="0 0 100 100"
    fill="none"
    stroke="currentColor"
    class={styles}
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M49.9996 59.3751C62.0809 59.3751 71.8746 49.5813 71.8746 37.5001C71.8746 25.4188 62.0809 15.6251 49.9996 15.6251C37.9184 15.6251 28.1246 25.4188 28.1246 37.5001C28.1246 49.5813 37.9184 59.3751 49.9996 59.3751Z" />
    <path d="M49.9996 3.12507C42.9178 3.11064 36.0048 5.28633 30.2077 9.35403C24.4106 13.4217 20.0131 19.1824 17.6176 25.8468C15.2222 32.5113 14.9461 39.7533 16.8271 46.5808C18.708 53.4083 22.6541 59.4871 28.1246 63.9845V93.7501C28.1215 94.2834 28.2565 94.8083 28.5167 95.2739C28.7768 95.7394 29.1532 96.1296 29.609 96.4063C30.0612 96.6906 30.5787 96.8542 31.1121 96.8815C31.6455 96.9089 32.177 96.7991 32.6559 96.5626L49.9996 87.8516L67.3434 96.5626C67.7869 96.7586 68.2648 96.8648 68.7496 96.8751C69.5784 96.8751 70.3733 96.5458 70.9593 95.9598C71.5454 95.3737 71.8746 94.5789 71.8746 93.7501V63.9845C77.3451 59.4871 81.2912 53.4083 83.1722 46.5808C85.0532 39.7533 84.7771 32.5113 82.3816 25.8468C79.9862 19.1824 75.5887 13.4217 69.7916 9.35403C63.9945 5.28633 57.0815 3.11064 49.9996 3.12507ZM49.9996 65.6251C44.437 65.6251 38.9994 63.9756 34.3742 60.8852C29.7491 57.7947 26.1442 53.4022 24.0155 48.263C21.8868 43.1239 21.3298 37.4689 22.4151 32.0132C23.5003 26.5574 26.1789 21.546 30.1123 17.6127C34.0456 13.6793 39.057 11.0007 44.5127 9.91549C49.9684 8.83028 55.6234 9.38724 60.7626 11.516C65.9018 13.6447 70.2943 17.2495 73.3847 21.8747C76.4751 26.4998 78.1246 31.9375 78.1246 37.5001C78.1143 44.9561 75.1478 52.1038 69.8756 57.376C64.6034 62.6483 57.4557 65.6147 49.9996 65.6251Z" />
  </svg>
);

'''
'''--- src/images/WalletSVG.js ---
export const WalletSVG = ({ styles = '' }) => (
  <svg
    width="100"
    height="100"
    viewBox="0 0 100 100"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    stroke="currentColor"
    class={styles}
  >
    <path d="M84.375 28.125H21.875C21.0462 28.125 20.2513 27.7958 19.6653 27.2097C19.0792 26.6237 18.75 25.8288 18.75 25C18.75 24.1712 19.0792 23.3763 19.6653 22.7903C20.2513 22.2042 21.0462 21.875 21.875 21.875H75C75.8288 21.875 76.6237 21.5458 77.2097 20.9597C77.7958 20.3737 78.125 19.5788 78.125 18.75C78.125 17.9212 77.7958 17.1263 77.2097 16.5403C76.6237 15.9542 75.8288 15.625 75 15.625H21.875C19.3918 15.6353 17.0132 16.6263 15.2572 18.3822C13.5013 20.1382 12.5103 22.5168 12.5 25V75C12.5103 77.4832 13.5013 79.8618 15.2572 81.6178C17.0132 83.3737 19.3918 84.3647 21.875 84.375H84.375C86.0326 84.375 87.6223 83.7165 88.7944 82.5444C89.9665 81.3723 90.625 79.7826 90.625 78.125V34.375C90.625 32.7174 89.9665 31.1277 88.7944 29.9556C87.6223 28.7835 86.0326 28.125 84.375 28.125ZM70.3125 60.9375C69.3854 60.9375 68.4791 60.6626 67.7083 60.1475C66.9374 59.6324 66.3366 58.9004 65.9818 58.0438C65.627 57.1873 65.5342 56.2448 65.7151 55.3355C65.8959 54.4262 66.3424 53.591 66.9979 52.9354C67.6535 52.2799 68.4887 51.8334 69.398 51.6526C70.3073 51.4717 71.2498 51.5645 72.1063 51.9193C72.9629 52.2741 73.6949 52.8749 74.21 53.6458C74.7251 54.4166 75 55.3229 75 56.25C75 57.4932 74.5061 58.6855 73.6271 59.5646C72.748 60.4436 71.5557 60.9375 70.3125 60.9375Z" />
  </svg>
);

'''
'''--- src/images/Warning.js ---
export const Warning = () => (
  <svg
    width="24"
    height="24"
    viewBox="0 0 24 24"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M22.1906 17.6249L13.95 3.37494C13.7527 3.03222 13.4686 2.74755 13.1262 2.5496C12.7839 2.35166 12.3954 2.24744 12 2.24744C11.6045 2.24744 11.2161 2.35166 10.8737 2.5496C10.5314 2.74755 10.2473 3.03222 10.05 3.37494L1.80936 17.6249C1.60917 17.9659 1.50279 18.3538 1.501 18.7492C1.49921 19.1446 1.60209 19.5334 1.79919 19.8762C1.99629 20.219 2.28058 20.5035 2.62321 20.7009C2.96583 20.8982 3.35458 21.0014 3.74998 20.9999H20.25C20.6454 21.0014 21.0341 20.8982 21.3768 20.7009C21.7194 20.5035 22.0037 20.219 22.2008 19.8762C22.3979 19.5334 22.5008 19.1446 22.499 18.7492C22.4972 18.3538 22.3908 17.9659 22.1906 17.6249ZM11.25 9.74994C11.25 9.55103 11.329 9.36026 11.4697 9.21961C11.6103 9.07896 11.8011 8.99994 12 8.99994C12.1989 8.99994 12.3897 9.07896 12.5303 9.21961C12.671 9.36026 12.75 9.55103 12.75 9.74994V13.4999C12.75 13.6989 12.671 13.8896 12.5303 14.0303C12.3897 14.1709 12.1989 14.2499 12 14.2499C11.8011 14.2499 11.6103 14.1709 11.4697 14.0303C11.329 13.8896 11.25 13.6989 11.25 13.4999V9.74994ZM12 17.9999C11.7775 17.9999 11.56 17.934 11.375 17.8103C11.19 17.6867 11.0458 17.511 10.9606 17.3055C10.8755 17.0999 10.8532 16.8737 10.8966 16.6555C10.94 16.4372 11.0472 16.2368 11.2045 16.0794C11.3618 15.9221 11.5623 15.815 11.7805 15.7716C11.9987 15.7281 12.2249 15.7504 12.4305 15.8356C12.6361 15.9207 12.8118 16.0649 12.9354 16.2499C13.059 16.4349 13.125 16.6524 13.125 16.8749C13.125 17.1733 13.0065 17.4595 12.7955 17.6704C12.5845 17.8814 12.2984 17.9999 12 17.9999Z"
      fill="#FA4035"
    />
  </svg>
);

'''
'''--- src/index.js ---
// React
import React from 'react';
import ReactDOM from 'react-dom/client';
import { App } from './App';
import 'react-toastify/dist/ReactToastify.css';
import { Provider as RollbarProvider, ErrorBoundary } from '@rollbar/react'; // Provider imports 'rollbar'
import { Provider as ReduxProvider } from 'react-redux';

// NEAR
import { Wallet } from './utils/nearWallet';
import { getConfig } from './utils/config';
import './styles/index.css';
import store from './redux/store';

const CONTRACT_ADDRESS = getConfig().app_contract;
const rollbarConfig = {
  accessToken: '31e514c3334a42728684b0638472dd32',
  environment: 'testenv',
};

// When creating the wallet you can optionally ask to create an access key
// Having the key enables to call non-payable methods without interrupting the user to sign
export const wallet = new Wallet({ createAccessKeyFor: CONTRACT_ADDRESS });

const root = ReactDOM.createRoot(document.getElementById('root'));

// Setup on page load
window.onload = async () => {
  root.render(
    <RollbarProvider config={rollbarConfig}>
      <ErrorBoundary
        fallbackUI={
          <p className="p-4">Oops an error occurred , please try again</p>
        }
      >
        <ReduxProvider store={store}>
          <App />
        </ReduxProvider>
      </ErrorBoundary>
    </RollbarProvider>
  );
};

'''
'''--- src/pages/index.js ---
import 'regenerator-runtime/runtime';
import React, { useEffect } from 'react';

import PrivacyComponent from '../components/common/PrivacyCard';
import Design from '../images/NDC-Lines.svg';
import Landing from './unAuth';
import Home from './auth/Home';
import GoogleCaptchaWrapper from './auth/GoogleCaptchaWrapper';
import { getConfig } from '../utils/config';
import { wallet } from '..';
import { WalletSVG } from '../images/WalletSVG';
import { FaceSVG } from '../images/FaceSVG';
import { MintSVG } from '../images/MintSVG';
import Tabs from '../components/fractalVerification/FvVerificationTabs';
import { supabase } from '../utils/supabase';
import {
  ContractMethodNames,
  LSKeys,
  ReducerNames,
  CommunityDataKeys,
} from '../utils/constants';
import {
  deleteUserDataFromSupabase,
  isNumber,
  log_event,
  convertToTimestamptz,
  addIPAddr,
} from '../utils/utilityFunctions';
import { isEqual } from 'lodash';
import { useDispatch, useSelector } from 'react-redux';
import {
  setActivePageIndex,
  setSuccessSBTPage,
} from '../redux/reducer/commonReducer';
import { revokeSBTs, soulTransfer } from '../redux/reducer/sbtsReducer';
import { updateTrackerStatus } from '../redux/reducer/tracker';
import { fpPromise } from '../utils/fingerprint';

const URL = window.location;

const IndexPage = () => {
  const { fvToken, ogToken, isUserHuman } = useSelector(
    (state) => state[ReducerNames.SBT]
  );
  const { isUserLogin, isAdmin, activePageIndex } = useSelector(
    (state) => state[ReducerNames.COMMON]
  );

  const dispatch = useDispatch();

  async function storeCommunityVerticalData() {
    try {
      const communityName = localStorage.getItem('community-name');
      const communityVertical = localStorage.getItem('community-vertical');
      if (communityName && fvToken) {
        const { data } = await supabase.select('scoreboard', {
          account: wallet.accountId,
        });
        if (!data?.[0]) {
          await supabase.insert('scoreboard', {
            account: wallet.accountId,
            [CommunityDataKeys.COMMUNITY_NAME]: communityName,
            [CommunityDataKeys.COMMUNITY_VERTICAL]: communityVertical,
          });
        }
        // since the data is stored in db, removing it from LS
        localStorage.removeItem(CommunityDataKeys.COMMUNITY_NAME);
        localStorage.removeItem(CommunityDataKeys.COMMUNITY_VERTICAL);
      }
    } catch (error) {
      log_event({ event_log: 'Scoreboard Error: ' + JSON.stringify(error) });
      console.log('Error occurred while saving data in scoreboard db', error);
    }
  }

  // checking for existing user data with token_id to make sure we store data for all users (new and old)
  async function createFVEventLog() {
    const { data } = await supabase.select('users', {
      wallet_identifier: wallet.accountId,
    });
    if (!data?.length) {
      const userData = {
        fv_token_id: fvToken.token,
        fv_issued_date: convertToTimestamptz(fvToken?.metadata?.issued_at),
        fv_expire_date: convertToTimestamptz(fvToken?.metadata?.expires_at),
        fv_status: 'Mint Success',
        wallet_identifier: wallet.accountId,
      };
      await supabase.insert('users', userData);
      log_event({
        event_log: `User successfully minted their FV SBT token: ${fvToken.token}`,
      });
    } else if (data?.length > 0 && !data[0]?.['fv_token_id']) {
      // update data
      const userData = {
        fv_token_id: fvToken.token,
        fv_issued_date: convertToTimestamptz(fvToken?.metadata?.issued_at),
        fv_expire_date: convertToTimestamptz(fvToken?.metadata?.expires_at),
        fv_status: 'Mint Success',
      };
      await supabase.update('users', userData, {
        wallet_identifier: wallet.accountId,
      });
    }
  }

  async function createOGEventLog() {
    const { data } = await supabase.select('users', {
      wallet_identifier: wallet.accountId,
    });
    if (!data?.length) {
      // no entry exists, insert data
      const userData = {
        og_tokens_metadata: ogToken,
        wallet_identifier: wallet.accountId,
      };
      await supabase.insert('users', userData);
    } else if (
      !data[0]?.['og_tokens_metadata'] ||
      !isEqual(data[0]?.['og_tokens_metadata'], ogToken) // some new type of OG token can be issued
    ) {
      // update data
      const userData = {
        og_tokens_metadata: ogToken,
      };
      await supabase.update('users', userData, {
        wallet_identifier: wallet.accountId,
      });
    }
  }

  useEffect(() => {
    storeCommunityVerticalData();
    const { succes_fractal_state } = getConfig();
    const URL_state = new URLSearchParams(URL.search).get('state');

    if (URL_state === succes_fractal_state && wallet?.accountId) {
      dispatch(setActivePageIndex(2));
    }
    if (fvToken && localStorage.getItem(LSKeys.SHOW_SBT_PAGE)) {
      dispatch(setSuccessSBTPage(true));
      localStorage.removeItem(LSKeys.SHOW_SBT_PAGE);
      dispatch(setActivePageIndex(2));
    }
    if (fvToken) {
      createFVEventLog();
    }
  }, [fvToken, wallet.accountId]);

  useEffect(() => {
    // add ip address
    if (isUserHuman) {
      fpPromise
        .then((fp) => fp.get())
        .then((result) => addIPAddr(result.visitorId));
    }
  }, [isUserHuman]);

  useEffect(() => {
    if (ogToken) {
      createOGEventLog();
    }
  }, [ogToken]);

  useEffect(() => {
    // to check for sbt_burn_all and transfer response since we need to call them in loop till we get true as response
    const txnHash = new URLSearchParams(window.location.search).get(
      'transactionHashes'
    );
    if (txnHash) {
      wallet.getTransactionMethodAndResult(txnHash).then((resp) => {
        switch (resp.method) {
          case ContractMethodNames.BURN: {
            if (resp.result === 'false' || resp.result === false) {
              return dispatch(revokeSBTs());
            } else if (resp.result === 'true' || resp.result === true) {
              // all tokens are deleted, deleting data from db also
              return deleteUserDataFromSupabase();
            }
            return;
          }
          case ContractMethodNames.TRANSFER: {
            const value = resp?.result?.[1];
            if (value === 'false' || value === false) {
              const addr = localStorage.getItem(LSKeys.TRANSFER_ADDR);
              return dispatch(soulTransfer(addr));
            } else if (value === 'true' || value === true) {
              localStorage.removeItem(LSKeys.TRANSFER_ADDR);
            }
            return;
          }
          default:
            return;
        }
      });
    }
  }, []);

  useEffect(() => {
    // setting vertical and community in LS till user mint the token (after which we store the data in supbase db)
    const search = window.location.search;
    const params = new URLSearchParams(search);
    const community = params.get('community');
    const vertical = params.get('vertical');
    if (community && vertical) {
      localStorage.setItem(CommunityDataKeys.COMMUNITY_NAME, community);
      localStorage.setItem(CommunityDataKeys.COMMUNITY_VERTICAL, vertical);
    }
  }, []);

  const TabsData = [
    {
      name: 'Connect Wallet',
      header: <WalletSVG styles={`w-10 h-10 stroke-themeColor`} />,
    },
    {
      name: 'Face Scan',
      header: <FaceSVG styles={`w-10 h-10 stroke-themeColor`} />,
    },
    {
      name: 'Mint SBT',
      header: <MintSVG styles={`w-10 h-10 stroke-themeColor`} />,
    },
  ];

  const getStarted = () => {
    if (isUserLogin) {
      dispatch(setActivePageIndex(1));
    } else {
      dispatch(setActivePageIndex(0));
    }
  };

  useEffect(() => {
    if (isNumber(activePageIndex)) {
      dispatch(updateTrackerStatus(false));
    } else {
      dispatch(updateTrackerStatus(true));
    }
  }, [activePageIndex]);

  return (
    <div
      style={{
        backgroundImage:
          typeof activePageIndex !== 'number' && !isAdmin
            ? `url(${Design})`
            : 'none',
        zIndex: 10,
      }}
      className={'bg-no-repeat home_bg_image'}
    >
      <div
        style={{ background: 'transparent' }}
        className="isolate bg-white mx-auto max-w-7xl px-5 md:pt-10"
      >
        {isAdmin ? (
          <Tabs />
        ) : (
          <>
            {typeof activePageIndex !== 'number' ? (
              <>
                <div className="flex flex-col gap-y-16 md:gap-y-32">
                  <div className="flex flex-wrap">
                    <div className="flex-1 min-w-[300px]">
                      <h1 className="font-bold text-5xl">
                        Get your Proof of Personhood with
                        <br />
                        I-AM-HUMAN
                      </h1>
                      <p className="my-5 mt-10">
                        {wallet.accountId
                          ? 'Join the NEAR Digital Collective (NDC) community. Engage in governance, voting, build a strong on-chain reputation, unlock DAO potential, and drive grassroots funding. Shape the future of NEAR with meaningful and impactful actions.'
                          : 'Welcome, I-AM-HUMAN is your launchpad for several different types of Soul Bound Tokens (SBTs). Each of which will identify you as a human. With enough of these SBTs, you will have a strong proof-of-personhood, which give you access to voting on governance, on-chain reputation, DAOs, grassroots funding, and much more.'}
                      </p>
                      <p>All you need to do is 3 easy steps.</p>
                      <div className="my-10">
                        <div className="grid grid-cols-3 gap-1 md:gap-2 items-center justify-center md:justify-start">
                          {TabsData.map((tab, index) => {
                            return (
                              <div className="flex items-center gap-1 md:gap-2">
                                <div className="rounded-full border border-2 border-themeColor svg-themeColor w-fit p-2">
                                  {tab.header}
                                </div>
                                {index < 2 ? (
                                  <hr className="h-px my-8 bg-gradient-to-r from-purple-600 to-indigo-600 border-0 w-full" />
                                ) : (
                                  <span></span>
                                )}
                              </div>
                            );
                          })}
                        </div>
                        {/* for responsive better styling */}
                        <div className="grid grid-cols-3 gap-1 md:gap-2 items-center justify-center md:justify-start">
                          {TabsData.map((tab) => {
                            return (
                              <p className="text-sm md:text-md mt-2">
                                {tab.name}
                              </p>
                            );
                          })}
                        </div>
                      </div>
                      <div className="flex md:justify-start flex-wrap gap-x-5 gap-y-5">
                        {/* show get started only if no tokens are minted by user */}
                        {!isUserHuman && (
                          <button
                            onClick={() => getStarted()}
                            className="rounded-md border border-transparent bg-gradient-to-r from-purple-600 to-indigo-600 bg-origin-border px-5 md:px-10 py-3 text-base font-medium text-white shadow-sm hover:from-purple-700 hover:to-indigo-700"
                          >
                            Get Started
                          </button>
                        )}
                        {isUserHuman && (
                          <button
                            onClick={() =>
                              window.open(
                                'https://t.me/+fcNhYGxK891lMjMx',
                                '_blank'
                              )
                            }
                            className="rounded-md border border-transparent bg-gradient-to-r from-purple-600 to-indigo-600 bg-origin-border px-4 py-3 text-base font-medium text-white shadow-sm hover:from-purple-700 hover:to-indigo-700"
                          >
                            Join the NDC Community
                          </button>
                        )}
                        {isUserHuman && !fvToken && (
                          <button
                            onClick={() => dispatch(setActivePageIndex(1))}
                            className="rounded-md border border-transparent bg-gradient-to-r from-purple-600 to-indigo-600 bg-origin-border px-4 py-3 text-base font-medium text-white shadow-sm hover:from-purple-700 hover:to-indigo-700"
                          >
                            Get Your FV SBT
                          </button>
                        )}
                        <button
                          onClick={() =>
                            window.open(
                              'https://i-am-human.gitbook.io/i-am-human-docs/',
                              '_blank'
                            )
                          }
                          className="rounded-md border border-purple-500 text-purple-500 border-1 px-5 md:px-10 py-2 text-base font-light text-black shadow-sm"
                        >
                          Learn More
                        </button>
                      </div>
                    </div>
                    <div className="flex-1 min-w-[300px] order-last">
                      <img
                        src={Design}
                        className="w-full object-fill hidden md:invisible"
                      />
                    </div>
                  </div>
                  {isUserLogin ? <Home /> : <Landing />}
                </div>
                <PrivacyComponent />
              </>
            ) : (
              <GoogleCaptchaWrapper />
            )}
          </>
        )}
      </div>
    </div>
  );
};

export default IndexPage;

'''
'''--- src/pages/unAuth/index.js ---
import React from 'react';
import { ImageSrc } from '../../utils/constants';

const Landing = () => {
  return (
    <div className="flex flex-col gap-10 md:gap-32 mb-20">
      <div className="flex flex-wrap gap-10">
        <div className="flex-1 min-w-[300px] md:mt-10">
          <h2 className="font-bold text-4xl">
            Get your Face Verification Soul Bound Token
          </h2>
          <p className="my-5">
            We have partnered with Fractal for Face Verification. Why? With
            nearly 1 million users across 200+ projects, Fractal provides a full
            stack of open source identity solutions that give you ability to
            easily verify and prove that you are a human. They ensure that each
            person only creates one unique account.
          </p>
          <button
            onClick={() =>
              window.open(
                'https://i-am-human.gitbook.io/i-am-human-docs/face-verification-sbt',
                '_blank'
              )
            }
            className="inline-flex rounded-md border border-purple-500 text-purple-500 border-1 px-5 py-2 md:mt-5 text-base font-light text-black shadow-sm"
          >
            Learn More
          </button>
        </div>
        <div className="md:min-w-[400px] order-first md:order-last w-full md:w-1/3 flex justify-center md:justify-end">
          <img
            src={ImageSrc.FVSBT}
            className="object-fill rounded-lg md:w-2/3 badge"
          />
        </div>
      </div>
      <div className="flex flex-wrap gap-10">
        <div className="flex-1 min-w-[300px] md:mt-10">
          <h2 className="font-bold text-4xl">Get Your OG Soul Bound Token</h2>
          <p className="my-5">
            Are you an esteemed member of the NEAR community? It's time to
            showcase your contribution to NEAR. By acquiring the OG Soul Bound
            Token, the first reputation-based token, you'll join a select
            community of trusted individuals who are actively shaping the future
            of the NEAR ecosystem. The OG SBT represents your commitment and
            dedication to NEAR, highlighting your continuous presence and
            involvement in shaping the NEAR ecosystem.
          </p>
          <div className="flex flex-wrap gap-5">
            <button
              onClick={() =>
                window.open(
                  'https://i-am-human.gitbook.io/i-am-human-docs/og-sbt',
                  '_blank'
                )
              }
              className="inline-flex rounded-md border border-purple-500 text-purple-500 border-1 px-5 py-2 text-base font-light text-black shadow-sm"
            >
              Closed
            </button>
          </div>
        </div>
        <div className="md:min-w-[400px] order-first w-full md:w-1/3 flex justify-center md:justify-start">
          <img
            src={ImageSrc.OGSBT}
            className="object-fill rounded-lg md:w-2/3 badge"
          />
        </div>
      </div>
      <div className="flex flex-wrap gap-10">
        <div className="flex-1 min-w-[300px] md:mt-10">
          <h2 className="font-bold text-4xl">
            Get Your “I Voted” Soul Bound Token
          </h2>
          <p className="my-5">
            Gear up for the inaugural NDC General Election on September 8! Cast
            your votes for the three governance houses and claim the important
            "I VOTED" Soul Bound Token. This is a reputation Soul Bound Token.
            Unlock the ability to participate in government referendums and
            showcase your participation in the NEAR Ecosystem NDC Election. Mark
            September 8 on your calendar and be part of this history of
            governance on NEAR.
          </p>

          <button
            onClick={() =>
              window.open(
                'https://pages.near.org/blog/ndc-v1-governance-elections-faq/',
                '_blank'
              )
            }
            className="inline-flex rounded-lg border border-purple-500 text-purple-500 border-1 px-5 py-2 md:mt-5 text-base font-light text-black shadow-sm"
          >
            Learn More
          </button>
        </div>
        <div className="md:min-w-[400px] order-first md:order-last w-full md:w-1/3 flex justify-center md:justify-end">
          <img
            src={ImageSrc.IVotedSBT}
            className="object-cover rounded-lg md:w-2/3 badge"
          />
        </div>
      </div>
      <div className="flex flex-wrap gap-10">
        <div className="flex-1 min-w-[300px] md:mt-10">
          <h2 className="font-bold text-4xl">Get Your KYC Soul Bound Token</h2>
          <p className="my-5">
            Have you already KYC with Fractal? You are in luck. If you have
            received a bounty payout for your contribution from the NEAR
            Foundation, you will not be required to re-verify your identity when
            minting your SBTs. Mint your SBTs now.
          </p>

          <button
            onClick={() =>
              window.open(
                'https://i-am-human.gitbook.io/i-am-human-docs/kyc-sbt',

                '_blank'
              )
            }
            className="inline-flex rounded-md border border-purple-500 text-purple-500 border-1 px-5 py-2 md:mt-5 text-base font-light text-black shadow-sm"
          >
            Learn More
          </button>
        </div>
        <div className="md:min-w-[400px] order-first w-full md:w-1/3 flex justify-center md:justify-start">
          <img
            src={ImageSrc.KYCSBT}
            className="object-fill rounded-lg md:w-2/3 badge"
          />
        </div>
      </div>
      {/* we won't have it right now */}
      {/* <div className="flex flex-wrap gap-10">
        <div className="flex-1 min-w-[300px] md:mt-10">
          <h2 className="font-bold text-4xl">
            Get Your Community Soul Bound Token
          </h2>
          <p className="my-5">
            Are you part of the Community? If you are active in the NEAR
            Community, we will be introducing Community SBT soon. Mint your
            Community SBT and join us to build web3 governance.
          </p>
          <button
            onClick={() =>
              window.open(
                'https://i-am-human.gitbook.io/i-am-human-docs/community-sbt',
                '_blank'
              )
            }
            className="cursor-auto inline-flex rounded-md border border-gray-500 border-1 px-5 md:mt-5 py-2 text-base font-light text-black shadow-sm"
          >
            Coming Soon
          </button>
        </div>
        <div className="md:min-w-[400px] order-first w-full md:w-1/3 flex justify-center md:justify-start">
          <img
            src={CommunitySBTImage}
            className="object-fill rounded-lg md:w-2/3"
          />
        </div>
      </div> */}
    </div>
  );
};

export default Landing;

'''
'''--- src/redux/reducer/commonReducer.js ---
import { createSlice } from '@reduxjs/toolkit';
import { ReducerNames } from '../../utils/constants';

export const commonReducer = createSlice({
  name: ReducerNames.COMMON,
  initialState: {
    isUserLogin: false,
    isAdmin: false,
    activePageIndex: null, // for verification screens
    isSuccessSBTPage: false, // to show success page
    showConfetti: false,
  },
  reducers: {
    updateUserLogin: (state, action) => {
      state.isUserLogin = action.payload;
    },
    setActivePageIndex: (state, action) => {
      state.activePageIndex = action.payload;
    },
    setSuccessSBTPage: (state, action) => {
      state.isSuccessSBTPage = action.payload;
    },
    updateAdminLogin: (state, action) => {
      state.isAdmin = action.payload;
    },
    updateShowConfetti: (state, action) => {
      state.showConfetti = action.payload;
    },
  },
});

export const {
  updateUserLogin,
  setActivePageIndex,
  setSuccessSBTPage,
  updateAdminLogin,
  updateShowConfetti,
} = commonReducer.actions;

export default commonReducer.reducer;

'''
'''--- src/redux/reducer/oracleReducer.js ---
import { createSlice } from '@reduxjs/toolkit';
import { ReducerNames } from '../../utils/constants';

export const oracleReducer = createSlice({
  name: ReducerNames.ORACLE,
  initialState: {
    responseData: null,
  },
  reducers: {
    updateResponse: (state, action) => {
      state.responseData = action.payload;
    },
  },
});

export const { updateResponse } = oracleReducer.actions;

export default oracleReducer.reducer;

'''
'''--- src/redux/reducer/sbtsReducer.js ---
import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import {
  ContractMethodNames,
  ReducerNames,
  TokenTypes,
} from '../../utils/constants';
import { wallet } from '../..';
import { getConfig } from '../../utils/config';
import { decodeBase64 } from '../../utils/utilityFunctions';

const { app_contract } = getConfig();

export const revokeSBTs = createAsyncThunk('SBT/revokeSBTs', async () => {
  try {
    const response = await wallet.callMethod({
      contractId: app_contract,
      method: ContractMethodNames.BURN,
      args: {},
    });
    return response;
  } catch (error) {
    console.error('Error occured in revoking user tokens: ', error);
    throw error;
  }
});

export const soulTransfer = createAsyncThunk(
  'SBT/soulTransfer',
  async (address) => {
    try {
      const response = await wallet.callMethod({
        contractId: app_contract,
        method: ContractMethodNames.TRANSFER,
        args: { recipient: address },
      });
      return response;
    } catch (error) {
      console.error('Error occured in transferring user tokens: ', error);
      throw error;
    }
  }
);

export const sbtReducer = createSlice({
  name: [ReducerNames.SBT],
  initialState: {
    fvToken: null,
    kycToken: null,
    ogToken: null,
    vibeToken: null,
    regenToken: null,
    isLoading: false,
    error: null,
    tokenRemoveSuccess: false,
    continueLoop: false, // for transfer and burn
    isUserHuman: false, // true if user has any SBT Token
    kudosToken: null,
    ndcContributor: null,
    ndcChampion: null,
    gwgCoreContributor: null,
    modToken: null,
    iVotedToken: null,
    coaToken: null,
    homToken: null,
    tcToken: null,
  },
  reducers: {
    updateTokens: (state, action) => {
      const { type, value } = action.payload;
      switch (type) {
        case TokenTypes.FV:
          state.fvToken = value;
          break;
        case TokenTypes.KYC:
          state.kycToken = value;
          break;
        case TokenTypes.OG:
          state.ogToken = value;
          break;
        case TokenTypes.VIBE:
          state.vibeToken = value;
          break;
        case TokenTypes.REGEN:
          state.regenToken = value;
          break;
        case TokenTypes.KUDOS:
          state.kudosToken = value;
          break;
        case TokenTypes.GWG__Core_Contributor:
          state.gwgCoreContributor = value;
          break;
        case TokenTypes.NDC_Champion:
          state.ndcChampion = value;
          break;
        case TokenTypes.NDC_Contributor:
          state.ndcContributor = value;
          break;
        case TokenTypes.MOD:
          state.modToken = value;
          break;
        case TokenTypes.I_VOTED:
          state.iVotedToken = value;
          break;
        case TokenTypes.CoA:
          state.coaToken = value;
          break;
        case TokenTypes.HoM:
          state.homToken = value;
          break;
        case TokenTypes.TC:
          state.tcToken = value;
          break;
        default:
          break;
      }
      state.isUserHuman =
        state.fvToken ||
        state.kycToken ||
        state.ogToken ||
        state.vibeToken ||
        state.regenToken ||
        state.kudosToken ||
        state.ndcChampion ||
        state.ndcContributor ||
        state.gwgCoreContributor ||
        state.modToken ||
        state.iVotedToken ||
        state.coaToken ||
        state.homToken ||
        state.tcToken;
    },
    handleErrorMessage: (state, action) => {
      state.error = action.payload;
    },
    // when burned or signed out
    removeAllTokens: (state, action) => {
      state.fvToken = null;
      state.kycToken = null;
      state.ogToken = null;
      state.vibeToken = null;
      state.regenToken = null;
      state.kudosToken = null;
      state.gwgCoreContributor = null;
      state.ndcChampion = null;
      state.ndcContributor = null;
      state.modToken = null;
      state.iVotedToken = null;
      state.tcToken = null;
      state.coaToken = null;
      state.homToken = null;
    },
    updateTokenRemoveStatus: (state, action) => {
      state.tokenRemoveSuccess = !state.tokenRemoveSuccess;
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(revokeSBTs.pending, (state) => {
        state.isLoading = true;
        state.error = null;
        state.tokenRemoveSuccess = false;
        state.continueLoop = false;
      })
      .addCase(revokeSBTs.fulfilled, (state, action) => {
        state.isLoading = false;
        const response = decodeBase64(action.payload?.status?.SuccessValue);
        if (response === 'false' || response === false) {
          state.continueLoop = true;
        } else if (response === 'true' || response === true) {
          state.tokenRemoveSuccess = true;
        }
      })
      .addCase(revokeSBTs.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.error.message;
      });
    builder
      .addCase(soulTransfer.pending, (state) => {
        state.isLoading = true;
        state.error = null;
        state.tokenRemoveSuccess = false;
        state.continueLoop = false;
      })
      .addCase(soulTransfer.fulfilled, (state, action) => {
        state.isLoading = false;
        const response = decodeBase64(
          action.payload?.status?.SuccessValue
        )?.[1];
        if (response === 'false' || response === false) {
          state.continueLoop = true;
        } else if (response === 'true' || response === true) {
          state.tokenRemoveSuccess = true;
        }
      })
      .addCase(soulTransfer.rejected, (state, action) => {
        state.isLoading = false;
        state.error = action.error.message;
      });
  },
});

export const {
  updateTokens,
  removeAllTokens,
  handleErrorMessage,
  updateTokenRemoveStatus,
} = sbtReducer.actions;

export default sbtReducer.reducer;

'''
'''--- src/redux/reducer/tracker.js ---
import { createSlice } from '@reduxjs/toolkit';

export const trackerReducer = createSlice({
  name: 'progressTracker',
  initialState: {
    showTracker: true,
  },
  reducers: {
    updateTrackerStatus: (state, action) => {
      state.showTracker = action.payload;
    },
  },
});

export const { updateTrackerStatus } = trackerReducer.actions;

export default trackerReducer.reducer;

'''
'''--- src/redux/store/index.js ---
import { configureStore } from '@reduxjs/toolkit';
import oracleReducer from '../reducer/oracleReducer';
import trackerReducer from '../reducer/tracker';
import { ReducerNames } from '../../utils/constants';
import sbtReducer from '../reducer/sbtsReducer';
import commonReducer from '../reducer/commonReducer';

export default configureStore({
  reducer: {
    [ReducerNames.ORACLE]: oracleReducer,
    [ReducerNames.SBT]: sbtReducer,
    [ReducerNames.COMMON]: commonReducer,
    [ReducerNames.PROGRESS]: trackerReducer,
  },
});

'''
'''--- src/services/api.js ---
import { getConfig } from '../utils/config';

export const verifyUser = async (data) => {
  return fetch(getConfig().fractal_api + '/verify', {
    method: 'POST',
    headers: {
      'Content-type': 'application/json',
    },
    body: JSON.stringify(data),
  }).then((response) => response.json());
};

'''
'''--- src/styles/index.css ---
html {
  --theme-color: #9333ea;
}

.home_bg_image {
  background-position: 28rem 3rem;
}

@media (max-width: 680px) {
  .home_bg_image {
    background-position: 100% 100%;
  }
}

@media (min-width: 680px) and (max-width: 850px) {
  .home_bg_image {
    background-position: 12rem 5rem;
  }
}

@media (min-width: 850px) and (max-width: 1100px) {
  .home_bg_image {
    background-position: 18rem 1rem;
  }
}

@media (min-width: 1100px) and (max-width: 1350px) {
  .home_bg_image {
    background-position: 20rem -5rem;
  }
}

@media (min-width: 1350px) and (max-width: 1550px) {
  .home_bg_image {
    background-position: 28rem -8rem;
  }
}

@media (min-width: 1550px) and (max-width: 2000px) {
  .home_bg_image {
    background-position: 39rem -27rem;
    background-size: 80rem 80rem;
  }
}

@media (min-width: 2000px) and (max-width: 2400px) {
  .home_bg_image {
    background-position: 47rem -27rem;
    background-size: 80rem 80rem;
  }
}

@media (min-width: 2400px) and (max-width: 2750px) {
  .home_bg_image {
    background-position: 60rem -25rem;
    background-size: 80rem 80rem;
  }
}

@media (min-width: 2750px) and (max-width: 3250px) {
  .home_bg_image {
    background-position: 80rem -25rem;
    background-size: 80rem 80rem;
  }
}

@media (min-width: 3250px) {
  .home_bg_image {
    background-position: 90rem -25rem;
    background-size: 80rem 80rem;
  }
}

.w-webkit-fill {
  width: -webkit-fill-available;
}

.stroke-themeColor {
  stroke: var(--theme-color);
}

.border-themeColor {
  border-color: var(--theme-color);
}

.svg-themeColor svg {
  fill: var(--theme-color);
}

.svg-themeColor {
  fill: var(--theme-color);
}

.svg-gray {
  fill: rgba(209, 213, 219, 0.91);
}

.badge {
  position: relative;
  display: inline-block;
  top: 0;
  transition: all 0.2s ease;
}

.badge:before,
.badge:after {
  position: absolute;
  width: inherit;
  height: inherit;
  border-radius: inherit;
  background: inherit;
  content: '';
  margin: auto;
}

.badge:before {
  transform: rotate(60deg);
}

.badge:after {
  transform: rotate(-60deg);
}

.badge:hover {
  top: -6px;
}

.svg-green {
  fill: #4ade80;
}

.text-gradient {
  background: linear-gradient(to right, #8b5cf6, #6b46c1) !important;
  -webkit-background-clip: text !important;
  background-clip: text;
  -webkit-text-fill-color: transparent !important;
}

.hover-card:hover {
  background-color: white;
  border-radius: 1rem;
  box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.2);
  transition: 0.3s;
}

@media (max-width: 900px) {
  .bg-image {
    background-image: none !important;
  }
}

.text-decoration-red {
  text-decoration: solid 1px red;
}

.large-svg svg {
  width: 5rem !important;
  height: 5rem !important;
}

.bg-icon-white svg {
  fill: white !important;
}

'''
'''--- src/utils/config.js ---
const environment = process.env.REACT_APP_ENV ?? 'prod';

export function getConfig() {
  const commonConfig = {
    succes_fractal_state: 'facescan',
    regen_issuer_contract: 'issuer.regens.near',
    vibe_issuer_contract: 'issuer.proofofvibes.near',
    mods_issuer: 'community.i-am-human.near',
    election_contract: 'elections.ndc-gwg.near',
  };
  switch (environment) {
    case 'prod':
      return {
        network_id: 'mainnet',
        app_contract: 'registry.i-am-human.near',
        og_contract: 'community.i-am-human.near',
        fractal_contract: 'fractal.i-am-human.near',
        new_sbt_contract: 'sbt1.i-am-human.testnet',
        api_link: 'https://i-human-mainnet.chatme.page',
        fractal_api: 'https://i-human-oracle-mainnet.chatme.page',
        fractal_link: 'https://app.fractal.id',
        fractal_client_id: '6l6ze953tTjsog6VjZaCsCJ8LgiL_UqySA-E2f3ljPw',
        kudos_issuer_contract: 'kudos.ndctools.near',
        ...commonConfig,
      };
    case 'dev':
      return {
        network_id: 'testnet',
        app_contract: 'registry-1.i-am-human.testnet',
        og_contract: 'community-v1.i-am-human.testnet',
        // fractal_contract: 'fractal-1.i-am-human.testnet', // for DEV ENV
        fractal_contract: 'i-am-human-staging.testnet',
        new_sbt_contract: 'sbt1.i-am-human.testnet',
        api_link: 'https://i-human-testnet.chatme.page',
        fractal_api: 'https://i-human-oracle-testnet.chatme.page',
        fractal_link: 'https://app.next.fractal.id',
        fractal_client_id: 'D6SgXZQdWYk0D8ILkIGpNK75ufFpxD0Mp9sHFb_2oM8',
        kudos_issuer_contract: 'kudos-v1.gwg.testnet',
        // fractal_client_id: '2KdWlqCWoyMtfIHTEI60NgqDA015d0Uy2r5KieoZS3M', // for http://localhost:3000
        ...commonConfig,
      };
    default:
      throw new Error(`${environment} is not a valid NEAR environment`);
  }
}

'''
'''--- src/utils/constants.js ---
import moment from 'moment-timezone';

// OneE18 is an amount of 1 microNEAR
export const OneE18 = 1_000_000_000_000_000_000n;
// OneE21 is an amount of 1 miliNEAR
export const OneE21 = OneE18 * 1000n;
// OneE24 is an amount of 1 NEAR
export const OneE24 = OneE21 * 1000n;

export const TWITTER_TEXT = process.env.REACT_APP_TWITTER_TEXT; // using env so that marketing team is able to change it frequently

export const TWITTER_URL = `https://twitter.com/intent/tweet?text=${TWITTER_TEXT}`;

export const LSKeys = {
  SHOW_SBT_PAGE: 'showSuccessSBTPage',
  TRANSFER_ADDR: 'Transfer Address',
};

export const URLs = {
  SCOREBOARD: '/community-scoreboard',
  SBTs: '/community-sbts',
  HOME: '/',
  ACTIVATE: '/activate',
};

export const TokenTypes = {
  KYC: 'KYC',
  OG: 'OG',
  FV: 'FV',
  VIBE: 'Vibe',
  REGEN: 'Regen',
  KUDOS: 'Kudos',
  NDC_Champion: 'NDC Champion',
  NDC_Contributor: 'NDC Contributor',
  GWG__Core_Contributor: 'GWG Core Contributor',
  MOD: 'Mod',
  I_VOTED: 'I Voted',
  CoA: 'CoA',
  HoM: 'HoM',
  TC: 'TC',
};

export const ReducerNames = {
  ORACLE: 'Oracle',
  SBT: 'SBT',
  COMMON: 'Common',
  PROGRESS: 'Progress Tracker',
};

export const ContractMethodNames = {
  BURN: 'sbt_burn_all',
  TRANSFER: 'sbt_soul_transfer',
};

export const BrandColor = '#9333EA';

export const CommunityDataKeys = {
  COMMUNITY_NAME: 'community-name',
  COMMUNITY_VERTICAL: 'community-vertical',
};

export const ImageSrc = {
  ProofOfVibe:
    'https://bafybeibgjf5jqgmqgfcd2maih6n3juo3in5rblyuk3zhm4l3o6wysvippq.ipfs.nftstorage.link/',
  ProofOfRegen:
    'https://bafybeihaxmq6m74k6le2c7xldvhwds2e4erk4poidgsbumc6kivu7n3gwy.ipfs.nftstorage.link/',
  ProofOfKudos:
    'https://bafybeig3tgn5gnrv2c4edfun5ewcxr7vimymlsucpebdbvkzfbn6ksnghy.ipfs.nftstorage.link/',
  ProofOfDev:
    'https://bafybeias5z6ncjbpuusqs2ov7752skn2zaw3o4uw2vnjbdhg7hv4xxhsdy.ipfs.nftstorage.link/',
  OGSBT:
    'https://bafybeifl4fyd2clfuc73sz3c3cxyraapavx5q4a6pzflqhe4jcm26ib5be.ipfs.nftstorage.link/',
  NDCPoll:
    'https://bafkreifogwnduwjfy7hsystz2jhxfykjojgnbdgsfj2bolohpicjau44k4.ipfs.nftstorage.link/',
  NDCLogo:
    'https://bafkreifz73ori5ojogttw6jy4fkb6uiehcz4fwedd362bzmliryi627a6m.ipfs.nftstorage.link/',
  NDCKudos:
    'https://bafkreidbd57skxolss6un7zzdq3bn2t4kcpdqs3jxbqn7gdymxkd3a3zk4.ipfs.nftstorage.link/',
  NDCEvents:
    'https://bafkreicuaijmzmz7l2isi3csslaw3gzemfxtw2fcsbpmpqvhsupddeu6fq.ipfs.nftstorage.link/',
  IAHLogo:
    'https://bafybeid4hlg7litcsn4gjpk5qednyarcsgmadzjovjk5k7565xdtd2aulu.ipfs.nftstorage.link/',
  NDCContributor:
    'https://bafybeihqm7mgalpd5eojab62xgm5uriewubual4ia2hom3gw6w4b2qlp7e.ipfs.nftstorage.link/',
  NDCChampion:
    'https://bafybeifavv7ehsgs6dm3j62w3d6c6cx5a2gwfnyhbygp2cylebmkovl5n4.ipfs.nftstorage.link/',
  MOD: 'https://bafybeiflx3j4k65wtdwx7jcqsopj44x2safzdqd3kbcf6j5yke7v3ipspq.ipfs.nftstorage.link/',
  KYCSBT:
    'https://bafybeia3nlga6mdewvx3qboxbz2ufh5ao55n5pjnsvtkwz3qkfo6qr35fm.ipfs.nftstorage.link/',
  JuggernautSBT:
    'https://bafybeib7t53imgmlw7uuixoe77yi4hvrrvgpt7a2f5skp26yqfvcrd5fgm.ipfs.nftstorage.link/',
  IVotedSBT:
    'https://bafkreiccyddqgx2nmfsjizzwqanjm5h4tkfxtgmnz6cilvil2esz73ozbu.ipfs.nftstorage.link/',
  IAHLogoBG:
    'https://bafybeig5wzbcgfgojt5jo4hzytmt7yycmjivvn5t5zry73hllpqacgfskq.ipfs.nftstorage.link/',
  GWGCoreContributorSBT:
    'https://bafybeif25rcmixlqfpt6elslhcpbrgbcypfrero5q7yov5aqdofphxpwte.ipfs.nftstorage.link/',
  GWGContributorSBT:
    'https://bafybeic54hewquwj4ow3xcxo3lpzroskr3ihyh6dojme22s27ypdhgsdcy.ipfs.nftstorage.link/',
  GeniusSBT:
    'https://bafybeif3obkvf6zfaxbnb6if5ysassuint6w63lunpoe5umg72g773zeca.ipfs.nftstorage.link/',
  FVSBT:
    'https://bafybeifle6sajhabyxzgusimfwng6nclynzcjfkhkxox27pfgwpywmy3hu.ipfs.nftstorage.link/',
  DegenSBT:
    'https://bafybeih6kqhfke6xxroopz7imbelg3uodxdamdva7bbyvqsno3xxvc5qty.ipfs.nftstorage.link/',
  CreativeSBT:
    'https://bafybeiav4kx23oivkxa57nqheyumgodatxlvbwemkfe6aidn7n66jphnf4.ipfs.nftstorage.link/',
  CommunitySBT:
    'https://bafybeidoqupgkrh63ay2ji7lsg3vhn3c5tv6hybd6h2ytuz7tdqp2fhuzy.ipfs.nftstorage.link/',
  EmptyBG:
    'https://bafkreiaijntboz567hb7xhqwwmvqmtin64twkoiz3fhttg35ln372fvram.ipfs.nftstorage.link/',
  EmptyIcon:
    'https://bafkreialtxsodm5coxfkkec4ybakyghk7horpxnyuifg4la4ye6vjhlf64.ipfs.nftstorage.link/',
  CommunityFund:
    'https://bafkreicvwvjtybib7nodjus5ynomjasp3xskz2et5tkrx6k7t3h7dsq2za.ipfs.nftstorage.link/',
  ELECTION_ICON:
    'https://bafkreidrd4ci3p23e7zttaq5ukpzeddyzvfdm37x3xomju3rgeq77f2dba.ipfs.nftstorage.link/',
  Astra:
    'https://bafkreig2uojfxnf4bto6wuzaylec7wjmo4lznv6nz42fpas2bb4wuueehe.ipfs.nftstorage.link/',
  HoM: 'https://bafybeifwzgubzysrir7pcnrkstxsgtxferm2qesu3hduasuaucwnn7enyu.ipfs.nftstorage.link/',
  CoA: 'https://bafybeidw2rljcg3okollcnycryk2zc6zk3ykbygzattagdpjbagqp4cebm.ipfs.nftstorage.link/',
  TC: 'https://bafybeid5xdhn6zx3s5htfuvzlueeyxgylejevnumlbxjfxc7a6g27bhr7u.ipfs.nftstorage.link/',
};

export const Links = {
  KUDOS_WIDGET: 'https://near.org/kudos.ndctools.near/widget/NDC.Kudos.Main',
  WHISTLEBLOWER:
    'https://medium.com/@neardigitalcollective/introducing-ndc-whistleblower-bounty-program-d4fe1b9fc5a0',
  FAIR_VOTING_POLICY:
    'https://bafkreidwdxocdkfsv6srynw7ipnogfuw76fzncmxd5jv7furbsn5cp4bz4.ipfs.nftstorage.link/',
  ELECTIONS:
    'https://near.org/election.ndctools.near/widget/NDC.Elections.Main',
  NOMINATIONS:
    'https://near.org/nomination.ndctools.near/widget/NDC.Nomination.Page',
  ASTRA: 'https://near.org/astraplusplus.ndctools.near/widget/home?page=daos',
};

export const AccountFlag = {
  Blacklisted: 'Blacklisted',
  Verified: 'Verified',
};

'''
'''--- src/utils/fingerprint.js ---
import * as FingerprintJS from '@fingerprintjs/fingerprintjs-pro';

// Initilize the agent with load()
const fpPromise = FingerprintJS.load({
  apiKey: process.env.REACT_APP_FINGERPRINT_KEY,
});

export { fpPromise };

'''
'''--- src/utils/nearWallet.js ---
/* A helper file that simplifies using the wallet selector */

// near api js
import { providers } from 'near-api-js';

// wallet selector UI
import '@near-wallet-selector/modal-ui/styles.css';
import { setupModal } from '@near-wallet-selector/modal-ui';
import LedgerIconUrl from '@near-wallet-selector/ledger/assets/ledger-icon.png';
import MyNearIconUrl from '@near-wallet-selector/my-near-wallet/assets/my-near-wallet-icon.png';
import meteorIconUrl from '@near-wallet-selector/meteor-wallet/assets/meteor-icon.png';
// wallet selector options
import { setupWalletSelector } from '@near-wallet-selector/core';
import { setupLedger } from '@near-wallet-selector/ledger';
import { setupMyNearWallet } from '@near-wallet-selector/my-near-wallet';
import { setupNearWallet } from '@near-wallet-selector/near-wallet';
import nearWalletIconUrl from '@near-wallet-selector/near-wallet/assets/near-wallet-icon.png';
import { setupMeteorWallet } from '@near-wallet-selector/meteor-wallet';
import { setupSender } from '@near-wallet-selector/sender';
import senderIconUrl from '@near-wallet-selector/sender/assets/sender-icon.png';
import { setupHereWallet } from '@near-wallet-selector/here-wallet';
import HereWalletIconUrl from '@near-wallet-selector/here-wallet/assets/here-wallet-icon.png';
import { getConfig } from './config';
import { connect, keyStores } from 'near-api-js';

const { network_id } = getConfig();

const connectionConfig = {
  networkId: network_id,
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: `https://rpc.${network_id}.near.org`,
  walletUrl: `https://wallet.${network_id}.near.org`,
  helperUrl: `https://helper.${network_id}.near.org`,
  explorerUrl: `https://explorer.${network_id}.near.org`,
};

const sender = setupSender({
  iconUrl: senderIconUrl,
});

const hereWallet = setupHereWallet({
  iconUrl: HereWalletIconUrl,
});

const nearWallet = setupNearWallet({
  iconUrl: nearWalletIconUrl,
});
const meteorWallet = setupMeteorWallet({
  iconUrl: meteorIconUrl,
});

const DEFAULT_TGAS = '90000000000000';
const NO_DEPOSIT = '0';

// Wallet that simplifies using the wallet selector
export class Wallet {
  constructor({ createAccessKeyFor = undefined, network = 'testnet' }) {
    this.walletSelector = null;
    this.wallet = null;
    this.network = null;
    this.createAccessKeyFor = null;
    // Login to a wallet passing a contractId will create a local
    // key, so the user skips signing non-payable transactions.
    // Omitting the accountId will result in the user being
    // asked to sign all transactions.
    this.createAccessKeyFor = createAccessKeyFor;
    this.network = getConfig().network_id;
  }

  async updateLogInState() {
    const isSignedIn = this.walletSelector.isSignedIn();
    if (isSignedIn) {
      this.wallet = await this.walletSelector.wallet();
      this.accountId =
        this.walletSelector.store.getState().accounts[0].accountId;
    }
    return isSignedIn;
  }

  // To be called when the website loads
  async startUp() {
    this.walletSelector = await setupWalletSelector({
      network: this.network,
      modules: [
        nearWallet,
        meteorWallet,
        setupMyNearWallet({ iconUrl: MyNearIconUrl }),
        setupLedger({ iconUrl: LedgerIconUrl }),
        sender,
        hereWallet,
      ],
    });

    const isSignedIn = await this.updateLogInState();
    return isSignedIn;
  }

  async account() {
    const [acc] = await this.wallet.getAccounts();
    return acc;
    // return this.wallet;
  }

  // Sign-in method
  async signIn() {
    const description = 'Please select a wallet to sign in.';
    const modal = setupModal(this.walletSelector, {
      contractId: this.createAccessKeyFor,
      description,
    });
    modal.show();
    // to check for log in state when user is not redirected to other URL
    return new Promise((resolve) => {
      modal.on('onHide', async (event) => {
        if (event.hideReason === 'wallet-navigation') {
          const isSignedIn = await this.updateLogInState();
          resolve(isSignedIn); // Resolve the promise when the sign-in process is complete
        }
      });
    });
  }

  // Sign-out method
  async signOut() {
    if (!this?.wallet) return;
    await this.wallet.signOut();

    if (
      this.wallet.id === 'near-wallet' ||
      this.wallet.id === 'my-near-wallet'
    ) {
      this.wallet = this.accountId = this.createAccessKeyFor = undefined;
      window.location.replace(
        window.location.origin + window.location.pathname
      );
    } else window.location.reload();
  }

  // Make a read-only call to retrieve information from the network
  async viewMethod({ contractId, method, args = {} }) {
    if (!this.walletSelector) {
      await this.startUp();
    }
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    let res = await provider.query({
      request_type: 'call_function',
      account_id: contractId,
      method_name: method,
      args_base64: Buffer.from(JSON.stringify(args)).toString('base64'),
      finality: 'optimistic',
    });
    return JSON.parse(Buffer.from(res.result).toString());
  }

  // Call a method that changes the contract's state
  async callMethod({
    contractId,
    method,
    args = {},
    gas = DEFAULT_TGAS,
    deposit = NO_DEPOSIT,
  }) {
    // Sign a transaction with the "FunctionCall" action
    return await this.wallet.signAndSendTransaction({
      signerId: this.accountId,
      receiverId: contractId,
      actions: [
        {
          type: 'FunctionCall',
          params: {
            methodName: method,
            args,
            gas,
            deposit,
          },
        },
      ],
    });
  }

  // Get transaction result from the network
  async getTransactionResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');

    return providers.getTransactionLastResult(transaction);
  }

  async getTransactionMethodAndResult(txhash) {
    const { network } = this.walletSelector.options;
    const provider = new providers.JsonRpcProvider({ url: network.nodeUrl });

    // Retrieve transaction result from the network
    const transaction = await provider.txStatus(txhash, 'unnused');
    return {
      method:
        transaction.transaction.actions?.[0]?.['FunctionCall']?.['method_name'],
      result: providers.getTransactionLastResult(transaction),
    };
  }

  async isAccountValid(addr) {
    let isAccountValid = true;
    const nearConnection = await connect(connectionConfig);
    const account = await nearConnection.account(addr);
    await account.state().catch((err) => {
      isAccountValid = false;
    });
    return isAccountValid;
  }
}

'''
'''--- src/utils/supabase.js ---
import axios from 'axios';
import { getConfig } from './config';

export const { api_link } = getConfig();
export const supabase = {
  select: async (table, match) => {
    const { data } = await axios.post(`${api_link}/select`, { table, match });
    return data;
  },
  insert: async (table, body) => {
    const { data } = await axios.post(`${api_link}/insert`, { table, body });
    return data;
  },
  update: async (table, body, match) => {
    const { data } = await axios.post(`${api_link}/update`, {
      table,
      body,
      match,
    });
    return data;
  },
  delete: async (table, match) => {
    const { data } = await axios.post(`${api_link}/delete`, { table, match });
    return data;
  },
};

'''
'''--- src/utils/superAdmins.js ---
import axios from 'axios';
import { useState, useEffect, useCallback } from 'react';
import { api_link } from './supabase';
import { wallet } from '../index';

export const useSuperAdmin = () => {
  const [isSuperAdmin, setSuperAdmin] = useState(false);

  const fetchAdminStatus = useCallback(async () => {
    const superadmin = await axios.post(`${api_link}/is_admin`, {
      wallet: wallet.accountId,
    });
    setSuperAdmin(superadmin.data.is_super_admin);
  }, []);

  useEffect(() => {
    fetchAdminStatus();
  }, [fetchAdminStatus]);

  return { isSuperAdmin };
};

'''
'''--- src/utils/useAdmin.js ---
import { useState, useEffect, useCallback } from 'react';
import { checkAdmin } from './utilityFunctions';
import { wallet } from '..';
import { useDispatch } from 'react-redux';
import { updateAdminLogin } from '../redux/reducer/commonReducer';

export const useAdmin = () => {
  const [isAdmin, setIsAdmin] = useState(null);
  const dispatch = useDispatch();
  const checkAdminStatus = useCallback(async () => {
    if (wallet.accountId) {
      try {
        const data = await checkAdmin(wallet.accountId);
        if (data) {
          dispatch(updateAdminLogin(true));
        } else {
          dispatch(updateAdminLogin(false));
        }
      } catch {
        dispatch(updateAdminLogin(false));
      }
    }
  }, [wallet.accountId]);

  useEffect(() => {
    checkAdminStatus();
  }, [checkAdminStatus]);

  return [isAdmin];
};

'''
'''--- src/utils/utilityFunctions.js ---
import axios from 'axios';
import { wallet } from '../index';
import { getConfig } from './config';
import { api_link, supabase } from './supabase';
import moment from 'moment';

export const checkAdmin = (walletAddress) => {
  return wallet.viewMethod({
    contractId: getConfig().og_contract,
    method: 'is_admin',
    args: { addr: walletAddress },
  });
};

export const log_event = async ({ event_log }) => {
  const { error } = await supabase.insert('events', {
    event_log,
    wallet_identifier: wallet.accountId,
  });

  if (error) {
    console.log('Error occured in event log', error);
    throw new Error(error?.message);
  }
};

export const isNumber = (value) => {
  return typeof value === 'number';
};

export const insertUserData = async (dataToInsert) => {
  const { data } = await supabase.select('users', {
    wallet_identifier: wallet.accountId,
  });
  if (!data?.[0]) {
    await supabase.insert('users', {
      ...dataToInsert,
      wallet_identifier: wallet.accountId,
    });
  } else {
    await supabase.update('users', dataToInsert, {
      wallet_identifier: wallet.accountId,
    });
  }
};

export const formatNumberWithComma = (number) => {
  let nf = new Intl.NumberFormat('en-US');
  return nf.format(number);
};

export const deleteUserDataFromSupabase = async () => {
  // delete all rows with particular wallet id from events and users table
  await supabase.delete('users', {
    wallet_identifier: wallet.accountId,
  });
  await supabase.delete('events', {
    wallet_identifier: wallet.accountId,
  });
  await supabase.delete('scoreboard', {
    account: wallet.accountId,
  });
};

export function decodeBase64(str) {
  return JSON.parse(Buffer.from(str, 'base64').toString('ascii'));
}

// used in supabase column type for date
export const convertToTimestamptz = (timestamp) => {
  return moment.utc(timestamp).format('YYYY-MM-DDTHH:mm:ssZ');
};

export function hasTwoDots(str) {
  const regex = /\.\.*\./;
  return regex.test(str);
}

export const addIPAddr = async (visitorID) => {
  const table = 'users';
  const match = {
    wallet_identifier: wallet.accountId,
  };
  const body = {
    fingerprint_visitor_id: visitorID,
  };
  await axios.post(`${api_link}/store-ip`, { table, body, match });
};

'''