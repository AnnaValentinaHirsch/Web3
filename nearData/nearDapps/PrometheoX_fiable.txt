*GitHub Repository "PrometheoX/fiable"*

'''--- README.md ---
💻 Fiable
==================

 Fiable es un smart contract para llevar a cabo licitaciones en blockchain. Cuenta con las siguientes funciones:
 
 1. Crear una licitación.
 2. Obtener una lista de las licitaciones creadas.
 3. Postular una cotización.
 4. Cambiar el estado de una licitación de abierta a cerrada.
 5. Eliminar una licitación.
 6. Eliminar una cotización.
 

👨‍💻 Instalación en local
===========

Para correr este proyecto en local debes seguir los siguientes pasos:

Paso 1: Pre - Requisitos
------------------------------

1. Asegúrese de haber instalado [Node.js] ≥ 12 ((recomendamos usar [nvm])
2. Asegúrese de haber instalado yarn: `npm install -g yarn`
3. Instalar dependencias: `yarn install`
4. Crear un test near account [NEAR test account]
5. Instalar el NEAR CLI globally: [near-cli] es una interfaz de linea de comando (CLI) para interacturar con NEAR blockchain

    yarn install --global near-cli

Step 2: Configura tu NEAR CLI
-------------------------------

Configura tu near-cli para autorizar su cuenta de prueba creada recientemente:

    near login
    
Step 3: Clonar Repositorio
-------------------------------    

Este comando nos permite clonar el repositorio del proyecto

```bash
git clone https://github.com/PrometheoX/fiable.git
```

Una vez que hayas descargado el repositorio, asegurate de ejecutar los comandos dentro del repositorio descargado. Puedes hacerlo con
```bash
cd fiable
```

Step 4: Realiza el BUILD para implementación de desarrollo de contrato inteligente 
------------------------------------------------------------------------------------

Instale el gestor de dependencia de Node.js dentro del repositorio

```bash
npm install
```

Cree el código de contrato inteligente e implemente el servidor de desarrollo local: 
```bash
yarn deploy
```

¡Felicitaciones, ahora tendrá un entorno de desarrollo local ejecutándose en NEAR TestNet!

✏️ Comando para CREAR una LICITACIÓN
-----------------------------------------------
Antes de ejecutar el comando brindado, modifica <your deployed contract> por el número de contrato generado. Por ejemplo: 'dev-1630622185346-59088620194720'. Además, modifica <username> por tu nombre de usuario en testnet. Por ejemplo: 'aval1'

Para Linux:
```bash
near call <your deployed contract> CrearLicitación '{"título":"string","razón_social":"string","descripción":"string","presupuesto_max":<number>,"anticipo":<number>,"fecha_cierre":"string"}' --account-id <username>.testnet
```

✏️ Comando que LISTA todas las LICITACIONES:
--------------------------------------------
Permite listar las licitaciones que existen en nuestro contrato inteligente. 

Para Linux:
```bash
near view <your deployed contract> MostrarLicitaciones --account-id <username>.testnet
```

✏️ Comando para CAMBIAR EL ESTADO de una LICITACIÓN
------------------------------------------------

Permite cambiar el estado de una licitación de "abierta" a "cerrada".

Para Linux:
```bash
near call <your deployed contract> CambiarEstado '{"id":1}' --account-id <username>.testnet
```

✏️ Comando para ELIMINAR una LICITACIÓN
--------------------------------------------

Para Linux:
```bash
near call <your deployed contract> BorrarLicitación '{"id":1}' --account-id <username>.testnet
``` 

✏️ Comando para POSTULAR una COTIZACIÓN
-----------------------------------------------
Permite postular una cotización a una licitación especificando el id de esta.

Para Linux:
```bash
near call <your deployed contract> PostularCotización '{"razón_social":"string","licitación_destino":<id de la licitación>,"precio_ofertado":<number>,"anticipo":<number>}' --account-id <username>.testnet
```

✏️ Comando que LISTA todas las COTIZACIONES:
--------------------------------------------
Esta función se encuentra actualmente bajo desarrollo.

 

🤖 Test 
==================

Las pruebas son parte del desarrollo, para ejecutar las pruebas en el contrato inteligente, debe ejecutar el siguiente comando:

    yarn test

Esto ejecutará los métodos de prueba en el `assembly/__tests__/example.spec.js` archivo

👩🏼‍🏫 Exploring and Explaining The Code 
====================================
This is a explanation of the smart contract file system

```bash
├── README.md                                       # this file
├── as-pect.config.js                               # configuration for as-pect (AssemblyScript unit testing)
├── asconfig.json                                   # configuration file for Assemblyscript compiler
├── assembly
│   ├── __tests__
│   │   ├── as-pect.d.ts                            # as-pect unit testing headers for type hints
│   │   └── main.spec.ts                            # unit test for the contract
│   ├── as_types.d.ts                               # AssemblyScript headers for type hint
│   ├── index.ts                                    # contains the smart contract code
│   ├── models.ts                                   # contains code for the models accesible to the smart contract
│   └── tsconfig.json                               # Typescript configuration file
├── neardev
│   ├── dev-account                                 #in this file the provisional deploy smart contract account is saved
│   └── dev-account.env                             #in this file the provisional deploy smart contract account is saved like a environment variable                             
├── out
│   └── main.wasm                                   # compiled smart contract code using to deploy
├── package-lock.json                               # project manifest lock version
├── package.json                                    # Node.js project manifest (scripts and dependencies)
└── yarn.lock                                       # project manifest lock version
```
1. El código de contrato inteligente vive en la carpeta `/assambly` folder.
2. Para realizar una implementación de prueba, use los scripts en el `/package.json` file.

==============================================

[Propuesta de diseño]  Este mockup es una presentación con las diferentes pantallas de la app, para avanzar puede utilizar las flechas del teclado, hacer click en el slide o esperar 5 segundos a que avance automáticamente.

  [create-near-app]: https://github.com/near/create-near-app
  [Node.js]: https://nodejs.org/en/download/package-manager/
  [NEAR accounts]: https://docs.near.org/docs/concepts/account
  [NEAR Wallet]: https://wallet.testnet.near.org/
  [near-cli]: https://github.com/near/near-cli
  [NEAR test account]: https://docs.near.org/docs/develop/basics/create-account#creating-a-testnet-account
  [nvm]: https://github.com/nvm-sh/nvm
  [Propuesta de diseño]: https://docs.google.com/presentation/d/e/2PACX-1vQo6i_5OxctyPXELi8aB6vI_PuFWW2hVWgI8M-b0ueAlzV01v1vJUXhcnLFWMFyVFWAjeGJWtWfxpDX/pub?start=true&loop=false&delayms=5000

'''
'''--- as-pect.config.js ---
module.exports = require("near-sdk-as/imports")
  
'''
'''--- asconfig.json ---
{
    "extends": "near-sdk-as/asconfig.json",
    "entry": "assembly/index.ts",
    "options": {
        "binaryFile": "out/main.wasm"
}
}
'''
'''--- assembly/__tests__/as-pect.d.ts ---
/// <reference types="@as-pect/assembly/types/as-pect" />

'''
'''--- assembly/__tests__/example.spec.ts ---
import { CrearLicitación} from "..";
import { Context } from "near-sdk-as";
import * as contract from '..';

/*Test para la función createProject*/
describe("Crea una licitación",()=>{
  it("Guarda la clase FormatoLicitación en un vector persistente con los valores definidos por el usuario", () => {
      expect(() => {
          contract.CrearLicitación("Licitación de servidores","razón_social","descripción",5000,2500,"fecha_cierre");
      });
});
   it("debería fallar si se introduce un número en vez de un string en el título", () => {
        expect(() => {
       //contract.CrearLicitación (3,"razón_social","descripción",5000,2500,"fecha_cierre");
    }).not.toThrow();
});

 it("debería fallar si el presupuesto es 0", () => {
        expect(() => {
       contract.CrearLicitación("Licitación de servidores","razón_social","descripción",0,2500,"fecha_cierre");
    }).toThrow();
 });

})

'''
'''--- assembly/as_types.d.ts ---
/// <reference types="near-sdk-as/assembly/as_types" /> 
'''
'''--- assembly/index.ts ---
import { Context } from "near-sdk-as";
import { FormatoLicitación, licitaciones, FormatoCotización, cotizaciones, Estado } from "./models";

export function CrearLicitación(
  título: string,
    razón_social: string,
    descripción: string,
    presupuesto_max: i32,
    anticipo: i32,
    fecha_cierre: string,
): void {
assert(título.length>0,"Incluye un nombre para tu licitación")
assert(razón_social.length>0, "Incluye tu razón social")
assert(descripción.length>0, "Incluye una descripción donde especifiques todos los requisitos de tu adquisición: Tipo de equipo, modelo, marca, SKU, garantías, tiempos de entrega etc.")
assert(<i32>presupuesto_max>0, "Escribe tu presupuesto máximo para esta compra")
assert(<i32>anticipo>0, "Escribe el anticipo que ofreces como un número")
assert(fecha_cierre.length>0 && fecha_cierre.length<11, "Incluye la fecha de cierre, máximo de 11 caracteres")

licitaciones.push(
  new FormatoLicitación(licitaciones.length, título, razón_social, descripción, presupuesto_max, anticipo, fecha_cierre)
  );
}

export function MostrarLicitaciones(): Array<FormatoLicitación> {
    const resultado_licitación = new Array<FormatoLicitación>(licitaciones.length);
    for (let i = 0; i < licitaciones.length; i++) {
      resultado_licitación[i] = licitaciones[i];
    }
    return resultado_licitación;
  }

 
  export function CambiarEstado(id: i32): FormatoLicitación {
    let licitación  = licitaciones[id]
    licitación.Estado = Estado.cerrada
    licitaciones.replace(<i32>id, licitación)
    return licitación
  }

  export function BorrarLicitación(id: i32): void {
    assert(id>=0,"No hay licitaciones con id negativo")
    licitaciones.swap_remove(<i32>id)
  }

  export function PostularCotización(
      razón_social: string,
      licitación_destino: i32,
      precio_ofertado: i32,
      anticipo: i32,
  ): void {
  assert(razón_social.length>0, "Incluye tu razón social")
  assert(<i32>precio_ofertado>0, "Indica tu mejor precio para esta licitación")
  assert(<i32>anticipo>0, "Indica el anticipo mínimo que requieres")
  
  
  cotizaciones.push(
    new FormatoCotización(cotizaciones.length, razón_social, licitación_destino, precio_ofertado, anticipo)
    );
  }

  export function MostrarCotizaciones(): Array<FormatoCotización> {
    const resultado_cotización = new Array<FormatoCotización>(cotizaciones.length);
    for (let i = 0; i < cotizaciones.length; i++) {
      resultado_cotización[i] = cotizaciones[i];
    }
    return resultado_cotización;
  }  

  export function BorrarCotización(id: i32): void {
    assert(id>=0,"No hay cotizaciones con id negativo")
    cotizaciones.swap_remove(<i32>id)
  }
'''
'''--- assembly/models.ts ---
import { Context, PersistentVector } from "near-sdk-as";

export enum Estado {
    abierta,
    cerrada,
  }

@nearBindgen
export class FormatoLicitación {
    id:u64
    título: string;
    razón_social: string;
    descripción: string;
    presupuesto_max: i32;
    anticipo: i32;
    fecha_cierre: string;
    Estado: Estado;

  constructor(
      id:u64,
      título: string,
      razón_social: string,
      descripción: string,
      presupuesto_max: i32,
      anticipo: i32,
      fecha_cierre: string
      ) {
    this.id = id; 
    this.título = título;
    this.razón_social = razón_social;
    this.descripción = descripción;
    this.presupuesto_max = presupuesto_max;
    this.anticipo = anticipo;
    this.fecha_cierre = fecha_cierre;
    this.Estado = Estado.abierta;
  }
}

export class FormatoCotización {
  id:u64
  razón_social: string;
  licitación_destino: i32;
  precio_ofertado: i32;
  anticipo: i32;

constructor(
    id:u64,
    razón_social: string,
    licitación_destino: i32,
    precio_ofertado: i32,
    anticipo: i32,
    ) {
  this.id = id; 
  this.razón_social = razón_social;
  this.licitación_destino = licitación_destino;
  this.precio_ofertado = precio_ofertado;
  this.anticipo = anticipo;
}
}

/* STORAGE */
export let licitaciones = new PersistentVector<FormatoLicitación>("licitación")
export let cotizaciones = new PersistentVector<FormatoCotización>("cotización")
'''
'''--- assembly/tsconfig.json ---
{
"extends": "assemblyscript/std/assembly.json"
}
'''
'''--- neardev/dev-account.env ---
CONTRACT_NAME=dev-1630474769938-25898026952681
'''
'''--- package.json ---
{
  "name": "fiable_licitaciones",
  "version": "0.0.1",
  "license": "UNLICENSED",
  "description": "Smart contract para crear y listar licitaciones",
  "main": "index.js",
  "scripts": {
    "test": "asp",
    "build": "asb",
    "deploy": "yarn build && near dev-deploy"
  },
  
  "devDependencies": {
    "near-sdk-as": "^3.2.3"
  }
}

'''