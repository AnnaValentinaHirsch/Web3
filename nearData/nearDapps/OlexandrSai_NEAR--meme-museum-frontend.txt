*GitHub Repository "OlexandrSai/NEAR--meme-museum-frontend"*

'''--- .env ---
VUE_APP_CONTRACT_ID = "dev-1635829277525-22589246953534"
VUE_APP_gas = "70000000000000"
VUE_APP_networkId = "testnet"
VUE_APP_nodeUrl = "https://rpc.testnet.near.org"
VUE_APP_walletUrl = "https://wallet.testnet.near.org"
'''
'''--- README.md ---
# Meme museum
This repo contains example of frontend for NEAR Certified Developer Level II students

## ⚠️ Warning
Any content produced by NEAR, or developer resources that NEAR provides, are for educational and inspiration purposes only. NEAR does not encourage, induce or sanction the deployment of any such applications in violation of applicable laws or regulations.

<a href="https://www.loom.com/share/3b558ef14d4945338d4220964f075220" target="_blank">Video demo UI walkthrough</a>

<a href="https://www.loom.com/share/c38c6ac8c1d04afca0b4402f997374d2"  target="_blank">Video code walkthrough</a>

![image](https://user-images.githubusercontent.com/38455192/139825787-9089159c-086e-4f28-b3be-cbf95cc8fa84.png)

<a href="https://github.com/Learn-NEAR/NCD.L1.sample--meme-museum"  target="_blank">Smart contract source code</a>

<a href="https://github.com/NazarH2ONyzhnyk/meme-museum-new"  target="_blank">Raw html + TailwindCss</a>

## Project setup
```
npm install
```

### Compiles and hot-reloads for development
```
npm run serve
```

### Compiles and minifies for production
```
npm run build
```

### Lints and fixes files
```
npm run lint
```

### Customize configuration
See [Configuration Reference](https://cli.vuejs.org/config/).

'''
'''--- babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- package.json ---
{
  "name": "meme-museum-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "serve": "vue-cli-service serve",
    "build": "vue-cli-service build",
    "lint": "vue-cli-service lint"
  },
  "dependencies": {
    "@headlessui/vue": "^1.4.1",
    "@heroicons/vue": "^1.0.5",
    "@vue-hero-icons/outline": "^1.7.2",
    "core-js": "^3.6.5",
    "date-fns": "^2.24.0",
    "near-api-js": "^0.43.1",
    "vee-validate": "^4.5.5",
    "vue": "^3.0.0",
    "vue-date-fns": "^2.0.1"
  },
  "devDependencies": {
    "@vue/cli-plugin-babel": "~4.5.0",
    "@vue/cli-plugin-eslint": "~4.5.0",
    "@vue/cli-service": "~4.5.0",
    "@vue/compiler-sfc": "^3.0.0",
    "autoprefixer": "^9.8.6",
    "babel-eslint": "^10.1.0",
    "eslint": "^6.7.2",
    "eslint-plugin-vue": "^7.0.0",
    "postcss": "^7.0.36",
    "tailwindcss": "npm:@tailwindcss/postcss7-compat@^2.2.14"
  },
  "eslintConfig": {
    "root": true,
    "env": {
      "node": true
    },
    "extends": [
      "plugin:vue/vue3-essential",
      "eslint:recommended"
    ],
    "parserOptions": {
      "parser": "babel-eslint"
    },
    "rules": {}
  },
  "browserslist": [
    "> 1%",
    "last 2 versions",
    "not dead"
  ]
}

'''
'''--- postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title><%= htmlWebpackPlugin.options.title %></title>
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- src/composables/near.js ---
import { ref, onMounted } from "vue";
import {
  wallet, 
  CONTRACT_ID,
  getMemes,
  addMeme,
  getMeme,
  getMemeComments,
  addComment,
  donate,
  vote,
} from "../services/near";

export const useMemes = () => {
  const memes = ref([]);
  const err = ref(null);

  //initialize memes  list
  onMounted(async () => {
    try {
      const memeIds = await getMemes();

      memes.value = (
        await Promise.all(
          memeIds.map(async (id) => {
            const info = await getMeme(id);
            const comments = await getMemeComments(id);

            return {
              id,
              info,
              comments,
              image: `https://img-9gag-fun.9cache.com/photo/${
                info.data.split("https://9gag.com/gag/")[1]
              }_460s.jpg`,
            };
          })
        )
      ).reverse();
    } catch (e) {
      err.value = e;
      console.log(err.value);
    }
  });

  return {
    memes,
    addMeme,
    addComment,
    donate,
    vote,
    CONTRACT_ID
  };
};

export const useWallet = () => {
  const accountId = ref('')
  const err = ref(null)

  onMounted(async () => {
    try {
      accountId.value = wallet.getAccountId()
    } catch (e) {
      err.value = e;
      console.error(err.value);
    }
  });

  const handleSignIn = () => {
    wallet.requestSignIn({
      contractId: CONTRACT_ID,
      methodNames: [] // add methods names to restrict access
    })
  };

  const handleSignOut = () => {
    wallet.signOut()
    accountId.value = ''
  };

  return {
    accountId,
    signIn: handleSignIn,
    signOut: handleSignOut
  }
}

'''
'''--- src/index.css ---
@import url('https://fonts.googleapis.com/css2?family=Josefin+Sans:wght@300&display=swap');

@tailwind base;
@tailwind components;

.bg-gradient-pink {
    @apply bg-gradient-to-r from-pink-500 to-blue-400;
}
.bg-gradient-blue {
    @apply bg-gradient-to-r from-blue-500 to-blue-600;
}
.text-gradient-pink {
    @apply inline-block text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-blue-400;
}
.text-gradient-blue {
    @apply inline-block text-transparent bg-clip-text bg-gradient-blue;
}

.btn-border-pink {
    @apply bg-gradient-pink rounded-md p-0.5;
}
.btn-bg-pink {
    @apply flex items-center justify-center w-full h-full bg-white rounded-md;
}
.btn-bg-pink:hover {
    @apply bg-transparent text-white;
}
.btn-text-pink {
    @apply text-gradient-pink w-full h-full text-center flex items-center justify-center;
}
.btn-text-pink:hover {
    @apply text-white;
}

@tailwind utilities;

@layer base {
    .header-bg {
        background: url('./assets/img/bg-filter.png') no-repeat;
        background-position: 50% 50%;
        background-size: cover;
    }
    .font-josefin {
        font-family: 'Josefin Sans', sans-serif;
    }
    .card-shadow:hover {
        -webkit-box-shadow: 4px 4px 35px 6px rgba(0, 0, 0, 0.2);
        -moz-box-shadow: 4px 4px 35px 6px rgba(0, 0, 0, 0.2);
        box-shadow: 4px 4px 35px 6px rgba(0, 0, 0, 0.2);
    }
    .bg-50 {
        background-color: rgba(0, 0, 0, 0.7);
    }
    .w-meme {
        width: 334px;
    }
    .w-alert {
        width: 280px;
    }
    .pulsing {
        animation: pulsing 1s infinite;
    }
    @keyframes pulsing {
        from{
            width: 0px;
            height: 0px;
        }
        50% {
            width: 100px;
            height: 50px;
        }
        to {
            width: 0px;
            height: 0px;
        }
    }
    @screen md {
        .w-meme {
            width: 550px;
        }
        .w-alert {
            width: 490px;
        }
    }
    @screen xl {
        .w-meme {
            width: 712px;
        }
    }
}
'''
'''--- src/main.js ---
import { createApp } from 'vue'
import App from './App.vue'
import './index.css'

createApp(App).mount('#app')

'''
'''--- src/services/near.js ---
import { keyStores, Near, WalletConnection, Contract, utils } from "near-api-js";
import BN from "bn.js";

export const CONTRACT_ID = process.env.VUE_APP_CONTRACT_ID;
const gas = new BN(process.env.VUE_APP_gas);

export const near = new Near({
  networkId: process.env.VUE_APP_networkId,
  keyStore: new keyStores.BrowserLocalStorageKeyStore(),
  nodeUrl: process.env.VUE_APP_nodeUrl,
  walletUrl: process.env.VUE_APP_walletUrl,
});

export const wallet = new WalletConnection(near, "NCD.L2.sample--meme-museum");

function getMemeMuseumContract() {
  return new Contract(
    wallet.account(), // the account object that is connecting
    CONTRACT_ID, // name of contract you're connecting to
    {
      viewMethods: ['get_meme_list', 'get_meme', 'get_recent_comments'], // view methods do not change state but usually return a value
      changeMethods: ['add_meme', 'add_comment', 'donate', 'vote'] // change methods modify state
    }
  )
}

const memeMuseumContract = getMemeMuseumContract()

// --------------------------------------------------------------------------
// functions to call contract Public VIEW methods
// --------------------------------------------------------------------------

// function  to get memes
export const getMemes = () => {
  return memeMuseumContract.get_meme_list();
};

// function  to get  info about meme
// Contract class is not used because for each mem it will be needed to create new Contract instance for each function call
export const getMeme = (meme) => {
  const memeContractId = meme + "." + CONTRACT_ID;
  return wallet.account().viewFunction(memeContractId, "get_meme", {});
};

// function to get  meme's  comment
// Contract class is not used because for each mem it will be needed to create new Contract instance for each function call
export const getMemeComments = (meme) => {
  const memeContractId = meme + "." + CONTRACT_ID;
  return wallet.account().viewFunction(memeContractId, "get_recent_comments", {});
};

// --------------------------------------------------------------------------
// functions to call contract Public CHANGE methods
// --------------------------------------------------------------------------

// function  to add  meme
export const addMeme = ({ meme, title, data, category }) => {
  category = parseInt(category)
  return memeMuseumContract.add_meme(
    { meme, title, data, category },
    gas,
    utils.format.parseNearAmount("3")
  );
};

// function  to  add comment
// Contract class is not used because for each mem it will be needed to create new Contract instance for each function call
export const addComment = ({ memeId, text }) => {
  const memeContractId = `${memeId}.${CONTRACT_ID}`;
  return wallet.account().functionCall({
    contractId: memeContractId,
    methodName: "add_comment",
    args: { text },
  });
};

//function to donate
// Contract class is not used because for each mem it will be needed to create new Contract instance for each function call
export const donate = ({ memeId, amount }) => {
  const memeContractId = `${memeId}.${CONTRACT_ID}`;
  return wallet.account().functionCall({
    contractId: memeContractId,
    methodName: "donate",
    attachedDeposit: utils.format.parseNearAmount(amount),
  });
};

//function to vote for the meme
// Contract class is not used because for each mem it will be needed to create new Contract instance for each function call
export const vote = ({ memeId, value }) => {
  console.log(memeId)
  console.log(value)
  const memeContractId = `${memeId}.${CONTRACT_ID}`;
  return wallet.account().functionCall({
    contractId: memeContractId,
    methodName: "vote",
    args: { value },
  });
};
'''
'''--- tailwind.config.js ---
module.exports = {
  purge: [`./index.html`, `./src/**/*.{vue,js,ts,jsx,tsx}`],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {
      colors: {
        pink: {
          500: "#FC00FF",
        },
        blue: {
          400: "#00DBDE",
          500: "#56CCF2",
          600: "#2F80ED",
        }
      },
      width: {
        '374': '374px',
      }
    },
  },
  variants: {
    extend: {
      backgroundColor: ['active'],
      backgroundImage: ['hover', 'focus', 'active'],
      scale: ['active'],
    },
  },
  plugins: [],
}

'''