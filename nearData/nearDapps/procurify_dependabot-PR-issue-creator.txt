*GitHub Repository "procurify/dependabot-PR-issue-creator"*

'''--- .github/reviewers-info.json ---
{
    "github-username1": {
        "jira": {
            "project_key": "",
            "jira_id": ""
        },
        "linear": {
            "project_key": "",
            "linear_id": ""
        }
    },
    "github-username2": {
        "jira": {
            "project_key": "",
            "jira_id": ""
        },
        "linear": {
            "project_key": "",
            "linear_id": ""
        }
    },
    "github-username3": {
        "jira": {
            "project_key": "",
            "jira_id": ""
        },
        "linear": {
            "project_key": "",
            "linear_id": ""
        }
    }
}

'''
'''--- CODE_OF_CONDUCT.md ---
# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or
  advances of any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email
  address, without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
development@procurify.com.
All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series
of actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or
permanent ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior,  harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within
the community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

Community Impact Guidelines were inspired by [Mozilla's code of conduct
enforcement ladder](https://github.com/mozilla/diversity).

[homepage]: https://www.contributor-covenant.org

For answers to common questions about this code of conduct, see the FAQ at
https://www.contributor-covenant.org/faq. Translations are available at
https://www.contributor-covenant.org/translations.

'''
'''--- CONTRIBUTING.md ---
# Contribution Guidelines for Procurify Open Source Projects
Welcome and thank you for considering to contribute to Procurify's open source projects. We appreciate you stopping by and welcome you with open arms to be part of our community.

Please take some time to read the following guidelines we've set to make the contribution process easy and accessible for everyone involved. 

## Code of Conduct
By participating and contributing to this project, you agree to uphold our [Code of Conduct](https://github.com/procurify/flag-counter/blob/main/CODE_OF_CONDUCT.md).

## Getting started
Please use the search to see if any exisiting Issues or PRs match your problem before creating your own

We try to resolve issues in a timely manner, but if you feel like your issue is taking too long, feel free to leave a comment or ping a reminder to draw attention

## Issue tracker
If you wish to add changes to the core functionality of the project please email our development team at development@procurify.com

If you find an issue that matches the one you're facing, feel free to comment if your environment differs from the one stated in the issue. Otherwise, adding a [reaction](https://github.blog/2016-03-10-add-reactions-to-pull-requests-issues-and-comments/) is sufficient enough for us to know.

Please follow the steps indicated in our [Issue Tracking Template](https://github.com/procurify/flag-counter/blob/main/.github/ISSUE_TEMPLATE/issue-report.md) when creating an issue. 

## Pull requests
We welcome all PRs with open arms, just a few guidelines regarding them:
- Utilize the generated PR template
- PRs that address style/whitespace issues should only encapsulate those style changes, otherwise create a separate PR if you are fixing/adding functionality
- Address your issue with as few changed lines as possible

For any large core functionality changes or functionality breaking changes, please email us at development@procurify.com before creating your PR.

In general, we follow the ["fork-and-pull" Git workflow](https://github.com/susam/gitpr)

1. Fork the repository to your own Github account
2. Clone the project to your machine
3. Create a branch locally with a succinct but descriptive name
4. Commit changes to the branch
5. Following any formatting and testing guidelines specific to this repo
6. Push changes to your fork
7. Open a PR in our repository and follow the PR template so that we can efficiently review the changes.

## General questions & reaching out
Feel free to reach out to the Procurify dev team at development@procurify.com for any other questions regarding our open source projects.

'''
'''--- README.md ---
# Description
This action allows you to automatically create an issue on a reviewer's Linear/Jira board when a reviewer is added to a pull request with a 'ðŸ“¦ dependencies' label. 

# Setup
Before the action can be used properly, the following Github secrets must be created on the repository: 
<br>
* GITHUB_TOKEN
* JIRA_API_EMAIL
* JIRA_API_TOKEN
* LINEAR_API_TOKEN
<br>

In addition, the `CONFIG_FILE` environment variable within the action.yml file must be pointed to the path of the config file (default path is reviewers-info.json), and its contents must be populated with the appropriate reviewer information. An example of the file format can be found in this repository at ".github/reviewers-info.json". 

For Jira, obtaining the information is quite simple. For the project key, you can navigate to the team's project board. For user Jira ID's, you can navigate to that user's profile. In both cases, the desired information can be found at the end of the URL. 

For Linear, the simplest way to obtain the project and user IDs is through the Linear API. Examples of how to query team IDs and user IDs can be found here: https://developers.linear.app/docs/graphql/working-with-the-graphql-api

# Usage

```
on:
  pull_request:
    branches: [ next ]
    types: [ review_requested ]

jobs:
  create-issue:
    if: contains( github.event.pull_request.labels.*.name, 'ðŸ“¦ dependencies' )
    env: 
      CONFIG_FILE: .github/reviewers-info.json
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        
      - name: install requests
        run: pip install requests
        
      - name: Create Issue
        run: |
          if [ ${{ env.WHICH }} == "JIRA" ]
          then
            python ./bin/create-issue-from-dependency-PR/create-jira-ticket.py -e $GITHUB_EVENT_PATH -u $JIRA_API_EMAIL -p $JIRA_API_TOKEN -config ${{ env.CONFIG_FILE }} -gt ${{ env.GITHUB_TOKEN }} -ref $GITHUB_REF
          elif [ ${{ env.WHICH }} == "LINEAR" ]
          then
            python ./bin/create-issue-from-dependency-PR/create-linear-issue-for-dependencies-pr.py -e $GITHUB_EVENT_PATH -p $LINEAR_API_TOKEN -config ${{ env.CONFIG_FILE }} -gt ${{ env.GITHUB_TOKEN }} -ref $GITHUB_REF
          fi
        env: 
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_API_EMAIL: ${{ secrets.JIRA_API_EMAIL }}
          LINEAR_API_TOKEN: ${{ secrets.LINEAR_API_TOKEN }} 
          WHICH: LINEAR
```

'''
'''--- action.yml ---
name: Create Issue for Dependencies Pull Request
description: create an issue on a reviewer's Linear/Jira board when a reviewer is added to a pull request with a 'ðŸ“¦ dependencies' label 
branding: 
  icon: archive
  color: purple

on:
  pull_request:
    branches: [ next ]
    types: [ review_requested ]

  workflow_dispatch:

jobs:
  build:
    if: contains( github.event.pull_request.labels.*.name, 'ðŸ“¦ dependencies' )
    env: 
      CONFIG_FILE: .github/reviewers-info.json
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        
      - name: Setup Python
        uses: actions/setup-python@v2
        
      - name: install requests
        run: pip install requests
        
      - name: Create Issue
        run: |
          if [ ${{ env.WHICH }} == "JIRA" ]
          then
            python ./bin/create-issue-from-dependency-PR/create-jira-ticket.py -e $GITHUB_EVENT_PATH -u $JIRA_API_EMAIL -p $JIRA_API_TOKEN -config ${{ env.CONFIG_FILE }} -gt ${{ env.GITHUB_TOKEN }} -ref $GITHUB_REF
          elif [ ${{ env.WHICH }} == "LINEAR" ]
          then
            python ./bin/create-issue-from-dependency-PR/create-linear-issue-for-dependencies-pr.py -e $GITHUB_EVENT_PATH -p $LINEAR_API_TOKEN -config ${{ env.CONFIG_FILE }} -gt ${{ env.GITHUB_TOKEN }} -ref $GITHUB_REF
          fi
        env: 
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_API_EMAIL: ${{ secrets.JIRA_API_EMAIL }}
          LINEAR_API_TOKEN: ${{ secrets.LINEAR_API_TOKEN }} 
          WHICH: LINEAR

      

'''
'''--- src/create-jira-ticket.py ---
import json
import sys
import os
import argparse
import requests
from requests.auth import HTTPBasicAuth
from helpers import (
   get_pull_request_info,
   create_issue_info,
   fetch_reviewers_info,
   get_reviewer_jira_info,
   check_if_jira_issue_exists,
   create_jira_issue,
   transition_jira_issue
)

parser = argparse.ArgumentParser()
parser.add_argument("-u", "--username", required=True)
parser.add_argument("-p", "--password", required=True)
parser.add_argument("-e", "--event", required=True)
parser.add_argument("-config", "--configuration", required=True)
parser.add_argument("-gt", "--github_token", required=True)
parser.add_argument("-ref", "--github_ref", required=True)

io_args = parser.parse_args()
JIRA_API_EMAIL = io_args.username
JIRA_API_TOKEN = io_args.password
event_path = io_args.event
config_filepath = io_args.configuration
github_token = io_args.github_token
github_ref = io_args.github_ref

pr_info = get_pull_request_info(event_path)

issue_info = create_issue_info(pr_info)

reviewers_info = fetch_reviewers_info(config_filepath, github_token, github_ref)

jira_auth = HTTPBasicAuth(JIRA_API_EMAIL, JIRA_API_TOKEN)

for reviewer in pr_info["reviewers"]:

   reviewer_info = get_reviewer_jira_info(reviewers_info, reviewer)

   issue_exists = check_if_jira_issue_exists(reviewer_info["project_key"], pr_info["url"], jira_auth)

   if not issue_exists:
      issue_key = create_jira_issue(
         issue_info["title"], 
         issue_info["description"], 
         reviewer_info["project_key"], 
         reviewer_info["jira_id"], 
         jira_auth
      )
      
      transition_jira_issue(issue_key, jira_auth)
   else:
      print("Issue already exists, skipping")

'''
'''--- src/create-linear-issue-for-dependencies-pr.py ---
import requests
import json
import os
import argparse
from helpers import (
    get_pull_request_info, 
    create_issue_info,
    fetch_reviewers_info, 
    get_reviewer_linear_info, 
    check_if_linear_issue_exists, 
    fetch_most_appropriate_workflow_state, 
    create_linear_issue
)

parser = argparse.ArgumentParser()
parser.add_argument("-p", "--password", required=True)
parser.add_argument("-e", "--event", required=True)
parser.add_argument("-config", "--configuration", required=True)
parser.add_argument("-gt", "--github_token", required=True)
parser.add_argument("-ref", "--github_ref", required=True)

io_args = parser.parse_args()
LINEAR_API_TOKEN = io_args.password
event_path = io_args.event
config_filepath = io_args.configuration
github_token = io_args.github_token
github_ref = io_args.github_ref

pr_info = get_pull_request_info(event_path)

issue_info = create_issue_info(pr_info)

reviewers_info = fetch_reviewers_info(config_filepath, github_token, github_ref)

for reviewer in pr_info["reviewers"]:

    reviewer_info = get_reviewer_linear_info(reviewers_info, reviewer)

    issue_exists = check_if_linear_issue_exists(reviewer_info["project_key"], pr_info["url"], LINEAR_API_TOKEN)

    if issue_exists:
        print("Issue already exists")
    else: 
        state_id = fetch_most_appropriate_workflow_state(reviewer_info["project_key"], LINEAR_API_TOKEN)
        if not state_id:
            raise Exception("Could not find any workflow state")

        response = create_linear_issue(
            issue_info["title"], 
            issue_info["description"], 
            reviewer_info["project_key"], 
            reviewer_info["linear_id"], 
            state_id,
            LINEAR_API_TOKEN
        )
            
        print(f"CREATE ISSUE RESPONSE: {response.json()}")
        
'''
'''--- src/helpers.py ---
import os
import json
import requests
import base64

def get_pull_request_info(event_file_path):
    if not os.path.isfile(event_file_path):
        raise Exception("Couldn't find github event file")

    with open(event_file_path) as file:
        event_obj = json.loads(file.read())
    
    res = {
        "reviewers": event_obj["pull_request"]["requested_reviewers"],
        "title": event_obj["pull_request"]["title"],
        "number": event_obj["pull_request"]["number"],
        "url": f"https://github.com/procurify/procurify-react/pull/{event_obj['pull_request']['number']}"
    }
    return res

def create_issue_info(pr_info):
    issue_title = f"Review dependencies pull request: {pr_info['title']}"
    issue_description = f"{pr_info['title']}: {pr_info['url']}"
    return {"title": issue_title, "description": issue_description}
    
def fetch_reviewers_info(file_path, github_token, github_ref):

   headers = {
      'Accept': 'vnd.github.v3+json',
      'Authorization': f'token {github_token}'
   }

   response = requests.get(
      f'https://api.github.com/repos/procurify/procurify-react/contents/{file_path}?ref={github_ref}', 
      headers=headers
   )
   contents = response.json()["content"]
   decoded = base64.b64decode(contents)
   all_reviewers_info = json.loads(decoded)

   return all_reviewers_info

   

def get_reviewer_linear_info(reviewers_info, reviewer):
    username = reviewer["login"]
    return reviewers_info[username]["linear"]

def get_reviewer_jira_info(reviewers_info, reviewer):
    username = reviewer["login"]
    return reviewers_info[username]["jira"]

def check_if_linear_issue_exists(team_id, pr_url, api_token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': api_token,
    }

    query = """query {{
  team(id: "{team_id}") {{
    id
    name
    issues {{
      nodes {{
        id
        title
        description
      }}
    }}
  }}
}}""".format(team_id=team_id)

    unparsed_response = requests.post('https://api.linear.app/graphql', headers=headers, json={"query": query})

    response = unparsed_response.json()
    issues = response["data"]["team"]["issues"]["nodes"]
    issue_exists = False
    for issue in issues:
        if issue["description"] and pr_url in issue["description"]:
            issue_exists = True
    return issue_exists

def fetch_most_appropriate_workflow_state(team_id, api_token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': api_token,
    }

    query = """query {
  workflowStates(first: 200) {
    nodes {
      id
      name
      type
      team {
        id
        name
      }
    }
  }
}"""
    response = requests.post('https://api.linear.app/graphql', headers=headers, json={"query": query})
    states = response.json()["data"]["workflowStates"]["nodes"]
    # order of preference, the larger the better
    states_to_preference = {"Inbox": 2, "Accepted": 1, "Todo": 1, "To do": 1, "Backlog": 0, "": -1}
    state_name = ""
    state_id = ""
    for state in states:
        if (state["name"] in states_to_preference.keys() and 
                state["team"]["id"] == team_id and 
                states_to_preference.get(state["name"], -1) > states_to_preference[state_name]):
            state_id = state["id"]
            state_name = state["name"]
    return state_id

def create_linear_issue(title, description, team_id, assignee_id, state_id, api_token):
    headers = {
        'Content-Type': 'application/json',
        'Authorization': api_token,
    }

    query = """mutation {{
  issueCreate(
    input: {{
      title: "{title}"
      description: "{description}"
      teamId: "{team_id}"
      assigneeId: "{reviewer_id}"
      stateId: "{state_id}"
    }}
  ) {{
    success
    issue {{
      id
      title
    }}
  }}
}}""".format(title=title, description=description, team_id=team_id, reviewer_id=assignee_id, state_id=state_id)
    response = requests.post('https://api.linear.app/graphql', headers=headers, json={"query": query})
    return response

def check_if_jira_issue_exists(team_id, pr_url, auth):

   search_issue_url = "https://procurifydev.atlassian.net" + "/rest/api/3/search"

   params = {
      "jql": f'project={team_id} AND description ~ "{pr_url}"'
   }

   response = requests.request(
      "GET",
      search_issue_url,
      auth=auth,
      params=params
   )

   searched_issues = response.json()
   issue_exists = searched_issues["total"] > 0
   return issue_exists

def create_jira_issue(title, description, team_id, assignee_id, auth):
   issue_url = "https://procurifydev.atlassian.net" + "/rest/api/3/issue"

   headers = {
      "Accept": "application/json"
   }

   request_body = {
      "fields": {
         "project":
         {
            "key": team_id
         },
         "summary": title,
         "description": {
            "type": "doc",
            "version": 1,
            "content": [
                  {
                     "type": "paragraph",
                     "content": [
                        {
                              "type": "text",
                              "text": description
                        }
                     ]
                  }
            ]
         },
         "issuetype": {
            "name": "Task"
         },
         "assignee": {
            "id": assignee_id
         },
         "reporter": {
            "id": assignee_id
         }
      }
   }

   response = requests.request(
      "POST",
      issue_url,
      headers=headers,
      auth=auth,
      json=request_body
   )

   issue_key = json.loads(response.text)["key"]
   return issue_key

def transition_jira_issue(issue_key, auth):
   transitions_url = "https://procurifydev.atlassian.net" + f"/rest/api/3/issue/{issue_key}/transitions"

   response = requests.request(
      "GET",
      transitions_url,
      auth=auth,
   )

   transitions_response = json.loads(response.text)
   transitions = transitions_response["transitions"]
   triage_id = None
   for transition in transitions:
      if transition["name"] == "Triage":
         triage_id = transition["id"]

   if triage_id:
      update_json = {
         "transition": {
            "id": triage_id
         }
      }

      response = requests.request(
         "POST",
         transitions_url,
         auth=auth,
         json=update_json
      )
   else: 
      print("Triage was not found in transitions, doing nothing")
'''