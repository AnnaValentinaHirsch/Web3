*GitHub Repository "AGNICO/near-ncd-II-ico-exchange-vue-php"*

'''--- JS-VUE-FRONTEND/babel.config.js ---
module.exports = {
  presets: [
    '@vue/cli-plugin-babel/preset'
  ]
}

'''
'''--- JS-VUE-FRONTEND/postcss.config.js ---
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

'''
'''--- JS-VUE-FRONTEND/public/index.html ---
<!DOCTYPE html>
<html lang="">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <link rel="icon" href="<%= BASE_URL %>favicon.ico">
    <title>NCD II DEMO</title>
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">
  </head>
  <body>
    <noscript>
      <strong>We're sorry but <%= htmlWebpackPlugin.options.title %> doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>
    </noscript>
    <div id="app"></div>
    <!-- built files will be auto injected -->
  </body>
</html>

'''
'''--- JS-VUE-FRONTEND/src/main.js ---
import { createApp } from 'vue'
import App from './App.vue'
import './assets/styles/app.css'
import store from './store'
import router from './router'
import Near from './services/near.service.js'

const app = createApp(App)

app.use(router)
app.use(store)
app.use(Near, { env: process.env.NODE_ENV || 'development' })

app.mount('#app')

'''
'''--- JS-VUE-FRONTEND/src/router/index.js ---
import { createRouter, createWebHistory } from 'vue-router'
import Home from '../views/Home.vue'
import Profile from '../views/Profile.vue'
import Buy from '../views/Buy.vue'
import ErrorPage from '../views/ErrorPage.vue'
import SuccessPage from '../views/SuccessPage.vue'

const routes = [
  {
    path: '/',
    name: 'Home',
    component: Home
  },
  {
    path: '/profile',
    name: 'Profile',
    component: Profile
  },
  {
    path: '/buy',
    name: 'Buy',
    component: Buy,
    props: true
  },
  {
    path: '/error',
    name: 'Error',
    component: ErrorPage,
    props: true
  },
  {
    path: '/success',
    name: 'Success',
    component: SuccessPage,
    props: true
  },
]

const router = createRouter({
  history: createWebHistory(),
  routes
})

export default router

'''
'''--- JS-VUE-FRONTEND/src/services/auth-header.js ---
export default function authHeader() {
    let user = JSON.parse(localStorage.getItem('user'));

    if (user && user.accessToken) {
        return { Authorization: 'Bearer ' + user.accessToken };
    } else {
        return {};
    }
}
'''
'''--- JS-VUE-FRONTEND/src/services/gateway.service.js ---
import axios from 'axios';
//import authHeader from './auth-header';

class GatewayService {
    getNearAccount(accountId) {
        return axios.get(process.env.VUE_APP_GATEWAY_API_URL + '/near/account/' + accountId);
    }

    getNearPrice() {
        return axios.get(process.env.VUE_APP_COINGECKO_API_URL);
    }

    getAllOffers(from_index = 0, limit = 20) {
        return axios.get(process.env.VUE_APP_GATEWAY_API_URL + '/near/' + process.env.VUE_APP_ICO_CONTRACT +'/get_all_offers', {
            params: {
                from_index: from_index,
                limit: limit
            }
        });
    }

    getOffer(near_price) {
        return axios.get(process.env.VUE_APP_GATEWAY_API_URL + '/near/' + process.env.VUE_APP_ICO_CONTRACT + '/get_offer', {
            params: {
                near_price: near_price
            }
        });
    }

    getStorageBalance(accountId) {
        return axios.get(process.env.VUE_APP_GATEWAY_API_URL + '/near/' + process.env.VUE_APP_ICO_CONTRACT + '/get_storage_balance/' + accountId);
    }

    getFTBalance(accountId) {
        return axios.get(process.env.VUE_APP_GATEWAY_API_URL + '/near/' + process.env.VUE_APP_ICO_CONTRACT + '/get_ft_balance/' + accountId);
    }

    getFTMetadata() {
        return axios.get(process.env.VUE_APP_GATEWAY_API_URL + '/near/' + process.env.VUE_APP_ICO_CONTRACT + '/get_ft_metadata');
    }
}

export default new GatewayService();
'''
'''--- JS-VUE-FRONTEND/src/services/near.service.js ---
import * as nearApi from 'near-api-js'

function getConfigByType(networkId, config) {
    return {
        networkId,
        nodeUrl: `https://rpc.${networkId}.near.org`,
        explorerUrl: `https://explorer.${networkId === 'mainnet' ? '' : networkId + '.'}near.org`,
        walletUrl: `https://wallet.${networkId === 'mainnet' ? '' : networkId + '.'}near.org`,
        helperUrl: `https://helper.${networkId}.near.org`,
        ...config,
    }
}

export function getConfig(env, options = {}) {
    switch (env) {
        case 'production':
        case 'mainnet':
            return getConfigByType('mainnet', options)
        case 'development':
        case 'testnet':
            return getConfigByType('testnet', options)
        case 'betanet':
            return getConfigByType('betanet', options)
        case 'guildnet':
            return getConfigByType('guildnet', options)
        case 'local':
            return {
                ...options,
                networkId: 'local',
                nodeUrl: 'http://localhost:3030',
                keyPath: `${process.env.HOME}/.near/validator_key.json`,
                walletUrl: 'http://localhost:4000/wallet',
            }
        default:
            throw Error(`Unconfigured environment '${env}'. Can be configured in src/config.js.`)
    }
}

export class NearService {
    constructor(env, config) {
        if (!nearApi) return
        this.nearApi = { ...nearApi }
        this.config = getConfig(env, config)
        this.near = null
        this.keystore = null
        this.user = null

        return this
    }

    async loadNearProvider() {
        this.keystore = new this.nearApi.keyStores.BrowserLocalStorageKeyStore(window.localStorage, 'nearlib:keystore:')
        this.near = await this.nearApi.connect(Object.assign({ deps: { keyStore: this.keystore } }, this.config))
        return this
    }

    async loadAccount() {
        // Needed to access wallet
        this.walletConnection = new this.nearApi.WalletConnection(this.near)
        this.user = new this.nearApi.WalletAccount(this.near)

        if (this.walletConnection.getAccountId()) {
            this.user.accountId = this.walletConnection.getAccountId()
            this.user.balance = (await this.walletConnection.account().state()).amount
        }

        return this
    }

    async loginAccount() {
        if (this.user && this.user.isSignedIn()) return this.user
        const appTitle = this.config.appTitle || 'NEAR'
        await this.user.requestSignIn(this.config.contractName, appTitle)

        // returns full access key?! CAREFUL!
        // await this.user.requestSignIn('')

        // re-load account
        return this.loadAccount()
    }

    async logoutAccount() {
        this.walletConnection = new this.nearApi.WalletConnection(this.near)
        this.user = new this.nearApi.WalletAccount(this.near)
        await this.user.signOut()

        this.keystore = null
        this.user = null
    }
}

// Register NEAR plugin with Vue
export default {
    install: async (app, { env, config }) => {
        // Add global context and methods for NEAR
        app.config.globalProperties.$near = await new NearService(env, config)
        await app.config.globalProperties.$near.loadNearProvider()
        await app.config.globalProperties.$near.loadAccount()

        app.provide('near', app.config.globalProperties.$near)

        app.provide('$user', app.config.globalProperties.$near.user)

        // enable re-instantiation
        app.config.globalProperties.$nearInit = () => {
            return new NearService(env, config).loadNearProvider()
        }

        // TODO: Add convenience methods for VUEX
    },
}
'''
'''--- JS-VUE-FRONTEND/src/store/index.js ---
import { createStore } from "vuex";
/* import { auth } from "./auth.module";
import { near } from "./near.module"; */

const store = createStore({
  modules: {
    /* auth,
    near */
  },
});

export default store;

'''
'''--- JS-VUE-FRONTEND/tailwind.config.js ---
const defaultTheme = require('tailwindcss/defaultTheme')

module.exports = {
  purge: ['./index.html', './src/**/*.{vue,js,ts,jsx,tsx}'],
  darkMode: false, // or 'media' or 'class'
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter var', ...defaultTheme.fontFamily.sans],
      },
    },
  },
  variants: {
    extend: {},
  },
  plugins: [
    require('@tailwindcss/forms'),
  ],
}

'''
'''--- JS-VUE-FRONTEND/vue.config.js ---
module.exports = {
  configureWebpack: {
    plugins: [

    ]
  }
}
'''
'''--- PHP-LARAVEL-GATEWAY/public/robots.txt ---
User-agent: *
Disallow:

'''
'''--- PHP-LARAVEL-GATEWAY/resources/js/app.js ---
require('./bootstrap');

'''
'''--- PHP-LARAVEL-GATEWAY/resources/js/bootstrap.js ---
window._ = require('lodash');

/**
 * We'll load the axios HTTP library which allows us to easily issue requests
 * to our Laravel back-end. This library automatically handles sending the
 * CSRF token as a header based on the value of the "XSRF" token cookie.
 */

window.axios = require('axios');

window.axios.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

/**
 * Echo exposes an expressive API for subscribing to channels and listening
 * for events that are broadcast by Laravel. Echo and event broadcasting
 * allows your team to easily build robust real-time web applications.
 */

// import Echo from 'laravel-echo';

// window.Pusher = require('pusher-js');

// window.Echo = new Echo({
//     broadcaster: 'pusher',
//     key: process.env.MIX_PUSHER_APP_KEY,
//     cluster: process.env.MIX_PUSHER_APP_CLUSTER,
//     forceTLS: true
// });

'''
'''--- PHP-LARAVEL-GATEWAY/webpack.mix.js ---
const mix = require('laravel-mix');

/*
 |--------------------------------------------------------------------------
 | Mix Asset Management
 |--------------------------------------------------------------------------
 |
 | Mix provides a clean, fluent API for defining some Webpack build steps
 | for your Laravel applications. By default, we are compiling the CSS
 | file for the application as well as bundling up all the JS files.
 |
 */

mix.js('resources/js/app.js', 'public/js')
    .postCss('resources/css/app.css', 'public/css', [
        //
    ]);

'''