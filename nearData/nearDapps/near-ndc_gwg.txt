*GitHub Repository "near-ndc/gwg"*

'''--- .github/workflows/lint.yml ---
name: Lint

on:
  pull_request:
    branches: [master, main]
  merge_group:

concurrency:
  group: ci-${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  markdown-lint:
    name: markdown-lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # lint only changed files
      - uses: tj-actions/changed-files@v35
        id: changed-files
        with:
          files: "**/*.md"
          separator: ","
      - uses: DavidAnson/markdownlint-cli2-action@v9
        if: steps.changed-files.outputs.any_changed == 'true'
        with:
          globs: ${{ steps.changed-files.outputs.all_changed_files }}
          separator: ","

  markdown-link-check:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: "yes"
          folder-path: "improvement-proposals, RFPs, specs"

'''
'''--- .markdownlint.json ---
{
    "default": true,
    "MD001": false,
    "MD013": false,
    "MD024": { "siblings_only": true },
    "MD025": false,
    "MD033": false,
    "MD034": false,
    "whitespace": false
}

'''
'''--- CODE_OF_CONDUCT.md ---

# Contributor Covenant Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, caste, color, religion, or sexual
identity and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

* Demonstrating empathy and kindness toward other people
* Being respectful of differing opinions, viewpoints, and experiences
* Giving and gracefully accepting constructive feedback
* Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
* Focusing on what is best not just for us as individuals, but for the overall
  community

Examples of unacceptable behavior include:

* The use of sexualized language or imagery, and sexual attention or advances of
  any kind
* Trolling, insulting or derogatory comments, and personal or political attacks
* Public or private harassment
* Publishing others' private information, such as a physical or email address,
  without their explicit permission
* Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

Community leaders have the right and responsibility to remove, edit, or reject
comments, commits, code, wiki edits, issues, and other contributions that are
not aligned to this Code of Conduct, and will communicate reasons for moderation
decisions when appropriate.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.
Examples of representing our community include using an official e-mail address,
posting via an official social media account, or acting as an appointed
representative at an online or offline event.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
[GWG GitHub Issues](https://github.com/near-ndc/gwg/issues/new).

All complaints will be reviewed and investigated promptly and fairly.

All community leaders are obligated to respect the privacy and security of the
reporter of any incident.

## Enforcement Guidelines

Community leaders will follow these Community Impact Guidelines in determining
the consequences for any action they deem in violation of this Code of Conduct:

### 1. Correction

**Community Impact**: Use of inappropriate language or other behavior deemed
unprofessional or unwelcome in the community.

**Consequence**: A private, written warning from community leaders, providing
clarity around the nature of the violation and an explanation of why the
behavior was inappropriate. A public apology may be requested.

### 2. Warning

**Community Impact**: A violation through a single incident or series of
actions.

**Consequence**: A warning with consequences for continued behavior. No
interaction with the people involved, including unsolicited interaction with
those enforcing the Code of Conduct, for a specified period of time. This
includes avoiding interactions in community spaces as well as external channels
like social media. Violating these terms may lead to a temporary or permanent
ban.

### 3. Temporary Ban

**Community Impact**: A serious violation of community standards, including
sustained inappropriate behavior.

**Consequence**: A temporary ban from any sort of interaction or public
communication with the community for a specified period of time. No public or
private interaction with the people involved, including unsolicited interaction
with those enforcing the Code of Conduct, is allowed during this period.
Violating these terms may lead to a permanent ban.

### 4. Permanent Ban

**Community Impact**: Demonstrating a pattern of violation of community
standards, including sustained inappropriate behavior, harassment of an
individual, or aggression toward or disparagement of classes of individuals.

**Consequence**: A permanent ban from any sort of public interaction within the
community.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.1, available at
[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].

Community Impact Guidelines were inspired by
[Mozilla's code of conduct enforcement ladder][Mozilla CoC].

For answers to common questions about this code of conduct, see the FAQ at
[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at
[https://www.contributor-covenant.org/translations][translations].

[homepage]: https://www.contributor-covenant.org
[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html
[Mozilla CoC]: https://github.com/mozilla/diversity
[FAQ]: https://www.contributor-covenant.org/faq
[translations]: https://www.contributor-covenant.org/translations

'''
'''--- README.md ---
# GWG proposals and design documents

This repository collects NDC GWG project design documents and proposals. Our focus is more on the NEAR ecosystem and governance side. The core blockchain and interface proposals should go to the NEPs.

The structure is inspired by [Ethereum Improvement Proposals](https://github.com/ethereum/EIPs) and [NEAR Enhancement Proposals](https://github.com/near/NEPs/). While EIPs have different [types](https://eips.ethereum.org/) (Core, Networking, Interface, ...) all in the same category (EIP), we propose to organize the directory with [categories](#categories) based on the outcome (project spec, RFP, general improvement).

Documents should not move between directories. Instead they should be linked. It will break the `git` traceability: Git keeps track of changes to files in the working directory of a repository by their name. When you move or rename a file, Git doesn’t see that a file was moved.

## Categories

### Improvement proposal

Improvement proposals record all design decisions and processes at GWG. A _proposal_ should provide:

- Context on the current state
- Proposed changes to achieve the goals
- Detailed reasoning
- Example scenarios
- Discussions of pros, cons, hazards and alternatives
- Discuss any possible roadblocks.
- follow the [IP Template](./TEMPLATE-IP.md)

### Spec

Spec is a document specifying a project. It may follow up with an [RFP](#request-for-proposal). If a project is known to be an RFP from the beginning, then it should go into RFP directly rather than Spec.

### Request For Proposal

**NOTE**: organization of this directory is still in progress. We need to figure out the best way to manage RFPs and consolidate between using this repository for RFPs or NEAR Social Dev Gigs Board.

---

A request for proposal is a document that a business drafts when that business is seeking out multiple bids for one (or multiple) outsourced projects. The goal of a RFP process is to find and select contractors capable and competitive to deliver the requested project with a professional and quality solution. The process makes the selection clearer and easier from the outset.

In addition to other templates, the document must provide:

- Scope of the project, to allow bidders evaluate the complexity and cost of the project.
- Rough timeline for posting the bids, making a decision and expected delivery time.
- Optionally: budget estimate (if it's known).

Once an RFP is approved, anyone can submit proposals.

### Submitting a bid for RFP

Unless noted otherwise in the RFP document:

1. Create a PR, in the description reference a
2. The submission should be a markdown document based on the [submission template](./TEMPLATE_SUBMISSION.md). The document should be saved as: `RFPs/submissions/rfp-<rfp-number>/<your-business-name>.md`
3. Ask for review, collaborate in a chat.

## Status of the documents

A Status may be Draft if we want to break discussion in few PRs to break down a longer process in few steps.
At the end of the process each design has to be either Accepted or Declined.
If a later design doc significantly changes or reverses a decision, it may be marked
as superseded" with a reference to its replacement.

```text
Draft | Review | Accepted | Rejected | Superseded
```

## Drafting a document

Each document should provide detailed description, including: expected functionality, requirements, assumptions, expected user profile, dependencies and possible outline some preferences related to the solution.

The current process for proposals are:

1. Discuss the need or the problem with the GWG community.
1. Evaluate how important it is. What are the consequences of not building it?
1. Once getting initial feedback, create an issue: this will allow to track the proposal from the draft to the finish line.
1. Asses if it's an Improvement Proposal, Spec or RFP.
1. Draft the scope, requirements, timeline, expected functionality etc...
1. Collect all of it in a new document:
   - Improvement Proposal must be saved as `improvement-proposals/ip-<number>-title.md` and based on the [IP template](./TEMPLATE-IP.md).
   - Specs must be saved as `specs/spec-<number>-title.md` and based on the [Spec template](./TEMPLATE-SPEC.md).
   - RFPs must be saved as `RFPs/rfp-<number>-title.md` and based on the [RFP template](./TEMPLATE-RFP.md).
1. Submit the new proposal using GitHub Pull Request.
   - Make sure the `<number>` is a not used sequence number within the directory. You can use the issue number for that.
   - Link all related improvement proposals (`ip-xyz`), specs (`spec-xyz`) or RFPs (`rfp-xyz`) as outlined in the related template.
   - Don't copy the content of a related proposal. Reference it, instead.
1. Each document draft may have few iterations (and few pull requests) before reaching a final status.
1. After successful review and approval, document status should be set to `approved`. At that stage, anyone can submit proposals.
1. Rejected proposals must have status set to `rejected`.

A proposal, once finalized, should not be significantly modified.
A proposal can be superseded by another proposal. When a design or a proposal is superseded, a reference to the new design should be added to its text.

Discuss proposals in [NDC Tools Telegram](https://t.me/c/1708163325/2318). Contribute to the proposal via standard GitHub pull requests to the main branch.

New to technical specs? Here are some resources to help you effectively create and leverage these documents:

- [A Practical Guide To Writing Technical Specs](https://stackoverflow.blog/2020/04/06/a-practical-guide-to-writing-technical-specs/)

'''
'''--- RFPs/rfp-1-kudos-widget.md ---
---
RFP ID: 2
Status: Published
Category: NEAR Social
Created: 2023-05-11
Replaces: 
Requires: spec-1-kudos.md
---

# RFP-2: Kudos Widget for NDC

## Summary

Request For Proposal

**NDC is looking for proponents to submit their proposals to develop a "Kudos" widget on near.social.**
  
## Spec
  
Kudos is a widget that will enable people to build on-chain reputation. The widget will allow any verified human to nominate, recieve, and interact with Kudos on Near Social. 

Special attention is required to spam protection in order to ensure that people percieve interacting with Kudos as a very positive experience. Key spam protection concepts include:

- setting preferences for who can send me kudos and who can comment on them
- allowing recipients to not accept and/or delete unwanted Kudos
- requiring that users are i-am-human-certified before they can send or comment on Kudos

Please refer to this link to see the full specification for this RFP: **[spec-1-kudos.md](https://github.com/near-ndc/gwg/blob/main/specs/spec-1-kudos.md)**

## Expected Timeline

1. Proponents post their intent to respond
    - Location: Comment on [NDC Gigs](https://near.social/#/neardigitalcollective.near/widget/Gigs)
    - Deadline: **Friday May 19, 2023**
2. Proponents post their questions
    - Location: Comment on [NDC Gigs](https://near.social/#/neardigitalcollective.near/widget/Gigs)
    - Deadline: **Friday May 19, 2023**
3. GWG Technical WG responds to questions 
    - Location: Comments on [NDC Gigs](https://near.social/#/neardigitalcollective.near/widget/Gigs)
    - Deadline: **Monday May 22, 2023**
4. Proponents submit their Proposals 
    - Location: 
      - Create your own folder in [this structure](https://github.com/near-ndc/gwg/tree/main/RFPs/submissions/rfp-2-kudos) and upload your content there (pull request). 
      - A public post of your proposal is required, with the exception of commercial details.
      - Commercial details can be emailed separately to [neardigitalcollective at gmail dot com]
    - Deadline: **Wednesday May 24, 2023**
5. A GWG Panel awards work to successful proponent
    - Location: Comments on [NDC Gigs](https://near.social/#/neardigitalcollective.near/widget/Gigs)
    - Deadline: **Friday May 26, 2023**
6. Expected delivery time: **Friday June 23, 2023** or earlier if possible

## Selection Criteria

The Governance Working Group will review these proposals and post an Attestation to the various proposals as part of making the selection. ‍ We may also select a runner-up in case the primary proponent does not pass KYC.

Evaluation criteria will include

- Solution architecture
- Team’s Technical Capabilities, completeness
- Team’s BOS experience
- Project approach (including post-go-live support)
- Total price
- Proposed Timeline
- Customer success practices

The GWG should either be consulted as part of the design of the widget, and/or reserves the right to approve the designs.
  
## Open Questions and Comments

The spec includes several mentions of "TODO". It is part of the scope of this RFP that proponents are responsible for completing them and submit any designs for review and approval. We will commit to prompt 24h review cycles (and in the absence of prompt reviews you are allowed to mvoe ahead with building)

The spec also contains a section with discussion on a few open questions. We would expect a succesful proponent to help us close these items in a collaborative way.

Three "flavors" of Kudos are discussed in the RFP. If timeline becomes a factor of concern then it is OK to deliver the "Recognize" and "Endorse" flavors later, as long as the "Nominate" flavor is delivered before June 23.

In the current design it is ok for devs to query the i-am-human registry individually. A future improvement potential will be to interact with an indexer rather than directly with the smart contracts.
  
  
## References

NA
  
## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- RFPs/rfp-1-ndc-dashboard.md ---
---
#: 1
Status: Review
Category: NEAR Social
Created: 2023-03-28
Replaces: --
Requires: --
---

# NDC Dashboard widget

## Summary

The goal of this NDC Dashboard project is to create a foundational layer to help the community find, access, understand, and use the NDC.

The RFP was published on [gov.near.org](https://gov.near.org/t/ndc-dashboard-request-for-proposal/33080) and on [near.social](https://near.social/#/devgovgigs.near/widget/gigs-board.pages.Post?id=226)

Other potential names for this widget:

- NDC Dashboard
- NDC Gateway (?)

## Context

As governance processes of the Near Digital Collective (NDC) are coming closer to launching we need to create new functionality for users to visualize and interact with the NDC in a simple and yet meaningful way.

### What is the NEAR Digital Collective (NDC) and the Governance Working Group (GWG)?

The NDC, originally envisioned by Illia Polosukhin, the co-founder of NEAR Protocol, is now a fully fledged movement led by the NEAR Community. Its goal is to establish a community treasury and governance model that allows the ecosystem to collectively make decisions on everything from funding to elected representatives and more. It's a significant step towards creating a truly decentralized network.

## Scope and Requirements

For the purposes of this spec, it can be assumed that the NDC will be made up of a number of Sputnik DAOs (or similar), each with a set of Elected Members and a set of Treasury Trustees. The initial list of DAOs can be assumed to be the following:

- Members voted in by general public vote

  - Council of Advisors
  - Transparency Commission
  - House of Merit

- Members voted in or assigned by other mechanisms (e.g. AstroDAO)
  - Community Treasury
  - Marketing DAO
  - Developer DAO
  - Creatives DAO
  - Governance Working Group

The solution should

- be built on Near Social as a page or widget
- support an ever-evolving structure of DAOs and SubDAOs
- allow all community members to read and engage with NDCs active proposals (e.g. upvote, comment, share)
- allow NDC DAOs’ members to vote on active proposals
- incorporate a “multi-dao dashboard” functionality, with clickable content that allow users to “drill down” into the various DAOs and their sub-DAOs
- incorporate a “single-DAO dashboard” functionality, with clickable content that allow users to “drill down” into the various components (e.g. active proposals, past proposals, treasury history, inbound funding history, outbound funding history, outbound funding leaderboard)
- enable different options depending on the user is a non-member vs. member of a specific DAO (e.g members can create proposals and vote on proposals, non-members cannot)

The solution should support a number of different metrics

- Treasury metrics graphed over time
  - Total / inflows / outflows
  - Total / allocated / unallocated
  - User can select to show values as USD or NEAR
- Proposal metrics filtered by time period (e.g. last 7 days / 30 days / 12 months)
  - Total number of proposals created / approved / rejected
  - Number of proposals created / approved / rejected, filtered by type of proposal
  - Approval Rate (approved / rejected / expired)
  - Approval Time
  - Members’ votes breakdown for a given proposal
- Member metrics
  - Member vote participation across proposals (created / voted yes / voted no / didn’t participate)
  - Most active members (per number of votes)
- Events feed
  - Proposal status (created, approved, rejected)
  - Payment (allocated / disbursed)
  - Vote (launched / approved / rejected / expired)
  - Member change (added / removed)

## Timeline

> - submission start time
> - submission deadline
> - expected delivery time

## Selection Criteria

> Make contractors aware of all the business-related criteria you are examining in your selection process.

## Open Questions and Comments

> - potential future improvements
> - summary of open discussion

## Changelog

## References

> List of links to related resources and discussions

'''
'''--- RFPs/submissions/rpf-3/OWA.md ---
# RFP-3 OWA 

# Introduction
The Open Web Academy team is a highly experienced Web 3 developer on the NEAR Ecosystem. This team is going to create the solution required for the Kudos Widget:
1. Luis Mendez, BOS developer who has participated in the ETH Dubai hackathon, who has won the Sushi swap and Gains Network track with BOS.
2. Daniel Mora, smart contract developer experienced in Solidity and Rust for over 3 years.
3. Edward Vergel. Backend and Blockchain developer, Web3 security researcher with 3 years of experience in software development.

# Proposed Solution

## Project approach
We'll start developing modules in the following order to fulfill the request: 
### Authentication
This module will interact with the i-am-human smart contract  to verify the user identity.
### Kudos feed
This module will read all the kudos, showing in the main view.
### Kudos user
This module will read all the user’s kudos as a profile.
Also the user will set up who can send him kudos or comment on them according to the category selected (all, friends, close friends, no one).
Allow recipients to accept or not the new kudos.
### Create a kudo
This module will let any authenticated user create a new kudo for any active user related to him. 
Requiring the creator user to have a  i-am-human-certified before they can send or comment on Kudos.

## Implementation plan
It is expected to complete the project in no more than four weeks, including all development phases.
The project is planned to be developed in 3 stages 
### Planning and Architecture Stage Week 1
Project planning and architecture design. 
### Development Stage 2 Week 1-3  
Frontend development and smart contract development 
### Integration and Testing Stage 3 Week 4
Contract integrations and tests 

## Total price 
<img src="./price.JPG" alt="price" width="800"/>

## Proposed Timeline
### Start Operations on and stage 1 
Monday May 29
### Development and stage 2
Starting on Monday 5 and finishing on Friday 16 May
### Integration and Testing 
Starting Monday May 19
### App Delivery 
Friday May 23

## Customer success practices
### Building a strong support team 
To provide timely and effective support to the customers.
### Defining success metrics 
To grant the widget success through recopiled metrics.
### Measuring customer satisfaction 
Through the customer feedback
### Continuous improvement 
To deliver the best possible experience to the customers 

## How do you plan to test the solution
### Defining testing objectives 
To each widget component 
### Unit test 
To all smart contracts functions 
### Integration tests 
To check the full software behavior once deployed the smart contracts and the frontend
### Beta release
To receive early feedback from potential customers

## Ongoing support / maintenance proposal
### Defining maintenance scope
### Developing maintenance plan 
For saving the customers reviews and setting maintenance steps. 
### Continuous Improvement 
Continuously reviewing and improving the services based on the customer feedback

## Contractual considerations
We consider the payment of the 50% upfront and 50% once the project is finished.

## References

### All team members are NEAR Certified Developers.
### Eth Dubai Hackathon:
- Sushi Swap widget:
https://bos.gg/#/syi216.near/widget/GNS-Container

- Gains Network widget: https://bos.gg/#/syi216.near/widget/GNS-Container

### Nativo.art - Development of platform and smart contracts
### Open Web Academy
Course of RUST: 
- Tutorial to deploy smart contracts on Aurora Network.
https://www.youtube.com/watch?v=SNuKbeMkQnU&t=15s

'''
'''--- TEMPLATE-IP.md ---
---
IP ID: <number>
Status: Draft | Review | Approved | Rejected | Superseded
Category: NEAR Social | Proof of Personhood | ...
Created: YYYY-MM-DD
Replaces: ip-xyz
Requires: ip-xyz
---

# IP-<Number>: <Title>

## Summary

> "If you can't explain it simply, you don't understand it well enough." Provide a simplified and layman-accessible explanation of the problem or feature.
> Keep it short. Max 200 words.

## Context

> This section contains all the context one needs to understand the current state,
> and why there is a problem. It should be as succinct as possible and introduce
> the high level idea behind the solution.

## Proposal

> This section records the decision that was made and how it should work.
> It is best to record as much info as possible from the discussion that happened.
> This aids in not having to go back to the Pull Request and comments to get the needed information.
> You can include diagrams.
>
> - What new data structures are needed, what data structures will be changed?
> - What are the efficiency considerations (time/space)?
> - What are the expected access patterns (load/throughput)?
> - Are there any privacy considerations?
> - If the change is large, how will the changes be broken up for ease of review?

### User requirements

> Specify expected user behavior or a process structure

### Outcomes

> Here are some common questions that get answered as part of the detailed design:
>
> - What are the expected outcomes?
> - What systems will be affected?
> - Are there any observability needs?
> - Are there any security considerations (social, systematic, engineering, ...)?
> - Are any of these changes in conflict with the existing solution?
> - Does this proposal require coordination with other teams?

## Alternative Approaches

> This section contains information around alternative options that are considered
> before making a decision. It should contain a explanation on why the alternative
> approach(es) were not chosen.

## Consequences

> This section describes the consequences, after applying the decision. All
> consequences should be summarized here, not just the "positive" ones.

### Positive

### Negative

### Neutral

### Backwards Compatibility

> All proposals that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The doc must explain how the author proposes to deal with these incompatibilities. Submissions without a sufficient backwards compatibility treatise may be rejected outright.

## Further Discussions

> This section should contain potential followups or issues to be solved in future iterations (usually referencing comments from a pull-request discussion).

## Open Questions and Comments

> - potential future improvements
> - summary of open discussion

## References

> Are there any relevant PR comments, issues that led up to this, or articles
> referenced for why we made the given design choice? If so link them here!

- {reference link}

## Changelog

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- TEMPLATE-RFP.md ---
---
RFP ID: <number>
Status: Draft | Review | Approved | Rejected | Delivered
Category: NEAR Social | Proof of Personhood | ...
Created: YYYY-MM-DD
Replaces: rfp-xyz
Requires: rfp-xyz | spec-xyz | ip-xyz
---

# RFP-<Number>: <Title>

## Summary

Background and short summary in layman terms.

## Spec

Link to the `spec-xyz.md` (from [./specs](./specs)) directory.

## Timeline

- submission start time
- submission deadline
- expected delivery time

## Selection Criteria

Make contractors aware of all the business-related criteria you are examining in your selection process.

## Open Questions and Comments

Additional questions and comments not listed in the SPEC.

- potential future improvements
- summary of open discussion

## References

Are there any relevant PR comments, issues that led up to this, or articles
referenced for why we made the given design choice? If so link them here!

- {reference link}

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- TEMPLATE-RFP_SUBMISSION.md ---
# TEMPLATE_SUBMISSION

# RFP-<rfp-number> <Your Business Name>

## Introduction

Team description.

## Proposed Solution

- describe your approach and services to be performed
- implementation plan
- list dependencies you plan to introduce
- how do you plan to test the solution
- ongoing support / maintenance proposal
- contractual considerations

### Backwards Compatibility

All proposals that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The doc must explain how to deal with these incompatibilities or the set of requirements to for the backward compatibility to be discussed in a submission. Submissions without a sufficient backwards compatibility treatise may be rejected outright.

## References

List related projects you have build, qualifications, references, or any hints to prove that you are capable to deliver.

'''
'''--- TEMPLATE-SPEC.md ---
---
Spec ID: <number>
Status: Draft | Review | Approved | Rejected | Delivered
Category: NEAR Social | Proof of Personhood | ...
Created: YYYY-MM-DD
Replaces: spec-xyz
Requires: spec-xyz | ip-xyz
---

# Spec-<Number>: <Title>

## Summary

<!-- One page high-level overview; put details in the specification section and background in the previous section. Should be understandable by a new engineer or reader who isn't already working on the project. Short summary in layman terms. -->
<!-- List the challenge(s) being solved by this widget. What is the problem? -->
<!-- One page high-level overview; put details in the specification section and background in the previous section. Should be understandable by a new engineer or reader who isn't already working on the project. -->

## Motivation

<!-- Context one needs to know to understand this doc: motivating examples, previous versions and problems, links to related projects/design docs, etc. You should mention related work outside of NEAR if applicable. Note: this is background; do not write about your design or ideas to solve problems here. What's the "historical" context? Why do we need a new project? Identify the problems and the needs. -->

## Use Cases

<!-- Who is using this and what does it do? Leave "how" to the design/tech specification sections. If the solution doesn't help these people achieve their goal then the project isn't successful, even if it fills all of the specified technical requirements. -->

### Actors and Actions

<!-- List the different groups of people that will use this widget and what each one can specifically do. If more clarity is needed you can include an actor/action matrix. List all users and their types. List the actions each collective will take individually. User profile description. Describe which action is done by which actors. Feel free to use a table format or provide your own graphics or bundle the description in the Actions section. A "swimlane process chart" often works well here. -->

### User Stories

### Additional Features & Requirements

<!-- Optionally, describe: Expected functionality, Security issues/requirements, Assumptions/dependencies (internal and external), Potential problems/roadblocks, Budget concerns. -->

## Tech Spec

<!-- How does the product implement the features and requirements? Not every feature or requirement needs deep consideration here, but implementation considerations are discusssed they should be captured here. -->

### Smart Contract Functions

<!-- What functions and functionalities should the widget have -->

### Data Structures

### UML Diagrams

<!-- Include diagrams that best capture what needs to be built. Sequence, State, Interaction, Activity, Etc.-->

## Design Specification

<!-- UX and UI that affords all of the features and requirements. How it behaves and what it looks like. -->

### Wireframes / Screens

### UI Design

### Dependent Widgets

<!-- Does the widget interact with other widgets? -->

### Backwards Compatibility

<!-- All proposals that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The doc must explain how to deal with these incompatibilities or the set of requirements to for the backward compatibility to be discussed in a submission. Submissions without a sufficient backwards compatibility treatise may be rejected outright. -->

## Consequences

<!-- This section describes the consequences, after applying the decision. All consequences should be summarized here, not just the "positive" ones. -->

### Positive

### Negative

### Neutral

## Work Plan

<!-- This can be refined by a party replying to a RFP -->

### Phases

<!-- High-level summary of each phase (if the project does have multiple phases.)  -->

### Sprints

<!-- Break work down into week long chunks. If a team hasn't been identified then assume it will be an individual completing the work. Each sprint should include something which can be considered "Done" so that the product is usable as soon as possible and then recieves incremental improvements. -->

### Audit

<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->

## Open Questions and Comments

<!-- Topics not covered in this document that need to be addressed in a meeting or async. Potential future improvements, Summary of open discussion. -->

## Glossary & References

<!-- Are there any relevant PR comments, issues that led up to this, or articles referenced for why we made the given design choice? Acryonyms or other terminology that could be misunderstood? -->

- {reference link}

## Changelog

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- specs/regional_communities.md ---
---
#: <spec number>
Status: Draft | Review | Approved | Rejected | Delivered
Category: NEAR Social | Proof of Personhood | ...
Created: YYYY-MM-DD
Replaces: spec-xyz
Requires: spec-xyz | ip-xyz
---

# Spec-<Number>: <Title>

## Summary

Background and short summary in layman terms.

## Context

What's the "historical" context? Why do we need a new project?
Identify the problems and the needs.

## Scope and Requirements

Describe:

- Expected functionality.
- Potential security issues and requirements.
- User profile description. Who is the user? How she/he is expected to us it?
- Requirements, assumptions and dependencies (internal and external).
- Outline identified potential problems and roadblocks related to building the solution.
- Optionally: Budget limit.

### Backwards Compatibility

All proposals that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The doc must explain how to deal with these incompatibilities or the set of requirements to for the backward compatibility to be discussed in a submission. Submissions without a sufficient backwards compatibility treatise may be rejected outright.

## Use Cases

### Actors

List all users and their types

### Actions

List the actions each collective will take individually.

Describe which action is done by which actors. Feel free to use a table format or provide your own graphics or bundle the description in the Actions section. A "swimlane process chart" often works well here.

|         | Action 1 | Action 2 | Action 3 | action 4 |
| ------- | -------- | -------- | -------- | -------- |
| Actor 1 |          |          |          |          |
| Actor 2 |          |          |          |          |
| Actor 3 |          |          |          |          |
| Actor 4 |          |          |          |          |

## Consequences

This section describes the consequences, after applying the decision. All
consequences should be summarized here, not just the "positive" ones.

### Positive

### Negative

### Neutral

## Open Questions and Comments

- potential future improvements
- summary of open discussion

## References

Are there any relevant PR comments, issues that led up to this, or articles
referenced for why we made the given design choice? If so link them here!

- {reference link}

## Changelog

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- specs/spec-1-kudos.md ---
---
Spec ID: 1
Status: Review
Category: NEAR Social Widget
Created: 2023-04-21
Replaces: n/a
Requires: n/a
---

# Spec 1: Kudos Widget

## Overview

<!-- Objective. In a few sentences, describe the key system objectives. Tweet length executive summary. -->

Kudos is a widget to build a reputation. The widget will allow any verified human to nominate, recieve, and interact with Kudos on [Near Social ("NS")](https://near.social).

### Challenge

<!-- List the challenge(s) being solved by this widget. What is the problem? -->

The specific purpose of the Kudos widget is to crowd source reputation through gamification. Kudos needs to foster recognition and celebrations of individuals for their contribution to NEAR (in the context of nodes, projects, workgroups, collectives, etc).  

### Context

<!-- Stuff one needs to know to understand this doc: motivating examples, previous versions and problems, links to related projects/design docs, etc. You should mention related work outside of Google if applicable. Note: this is background; do not write about your design or ideas to solve problems here. -->

Reputation is a need in the context of NS. Kudos can be used to build reputation by issuing SBT.

Upvoting is required in various contexts on [NS](https://near.social). Once we have a solution that meets the requirements, the Kudos Widget will serve as a conventional implementation for anyone who wants to fork the widget for other purposes (such as governance nominations).

#### Web2 Inspiration

- Reddit
- StackOverflow
- [lemmy](https://lemmy.ml/)
- Open source
- [Kudos.com](https://www.kudos.com/platform/employee-recognition-software)

#### Web3 Inspiration

- [webuidl Kudos](https://near.social/#/webuidl.near/widget/Kudos)
  - Remove color background on each Kudo.
  - Move upvote button to the left of each row.
  - Use spacing that the input labels are clear which box they belong to.
  - Input a near name instead of a url.
  - Remove the follow/following button.
  - On submission text inputs do not clear out and the kudo does not appear.
  - Allow markdown in the accolade.
  - Preview of accolade. 
- [MetaStakingVote on NS](https://near.social/#/meta-pool-official.near/widget/MetaStakingVote)

#### Other potential names for this widget

- High Five
- Props

## Use Cases

<!-- Who is using this and what does it do? Leave "how" to the design/tech specification sections -->

### Actors / Actions

<!-- List the different groups of people that will use this widget and what each one can specifically do. If more clarity is needed you can include an actor/action matrix -->

**Visitor** no credentials, not logged in.

- View Kudos List
- View Kudos Detail
- Share Kudos (list and deep link to a Kudo detail)

**User** logged in to NS.

- Everything Visitors can do
- Comment on Kudos (if "all users can comment" is enabled by the recipient)
- React to Kudos 
- Upvote Kudos

**Verified Human** logged in user who has credentials issued by `i-am-human`.

- Everything Users can do
- Create new Kudos
- Recieve new Kudos
- Comment on Kudos (if "all verified human users can comment" is enabled by the recipient)

**Administrator** can take additional actions not availalbe to other actors.

- Everything Verified Humans can do
- Delete Kudos
- Change Settings
  - Create or remove sub-categories (aka tags)
  - Adjust experiation time of Kudos

### User Stories

Here are some user stories or use cases for the Kudos widget based on the provided text:

1. As a **visitor** (not logged in), I want to view the Kudos list, so I can see the various accomplishments and recognitions in the community.
2. As a **visitor**, I want to view Kudos details, so I can learn more about a specific Kudo and understand its context.
3. As a **visitor**, I want to share Kudos (list and deep link to a Kudo detail), so I can promote achievements and encourage others to engage with the community.
4. As a **logged-in user**, I want to comment on Kudos, so I can express my thoughts and engage with the community.
5. As a **logged-in user**, I want to react to Kudos, so I can show my appreciation and support for the accomplishments.
6. As a **verified human**, I want to create new Kudos, so I can recognize and celebrate the contributions and achievements of others in the community.
7. As a **verified human**, I want to receive new Kudos, so I can be acknowledged for my contributions and achievements.
8. As an **administrator**, I want to delete Kudos, so I can remove inappropriate or unwanted content from the platform.
9. As an **administrator**, I want to change settings, such as creating or removing categories, adjusting expiration time of Kudos, and deleting Kudos, so I can maintain a positive and productive environment for the community.

### Additional Features & Requirements

The following features will use the Social DB smart contract with the Kudos UI developed in Near Social.

#### Create a kudo

- Nominate any IAH verified account
- Notify the account of the Kudo via the Notifications API
- Send account SBT Badge for each Kudo.
- Display the Kudo as a post in the activity feed.
- Check that creator and reciever are registered with IamHuman.
- Account receiving a Kudo will get receive Near Social notification via Notifications API.

#### Interact with existing Kudo

- Upvote a Kudo
  - Any human can upvote a Kudo (only when Kudo is not expired). 
  - One account can upvote any Kudo only once.
  - Upvotes will be stored in the Social DB or in the Kudo SBT issuer.
- Comment on a Kudo
  - Any human can comment on a Kudo (even if a Kudo expired). 
  - Comments will be implemented using existing Near Social widget (and allow threading aka responses to comments).
- Check the actor is registered with IamHuman
- Share a Kudo (deep link)

#### Displaying All Kudos

- Show overview of all Kudos
- Sort Kudos by date, # of upvotes, # of comments
- Filter Kudos by expired or not, tags, "my kudos" (ones user has interacted with)
- Lead with the name of the person recieving the Kudo, then why.

#### Display Kudo details

- Show who, why, and the nominator
- Show all comments
- Show # of upvotes
- Show who upvoted

#### Kudo Categories

- SBT standard provides a notion of classes. We will use it to define Kudo categories. Initial set of categories is the following: 
- Kudos. Sub-categories include: Thank You! Good Job! Impressive! Excepional!
- Endorse. Sub-categories include: Developer, Community Builder, Product Lead, Marketer, Project Mgr, Sales, Researcher, Architect, Data Scientist, Creative ...
- Nominate. Sub-categories include: House of Merit, Transparency Commissson, Counsil of Advisors, Creatives DAO, Marketing DAO
- TODO: finalize the categories

#### Spam protection

- Using proof of personhood is not enough to protect a system from abuse. One user could attach a bot to his account and send thousands of kudos to other accounts (potentially to the same human account).
- We propose to limit that activity: Any human can send maximum 14 kudos per week. The quota will reset every Sunday at midday UTC (12:00). The quota will be a parameter and the admin will be able to change it in the future.
- The target user should be in control of the Kudos they recieve. Unwanted Kudos can be removed from display by either the nominee or nominator.
- The target user should also be able to set their preference to either auto-accept incoming Kudos to their profile, or require a manual review & approval before accepting incoming Kudos
- Kudo sender will have to set an expire time. To make it more useful, the contract will require that a minimum expire time is 1month.

## Tech Spec

<!-- How does the widget implement the features and requirements? Not every feature or requirement needs deep consideration here, but implementation considerations are discusssed they should be captured here. -->

### Smart Contract Functions

<!-- What functions and functionalities should the widget have -->
Kudos should support two main smart contract functions:

- isHuman (pseudocode example)

    ```
    token = sbt_tokens_by_owner("user.near", "gooddollar-v1.i-am-human.near", 1)
    if !token || token.metadata.expires_at < now {
      return NotAuthorized() // no token or token expired.
    }
    ```

- mintSBT (see NEP-393 for examples)

### Data Structures

### UML Diagrams

<!-- Include diagrams that best capture what needs to be built. Sequence, State, Interaction, Activity, Etc.-->
  
TODO: Include diagrams that best capture what needs to be built. Sequence, State, Interaction, Activity, Etc.
  
## Design Specification

<!-- UX and UI that affords all of the features and requirements. How it behaves and what it looks like. -->

### Wireframes / Screens

https://app.visily.ai/projects/68d0d584-1866-4343-86b5-d1ab1bdef11d/boards/464535

### UI Design

- Follow Near Social convention of using [Bootstrap](https://getbootstrap.com/) snippets and components. 
- Design for mobile first and desktop second.
- Ensure all designs meet A11Y requirements such as contrast by testing the widget with a tool such as [SiteImprove](https://chrome.google.com/webstore/detail/siteimprove-accessibility/efcfolpjihicnikpmhnmphjhhpiclljc), [Lighthouse](https://developer.chrome.com/docs/lighthouse/overview/), [Axe](https://www.deque.com/axe/), or [Wave](https://wave.webaim.org/).

### Dependent Widgets

<!-- Does the widget interact with other widgets? -->

- [Kudos.Styles](https://near.social/#/neardigitalcollective.near/widget/Kudos.Styles)
- [Common.Compose](https://near.social/#/neardigitalcollective.near/widget/Common.Compose)
- [Kudos](https://near.social/#/neardigitalcollective.near/widget/Kudos)
- [kudoBox](https://near.social/#/neardigitalcollective.near/widget/kudoBox)
- [FollowButton](https://near.social/#/neardigitalcollective.near/widget/FollowButton)
- [MainPage.Post.Header](https://near.social/#/neardigitalcollective.near/widget/MainPage.Post.Header)
- [MainPage.Post](https://near.social/#/neardigitalcollective.near/widget/MainPage.Post)
- [showCommentsButton](https://near.social/#/neardigitalcollective.near/widget/showCommentsButton)
- Notifications API

## Work Plan

### Phases

<!-- High-level summary of each phase (if the project does have multiple phases.)  -->

- Finalize SPEC including community feedback
- Call for Proposals and Award work
- TODO: Implementation
- TODO: Integrate with I-am-Human
- TODO: Integrate with SBT Standard

### Sprints

<!-- Break work down into week long chunks. If a team hasn't been identified then assume it will be an individual completing the work. Each sprint should include something which can be considered "Done" so that the product is usable as soon as possible and then recieves incremental improvements. -->

| Week # | Work to Complete |
| -------- | -------- |
|| Review existing solutions, Draft TDD |
|| Review & Update TDD Draft |
|| Publish TDD Draft to Github via PR, solicit wider feedback |
|| Merge TDD PR, call for proposals |
|| Review Proposals, award work |
|| UX improvements on top of existing Kudos Widget |
|| Display all Kudos |
|| Create Kudos |
|| Interact with Kudos |
|| Display details for a Kudo |
|| Tags / Categories |
|| SBT integration |
|| IAH integration |
|| Limit # of Kudos sent each week |
|| Kudos expire after X months |
|| Delete Kudos |
|| Administration features |
|| UX iteration that required smart contract |

### Audit

<!-- Identify if this widget needs an audit. Does it store sensitive information, transfer tokens, or have a middleware layer? Consult the Security Workgroup if needed. -->

Contract is low risk until reputation gained with Kudos grants access to funds without human approval. When we see significant adoption/integrations then we can dedicate funds for a formal audit. 

## Open Questions

<!-- Topics not covered in this document that need to be addressed in a meeting or async -->

Please include your knowledge & opinions via PR

**Q:** Should users be able to delete Kudos assigned to them? 

**A:** @starpause: To begin with I think it's good enough for administrators to have that right. It may be a feature that only admins can delete (in cases of behavior against COC) but it's still appropriate for a kudo to appear even if a nominee doesn't desire it. One hypothetical situation would be a nominee who wants one governance seat so they get nominated for that & want to delete their nominations for any other governance seat to improve their chances of their preferred seat, even though they would be a better fit for another seat.

@kazanderdad: I would prefer if the recipient of a Kudo had the opportunity to set their profile to either A) accecpt any kudos as received but with an option to remove unwanted kudos, or B) require my approval before an incoming Kudo is accepted. I would speculate that most people will allow incoming kudos, assuming that they are all positive, but that some people may wish to add a review step, perhaps after they had a negative esperience as targets of spam attacks. 

**Q:** Should we use Social DB for upvotes?

**A:**

**Q:** Should we issue SBT when someone gives a Kudo (Con: Feels spammy, costs more)? Or when someone claims their SBT after reaching a # of upvotes (Con: Less SBT will be issued)?

**A:** @kazanderdad: Simly counting and displaying the number of Kudos received can be achieved in other ways (e.g. indexing) and automated into a separate widget that folks can show on their profile page. Minting every kudo seems unneccessary. The reason a user might want to mint SBTs would be to increase reputation in a more meaningful way, to get access or unlock new opportunities. As such, minting Kudo SBTs should be implemented together with the concept of Categories, where the admin of a Cateogory can set the required count beore minting is allowed. Example: User requires 3 kudos in the "HoM Nominee" cateogry before they can mint an official "HoM Nominee" which unlocks them to become electable in votes. But the same user might require 20 "Dev Superstar" Kudos before they can mint a "Dev Superstar" SBT, which unlocks access to some exclusive club.

**Q:** What happens when a Kudo expires? 

**A:** @kazanderdad: I suggest they should be hidden from default view, but the UI allows users to change the filter and display them if needed.

**Q:** What happens when a Kudo is deleted? 

**A:** @kazanderdad: I suggest they should be removed entirely, no longer exist in the registry.

**Q:** What happens when a Kudo is not accepted by the recipient (assuming recipients has selected to not auto-accept incoming Kudos)? 

**A:** @kazanderdad: I suggest they should not be visible to anyone except the recipient. For the recipient they should appear in an inbound queue as "pending" to be either approved or deleted.

**Q:** Is commenting limited to verified humans?

**A:** @kazanderdad: Yes. I think of verified human as spam protection. There are several trolls on NS who will put out very negative comments. Kudo is supposed to be a very positive experience. If we allow anons to post negative comments then it will ruin it for many users. As a user of the Kudos widget I should be able to set who can comment: Only accounts that I follow, or only verified humans, or any account.

**Q:** Who would "follow a kudo" and why? What notifications would such a follow recieve? 

**A:** @kazanderdad: As the recipient I should by default be following my own Kudos, and this should result in all new comments showing up in my feed. If I follow another user, then the Kudos that they receive should also show up in my feed. Not sure if this means users should be able to follow an individual Kudo?

**Q:** Do we make one widget for Nominate, Recognize and Endorse, or should we rather make three different forks? 

**A:** @kazanderdad: The structure is remarkably similar between the three, so could easily be in one widget. However, the purposes are different, and in the spirit of composability I think I'd prefer to have three different forks with different names. The Kudos/Recognize categories should be pretty static over time, while the Endorse will change as new jobs emerge and for Nominate the categories could change with every new congress and every new DAO that wishes to use voting. Furthermore, the Nominate version of the widget may have added requirements, e.g. to facilitate interacting with the voting contract.

**Q:** What threshold can we define for when an audit is appropriate? 

**A:** TBD

## Glossary & References

<!-- Are there any relevant PR comments, issues that led up to this, or articles referenced for why we made the given design choice? Acryonyms or other terminology that could be misunderstood? -->

**Kudo** (_plural: Kudos_) is a form of a recommendation to share a gratitude or achievement shared between humans.

**I Am Human (IAH)** Protocol for verifying personhood. 

- [dApp on testnet](https://i-am-human-dev.netlify.app/) 
- [dApp source](https://github.com/near-ndc/i-am-human-dapp)
- [Protocol](https://github.com/near-ndc/i-am-human)

**Soul Bound Token (SBT)** Soulbound Tokens (SBT) are non transferrable NFTs that have a recoverability mechanism and a soultransfer mechanism. SBTs are well suited of carrying proof-of-attendence, proof-of-unique-human "stamps" and other similar credibility-carriers. See more here: https://github.com/near/NEPs/pull/393

**Near Social (NS)** We use NS to describe any Gateway built on BOS, such as https://near.org/ or https://alpha.near.org/ or https://near.social/#/. Read more about it here https://docs.near.org/bos/overview

**Widget** Technically a widget is the minimum unit of a frontend on BOS. Widgets are composable: they allow you to include an existing component (inclusive of other widgets) into your code, thus enabling to create complex applications by composing components.

## Changelog

<!--
Points for reviewers to consider:

- Be pragmatic: Is there enough information to begin coding? Practically, implementation will reveal the unforeseeable. This doc can evolve to record those issues/resolutions.
- Wide angle view: Do you know of overlapping projects? Are there OKRs or other non-technical forces that would push/pull priority?
- Optimization: Describe alternate approaches and why they are better. Use Caveats section for approaches under consideration, even if they are ultimately abandoned. 

--> 

**Authors & Reviewers:** @starpause, @robert-zaremba, @htafolla, @KazanderDad 
*Please insert your name here if you do review the document.*

| Ver. | Date       | Author          | Changes Made                             |
| ------- | ---------- | --------------- | ---------------------------------------- |
| 0.1.0   | 2023-04-21 | @starpause      | Initial draft of the document            |
| 0.2.0   | 2023-04-23 | @starpause      | Merged prior writting by @robert-zaremba from his [Github version](https://github.com/near-ndc/gwg/pull/1)                   |
| 0.3.0   | 2023-04-25 | @starpause      | Addressed review comments, formated sections to more closely match [template](https://github.com/near-ndc/gwg/blob/main/TEMPLATE-SPEC.md)    
| 0.4.0   | 2023-05-10 | @kazanderdad    | Clarifying some of the open questions, finalized doc for RFP

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''
'''--- specs/spec-2-election-ui.md ---
---
Spec ID: 2
Status: Review
Category: NEAR Social
Created: 2023-05-25
Replaces: n/a
Requires: n/a
---

# Spec-2: Election UI

## Summary

<!-- One page high-level overview; put details in the specification section and background in the previous section. Should be understandable by a new engineer or reader who isn't already working on the project. Short summary in layman terms. -->
<!-- List the challenge(s) being solved by this widget. What is the problem? -->

The Election UI provides an interface for people to see the status of current + past NDC Congressional Body elections. This includes the candidates and votes that have been cast. 

Canidates are presented in the Election UI after they've been nominated via [Kudos](https://github.com/near-ndc/gwg/blob/main/specs/spec-1-kudos.md) (or a Nominate specific fork of Kudos). After an election the winning candidates are assigned seats in NDC congress.

## Motivation

<!-- Context one needs to know to understand this doc: motivating examples, previous versions and problems, links to related projects/design docs, etc. You should mention related work outside of NEAR if applicable. Note: this is background; do not write about your design or ideas to solve problems here. What's the "historical" context? Why do we need a new project? Identify the problems and the needs. -->

The following is to provide context for the electing the NDC Congressional Bodies, which are the House of Merit, Transparency Commission, and Council of Advisors. Voting is conducted by verified humans in the NDC (denoted as members of the Voting Body).

The overall governance flow:

1. **Nomination process**, which involves a self vote (based off of kudos) and accompanying attestation and a kudo + attestation by another voting body members
2. **Election process** (the scope of this RFP), which involves voting body members having x amount of credits per congressional body and congressional 
3. **Congress in session**: when the elected congressional members make decisions during their bi-annual tenure in their body including passing setup packages, approving budget of constellations etc. 

We are assuming stage changes: Nomination -> Election -> Congressional Onboarding are done manually, (ex; by the governance working group) as opposed to automatically updated by cross contract calls. Each part of the process, which is not manually handled, will be on-chain. Automation will be worth building once we've proven the system works via manual effort. 

Mechanisms of Nomination are out of scope as are mechanisms of assigning congress seats. We do need a way to clearly communicate who has been elected to congress seats.

## Use Cases

<!-- Who is using this and what does it do? Leave "how" to the design/tech specification sections. If the solution doesn't help these people achieve their goal then the project isn't successful, even if it fills all of the specified technical requirements. -->
<!-- List the different groups of people that will use this widget and what each one can specifically do. If more clarity is needed you can include an actor/action matrix. List all users and their types. List the actions each collective will take individually. User profile description. Describe which action is done by which actors. Feel free to use a table format or provide your own graphics or bundle the description in the Actions section. A "swimlane process chart" often works well here. -->

Actions are broken down by actors:

- Voter
- Candidate
- Watchdog (no IAH credentials)

These user stories illustrate the needs and desires of the actors rather than perscribing how the actors will achieve their goals.

### Voter

#### Outside of Election UI but still in BOS

- I want to be notified when the election opens and notified when the election is about to close directly on BOS [notification widget].
- I want to know about upcoming elections and their dates. 

#### Viewing a Live Election

- I want to see all the candidates for each congressional body, so I know my options.
- I want to see current voting results, so I know everything is happening on chain.
- I want to see how many candidates I can vote for per congressional body, so I know how to select candidates.
- I want to see my past votes casted for each congressional body, so I know who I voted for.
- I want to understand the time frame I'm looking at defined both in terms of Congressional # and year.
- I want to see the results of an election after it was over with transaction history, so there is accountability after the election.

#### Voting in a Live Election

- I want a cart of candidates, so I can organize who I am voting for before I cast a vote on chain.
- I want to be able to vote on each Congressional body one at a time so I don’t have to make the entire decision at once.
- I want to be able to toggle between Congressional bodies so I can more easily choose candidates and my vote status.
- I want to see how many _votes_ I have cast and how many _voting credits_ I have left for each congressional body, to better allocate my votes and understand the quadratic voting process.
- I want to learn about quadratic voting because it's new to me.
- I want to easily increment and decrement the votes I've assigned to each canidate. 
- I want to know when I've used up all of my votes so I don't case more votes than I have (Disabled UI, toast notification)
- I want to save my progress for voting/cart, so I can resume + calculate quadratic voting strategy at a later vote without having to submit the whole decision.
- I want to see time until the next Congressional election after a vote is over, so I can plan to run for upcoming congressional elections.
- I want to see past election results (even if its first vote - show no past election), so I can gauge the electorate’s sentiment.

#### Viewing Election Candidates

- I want to see a candidate profile (Near Social) and the platform they used to nominate themselves (nomination mechism).
- I want to see a candidate's past congressional history on profile (past roles, proposals, and complaints), so I can audit their past performance.
- I want to see the profile + attestation (queried from the nomination process) for a candidate so I can see social proof for why someone was elected.

#### Runoffs

- I want to know whether the election resulted in any tie, and what are the clear next steps to finalizing runoff.

### Watchdog

- I want to see details about the ongoing election to judge if it's worth my time and effort to join the NDC and be heard. 
- I want to understand if an election is over or if it's underway. I want to understand who won the election. 

### Candidate

- I want elections to be relatively short so that the time I spend campaigning can be focused. 
- I want to see how much of the voting body has voted in total so I can plan campaign efforts.

### Additional Features & Requirements

<!-- Optionally, describe: Expected functionality, Security issues/requirements, Assumptions/dependencies (internal and external), Potential problems/roadblocks, Budget concerns. -->

- Votes can not be changed once cast, but can be changed before they are. 

### Considered "Nice To Haves" Which Are Out Of Scope

- MVP won't have user profile pages. Candidate names link to their NS profile, candidate "Nomination" links to Kudos/Nominate.
- MVP won't have a separate dashboard. Upcoming elections can be discovered two ways in the current interface: (1) Congress/Time selector (2) List of upcoming elections under the current election status graphic.
- This version won't accomodate "I want to see what DAOs a candidate is in even if they are not part of NDC, in order to understand what communities they are a part of.", which could be part of user profiles. 
- Edit profile in the scope of Election UI. Users (candidates, voters, etc) can edit their Near Social profiles which Election UI links to.

## Tech Spec

<!-- How does the product implement the features and requirements? Not every feature or requirement needs deep consideration here, but implementation considerations are discusssed they should be captured here. -->

### Smart Contract Functions / Indexing / Backend

<!-- What functions and functionalities should the widget have -->

Election UI will need to query the following information from [https://github.com/near-ndc/voting-v1](https://github.com/near-ndc/voting-v1):

- list of elections
  - houses up for vote.   
    - candidates for each house
    - votes

### Data Structures

### UML Diagrams

<!-- Include diagrams that best capture what needs to be built. Sequence, State, Interaction, Activity, Etc.-->

### Technical Dependencies 

Voting Contracts @ https://github.com/near-ndc/voting-v1

## Design Specification

<!-- UX and UI that affords all of the features and requirements. How it behaves and what it looks like. -->

### Wireframes / Screens

- [2023-05-30 v0.1.0](https://www.figma.com/file/OTKmz4ga22khc2vtWPFkzB/Election-UI-Wireframe?type=design&node-id=102%3A2&t=rNzg02hFvCuYLv9a-1)
  - Desktop Voting for review
  - Roughed out Desktop Profile & Desktop Admin

### UI Design

Follow the NDC Brand Book in line with Material Design, falling back on vanilla [Bootstrap](https://getbootstrap.com/).

![Primary and Secondary NDC Colors in a Material Design Pallet](https://i.imgur.com/Rzx9XnX.jpg)

### Dependent Widgets

<!-- Does the widget interact with other widgets? -->

- Kudos Widget
- Near Social Profile

## Work Plan

<!-- This can be refined by a party replying to a RFP -->

### Sprints

<!-- Break work down into week long chunks. If a team hasn't been identified then assume it will be an individual completing the work. Each sprint should include something which can be considered "Done" so that the product is usable as soon as possible and then recieves incremental improvements. -->

| Week # | Work to Complete |
| -------- | -------- |
|| Load latest election. |
|| Displaying: Countdown to end, List of Congresses, List of Candidates. |
|| Switch between houses inside an election. Hide/show votes, bookmark candidates. |
|| Allocate votes (local storage or social graph storage). |
|| Cast votes (write to chain). |
|| Right sidebar: Visualization of votes (Pie or Circle Packing). |
|| Switch between elections. |
|| Right sidebar: List of upcoming elections. List of past elections. |
|| Breakpoint styles for tablet and mobile. |

## Open Questions and Comments

<!-- Topics not covered in this document that need to be addressed in a meeting or async. Potential future improvements, Summary of open discussion. -->
### Open

### Resoloved

- **Q:** How long is the election voting window? If no comment: 8 days (long enough that someone can take a week vacation and still participate in governance). 
  - **A:** Election timing will be retrieved from the smart contract. It will be set on the smart contract by NDC administrators.  
- **Q:**Considering votes are on-chain and don’t lack privacy, should we be able to see votes? In the spec above we are assuming yes. Going off of this, we are unclear on whether a voting body member can override their vote for a congressional body before the deadline as it would make the vote even more susceptible to swindling.
  - **A:** Yes, we will be displaying votes
- **Q:** One of the biggest challenges for NDC Voting body members is to notify them of a vote. THis brings an overall question of outside of BOS Push notification, and what point of the I-AM-HUMAN onboarding flow will users optin and enable Web2 notifications (in a GDPR compliant fashion) so we can remind them of voting (and other NDC critical updates) outside of BOS. This may result in a separate spec for overall NDC GDPR Compliant Notifications
  - **A:** We will use standard BOS notifications.
- **Q:** What is our runoff policy? 
  - **A:** An administraotr will begin a new runoff election in the case of a tie. Starting elections is handled entirely on the contract side via CLI. The voting administrators will be a list of addresses on the voting contract who have permissions to call these functions. 
- **Q:** Can election results be vetoed? How does that work?
  - **A:** If this is possible it will happen off chain as the NDC administrators are filling congress seats based on election results.  
- **Q:** Do we need to pull details on candidate platform in original RFP from nomination process? Or just link to it? 
  - **A:** MVP approach can be to link. Nice to have is a profile page that can be used to see relevant information for any candidate or voter.

## Glossary & References

<!-- Are there any relevant PR comments, issues that led up to this, or articles referenced for why we made the given design choice? Acryonyms or other terminology that could be misunderstood? -->

- [Voting process deep dive](https://docs.google.com/document/d/1Vuo8Zi9d1beJ9oKPeWh95BORkQvnCu6PFDemhZvqk5Q/edit)
- [NDC Product Book](https://docs.google.com/document/d/1w_wfRfp-ISH7g-zu7vAFULVvRNwyLGwNIDC1EBkxvu0/edit)
- [NDC v1 Smart Contracts](https://github.com/near-ndc/voting-v1)
- [Figma Designs v1](https://www.figma.com/file/JqeSbADxp3PNEcycCpIYfd/Election-UI?type=design&node-id=0-1&t=fc1tAPlqA8oVPwu8-0)

## Changelog

<!--
Points for reviewers to consider:

- Be pragmatic: Is there enough information to begin coding? Practically, implementation will reveal the unforeseeable. This doc can evolve to record those issues/resolutions.
- Wide angle view: Do you know of overlapping projects? Are there OKRs or other non-technical forces that would push/pull priority?
- Optimization: Describe alternate approaches and why they are better. Use Caveats section for approaches under consideration, even if they are ultimately abandoned. 
*Please insert your name here if you do review the document.*
--> 

**Authors & Reviewers:** @starpause 

| Ver. | Date       | Author          | Changes Made                             |
| ------- | ---------- | --------------- | ---------------------------------------- |
| 0.1.0   | 2023-05-25 | @starpause      | Initial draft of the document            |

## Copyright

Copyright and related rights waived via [CC0](https://creativecommons.org/publicdomain/zero/1.0/).

'''