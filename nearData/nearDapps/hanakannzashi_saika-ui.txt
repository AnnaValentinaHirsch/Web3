*GitHub Repository "hanakannzashi/saika-ui"*

'''--- README.md ---
### Frontend of Saika
https://github.com/hanakannzashi/saika.git

### start
`npm run start:testnet`
`npm run start:mainnet`
'''
'''--- package.json ---
{
  "name": "saika-webapp",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@chakra-ui/icons": "^2.0.1",
    "@chakra-ui/react": "^2.1.2",
    "@emotion/react": "^11.0.0",
    "@emotion/styled": "^11.0.0",
    "@testing-library/jest-dom": "^5.16.4",
    "@testing-library/react": "^13.0.1",
    "@testing-library/user-event": "^14.1.0",
    "@types/bn.js": "^5.1.0",
    "@types/jest": "^25.0.0",
    "@types/node": "^12.0.0",
    "@types/react": "^18.0.9",
    "@types/react-dom": "^18.0.4",
    "buffer": "^6.0.3",
    "copy-to-clipboard": "^3.3.1",
    "framer-motion": "^6.2.9",
    "js-base64": "^3.7.2",
    "near-api-js": "^0.44.2",
    "react": "^18.1.0",
    "react-dom": "^18.1.0",
    "react-icons": "^3.0.0",
    "react-router-dom": "6.0",
    "react-scripts": "5.0.1",
    "typescript": "^4.6.3",
    "web-vitals": "^0.2.2",
    "zustand": "^3.7.0"
  },
  "scripts": {
    "start:testnet": "REACT_APP_NETWORK_ID=testnet react-scripts start",
    "start:mainnet": "REACT_APP_NETWORK_ID=mainnet react-scripts start",
    "build:testnet": "REACT_APP_NETWORK_ID=testnet react-scripts build",
    "build:mainnet": "REACT_APP_NETWORK_ID=mainnet react-scripts build"
  },
  "eslintConfig": {
    "extends": "react-app"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

'''
'''--- public/index.html ---
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" href="/public/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta
      name="description"
      content="Create Red Packet & Share with your friends"
    />
    <link rel="apple-touch-icon" href="/public/logo192.png" />
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/public/manifest.json" />
    <!--
      Notice the use of %PUBLIC_URL% in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "%PUBLIC_URL%/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Saika Red Packet</title>
  </head>
  <body>
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
    <!--
      This HTML file is a template.
      If you open it directly in the browser, you will see an empty page.

      You can add webfonts, meta tags, or analytics to this file.
      The build step will place the bundled scripts into the <body> tag.

      To begin the development, run `npm start` or `yarn start`.
      To create a production bundle, use `npm run build` or `yarn build`.
    -->
  </body>
</html>

'''
'''--- public/manifest.json ---
{
  "short_name": "Saika Red Packet",
  "name": "Saika Red Packet",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}

'''
'''--- public/robots.txt ---
# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:

'''
'''--- src/assets/account-icon.svg ---
<svg height="20" viewBox="0 0 20 20" width="20" xmlns="http://www.w3.org/2000/svg"><g style="stroke:#999;fill:none;fill-rule:evenodd;stroke-linecap:round;stroke-linejoin:round;stroke-width:2" transform="translate(1 1)"><path d="m13.5 9c0-1.8200801-1.0963898-3.4609434-2.7779246-4.1574579-1.68153471-.6965145-3.61706493-.3115136-4.90405592.97547738-1.28699098 1.28699099-1.67199188 3.22252121-.97547738 4.90405592.6965145 1.6815348 2.3373778 2.7779246 4.1574579 2.7779246 2.4852814 0 4.5-2.0147186 4.5-4.5zm-4.5 4.5h-7.785c1.61008993 2.7756196 4.57619127 4.4840533 7.785 4.4840533 3.2088087 0 6.1749101-1.7084337 7.785-4.4840533z"/><path d="m0 9.00000013c.00000007-4.97056283 4.0294373-9 9-9s8.9999999 4.02943717 9 9"/></g></svg>
'''
'''--- src/assets/default-token-icon.svg ---
<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="12" cy="12" r="11" fill="#FAFAFA" stroke="#D5D4D8" stroke-width="2"/>
  <path
      d="M15.6317 6.60497L13.1233 10.3034C13.0876 10.3567 13.0725 10.421 13.0808 10.4845C13.0892 10.5479 13.1204 10.6063 13.1686 10.6487C13.2169 10.691 13.279 10.7146 13.3435 10.7151C13.4079 10.7155 13.4703 10.6928 13.5192 10.651L15.9883 8.52414C16.0028 8.51128 16.0207 8.50289 16.0399 8.49998C16.0591 8.49707 16.0788 8.49977 16.0964 8.50776C16.1141 8.51574 16.129 8.52867 16.1394 8.54495C16.1498 8.56123 16.1553 8.58017 16.155 8.59945V15.2582C16.155 15.2786 16.1487 15.2985 16.1369 15.3152C16.1251 15.3319 16.1084 15.3446 16.0891 15.3515C16.0698 15.3585 16.0489 15.3594 16.029 15.3541C16.0092 15.3488 15.9915 15.3376 15.9783 15.3219L8.515 6.44938C8.39495 6.3086 8.24548 6.19548 8.07696 6.11788C7.90844 6.04027 7.72492 6.00005 7.53917 6H7.27833C6.9393 6 6.61415 6.13375 6.37442 6.37183C6.13468 6.60991 6 6.93282 6 7.26952V16.6477C6 16.9844 6.13468 17.3073 6.37442 17.5454C6.61415 17.7835 6.9393 17.9172 7.27833 17.9172C7.49693 17.9173 7.71189 17.8617 7.90271 17.7558C8.09353 17.6499 8.25384 17.4972 8.36833 17.3123L10.8767 13.6138C10.9124 13.5605 10.9275 13.4962 10.9192 13.4328C10.9108 13.3693 10.8796 13.311 10.8314 13.2686C10.7831 13.2262 10.721 13.2026 10.6566 13.2022C10.5921 13.2017 10.5297 13.2245 10.4808 13.2662L8.01167 15.3931C7.9972 15.406 7.97927 15.4144 7.96008 15.4173C7.94088 15.4202 7.92125 15.4175 7.90358 15.4095C7.8859 15.4015 7.87095 15.3886 7.86055 15.3723C7.85015 15.356 7.84475 15.3371 7.845 15.3178V8.65738C7.84501 8.63699 7.85133 8.61711 7.86311 8.60041C7.8749 8.58372 7.89157 8.57103 7.91086 8.56407C7.93016 8.55711 7.95114 8.55622 7.97096 8.56151C7.99078 8.5668 8.00849 8.57803 8.02167 8.59366L15.4842 17.4679C15.6042 17.6086 15.7537 17.7218 15.9222 17.7994C16.0907 17.877 16.2742 17.9172 16.46 17.9172H16.7208C16.8888 17.9174 17.0551 17.8846 17.2103 17.8208C17.3655 17.7571 17.5065 17.6636 17.6253 17.5457C17.7441 17.4278 17.8383 17.2878 17.9026 17.1337C17.9669 16.9797 18 16.8145 18 16.6477V7.26952C18 6.93282 17.8653 6.60991 17.6256 6.37183C17.3859 6.13375 17.0607 6 16.7217 6C16.5031 5.99994 16.2881 6.05552 16.0973 6.16143C15.9065 6.26733 15.7462 6.42004 15.6317 6.60497Z"
      fill="#D5D4D8"/>
</svg>
'''
'''--- src/assets/near-icon.svg ---
<svg width="1.5em" viewBox="0 0 24 25" fill="none" xmlns="http://www.w3.org/2000/svg">
  <circle cx="12" cy="12.5" r="12" fill="#111618"/>
  <g clip-path="url(#clip0)">
    <path d="M15.6317 7.13414L13.1233 10.8326C13.0876 10.8859 13.0725 10.9502 13.0808 11.0137C13.0892 11.0771 13.1204 11.1354 13.1686 11.1778C13.2169 11.2202 13.279 11.2438 13.3435 11.2443C13.4079 11.2447 13.4703 11.2219 13.5192 11.1802L15.9883 9.05331C16.0028 9.04046 16.0207 9.03206 16.0399 9.02915C16.0591 9.02624 16.0788 9.02895 16.0964 9.03693C16.1141 9.04492 16.129 9.05784 16.1394 9.07412C16.1498 9.09041 16.1553 9.10934 16.155 9.12862V15.7874C16.155 15.8078 16.1487 15.8277 16.1369 15.8443C16.1251 15.861 16.1084 15.8737 16.0891 15.8807C16.0698 15.8876 16.0489 15.8885 16.029 15.8833C16.0092 15.878 15.9915 15.8667 15.9783 15.8511L8.515 6.97855C8.39495 6.83778 8.24548 6.72466 8.07696 6.64705C7.90844 6.56945 7.72492 6.52922 7.53917 6.52917H7.27833C6.9393 6.52917 6.61415 6.66293 6.37442 6.90101C6.13468 7.13909 6 7.462 6 7.79869V17.1769C6 17.5136 6.13468 17.8365 6.37442 18.0746C6.61415 18.3127 6.9393 18.4464 7.27833 18.4464C7.49693 18.4465 7.71189 18.3909 7.90271 18.285C8.09353 18.1791 8.25384 18.0264 8.36833 17.8415L10.8767 14.143C10.9124 14.0897 10.9275 14.0254 10.9192 13.9619C10.9108 13.8985 10.8796 13.8402 10.8314 13.7978C10.7831 13.7554 10.721 13.7318 10.6566 13.7313C10.5921 13.7309 10.5297 13.7536 10.4808 13.7954L8.01167 15.9223C7.9972 15.9351 7.97927 15.9435 7.96008 15.9464C7.94088 15.9493 7.92125 15.9466 7.90358 15.9387C7.8859 15.9307 7.87095 15.9178 7.86055 15.9015C7.85015 15.8852 7.84475 15.8662 7.845 15.847V9.18655C7.84501 9.16617 7.85133 9.14628 7.86311 9.12959C7.8749 9.11289 7.89157 9.10021 7.91086 9.09325C7.93016 9.08629 7.95114 9.08539 7.97096 9.09069C7.99078 9.09598 8.00849 9.1072 8.02167 9.12283L15.4842 17.997C15.6042 18.1378 15.7537 18.2509 15.9222 18.3285C16.0907 18.4061 16.2742 18.4464 16.46 18.4464H16.7208C16.8888 18.4465 17.0551 18.4138 17.2103 18.35C17.3655 18.2863 17.5065 18.1928 17.6253 18.0749C17.7441 17.957 17.8383 17.817 17.9026 17.6629C17.9669 17.5088 18 17.3437 18 17.1769V7.79869C18 7.462 17.8653 7.13909 17.6256 6.90101C17.3859 6.66293 17.0607 6.52917 16.7217 6.52917C16.5031 6.52912 16.2881 6.58469 16.0973 6.6906C15.9065 6.79651 15.7462 6.94921 15.6317 7.13414Z" fill="white"/>
  </g>
  <defs>
    <clipPath id="clip0">
      <rect width="12" height="12" fill="var(--bg, white)" transform="translate(6 6.48779)"/>
    </clipPath>
  </defs>
</svg>

'''
'''--- src/assets/near-logo.svg ---
<svg fill="none" height="37" viewBox="0 0 139 37" width="139" xmlns="http://www.w3.org/2000/svg"><g fill="#000"><path d="m69.5853 8.0602v21.3241c-.0011.0804-.0335.1573-.0903.2142-.0569.0569-.1337.0893-.2141.0904h-2.216c-.5086.0004-1.0092-.1269-1.4559-.3703s-.8253-.5951-1.101-1.0229l-10.0571-15.5564.3449 7.7701v8.8749c-.001.0804-.0334.1573-.0903.2142-.0568.0569-.1337.0893-.2141.0904h-2.9303c-.0804-.0011-.1572-.0335-.214-.0904-.0569-.0569-.0893-.1338-.0903-.2142v-21.3241c.001-.08047.0334-.15734.0903-.21425.0568-.0569.1336-.08933.214-.09038h2.2039c.508.00027 1.0079.12746 1.4544.37003s.8255.59285 1.1025 1.01908l10.0571 15.53202-.3125-7.7416v-8.8749c0-.0808.0321-.15828.0892-.21541.057-.05713.1345-.08922.2152-.08922h2.9303c.0768.00608.1486.04072.2011.0971.0526.05638.0822.13041.083.20753z"/><path d="m99.5335 29.6889h-3.1008c-.0484-.0005-.0961-.0125-.1389-.0351-.0429-.0226-.0798-.0551-.1075-.0948-.0278-.0398-.0457-.0856-.0523-.1336-.0065-.0481-.0015-.097.0146-.1427l8.2144-21.23469c.035-.08891.097-.16475.177-.21711.08-.05237.174-.07868.27-.07533h3.884c.092.00079.181.02904.257.08114.076.05209.135.12566.169.2113l8.19 21.23469c.016.0457.021.0946.015.1427-.007.048-.025.0938-.053.1336-.027.0397-.064.0722-.107.0948s-.091.0346-.139.0351h-3.101c-.062.0003-.123-.0182-.174-.053s-.091-.0842-.114-.142l-6.62-17.4654c-.021-.0588-.06-.1096-.111-.1455s-.112-.0552-.175-.0552c-.062 0-.123.0193-.174.0552-.052.0359-.09.0867-.112.1455l-6.6193 17.4654c-.0231.0584-.0635.1084-.1157.1432s-.1138.0529-.1765.0518z"/><path d="m138.837 29.1974-6.161-7.8757c3.478-.658 5.511-3.0056 5.511-6.6084 0-4.1389-2.691-6.95773-7.451-6.95773h-8.592c-.121 0-.236.04792-.322.13324-.085.08531-.133.20102-.133.32167 0 .38404.076.76432.223 1.11913s.362.67719.633.94879c.271.2715.594.4869.948.6339.355.147.735.2226 1.118.2226h5.768c2.877 0 4.257 1.4744 4.257 3.6028 0 2.1283-1.347 3.6555-4.257 3.6555h-8.235c-.121.0011-.237.0499-.322.1359-.085.0859-.133.2021-.133.3231v10.5605c0 .0808.032.1583.089.2154s.135.0892.216.0892h2.93c.08-.001.157-.0335.214-.0904s.089-.1337.09-.2142v-7.9001h3.381l5.345 6.9821c.287.3737.655.6759 1.078.8831.422.2071.887.3136 1.357.3111h2.224c.056-.0031.11-.0213.155-.0527.046-.0314.083-.0748.106-.1254.023-.0507.031-.1066.025-.1619-.007-.0552-.028-.1076-.062-.1515z"/><path d="m90.2677 7.75557h-13.5962c-.1076 0-.2108.04279-.287.11896-.0761.07617-.1188.17948-.1188.28721 0 .78961.3134 1.54689.8713 2.10526.5579.5583 1.3146.872 2.1036.872h11.0271c.0402.0005.08-.007.1172-.0221.0371-.0151.0709-.0375.0993-.0659s.0508-.0622.0659-.0994.0226-.0771.022-.1172v-2.7742c0-.0808-.0321-.15828-.0891-.21541-.0571-.05713-.1345-.08922-.2153-.08922zm0 18.54993h-10.1464c-.0804-.0011-.1572-.0335-.2141-.0904-.0568-.0569-.0892-.1338-.0903-.2143v-5.4995c0-.0808.0321-.1583.0892-.2154.0571-.0572.1345-.0893.2152-.0893h9.3794c.0807 0 .1581-.0321.2152-.0892s.0892-.1346.0892-.2154v-2.7945c0-.0808-.0321-.1582-.0892-.2154-.0571-.0571-.1345-.0892-.2152-.0892h-12.7805c-.1209.0011-.2365.0499-.3216.1359-.0852.0859-.1329.2021-.1329.3231v11.9658c0 .1207.0479.2364.1331.3217.0853.0853.2009.1332.3214.1332h13.5475c.0808 0 .1582-.0321.2153-.0892.057-.0571.0891-.1346.0891-.2154v-2.7741c-.0031-.0783-.0367-.1523-.0936-.2062-.0569-.0538-.1325-.0834-.2108-.0822z"/><path d="m29.4176 2.30067-7.6383 11.34443c-.1237.1637-.181.3683-.1601.5725.0208.2043.1181.3931.2724.5284.1543.1354.354.2072.5591.2012.205-.0061.4002-.0897.5462-.2339l7.5165-6.49876c.0433-.03977.0974-.06594.1554-.07525.0581-.00932.1176-.00138.1712.02284s.0989.06365.1303.1134.0475.10763.0463.16646v20.42641c-.0006.062-.0201.1224-.0559.173s-.0862.0891-.1444.1103-.1216.0241-.1815.0083-.1136-.0495-.1539-.0966l-22.728-27.21359c-.36283-.43689-.81677-.78906-1.32997-1.031829-.51321-.242769-1.07326-.370257-1.6409-.373525h-.79142c-1.03227 0-2.02226.410385-2.75219 1.140874-.729919.73049-1.1399856 1.72125-1.1399856 2.75432v28.76515c0 1.0331.4100666 2.0238 1.1399856 2.7543.72993.7305 1.71992 1.1409 2.75219 1.1409.66512-.0001 1.31913-.1707 1.89961-.4957.58048-.3249 1.06807-.7934 1.41624-1.3605l7.63824-11.3444c.1238-.1638.181-.3683.1602-.5726-.0209-.2042-.1182-.393-.2725-.5284-.1542-.1353-.354-.2072-.559-.2011-.2051.0061-.4003.0896-.5463.2339l-7.51645 6.4987c-.04334.0398-.09739.066-.15545.0753-.05805.0093-.11757.0013-.17115-.0229-.05359-.0242-.0989-.0636-.1303-.1134-.03141-.0497-.04753-.1076-.04637-.1664v-20.40616c.00061-.06201.02013-.12237.05593-.17299s.08619-.0891.14443-.11029c.05824-.0212.12155-.0241.18148-.00831.05993.01578.11362.04949.15389.09663l22.72799 27.21352c.3656.433.8212.7809 1.3351 1.0194.5138.2385 1.0734.3619 1.6399.3616h.8117c.5111 0 1.0172-.1007 1.4894-.2965.4723-.1957.9013-.4826 1.2628-.8443.3614-.3617.6481-.7911.8437-1.2637s.2962-.9791.2962-1.4907v-28.76105c.0001-.51358-.1014-1.02209-.2985-1.49628-.1972-.47418-.486-.90467-.85-1.26669s-.796-.64843-1.271-.842743c-.4751-.194313-.9838-.292694-1.497-.289481-.6651.00008-1.3191.170739-1.8996.495692-.5805.324952-1.0681.793362-1.4162 1.360522z"/></g></svg>
'''
'''--- src/config/common-config.ts ---
import {parseYoctoAmount} from "../utils/amount-utils";

export const NETWORK_ID: string = process.env.REACT_APP_NETWORK_ID!
console.log(`current network: '${NETWORK_ID}'`)

export const MAX_RED_PACKET_NUM = 100
export const BASE_RED_PACKET_CONTRACT_STORAGE_DEPOSIT = parseYoctoAmount('0.2')

export const RED_PACKET_PK_PREFIX = 'red-packet-pk:'
export const RED_PACKET_CONTRACT_REGISTERED_FLAG_PREFIX = 'red-packet-contract-registered:'
export const TOKEN_REGISTERED_FLAG_PREFIX = 'token-registered:'

'''
'''--- src/config/contract-config.ts ---
import {NETWORK_ID} from "./common-config";

export const redPacketContractConfig = getRedPacketContractConfig()

function getRedPacketContractConfig() {
  const methods = {
    viewMethods: [
      'storage_balance_of',
      'get_pks_by_owner_id',
      'get_red_packets_by_owner_id',
      'get_red_packet_by_pk'
    ],
    changeMethods: [
      'create_near_red_packet',
      'claim_red_packet',
      'refund',
      'remove_history',
      'clear_history',
      'storage_deposit',
      'storage_withdraw',
      'storage_unregister'
    ]
  }

  switch (NETWORK_ID) {
    case 'mainnet':
      return {
        contractId: 'saikaredpacket.near',
        methods
      }

    case 'testnet':
      return {
        contractId: 'saikaredpacket.testnet',
        methods
      }

    default: throw new Error(`network id '${NETWORK_ID}' is invalid`)
  }
}

'''
'''--- src/config/near-config.ts ---
import {NETWORK_ID} from "./common-config";

export const nearConfig = getNearConfig()

function getNearConfig() {
  switch (NETWORK_ID) {
    case 'mainnet':
      return {
        headers: {},
        networkId: 'mainnet',
        nodeUrl: 'https://rpc.mainnet.near.org',
        walletUrl: 'https://wallet.mainnet.near.org',
        helperUrl: 'https://helper.mainnet.near.org'
      };

    case 'testnet':
      return {
        headers: {},
        networkId: 'testnet',
        nodeUrl: 'https://rpc.testnet.near.org',
        walletUrl: 'https://wallet.testnet.near.org',
        helperUrl: 'https://helper.testnet.near.org',
      };

    default: throw new Error(`network id '${NETWORK_ID}' is invalid`);
  }
}

'''
'''--- src/config/token-config.ts ---
import {NETWORK_ID} from "./common-config";
import defaultTokenIcon from "../assets/default-token-icon.svg"
import nearIcon from "../assets/near-icon.svg"
import wnearIcon from "../assets/wnear-icon.png";
import wethIcon from "../assets/weth-icon.png";

export const DEFAULT_TOKEN_ICON = defaultTokenIcon
export const DEFAULT_MAX_VIEW_FRAC_DIGITS = 4

export const nearMetaData = {
  id: 'NEAR',
  name: 'NEAR Protocol',
  symbol: 'NEAR',
  icon: nearIcon,
  decimals: 24
}

export const tokenIdList = getTokenIdList()
export const maxViewFracDigitsMapping = getMaxViewFracDigitsMapping()
export const customTokenIconMapping = getCustomTokenIconMapping()

function getTokenIdList() {
  switch (NETWORK_ID) {
    case 'mainnet':
      return [
        'NEAR',
        'wrap.near',
        'f5cfbc74057c610c8ef151a439252680ac68c6dc.factory.bridge.near',
        'aaaaaa20d9e0e2461697782ef11675f668207961.factory.bridge.near',
        'token.v2.ref-finance.near',
        'token.paras.near',
        'token.skyward.near',
        'meta-pool.near',
        'linear-protocol.near',
        'aurora',
        'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.factory.bridge.near',
        '2260fac5e5542a773aa44fbcfedf7c193bc2c599.factory.bridge.near',
        'dac17f958d2ee523a2206206994597c13d831ec7.factory.bridge.near',
        'a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48.factory.bridge.near',
        '6b175474e89094c44da98b954eedeac495271d0f.factory.bridge.near'
      ]

    case 'testnet':
      return [
        'NEAR',
        'wrap.testnet',
        'oct.fakes.testnet',
        'aurora.fakes.testnet',
        'ref.fakes.testnet',
        'paras.fakes.testnet',
        'skyward.fakes.testnet',
        'stnear.fakes.testnet',
        'linear-protocol.testnet',
        'aurora',
        'weth.fakes.testnet',
        'wbtc.fakes.testnet',
        'usdt.fakes.testnet',
        'usdc.fakes.testnet',
        'dai.fakes.testnet'
      ]

    default: throw new Error(`network id '${NETWORK_ID}' is invalid` );
  }
}

function getMaxViewFracDigitsMapping() {
  switch (NETWORK_ID) {
    case 'mainnet':
      return {

      }

    case 'testnet':
      return {

      }

    default:
      throw new Error(`network id '${NETWORK_ID}' is invalid`);
  }
}

function getCustomTokenIconMapping() {
  switch (NETWORK_ID) {
    case 'mainnet':
      return {
        'wrap.near': wnearIcon,
        'c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2.factory.bridge.near': wethIcon
      }

    case 'testnet':
      return {
        'wrap.testnet': wnearIcon,
        'weth.fakes.testnet': wethIcon
      }

    default:
      throw new Error(`network id '${NETWORK_ID}' is invalid`);
  }
}

'''
'''--- src/config/wallet-config.ts ---
import {NETWORK_ID} from "./common-config";

export const walletConfig = getWalletConfig()

function getWalletConfig() {
  switch (NETWORK_ID) {
    case 'mainnet':
      return {
        appKeyPrefix: 'saika-mainnet',
        signInOptions: {
          contractId: 'saikaredpacket.near',
          methodNames: [],
          successUrl: "",
          failureUrl: ""
        }
      }

    case 'testnet':
      return {
        appKeyPrefix: 'saika-testnet',
        signInOptions: {
          contractId: 'saikaredpacket.testnet',
          methodNames: [],
          successUrl: "",
          failureUrl: ""
        }
      }

    default: throw new Error(`network id '${NETWORK_ID}' is invalid`);
  }
}
'''
'''--- src/hooks/useRedPacketView.ts ---
import {useNearServiceStore} from "../stores/global-stores";
import {useCallback, useEffect, useState} from "react";
import {RedPacketView} from "../near/red-packet-contract";

export const useRedPacketView = (publicKey?: string) => {
  const {nearService} = useNearServiceStore()
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [isErr, setIsErr] = useState<boolean>(false)
  const [view, setView] = useState<RedPacketView | null>(null)
  const [refreshCount, setReflushCount] = useState<number>(0)

  const onRefresh = useCallback(() => {
    setIsLoading(true)
    setIsErr(false)
    setView(null)
    setReflushCount((oldRefreshCount) => {
      return oldRefreshCount + 1
    })
  }, [])

  useEffect(() => {
    if (!nearService || !publicKey) {
      return
    }
    nearService.redPacketContract.get_red_packet_by_pk({
      public_key: publicKey
    })
      .then((views) => {
        setView(views)
        setIsLoading(false)
      })
      .catch((err) => {
        setIsErr(true)
        console.error('fetch red packet view error: ' + err)
      })
  }, [nearService, publicKey, refreshCount])

  return {isLoading, isErr, view, refreshCount, onRefresh}
}
'''
'''--- src/hooks/useRedPacketViews.ts ---
import {useNearServiceStore} from "../stores/global-stores";
import {useCallback, useEffect, useState} from "react";
import {RedPacketView} from "../near/red-packet-contract";

export const useRedPacketViews = (ownerId?: string) => {
  const {nearService} = useNearServiceStore()
  const [isLoading, setIsLoading] = useState<boolean>(true)
  const [isErr, setIsErr] = useState<boolean>(false)
  const [views, setViews] = useState<RedPacketView[]>([])
  const [refreshCount, setRefreshCount] = useState<number>(0)

  const onRefresh = useCallback(() => {
    setIsLoading(true)
    setIsErr(false)
    setViews([])
    setRefreshCount((oldRefreshCount) => {
      return oldRefreshCount + 1
    })
  }, [])

  useEffect(() => {
    if (!nearService) {
      return
    }
    if (!ownerId) {
      return
    }
    nearService.redPacketContract.get_red_packets_by_owner_id({
      owner_id: ownerId
    })
      .then((views) => {
        setViews(views)
        setIsLoading(false)
      })
      .catch((err) => {
        setIsErr(true)
        console.error('fetch red packet views error: ' + err)
      })
  }, [nearService, ownerId, refreshCount])

  return {isLoading, isErr, views, refreshCount, onRefresh}
}
'''
'''--- src/hooks/useTokenMetadataList.ts ---
import {useEffect, useState} from "react";
import {TokenMetadata} from "../types/near-types";
import {FungibleTokenUtils} from "../utils/fungible-token-utils";
import {useNearServiceStore} from "../stores/global-stores";
import {nearMetaData} from "../config/token-config";
import {FungibleTokenMetadata} from "../near/fungible-token-contract";

export const useTokenMetadataList = (tokenIdList: string[]) => {
  const {nearService} = useNearServiceStore()
  const [tokenMetadataList, setTokenMetadataList] = useState<TokenMetadata[]>([])

  useEffect(() => {
    if (!nearService) {
      return
    }
    const promises = tokenIdList.map((tokenId) => {
      if (tokenId === 'NEAR') {
        return new Promise<TokenMetadata>((resolve) => {
          resolve(nearMetaData)
        })
      }
      return FungibleTokenUtils.ftMetadata(
        nearService.wallet.account(),
        tokenId,
        {}
      )
    })
    Promise.all<TokenMetadata | FungibleTokenMetadata>(promises)
      .then((results) => {
        const tokenMetadataList: TokenMetadata[] = results.map((result, index) => {
          return {
            ...result,
            id: tokenIdList[index]
          }
        })
        setTokenMetadataList(tokenMetadataList)
      })
  }, [nearService, tokenIdList])

  return {tokenMetadataList}
}
'''
'''--- src/logo.svg ---
<svg width="582" height="582" viewBox="0 0 582 582" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="582" height="582" rx="291" fill="url(#paint0_linear)"/>
<path d="M157.521 303.421L355.881 106.426C359.587 102.746 365.55 107.225 363.049 111.809L289.22 247.123C287.573 250.141 289.758 253.821 293.196 253.821H420.782C424.892 253.821 426.877 258.857 423.872 261.661L200.293 470.326C196.284 474.067 190.317 468.796 193.536 464.356L299.373 318.351C301.543 315.357 299.404 311.164 295.706 311.164H160.713C156.67 311.164 154.653 306.27 157.521 303.421Z" fill="white"/>
<defs>
<linearGradient id="paint0_linear" x1="291" y1="0" x2="291" y2="582" gradientUnits="userSpaceOnUse">
<stop stop-color="#7BCBD4"/>
<stop offset="1" stop-color="#29C6B7"/>
</linearGradient>
</defs>
</svg>

'''
'''--- src/near/fungible-token-contract.ts ---
import {Contract} from "near-api-js";
import {
  Amount,
  ContractCallOptions
} from "../types/near-types";
import {
  StorageBalanceBoundsArgs,
  StorageBalanceOfArgs,
  StorageDepositArgs,
  StorageUnregisterArgs,
  StorageWithdrawArgs,
  StorageBalance,
  StorageBalanceBounds
} from "../types/storage-management";

// just mark, no specific implementation
export class FungibleTokenContract extends Contract {
  // // ------------------------------------------ view methods ------------------------------------------

  // @ts-ignore
  async ft_balance_of(_args: FtBalanceOfArgs): Promise<string> {}
  // @ts-ignore
  async ft_total_supply(_args: FtTotalSupplyArgs): Promise<string> {}
  // @ts-ignore
  async ft_metadata(_args: FtMetaDataArgs): Promise<FungibleTokenMetadata> {}
  // @ts-ignore
  async storage_balance_of(_args: StorageBalanceOfArgs): Promise<StorageBalance | null> {}
  // @ts-ignore
  async storage_balance_bounds(_args: StorageBalanceBoundsArgs): Promise<StorageBalanceBounds> {}

  // // ------------------------------------------ change methods -----------------------------------------

  // @ts-ignore
  async ft_transfer(_options: ContractCallOptions<FtTransferArgs>): Promise<void> {}
  // @ts-ignore
  async ft_transfer_call(_options: ContractCallOptions<FtTransferCallArgs>): Promise<string> {}
  // @ts-ignore
  async storage_deposit(_options: ContractCallOptions<StorageDepositArgs>): Promise<StorageBalance> {}
  // @ts-ignore
  async storage_withdraw(_options: ContractCallOptions<StorageWithdrawArgs>): Promise<StorageBalance> {}
  // @ts-ignore
  async storage_unregister(_options: ContractCallOptions<StorageUnregisterArgs>): Promise<boolean> {}
}

export interface FtBalanceOfArgs {
  account_id: string
}

export interface FtTotalSupplyArgs {}

export interface FtMetaDataArgs {}

export interface FtTransferArgs {
  receiver_id: string,
  amount: Amount,
  memo?: string
}

export interface FtTransferCallArgs extends FtTransferArgs {
  msg: string
}

export interface FungibleTokenMetadata {
  spec: string,
  name: string,
  symbol: string,
  icon?: string,
  decimals: number,
  reference: string | null,
  reference_hash: string| null
}
'''
'''--- src/near/multi-action-wallet.ts ---
import {ConnectedWalletAccount, WalletConnection} from 'near-api-js';
import { Action} from 'near-api-js/lib/transaction';
import {FinalExecutionOutcome} from "near-api-js/lib/providers";

export class MultiActionWalletConnection extends WalletConnection {
  account(): ConnectedMultiActionWalletAccount {
    if (!this._connectedAccount) {
      this._connectedAccount = new ConnectedMultiActionWalletAccount(this, this._near.connection, this._authData.accountId);
    }
    return this._connectedAccount as ConnectedMultiActionWalletAccount;
  }
}

class ConnectedMultiActionWalletAccount extends ConnectedWalletAccount {
  async signAndSendTransactionWithMultiAction(receiverId: string, actions: Action[]): Promise<FinalExecutionOutcome> {
    return this.signAndSendTransaction(receiverId, actions);
  }
}

'''
'''--- src/near/near-service.ts ---
import {Near, keyStores} from "near-api-js";
import {MultiActionWalletConnection} from "./multi-action-wallet";
import {RedPacketContract} from "./red-packet-contract";
import {nearConfig} from "../config/near-config";
import {redPacketContractConfig} from "../config/contract-config";
import {walletConfig} from "../config/wallet-config";

export interface NearService {
  keyStore: keyStores.BrowserLocalStorageKeyStore,
  near: Near,
  wallet: MultiActionWalletConnection,
  redPacketContract: RedPacketContract
}

export function initNearService(): NearService {
  const keyStore = new keyStores.BrowserLocalStorageKeyStore();
  const near = new Near({...nearConfig, keyStore});
  const wallet = new MultiActionWalletConnection(near, walletConfig.appKeyPrefix);
  const redPacketContract  = new RedPacketContract(
    wallet.account(),
    redPacketContractConfig.contractId,
    redPacketContractConfig.methods
  );
  return {keyStore ,near, wallet, redPacketContract};
}

'''
'''--- src/near/red-packet-contract.ts ---
import {Contract} from "near-api-js";
import {ContractCallOptions} from "../types/near-types";
import {
  StorageBalanceOfArgs,
  StorageDepositArgs,
  StorageUnregisterArgs,
  StorageWithdrawArgs,
  StorageBalance
} from "../types/storage-management";

// just mark, no specific implementation
export class RedPacketContract extends Contract {
  // // ------------------------------------------ view methods ------------------------------------------

  // @ts-ignore
  async storage_balance_of(_args: StorageBalanceOfArgs): Promise<StorageBalance | null> {}
  // @ts-ignore
  async get_pks_by_owner_id(_args: GetPksByOwnerIdArgs): Promise<string[]> {}
  // @ts-ignore
  async get_red_packets_by_owner_id(_args: GetRedPacketsByOwnerIdArgs): Promise<RedPacketView[]> {}
  // @ts-ignore
  async get_red_packet_by_pk(_args: GetRedPacketByPkArgs): Promise<RedPacketView | null> {}

  // // ------------------------------------------ change methods -----------------------------------------

  // @ts-ignore
  async create_near_red_packet(_options: ContractCallOptions<CreateNearRedPacketArgs>): Promise<void> {}
  // @ts-ignore
  async claim_red_packet(_options: ContractCallOptions<ClaimRedPacketArgs>): Promise<string>{}
  // @ts-ignore
  async refund(_options: ContractCallOptions<RefundArgs>): Promise<string> {}
  // @ts-ignore
  async remove_history(_options: ContractCallOptions<RemoveHistoryArgs>): Promise<void> {}
  // @ts-ignore
  async clear_history(_options: ContractCallOptions<ClearHistoryArgs>): Promise<void> {}
  // @ts-ignore
  async storage_deposit(_options: ContractCallOptions<StorageDepositArgs>): Promise<StorageBalance> {}
  // @ts-ignore
  async storage_withdraw(_options: ContractCallOptions<StorageWithdrawArgs>): Promise<StorageBalance> {}
  // @ts-ignore
  async storage_unregister(_options: ContractCallOptions<StorageUnregisterArgs>): Promise<boolean> {}
}

export interface GetPksByOwnerIdArgs {
  account_id: string
}

export interface GetRedPacketsByOwnerIdArgs {
  owner_id: string
}

export interface GetRedPacketByPkArgs {
  public_key: string
}

export interface CreateNearRedPacketArgs {
  public_key: string,
  split: number,
  split_mod: string,
  msg?: string,
  white_list?: string[],
}

export interface ClaimRedPacketArgs {
  claimer_id: string
}

export interface RefundArgs {
  public_key: string
}

export interface RemoveHistoryArgs {
  public_key: string
}

export interface ClearHistoryArgs {}

export interface RedPacketView {
  public_key: string,
  token: string,
  token_id: string | null,
  owner_id: string,
  init_balance: string,
  current_balance: string,
  refunded_balance: string,
  init_split: number,
  current_split: number,
  split_mod: string,
  msg: string | null,
  white_list: string[] | null,
  claimers: Record<string, string>[],
  failed_claimers: Record<string, string>[],
  create_timestamp: string,
  run_out_timestamp: string | null,
  is_run_out: boolean
}
'''
'''--- src/react-app-env.d.ts ---
/// <reference types="react-scripts" />

'''
'''--- src/reportWebVitals.ts ---
import { ReportHandler } from "web-vitals"

const reportWebVitals = (onPerfEntry?: ReportHandler) => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import("web-vitals").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry)
      getFID(onPerfEntry)
      getFCP(onPerfEntry)
      getLCP(onPerfEntry)
      getTTFB(onPerfEntry)
    })
  }
}

export default reportWebVitals

'''
'''--- src/serviceWorker.ts ---
// This optional code is used to register a service worker.
// register() is not called by default.

// This lets the app load faster on subsequent visits in production, and gives
// it offline capabilities. However, it also means that developers (and users)
// will only see deployed updates on subsequent visits to a page, after all the
// existing tabs open on the page have been closed, since previously cached
// resources are updated in the background.

// To learn more about the benefits of this model and instructions on how to
// opt-in, read https://cra.link/PWA

const isLocalhost = Boolean(
  window.location.hostname === "localhost" ||
    // [::1] is the IPv6 localhost address.
    window.location.hostname === "[::1]" ||
    // 127.0.0.0/8 are considered localhost for IPv4.
    window.location.hostname.match(
      /^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,
    ),
)

type Config = {
  onSuccess?: (registration: ServiceWorkerRegistration) => void
  onUpdate?: (registration: ServiceWorkerRegistration) => void
}

export function register(config?: Config) {
  if (process.env.NODE_ENV === "production" && "serviceWorker" in navigator) {
    // The URL constructor is available in all browsers that support SW.
    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)
    if (publicUrl.origin !== window.location.origin) {
      // Our service worker won't work if PUBLIC_URL is on a different origin
      // from what our page is served on. This might happen if a CDN is used to
      // serve assets; see https://github.com/facebook/create-react-app/issues/2374
      return
    }

    window.addEventListener("load", () => {
      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`

      if (isLocalhost) {
        // This is running on localhost. Let's check if a service worker still exists or not.
        checkValidServiceWorker(swUrl, config)

        // Add some additional logging to localhost, pointing developers to the
        // service worker/PWA documentation.
        navigator.serviceWorker.ready.then(() => {
          console.log(
            "This web app is being served cache-first by a service " +
              "worker. To learn more, visit https://cra.link/PWA",
          )
        })
      } else {
        // Is not localhost. Just register service worker
        registerValidSW(swUrl, config)
      }
    })
  }
}

function registerValidSW(swUrl: string, config?: Config) {
  navigator.serviceWorker
    .register(swUrl)
    .then((registration) => {
      registration.onupdatefound = () => {
        const installingWorker = registration.installing
        if (installingWorker == null) {
          return
        }
        installingWorker.onstatechange = () => {
          if (installingWorker.state === "installed") {
            if (navigator.serviceWorker.controller) {
              // At this point, the updated precached content has been fetched,
              // but the previous service worker will still serve the older
              // content until all client tabs are closed.
              console.log(
                "New content is available and will be used when all " +
                  "tabs for this page are closed. See https://cra.link/PWA.",
              )

              // Execute callback
              if (config && config.onUpdate) {
                config.onUpdate(registration)
              }
            } else {
              // At this point, everything has been precached.
              // It is the perfect time to display a
              // "Content is cached for offline use." message.
              console.log("Content is cached for offline use.")

              // Execute callback
              if (config && config.onSuccess) {
                config.onSuccess(registration)
              }
            }
          }
        }
      }
    })
    .catch((error) => {
      console.error("Error during service worker registration:", error)
    })
}

function checkValidServiceWorker(swUrl: string, config?: Config) {
  // Check if the service worker can be found. If it can't reload the page.
  fetch(swUrl, {
    headers: { "Service-Worker": "script" },
  })
    .then((response) => {
      // Ensure service worker exists, and that we really are getting a JS file.
      const contentType = response.headers.get("content-type")
      if (
        response.status === 404 ||
        (contentType != null && contentType.indexOf("javascript") === -1)
      ) {
        // No service worker found. Probably a different app. Reload the page.
        navigator.serviceWorker.ready.then((registration) => {
          registration.unregister().then(() => {
            window.location.reload()
          })
        })
      } else {
        // Service worker found. Proceed as normal.
        registerValidSW(swUrl, config)
      }
    })
    .catch(() => {
      console.log(
        "No internet connection found. App is running in offline mode.",
      )
    })
}

export function unregister() {
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.ready
      .then((registration) => {
        registration.unregister()
      })
      .catch((error) => {
        console.error(error.message)
      })
  }
}

'''
'''--- src/setupTests.ts ---
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import "@testing-library/jest-dom"

'''
'''--- src/stores/global-stores.ts ---
import create, {SetState} from "zustand";
import {NearService} from "../near/near-service";

interface NearServiceStore {
  nearService: NearService | null,
  setNearService: (nearService: NearService) => void
}

export const useNearServiceStore = create((set: SetState<NearServiceStore>): NearServiceStore => {
  return {
    nearService: null,
    setNearService: (nearService): void => {
      set({nearService})
    }
  }
})

interface WalletSignedInStore {
  isSignedIn: boolean
  setWalletSignedIn: (isSigned: boolean) => void
}

export const useWalletSignedInStore = create((set: SetState<WalletSignedInStore>): WalletSignedInStore => {
  return {
    isSignedIn: false,
    setWalletSignedIn: (isSignedIn: boolean) => {
      set({isSignedIn})
    }
  }
})

'''
'''--- src/types/near-types.ts ---
import BN from "bn.js";

export type YoctoAmount = BN    // amount used for yocto NEAR
export type Amount = string     // amount used for function call args

export type Gas = BN

export interface ContractCallOptions<Args> {
    args: Args,
    amount?: YoctoAmount,
    gas?: Gas
}

export interface TokenMetadata {
  id: string,
  name: string,
  symbol: string,
  icon?: string,
  decimals: number,
}

export type RedPacketType = 'Average' | 'Random'
'''
'''--- src/types/storage-management.ts ---
import {Amount} from "./near-types";

export interface StorageDepositArgs {
  account_id?: string,
  registration_only?: boolean
}

export interface StorageWithdrawArgs {
  amount?: Amount
}

export interface StorageUnregisterArgs {
  force?: boolean
}

export interface StorageBalanceBoundsArgs {}

export interface StorageBalanceOfArgs {
  account_id: string
}

export interface StorageBalance {
  total: string,
  available: string
}

export interface StorageBalanceBounds {
  min: string,
  max: string | null
}
'''
'''--- src/utils/amount-utils.ts ---
import BN from "bn.js";
import {trimLeadingZeros, trimZeros} from "./common-utils";
import {Amount, YoctoAmount} from "../types/near-types";

export const NO_DEPOSIT: YoctoAmount = new BN('0')
export const ONE_YOCTO: YoctoAmount = new BN('1')
export const ONE_NEAR: YoctoAmount = parseYoctoAmount('1')

export function formatYoctoAmount(amount: YoctoAmount, maxFracDigits: number = 24): string {
  return formatAmount(amount.toString(), 24, maxFracDigits)
}

export function parseYoctoAmount(readable: string): YoctoAmount {
  return new BN(parseAmount(readable, 24))
}

export function formatAmount(amount: Amount, decimals: number, maxFracDigits: number = decimals): string {
  if (amount.length <= decimals) {
    amount = '0'.repeat(decimals + 1 - amount.length) + amount
  }
  const readable = amount.substring(0, amount.length - decimals) + '.' +
    amount.substring(amount.length - decimals, amount.length - decimals + maxFracDigits)
  return trimZeros(readable)
}

export function parseAmount(readable: string, decimals: number): Amount {
  if (readable.indexOf('.') === -1) {
    readable = readable + '.'
  }
  if (readable.length - 1 - readable.indexOf('.') < decimals) {
    readable = readable + '0'.repeat(decimals - (readable.length - 1 - readable.indexOf('.')))
  }
  const amount = readable.substring(0, readable.indexOf('.')) +
    readable.substring(readable.indexOf('.') + 1, readable.indexOf('.') + 1 + decimals)
  return trimLeadingZeros(amount)
}

'''
'''--- src/utils/common-utils.ts ---
export function trimLeadingZeros(num: string): string {
  num = num.replace(/^0+/, '');
  return num.startsWith('.') || num === "" ? '0' + num : num
}

export function trimTrailingZeros(num: string): string {
  return num.replace(/\.?0*$/, '')
}

export function trimZeros(num: string): string {
  return trimTrailingZeros(trimLeadingZeros(num))
}

// beautify a number, e.g. from 10000000 to 10,000,000
export function beautify(num: string): string {
  const reg = num.indexOf('.') !== -1 ? /(\d)(?=(\d{3})+\.)/g : /(\d)(?=(?:\d{3})+$)/g;
  return trimZeros(num).replace(reg, '$1,');
}

export function round(num: string, fracDigits: number): string {
  if (num.indexOf('.') === -1) {
    num = num + '.'
  }
  if (fracDigits === 0) {
    return num.substring(0, num.indexOf('.'))
  }
  if(num.length - 1 - num.indexOf('.') < fracDigits) {
    num = num + '0'.repeat(fracDigits - (num.length - 1 - num.indexOf('.')))
  }
  return num.substring(0, num.indexOf('.') + 1 + fracDigits)
}

// int number
export function isIntNum(str: string): boolean {
  return (/^[+-]?\d+$/).test(str)
}

// int number > 0
export function isPosIntNum(str: string): boolean {
  return (/^\+?\d+$/).test(str) && !(/^[+-]?0+$/).test(str)
}

// int number < 0
export function  isNegIntNum(str: string): boolean {
  return (/^-\d+$/).test(str) && !(/^[+-]?0+$/).test(str)
}

// int number = 0
export function isZeroIntNum(str: string): boolean {
  return (/^[+-]?0+$/).test(str)
}

// int number >= 0
export function isPosOrZeroIntNum(str: string): boolean {
  return (/^\+?\d+$/).test(str) || (/^[+-]?0+$/).test(str)
}

// int number <= 0
export function isNegOrZeroIntNum(str: string): boolean {
  return (/^-\d+$/).test(str) || (/^[+-]?0+$/).test(str)
}

// number
export function isNum(str: string): boolean {
  return (/^[+-]?\d+(\.\d+)?$/).test(str)
}

// number > 0
export function isPosNum(str: string): boolean {
  return (/^\+?\d+(\.\d+)?$/).test(str) && !(/^[+-]?0+(\.0+)?$/).test(str)
}

// number < 0
export function isNegNum(str: string): boolean {
  return (/^-\d+(\.\d+)?$/).test(str) && !(/^[+-]?0+(\.0+)?$/).test(str)
}

// number = 0, including unstandard number starting or ending with dot, e.g. '0.' or '.0'
export function isZeroNumUnstandard(str: string): boolean {
  return (/^[+-]?0*(\.0*)?$/).test(str) && !(/^[+-]?\.?$/).test(str)
}

// number = 0
export function isZeroNum(str: string): boolean {
  return (/^[+-]?0+(\.0+)?$/).test(str)
}

// number >= 0
export function isPosOrZeroNum(str: string): boolean {
  return (/^\+?\d+(\.\d+)?$/).test(str) || (/^[+-]?0+(\.0+)?$/).test(str)
}

// number <= 0
export function isNegOrZeroNum(str: string): boolean {
  return (/^-\d+(\.\d+)?$/).test(str) || (/^[+-]?0+(\.0+)?$/).test(str)
}

// for any input, return int number >= 0
// this function is always used for html input label formatting
export function parsePosOrZeroIntNum(str: string): string {
  const num = str.replace(/^0+|[^\d]/g,'')
  return num === "" ? '0' : num
}

// for any input, return number >= 0
// this function is always used for html input label formatting
// note: return number may be unstandard, end with dot, e.g. '123.'
// note: return number doesn't trim trailing zeros, e.g. '123.0'
export function parsePosOrZeroNumUnstandard(str: string): string {
  let num = str.replace(/^0+|[^\d.]/g, '')
  if(num.startsWith('.')) {
    num = '0' + num
  }
  num = num.substring(0, num.indexOf('.') + 1) +
    num.substring(num.indexOf('.') + 1).replace('.', "")
  return num === "" ? '0' : num
}

// for any input, return number >= 0
// this function is always used for html input label formatting
export function parsePosOrZeroNum(str: string): string {
  return trimTrailingZeros(parsePosOrZeroNumUnstandard(str))
}
'''
'''--- src/utils/custom-utils.ts ---
import BN from "bn.js";

export function tGas(t: number) {
  const ONE_T_GAS = new BN('1000000000000')
  return ONE_T_GAS.muln(t)
}
'''
'''--- src/utils/fungible-token-utils.ts ---
import {ContractMethods} from "near-api-js/lib/contract";
import {ContractCallOptions} from "../types/near-types";
import {
  FtBalanceOfArgs, FtMetaDataArgs,
  FtTotalSupplyArgs, FtTransferArgs,
  FtTransferCallArgs,
  FungibleTokenContract, FungibleTokenMetadata
} from "../near/fungible-token-contract";
import {Account} from "near-api-js";
import {
  StorageBalance, StorageBalanceBounds,
  StorageBalanceBoundsArgs, StorageBalanceOfArgs,
  StorageDepositArgs,
  StorageUnregisterArgs,
  StorageWithdrawArgs
} from "../types/storage-management";

export class FungibleTokenUtils {

  static fungibleTokenContractMethods: ContractMethods = {
    viewMethods: [
      'ft_balance_of',
      'ft_total_supply',
      'ft_metadata',
      'storage_balance_of'
    ],
    changeMethods: [
      'ft_transfer',
      'ft_transfer_call',
      'storage_deposit',
      'storage_withdraw',
      'storage_unregister'
    ]
  }

  static ftBalanceOf(
    account: Account,
    tokenId: string,
    args: FtBalanceOfArgs
  ): Promise<string> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).ft_balance_of(args)
  }

  static ftTotalSupply(
    account: Account,
    tokenId: string,
    args: FtTotalSupplyArgs
  ): Promise<string> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).ft_total_supply(args)
  }

  static ftMetadata(
    account: Account,
    tokenId: string,
    args: FtMetaDataArgs
  ): Promise<FungibleTokenMetadata> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).ft_metadata(args)
  }

  static ftTransfer(
    account: Account,
    tokenId: string,
    options: ContractCallOptions<FtTransferArgs>
  ): Promise<void> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).ft_transfer(options)
  }

  static ftTransferCall(
    account: Account,
    tokenId: string,
    options: ContractCallOptions<FtTransferCallArgs>
  ): Promise<string> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).ft_transfer_call(options)
  }

  static storageBalanceOf(
    account: Account,
    tokenId: string,
    args: StorageBalanceOfArgs
  ): Promise<StorageBalance | null> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).storage_balance_of(args)
  }

  static storageBalanceBounds(
    account: Account,
    tokenId: string,
    args: StorageBalanceBoundsArgs
  ): Promise<StorageBalanceBounds> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).storage_balance_bounds(args)
  }

  static storageDeposit(
    account: Account,
    tokenId: string,
    options: ContractCallOptions<StorageDepositArgs>
  ): Promise<StorageBalance> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).storage_deposit(options)
  }

  static storageWithdraw(
    account: Account,
    tokenId: string,
    options: ContractCallOptions<StorageWithdrawArgs>
  ): Promise<StorageBalance> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).storage_withdraw(options)
  }

  static storageUnregister(
    account: Account,
    tokenId: string,
    options: ContractCallOptions<StorageUnregisterArgs>
  ): Promise<boolean> {
    return new FungibleTokenContract(
      account,
      tokenId,
      FungibleTokenUtils.fungibleTokenContractMethods
    ).storage_unregister(options)
  }
}

'''
'''--- src/utils/local-storage-utils.ts ---
export class LocalStorageUtils {
  static getValue<T>(key: string): T | null {
    const json = localStorage.getItem(key)
    if(json === null) {
      return null
    }
    try {
      return JSON.parse(json)
    } catch (err) {
      console.error(err)
      return null
    }
  }

  static setValue(key: string, value: any) {
    const json = JSON.stringify(value)
    localStorage.setItem(key, json)
  }

  static removeValue(key: string) {
    localStorage.removeItem(key)
  }
}

'''
'''--- tsconfig.json ---
{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "suppressImplicitAnyIndexErrors": true
  },
  "include": [
    "src"
  ]
}

'''